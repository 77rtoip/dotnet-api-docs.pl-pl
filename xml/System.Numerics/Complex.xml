<Type Name="Complex" FullName="System.Numerics.Complex">
  <Metadata><Meta Name="ms.openlocfilehash" Value="91e3f8eb255ecea49f114ef22b5e0be3116e0a0f" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52737038" /></Metadata><TypeSignature Language="C#" Value="public struct Complex : IEquatable&lt;System.Numerics.Complex&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit Complex extends System.ValueType implements class System.IEquatable`1&lt;valuetype System.Numerics.Complex&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Numerics.Complex" />
  <TypeSignature Language="VB.NET" Value="Public Structure Complex&#xA;Implements IEquatable(Of Complex), IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class Complex : IEquatable&lt;System::Numerics::Complex&gt;, IFormattable" />
  <TypeSignature Language="F#" Value="type Complex = struct&#xA;    interface IFormattable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Numerics</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Numerics</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Numerics.Complex&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4fdb9-101">Reprezentuje liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-101">Represents a complex number.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-102">Liczby zespolonej jest liczbą, która składa się z częścią liczba rzeczywista i urojone numer.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-102">A complex number is a number that comprises a real number part and an imaginary number part.</span></span> <span data-ttu-id="4fdb9-103">Z liczby zespolonej są zwykle zapisywane w postaci z = x + yi, gdzie *x* i *y* są liczby rzeczywiste i *i* jest jednostką imaginery, która ma właściwość *i* <sup>2</sup> = -1.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-103">A complex number z is usually written in the form z = x + yi, where *x* and *y* are real numbers, and *i* is the imaginary unit that has the property *i*<sup>2</sup> = -1.</span></span> <span data-ttu-id="4fdb9-104">Rzeczywiste część liczby zespolonej jest reprezentowany przez *x*, i urojone części liczb zespolonych jest reprezentowany przez *y*.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-104">The real part of the complex number is represented by *x*, and the imaginary part of the complex number is represented by *y*.</span></span>  
  
 <span data-ttu-id="4fdb9-105"><xref:System.Numerics.Complex> Kartezjański układ współrzędnych (real, imaginery) używa typ podczas tworzenia wystąpienia i manipulowanie nimi liczby zespolone.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-105">The <xref:System.Numerics.Complex> type uses the Cartesian coordinate system (real, imaginary) when instantiating and manipulating complex numbers.</span></span> <span data-ttu-id="4fdb9-106">Liczby zespolonej może być reprezentowany jako punkt w dwuwymiarowej współrzędnych, który jest znany jako płaszczyzny złożone.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-106">A complex number can be represented as a point in a two-dimensional coordinate system, which is known as the complex plane.</span></span> <span data-ttu-id="4fdb9-107">Rzeczywiste część liczby zespolonej znajduje się na osi x (osi poziomej) i urojone części znajduje się na osi y (oś pionowa).</span><span class="sxs-lookup"><span data-stu-id="4fdb9-107">The real part of the complex number is positioned on the x-axis (the horizontal axis), and the imaginary part is positioned on the y-axis (the vertical axis).</span></span>  
  
 <span data-ttu-id="4fdb9-108">Kiedykolwiek na płaszczyźnie złożone również mogą być wyrażone w oparciu o wartość bezwzględna za pomocą systemu Utwórz Współrzędne biegunowe.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-108">Any point in the complex plane can also be expressed based on its absolute value, by using the polar coordinate system.</span></span> <span data-ttu-id="4fdb9-109">Punkt w Współrzędne biegunowe charakteryzuje się dwie liczby:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-109">In polar coordinates, a point is characterized by two numbers:</span></span>  
  
-   <span data-ttu-id="4fdb9-110">Jego wielkości, która jest odległość punktu ze źródła (oznacza to, że 0,0 lub punktu, w jakim przecięcia osi x i y).</span><span class="sxs-lookup"><span data-stu-id="4fdb9-110">Its magnitude, which is the distance of the point from the origin (that is, 0,0, or the point at which the x-axis and the y-axis intersect).</span></span>  
  
-   <span data-ttu-id="4fdb9-111">Jego faza, która to kąt między osią rzeczywistych i wiersz pobierane z punktu początkowego do punktu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-111">Its phase, which is the angle between the real axis and the line drawn from the origin to the point.</span></span>  
  
## <a name="instantiating-a-complex-number"></a><span data-ttu-id="4fdb9-112">Utworzenie wystąpienia liczby zespolonej</span><span class="sxs-lookup"><span data-stu-id="4fdb9-112">Instantiating a Complex Number</span></span>  
 <span data-ttu-id="4fdb9-113">Można przypisać wartość do liczby zespolonej w jednym z następujących sposobów:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-113">You can assign a value to a complex number in one of the following ways:</span></span>  
  
-   <span data-ttu-id="4fdb9-114">Przekazując dwa <xref:System.Double> wartości dla jego konstruktora.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-114">By passing two <xref:System.Double> values to its constructor.</span></span> <span data-ttu-id="4fdb9-115">Pierwsza wartość reprezentuje część rzeczywista liczby zespolonej, a druga wartość reprezentuje jego urojone części.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-115">The first value represents the real part of the complex number, and the second value represents its imaginary part.</span></span> <span data-ttu-id="4fdb9-116">Wartości te reprezentują pozycji liczby zespolonej w dwuwymiarowej kartezjański układ współrzędnych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-116">These values represent the position of the complex number in the two-dimensional Cartesian coordinate system.</span></span>  
  
-   <span data-ttu-id="4fdb9-117">Przez wywołanie metody statyczne (`Shared` w języku Visual Basic) <xref:System.Numerics.Complex.FromPolarCoordinates%2A?displayProperty=nameWithType> metodę w celu utworzenia liczby zespolonej z jego Współrzędne biegunowe.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-117">By calling the static (`Shared` in Visual Basic) <xref:System.Numerics.Complex.FromPolarCoordinates%2A?displayProperty=nameWithType> method to create a complex number from its polar coordinates.</span></span>  
  
-   <span data-ttu-id="4fdb9-118">Przypisując <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.Single>, lub <xref:System.Double> wartość <xref:System.Numerics.Complex> obiektu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-118">By assigning a <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.Single>, or <xref:System.Double> value to a <xref:System.Numerics.Complex> object.</span></span> <span data-ttu-id="4fdb9-119">Wartość staje się częścią rzeczywistych liczby zespolonej, a jego urojone części jest równa 0.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-119">The value becomes the real part of the complex number, and its imaginary part equals 0.</span></span>  
  
-   <span data-ttu-id="4fdb9-120">Rzutowanie (w języku C#) lub konwersji (w języku Visual Basic) <xref:System.Decimal> lub <xref:System.Numerics.BigInteger> wartość <xref:System.Numerics.Complex> obiektu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-120">By casting (in C#) or converting (in Visual Basic) a <xref:System.Decimal> or <xref:System.Numerics.BigInteger> value to a <xref:System.Numerics.Complex> object.</span></span> <span data-ttu-id="4fdb9-121">Wartość staje się częścią rzeczywistych liczby zespolonej, a jego urojone części jest równa 0.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-121">The value becomes the real part of the complex number, and its imaginary part equals 0.</span></span>  
  
-   <span data-ttu-id="4fdb9-122">Przypisując liczby zespolonej, który jest zwracany przez metodę lub operatora <xref:System.Numerics.Complex> obiektu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-122">By assigning the complex number that is returned by a method or operator to a <xref:System.Numerics.Complex> object.</span></span> <span data-ttu-id="4fdb9-123">Na przykład <xref:System.Numerics.Complex.Add%2A?displayProperty=nameWithType> jest metoda statyczna zwraca liczby zespolonej, która jest sumą dwóch liczb zespolonych i <xref:System.Numerics.Complex.op_Addition%2A?displayProperty=nameWithType> operator dodaje dwie liczby zespolone i zwraca wynik.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-123">For example, <xref:System.Numerics.Complex.Add%2A?displayProperty=nameWithType> is a static method that returns a complex number that is the sum of two complex numbers, and the <xref:System.Numerics.Complex.op_Addition%2A?displayProperty=nameWithType> operator adds two complex numbers and returns the result.</span></span>  
  
 <span data-ttu-id="4fdb9-124">W poniższym przykładzie pokazano każdego z tych pięciu sposobów przypisywania wartości do liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-124">The following example demonstrates each of these five ways of assigning a value to a complex number.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/create1.cs#2)]
 [!code-vb[System.Numerics.Complex.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/create1.vb#2)]  
  
## <a name="operations-with-complex-numbers"></a><span data-ttu-id="4fdb9-125">Operacje na liczbach zespolonych</span><span class="sxs-lookup"><span data-stu-id="4fdb9-125">Operations with Complex Numbers</span></span>  
 <span data-ttu-id="4fdb9-126"><xref:System.Numerics.Complex> Struktury w programie .NET Framework zawiera elementy członkowskie, które zapewniają następujące funkcje:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-126">The <xref:System.Numerics.Complex> structure in the .NET Framework includes members that provide the following functionality:</span></span>  
  
-   <span data-ttu-id="4fdb9-127">Metody do porównania dwóch liczb zespolonych, aby ustalić, czy są równe.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-127">Methods to compare two complex numbers to determine whether they are equal.</span></span>  
  
-   <span data-ttu-id="4fdb9-128">Operatory, aby wykonywać operacje arytmetyczne na liczbach zespolonych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-128">Operators to perform arithmetic operations on complex numbers.</span></span> <span data-ttu-id="4fdb9-129"><xref:System.Numerics.Complex> Operatory umożliwiają wykonywanie Dodawanie, odejmowanie, mnożenie, dzielenie i Negacja Jednoargumentowa liczbach zespolonych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-129"><xref:System.Numerics.Complex> operators enable you to perform addition, subtraction, multiplication, division, and unary negation with complex numbers.</span></span>  
  
-   <span data-ttu-id="4fdb9-130">Metody do wykonywania innych wartości liczbowych operacji na liczbach zespolonych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-130">Methods to perform other numerical operations on complex numbers.</span></span> <span data-ttu-id="4fdb9-131">Oprócz cztery podstawowe operacje arytmetyczne można zwiększyć liczby zespolonej do określonej potęgi, Znajdź pierwiastek kwadratowy liczby zespolonej i uzyskać wartość bezwzględną liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-131">In addition to the four basic arithmetic operations, you can raise a complex number to a specified power, find the square root of a complex number, and get the absolute value of a complex number.</span></span>  
  
-   <span data-ttu-id="4fdb9-132">Wykonaj operacje trygonometryczne na liczbach zespolonych metody.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-132">Methods to perform trigonometric operations on complex numbers.</span></span> <span data-ttu-id="4fdb9-133">Na przykład można obliczyć tangens kąta reprezentowany przez liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-133">For example, you can calculate the tangent of an angle represented by a complex number.</span></span>  
  
 <span data-ttu-id="4fdb9-134">Należy zauważyć, że ponieważ <xref:System.Numerics.Complex.Real%2A> i <xref:System.Numerics.Complex.Imaginary%2A> są właściwości tylko do odczytu, nie można zmodyfikować wartości istniejącego <xref:System.Numerics.Complex> obiektu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-134">Note that, because the <xref:System.Numerics.Complex.Real%2A> and  <xref:System.Numerics.Complex.Imaginary%2A> properties are read-only, you cannot modify the value of an existing <xref:System.Numerics.Complex> object.</span></span>  <span data-ttu-id="4fdb9-135">Wszystkie metody, które wykonują operację na <xref:System.Numerics.Complex> numer, jeśli ich wartości zwracanej jest typu <xref:System.Numerics.Complex>, zwraca nową <xref:System.Numerics.Complex> numer.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-135">All methods that perform an operation on a <xref:System.Numerics.Complex> number, if their return value is of type <xref:System.Numerics.Complex>, return a new <xref:System.Numerics.Complex> number.</span></span>  
  
## <a name="precision-and-complex-numbers"></a><span data-ttu-id="4fdb9-136">Precyzja i liczby zespolone</span><span class="sxs-lookup"><span data-stu-id="4fdb9-136">Precision and Complex Numbers</span></span>  
 <span data-ttu-id="4fdb9-137">Rzeczywiste i urojone części liczb zespolonych są reprezentowane przez dwie wartości zmiennoprzecinkowe podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-137">The real and imaginary parts of a complex number are represented by two double-precision floating-point values.</span></span> <span data-ttu-id="4fdb9-138">Oznacza to, że <xref:System.Numerics.Complex> wartości, takich jak różne wartości zmiennoprzecinkowe podwójnej precyzji, mogą tracić dokładność wyniku operacji liczbowych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-138">This means that <xref:System.Numerics.Complex> values, like double-precision floating-point values, can lose precision as a result of numerical operations.</span></span> <span data-ttu-id="4fdb9-139">Oznacza to, że to strict porównania dla równości dwóch <xref:System.Numerics.Complex> wartości może zakończyć się niepowodzeniem, nawet w przypadku różnicy między dwiema wartościami ze względu na utratę precyzji.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-139">This means that strict comparisons for equality of two <xref:System.Numerics.Complex> values may fail, even if the difference between the two values is due to a loss of precision.</span></span> <span data-ttu-id="4fdb9-140">Aby uzyskać więcej informacji, zobacz <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-140">For more information, see <xref:System.Double>.</span></span>  
  
 <span data-ttu-id="4fdb9-141">Na przykład przeprowadzania potęgowania logarytm liczby powinien zwrócić oryginalny numer.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-141">For example, performing exponentiation on the logarithm of a number should return the original number.</span></span> <span data-ttu-id="4fdb9-142">Jednak w niektórych przypadkach utratę precyzji wartości zmiennoprzecinkowych może spowodować niewielkie różnice między dwiema wartościami, tak jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-142">However, in some cases, the loss of precision of floating-point values can cause slight differences between the two values, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/precision1.cs#5)]
 [!code-vb[System.Numerics.Complex.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/precision1.vb#5)]  
  
 <span data-ttu-id="4fdb9-143">Podobnie poniższy przykład, który oblicza pierwiastek kwadratowy liczby <xref:System.Numerics.Complex> numer generuje wyniki nieco inaczej na 32-bitowych i IA64 wersje programu .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-143">Similarly, the following example, which calculates the square root of a <xref:System.Numerics.Complex> number, produces slightly different results on the 32-bit and IA64 versions of the .NET Framework.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/precision1.cs#6)]
 [!code-vb[System.Numerics.Complex.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/precision1.vb#6)]  
  
## <a name="complex-numbers-infinity-and-nan"></a><span data-ttu-id="4fdb9-144">Liczby zespolone, nieskończoność i NaN</span><span class="sxs-lookup"><span data-stu-id="4fdb9-144">Complex Numbers, Infinity, and NaN</span></span>  
 <span data-ttu-id="4fdb9-145">Rzeczywiste i urojone części liczb zespolonych są reprezentowane przez <xref:System.Double> wartości.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-145">The real and imaginary parts of a complex number are represented by <xref:System.Double> values.</span></span> <span data-ttu-id="4fdb9-146">Oprócz od <xref:System.Double.MinValue?displayProperty=nameWithType> do <xref:System.Double.MaxValue?displayProperty=nameWithType>, rzeczywiste i urojone części liczby zespolonej może mieć wartość <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, lub <xref:System.Double.NaN?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-146">In addition to ranging from <xref:System.Double.MinValue?displayProperty=nameWithType> to <xref:System.Double.MaxValue?displayProperty=nameWithType>, the real or imaginary part of a complex number can have a value of <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, or <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="4fdb9-147"><xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, i <xref:System.Double.NaN?displayProperty=nameWithType> wszystkie propagowane podczas korzystania z żadnych operacji arytmetycznych lub trygonometrycznych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-147"><xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, and <xref:System.Double.NaN?displayProperty=nameWithType> all propagate in any arithmetic or trigonometric operation.</span></span>  
  
 <span data-ttu-id="4fdb9-148">W poniższym przykładzie, dzielenie przez <xref:System.Numerics.Complex.Zero> generuje liczby zespolonej, w których rzeczywiste i urojone części są <xref:System.Double.NaN?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-148">In the following example, division by <xref:System.Numerics.Complex.Zero> produces a complex number whose real and imaginary parts are both <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="4fdb9-149">W wyniku wykonywania mnożenia wartość tworzy również liczby zespolonej, w których rzeczywiste i urojone części są <xref:System.Double.NaN?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-149">As a result, performing multiplication with this value also produces a complex number whose real and imaginary parts are <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="4fdb9-150">Podobnie, wykonując mnożenia, która przepełnienia zakres <xref:System.Double> typu generuje liczby zespolonej, w których części rzeczywistych <xref:System.Double.NaN?displayProperty=nameWithType> i którego urojone części <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-150">Similarly, performing a multiplication that overflows the range of the <xref:System.Double> type produces a complex number whose real part is <xref:System.Double.NaN?displayProperty=nameWithType> and whose imaginary part is <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="4fdb9-151">Następnie wykonywanie dzielenia o tym numerze złożone zwraca liczby zespolonej, w których części rzeczywistych <xref:System.Double.NaN?displayProperty=nameWithType> i którego urojone części <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-151">Subsequently performing division with this complex number returns a complex number whose real part is <xref:System.Double.NaN?displayProperty=nameWithType> and whose imaginary part is <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/nan1.cs#3)]
 [!code-vb[System.Numerics.Complex.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/nan1.vb#3)]  
  
 <span data-ttu-id="4fdb9-152">Operacje matematyczne na liczbach zespolonych, które są nieprawidłowe lub który przepełnienie <xref:System.Double> typu danych nie zgłasza wyjątku.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-152">Mathematical operations with complex numbers that are invalid or that overflow the range of the <xref:System.Double> data type do not throw an exception.</span></span> <span data-ttu-id="4fdb9-153">Zamiast tego zwracają <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, lub <xref:System.Double.NaN?displayProperty=nameWithType> w następujących warunkach:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-153">Instead, they return a <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, or <xref:System.Double.NaN?displayProperty=nameWithType> under the following conditions:</span></span>  
  
-   <span data-ttu-id="4fdb9-154">Dzielenia przez zero zwraca liczbę dodatnią <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-154">The division of a positive number by zero returns <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="4fdb9-155">Każdej operacji, która przepełnienia górną granicę <xref:System.Double> zwraca typ danych <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-155">Any operation that overflows the upper bound of the <xref:System.Double> data type returns <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="4fdb9-156">Dzielenie liczby ujemnej, zerowego zwraca <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-156">The division of a negative number by zero returns <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="4fdb9-157">Każdej operacji, która przepełnienia dolna granica <xref:System.Double> zwraca typ danych <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-157">Any operation that overflows the lower bound of the <xref:System.Double> data type returns <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="4fdb9-158">Zwraca dzielenia przez zero zero <xref:System.Double.NaN?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-158">The division of a zero by zero returns <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="4fdb9-159">Każdej operacji, która jest wykonywana w przypadku argumentów operacji, których wartości są <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, lub <xref:System.Double.NaN?displayProperty=nameWithType> zwraca <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, lub <xref:System.Double.NaN?displayProperty=nameWithType>, w zależności od określonej operacji.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-159">Any operation that is performed on operands whose values are <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, or <xref:System.Double.NaN?displayProperty=nameWithType> returns <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, or <xref:System.Double.NaN?displayProperty=nameWithType>, depending on the specific operation.</span></span>  
  
 <span data-ttu-id="4fdb9-160">Należy zauważyć, że dotyczy to wszelkie pośrednie obliczenia wykonywane przez metodę.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-160">Note that this applies to any intermediate calculations performed by a method.</span></span> <span data-ttu-id="4fdb9-161">Na przykład, mnożenie `new Complex(9e308, 9e308) and new Complex(2.5, 3.5)` używa formuły (ac - bd) + (ad + bc) i.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-161">For example, the multiplication of `new Complex(9e308, 9e308) and new Complex(2.5, 3.5)` uses the formula (ac - bd) + (ad + bc)i.</span></span> <span data-ttu-id="4fdb9-162">Obliczanie rzeczywisty składnik, która wynika z mnożeniem ocenia 9e308 wyrażenie \* 2.5 — 9e308 \* 3.5.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-162">The calculation of the real component that results from the multiplication evaluates the expression 9e308 \* 2.5 - 9e308 \* 3.5.</span></span> <span data-ttu-id="4fdb9-163">Zwraca każdego mnożenia pośredni, w tym wyrażeniu <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>i próbę na potrzeby odejmowania <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> z <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> zwraca <xref:System.Double.NaN?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-163">Each intermediate multiplication in this expression returns <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, and the attempt to subtract <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> from <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> returns <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span>  
  
## <a name="formatting-a-complex-number"></a><span data-ttu-id="4fdb9-164">Formatowanie liczby zespolonej</span><span class="sxs-lookup"><span data-stu-id="4fdb9-164">Formatting a Complex Number</span></span>  
 <span data-ttu-id="4fdb9-165">Domyślnie reprezentację liczby zespolonej ma postać `(` *rzeczywistych* `,` *urojone*`)`, gdzie *rzeczywistych* i *urojone* są ciągów reprezentujących <xref:System.Double> wartości, które tworzą liczby zespolonej rzeczywiste i urojone części.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-165">By default, the string representation of a complex number takes the form `(`*real*`,` *imaginary*`)`, where *real* and *imaginary* are the string representations of the <xref:System.Double> values that form the complex number's real and imaginary components.</span></span> <span data-ttu-id="4fdb9-166">Niektóre przeciążenia <xref:System.Numerics.Complex.ToString%2A> metody umożliwienia dostosowania ciągów reprezentujących tych <xref:System.Double> wartości, aby odzwierciedlić Konwencji formatowania określonej kultury lub pojawią się w określonym formacie definicją liczbowe standardowych lub niestandardowych Ciąg formatu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-166">Some overloads of the <xref:System.Numerics.Complex.ToString%2A> method allow customization of the string representations of these <xref:System.Double> values to reflect the formatting conventions of a particular culture or to appear in a particular format defined by a standard or custom numeric format string.</span></span> <span data-ttu-id="4fdb9-167">(Aby uzyskać więcej informacji, zobacz [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) i [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).)</span><span class="sxs-lookup"><span data-stu-id="4fdb9-167">(For more information, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).)</span></span>  
  
 <span data-ttu-id="4fdb9-168">Typowe sposoby może przedstawiać reprezentację liczby zespolonej ma postać + bi, gdzie jest liczby zespolonej rzeczywisty składnik, a b liczby zespolonej urojone części.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-168">One of the more common ways of expressing the string representation of a complex number takes the form a + bi, where a is the complex number's real component, and b is the complex number's imaginary component.</span></span> <span data-ttu-id="4fdb9-169">W elektrotechnice, liczby zespolonej najczęściej jest wyrażona jako + bj.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-169">In electrical engineering, a complex number is most commonly expressed as a + bj.</span></span> <span data-ttu-id="4fdb9-170">Reprezentacja tekstowa liczby zespolonej może zwrócić w jednej z tych dwóch formach.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-170">You can return the string representation of a complex number in either of these two forms.</span></span> <span data-ttu-id="4fdb9-171">Aby to zrobić, należy zdefiniować dostawcy niestandardowego formatu implementując <xref:System.ICustomFormatter> i <xref:System.IFormatProvider> interfejsów, a następnie wywołania <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-171">To do this, define a custom format provider by implementing the <xref:System.ICustomFormatter> and <xref:System.IFormatProvider> interfaces, and then call the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="4fdb9-172">W poniższym przykładzie zdefiniowano `ComplexFormatter` klasa, która reprezentuje liczby zespolonej jako ciąg w postaci + bi lub + bj.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-172">The following example defines a `ComplexFormatter` class that represents a complex number as a string in the form of either a + bi or a + bj.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/customfmt1.cs#1)]
 [!code-vb[System.Numerics.Complex.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/customfmt1.vb#1)]  
  
 <span data-ttu-id="4fdb9-173">W poniższym przykładzie użyto tego niestandardowego elementu formatującego następnie, aby wyświetlić reprezentację liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-173">The following example then uses this custom formatter to display the string representation of a complex number.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/customfmt1.cs#4)]
 [!code-vb[System.Numerics.Complex.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/customfmt1.vb#4)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Complex (double real, double imaginary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 real, float64 imaginary) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.#ctor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (real As Double, imaginary As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Complex(double real, double imaginary);" />
      <MemberSignature Language="F#" Value="new System.Numerics.Complex : double * double -&gt; System.Numerics.Complex" Usage="new System.Numerics.Complex (real, imaginary)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="real" Type="System.Double" />
        <Parameter Name="imaginary" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="real"><span data-ttu-id="4fdb9-174">Rzeczywiste część liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-174">The real part of the complex number.</span></span></param>
        <param name="imaginary"><span data-ttu-id="4fdb9-175">Urojone części liczb zespolonych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-175">The imaginary part of the complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-176">Inicjuje nowe wystąpienie klasy <see cref="T:System.Numerics.Complex" /> struktury przy użyciu określonych wartości rzeczywiste i urojone.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-176">Initializes a new instance of the <see cref="T:System.Numerics.Complex" /> structure using the specified real and imaginary values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-177">`real` Lub `imaginary` argumenty mogą tracić dokładność, jeśli są typy danych, które wymaga jawnego rzutowania na <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-177">The `real` or `imaginary` arguments may lose precision if they are data types that require an explicit cast to <xref:System.Double>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-178">Poniższy przykład tworzy dwie liczby zespolone, a następnie są one używane w przypadku operacji dodawania, odejmowania, mnożenia i dzielenia.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-178">The following example instantiates two complex numbers, and then uses them in addition, subtraction, multiplication, and division operations.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.ctor/cs/ctor1.cs#1)]
 [!code-vb[System.Numerics.Complex.ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.ctor/vb/ctor1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static double Abs (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Abs(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Abs(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Complex) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Abs(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Abs : System.Numerics.Complex -&gt; double" Usage="System.Numerics.Complex.Abs value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-179">Liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-179">A complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-180">Pobiera wartość bezwzględna (lub wielkości) liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-180">Gets the absolute value (or magnitude) of a complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-181">Wartość bezwzględna <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-181">The absolute value of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-182">Wartość bezwzględna liczby zespolonej jest równoważne z jej <xref:System.Numerics.Complex.Magnitude%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-182">The absolute value of a complex number is equivalent to its <xref:System.Numerics.Complex.Magnitude%2A> property.</span></span> <span data-ttu-id="4fdb9-183">Wartość bezwzględna liczby rzeczywistym + bi jest obliczana w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-183">The absolute value of a real number a + bi is calculated as follows:</span></span>  
  
-   <span data-ttu-id="4fdb9-184">Jeśli b = 0, wynik jest równy 0.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-184">If b = 0, the result is 0.</span></span>  
  
-   <span data-ttu-id="4fdb9-185">Jeśli > b, wynik jest \*<xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(1 + b<sup>2</sup>/a<sup>2</sup>).</span><span class="sxs-lookup"><span data-stu-id="4fdb9-185">If a > b, the result is a \*<xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(1 + b<sup>2</sup>/a<sup>2</sup>).</span></span>  
  
-   <span data-ttu-id="4fdb9-186">Jeśli b >, wynik jest b \* <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(1 +<sup>2</sup>/b<sup>2</sup>).</span><span class="sxs-lookup"><span data-stu-id="4fdb9-186">If b > a, the result is b \* <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(1 + a<sup>2</sup>/b<sup>2</sup>).</span></span>  
  
 <span data-ttu-id="4fdb9-187">Jeśli obliczenie wartości bezwzględne powoduje przepełnienie, metoda zwraca <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> lub <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-187">If the calculation of the absolute value results in an overflow, the method returns either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="4fdb9-188">Jeśli <xref:System.Numerics.Complex.Real%2A> lub <xref:System.Numerics.Complex.Imaginary%2A> właściwość <xref:System.Double.NaN?displayProperty=nameWithType> i innych właściwości nie jest ani <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> ani <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, metoda zwraca <xref:System.Double.NaN?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-188">If either the <xref:System.Numerics.Complex.Real%2A> or <xref:System.Numerics.Complex.Imaginary%2A> property is <xref:System.Double.NaN?displayProperty=nameWithType> and the other property is neither <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> nor <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, the method returns <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-189">W poniższym przykładzie oblicza wartość bezwzględną liczby zespolonej i pokazuje, że jest odpowiednikiem wartości <xref:System.Numerics.Complex.Magnitude%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-189">The following example calculates the absolute value of a complex number and demonstrates that it is equivalent to the value of the <xref:System.Numerics.Complex.Magnitude%2A> property.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Abs#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.abs/cs/abs1.cs#1)]
 [!code-vb[System.Numerics.Complex.Abs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.abs/vb/abs1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.Complex.Magnitude" />
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Acos (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Acos(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Acos(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Acos (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Acos(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Acos : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Acos value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-190">Liczby zespolonej, który reprezentuje cosinus.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-190">A complex number that represents a cosine.</span></span></param>
        <summary><span data-ttu-id="4fdb9-191">Zwraca kąt, będącego arcus cosinus liczby zespolonej określony.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-191">Returns the angle that is the arc cosine of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-192">Kąt wyrażony w radianach, czyli arcus cosinus z <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-192">The angle, measured in radians, which is the arc cosine of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-193"><xref:System.Numerics.Complex.Acos%2A> Metodę dla liczby zespolone odnosi się do <xref:System.Math.Acos%2A?displayProperty=nameWithType> metody dla liczb rzeczywistych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-193">The <xref:System.Numerics.Complex.Acos%2A> method for complex numbers corresponds to the <xref:System.Math.Acos%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="4fdb9-194"><xref:System.Numerics.Complex.Acos%2A> Metoda wykorzystuje następującą formułę:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-194">The <xref:System.Numerics.Complex.Acos%2A> method uses the following formula:</span></span>  
  
 <span data-ttu-id="4fdb9-195">(-<xref:System.Numerics.Complex.ImaginaryOne>) \* <xref:System.Numerics.Complex.Log%2A>(`value` + <xref:System.Numerics.Complex.ImaginaryOne>\*<xref:System.Numerics.Complex.Sqrt%2A>(<xref:System.Numerics.Complex.One> - `value` \* `value`)))</span><span class="sxs-lookup"><span data-stu-id="4fdb9-195">(-<xref:System.Numerics.Complex.ImaginaryOne>) \* <xref:System.Numerics.Complex.Log%2A>(`value` + <xref:System.Numerics.Complex.ImaginaryOne>\*<xref:System.Numerics.Complex.Sqrt%2A>(<xref:System.Numerics.Complex.One> - `value` \* `value`)))</span></span>    
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-196">W poniższym przykładzie pokazano <xref:System.Numerics.Complex.Acos%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-196">The following example illustrates the <xref:System.Numerics.Complex.Acos%2A> method.</span></span> <span data-ttu-id="4fdb9-197">Pokazuje, przekazując wartość zwrócona przez obiekt <xref:System.Numerics.Complex.Acos%2A> metody <xref:System.Numerics.Complex.Cos%2A> metoda zwraca oryginalny <xref:System.Numerics.Complex> wartość.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-197">It shows that passing the value returned by the <xref:System.Numerics.Complex.Acos%2A> method to the <xref:System.Numerics.Complex.Cos%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Acos#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.acos/cs/acos1.cs#1)]
 [!code-vb[System.Numerics.Complex.Acos#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.acos/vb/acos1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Cos(System.Numerics.Complex)" />
        <altmember cref="M:System.Math.Acos(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Add (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Add(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Add(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member Add : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Add (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="4fdb9-198">Pierwsza liczba złożonych do dodania.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-198">The first complex number to add.</span></span></param>
        <param name="right"><span data-ttu-id="4fdb9-199">Druga liczba złożonych do dodania.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-199">The second complex number to add.</span></span></param>
        <summary><span data-ttu-id="4fdb9-200">Dodaje dwie liczby zespolone i zwraca wynik.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-200">Adds two complex numbers and returns the result.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-201">Suma <paramref name="left" /> i <paramref name="right" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-201">The sum of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-202">Dodanie złożony numer + analizy biznesowej, a druga liczba złożonych, c + di, ma następującą postać:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-202">The addition of a complex number, a + bi, and a second complex number, c + di, takes the following form:</span></span>  
  
 <span data-ttu-id="4fdb9-203">(a + c) + (b + d) i.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-203">(a + c) + (b + d)i.</span></span>  
  
 <span data-ttu-id="4fdb9-204">Jeśli metoda wyniki wywołania przepełnienie w czasie albo rzeczywiste i urojone części, wartość składnik to <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> lub <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-204">If the method call results in an overflow in either the real or imaginary component, the value of the component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="4fdb9-205">Można używać języków, które nie obsługują operatorów niestandardowych <xref:System.Numerics.Complex.Add%2A> metodę, aby przeprowadzić Dodawanie liczbach zespolonych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-205">Languages that do not support custom operators can use the <xref:System.Numerics.Complex.Add%2A> method to perform addition with complex numbers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-206">Poniższy przykład ilustruje dodanie liczbach zespolonych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-206">The following example illustrates addition with complex numbers.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.add/cs/add1.cs#1)]
 [!code-vb[System.Numerics.Complex.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.add/vb/add1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Asin (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Asin(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Asin(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Asin (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Asin(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Asin : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Asin value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-207">Liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-207">A complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-208">Zwraca kąt, będącego funkcji arcus sinus liczby zespolonej określony.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-208">Returns the angle that is the arc sine of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-209">Czyli arcus sinus kąta z <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-209">The angle which is the arc sine of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-210"><xref:System.Numerics.Complex.Asin%2A> Metodę dla liczby zespolone odnosi się do <xref:System.Math.Asin%2A?displayProperty=nameWithType> metody dla liczb rzeczywistych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-210">The <xref:System.Numerics.Complex.Asin%2A> method for complex numbers corresponds to the <xref:System.Math.Asin%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="4fdb9-211"><xref:System.Numerics.Complex.Asin%2A> Metoda wykorzystuje następującą formułę:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-211">The <xref:System.Numerics.Complex.Asin%2A> method uses the following formula:</span></span>  
  
 <span data-ttu-id="4fdb9-212">-<xref:System.Numerics.Complex.ImaginaryOne> \* <xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.ImaginaryOne> \* wartość + <xref:System.Numerics.Complex.Sqrt%2A>(<xref:System.Numerics.Complex.One> — wartość \* wartość))</span><span class="sxs-lookup"><span data-stu-id="4fdb9-212">-<xref:System.Numerics.Complex.ImaginaryOne> \* <xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.ImaginaryOne> \* value + <xref:System.Numerics.Complex.Sqrt%2A>(<xref:System.Numerics.Complex.One> - value \* value))</span></span>    
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-213">W poniższym przykładzie pokazano <xref:System.Numerics.Complex.Asin%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-213">The following example illustrates the <xref:System.Numerics.Complex.Asin%2A> method.</span></span> <span data-ttu-id="4fdb9-214">Pokazuje, przekazując wartość zwrócona przez obiekt <xref:System.Numerics.Complex.Asin%2A> metody <xref:System.Numerics.Complex.Sin%2A> metoda zwraca oryginalny <xref:System.Numerics.Complex> wartość.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-214">It shows that passing the value returned by the <xref:System.Numerics.Complex.Asin%2A> method to the <xref:System.Numerics.Complex.Sin%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Asin#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.asin/cs/asin1.cs#1)]
 [!code-vb[System.Numerics.Complex.Asin#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.asin/vb/asin1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Sin(System.Numerics.Complex)" />
        <altmember cref="M:System.Math.Asin(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Atan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Atan (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Atan(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Atan(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Atan(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Atan : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Atan value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-215">Liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-215">A complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-216">Zwraca kąt, będącego funkcji arcus tangens liczby zespolonej określony.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-216">Returns the angle that is the arc tangent of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-217">Będący arcus tangens kąta <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-217">The angle that is the arc tangent of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-218"><xref:System.Numerics.Complex.Atan%2A> Metodę dla liczby zespolone odnosi się do <xref:System.Math.Atan%2A?displayProperty=nameWithType> metody dla liczb rzeczywistych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-218">The <xref:System.Numerics.Complex.Atan%2A> method for complex numbers corresponds to the <xref:System.Math.Atan%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="4fdb9-219"><xref:System.Numerics.Complex.Atan%2A> Metoda wykorzystuje następującą formułę:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-219">The <xref:System.Numerics.Complex.Atan%2A> method uses the following formula:</span></span>  
  
 <span data-ttu-id="4fdb9-220"><xref:System.Numerics.Complex.ImaginaryOne> / Nowy złożonych (w wersji 2.0, 0.0)) \* (<xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.One>  -  <xref:System.Numerics.Complex.ImaginaryOne> \* wartość)- <xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.One> + ImaginaryOne \* wartość)</span><span class="sxs-lookup"><span data-stu-id="4fdb9-220"><xref:System.Numerics.Complex.ImaginaryOne> / new Complex(2.0, 0.0)) \* (<xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.One> - <xref:System.Numerics.Complex.ImaginaryOne> \* value) - <xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.One> + ImaginaryOne \* value)</span></span>   
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-221">W poniższym przykładzie pokazano <xref:System.Numerics.Complex.Atan%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-221">The following example illustrates the <xref:System.Numerics.Complex.Atan%2A> method.</span></span> <span data-ttu-id="4fdb9-222">Pokazuje, przekazując wartość zwrócona przez obiekt <xref:System.Numerics.Complex.Atan%2A> metody <xref:System.Numerics.Complex.Tan%2A> metoda zwraca oryginalny <xref:System.Numerics.Complex> wartość.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-222">It shows that passing the value returned by the <xref:System.Numerics.Complex.Atan%2A> method to the <xref:System.Numerics.Complex.Tan%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Atan#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.atan/cs/atan1.cs#1)]
 [!code-vb[System.Numerics.Complex.Atan#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.atan/vb/atan1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Tan(System.Numerics.Complex)" />
        <altmember cref="M:System.Math.Atan(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Conjugate">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Conjugate (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Conjugate(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Conjugate(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Conjugate (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Conjugate(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Conjugate : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Conjugate value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-223">Liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-223">A complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-224">Oblicza sprzężenie liczbą i zwraca wynik.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-224">Computes the conjugate of a complex number and returns the result.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-225">Sprzężenie z <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-225">The conjugate of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-226">Sprzężenie liczby zespolonej odwraca znak urojone części; oznacza to, że dotyczy ona Negacja Jednoargumentowa urojone części.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-226">The conjugate of a complex number inverts the sign of the imaginary component; that is, it applies unary negation to the imaginary component.</span></span> <span data-ttu-id="4fdb9-227">Jeśli + bi jest liczbą, jest jego sprzężenie - analizy biznesowej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-227">If a + bi is a complex number, its conjugate is a - bi.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-228">Poniższy przykład wyświetla sprzężenie dwóch liczb zespolonych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-228">The following example displays the conjugate of two complex numbers.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Conjugate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.conjugate/cs/conjugate1.cs#1)]
 [!code-vb[System.Numerics.Complex.Conjugate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.conjugate/vb/conjugate1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cos">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Cos (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Cos(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Cos(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cos (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Cos(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Cos : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Cos value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-229">Liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-229">A complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-230">Zwraca cosinus liczby zespolonej określony.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-230">Returns the cosine of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-231">Cosinus <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-231">The cosine of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-232"><xref:System.Numerics.Complex.Cos%2A> Metodę dla liczby zespolone odnosi się do <xref:System.Math.Cos%2A?displayProperty=nameWithType> metody dla liczb rzeczywistych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-232">The <xref:System.Numerics.Complex.Cos%2A> method for complex numbers corresponds to the <xref:System.Math.Cos%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="4fdb9-233"><xref:System.Numerics.Complex.Cos%2A> Metoda używa następującej formuły można obliczyć cosinus liczby zespolonej + bi:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-233">The <xref:System.Numerics.Complex.Cos%2A> method uses the following formula to calculate the cosine of the complex number a + bi:</span></span>  
  
 <span data-ttu-id="4fdb9-234">(<xref:System.Math.Cos%2A>() \* <xref:System.Math.Cosh%2A>(b)-(<xref:System.Math.Sin%2A>() \* <xref:System.Math.Sinh%2A>(b)))</span><span class="sxs-lookup"><span data-stu-id="4fdb9-234">(<xref:System.Math.Cos%2A>(a) \* <xref:System.Math.Cosh%2A>(b), -(<xref:System.Math.Sin%2A>(a) \* <xref:System.Math.Sinh%2A>(b)))</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-235">W poniższym przykładzie pokazano <xref:System.Numerics.Complex.Acos%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-235">The following example illustrates the <xref:System.Numerics.Complex.Acos%2A> method.</span></span> <span data-ttu-id="4fdb9-236">Pokazuje, przekazując wartość zwrócona przez obiekt <xref:System.Numerics.Complex.Acos%2A> metody <xref:System.Numerics.Complex.Cos%2A> metoda zwraca oryginalny <xref:System.Numerics.Complex> wartość.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-236">It shows that passing the value returned by the <xref:System.Numerics.Complex.Acos%2A> method to the <xref:System.Numerics.Complex.Cos%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Acos#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.acos/cs/acos1.cs#1)]
 [!code-vb[System.Numerics.Complex.Acos#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.acos/vb/acos1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Acos(System.Numerics.Complex)" />
        <altmember cref="M:System.Math.Cos(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Cosh (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Cosh(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Cosh(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cosh (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Cosh(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Cosh : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Cosh value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-237">Liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-237">A complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-238">Zwraca cosinus hiperboliczny liczby zespolonej określony.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-238">Returns the hyperbolic cosine of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-239">Cosinus hiperboliczny liczby <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-239">The hyperbolic cosine of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-240"><xref:System.Numerics.Complex.Cosh%2A> Metodę dla liczby zespolone odnosi się do <xref:System.Math.Cosh%2A?displayProperty=nameWithType> metody dla liczb rzeczywistych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-240">The <xref:System.Numerics.Complex.Cosh%2A> method for complex numbers corresponds to the <xref:System.Math.Cosh%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="4fdb9-241"><xref:System.Numerics.Complex.Cosh%2A> Metoda używa następującej formuły można obliczyć cosinus hiperboliczny liczby zespolonej + bi:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-241">The <xref:System.Numerics.Complex.Cosh%2A> method uses the following formula to calculate the hyperbolic cosine of the complex number a + bi:</span></span>  
  
 <span data-ttu-id="4fdb9-242">(<xref:System.Math.Cosh%2A>() \* <xref:System.Math.Cos%2A>(b), <xref:System.Math.Sinh%2A>() \* <xref:System.Math.Sin%2A>(b))</span><span class="sxs-lookup"><span data-stu-id="4fdb9-242">(<xref:System.Math.Cosh%2A>(a) \* <xref:System.Math.Cos%2A>(b), <xref:System.Math.Sinh%2A>(a) \* <xref:System.Math.Sin%2A>(b))</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Cosh(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Divide (System.Numerics.Complex dividend, System.Numerics.Complex divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Divide(valuetype System.Numerics.Complex dividend, valuetype System.Numerics.Complex divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (dividend As Complex, divisor As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Divide(System::Numerics::Complex dividend, System::Numerics::Complex divisor);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Divide (dividend, divisor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.Complex" />
        <Parameter Name="divisor" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="4fdb9-243">Liczby zespolonej podzielenia.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-243">The complex number to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="4fdb9-244">Liczby zespolonej dzielnikiem.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-244">The complex number to divide by.</span></span></param>
        <summary><span data-ttu-id="4fdb9-245">Dzieli jeden liczby zespolonej żadnego innego i zwraca wynik.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-245">Divides one complex number by another and returns the result.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-246">Iloraz z dzielenia.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-246">The quotient of the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-247">Dzielenie liczby zespolonej + bi przez drugi liczby zespolonej, liczby, c + di, ma następującą postać:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-247">The division of a complex number, a + bi, by a second complex number, number, c + di, takes the following form:</span></span>  
  
 <span data-ttu-id="4fdb9-248">((AC + BD) / (c<sup>2</sup> + d<sup>2</sup>)) + ((bc-ad) / (c<sup>2</sup> + d<sup>2</sup>) i</span><span class="sxs-lookup"><span data-stu-id="4fdb9-248">((ac + bd) / (c<sup>2</sup> + d<sup>2</sup>)) + ((bc - ad) / (c<sup>2</sup> + d<sup>2</sup>)i</span></span>  
  
 <span data-ttu-id="4fdb9-249">Jeśli obliczenie ilorazu powoduje przepełnienie w czasie rzeczywistym lub urojony składnika, wartość danego składnika jest <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> lub <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-249">If the calculation of the quotient results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="4fdb9-250"><xref:System.Numerics.Complex.Divide%2A> Metoda może być używana przez języki, które nie obsługują operatorów niestandardowych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-250">The <xref:System.Numerics.Complex.Divide%2A> method can be used by languages that do not support custom operators.</span></span> <span data-ttu-id="4fdb9-251">Jego zachowanie jest identyczne z dzielenia przy użyciu operator dzielenia.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-251">Its behavior is identical to division using the division operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-252">Poniższy przykład dzieli liczby zespolonej przez każdy element w tablicy liczb zespolonych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-252">The following example divides a complex number by each element in an array of complex numbers.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.divide/cs/divide1.cs#1)]
 [!code-vb[System.Numerics.Complex.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.divide/vb/divide1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4fdb9-253">Zwraca wartość wskazującą, czy dwie liczby zespolone są takie same.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-253">Returns a value that indicates whether two complex numbers are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Equals(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As Complex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Numerics.Complex -&gt; bool" Usage="complex.Equals value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-254">Liczby zespolonej do porównania.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-254">The complex number to compare.</span></span></param>
        <summary><span data-ttu-id="4fdb9-255">Zwraca wartość wskazującą, czy bieżące wystąpienie i określonej liczby zespolonej mają taką samą wartość.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-255">Returns a value that indicates whether the current instance and a specified complex number have the same value.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-256"><see langword="true" /> Jeśli ta liczba złożonych i <paramref name="value" /> mają taką samą wartość; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-256"><see langword="true" /> if this complex number and <paramref name="value" /> have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-257"><xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> Metoda zapewnia <xref:System.IEquatable%601> implementację <xref:System.Numerics.Complex> struktury.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-257">The <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method provides the <xref:System.IEquatable%601> implementation for the <xref:System.Numerics.Complex> structure.</span></span> <span data-ttu-id="4fdb9-258">Sprawdzi się nieco lepiej niż <xref:System.Numerics.Complex.Equals%28System.Object%29> metody, ponieważ nie trzeba przekonwertować jako parametr z liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-258">It performs slightly better than <xref:System.Numerics.Complex.Equals%28System.Object%29> method because it does not have to convert its parameter to a complex number.</span></span>  
  
 <span data-ttu-id="4fdb9-259">Dwie liczby zespolone są równe, jeżeli ich rzeczywistego części są równe, i ich urojone części są takie same.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-259">Two complex numbers are equal if their real parts are equal and their imaginary parts are equal.</span></span> <span data-ttu-id="4fdb9-260"><xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> Metoda jest odpowiednikiem następujące wyrażenie:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-260">The <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method is equivalent to the following expression:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals1.cs#1)]
 [!code-vb[System.Numerics.Complex.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="4fdb9-261">Użyj <see cref="M:System.Numerics.Complex.Equals(System.Numerics.Complex)" /> metoda ostrożnie, ponieważ dwie wartości, które są najwyraźniej równoważne mogą być uważane za nierówne ze względu na zróżnicowane dokładność ich rzeczywiste i urojone części.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-261">Use the <see cref="M:System.Numerics.Complex.Equals(System.Numerics.Complex)" /> method with caution, because two values that are apparently equivalent can be considered unequal due to the differing precision of their real and imaginary components.</span></span> <span data-ttu-id="4fdb9-262">Poniższy przykład informuje, że <c>(3.33333, 0.142857)</c> i <c>(10/3, 1/7)</c> nie są takie same.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-262">The following example reports that <c>(3.33333, 0.142857)</c> and <c>(10/3, 1/7)</c> are not equal.</span></span>  
  
<span data-ttu-id="4fdb9-263">[! code-csharp[System.Numerics.Complex.Equals#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/precision1.cs#4)] [! kodu vb[System.Numerics.Complex.Equals#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/precision1.vb#4)]</span><span class="sxs-lookup"><span data-stu-id="4fdb9-263">[!code-csharp[System.Numerics.Complex.Equals#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/precision1.cs#4)] [!code-vb[System.Numerics.Complex.Equals#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/precision1.vb#4)]</span></span> 
<span data-ttu-id="4fdb9-264">Jeden zalecana technika polega na zdefiniowaniu dopuszczalnych margines różnicę między dwiema wartościami (np. 01% jeden ze składników wartości rzeczywiste i urojone) zamiast porównywania wartości dla równości.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-264">One recommended technique is to define an acceptable margin of difference between the two values (such as .01% of one of the values' real and imaginary components) instead of comparing the values for equality.</span></span> <span data-ttu-id="4fdb9-265">Jeśli wartość bezwzględna różnicę między dwiema wartościami jest mniejsza niż lub równe margines, różnica będzie prawdopodobnie z powodu różnic w dokładności i, w związku z tym, wartości są mogą być równe.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-265">If the absolute value of the difference between the two values is less than or equal to that margin, the difference is likely to be due to a difference in precision, and, therefore, the values are likely to be equal.</span></span> <span data-ttu-id="4fdb9-266">W poniższym przykładzie użyto tej techniki, aby porównać dwie wartości złożonych, które zostały odnalezione w poprzednim przykładzie kodu, będą traktowane jako różne.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-266">The following example uses this technique to compare the two complex values that the previous code example found to be unequal.</span></span> <span data-ttu-id="4fdb9-267">Znajdzie dwóch liczb zespolonych równe.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-267">It finds the two complex numbers to be equal.</span></span>  
  
<span data-ttu-id="4fdb9-268">[! code-csharp[System.Numerics.Complex.Equals#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/precision1.cs#5)] [! kodu vb[System.Numerics.Complex.Equals#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/precision1.vb#5)]</span><span class="sxs-lookup"><span data-stu-id="4fdb9-268">[!code-csharp[System.Numerics.Complex.Equals#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/precision1.cs#5)] [!code-vb[System.Numerics.Complex.Equals#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/precision1.vb#5)]</span></span></para></block>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="complex.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="4fdb9-269">Obiekt do porównania.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-269">The object to compare.</span></span></param>
        <summary><span data-ttu-id="4fdb9-270">Zwraca wartość wskazującą, czy bieżące wystąpienie oraz określony obiekt ma taką samą wartość.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-270">Returns a value that indicates whether the current instance and a specified object have the same value.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-271"><see langword="true" /> Jeśli <paramref name="obj" /> parametr jest <see cref="T:System.Numerics.Complex" /> obiektu lub stanie niejawna konwersja na typ <see cref="T:System.Numerics.Complex" /> obiekt i jego wartość jest równa bieżącego <see cref="T:System.Numerics.Complex" /> obiektu; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-271"><see langword="true" /> if the <paramref name="obj" /> parameter is a <see cref="T:System.Numerics.Complex" /> object or a type capable of implicit conversion to a <see cref="T:System.Numerics.Complex" /> object, and its value is equal to the current <see cref="T:System.Numerics.Complex" /> object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-272">Dwie liczby zespolone są równe, jeżeli ich rzeczywistego części są równe, i ich urojone części są takie same.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-272">Two complex numbers are equal if their real parts are equal and their imaginary parts are equal.</span></span> <span data-ttu-id="4fdb9-273"><xref:System.Numerics.Complex.Equals%28System.Object%29> Metoda jest odpowiednikiem następujące wyrażenie:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-273">The <xref:System.Numerics.Complex.Equals%28System.Object%29> method is equivalent to the following expression:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals1.cs#2)]
 [!code-vb[System.Numerics.Complex.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals1.vb#2)]  
  
 <span data-ttu-id="4fdb9-274">Jeśli `obj` parametr nie jest <xref:System.Numerics.Complex> obiektu, ale jest typu danych, dla którego zdefiniowano niejawną konwersję, <xref:System.Numerics.Complex.Equals%28System.Object%29> konwertuje metody `obj` do <xref:System.Numerics.Complex> obiektu, którego część rzeczywista jest równa wartości `obj`i którego urojone części jest równa zero, przed wykonaniem porównania.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-274">If the `obj` parameter is not a <xref:System.Numerics.Complex> object, but it is a data type for which an implicit conversion is defined, the <xref:System.Numerics.Complex.Equals%28System.Object%29> method converts `obj` to a <xref:System.Numerics.Complex> object whose real part is equal to the value of `obj` and whose imaginary part is equal to zero before it performs the comparison.</span></span> <span data-ttu-id="4fdb9-275">Poniższy przykład ilustruje ten, wyszukując liczby zespolonej i wartość zmiennoprzecinkową podwójnej precyzji są równe.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-275">The following example illustrates this by finding that a complex number and a double-precision floating-point value are equal.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Equals#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals3.cs#6)]
 [!code-vb[System.Numerics.Complex.Equals#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals3.vb#6)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="4fdb9-276">Użyj <see cref="M:System.Numerics.Complex.Equals(System.Numerics.Complex)" /> metoda ostrożnie, ponieważ dwie wartości, które są najwyraźniej równoważne mogą być uważane za nierówne ze względu na zróżnicowane dokładność ich rzeczywiste i urojone części.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-276">Use the <see cref="M:System.Numerics.Complex.Equals(System.Numerics.Complex)" /> method with caution, because two values that are apparently equivalent can be considered unequal due to the differing precision of their real and imaginary components.</span></span> <span data-ttu-id="4fdb9-277">Ten problem może być accentuated, jeśli <paramref name="obj" /> muszą zostać skonwertowane do <see cref="T:System.Double" /> przed przystąpieniem do wykonywania porównania.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-277">The problem can be accentuated if <paramref name="obj" /> must be converted to a <see cref="T:System.Double" /> before performing the comparison.</span></span> <span data-ttu-id="4fdb9-278">W poniższym przykładzie porównano liczby zespolonej, której rzeczywisty składnik wydaje się być taka sama jak <see cref="T:System.Single" /> wartością, która <see cref="T:System.Single" /> wartość.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-278">The following example compares a complex number whose real component appears to be equal to a <see cref="T:System.Single" /> value with that <see cref="T:System.Single" /> value.</span></span> <span data-ttu-id="4fdb9-279">Dane wyjściowe pokazują, zwraca porównania dla równości <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-279">As the output shows, the comparison for equality returns <see langword="False" />.</span></span>  
  
<span data-ttu-id="4fdb9-280">[! code-csharp[System.Numerics.Complex.Equals#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals4.cs#8)] [! kodu vb[System.Numerics.Complex.Equals#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals4.vb#8)]</span><span class="sxs-lookup"><span data-stu-id="4fdb9-280">[!code-csharp[System.Numerics.Complex.Equals#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals4.cs#8)] [!code-vb[System.Numerics.Complex.Equals#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals4.vb#8)]</span></span> 
<span data-ttu-id="4fdb9-281">Jeden zalecana technika polega na zdefiniowaniu dopuszczalnych margines różnicę między dwiema wartościami (np. 01% jeden ze składników wartości rzeczywiste i urojone) zamiast porównywania wartości dla równości.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-281">One recommended technique is to define an acceptable margin of difference between the two values (such as .01% of one of the values' real and imaginary components) instead of comparing the values for equality.</span></span> <span data-ttu-id="4fdb9-282">Jeśli wartość bezwzględna różnicę między dwiema wartościami jest mniejsza niż lub równe margines, różnica będzie prawdopodobnie z powodu różnic w dokładności i w związku z tym, wartości są mogą być równe.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-282">If the absolute value of the difference between the two values is less than or equal to that margin, the difference is likely to be due to a difference in precision and, therefore, the values are likely to be equal.</span></span> <span data-ttu-id="4fdb9-283">W poniższym przykładzie użyto tej techniki, aby porównać dwie wartości, które będą traktowane jako różne znalezione w poprzednim przykładzie kodu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-283">The following example uses this technique to compare the two values that the previous code example found to be unequal.</span></span> <span data-ttu-id="4fdb9-284">Teraz znajduje się być równe.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-284">It now finds them to be equal.</span></span>  
  
<span data-ttu-id="4fdb9-285">[! code-csharp[System.Numerics.Complex.Equals#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/precision2.cs#7)] [! kodu vb[System.Numerics.Complex.Equals#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/precision2.vb#7)]</span><span class="sxs-lookup"><span data-stu-id="4fdb9-285">[!code-csharp[System.Numerics.Complex.Equals#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/precision2.cs#7)] [!code-vb[System.Numerics.Complex.Equals#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/precision2.vb#7)]</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Exp">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Exp (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Exp(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Exp(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exp (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Exp(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Exp : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Exp value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-286">Liczba złożonych, która określa potęgi.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-286">A complex number that specifies a power.</span></span></param>
        <summary><span data-ttu-id="4fdb9-287">Zwraca <see langword="e" /> podniesioną do potęgi określonej przez liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-287">Returns <see langword="e" /> raised to the power specified by a complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-288">Liczba <see langword="e" /> podniesioną do potęgi <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-288">The number <see langword="e" /> raised to the power <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-289">Użyj <xref:System.Numerics.Complex.Pow%2A> metodę, aby obliczyć potęgi innych podstaw.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-289">Use the <xref:System.Numerics.Complex.Pow%2A> method to calculate the powers of other bases.</span></span>  
  
 <span data-ttu-id="4fdb9-290"><xref:System.Numerics.Complex.Exp%2A> Metodę dla liczby zespolone odnosi się do <xref:System.Math.Exp%2A?displayProperty=nameWithType> metody dla liczb rzeczywistych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-290">The <xref:System.Numerics.Complex.Exp%2A> method for complex numbers corresponds to the <xref:System.Math.Exp%2A?displayProperty=nameWithType> method for real numbers.</span></span> <span data-ttu-id="4fdb9-291"><xref:System.Numerics.Complex.Exp%2A> jest przeciwieństwem <xref:System.Numerics.Complex.Log%2A>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-291"><xref:System.Numerics.Complex.Exp%2A> is the inverse of <xref:System.Numerics.Complex.Log%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-292">W poniższym przykładzie pokazano <xref:System.Numerics.Complex.Exp%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-292">The following example illustrates the <xref:System.Numerics.Complex.Exp%2A> method.</span></span> <span data-ttu-id="4fdb9-293">Pokazuje, że, z niektórych dopuszczalna braku dokładność <xref:System.Double> typu danych, przekazując wartość zwrócona przez obiekt <xref:System.Numerics.Complex.Log%2A> metody <xref:System.Numerics.Complex.Exp%2A> metoda zwraca oryginalny <xref:System.Numerics.Complex> wartość.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-293">It shows that, with some allowance for the lack of precision of the <xref:System.Double> data type, passing the value returned by the <xref:System.Numerics.Complex.Log%2A> method to the <xref:System.Numerics.Complex.Exp%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Log#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.log/cs/log1.cs#1)] 
 [!code-vb[System.Numerics.Complex.Log#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.log/vb/log1.vb#1)]   
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Exp(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="FromPolarCoordinates">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex FromPolarCoordinates (double magnitude, double phase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex FromPolarCoordinates(float64 magnitude, float64 phase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromPolarCoordinates (magnitude As Double, phase As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex FromPolarCoordinates(double magnitude, double phase);" />
      <MemberSignature Language="F#" Value="static member FromPolarCoordinates : double * double -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.FromPolarCoordinates (magnitude, phase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="magnitude" Type="System.Double" />
        <Parameter Name="phase" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="magnitude"><span data-ttu-id="4fdb9-294">Wielkość, czyli odległość od źródła (punkt przecięcia osi x i y) do liczby.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-294">The magnitude, which is the distance from the origin (the intersection of the x-axis and the y-axis) to the number.</span></span></param>
        <param name="phase"><span data-ttu-id="4fdb9-295">Faza, czyli kąta linii osi poziomej, wyrażony w radianach.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-295">The phase, which is the angle from the line to the horizontal axis, measured in radians.</span></span></param>
        <summary><span data-ttu-id="4fdb9-296">Tworzy liczby zespolonej Współrzędne biegunowe punktu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-296">Creates a complex number from a point's polar coordinates.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-297">Liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-297">A complex number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-298"><xref:System.Numerics.Complex.FromPolarCoordinates%2A> Metoda tworzy wystąpienia liczby zespolonej, w oparciu o jego Współrzędne biegunowe.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-298">The <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method instantiates a complex number based on its polar coordinates.</span></span>  
  
 <span data-ttu-id="4fdb9-299">Ponieważ istnieje wiele reprezentacji punktu na płaszczyźnie złożone, wartość zwracana przez <xref:System.Numerics.Complex.FromPolarCoordinates%2A> metody jest znormalizować.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-299">Because there are multiple representations of a point on a complex plane, the return value of the <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method is normalized.</span></span> <span data-ttu-id="4fdb9-300">Wartość jest znormalizować dodatnią liczbę i fazy jest znormalizować wartość z zakresu od -<xref:System.Math.PI> do <xref:System.Math.PI>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-300">The magnitude is normalized to a positive number, and the phase is normalized to a value in the range of -<xref:System.Math.PI> to <xref:System.Math.PI>.</span></span> <span data-ttu-id="4fdb9-301">W wyniku wartości <xref:System.Numerics.Complex.Phase%2A> i <xref:System.Numerics.Complex.Magnitude%2A> właściwości wynikowy liczby zespolonej nie może mieć wartość równą oryginalne wartości parametru `magnitude` i `phase` parametrów.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-301">As a result, the values of the <xref:System.Numerics.Complex.Phase%2A> and <xref:System.Numerics.Complex.Magnitude%2A> properties of the resulting complex number may not equal the original values of the `magnitude` and `phase` parameters.</span></span>  
  
 <span data-ttu-id="4fdb9-302">Można przekonwertować wartości ze stopni na radiany dla `phase` parametru wielokrotnie jej  <xref:System.Math.PI?displayProperty=nameWithType> /180.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-302">To convert a value from degrees to radians for the `phase` parameter, multiply it by <xref:System.Math.PI?displayProperty=nameWithType>/180.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-303">W poniższym przykładzie użyto <xref:System.Numerics.Complex.FromPolarCoordinates%2A> metodę, aby utworzyć wystąpienia liczby zespolonej oparte na jego Współrzędne biegunowe, a następnie wyświetla wartość jego <xref:System.Numerics.Complex.Magnitude%2A> i <xref:System.Numerics.Complex.Phase%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-303">The following example uses the <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method to instantiate a complex number based on its polar coordinates and then displays the value of its <xref:System.Numerics.Complex.Magnitude%2A> and <xref:System.Numerics.Complex.Phase%2A> properties.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Phase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.phase/cs/phase1.cs#1)]
 [!code-vb[System.Numerics.Complex.Phase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.phase/vb/phase1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.Complex.Magnitude" />
        <altmember cref="P:System.Numerics.Complex.Phase" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="complex.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4fdb9-304">Zwraca wartość skrótu dla bieżącego <see cref="T:System.Numerics.Complex" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-304">Returns the hash code for the current <see cref="T:System.Numerics.Complex" /> object.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-305">Kod skrótu 32-bitowej liczby całkowitej ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-305">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Imaginary">
      <MemberSignature Language="C#" Value="public double Imaginary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Imaginary" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Complex.Imaginary" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Imaginary As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Imaginary { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Imaginary : double" Usage="System.Numerics.Complex.Imaginary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4fdb9-306">Pobiera urojone części bieżącego <see cref="T:System.Numerics.Complex" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-306">Gets the imaginary component of the current <see cref="T:System.Numerics.Complex" /> object.</span></span></summary>
        <value><span data-ttu-id="4fdb9-307">Składnik urojone liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-307">The imaginary component of a complex number.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-308">Biorąc pod uwagę liczby zespolonej + analizy biznesowej, <xref:System.Numerics.Complex.Imaginary%2A> właściwość zwraca wartość b.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-308">Given a complex number a + bi, the <xref:System.Numerics.Complex.Imaginary%2A> property returns the value of b.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-309">Poniższy przykład tworzy tablicę <xref:System.Numerics.Complex> obiektów i wyświetla składniki rzeczywiste i urojone każdego w formie + analizy biznesowej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-309">The following example instantiates an array of <xref:System.Numerics.Complex> objects and displays the real and imaginary components of each in the form a + bi.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Real#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.real/cs/real1.cs#1)]
 [!code-vb[System.Numerics.Complex.Real#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.real/vb/real1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.Complex.Real" />
      </Docs>
    </Member>
    <Member MemberName="ImaginaryOne">
      <MemberSignature Language="C#" Value="public static readonly System.Numerics.Complex ImaginaryOne;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Numerics.Complex ImaginaryOne" />
      <MemberSignature Language="DocId" Value="F:System.Numerics.Complex.ImaginaryOne" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ImaginaryOne As Complex " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Numerics::Complex ImaginaryOne;" />
      <MemberSignature Language="F#" Value=" staticval mutable ImaginaryOne : System.Numerics.Complex" Usage="System.Numerics.Complex.ImaginaryOne" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4fdb9-310">Zwraca nowy <see cref="T:System.Numerics.Complex" /> wystąpienie z liczbą rzeczywistą równa zero i liczbą imaginery równa jeden.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-310">Returns a new <see cref="T:System.Numerics.Complex" /> instance with a real number equal to zero and an imaginary number equal to one.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4fdb9-311">Poniższy przykład tworzy wystąpienie <xref:System.Numerics.Complex> wartości za pomocą <xref:System.Numerics.Complex.ImaginaryOne> właściwości.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-311">The following example instantiates a <xref:System.Numerics.Complex> value by using the <xref:System.Numerics.Complex.ImaginaryOne> property.</span></span> <span data-ttu-id="4fdb9-312">Następnie porównuje tę wartość na inną wartość, który zostanie uruchomiony, wywołując <xref:System.Numerics.Complex> konstruktora z rzeczywistych równa zero i urojone część równa jeden.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-312">It then compares this value to another value that is instantiated by calling the <xref:System.Numerics.Complex> constructor with a real part equal to zero and an imaginary part equal to one.</span></span> <span data-ttu-id="4fdb9-313">Dane wyjściowe z przykładu pokazują, dwie wartości są równe.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-313">As the output from the example shows, the two values are equal.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.ImaginaryOne#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.imaginaryone/cs/imaginaryone1.cs#1)]
 [!code-vb[System.Numerics.Complex.ImaginaryOne#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.imaginaryone/vb/imaginaryone1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Numerics.Complex.One" />
        <altmember cref="F:System.Numerics.Complex.Zero" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Log">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4fdb9-314">Zwraca logarytm liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-314">Returns the logarithm of a complex number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Log (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Log(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Log(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Log(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Log : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Log value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-315">Liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-315">A complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-316">Zwraca fizyczna (podstawowy <see langword="e" />) logarytmu określonej liczby złożone.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-316">Returns the natural (base <see langword="e" />) logarithm of a specified complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-317">Fizyczna (podstawowy <see langword="e" />) logarytm <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-317">The natural (base <see langword="e" />) logarithm of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-318"><xref:System.Numerics.Complex.Log%28System.Numerics.Complex%29> Metodę dla liczby zespolone odnosi się do <xref:System.Math.Log%28System.Double%29?displayProperty=nameWithType> metody dla liczb rzeczywistych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-318">The <xref:System.Numerics.Complex.Log%28System.Numerics.Complex%29> method for complex numbers corresponds to the <xref:System.Math.Log%28System.Double%29?displayProperty=nameWithType> method for real numbers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-319">W poniższym przykładzie pokazano <xref:System.Numerics.Complex.Log%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-319">The following example illustrates the <xref:System.Numerics.Complex.Log%2A> method.</span></span> <span data-ttu-id="4fdb9-320">Pokazuje, że, z niektórych dopuszczalna braku dokładność <xref:System.Double> typu danych, przekazując wartość zwrócona przez obiekt <xref:System.Numerics.Complex.Log%2A> metody <xref:System.Numerics.Complex.Exp%2A> metoda zwraca oryginalny <xref:System.Numerics.Complex> wartość.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-320">It shows that, with some allowance for the lack of precision of the <xref:System.Double> data type, passing the value returned by the <xref:System.Numerics.Complex.Log%2A> method to the <xref:System.Numerics.Complex.Exp%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Log#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.log/cs/log1.cs#1)] 
 [!code-vb[System.Numerics.Complex.Log#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.log/vb/log1.vb#1)]   
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Log(System.Double)" />
        <altmember cref="M:System.Numerics.Complex.Exp(System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Log (System.Numerics.Complex value, double baseValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Log(valuetype System.Numerics.Complex value, float64 baseValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (value As Complex, baseValue As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Log(System::Numerics::Complex value, double baseValue);" />
      <MemberSignature Language="F#" Value="static member Log : System.Numerics.Complex * double -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Log (value, baseValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
        <Parameter Name="baseValue" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-321">Liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-321">A complex number.</span></span></param>
        <param name="baseValue"><span data-ttu-id="4fdb9-322">Podstawa logarytmu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-322">The base of the logarithm.</span></span></param>
        <summary><span data-ttu-id="4fdb9-323">Zwraca wartość logarytmu określonej liczby zespolonej w określonej bazie.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-323">Returns the logarithm of a specified complex number in a specified base.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-324">Logarytm <paramref name="value" /> w podstawowym <paramref name="baseValue" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-324">The logarithm of <paramref name="value" /> in base <paramref name="baseValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-325"><xref:System.Numerics.Complex.Log%28System.Numerics.Complex%2CSystem.Double%29> Metodę dla liczby zespolone odnosi się do <xref:System.Math.Log%28System.Double%2CSystem.Double%29?displayProperty=nameWithType> metody dla liczb rzeczywistych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-325">The <xref:System.Numerics.Complex.Log%28System.Numerics.Complex%2CSystem.Double%29> method for complex numbers corresponds to the <xref:System.Math.Log%28System.Double%2CSystem.Double%29?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Log10 (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Log10(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Log10(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log10 (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Log10(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Log10 : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Log10 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-326">Liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-326">A complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-327">Zwraca logarytm base 10 określonej liczby złożone.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-327">Returns the base-10 logarithm of a specified complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-328">Logarytm base 10 <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-328">The base-10 logarithm of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-329"><xref:System.Numerics.Complex.Log10%2A> Metodę dla liczby zespolone odnosi się do <xref:System.Math.Log10%2A?displayProperty=nameWithType> metody dla liczb rzeczywistych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-329">The <xref:System.Numerics.Complex.Log10%2A> method for complex numbers corresponds to the <xref:System.Math.Log10%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Magnitude">
      <MemberSignature Language="C#" Value="public double Magnitude { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Magnitude" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Complex.Magnitude" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Magnitude As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Magnitude { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Magnitude : double" Usage="System.Numerics.Complex.Magnitude" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4fdb9-330">Pobiera wartość (lub wartość bezwzględną) liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-330">Gets the magnitude (or absolute value) of a complex number.</span></span></summary>
        <value><span data-ttu-id="4fdb9-331">Wartość bieżącego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-331">The magnitude of the current instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-332"><xref:System.Numerics.Complex.Magnitude%2A> Właściwość jest równoważna wartość bezwzględną liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-332">The <xref:System.Numerics.Complex.Magnitude%2A> property is equivalent to the absolute value of a complex number.</span></span> <span data-ttu-id="4fdb9-333">Określa odległość ze źródła (punkt przecięcia osi x i y w układzie współrzędnych formułuje) do punktu dwuwymiarowe, reprezentowane przez liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-333">It specifies the distance from the origin (the intersection of the x-axis and the y-axis in the Cartesian coordinate system) to the two-dimensional point represented by a complex number.</span></span> <span data-ttu-id="4fdb9-334">Wartość bezwzględna jest obliczana w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-334">The absolute value is calculated as follows:</span></span>  
  
 <span data-ttu-id="4fdb9-335">&#124;+ bi &#124; = <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(\* + b \* b)</span><span class="sxs-lookup"><span data-stu-id="4fdb9-335">&#124; a + bi &#124; = <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(a \* a + b \* b)</span></span>  
  
 <span data-ttu-id="4fdb9-336">Jeśli obliczenie wartości bezwzględne powoduje przepełnienie, właściwość ta zwraca <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> lub <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-336">If the calculation of the absolute value results in an overflow, this property returns either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="4fdb9-337"><xref:System.Numerics.Complex.Magnitude%2A> i <xref:System.Numerics.Complex.Phase%2A> właściwości definiują położenie punktu, który reprezentuje liczby zespolonej w systemie Utwórz Współrzędne biegunowe.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-337">The <xref:System.Numerics.Complex.Magnitude%2A> and the <xref:System.Numerics.Complex.Phase%2A> properties define the position of a point that represents a complex number in the polar coordinate system.</span></span>  
  
 <span data-ttu-id="4fdb9-338">Można utworzyć wystąpienia liczby zespolonej, w oparciu o jego Współrzędne biegunowe, zamiast współrzędnych Kartezjańskiego przez wywołanie metody <xref:System.Numerics.Complex.FromPolarCoordinates%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-338">You can instantiate a complex number based on its polar coordinates instead of its Cartesian coordinates by calling the <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-339">W poniższym przykładzie oblicza wartość bezwzględną liczby zespolonej i pokazuje, że jest odpowiednikiem wartości <xref:System.Numerics.Complex.Magnitude%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-339">The following example calculates the absolute value of a complex number and demonstrates that it is equivalent to the value of the <xref:System.Numerics.Complex.Magnitude%2A> property.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Abs#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.abs/cs/abs1.cs#1)]
 [!code-vb[System.Numerics.Complex.Abs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.abs/vb/abs1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Abs(System.Numerics.Complex)" />
        <altmember cref="P:System.Numerics.Complex.Phase" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Multiply (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Multiply(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Multiply(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Multiply (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="4fdb9-340">Pierwsza liczba złożonych do pomnożenia.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-340">The first complex number to multiply.</span></span></param>
        <param name="right"><span data-ttu-id="4fdb9-341">Druga liczba złożonych do pomnożenia.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-341">The second complex number to multiply.</span></span></param>
        <summary><span data-ttu-id="4fdb9-342">Zwraca iloczyn dwóch liczb zespolonych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-342">Returns the product of two complex numbers.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-343">Iloczyn <paramref name="left" /> i <paramref name="right" /> parametrów.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-343">The product of the <paramref name="left" /> and <paramref name="right" /> parameters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-344">Mnożenie złożony numer + analizy biznesowej, a druga liczba złożonych, c + di, ma następującą postać:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-344">The multiplication of a complex number, a + bi, and a second complex number, c + di, takes the following form:</span></span>  
  
 <span data-ttu-id="4fdb9-345">(ac - bd) + (ad + bc) i</span><span class="sxs-lookup"><span data-stu-id="4fdb9-345">(ac - bd) + (ad + bc)i</span></span>  
  
 <span data-ttu-id="4fdb9-346">Jeśli mnożenia powoduje przepełnienie w czasie rzeczywistym lub urojony składnika, wartość danego składnika jest <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> lub <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-346">If the multiplication results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="4fdb9-347"><xref:System.Numerics.Complex.Multiply%2A> Metoda jest implementowana dla języków, które nie obsługują operatorów niestandardowych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-347">The <xref:System.Numerics.Complex.Multiply%2A> method is implemented for languages that do not support custom operators.</span></span> <span data-ttu-id="4fdb9-348">Jego zachowanie jest identyczne z mnożenia przy użyciu operator mnożenia.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-348">Its behavior is identical to multiplication using the multiplication operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-349">Poniższy przykład wielokrotności a liczby zespolonej przez każdy element w tablicy liczb zespolonych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-349">The following example multiples a complex number by each element in an array of complex numbers.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Multiply#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.multiply/cs/multiply1.cs#1)]
 [!code-vb[System.Numerics.Complex.Multiply#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.multiply/vb/multiply1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Negate (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Negate(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Negate(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Negate (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Negate(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Negate : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Negate value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-350">Liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-350">A complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-351">Zwraca odwrotność dodatku określonej liczby złożone.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-351">Returns the additive inverse of a specified complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-352">Wynik <see cref="P:System.Numerics.Complex.Real" /> i <see cref="P:System.Numerics.Complex.Imaginary" /> składniki <paramref name="value" /> parametru pomnożona przez wartość -1.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-352">The result of the <see cref="P:System.Numerics.Complex.Real" /> and <see cref="P:System.Numerics.Complex.Imaginary" /> components of the <paramref name="value" /> parameter multiplied by -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-353">Odwrotność dodatku liczby zespolonej jest liczbą, która generuje wartość <xref:System.Numerics.Complex> po dodaniu do oryginalnego liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-353">The additive inverse of a complex number is a complex number that produces a value of <xref:System.Numerics.Complex> when it is added to the original complex number.</span></span> <span data-ttu-id="4fdb9-354">Ta metoda zwraca wartość liczby zespolonej pomnożyć rzeczywiste i urojone części oryginalny numer złożone przez -1.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-354">This method returns a complex number in which the real and imaginary components of the original complex number are multiplied by -1.</span></span>  
  
 <span data-ttu-id="4fdb9-355"><xref:System.Numerics.Complex.Negate%2A> Metoda jest implementowana dla języków, które nie obsługują operatorów niestandardowych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-355">The <xref:System.Numerics.Complex.Negate%2A> method is implemented for languages that do not support custom operators.</span></span> <span data-ttu-id="4fdb9-356">Jego zachowanie jest taka sama jak za pomocą Jednoargumentowy operator negacji negacji <xref:System.Numerics.Complex.op_UnaryNegation%2A>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-356">Its behavior is identical to negation using the unary negation operator, <xref:System.Numerics.Complex.op_UnaryNegation%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-357">W poniższym przykładzie uzyskano odwrotność dodatku każdego elementu w tablicy liczb zespolonych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-357">The following example obtains the additive inverse of each element in an array of complex numbers.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Negate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.negate/cs/negate1.cs#1)]
 [!code-vb[System.Numerics.Complex.Negate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.negate/vb/negate1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="One">
      <MemberSignature Language="C#" Value="public static readonly System.Numerics.Complex One;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Numerics.Complex One" />
      <MemberSignature Language="DocId" Value="F:System.Numerics.Complex.One" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly One As Complex " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Numerics::Complex One;" />
      <MemberSignature Language="F#" Value=" staticval mutable One : System.Numerics.Complex" Usage="System.Numerics.Complex.One" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4fdb9-358">Zwraca nowy <see cref="T:System.Numerics.Complex" /> wystąpienie z liczbą rzeczywistą równą jeden a liczbą imaginery równa zero.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-358">Returns a new <see cref="T:System.Numerics.Complex" /> instance with a real number equal to one and an imaginary number equal to zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4fdb9-359">Poniższy przykład tworzy wystąpienie <xref:System.Numerics.Complex> wartości za pomocą <xref:System.Numerics.Complex.One> właściwości.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-359">The following example instantiates a <xref:System.Numerics.Complex> value by using the <xref:System.Numerics.Complex.One> property.</span></span> <span data-ttu-id="4fdb9-360">Następnie porównuje tę wartość na inną wartość, który zostanie uruchomiony, wywołując <xref:System.Numerics.Complex> konstruktora z rzeczywistych równą jeden i urojone część równa zero.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-360">It then compares this value to another value that is instantiated by calling the <xref:System.Numerics.Complex> constructor with a real part equal to one and an imaginary part equal to zero.</span></span> <span data-ttu-id="4fdb9-361">Dane wyjściowe z przykładu pokazują, dwie wartości są równe.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-361">As the output from the example shows, the two values are equal.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.One#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.one/cs/one1.cs#1)]
 [!code-vb[System.Numerics.Complex.One#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.one/vb/one1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Numerics.Complex.ImaginaryOne" />
        <altmember cref="F:System.Numerics.Complex.Zero" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator + (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Addition(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator +(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="left + right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="4fdb9-362">Pierwsza wartość do dodania.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-362">The first value to add.</span></span></param>
        <param name="right"><span data-ttu-id="4fdb9-363">Druga wartość do dodania.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-363">The second value to add.</span></span></param>
        <summary><span data-ttu-id="4fdb9-364">Dodaje dwie liczby złożone.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-364">Adds two complex numbers.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-365">Suma <paramref name="left" /> i <paramref name="right" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-365">The sum of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-366"><xref:System.Numerics.Complex.op_Addition%2A> Metoda definiuje operacja dodawania dla liczby zespolone.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-366">The <xref:System.Numerics.Complex.op_Addition%2A> method defines the addition operation for complex numbers.</span></span> <span data-ttu-id="4fdb9-367">Umożliwia stosowanie kodu takiego jak następujący:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-367">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Add#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.add/cs/add3.cs#3)]
 [!code-vb[System.Numerics.Complex.Add#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.add/vb/add3.vb#3)]  
  
 <span data-ttu-id="4fdb9-368">Dodanie złożony numer + analizy biznesowej, a druga liczba złożonych, c + di, ma następującą postać:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-368">The addition of a complex number, a + bi, and a second complex number, c + di, takes the following form:</span></span>  
  
 <span data-ttu-id="4fdb9-369">(a + c) + (b + d) i</span><span class="sxs-lookup"><span data-stu-id="4fdb9-369">(a + c) + (b + d)i</span></span>  
  
 <span data-ttu-id="4fdb9-370">Jeśli metoda wyniki wywołania przepełnienie w czasie albo rzeczywiste i urojone części, wartość danego składnika jest <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> lub <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-370">If the method call results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="4fdb9-371">Języki, które nie obsługują operatorów niestandardowych, można wywołać <xref:System.Numerics.Complex.Add%2A> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-371">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Add%2A> method instead.</span></span>  
  
 <span data-ttu-id="4fdb9-372">Jest równoważne metodę dla tego operatora <xref:System.Numerics.Complex.Add%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="4fdb9-372">The equivalent method for this operator is <xref:System.Numerics.Complex.Add%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="4fdb9-373">Poniższy przykład ilustruje dodanie liczbach zespolonych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-373">The following example illustrates addition with complex numbers.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Add#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.add/cs/add2.cs#2)]
 [!code-vb[System.Numerics.Complex.Add#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.add/vb/add2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator / (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Division(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator / (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator /(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( / ) : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="left / right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="4fdb9-374">Wartość do podzielenia.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-374">The value to be divided.</span></span></param>
        <param name="right"><span data-ttu-id="4fdb9-375">Wartość do podzielenia przez.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-375">The value to divide by.</span></span></param>
        <summary><span data-ttu-id="4fdb9-376">Dzieli określonej liczby zespolonej przez inną określoną liczbę złożone.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-376">Divides a specified complex number by another specified complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-377">Wynik dzielenia <paramref name="left" /> przez <paramref name="right" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-377">The result of dividing <paramref name="left" /> by <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-378"><xref:System.Numerics.Complex.op_Division%2A> Metoda definiuje operacji dzielenia liczb zespolonych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-378">The <xref:System.Numerics.Complex.op_Division%2A> method defines the division operation for complex numbers.</span></span> <span data-ttu-id="4fdb9-379">Umożliwia stosowanie kodu takiego jak następujący:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-379">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Divide#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.divide/cs/divide2.cs#2)]
 [!code-vb[System.Numerics.Complex.Divide#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.divide/vb/divide2.vb#2)]  
  
 <span data-ttu-id="4fdb9-380">Podział złożony numer + analizy biznesowej, a druga liczba złożonych, c + di, ma następującą postać:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-380">The division of a complex number, a + bi, and a second complex number, c + di, takes the following form:</span></span>  
  
 <span data-ttu-id="4fdb9-381">((AC + BD) / (c<sup>2</sup> + d<sup>2</sup>)) + ((bc-ad) / (c<sup>2</sup> + d<sup>2</sup>) i</span><span class="sxs-lookup"><span data-stu-id="4fdb9-381">((ac + bd) / (c<sup>2</sup> + d<sup>2</sup>)) + ((bc - ad) / (c<sup>2</sup> + d<sup>2</sup>)i</span></span>  
  
 <span data-ttu-id="4fdb9-382">Jeśli podział powoduje przepełnienie w czasie rzeczywistym lub urojony składnika, wartość danego składnika jest <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> lub <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-382">If the division results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="4fdb9-383">Języki, które nie obsługują operatorów niestandardowych i przeciążanie operatorów może wywołać <xref:System.Numerics.Complex.Divide%2A> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-383">Languages that do not support custom operators and operator overloading can call the <xref:System.Numerics.Complex.Divide%2A> method instead.</span></span>  
  
 <span data-ttu-id="4fdb9-384">Jest równoważne metodę dla tego operatora <xref:System.Numerics.Complex.Divide%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="4fdb9-384">The equivalent method for this operator is <xref:System.Numerics.Complex.Divide%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Complex, right As Complex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Numerics.Complex * System.Numerics.Complex -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="4fdb9-385">Pierwsza liczba złożonych do porównania.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-385">The first complex number to compare.</span></span></param>
        <param name="right"><span data-ttu-id="4fdb9-386">Druga liczba złożonych do porównania.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-386">The second complex number to compare.</span></span></param>
        <summary><span data-ttu-id="4fdb9-387">Zwraca wartość wskazującą, czy dwie liczby zespolone są takie same.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-387">Returns a value that indicates whether two complex numbers are equal.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-388"><see langword="true" /> Jeśli <paramref name="left" /> i <paramref name="right" /> parametry mają taką samą wartość; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-388"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-389"><xref:System.Numerics.Complex.op_Equality%2A> Metoda definiuje operacji operatora równości dla <xref:System.Numerics.Complex> wartości.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-389">The <xref:System.Numerics.Complex.op_Equality%2A> method defines the operation of the equality operator for <xref:System.Numerics.Complex> values.</span></span> <span data-ttu-id="4fdb9-390">Umożliwia stosowanie kodu takiego jak następujący:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-390">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Equals#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/eqoperator1.cs#9)]
 [!code-vb[System.Numerics.Complex.Equals#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/eqoperator1.vb#9)]  
  
 <span data-ttu-id="4fdb9-391">Języki, które nie obsługują operatorów niestandardowych, można wywołać <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-391">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method instead.</span></span>  
  
 <span data-ttu-id="4fdb9-392">Dwie liczby zespolone są równe, jeżeli ich rzeczywistego części są równe, i ich urojone części są takie same.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-392">Two complex numbers are equal if their real parts are equal and their imaginary parts are equal.</span></span> <span data-ttu-id="4fdb9-393"><xref:System.Numerics.Complex.op_Equality%2A> Metoda jest odpowiednikiem następujące wyrażenie:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-393">The <xref:System.Numerics.Complex.op_Equality%2A> method is equivalent to the following expression:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals1.cs#3)]
 [!code-vb[System.Numerics.Complex.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals1.vb#3)]  
  
 <span data-ttu-id="4fdb9-394">Należy zauważyć, że z powodu różnic w dokładności, dwóch liczb zespolonych, które są równoważne najwyraźniej jest uznawana za nierówne.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-394">Note that, because of differences in precision, two complex numbers that are apparently equivalent can be considered unequal.</span></span> <span data-ttu-id="4fdb9-395">Aby uzyskać więcej informacji i możliwym obejściem zobacz <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> metody.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-395">For more information and a possible workaround, see the <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method.</span></span>  
  
 <span data-ttu-id="4fdb9-396">Jest równoważne metodę dla tego operatora <xref:System.Numerics.Complex.Equals%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="4fdb9-396">The equivalent method for this operator is <xref:System.Numerics.Complex.Equals%2A?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Explicit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4fdb9-397">Definiuje jawnej konwersji między <see cref="T:System.Numerics.Complex" /> obiektu i innego typu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-397">Defines an explicit conversion between a <see cref="T:System.Numerics.Complex" /> object and another type.</span></span></summary>
        <altmember cref="Overload:System.Numerics.Complex.op_Implicit" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.Complex (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Explicit(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Explicit(System.Decimal)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Decimal) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::Complex(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : decimal -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-398">Wartość do przekonwertowania na liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-398">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-399">Definiuje jawna konwersja <see cref="T:System.Decimal" /> wartość liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-399">Defines an explicit conversion of a <see cref="T:System.Decimal" /> value to a complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-400">Liczby zespolonej, który ma rzeczywisty składnik równa <paramref name="value" /> i urojone części równa zero.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-400">A complex number that has a real component equal to <paramref name="value" /> and an imaginary component equal to zero.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-401">Operatory konwersji jawnej definiować typy, które mogą być konwertowane na <xref:System.Numerics.Complex> obiektu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-401">Explicit conversion operators define types that can be converted to a <xref:System.Numerics.Complex> object.</span></span> <span data-ttu-id="4fdb9-402">Kompilatory języka nie wykonać tę konwersję automatycznie, ponieważ może pociągać za sobą utratę danych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-402">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="4fdb9-403">Zamiast tego wykonują konwersję tylko wtedy, gdy operator rzutowania (w języku C#) lub funkcji konwersji (takich jak `CType` w języku Visual Basic) jest używany.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-403">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` in Visual Basic) is used.</span></span> <span data-ttu-id="4fdb9-404">W przeciwnym razie są wyświetlane błędu kompilatora.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-404">Otherwise, they display a compiler error.</span></span>

 <span data-ttu-id="4fdb9-405">Konwersja <xref:System.Decimal> wartości rzeczywistych część liczby zespolonej może spowodować utratę dokładności, ponieważ <xref:System.Double>, który jest typem liczby zespolonej <xref:System.Numerics.Complex.Real%2A> właściwości ma mniej cyfr znaczących niż <xref:System.Decimal>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-405">The conversion of a <xref:System.Decimal> value to the real part of a complex number can result in a loss of precision because a <xref:System.Double>, which is the type of the complex number's <xref:System.Numerics.Complex.Real%2A> property, has fewer significant digits than a <xref:System.Decimal>.</span></span>



## Examples
 <span data-ttu-id="4fdb9-406">W poniższym przykładzie pokazano jawną konwersję <xref:System.Decimal> wartości <xref:System.Numerics.Complex> wartości.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-406">The following example illustrates the explicit conversion of <xref:System.Decimal> values to <xref:System.Numerics.Complex> values.</span></span>

 [!code-csharp[System.Numerics.Complex.Explicit#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.explicit/cs/explicit1.cs#1)]   
 [!code-vb[System.Numerics.Complex.Explicit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.explicit/vb/explicit1.vb#1)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.Complex (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::Complex(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-407">Wartość do przekonwertowania na liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-407">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-408">Definiuje jawna konwersja <see cref="T:System.Numerics.BigInteger" /> wartość liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-408">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> value to a complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-409">Liczby zespolonej, który ma rzeczywisty składnik równa <paramref name="value" /> i urojone części równa zero.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-409">A complex number that has a real component equal to <paramref name="value" /> and an imaginary component equal to zero.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-410">Operatory konwersji jawnej definiować typy, które mogą być konwertowane na <xref:System.Numerics.Complex> obiektu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-410">Explicit conversion operators define types that can be converted to a <xref:System.Numerics.Complex> object.</span></span> <span data-ttu-id="4fdb9-411">Kompilatory języka nie wykonać tę konwersję automatycznie, ponieważ może pociągać za sobą utratę danych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-411">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="4fdb9-412">Zamiast tego wykonują konwersję tylko wtedy, gdy operator rzutowania (w języku C#) lub funkcji konwersji (takich jak `CType` w języku Visual Basic) jest używany.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-412">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` in Visual Basic) is used.</span></span> <span data-ttu-id="4fdb9-413">W przeciwnym razie są wyświetlane błędu kompilatora.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-413">Otherwise, they display a compiler error.</span></span>

 <span data-ttu-id="4fdb9-414">Konwersja <xref:System.Numerics.BigInteger> wartości rzeczywistych część liczby zespolonej może spowodować utratę dokładności, ponieważ <xref:System.Double>, który jest typem liczby zespolonej <xref:System.Numerics.Complex.Real%2A> właściwości ma mniej cyfr znaczących niż <xref:System.Numerics.BigInteger>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-414">The conversion of a <xref:System.Numerics.BigInteger> value to the real part of a complex number can result in a loss of precision because a <xref:System.Double>, which is the type of the complex number's <xref:System.Numerics.Complex.Real%2A> property, has fewer significant digits than a <xref:System.Numerics.BigInteger>.</span></span>

 <span data-ttu-id="4fdb9-415">Jeśli konwersja powiodła się ponieważ <xref:System.Numerics.BigInteger> wartość jest poza zakresem <xref:System.Double> typu operacji nie zgłasza <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-415">If the conversion is unsuccessful because the <xref:System.Numerics.BigInteger> value is out of the range of the <xref:System.Double> type, the operation does not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="4fdb9-416">Zamiast tego Jeśli `value` jest mniejsza niż <xref:System.Double.MinValue>, wynik jest liczbą, która ma <xref:System.Numerics.Complex.Real%2A> wartość właściwości jest równa <xref:System.Double.NegativeInfinity>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-416">Instead, if `value` is less than <xref:System.Double.MinValue>, the result is a complex number that has a <xref:System.Numerics.Complex.Real%2A> property value equal to <xref:System.Double.NegativeInfinity>.</span></span> <span data-ttu-id="4fdb9-417">Jeśli `value` jest większa niż <xref:System.Double.MaxValue>, wynik jest liczbą, która ma <xref:System.Numerics.Complex.Real%2A> wartość właściwości jest równa <xref:System.Double.PositiveInfinity>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-417">If `value` is greater than <xref:System.Double.MaxValue>, the result is a complex number that has a <xref:System.Numerics.Complex.Real%2A> property value equal to <xref:System.Double.PositiveInfinity>.</span></span>



## Examples
 <span data-ttu-id="4fdb9-418">W poniższym przykładzie pokazano jawną konwersję <xref:System.Numerics.BigInteger> wartości <xref:System.Numerics.Complex> wartości.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-418">The following example illustrates the explicit conversion of <xref:System.Numerics.BigInteger> values to <xref:System.Numerics.Complex> values.</span></span>

 [!code-csharp[System.Numerics.Complex.Explicit#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.explicit/cs/explicit1.cs#2)]   
 [!code-vb[System.Numerics.Complex.Explicit#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.explicit/vb/explicit1.vb#2)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Implicit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4fdb9-419">Definiuje niejawna konwersja między <see cref="T:System.Numerics.Complex" /> obiektu i innego typu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-419">Defines an implicit conversion between a <see cref="T:System.Numerics.Complex" /> object and another type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.Byte)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Byte) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : byte -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-420">Wartość do przekonwertowania na liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-420">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-421">Definiuje niejawnej konwersji wartości bajtu bez znaku liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-421">Defines an implicit conversion of an unsigned byte to a complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-422">Obiekt, który zawiera wartość <paramref name="value" /> parametru jako jej część rzeczywistych i zero jako jego urojone części.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-422">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-423">Przeciążenia <xref:System.Numerics.Complex.op_Implicit%2A> operator definiowania typów, z których kompilator może automatycznie konwertować <xref:System.Numerics.Complex> obiekt bez jawnego operatora rzutowania (w języku C#) lub wywołać funkcję konwersji (w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="4fdb9-423">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="4fdb9-424">Są one poszerzeniem konwersji, nie obejmują strat danych, które nie zgłaszają wyjątków <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-424">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="4fdb9-425">To przeciążenie umożliwia kompilatorowi obsługi konwersji z <xref:System.Byte> wartość liczby zespolonej, co ilustruje poniższy przykład.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-425">This overload lets the compiler handle conversions from a <xref:System.Byte> value to a complex number, as the following example shows.</span></span> <span data-ttu-id="4fdb9-426">Należy pamiętać, że wynik konwersji liczby zespolonej, w których część rzeczywista jest równa <xref:System.Byte> wartość i którego urojone części jest równa zero.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-426">Note that the result of the conversion is a complex number whose real part is equal to the <xref:System.Byte> value and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#1)]   
 [!code-vb[System.Numerics.Complex.Implicit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#1)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.Double)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(double value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : double -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-427">Wartość do przekonwertowania na liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-427">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-428">Definiuje liczby zespolonej niejawną konwersję liczba zmiennoprzecinkowa podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-428">Defines an implicit conversion of a double-precision floating-point number to a complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-429">Obiekt, który zawiera wartość <paramref name="value" /> parametru jako jej część rzeczywistych i zero jako jego urojone części.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-429">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-430">Przeciążenia <xref:System.Numerics.Complex.op_Implicit%2A> operator definiowania typów, z których kompilator może automatycznie konwertować <xref:System.Numerics.Complex> obiekt bez jawnego operatora rzutowania (w języku C#) lub wywołać funkcję konwersji (w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="4fdb9-430">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="4fdb9-431">Są one poszerzeniem konwersji, nie obejmują strat danych, które nie zgłaszają wyjątków <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-431">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="4fdb9-432">To przeciążenie umożliwia kompilatorowi obsługi konwersji z <xref:System.Double> wartość liczby zespolonej, co ilustruje poniższy przykład.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-432">This overload lets the compiler handle conversions from a <xref:System.Double> value to a complex number, as the following example shows.</span></span> <span data-ttu-id="4fdb9-433">Należy pamiętać, że wynik konwersji liczby zespolonej, w których część rzeczywista jest równa <xref:System.Double> wartość i którego urojone części jest równa zero.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-433">Note that the result of the conversion is a complex number whose real part is equal to the <xref:System.Double> value and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#2)]   
 [!code-vb[System.Numerics.Complex.Implicit#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#2)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.Int16)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Short) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(short value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int16 -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-434">Wartość do przekonwertowania na liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-434">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-435">Definiuje niejawną konwersję całkowita 16-bitową liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-435">Defines an implicit conversion of a 16-bit signed integer to a complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-436">Obiekt, który zawiera wartość <paramref name="value" /> parametru jako jej część rzeczywistych i zero jako jego urojone części.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-436">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-437">Przeciążenia <xref:System.Numerics.Complex.op_Implicit%2A> operator definiowania typów, z których kompilator może automatycznie konwertować <xref:System.Numerics.Complex> obiekt bez jawnego operatora rzutowania (w języku C#) lub wywołać funkcję konwersji (w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="4fdb9-437">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="4fdb9-438">Są one poszerzeniem konwersji, nie obejmują strat danych, które nie zgłaszają wyjątków <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-438">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="4fdb9-439">To przeciążenie umożliwia kompilatorowi obsługi konwersji z całkowita 16-bitową liczbą, jak w poniższym przykładzie pokazano.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-439">This overload lets the compiler handle conversions from a signed 16-bit integer to a complex number, as the following example shows.</span></span> <span data-ttu-id="4fdb9-440">Należy pamiętać, że wynik konwersji liczby zespolonej, którego część rzeczywista jest równa liczby całkowitej ze znakiem 16-bitowych i którego urojone części jest równa zero.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-440">Note that the result of the conversion is a complex number whose real part is equal to the signed 16-bit integer and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#3)]   
 [!code-vb[System.Numerics.Complex.Implicit#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#3)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.Int32)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Integer) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(int value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-441">Wartość do przekonwertowania na liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-441">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-442">Definiuje niejawną konwersję całkowita 32-bitowe liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-442">Defines an implicit conversion of a 32-bit signed integer to a complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-443">Obiekt, który zawiera wartość <paramref name="value" /> parametru jako jej część rzeczywistych i zero jako jego urojone części.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-443">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-444">Przeciążenia <xref:System.Numerics.Complex.op_Implicit%2A> operator definiowania typów, z których kompilator może automatycznie konwertować <xref:System.Numerics.Complex> obiekt bez jawnego operatora rzutowania (w języku C#) lub wywołać funkcję konwersji (w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="4fdb9-444">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="4fdb9-445">Są one poszerzeniem konwersji, nie obejmują strat danych, które nie zgłaszają wyjątków <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-445">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="4fdb9-446">To przeciążenie umożliwia kompilatorowi obsługi konwersji z całkowita 32-bitowe liczby zespolonej, co ilustruje poniższy przykład.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-446">This overload lets the compiler handle conversions from a signed 32-bit integer to a complex number, as the following example shows.</span></span> <span data-ttu-id="4fdb9-447">Należy pamiętać, że wynik konwersji liczby zespolonej, którego część rzeczywista jest równa całkowita 32-bitowa i którego urojone części jest równa zero.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-447">Note that the result of the conversion is a complex number whose real part is equal to the signed 32-bit integer and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#4)]   
 [!code-vb[System.Numerics.Complex.Implicit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#4)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.Int64)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Long) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(long value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int64 -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-448">Wartość do przekonwertowania na liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-448">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-449">Definiuje niejawną konwersję całkowita 64-bitowej liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-449">Defines an implicit conversion of a 64-bit signed integer to a complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-450">Obiekt, który zawiera wartość <paramref name="value" /> parametru jako jej część rzeczywistych i zero jako jego urojone części.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-450">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-451">Przeciążenia <xref:System.Numerics.Complex.op_Implicit%2A> operator definiowania typów, z których kompilator może automatycznie konwertować <xref:System.Numerics.Complex> obiekt bez jawnego operatora rzutowania (w języku C#) lub wywołać funkcję konwersji (w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="4fdb9-451">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="4fdb9-452">Są one poszerzeniem konwersji, nie obejmują strat danych, które nie zgłaszają wyjątków <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-452">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="4fdb9-453">To przeciążenie umożliwia kompilatorowi obsługi konwersji z całkowita 64-bitowa liczby zespolonej, co ilustruje poniższy przykład.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-453">This overload lets the compiler handle conversions from a signed 64-bit integer to a complex number, as the following example shows.</span></span> <span data-ttu-id="4fdb9-454">Należy pamiętać, że wynik konwersji liczby zespolonej, którego część rzeczywista jest równa całkowita 64-bitowa i którego urojone części jest równa zero.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-454">Note that the result of the conversion is a complex number whose real part is equal to the signed 64-bit integer and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#5)]   
 [!code-vb[System.Numerics.Complex.Implicit#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#5)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.SByte)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As SByte) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : sbyte -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-455">Wartość do przekonwertowania na liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-455">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-456">Definiuje niejawnej konwersji wartości bajtowych ze znakiem liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-456">Defines an implicit conversion of a signed byte to a complex number.</span></span>   
           
<span data-ttu-id="4fdb9-457">Ten interfejs API nie jest zgodny ze specyfikacją CLS.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-457">This API is not CLS-compliant.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-458">Obiekt, który zawiera wartość <paramref name="value" /> parametru jako jej część rzeczywistych i zero jako jego urojone części.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-458">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-459">Przeciążenia <xref:System.Numerics.Complex.op_Implicit%2A> operator definiowania typów, z których kompilator może automatycznie konwertować <xref:System.Numerics.Complex> obiekt bez jawnego operatora rzutowania (w języku C#) lub wywołać funkcję konwersji (w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="4fdb9-459">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="4fdb9-460">Są one poszerzeniem konwersji, nie obejmują strat danych, które nie zgłaszają wyjątków <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-460">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="4fdb9-461">To przeciążenie umożliwia kompilatorowi obsługi konwersji z bajtowych ze znakiem liczby zespolonej, co ilustruje poniższy przykład.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-461">This overload lets the compiler handle conversions from a signed byte to a complex number, as the following example shows.</span></span> <span data-ttu-id="4fdb9-462">Należy pamiętać, że wynik konwersji liczby zespolonej, którego część rzeczywista jest równa bajtowych ze znakiem i którego urojone części jest równa zero.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-462">Note that the result of the conversion is a complex number whose real part is equal to the signed byte and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#6)]   
 [!code-vb[System.Numerics.Complex.Implicit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#6)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.Single)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Single) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(float value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : single -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-463">Wartość do przekonwertowania na liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-463">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-464">Definiuje liczby zespolonej niejawną konwersję liczba zmiennoprzecinkowa pojedynczej precyzji.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-464">Defines an implicit conversion of a single-precision floating-point number to a complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-465">Obiekt, który zawiera wartość <paramref name="value" /> parametru jako jej część rzeczywistych i zero jako jego urojone części.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-465">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-466">Przeciążenia <xref:System.Numerics.Complex.op_Implicit%2A> operator definiowania typów, z których kompilator może automatycznie konwertować <xref:System.Numerics.Complex> obiekt bez jawnego operatora rzutowania (w języku C#) lub wywołać funkcję konwersji (w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="4fdb9-466">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="4fdb9-467">Są one poszerzeniem konwersji, nie obejmują strat danych, które nie zgłaszają wyjątków <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-467">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="4fdb9-468">To przeciążenie umożliwia kompilatorowi obsługi konwersji z <xref:System.Single> wartość liczby zespolonej, co ilustruje poniższy przykład.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-468">This overload lets the compiler handle conversions from a <xref:System.Single> value to a complex number, as the following example shows.</span></span> <span data-ttu-id="4fdb9-469">Należy pamiętać, że wynik konwersji liczby zespolonej, w których część rzeczywista jest równa <xref:System.Single> wartość i którego urojone części jest równa zero.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-469">Note that the result of the conversion is a complex number whose real part is equal to the <xref:System.Single> value and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#7)]   
 [!code-vb[System.Numerics.Complex.Implicit#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#7)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.UInt16)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As UShort) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint16 -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-470">Wartość do przekonwertowania na liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-470">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-471">Definiuje niejawnej konwersji wartości 16-bitowa liczba całkowita bez znaku liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-471">Defines an implicit conversion of a 16-bit unsigned integer to a complex number.</span></span>   
           
<span data-ttu-id="4fdb9-472">Ten interfejs API nie jest zgodny ze specyfikacją CLS.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-472">This API is not CLS-compliant.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-473">Obiekt, który zawiera wartość <paramref name="value" /> parametru jako jej część rzeczywistych i zero jako jego urojone części.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-473">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-474">Przeciążenia <xref:System.Numerics.Complex.op_Implicit%2A> operator definiowania typów, z których kompilator może automatycznie konwertować <xref:System.Numerics.Complex> obiekt bez jawnego operatora rzutowania (w języku C#) lub wywołać funkcję konwersji (w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="4fdb9-474">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="4fdb9-475">Są one poszerzeniem konwersji, nie obejmują strat danych, które nie zgłaszają wyjątków <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-475">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="4fdb9-476">To przeciążenie umożliwia kompilatorowi obsługi konwersji z liczbą całkowitą bez znaku 16-bitową liczbą, co ilustruje poniższy przykład.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-476">This overload lets the compiler handle conversions from an unsigned 16-bit integer to a complex number, as the following example shows.</span></span> <span data-ttu-id="4fdb9-477">Należy pamiętać, że wynik konwersji liczby zespolonej, którego część rzeczywista wynosi liczba całkowita bez znaku 16-bitowych i którego urojone części jest równa zero.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-477">Note that the result of the conversion is a complex number whose real part is equal to the unsigned 16-bit integer and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#8)]   
 [!code-vb[System.Numerics.Complex.Implicit#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#8)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.UInt32)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As UInteger) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint32 -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-478">Wartość do przekonwertowania na liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-478">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-479">Definiuje niejawna konwersja 32-bitowa liczba całkowita bez znaku liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-479">Defines an implicit conversion of a 32-bit unsigned integer to a complex number.</span></span>   
           
<span data-ttu-id="4fdb9-480">Ten interfejs API nie jest zgodny ze specyfikacją CLS.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-480">This API is not CLS-compliant.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-481">Obiekt, który zawiera wartość <paramref name="value" /> parametru jako jej część rzeczywistych i zero jako jego urojone części.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-481">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-482">Przeciążenia <xref:System.Numerics.Complex.op_Implicit%2A> operator definiowania typów, z których kompilator może automatycznie konwertować <xref:System.Numerics.Complex> obiekt bez jawnego operatora rzutowania (w języku C#) lub wywołać funkcję konwersji (w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="4fdb9-482">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="4fdb9-483">Są one poszerzeniem konwersji, nie obejmują strat danych, które nie zgłaszają wyjątków <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-483">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="4fdb9-484">To przeciążenie umożliwia kompilatorowi obsługi konwersji z liczbą całkowitą bez znaku 32-bitowe liczby zespolonej, co ilustruje poniższy przykład.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-484">This overload lets the compiler handle conversions from an unsigned 32-bit integer to a complex number, as the following example shows.</span></span> <span data-ttu-id="4fdb9-485">Należy pamiętać, że wynik konwersji liczby zespolonej, którego część rzeczywista wynosi liczba całkowita bez znaku 32-bitowe i którego urojone części jest równa zero.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-485">Note that the result of the conversion is a complex number whose real part is equal to the unsigned 32-bit integer and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#9)]   
 [!code-vb[System.Numerics.Complex.Implicit#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#9)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.UInt64)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As ULong) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint64 -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-486">Wartość do przekonwertowania na liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-486">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-487">Definiuje niejawną konwersję 64-bitowej nieoznaczonej liczby całkowitej liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-487">Defines an implicit conversion of a 64-bit unsigned integer to a complex number.</span></span>   
           
<span data-ttu-id="4fdb9-488">Ten interfejs API nie jest zgodny ze specyfikacją CLS.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-488">This API is not CLS-compliant.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-489">Obiekt, który zawiera wartość <paramref name="value" /> parametru jako jej część rzeczywistych i zero jako jego urojone części.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-489">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-490">Przeciążenia <xref:System.Numerics.Complex.op_Implicit%2A> operator definiowania typów, z których kompilator może automatycznie konwertować <xref:System.Numerics.Complex> obiekt bez jawnego operatora rzutowania (w języku C#) lub wywołać funkcję konwersji (w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="4fdb9-490">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="4fdb9-491">Są one poszerzeniem konwersji, nie obejmują strat danych, które nie zgłaszają wyjątków <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-491">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="4fdb9-492">To przeciążenie umożliwia kompilatorowi obsługi konwersji z liczbą całkowitą bez znaku 64-bitowej liczby zespolonej, co ilustruje poniższy przykład.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-492">This overload lets the compiler handle conversions from an unsigned 64-bit integer to a complex number, as the following example shows.</span></span> <span data-ttu-id="4fdb9-493">Należy pamiętać, że wynik konwersji liczby zespolonej, którego część rzeczywista wynosi liczba całkowita bez znaku 64-bitowych i którego urojone części jest równa zero.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-493">Note that the result of the conversion is a complex number whose real part is equal to the unsigned 64-bit integer and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#10)]   
 [!code-vb[System.Numerics.Complex.Implicit#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#10)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Complex, right As Complex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Numerics.Complex * System.Numerics.Complex -&gt; bool" Usage="System.Numerics.Complex.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="4fdb9-494">Pierwsza wartość do porównania.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-494">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="4fdb9-495">Druga wartość do porównania.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-495">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="4fdb9-496">Zwraca wartość wskazującą, czy dwie liczby zespolone nie są takie same.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-496">Returns a value that indicates whether two complex numbers are not equal.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-497"><see langword="true" /> Jeśli <paramref name="left" /> i <paramref name="right" /> nie są równe; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-497"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-498"><xref:System.Numerics.Complex.op_Equality%2A> Metoda definiuje operacji operator nierówności dla liczby zespolone.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-498">The <xref:System.Numerics.Complex.op_Equality%2A> method defines the operation of the inequality operator for complex numbers.</span></span> <span data-ttu-id="4fdb9-499">Umożliwia stosowanie kodu takiego jak następujący:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-499">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Inequality#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.inequality/cs/inequality1.cs#1)]
 [!code-vb[System.Numerics.Complex.Inequality#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.inequality/vb/inequality1.vb#1)]  
  
 <span data-ttu-id="4fdb9-500">Języki, które nie obsługują operatorów niestandardowych można przetestować pod kątem nierówności, wywołując <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> metody i cofania jej wartość.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-500">Languages that do not support custom operators can test for inequality by calling the <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method and reversing its value.</span></span>  
  
 <span data-ttu-id="4fdb9-501">Należy zauważyć, że z powodu różnic w dokładności, dwóch liczb zespolonych, które są równoważne najwyraźniej jest uznawana za nierówne.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-501">Note that, because of differences in precision, two complex numbers that are apparently equivalent can be considered unequal.</span></span> <span data-ttu-id="4fdb9-502">Jednym możliwym obejściem jest implementacja metody porównania, która zwraca `true` tylko wtedy, gdy jest to różnica między dwoma rzeczywiste i urojone części liczb zespolonych przekroczy określony próg (np. 01% wartości rzeczywiste i urojone składnika jeden z liczby zespolone).</span><span class="sxs-lookup"><span data-stu-id="4fdb9-502">One possible workaround is to implement a comparison method that returns `true` only if the difference between the two real and imaginary parts of the complex numbers exceeds a certain threshold (such as .01% of the value of the real or imaginary component of one of the complex numbers).</span></span> <span data-ttu-id="4fdb9-503">Aby uzyskać więcej informacji, zobacz <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> metody.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-503">For more information, see the <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator * (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Multiply(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator *(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="left * right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="4fdb9-504">Pierwsza wartość do pomnożenia.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-504">The first value to multiply.</span></span></param>
        <param name="right"><span data-ttu-id="4fdb9-505">Druga wartość do pomnożenia.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-505">The second value to multiply.</span></span></param>
        <summary><span data-ttu-id="4fdb9-506">Mnoży dwie liczby zespolonej określony.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-506">Multiplies two specified complex numbers.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-507">Iloczyn <paramref name="left" /> i <paramref name="right" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-507">The product of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-508"><xref:System.Numerics.Complex.op_Multiply%2A> Metoda definiuje operacji operator mnożenia dla liczb zespolonych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-508">The <xref:System.Numerics.Complex.op_Multiply%2A> method defines the operation of the multiplication operator for complex numbers.</span></span> <span data-ttu-id="4fdb9-509">Umożliwia stosowanie kodu takiego jak następujący:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-509">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Multiply#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.multiply/cs/multiply2.cs#2)]
 [!code-vb[System.Numerics.Complex.Multiply#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.multiply/vb/multiply2.vb#2)]  
  
 <span data-ttu-id="4fdb9-510">Mnożenie złożony numer + analizy biznesowej, a druga liczba złożonych, c + di, ma następującą postać:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-510">The multiplication of a complex number, a + bi, and a second complex number, c + di, takes the following form:</span></span>  
  
 <span data-ttu-id="4fdb9-511">(ac - bd) + (ad + bc) i</span><span class="sxs-lookup"><span data-stu-id="4fdb9-511">(ac - bd) + (ad + bc)i</span></span>  
  
 <span data-ttu-id="4fdb9-512">Jeśli mnożenia powoduje przepełnienie w czasie rzeczywistym lub urojony składnika, wartość danego składnika jest <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> lub <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-512">If the multiplication results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="4fdb9-513">Języki, które nie obsługują operatorów niestandardowych, można wywołać <xref:System.Numerics.Complex.Multiply%2A> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-513">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Multiply%2A> method instead.</span></span>  
  
 <span data-ttu-id="4fdb9-514">Jest równoważne metodę dla tego operatora <xref:System.Numerics.Complex.Multiply%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="4fdb9-514">The equivalent method for this operator is <xref:System.Numerics.Complex.Multiply%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator - (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Subtraction(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator -(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="4fdb9-515">Wartość do odjęcia od (odjemna).</span><span class="sxs-lookup"><span data-stu-id="4fdb9-515">The value to subtract from (the minuend).</span></span></param>
        <param name="right"><span data-ttu-id="4fdb9-516">Wartość do odjęcia (odjemnik).</span><span class="sxs-lookup"><span data-stu-id="4fdb9-516">The value to subtract (the subtrahend).</span></span></param>
        <summary><span data-ttu-id="4fdb9-517">Odejmuje liczby zespolonej z innej liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-517">Subtracts a complex number from another complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-518">Wynik odejmowania <paramref name="right" /> z <paramref name="left" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-518">The result of subtracting <paramref name="right" /> from <paramref name="left" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-519"><xref:System.Numerics.Complex.op_Subtraction%2A> Metoda definiuje działania operator odejmowania liczb zespolonych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-519">The <xref:System.Numerics.Complex.op_Subtraction%2A> method defines the operation of the subtraction operator for complex numbers.</span></span> <span data-ttu-id="4fdb9-520">Umożliwia stosowanie kodu takiego jak następujący:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-520">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Subtract#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.subtract/cs/subtract2.cs#2)]
 [!code-vb[System.Numerics.Complex.Subtract#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.subtract/vb/subtract2.vb#2)]  
  
 <span data-ttu-id="4fdb9-521">Jeśli metoda wyniki wywołania przepełnienie w czasie albo rzeczywiste i urojone części, wartość danego składnika jest <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> lub <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-521">If the method call results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="4fdb9-522">Odejmowanie liczby zespolonej, c + di z innej liczby zespolonej, + bi ma następującą postać:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-522">The subtraction of a complex number, c + di, from another complex number, a + bi, takes the following form:</span></span>  
  
 <span data-ttu-id="4fdb9-523">(c) + (b - d) i</span><span class="sxs-lookup"><span data-stu-id="4fdb9-523">(a - c) + (b - d)i</span></span>  
  
 <span data-ttu-id="4fdb9-524">Języki, które nie obsługują operatorów niestandardowych, można wywołać <xref:System.Numerics.Complex.Subtract%2A> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-524">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Subtract%2A> method instead.</span></span>  
  
 <span data-ttu-id="4fdb9-525">Jest równoważne metodę dla tego operatora <xref:System.Numerics.Complex.Subtract%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="4fdb9-525">The equivalent method for this operator is <xref:System.Numerics.Complex.Subtract%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator - (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_UnaryNegation(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator -(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member ( ~- ) : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="- value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-526">Wartość do wskazania ujemnej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-526">The value to negate.</span></span></param>
        <summary><span data-ttu-id="4fdb9-527">Zwraca odwrotność dodatku określonej liczby złożone.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-527">Returns the additive inverse of a specified complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-528">Wynik <see cref="P:System.Numerics.Complex.Real" /> i <see cref="P:System.Numerics.Complex.Imaginary" /> składniki <paramref name="value" /> parametru pomnożona przez wartość -1.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-528">The result of the <see cref="P:System.Numerics.Complex.Real" /> and <see cref="P:System.Numerics.Complex.Imaginary" /> components of the <paramref name="value" /> parameter multiplied by -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-529"><xref:System.Numerics.Complex.op_UnaryNegation%2A> Metoda definiuje obsługę liczby zespolone Jednoargumentowy operator negacji (odwrotność dodatku).</span><span class="sxs-lookup"><span data-stu-id="4fdb9-529">The <xref:System.Numerics.Complex.op_UnaryNegation%2A> method defines the operation of the unary negation (additive inverse) operator for complex numbers.</span></span> <span data-ttu-id="4fdb9-530">Umożliwia stosowanie kodu takiego jak następujący:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-530">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Negate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.negate/cs/negate2.cs#2)]
 [!code-vb[System.Numerics.Complex.Negate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.negate/vb/negate2.vb#2)]  
  
 <span data-ttu-id="4fdb9-531">Wynikowy liczby zespolonej generuje wartość <xref:System.Numerics.Complex> 0 (zero), gdy jest ona dodawana do oryginalnego liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-531">The resulting complex number produces a value of <xref:System.Numerics.Complex> 0 (zero) when it is added to the original complex number.</span></span> <span data-ttu-id="4fdb9-532">Języki, które nie obsługują operatorów niestandardowych, można wywołać <xref:System.Numerics.Complex.Negate%2A> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-532">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Negate%2A> method instead.</span></span>  
  
 <span data-ttu-id="4fdb9-533">Jest równoważne metodę dla tego operatora <xref:System.Numerics.Complex.Negate%28System.Numerics.Complex%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="4fdb9-533">The equivalent method for this operator is <xref:System.Numerics.Complex.Negate%28System.Numerics.Complex%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Negate(System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Phase">
      <MemberSignature Language="C#" Value="public double Phase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Phase" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Complex.Phase" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Phase As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Phase { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Phase : double" Usage="System.Numerics.Complex.Phase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4fdb9-534">Pobiera fazy liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-534">Gets the phase of a complex number.</span></span></summary>
        <value><span data-ttu-id="4fdb9-535">Faza liczby zespolonej, w radianach.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-535">The phase of a complex number, in radians.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-536">Dla liczby zespolonej i analizy biznesowej, fazy jest obliczana jako <xref:System.Math.Atan2%2A?displayProperty=nameWithType>(b).</span><span class="sxs-lookup"><span data-stu-id="4fdb9-536">For a complex number a + bi, the phase is computed as <xref:System.Math.Atan2%2A?displayProperty=nameWithType>(b, a).</span></span>  
  
 <span data-ttu-id="4fdb9-537">Można określić liczby zespolonej według współrzędnych Kartezjańskiego na płaszczyźnie złożonych lub jego Współrzędne biegunowe.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-537">You can identify a complex number by its Cartesian coordinates on the complex plane or by its polar coordinates.</span></span> <span data-ttu-id="4fdb9-538">Faza (argument) liczby zespolonej to kąt do rzeczywistych osi linią od punktu pochodzenia (punkt przecięcia osi x i y) do punktu, reprezentowane przez liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-538">The phase (argument) of a complex number is the angle to the real axis of a line drawn from the point of origin (the intersection of the x-axis and the y-axis) to the point represented by the complex number.</span></span> <span data-ttu-id="4fdb9-539">Wielkość (reprezentowane przez <xref:System.Numerics.Complex.Magnitude%2A> właściwość) jest odległość między punkt początkowy punkt, który jest reprezentowany przez liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-539">The magnitude (represented by the <xref:System.Numerics.Complex.Magnitude%2A> property) is the distance from the point of origin to the point that is represented by the complex number.</span></span>  
  
 <span data-ttu-id="4fdb9-540">Można utworzyć wystąpienia liczby zespolonej, w oparciu o jego Współrzędne biegunowe, zamiast współrzędnych Kartezjańskiego przez wywołanie metody <xref:System.Numerics.Complex.FromPolarCoordinates%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-540">You can instantiate a complex number based on its polar coordinates instead of its Cartesian coordinates by calling the <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method.</span></span>  
  
 <span data-ttu-id="4fdb9-541">Aby dokonać konwersji w fazie z radianów na stopnie, należy go pomnożyć przez 180 /<xref:System.Math.PI?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-541">To convert the phase from radians to degrees, multiply it by 180/<xref:System.Math.PI?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-542">W poniższym przykładzie użyto <xref:System.Numerics.Complex.FromPolarCoordinates%2A> metodę, aby utworzyć wystąpienia liczby zespolonej oparte na jego Współrzędne biegunowe, a następnie wyświetla wartość jego <xref:System.Numerics.Complex.Magnitude%2A> i <xref:System.Numerics.Complex.Phase%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-542">The following example uses the <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method to instantiate a complex number based on its polar coordinates, and then displays the value of its <xref:System.Numerics.Complex.Magnitude%2A> and <xref:System.Numerics.Complex.Phase%2A> properties.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Phase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.phase/cs/phase1.cs#1)]
 [!code-vb[System.Numerics.Complex.Phase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.phase/vb/phase1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.Complex.Magnitude" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Pow">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4fdb9-543">Zwraca określoną liczbę złożone podniesioną do określonej potęgi.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-543">Returns a specified complex number raised to a specified power.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Pow (System.Numerics.Complex value, double power);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Pow(valuetype System.Numerics.Complex value, float64 power) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pow (value As Complex, power As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Pow(System::Numerics::Complex value, double power);" />
      <MemberSignature Language="F#" Value="static member Pow : System.Numerics.Complex * double -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Pow (value, power)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
        <Parameter Name="power" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-544">Liczby zespolonej podniesione do potęgi.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-544">A complex number to be raised to a power.</span></span></param>
        <param name="power"><span data-ttu-id="4fdb9-545">Liczba zmiennoprzecinkowa podwójnej precyzji, która określa potęgi.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-545">A double-precision floating-point number that specifies a power.</span></span></param>
        <summary><span data-ttu-id="4fdb9-546">Zwraca określoną liczbę złożone podniesioną do potęgi określonej przez liczba zmiennoprzecinkowa podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-546">Returns a specified complex number raised to a power specified by a double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-547">Liczby zespolonej <paramref name="value" /> podniesioną do potęgi <paramref name="power" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-547">The complex number <paramref name="value" /> raised to the power <paramref name="power" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-548">Jeśli `value` jest <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>, metoda zwraca <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-548">If `value` is <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>, the method returns <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>.</span></span> <span data-ttu-id="4fdb9-549">Dla innych wartości Jeśli `power` ma wartość 0, metoda zwraca <xref:System.Numerics.Complex.One?displayProperty=nameWithType>i jeśli `power` wynosi 1, funkcja zwraca `value`.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-549">For other values, if `power` is 0, the method returns <xref:System.Numerics.Complex.One?displayProperty=nameWithType>, and if `power` is 1, it returns `value`.</span></span>  
  
 <span data-ttu-id="4fdb9-550">Ta metoda odnosi się do <xref:System.Math.Pow%2A?displayProperty=nameWithType> metodę pierwotnych typów liczbowych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-550">This method corresponds to the <xref:System.Math.Pow%2A?displayProperty=nameWithType> method for primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-551">Poniższy przykład ilustruje potęgowania przy użyciu liczby zespolonej i wykładnik, którego wartość z zakresu od -1 do 10.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-551">The following example illustrates exponentiation using a complex number and an exponent whose value ranges from -1 to 10.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Pow#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.pow/cs/pow1.cs#1)]
 [!code-vb[System.Numerics.Complex.Pow#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.pow/vb/pow1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Pow (System.Numerics.Complex value, System.Numerics.Complex power);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Pow(valuetype System.Numerics.Complex value, valuetype System.Numerics.Complex power) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pow (value As Complex, power As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Pow(System::Numerics::Complex value, System::Numerics::Complex power);" />
      <MemberSignature Language="F#" Value="static member Pow : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Pow (value, power)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
        <Parameter Name="power" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-552">Liczby zespolonej podniesione do potęgi.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-552">A complex number to be raised to a power.</span></span></param>
        <param name="power"><span data-ttu-id="4fdb9-553">Liczba złożonych, która określa potęgi.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-553">A complex number that specifies a power.</span></span></param>
        <summary><span data-ttu-id="4fdb9-554">Zwraca określoną liczbę złożone podniesioną do potęgi określonej przez liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-554">Returns a specified complex number raised to a power specified by a complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-555">Liczby zespolonej <paramref name="value" /> podniesioną do potęgi <paramref name="power" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-555">The complex number <paramref name="value" /> raised to the power <paramref name="power" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Real">
      <MemberSignature Language="C#" Value="public double Real { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Real" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Complex.Real" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Real As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Real { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Real : double" Usage="System.Numerics.Complex.Real" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4fdb9-556">Pobiera rzeczywisty składnik bieżącego <see cref="T:System.Numerics.Complex" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-556">Gets the real component of the current <see cref="T:System.Numerics.Complex" /> object.</span></span></summary>
        <value><span data-ttu-id="4fdb9-557">Rzeczywisty składnik liczby zespolonej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-557">The real component of a complex number.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-558">Biorąc pod uwagę liczby zespolonej + analizy biznesowej, <xref:System.Numerics.Complex.Real%2A> właściwość zwraca wartość.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-558">Given a complex number a + bi, the <xref:System.Numerics.Complex.Real%2A> property returns the value of a.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-559">Poniższy przykład tworzy tablicę <xref:System.Numerics.Complex> obiektów i wyświetla składniki rzeczywiste i urojone każdego w formie + analizy biznesowej.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-559">The following example instantiates an array of <xref:System.Numerics.Complex> objects and displays the real and imaginary components of each in the form a + bi.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Real#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.real/cs/real1.cs#1)]
 [!code-vb[System.Numerics.Complex.Real#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.real/vb/real1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.Complex.Imaginary" />
      </Docs>
    </Member>
    <Member MemberName="Reciprocal">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Reciprocal (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Reciprocal(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Reciprocal(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Reciprocal (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Reciprocal(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Reciprocal : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Reciprocal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-560">Liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-560">A complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-561">Zwraca odwrotność multiplicative liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-561">Returns the multiplicative inverse of a complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-562">Odwrotność <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-562">The reciprocal of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-563">Odwracanie, czyli odwrotność multiplicative liczbą *x* jest liczbą *y* gdzie *x* pomnożona przez *y* daje 1.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-563">The reciprocal, or multiplicative inverse, of a number *x* is a number *y* where *x* multiplied by *y* yields 1.</span></span> <span data-ttu-id="4fdb9-564">Odwrotność liczby zespolonej jest liczby zespolonej, która tworzy <xref:System.Numerics.Complex.One?displayProperty=nameWithType> kiedy są mnożone dwóch liczb.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-564">The reciprocal of a complex number is the complex number that produces <xref:System.Numerics.Complex.One?displayProperty=nameWithType> when the two numbers are multiplied.</span></span> <span data-ttu-id="4fdb9-565">Jeśli liczbą jest reprezentowany przez + analizy biznesowej, jego odwrotność jest reprezentowana przez wyrażenie / (<sup>2</sup>+ b<sup>2</sup>) + -b / (<sup>2</sup> + b<sup>2</sup>).</span><span class="sxs-lookup"><span data-stu-id="4fdb9-565">If a complex number is represented by a +bi, its reciprocal is represented by the expression a/(a<sup>2</sup>+b<sup>2</sup>) + -b/(a<sup>2</sup> + b<sup>2</sup>).</span></span>  
  
 <span data-ttu-id="4fdb9-566">Jeśli wartość jest <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>, metoda zwraca <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-566">If value is <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>, the method returns <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>.</span></span> <span data-ttu-id="4fdb9-567">W przeciwnym razie zwraca wynik wyrażenia <xref:System.Numerics.Complex.One?displayProperty=nameWithType> / `value`.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-567">Otherwise, it returns the result of the expression <xref:System.Numerics.Complex.One?displayProperty=nameWithType>/`value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-568">W poniższym przykładzie użyto <xref:System.Numerics.Complex.Reciprocal%2A> metoda obliczania wartości wzajemnego kilka liczb zespolonych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-568">The following example uses the <xref:System.Numerics.Complex.Reciprocal%2A> method to calculate the reciprocal values of several complex numbers.</span></span> <span data-ttu-id="4fdb9-569">Ilustruje też to wynik mnożenia wartości liczby zespolonej przez jego odwrotność <xref:System.Numerics.Complex.One?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-569">It also demonstrates that the result of multiplying a complex number by its reciprocal is <xref:System.Numerics.Complex.One?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Reciprocal#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.reciprocal/cs/reciprocal1.cs#1)]
 [!code-vb[System.Numerics.Complex.Reciprocal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.reciprocal/vb/reciprocal1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sin">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Sin (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Sin(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Sin(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sin (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Sin(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Sin : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Sin value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-570">Liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-570">A complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-571">Zwraca sinus liczby zespolonej określony.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-571">Returns the sine of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-572">Sinus <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-572">The sine of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-573"><xref:System.Numerics.Complex.Sin%2A> Metodę dla liczby zespolone odnosi się do <xref:System.Math.Sin%2A?displayProperty=nameWithType> metody dla liczb rzeczywistych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-573">The <xref:System.Numerics.Complex.Sin%2A> method for complex numbers corresponds to the <xref:System.Math.Sin%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="4fdb9-574"><xref:System.Numerics.Complex.Sin%2A> Metoda używa następującej formuły można obliczyć sinus liczby zespolonej + bi:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-574">The <xref:System.Numerics.Complex.Sin%2A> method uses the following formula to calculate the sine of the complex number a + bi:</span></span>  
  
 <span data-ttu-id="4fdb9-575">(<xref:System.Math.Sin%2A>() \* <xref:System.Math.Cosh%2A>(b), <xref:System.Math.Cos%2A>() \* <xref:System.Math.Sinh%2A>(b))</span><span class="sxs-lookup"><span data-stu-id="4fdb9-575">(<xref:System.Math.Sin%2A>(a) \* <xref:System.Math.Cosh%2A>(b), <xref:System.Math.Cos%2A>(a) \* <xref:System.Math.Sinh%2A>(b))</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-576">W poniższym przykładzie pokazano <xref:System.Numerics.Complex.Sin%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-576">The following example illustrates the <xref:System.Numerics.Complex.Sin%2A> method.</span></span> <span data-ttu-id="4fdb9-577">Pokazuje, przekazując wartość zwrócona przez obiekt <xref:System.Numerics.Complex.Asin%2A> metody <xref:System.Numerics.Complex.Sin%2A> metoda zwraca oryginalny <xref:System.Numerics.Complex> wartość.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-577">It shows that passing the value returned by the <xref:System.Numerics.Complex.Asin%2A> method to the <xref:System.Numerics.Complex.Sin%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Asin#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.asin/cs/asin1.cs#1)]
 [!code-vb[System.Numerics.Complex.Asin#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.asin/vb/asin1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Asin(System.Double)" />
        <altmember cref="M:System.Numerics.Complex.Sin(System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Sinh (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Sinh(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Sinh(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sinh (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Sinh(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Sinh : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Sinh value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-578">Liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-578">A complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-579">Zwraca sinus hiperboliczny liczby zespolonej określony.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-579">Returns the hyperbolic sine of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-580">Sinus hiperboliczny liczby <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-580">The hyperbolic sine of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-581"><xref:System.Numerics.Complex.Sinh%2A> Metodę dla liczby zespolone odnosi się do <xref:System.Math.Sinh%2A?displayProperty=nameWithType> metody dla liczb rzeczywistych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-581">The <xref:System.Numerics.Complex.Sinh%2A> method for complex numbers corresponds to the <xref:System.Math.Sinh%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="4fdb9-582"><xref:System.Numerics.Complex.Sinh%2A> Metoda używa następującej formuły można obliczyć sinus hiperboliczny liczby zespolonej + bi:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-582">The <xref:System.Numerics.Complex.Sinh%2A> method uses the following formula to calculate the hyperbolic sine of the complex number a + bi:</span></span>  
  
 <span data-ttu-id="4fdb9-583">(<xref:System.Math.Sinh%2A>() \* <xref:System.Math.Cos%2A>(b), <xref:System.Math.Cosh%2A>() \* <xref:System.Math.Sin%2A>(b))</span><span class="sxs-lookup"><span data-stu-id="4fdb9-583">(<xref:System.Math.Sinh%2A>(a) \* <xref:System.Math.Cos%2A>(b), <xref:System.Math.Cosh%2A>(a) \* <xref:System.Math.Sin%2A>(b))</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Sinh(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Sqrt">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Sqrt (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Sqrt(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Sqrt(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sqrt (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Sqrt(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Sqrt : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Sqrt value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-584">Liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-584">A complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-585">Zwraca pierwiastek kwadratowy liczby zespolonej określony.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-585">Returns the square root of a specified complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-586">Pierwiastek kwadratowy liczby <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-586">The square root of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-587">Pierwiastek kwadratowy liczby zespolonej `value` jest obliczana przy użyciu następującej formuły:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-587">The square root of the complex number `value` is calculated by using the following formula:</span></span>  
  
 <span data-ttu-id="4fdb9-588"><xref:System.Numerics.Complex.FromPolarCoordinates%2A?displayProperty=nameWithType>(<xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(`value`.<xref:System.Numerics.Complex.Magnitude%2A>), `value`.<xref:System.Numerics.Complex.Phase%2A> / 2.0)</span><span class="sxs-lookup"><span data-stu-id="4fdb9-588"><xref:System.Numerics.Complex.FromPolarCoordinates%2A?displayProperty=nameWithType>(<xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(`value`.<xref:System.Numerics.Complex.Magnitude%2A>), `value`.<xref:System.Numerics.Complex.Phase%2A>/2.0)</span></span>   
  
 <span data-ttu-id="4fdb9-589"><xref:System.Numerics.Complex.Sqrt%2A> Metodę dla liczby zespolone odnosi się do <xref:System.Math.Sqrt%2A?displayProperty=nameWithType> metody dla liczb rzeczywistych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-589">The <xref:System.Numerics.Complex.Sqrt%2A> method for complex numbers corresponds to the <xref:System.Math.Sqrt%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Subtract (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Subtract(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Subtract(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Subtract (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="4fdb9-590">Wartość do odjęcia od (odjemna).</span><span class="sxs-lookup"><span data-stu-id="4fdb9-590">The value to subtract from (the minuend).</span></span></param>
        <param name="right"><span data-ttu-id="4fdb9-591">Wartość do odjęcia (odjemnik).</span><span class="sxs-lookup"><span data-stu-id="4fdb9-591">The value to subtract (the subtrahend).</span></span></param>
        <summary><span data-ttu-id="4fdb9-592">Odejmuje jeden liczby zespolonej z innego i zwraca wynik.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-592">Subtracts one complex number from another and returns the result.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-593">Wynik odejmowania <paramref name="right" /> z <paramref name="left" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-593">The result of subtracting <paramref name="right" /> from <paramref name="left" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-594">Odejmowanie liczby zespolonej, c + di z innej liczby zespolonej, + bi ma następującą postać:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-594">The subtraction of a complex number, c + di, from another complex number, a + bi, takes the following form:</span></span>  
  
 <span data-ttu-id="4fdb9-595">(c) + (b - d) i</span><span class="sxs-lookup"><span data-stu-id="4fdb9-595">(a - c) + (b - d)i</span></span>  
  
 <span data-ttu-id="4fdb9-596">Jeśli metoda wyniki wywołania przepełnienie w czasie albo rzeczywiste i urojone części, wartość danego składnika jest <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> lub <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-596">If the method call results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="4fdb9-597">Można używać języków, które nie obsługują operatorów niestandardowych <xref:System.Numerics.Complex.Subtract%2A> metodę w celu przy użyciu liczb zespolonych odejmowania.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-597">Languages that do not support custom operators can use the <xref:System.Numerics.Complex.Subtract%2A> method to perform subtraction using complex numbers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-598">Poniższy przykład odejmuje każdej liczby zespolonej w tablicy z liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-598">The following example subtracts each complex number in an array from a complex number.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Subtract#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.subtract/cs/subtract1.cs#1)]
 [!code-vb[System.Numerics.Complex.Subtract#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.subtract/vb/subtract1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Tan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Tan (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Tan(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Tan(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tan (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Tan(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Tan : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Tan value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-599">Liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-599">A complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-600">Zwraca tangens liczby zespolonej określony.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-600">Returns the tangent of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-601">Tangens <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-601">The tangent of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-602"><xref:System.Numerics.Complex.Tan%2A> Metodę dla liczby zespolone odnosi się do <xref:System.Math.Tan%2A?displayProperty=nameWithType> metody dla liczb rzeczywistych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-602">The <xref:System.Numerics.Complex.Tan%2A> method for complex numbers corresponds to the <xref:System.Math.Tan%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="4fdb9-603"><xref:System.Numerics.Complex.Tan%2A> Metoda używa następującej formuły można obliczyć tangens liczby zespolonej `value`:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-603">The <xref:System.Numerics.Complex.Tan%2A> method uses the following formula to calculate the tangent of the complex number `value`:</span></span>  
  
 <span data-ttu-id="4fdb9-604"><xref:System.Numerics.Complex.Sin%2A>(`value`) / <xref:System.Numerics.Complex.Cos%2A>(`value`)</span><span class="sxs-lookup"><span data-stu-id="4fdb9-604"><xref:System.Numerics.Complex.Sin%2A>(`value`) / <xref:System.Numerics.Complex.Cos%2A>(`value`)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-605">W poniższym przykładzie pokazano <xref:System.Numerics.Complex.Tan%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-605">The following example illustrates the <xref:System.Numerics.Complex.Tan%2A> method.</span></span> <span data-ttu-id="4fdb9-606">Pokazuje, przekazując wartość zwrócona przez obiekt <xref:System.Numerics.Complex.Atan%2A> metody <xref:System.Numerics.Complex.Tan%2A> metoda zwraca oryginalny <xref:System.Numerics.Complex> wartość.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-606">It shows that passing the value returned by the <xref:System.Numerics.Complex.Atan%2A> method to the <xref:System.Numerics.Complex.Tan%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Atan#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.atan/cs/atan1.cs#1)]
 [!code-vb[System.Numerics.Complex.Atan#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.atan/vb/atan1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Atan(System.Numerics.Complex)" />
        <altmember cref="M:System.Math.Tan(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Tanh (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Tanh(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Tanh(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tanh (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Tanh(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Tanh : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Tanh value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4fdb9-607">Liczbą.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-607">A complex number.</span></span></param>
        <summary><span data-ttu-id="4fdb9-608">Zwraca tangens hiperboliczny liczby zespolonej określony.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-608">Returns the hyperbolic tangent of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-609">Tangens hiperboliczny liczby <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-609">The hyperbolic tangent of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-610"><xref:System.Numerics.Complex.Tanh%2A> Metodę dla liczby zespolone odnosi się do <xref:System.Math.Tanh%2A?displayProperty=nameWithType> metody dla liczb rzeczywistych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-610">The <xref:System.Numerics.Complex.Tanh%2A> method for complex numbers corresponds to the <xref:System.Math.Tanh%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="4fdb9-611"><xref:System.Numerics.Complex.Tanh%2A> Metoda używa następującej formuły można obliczyć tangens hiperboliczny dla liczby zespolonej `value`:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-611">The <xref:System.Numerics.Complex.Tanh%2A> method uses the following formula to calculate the hyperbolic tangent of the complex number `value`:</span></span>  
  
 <span data-ttu-id="4fdb9-612"><xref:System.Numerics.Complex.Sinh%2A>(`value`) / <xref:System.Numerics.Complex.Cosh%2A>(`value`)</span><span class="sxs-lookup"><span data-stu-id="4fdb9-612"><xref:System.Numerics.Complex.Sinh%2A>(`value`) / <xref:System.Numerics.Complex.Cosh%2A>(`value`)</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Tanh(System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4fdb9-613">Konwertuje wartość liczby zespolonej na jego reprezentację ciągu równoważnego.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-613">Converts the value of a complex number to its equivalent string representation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="complex.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4fdb9-614">Konwertuje wartość bieżącej liczby zespolonej na jego reprezentację ciągu równoważnego w postaci kartezjańskich wizualizacji.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-614">Converts the value of the current complex number to its equivalent string representation in Cartesian form.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-615">Ciąg reprezentujący bieżące wystąpienie w postaci kartezjańskich wizualizacji.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-615">The string representation of the current instance in Cartesian form.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-616">Reprezentacja ciągu domyślnej liczby zespolonej Wyświetla liczbę przy użyciu współrzędnych kartezjańskich wizualizacji w formie `(` \*\* `,` *b*`)`, gdzie \*\* jest częścią rzeczywistych liczby zespolonej i *b* jest jej urojone części.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-616">The default string representation of a complex number displays the number using its Cartesian coordinates in the form `(`*a*`,` *b*`)`, where *a* is the real part of the complex number, and *b* is its imaginary part.</span></span> <span data-ttu-id="4fdb9-617">Zarówno \*\* i *b* są formatowane przy użyciu specyfikatora formatu ogólnego ("G") i Konwencji bieżącej kultury systemu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-617">Both *a* and *b* are formatted using the general format specifier ("G") and the conventions of the current system culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-618">Poniższy przykład wyświetla ciąg reprezentujący kilka liczb zespolonych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-618">The following example displays the string representation of several complex numbers.</span></span> <span data-ttu-id="4fdb9-619">Dane wyjściowe użyto Konwencji formatowania Angielski — Stany Zjednoczone ("en US") kultury, która w tym przypadku jest bieżącą kulturą systemu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-619">The output uses the formatting conventions of the English - United States ("en-US") culture, which, in this case, is the current system culture.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Numerics.Complex.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.tostring/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="complex.ToString provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="4fdb9-620">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-620">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="4fdb9-621">Konwertuje wartość bieżącej liczby zespolonej na jego reprezentację ciągu równoważnego w postaci kartezjańskich wizualizacji przy użyciu określonego specyficzne dla kultury informacje o formatowaniu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-621">Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-622">Ciąg reprezentujący bieżące wystąpienie w formie Kartezjańskiego, określony przez <paramref name="provider" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-622">The string representation of the current instance in Cartesian form, as specified by <paramref name="provider" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-623">Reprezentacja tekstowa liczby zespolonej zwracanego przez tę metodę przedstawia liczbę przy użyciu współrzędnych kartezjańskich wizualizacji w formie `(` \*\* `,` *b*`)`, gdzie \*\* jest częścią rzeczywistych liczby zespolonej i *b* jest jej urojone części.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-623">The string representation of the complex number returned by this method displays the number using its Cartesian coordinates in the form `(`*a*`,` *b*`)`, where *a* is the real part of the complex number, and *b* is its imaginary part.</span></span> <span data-ttu-id="4fdb9-624">Zarówno \*\* i *b* są formatowane przy użyciu specyfikatora formatu ogólnego ("G") i Konwencji kultury definicją `provider`.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-624">Both *a* and *b* are formatted using the general format specifier ("G") and the conventions of the culture defined by `provider`.</span></span>  
  
 <span data-ttu-id="4fdb9-625">`provider` Parametr <xref:System.IFormatProvider> implementacji.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-625">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="4fdb9-626">Jego <xref:System.IFormatProvider.GetFormat%2A> metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiektu, który dostarcza informacje specyficzne dla kultury o formacie real a imaginery liczb w zwracanym ciągu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-626">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the real and imaginary numbers in the returned string.</span></span> <span data-ttu-id="4fdb9-627">Jeśli `provider` jest `null`, zwracanego ciągu jest formatowana przy użyciu <xref:System.Globalization.NumberFormatInfo> obiekt bieżącej kultury.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-627">If `provider` is `null`, the returned string is formatted using the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span>  
  
 <span data-ttu-id="4fdb9-628">`provider` Parametr może być jedną z następujących czynności:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-628">The `provider` parameter can be one of the following:</span></span>  
  
-   <span data-ttu-id="4fdb9-629">A <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kulturę dostarczającą informacje o formatowaniu</span><span class="sxs-lookup"><span data-stu-id="4fdb9-629">A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information</span></span>  
  
-   <span data-ttu-id="4fdb9-630"><xref:System.Globalization.NumberFormatInfo> Obiekt, który dostarcza informacje o formatowaniu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-630">The <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
-   <span data-ttu-id="4fdb9-631">Niestandardowy obiekt, który implementuje <xref:System.IFormatProvider> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-631">A custom object that implements the <xref:System.IFormatProvider> interface.</span></span> <span data-ttu-id="4fdb9-632">Jego <xref:System.IFormatProvider.GetFormat%2A> metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiekt, który dostarcza informacje o formatowaniu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-632">Its <xref:System.IFormatProvider.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-633">Poniższy przykład wyświetla ciąg reprezentujący kilka liczb zespolonych.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-633">The following example displays the string representation of several complex numbers.</span></span> <span data-ttu-id="4fdb9-634">Wynik używa konwencji formatowania Angielski - Stany Zjednoczone ("en US") i Francuski — Francja ("fr-FR") kultur.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-634">The result uses the formatting conventions of the English - United States ("en-US") and French - France ("fr-FR") cultures.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.tostring/cs/tostring2.cs#2)]
 [!code-vb[System.Numerics.Complex.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.tostring/vb/tostring2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="complex.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="4fdb9-635">Standardowy lub niestandardowy ciąg formatu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-635">A standard or custom numeric format string.</span></span></param>
        <summary><span data-ttu-id="4fdb9-636">Konwertuje wartość bieżącej liczby zespolonej na jego reprezentację ciągu równoważnego w postaci kartezjańskich wizualizacji przy użyciu określonego formatu dla jego rzeczywiste i urojone części.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-636">Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format for its real and imaginary parts.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-637">Ciąg reprezentujący bieżące wystąpienie w postaci kartezjańskich wizualizacji.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-637">The string representation of the current instance in Cartesian form.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-638">Reprezentacja tekstowa liczby zespolonej zwracanego przez tę metodę przedstawia liczbę przy użyciu współrzędnych kartezjańskich wizualizacji w formie `(` \*\* `,` *b*`)`, gdzie \*\* jest częścią rzeczywistych liczby zespolonej i *b* jest jej urojone części.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-638">The string representation of the complex number returned by this method displays the number using its Cartesian coordinates in the form `(`*a*`,` *b*`)`, where *a* is the real part of the complex number, and *b* is its imaginary part.</span></span> <span data-ttu-id="4fdb9-639">Zarówno \*\* i *b* są formatowane przy użyciu ciągu formatu określony przez `format`.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-639">Both *a* and *b* are formatted using the format string specified by `format`.</span></span> <span data-ttu-id="4fdb9-640">`format` Parametr może być dowolnym prawidłowy standardowy specyfikator formatu liczbowego lub dowolna kombinacja specyfikatorów niestandardowego formatu liczb.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-640">The `format` parameter can be any valid standard numeric format specifier, or any combination of custom numeric format specifiers.</span></span> <span data-ttu-id="4fdb9-641">Jeśli `format` jest równa <xref:System.String.Empty?displayProperty=nameWithType> lub `null`, rzeczywiste i urojone części liczb zespolonych są formatowane przy użyciu specyfikatora formatu ogólnego ("G").</span><span class="sxs-lookup"><span data-stu-id="4fdb9-641">If `format` is equal to <xref:System.String.Empty?displayProperty=nameWithType> or is `null`, the real and imaginary parts of the complex number are formatted with the general format specifier ("G").</span></span> <span data-ttu-id="4fdb9-642">Jeśli `format` ma jakąkolwiek inną wartość, metoda zgłasza wyjątek <xref:System.FormatException>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-642">If `format` is any other value, the method throws a <xref:System.FormatException>.</span></span>  
  
 <span data-ttu-id="4fdb9-643">.NET Framework zapewnia rozbudowaną obsługę formatowania, który jest opisany bardziej szczegółowo w następujących tematach:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-643">The .NET Framework provides extensive formatting support, which is described in greater detail in the following topics:</span></span>  
  
-   <span data-ttu-id="4fdb9-644">Aby uzyskać więcej informacji na temat ciągów formatu liczbowego, zobacz [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) i [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="4fdb9-644">For more information about numeric format strings, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="4fdb9-645">Aby uzyskać więcej informacji na temat formatowania w programie .NET Framework, zobacz [typy formatowania](~/docs/standard/base-types/formatting-types.md).</span><span class="sxs-lookup"><span data-stu-id="4fdb9-645">For more information about formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="4fdb9-646">Format zwracanego ciągu jest określany przez <xref:System.Globalization.NumberFormatInfo> obiektu dla bieżącej kultury.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-646">The format of the returned string is determined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span> <span data-ttu-id="4fdb9-647">W zależności od `format` parametr, ten obiekt kontroluje symbole takie jak znak ujemny, separator grupy i symbol seperatora dziesiętnego w ciągu wyjściowym.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-647">Depending on the `format` parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string.</span></span> <span data-ttu-id="4fdb9-648">Aby podać informacje o formatowaniu dla języków innych niż bieżącej kultury, należy wywołać <xref:System.Numerics.Complex.ToString%28System.String%2CSystem.IFormatProvider%29> przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-648">To provide formatting information for cultures other than the current culture, call the <xref:System.Numerics.Complex.ToString%28System.String%2CSystem.IFormatProvider%29> overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-649">Poniższy przykład inicjuje liczby zespolonej i wyświetla je przy użyciu kilka ciągów formatu standardowego.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-649">The following example initializes a complex number and displays it using several standard format strings.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.tostring/cs/tostring3.cs#3)]
 [!code-vb[System.Numerics.Complex.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.tostring/vb/tostring3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4fdb9-650"><paramref name="format" /> nie jest ciągiem nieprawidłowy format.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-650"><paramref name="format" /> is not a valid format string.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="4fdb9-651">Standardowe ciągi formatujące liczby</span><span class="sxs-lookup"><span data-stu-id="4fdb9-651">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="4fdb9-652">Niestandardowe ciągi formatujące liczby</span><span class="sxs-lookup"><span data-stu-id="4fdb9-652">Custom Numeric Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="complex.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="4fdb9-653">Standardowy lub niestandardowy ciąg formatu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-653">A standard or custom numeric format string.</span></span></param>
        <param name="provider"><span data-ttu-id="4fdb9-654">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-654">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="4fdb9-655">Konwertuje wartość bieżącej liczby zespolonej na jego reprezentację ciągu równoważnego w postaci kartezjańskich wizualizacji przy użyciu podanego formatu i informacji o formacie specyficzne dla kultury dla jego rzeczywiste i urojone części.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-655">Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format and culture-specific format information for its real and imaginary parts.</span></span></summary>
        <returns><span data-ttu-id="4fdb9-656">Ciąg reprezentujący bieżące wystąpienie w formie Kartezjańskiego, określony przez <paramref name="format" /> i <paramref name="provider" />.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-656">The string representation of the current instance in Cartesian form, as specified by <paramref name="format" /> and <paramref name="provider" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-657">Reprezentacja tekstowa liczby zespolonej zwracanego przez tę metodę przedstawia liczbę przy użyciu współrzędnych kartezjańskich wizualizacji w formie `(` \*\* `,` *b*`)`, gdzie \*\* jest częścią rzeczywistych liczby zespolonej i *b* jest jej urojone części.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-657">The string representation of the complex number returned by this method displays the number using its Cartesian coordinates in the form `(`*a*`,` *b*`)`, where *a* is the real part of the complex number, and *b* is its imaginary part.</span></span> <span data-ttu-id="4fdb9-658">Zarówno \*\* i *b* są formatowane przy użyciu ciągu formatu określony przez `format`.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-658">Both *a* and *b* are formatted using the format string specified by `format`.</span></span> <span data-ttu-id="4fdb9-659">`format` Parametr może być dowolnym prawidłowy standardowy specyfikator formatu liczbowego lub dowolna kombinacja specyfikatorów niestandardowego formatu liczb.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-659">The `format` parameter can be any valid standard numeric format specifier, or any combination of custom numeric format specifiers.</span></span> <span data-ttu-id="4fdb9-660">Jeśli `format` jest równa <xref:System.String.Empty?displayProperty=nameWithType> lub `null`, rzeczywiste i urojone części liczb zespolonych są formatowane przy użyciu specyfikatora formatu ogólnego ("G").</span><span class="sxs-lookup"><span data-stu-id="4fdb9-660">If `format` is equal to <xref:System.String.Empty?displayProperty=nameWithType> or is `null`, the real and imaginary parts of the complex number are formatted with the general format specifier ("G").</span></span> <span data-ttu-id="4fdb9-661">Jeśli `format` ma jakąkolwiek inną wartość, metoda zgłasza wyjątek <xref:System.FormatException>.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-661">If `format` is any other value, the method throws a <xref:System.FormatException>.</span></span>  
  
 <span data-ttu-id="4fdb9-662">.NET Framework zapewnia rozbudowaną obsługę formatowania, który jest opisany bardziej szczegółowo w następujących tematach:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-662">The .NET Framework provides extensive formatting support, which is described in greater detail in the following topics:</span></span>  
  
-   <span data-ttu-id="4fdb9-663">Aby uzyskać więcej informacji na temat ciągów formatu liczbowego, zobacz [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) i [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="4fdb9-663">For more information about numeric format strings, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="4fdb9-664">Aby uzyskać więcej informacji na temat formatowania w programie .NET Framework, zobacz [typy formatowania](~/docs/standard/base-types/formatting-types.md).</span><span class="sxs-lookup"><span data-stu-id="4fdb9-664">For more information about formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="4fdb9-665">`provider` Parametr <xref:System.IFormatProvider> implementacji.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-665">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="4fdb9-666">Jego <xref:System.IFormatProvider.GetFormat%2A> metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiektu, który dostarcza informacje specyficzne dla kultury o formacie real a imaginery liczb w zwracanym ciągu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-666">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the real and imaginary numbers in the returned string.</span></span> <span data-ttu-id="4fdb9-667">W zależności od `format` parametr, ten obiekt kontroluje symbole takie jak znak ujemny, separator grupy i symbol seperatora dziesiętnego w ciągu wyjściowym.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-667">Depending on the `format` parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string.</span></span> <span data-ttu-id="4fdb9-668">Jeśli `provider` jest `null`, zwracanego ciągu jest formatowana przy użyciu <xref:System.Globalization.NumberFormatInfo> obiekt bieżącej kultury.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-668">If `provider` is `null`, the returned string is formatted using the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span>  
  
 <span data-ttu-id="4fdb9-669">`provider` Parametr może być jedną z następujących czynności:</span><span class="sxs-lookup"><span data-stu-id="4fdb9-669">The `provider` parameter can be one of the following:</span></span>  
  
-   <span data-ttu-id="4fdb9-670">A <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kulturę dostarczającą informacje o formatowaniu</span><span class="sxs-lookup"><span data-stu-id="4fdb9-670">A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information</span></span>  
  
-   <span data-ttu-id="4fdb9-671"><xref:System.Globalization.NumberFormatInfo> Obiekt, który dostarcza informacje o formatowaniu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-671">The <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
-   <span data-ttu-id="4fdb9-672">Niestandardowy obiekt, który implementuje <xref:System.IFormatProvider> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-672">A custom object that implements the <xref:System.IFormatProvider> interface.</span></span> <span data-ttu-id="4fdb9-673">Jego <xref:System.IFormatProvider.GetFormat%2A> metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiekt, który dostarcza informacje o formatowaniu.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-673">Its <xref:System.IFormatProvider.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-674">Poniższy przykład tworzy tablicę liczb zespolonych i wyświetla każdy przy użyciu kilka ciągów formatu standardowego także <xref:System.Globalization.CultureInfo> obiektami, które reprezentują kultury Angielski — Stany Zjednoczone ("en US") i Francuski — Francja ("fr-FR").</span><span class="sxs-lookup"><span data-stu-id="4fdb9-674">The following example creates an array of complex numbers, and displays each using several standard format strings as well as <xref:System.Globalization.CultureInfo> objects that represent the English - United States ("en-US") and French - France ("fr-FR") cultures.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.tostring/cs/tostring4.cs#4)]
 [!code-vb[System.Numerics.Complex.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.tostring/vb/tostring4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4fdb9-675"><paramref name="format" /> nie jest ciągiem nieprawidłowy format.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-675"><paramref name="format" /> is not a valid format string.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="4fdb9-676">Standardowe ciągi formatujące liczby</span><span class="sxs-lookup"><span data-stu-id="4fdb9-676">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="4fdb9-677">Niestandardowe ciągi formatujące liczby</span><span class="sxs-lookup"><span data-stu-id="4fdb9-677">Custom Numeric Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Zero">
      <MemberSignature Language="C#" Value="public static readonly System.Numerics.Complex Zero;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Numerics.Complex Zero" />
      <MemberSignature Language="DocId" Value="F:System.Numerics.Complex.Zero" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Zero As Complex " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Numerics::Complex Zero;" />
      <MemberSignature Language="F#" Value=" staticval mutable Zero : System.Numerics.Complex" Usage="System.Numerics.Complex.Zero" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4fdb9-678">Zwraca nowy <see cref="T:System.Numerics.Complex" /> wystąpienie z liczbą rzeczywistą równa zero i liczbą imaginery równa zero.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-678">Returns a new <see cref="T:System.Numerics.Complex" /> instance with a real number equal to zero and an imaginary number equal to zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fdb9-679"><xref:System.Numerics.Complex.Zero> Jest najczęściej używana do porównania <xref:System.Numerics.Complex> wartość zero.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-679">The <xref:System.Numerics.Complex.Zero> property is most frequently used to compare a <xref:System.Numerics.Complex> value to zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fdb9-680">Poniższy przykład tworzy wystąpienie <xref:System.Numerics.Complex> wartości za pomocą <xref:System.Numerics.Complex.Zero> właściwości.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-680">The following example instantiates a <xref:System.Numerics.Complex> value by using the <xref:System.Numerics.Complex.Zero> property.</span></span> <span data-ttu-id="4fdb9-681">Następnie porównuje tę wartość na inną wartość, który zostanie uruchomiony, wywołując <xref:System.Numerics.Complex> konstruktora z rzeczywistych równa zero i urojone część równa zero.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-681">It then compares this value to another value that is instantiated by calling the <xref:System.Numerics.Complex> constructor with a real part equal to zero and an imaginary part equal to zero.</span></span> <span data-ttu-id="4fdb9-682">Dane wyjściowe z przykładu pokazują, dwie wartości są równe.</span><span class="sxs-lookup"><span data-stu-id="4fdb9-682">As the output from the example shows, the two values are equal.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Zero#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.zero/cs/zero1.cs#1)]
 [!code-vb[System.Numerics.Complex.Zero#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.zero/vb/zero1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Numerics.Complex.ImaginaryOne" />
        <altmember cref="F:System.Numerics.Complex.One" />
      </Docs>
    </Member>
  </Members>
</Type>