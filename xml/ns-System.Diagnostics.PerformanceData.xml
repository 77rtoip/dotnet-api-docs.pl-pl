<Namespace Name="System.Diagnostics.PerformanceData">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8813c8ce03149b4c97305ad0ee10d1cdd88ce604" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="34173740" />
  </Metadata>
  <Docs>
    <summary>Użyj klasy w tej przestrzeni nazw, aby dostarczyć dane liczników. Liczniki są używane do udostępnienia metryki wydajności dla konsumentów, takich jak okna monitora wydajności. Przestrzeń nazw zawiera klasy, co umożliwia korzystanie z danych licznika. Aby uzyskać pełny opis architektury liczniki wydajności, zobacz <see href="https://msdn.microsoft.com/library/windows/desktop/aa373083\(v=vs.85\">liczniki wydajności</see>.aspx).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy w tej przestrzeni nazw obsługę nowej architektury (w wersji 2.0) liczniki wydajności, które wprowadzono w programie Windows Vista. W nowej architektury dostawcy nie odpowiada na żądania klientów bezpośrednio, ale zamiast tego po prostu przechowuje dane liczników. System wprowadza wątek w procesie dostawcy podczas tworzenia wystąpienia zbiór liczników; przez dostawcę Ten wątek jest odpowiedzialny za obsługę żądań klientów.  
  
 Poniższe kroki pokazują również proces pisania dostawca liczników.  
  
1.  Liczniki, które zapewnia dostawcy jest zdefiniowany w manifest opartych na języku XML. Liczniki są logicznie pogrupowane w zbiorów liczników. Liczniki w ramach zestawu liczników są identyfikowane przez identyfikator numeryczny, który jest unikatowy w obrębie zbiór liczników. Dostawcę można zdefiniować jeden lub więcej zestawów liczników. Zestaw liczników jest identyfikowana przez identyfikator Guid, który jest unikatowy dla dostawcy. Należy pamiętać, że jeśli używasz tych klas do pisania dostawcy:  
  
    -   Atrybut wywołania zwrotnego elementu dostawcy jest ignorowany.  
  
    -   Wartość odwołanie do atrybutu nazwy elementu counterAttribute jest ignorowana.  
  
     Szczegółowe informacje na temat zapisywania manifestu, [schematu liczniki wydajności](https://msdn.microsoft.com/library/windows/desktop/aa373092\(v=vs.85\).aspx).  
  
2.  Po zapisaniu manifeście, należy użyć [CTRPP](https://msdn.microsoft.com/library/windows/desktop/aa372128\(v=vs.85\).aspx) narzędzia do kompilowania manifestu (ctrpp provider.man). Narzędzie generuje cztery pliki: .h, .c, .rc, i * _r.h. Pliki .h i .c można zignorować. Plik .rc zawiera zlokalizowane ciągi, które są zdefiniowane w manifeście. Pliki .rc i *_r.h umożliwia tworzenie pliku skompilowanych zasobów (.res), zawierających w projekcie. Poniższe wywołanie pokazuje, jak skompilować plik zasobów:  
  
    ```console  
    rc /r /i "c:\Program Files\Microsoft SDKs\Windows\v6.0\Include" provider.rc  
    ```  
  
     Jeśli wystąpi błąd, który odwołuje się do sal.h, skopiuj plik sal.h z programu Microsoft Visual Studio, Visual C zawierał katalog do katalogu, w którym należy określić dla przełącznika/i.  
  
     Dodaj ścieżkę do pliku skompilowanych zasobów (.res) do strony właściwości aplikacji projektu.  
  
3.  Zapis dostawcy. Poniższe kroki pokazują wywołania wykonywane przez dostawcę:  
  
    1.  Wywołaj <xref:System.Diagnostics.PerformanceData.CounterSet.%23ctor%2A?displayProperty=nameWithType> konstruktora, aby zdefiniować zestaw liczników. Wywołaj tę metodę dla każdego licznika Ustaw zdefiniowany w manifeście.  
  
    2.  Dla każdego zestawu liczników wywołaj jedną z <xref:System.Diagnostics.PerformanceData.CounterSet.AddCounter%2A?displayProperty=nameWithType> metody, aby dodać liczniki do zestawu. Wywołaj tę metodę dla każdego licznika zdefiniowane w zestawie liczników.  
  
    3.  Wywołaj <xref:System.Diagnostics.PerformanceData.CounterSet.CreateCounterSetInstance%2A?displayProperty=nameWithType> metodę, aby utworzyć wystąpienie zbiór liczników (wystąpienie zawiera dane licznika). Dla pojedynczego wystąpienia zbiory liczników należy wywołać tę metodę jeden raz. Dla wielu wystąpień zbiory liczników należy wywołać tej metody dla każdego wystąpienia, dla którego należy podać dane liczników (Użyj unikatowej nazwy dla każdego wystąpienia).  
  
    4.  Użyj <xref:System.Diagnostics.PerformanceData.CounterSetInstance.Counters%2A?displayProperty=nameWithType> właściwość dostęp i ustawanie dane liczników dla licznika.  
  
4.  Po zakończeniu dostawcy, narzędzie LodCtr zarejestrować liczniki na komputerze. Na przykład  
  
    ```console  
    lodctr /m:provider.man  
    ```  
  
     W przykładzie założono, manifest i plik wykonywalny znajdują się w bieżącym katalogu. Aby uzyskać szczegółowe informacje na temat korzystania z LodCtr, zobacz [Microsoft Technet](Http://Go.Microsoft.Com/FWLink/?LinkId=84000).  
  
 W tej przestrzeni nazw na komputerach z systemem Windows Vista i nowszych systemów operacyjnych można używać klas.  
  
   
  
## Examples  
 Poniżej przedstawiono prosty manifestu:  
  
```xml  
<!-- <?xml version="1.0" encoding="UTF-16"?> -->  
<instrumentationManifest xsi:schemaLocation="http://schemas.microsoft.com/win/2004/08/events eventman.xsd"   
     xmlns:win="http://manifests.microsoft.com/win/2004/08/windows/events"   
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
     xmlns:xs="http://www.w3.org/2001/XMLSchema"   
     xmlns:trace=http://schemas.microsoft.com/win/2004/08/events/trace>  
  
    <instrumentation>  
  
        <counters xmlns=http://schemas.microsoft.com/win/2005/12/counters>  
  
            <provider  
              applicationIdentity = "provider1.exe"  
              providerType = "userMode"  
              providerGuid = "{51D1685C-35ED-45be-99FE-17261A4F27F3}">  
  
               <counterSet guid = "{582803C9-AACD-45e5-8C30-571141A22092}"  
                  uri = "Microsoft.Windows.System.PerfCounters.Typing"  
                  name = "$(string.CounterSet1.Name)"   
                  description = "$(string.CounterSet1.Description)"   
                  instances = "single">  
  
                    <counter id = "1"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.TotalWords"  
                      name = "$(string.CS1.Counter1.Name)"  
                      description = "$(string.CS1.Counter1.Description)"  
                      type = "perf_counter_rawcount"  
                      detailLevel = "standard"/>  
  
                    <counter id = "2"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.WordsInInterval"  
                      name = "$(string.CS1.Counter2.Name)"  
                      description = "$(string.CS1.Counter2.Description)"  
                      type = "perf_counter_delta"  
                      detailLevel = "standard"/>  
  
                    <counter id = "3"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.LetterAPressed"  
                      name = "$(string.CS1.Counter3.Name)"  
                      description = "$(string.CS1.Counter3.Description)"  
                      type = "perf_counter_rawcount"  
                      detailLevel = "standard"/>  
  
                    <counter id = "4"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.WordsContainingLetterA"  
                      name = "$(string.CS1.Counter4.Name)"   
                      description = "$(string.CS1.Counter4.Description)"   
                      type = "perf_counter_rawcount"  
                      detailLevel = "standard"/>  
  
                    <counter id = "5"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.PercentOfWordsContainingLetterA"  
                      name = "$(string.CS1.Counter5.Name)"   
                      description = "$(string.CS1.Counter5.Description)"   
                      type = "perf_sample_fraction"  
                      baseID = "6"  
                      detailLevel = "standard">  
                      <counterAttributes>  
                          <counterAttribute name = "displayAsReal" />  
                      </counterAttributes>  
                    </counter>  
  
                    <counter id = "6"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.PercentBase"  
                      type = "perf_sample_base"  
                      detailLevel = "standard">  
                      <counterAttributes>  
                          <counterAttribute name = "noDisplay" />  
                      </counterAttributes>  
                    </counter>  
  
                </counterSet>  
            </provider>  
        </counters>  
    </instrumentation>  
  
    <localization>  
        <resources culture="en-US">  
            <stringTable>  
  
                <string id="CounterSet1.Name" value="Typing"/>  
                <string id="CounterSet1.Description" value="Captures simple typing metrics."/>  
                <string id="CS1.Counter1.Name" value="Total Words Typed"/>   
                <string id="CS1.Counter1.Description" value="The total number of words typed."/>  
                <string id="CS1.Counter2.Name" value="Words Typed In Interval"/>   
                <string id="CS1.Counter2.Description" value="The total number of words typed in the interval."/>  
                <string id="CS1.Counter3.Name" value="Letter A Pressed"/>   
                <string id="CS1.Counter3.Description" value="The number of times that the letter A is pressed."/>  
                <string id="CS1.Counter4.Name" value="Words Containing A"/>   
                <string id="CS1.Counter4.Description" value="The number of words that contain the letter A."/>  
                <string id="CS1.Counter5.Name" value="Percent of Words Containing A"/>   
                <string id="CS1.Counter5.Description" value="The percent of words that contain the letter A in the last interval."/>  
  
            </stringTable>  
        </resources>  
    </localization>  
</instrumentationManifest>  
```  
  
 Na poniższym obrazie przedstawiono implementację prostego dostawcy, manifest:  
  
```cs  
using System.Diagnostics.PerformanceData;  
  
        private static Guid providerId = new Guid("{51D1685C-35ED-45be-99FE-17261A4F27F3}");  
        private static Guid typingCounterSetId = new Guid("{582803C9-AACD-45e5-8C30-571141A22092}");  
  
        private static CounterSet typingCounterSet;         // Defines the counter set  
        private static CounterSetInstance typingCsInstance; // Instance of the counter set  
  
        private static int numberOfLetterAInWord = 0;  
  
        . . .  
  
            // Create the 'Typing' counter set.  
            typingCounterSet = new CounterSet(providerId, typingCounterSetId, CounterSetInstanceType.Single);  
  
            // Add the counters to the counter set definition.  
            typingCounterSet.AddCounter(1, CounterType.RawData32, "Total Word Count");  
            typingCounterSet.AddCounter(2, CounterType.Delta32, "Words Typed In Interval");  
            typingCounterSet.AddCounter(3, CounterType.RawData32, "A Key Pressed");  
            typingCounterSet.AddCounter(4, CounterType.RawData32, "Words Containing A");  
            typingCounterSet.AddCounter(5, CounterType.SampleFraction, "Percent of Words Containg A");  
            typingCounterSet.AddCounter(6, CounterType.SampleBase, "Percent Base");  
  
            // Create an instance of the counter set (contains the counter data).  
            typingCsInstance = typingCounterSet.CreateCounterSetInstance("Typing Instance");  
            typingCsInstance.Counters[1].Value = 0;  
            typingCsInstance.Counters[2].Value = 0;  
            typingCsInstance.Counters[3].Value = 0;  
            typingCsInstance.Counters[4].Value = 0;  
            typingCsInstance.Counters[5].Value = 0;  
            typingCsInstance.Counters[6].Value = 0;  
  
        . . .  
  
        private void Form1_FormClosing(object sender, FormClosingEventArgs e)  
        {  
            typingCounterSet.Dispose();  
        }  
  
        // Simple effort to capture letter A key press and words typed.  
        private void textInput_KeyDown(object sender, KeyEventArgs e)  
        {  
            Keys keyData = e.KeyData;  
  
            switch (e.KeyData)  
            {  
                case Keys.A :  
                    // In the .NET 3.5 Framework, you had to use the  
                    // Value property to set and increment the counter   
                    // value. Beginning with the .NET 4.0 Framework,   
                    // the Value property is safe to use in a multi-  
                    // threaded application.  
                    typingCsInstance.Counters["A Key Pressed"].Value++;  
                    numberOfLetterAInWord++;  
  
                    break;  
  
                case Keys.Enter:  
                case Keys.Space:  
                case Keys.Tab:  
  
                    if (numberOfLetterAInWord > 0)  
                    {  
                        // Beginning with the .NET 4.0 Framework, you   
                        // can use the Increment method to increment   
                        // the counter value by 1. The Increment method   
                        // is safe to use in a multi-threaded   
                        // application.  
                        typingCsInstance.Counters["Words Containing A"].Increment();  
                        typingCsInstance.Counters["Percent of Words Containg A"].Increment();  
                        numberOfLetterAInWord = 0;  
                    }  
  
                    typingCsInstance.Counters["Percent Base"].Increment();  
                    typingCsInstance.Counters["Total Word Count"].Increment();  
                    typingCsInstance.Counters["Words Typed In Interval"].Increment();  
  
                    break;  
            }  
        }  
```  
  
 ]]></format>
    </remarks>
  </Docs>
</Namespace>