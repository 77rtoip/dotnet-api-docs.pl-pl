<Namespace Name="System.Diagnostics.PerformanceData">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b1c5ad58fc8cb70eeab256e01ab98bfc4478c7cb" /><Meta Name="ms.sourcegitcommit" Value="37f75368be2e569ad59341f3fc6261b76b89db9d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/07/2019" /><Meta Name="ms.locfileid" Value="58559351" /></Metadata><Docs>
    <summary>Użyj klas znajdujących się w tej przestrzeni nazw, aby zapewnić dane liczników. Liczniki są używane do ujawniania metryk wydajności klientom, takim jak Monitor wydajności. Przestrzeń nazw nie zawiera klas do konsumowania danych licznika. Pełny opis architektury liczników wydajności można znaleźć w temacie Performance <see href="https://msdn.microsoft.com/library/windows/desktop/aa373083\(v=vs.85\">Counters</see>. aspx).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy w tej przestrzeni nazw obsługują nową architekturę (w wersji 2,0) dla liczników wydajności wprowadzonych w systemie Windows Vista. W nowej architekturze dostawca przestaje nie reagować na żądania klientów bezpośrednio, ale zamiast tego po prostu przechowuje dane liczników. System wprowadza wątek do procesu dostawcy, gdy dostawca tworzy wystąpienie zestawu liczników; wątek jest odpowiedzialny za obsługę żądań klientów.  
  
 Poniższe kroki pokazują proces pisania dostawcy liczników.  
  
1.  Liczniki udostępniane przez dostawcę są zdefiniowane w manifeście opartym na języku XML. Liczniki są logicznie pogrupowane w zestawy liczników. Liczniki w zestawie liczników są identyfikowane przez liczbowy identyfikator, który jest unikatowy w ramach zestawu liczników. Dostawca może zdefiniować jeden lub więcej zestawów liczników. Zestaw liczników jest identyfikowany przez identyfikator GUID, który jest unikatowy dla dostawcy. Należy pamiętać, że jeśli używasz tych klas do zapisania dostawcy:  
  
    -   Atrybut wywołania zwrotnego elementu Provider jest ignorowany.  
  
    -   Wartość odwołania dla atrybutu name elementu counterAttribute jest ignorowana.  
  
     Aby uzyskać szczegółowe informacje na temat pisania manifestu, zobacz [liczniki wydajności schemat](https://msdn.microsoft.com/library/windows/desktop/aa373092\(v=vs.85\).aspx).  
  
2.  Po zapisaniu manifestu Użyj narzędzia [ctrpp](https://msdn.microsoft.com/library/windows/desktop/aa372128\(v=vs.85\).aspx) , aby skompilować manifest (ctrpp provider. Man). Narzędzie generuje cztery pliki:. h,. c,. RC i * _r. h. Można zignorować pliki. h i. c. Plik. RC zawiera zlokalizowane ciągi zdefiniowane w manifeście. Pliki. RC i * _r. h są używane do tworzenia skompilowanego pliku zasobów (. res), który jest dołączany do projektu. Następujące wywołanie pokazuje, jak skompilować plik zasobu:  
  
    ```console  
    rc /r /i "c:\Program Files\Microsoft SDKs\Windows\v6.0\Include" provider.rc  
    ```  
  
     Jeśli wystąpi błąd, który odwołuje się do sal. h, skopiuj plik sal. h z Microsoft Visual Studio, Visual C zawiera katalog do katalogu określonego dla przełącznika/i.  
  
     Dodaj ścieżkę do skompilowanego pliku zasobów (. res) na stronie właściwości aplikacji projektu.  
  
3.  Napisz dostawcę. Poniższe kroki pokazują wywołania wykonywane przez dostawcę:  
  
    1.  Wywołaj <xref:System.Diagnostics.PerformanceData.CounterSet.%23ctor%2A?displayProperty=nameWithType> konstruktora, aby zdefiniować zestaw liczników. Wywołaj tę metodę dla każdego zestawu liczników zdefiniowanego w manifeście.  
  
    2.  Dla każdego zestawu liczników Wywołaj jedną z <xref:System.Diagnostics.PerformanceData.CounterSet.AddCounter%2A?displayProperty=nameWithType> metod, aby dodać liczniki do zestawu. Wywołaj tę metodę dla każdego licznika zdefiniowanego w zestawie liczników.  
  
    3.  Wywołaj <xref:System.Diagnostics.PerformanceData.CounterSet.CreateCounterSetInstance%2A?displayProperty=nameWithType> metodę, aby utworzyć wystąpienie zestawu liczników (wystąpienie zawiera dane licznika). W przypadku zestawów liczników pojedynczego wystąpienia Wywołaj tę metodę jeden raz. W przypadku zestawów liczników wielu wystąpień Wywołaj tę metodę dla każdego wystąpienia, dla którego należy podać dane licznika (Użyj unikatowej nazwy dla każdego wystąpienia).  
  
    4.  <xref:System.Diagnostics.PerformanceData.CounterSetInstance.Counters%2A?displayProperty=nameWithType> Użyj właściwości, aby uzyskać dostęp i ustawić dane licznika dla licznika.  
  
4.  Po zakończeniu działania dostawcy Użyj narzędzia [lodctr](https://docs.microsoft.com/windows/desktop/perfctrs/adding-counter-names-and-descriptions-to-the-registry#running-the-lodctr-tool) , aby zarejestrować liczniki na komputerze. Na przykład  
  
    ```console  
    lodctr /m:provider.man  
    ```  
  
     W przykładzie przyjęto założenie, że manifest i plik wykonywalny znajdują się w bieżącym katalogu.  
  
 Klas znajdujących się w tej przestrzeni nazw można użyć na komputerach z systemem operacyjnym Windows Vista lub nowszym.  
  
   
  
## Examples  
 Poniżej przedstawiono prosty manifest:  
  
```xml  
<!-- <?xml version="1.0" encoding="UTF-16"?> -->  
<instrumentationManifest xsi:schemaLocation="http://schemas.microsoft.com/win/2004/08/events eventman.xsd"   
     xmlns:win="http://manifests.microsoft.com/win/2004/08/windows/events"   
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
     xmlns:xs="http://www.w3.org/2001/XMLSchema"   
     xmlns:trace=http://schemas.microsoft.com/win/2004/08/events/trace>  
  
    <instrumentation>  
  
        <counters xmlns=http://schemas.microsoft.com/win/2005/12/counters>  
  
            <provider  
              applicationIdentity = "provider1.exe"  
              providerType = "userMode"  
              providerGuid = "{51D1685C-35ED-45be-99FE-17261A4F27F3}">  
  
               <counterSet guid = "{582803C9-AACD-45e5-8C30-571141A22092}"  
                  uri = "Microsoft.Windows.System.PerfCounters.Typing"  
                  name = "$(string.CounterSet1.Name)"   
                  description = "$(string.CounterSet1.Description)"   
                  instances = "single">  
  
                    <counter id = "1"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.TotalWords"  
                      name = "$(string.CS1.Counter1.Name)"  
                      description = "$(string.CS1.Counter1.Description)"  
                      type = "perf_counter_rawcount"  
                      detailLevel = "standard"/>  
  
                    <counter id = "2"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.WordsInInterval"  
                      name = "$(string.CS1.Counter2.Name)"  
                      description = "$(string.CS1.Counter2.Description)"  
                      type = "perf_counter_delta"  
                      detailLevel = "standard"/>  
  
                    <counter id = "3"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.LetterAPressed"  
                      name = "$(string.CS1.Counter3.Name)"  
                      description = "$(string.CS1.Counter3.Description)"  
                      type = "perf_counter_rawcount"  
                      detailLevel = "standard"/>  
  
                    <counter id = "4"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.WordsContainingLetterA"  
                      name = "$(string.CS1.Counter4.Name)"   
                      description = "$(string.CS1.Counter4.Description)"   
                      type = "perf_counter_rawcount"  
                      detailLevel = "standard"/>  
  
                    <counter id = "5"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.PercentOfWordsContainingLetterA"  
                      name = "$(string.CS1.Counter5.Name)"   
                      description = "$(string.CS1.Counter5.Description)"   
                      type = "perf_sample_fraction"  
                      baseID = "6"  
                      detailLevel = "standard">  
                      <counterAttributes>  
                          <counterAttribute name = "displayAsReal" />  
                      </counterAttributes>  
                    </counter>  
  
                    <counter id = "6"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.PercentBase"  
                      type = "perf_sample_base"  
                      detailLevel = "standard">  
                      <counterAttributes>  
                          <counterAttribute name = "noDisplay" />  
                      </counterAttributes>  
                    </counter>  
  
                </counterSet>  
            </provider>  
        </counters>  
    </instrumentation>  
  
    <localization>  
        <resources culture="en-US">  
            <stringTable>  
  
                <string id="CounterSet1.Name" value="Typing"/>  
                <string id="CounterSet1.Description" value="Captures simple typing metrics."/>  
                <string id="CS1.Counter1.Name" value="Total Words Typed"/>   
                <string id="CS1.Counter1.Description" value="The total number of words typed."/>  
                <string id="CS1.Counter2.Name" value="Words Typed In Interval"/>   
                <string id="CS1.Counter2.Description" value="The total number of words typed in the interval."/>  
                <string id="CS1.Counter3.Name" value="Letter A Pressed"/>   
                <string id="CS1.Counter3.Description" value="The number of times that the letter A is pressed."/>  
                <string id="CS1.Counter4.Name" value="Words Containing A"/>   
                <string id="CS1.Counter4.Description" value="The number of words that contain the letter A."/>  
                <string id="CS1.Counter5.Name" value="Percent of Words Containing A"/>   
                <string id="CS1.Counter5.Description" value="The percent of words that contain the letter A in the last interval."/>  
  
            </stringTable>  
        </resources>  
    </localization>  
</instrumentationManifest>  
```  
  
 Poniżej przedstawiono prostą implementację dostawcy dla manifestu:  
  
```cs  
using System.Diagnostics.PerformanceData;  
  
        private static Guid providerId = new Guid("{51D1685C-35ED-45be-99FE-17261A4F27F3}");  
        private static Guid typingCounterSetId = new Guid("{582803C9-AACD-45e5-8C30-571141A22092}");  
  
        private static CounterSet typingCounterSet;         // Defines the counter set  
        private static CounterSetInstance typingCsInstance; // Instance of the counter set  
  
        private static int numberOfLetterAInWord = 0;  
  
        . . .  
  
            // Create the 'Typing' counter set.  
            typingCounterSet = new CounterSet(providerId, typingCounterSetId, CounterSetInstanceType.Single);  
  
            // Add the counters to the counter set definition.  
            typingCounterSet.AddCounter(1, CounterType.RawData32, "Total Word Count");  
            typingCounterSet.AddCounter(2, CounterType.Delta32, "Words Typed In Interval");  
            typingCounterSet.AddCounter(3, CounterType.RawData32, "A Key Pressed");  
            typingCounterSet.AddCounter(4, CounterType.RawData32, "Words Containing A");  
            typingCounterSet.AddCounter(5, CounterType.SampleFraction, "Percent of Words Containing A");  
            typingCounterSet.AddCounter(6, CounterType.SampleBase, "Percent Base");  
  
            // Create an instance of the counter set (contains the counter data).  
            typingCsInstance = typingCounterSet.CreateCounterSetInstance("Typing Instance");  
            typingCsInstance.Counters[1].Value = 0;  
            typingCsInstance.Counters[2].Value = 0;  
            typingCsInstance.Counters[3].Value = 0;  
            typingCsInstance.Counters[4].Value = 0;  
            typingCsInstance.Counters[5].Value = 0;  
            typingCsInstance.Counters[6].Value = 0;  
  
        . . .  
  
        private void Form1_FormClosing(object sender, FormClosingEventArgs e)  
        {  
            typingCounterSet.Dispose();  
        }  
  
        // Simple effort to capture letter A key press and words typed.  
        private void textInput_KeyDown(object sender, KeyEventArgs e)  
        {  
            Keys keyData = e.KeyData;  
  
            switch (e.KeyData)  
            {  
                case Keys.A :  
                    // In the .NET 3.5 Framework, you had to use the  
                    // Value property to set and increment the counter   
                    // value. Beginning with the .NET 4.0 Framework,   
                    // the Value property is safe to use in a multi-  
                    // threaded application.  
                    typingCsInstance.Counters["A Key Pressed"].Value++;  
                    numberOfLetterAInWord++;  
  
                    break;  
  
                case Keys.Enter:  
                case Keys.Space:  
                case Keys.Tab:  
  
                    if (numberOfLetterAInWord > 0)  
                    {  
                        // Beginning with the .NET 4.0 Framework, you   
                        // can use the Increment method to increment   
                        // the counter value by 1. The Increment method   
                        // is safe to use in a multi-threaded   
                        // application.  
                        typingCsInstance.Counters["Words Containing A"].Increment();  
                        typingCsInstance.Counters["Percent of Words Containing A"].Increment();  
                        numberOfLetterAInWord = 0;  
                    }  
  
                    typingCsInstance.Counters["Percent Base"].Increment();  
                    typingCsInstance.Counters["Total Word Count"].Increment();  
                    typingCsInstance.Counters["Words Typed In Interval"].Increment();  
  
                    break;  
            }  
        }  
```  
  
 ]]></format>
    </remarks>
  </Docs>
</Namespace>