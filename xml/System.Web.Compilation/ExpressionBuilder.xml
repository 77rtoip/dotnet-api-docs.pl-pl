<Type Name="ExpressionBuilder" FullName="System.Web.Compilation.ExpressionBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2fdfaba358c803078ed8f887cd2d70b7a32d185d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30579355" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ExpressionBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.ExpressionBuilder" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionBuilder abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Oblicza wyrażeń podczas analizy strony.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.ExpressionBuilder> Klasa jest klasą bazową dla konstruktorów wyrażeń <xref:System.Web.Compilation.AppSettingsExpressionBuilder> klasy, który tworzenie wyrażeń kodu podczas analizy strony.  
  
 Konstruktorów wyrażeń analizowanie deklaratywne wyrażeń i tworzenia kodu można pobrać wartości powiązana z właściwością formantu. W scenariuszach kompilacji nie Konstruktor wyrażeń, który obsługuje funkcję kompilacji nie oblicza wyrażenie w czasie wykonywania.  
  
 Gdy analizator strony napotka wyrażenie rozdzielana z ciągiem `<%$ %>`, tworzy Konstruktor wyrażeń dla wyrażenia na podstawie prefiksu w ciągu. Prefiks jest częścią ciąg, który jest w lewo dwukropka (:). Na przykład, jeśli analizator napotka ciąg `<%$ ConnectionStrings:MessageDB %>`, tworzy <xref:System.Web.Compilation.ConnectionStringsExpressionBuilder> obiektu. Prefiksy są skojarzone z konstruktorów wyrażeń w pliku Web.config w <xref:System.Web.Configuration.CompilationSection.ExpressionBuilders%2A> sekcji.  
  
 Po prawej stronie wyrażenia deklaratywne jest przekazywany do Konstruktora wyrażeń w wersji ewaluacyjnej. Zastąpienie <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> metody do generowania kodu, który zostanie skompilowany ze stroną.  
  
 Jeśli chcesz, aby Konstruktor wyrażeń niestandardowych będzie aktywny na stronach, które nie są kompilowane, musi także zastępować <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> metoda zwraca obiekt reprezentujący wynik wyrażenia. Należy również zmienić <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> właściwości, aby wskazać, że Konstruktor wyrażeń niestandardowych obsługuje kompilacji nie stron.  
  
 Można zdefiniować zbiór właściwości i metody wyboru i obliczenia wyrażenia skojarzonego z właściwości formantu w czasie projektowania zaimplementowanie edytora wyrażeń. Edytor jest oznaczona na Konstruktor wyrażeń za pośrednictwem poziomie klasy metadanych. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.Design.ExpressionEditor>.  
  
   
  
## Examples  
 W poniższych przykładach kodu przedstawiają sposób tworzenia konstruktora wyrażenia niestandardowego zaimplementowanie <xref:System.Web.Compilation.ExpressionBuilder> klasy abstrakcyjnej. Ta implementacja <xref:System.Web.Compilation.ExpressionBuilder> zwraca obliczane instrukcji, która została przekazana do wyrażenia. Aby uruchomić ten przykład, najpierw należy zarejestrować Konstruktor wyrażeń niestandardowych w pliku Web.config. W pierwszym przykładzie kodu pokazano, jak zarejestrować Konstruktor wyrażeń niestandardowych w pliku Web.config.  
  
```  
<configuration>  
    <system.web>  
       <compilation>  
          <expressionBuilders>  
              <add expressionPrefix="MyCustomExpression"  
               type="MyCustomExpressionBuilder"/>  
          </expressionBuilders>  
       </compilation>  
    </system.web>  
</configuration>  
```  
  
 W drugim przykładzie kodu pokazano, jak odwołania w wyrażeniu w plik .aspx.  
  
```  
<asp:Label ID="Label1" runat="server"   
Text="<%$ MyCustomExpression:Hello, world! %>" />  
```  
  
 Trzeci przykładowy kod pokazuje, jak opracowanie Konstruktor wyrażeń dostosowane przez wynikających z <xref:System.Web.Compilation.ExpressionBuilder>. Aby uruchomić ten przykład kodu, należy umieścić w folderze App_Code klasy.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#1)] 
 [!code-vb[System.Web.Compilation.ExpressionBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#1)]   
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Przy dziedziczeniu z <see cref="T:System.Web.Compilation.ExpressionBuilder" /> klasy, należy zastąpić <see cref="M:System.Web.Compilation.ExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" /> metody.</para>
    </block>
    <altmember cref="T:System.Web.Compilation.ExpressionBuilderContext" />
    <altmember cref="T:System.Web.Configuration.ExpressionBuilder" />
    <altmember cref="T:System.Web.Configuration.ExpressionBuilderCollection" />
    <altmember cref="T:System.Web.Compilation.AppSettingsExpressionBuilder" />
    <altmember cref="T:System.Web.Compilation.ConnectionStringsExpressionBuilder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Compilation.ExpressionBuilder" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ <xref:System.Web.Compilation.ExpressionBuilder> klasa jest abstrakcyjna, nie można utworzyć wystąpienia <xref:System.Web.Compilation.ExpressionBuilder> bezpośrednio za pomocą <xref:System.Web.Compilation.ExpressionBuilder.%23ctor%2A> konstruktora.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Podczas tworzenia klasy pochodnej z <see cref="T:System.Web.Compilation.ExpressionBuilder" /> klasy, Zastąp <see cref="M:System.Web.Compilation.ExpressionBuilder.#ctor" /> konstruktora, aby zaimplementować akcje niestandardowe inicjowania wyrażenie implementacji konstruktora.</para>
        </block>
        <altmember cref="T:System.Web.Compilation.ExpressionBuilderContext" />
        <altmember cref="T:System.Web.Configuration.ExpressionBuilder" />
        <altmember cref="T:System.Web.Configuration.ExpressionBuilderCollection" />
        <altmember cref="T:System.Web.Compilation.AppSettingsExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ConnectionStringsExpressionBuilder" />
      </Docs>
    </Member>
    <Member MemberName="EvaluateExpression">
      <MemberSignature Language="C#" Value="public virtual object EvaluateExpression (object target, System.Web.UI.BoundPropertyEntry entry, object parsedData, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EvaluateExpression(object target, class System.Web.UI.BoundPropertyEntry entry, object parsedData, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EvaluateExpression (target As Object, entry As BoundPropertyEntry, parsedData As Object, context As ExpressionBuilderContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ EvaluateExpression(System::Object ^ target, System::Web::UI::BoundPropertyEntry ^ entry, System::Object ^ parsedData, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="entry" Type="System.Web.UI.BoundPropertyEntry" />
        <Parameter Name="parsedData" Type="System.Object" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="target">Obiekt zawierający wyrażenie.</param>
        <param name="entry">Obiekt, który reprezentuje informacje dotyczące właściwości powiązany z wyrażeniem.</param>
        <param name="parsedData">Obiekt zawierający przeanalizowany danych zwrócony przez <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />.</param>
        <param name="context">Informacje kontekstowe oceny wyrażenia.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej zwraca obiekt reprezentujący obliczane wyrażenie.</summary>
        <returns>Obiekt reprezentujący obliczane wyrażenie; w przeciwnym razie <see langword="null" /> Jeśli inheritor nie implementuje <see cref="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli chcesz z <xref:System.Web.Compilation.ExpressionBuilder> obiektów jako aktywnych na stronie, która obsługuje funkcję kompilacji nie można zastąpić <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> — metoda i <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> właściwości. <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> Metoda powinna zwrócić obliczania bieżącego wyrażenia.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia przesłoniętych <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> metodę, aby zwrócić obliczane wyrażenie.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#3)]    
 [!code-vb[System.Web.Compilation.ExpressionBuilder#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#3)]   
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jeśli można zastąpić <see cref="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" /> metody, należy również zmienić <see cref="P:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate" /> właściwości.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetCodeExpression">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.CodeExpression GetCodeExpression (System.Web.UI.BoundPropertyEntry entry, object parsedData, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeExpression GetCodeExpression(class System.Web.UI.BoundPropertyEntry entry, object parsedData, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetCodeExpression (entry As BoundPropertyEntry, parsedData As Object, context As ExpressionBuilderContext) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::CodeExpression ^ GetCodeExpression(System::Web::UI::BoundPropertyEntry ^ entry, System::Object ^ parsedData, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Web.UI.BoundPropertyEntry" />
        <Parameter Name="parsedData" Type="System.Object" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="entry">Obiekt, który reprezentuje informacje dotyczące właściwości powiązany z wyrażeniem.</param>
        <param name="parsedData">Obiekt zawierający przeanalizowany danych zwrócony przez <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />.</param>
        <param name="context">Informacje kontekstowe oceny wyrażenia.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej zwraca kod, który jest używany podczas wykonywania strony do uzyskania obliczane wyrażenie.</summary>
        <returns>A <see cref="T:System.CodeDom.CodeExpression" /> używanego do przypisania właściwości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy, które dziedziczą z <xref:System.Web.Compilation.ExpressionBuilder> musi implementować klasę <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> metody abstrakcyjnej.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób zwracania <xref:System.CodeDom.CodeExpression> obiektu przez zastąpienie <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> metody.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#4)] 
 [!code-vb[System.Web.Compilation.ExpressionBuilder#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#4)]   
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Implementuje konstruktora wyrażenia niestandardowego, należy wykonać rzutowanie typów właściwe dla właściwości formantu, zwróć operacji rzutowania w <see cref="T:System.CodeDom.CodeExpression" /> obiektu.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ParseExpression">
      <MemberSignature Language="C#" Value="public virtual object ParseExpression (string expression, Type propertyType, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ParseExpression(string expression, class System.Type propertyType, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ParseExpression (expression As String, propertyType As Type, context As ExpressionBuilderContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ParseExpression(System::String ^ expression, Type ^ propertyType, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="expression">Wartość deklaratywne wyrażenia.</param>
        <param name="propertyType">Typ właściwości jest powiązana z wyrażeniem.</param>
        <param name="context">Informacje kontekstowe oceny wyrażenia.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej zwraca obiekt, który reprezentuje wyrażenie przeanalizowany.</summary>
        <returns>
          <see cref="T:System.Object" /> Zawierający przeanalizowana reprezentacja wyrażenia; w przeciwnym razie <see langword="null" /> Jeśli <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" /> nie jest zaimplementowana.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku przesłonięcia w klasie pochodnej, ta metoda analizuje wyrażenia i zwraca go jako obiekt, który może służyć jako `parsedData` parametru w <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> lub <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsEvaluate">
      <MemberSignature Language="C#" Value="public virtual bool SupportsEvaluate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsEvaluate" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SupportsEvaluate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool SupportsEvaluate { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Po przesłonięciu w klasie pochodnej zwraca wartość wskazującą czy bieżące <see cref="T:System.Web.Compilation.ExpressionBuilder" /> stron kompilacji nie obsługuje obiektu.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="T:System.Web.Compilation.ExpressionBuilder" /> obsługuje Obliczanie wyrażenia; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość domyślna dla <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> jest właściwość `false`. Do obsługi stron nie kompilacji, należy zastąpić zarówno <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> — metoda i <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> właściwości.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#2)] 
 [!code-vb[System.Web.Compilation.ExpressionBuilder#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#2)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>