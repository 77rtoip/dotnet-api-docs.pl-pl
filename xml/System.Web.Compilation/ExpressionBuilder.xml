<Type Name="ExpressionBuilder" FullName="System.Web.Compilation.ExpressionBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a39e97c83d91647815f83d50e83bed7d53113de1" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39738946" /></Metadata><TypeSignature Language="C#" Value="public abstract class ExpressionBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.ExpressionBuilder" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionBuilder abstract" />
  <TypeSignature Language="F#" Value="type ExpressionBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Ocenia wyrażenia podczas analizowania strony.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.ExpressionBuilder> Klasa jest klasą bazową dla konstruktorów wyrażeń <xref:System.Web.Compilation.AppSettingsExpressionBuilder> klasy, tworzyć wyrażenia kodu podczas analizy strony.  
  
 Konstruktorzy wyrażenie przeanalizować deklaratywne wyrażeń i utworzyć kod, aby pobrać wartości powiązane z właściwością kontrolki. W scenariuszach kompilacji nie Konstruktor wyrażeń, który obsługuje funkcję kompilacji nie ocenia wyrażenie w czasie wykonywania.  
  
 Jeśli parser strony napotka wyrażenie, które jest rozdzielany parametrami `<%$ %>`, tworzy on Konstruktor wyrażeń dla wyrażenia na podstawie prefiksu w ciągu. Prefiks jest fragment ciągu, który jest na lewo od dwukropka (:). Na przykład, jeśli analizator składni napotka ciąg `<%$ ConnectionStrings:MessageDB %>`, tworzy on <xref:System.Web.Compilation.ConnectionStringsExpressionBuilder> obiektu. Prefiksy są skojarzone z konstruktorów wyrażeń w pliku Web.config w <xref:System.Web.Configuration.CompilationSection.ExpressionBuilders%2A> sekcji.  
  
 Po prawej stronie wyrażenia deklaratywne jest przekazywany do Konstruktora wyrażeń w w wersji ewaluacyjnej. Zastąp <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> metodę, aby wygenerować kod, który zostanie skompilowany ze stroną.  
  
 Chcąc konstruktora wyrażenia niestandardowego, będzie aktywny na stronach, które nie są kompilowane, konieczne jest również przesłonięcie <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> metodę, aby zwrócić obiekt reprezentujący wynik wyrażenia. Należy również zmienić <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> właściwości, aby wskazać, że Konstruktor wyrażeń niestandardowych obsługuje stron nie jest potrzebne kompilowanie.  
  
 Można zdefiniować zestaw właściwości i metod do wybierania i obliczenia wyrażenia nie jest skojarzona z właściwością formantu w czasie projektowania Implementowanie edytora wyrażeń. Edytor jest oznaczona na Konstruktor wyrażeń przy użyciu metadanych na poziomie klasy. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.Design.ExpressionEditor>.  
  
   
  
## Examples  
 Poniższe przykłady kodu przedstawiają sposób tworzenia Konstruktor wyrażeń niestandardowych implementując <xref:System.Web.Compilation.ExpressionBuilder> klasy abstrakcyjnej. Ta implementacja <xref:System.Web.Compilation.ExpressionBuilder> zwraca instrukcję ocenianą, który jest przekazywany do wyrażenia. Aby uruchomić ten przykład, musisz najpierw zarejestrować Konstruktor wyrażeń niestandardowych w pliku Web.config. Pierwszy przykład kodu demonstruje sposób rejestrowania Konstruktor wyrażeń niestandardowych w pliku Web.config.  
  
```  
<configuration>  
    <system.web>  
       <compilation>  
          <expressionBuilders>  
              <add expressionPrefix="MyCustomExpression"  
               type="MyCustomExpressionBuilder"/>  
          </expressionBuilders>  
       </compilation>  
    </system.web>  
</configuration>  
```  
  
 Drugi przykład kodu pokazuje, jak odwoływać się do wyrażenia w pliku .aspx.  
  
```  
<asp:Label ID="Label1" runat="server"   
Text="<%$ MyCustomExpression:Hello, world! %>" />  
```  
  
 Trzeci przykład kodu pokazuje, jak opracować Konstruktor wyrażeń dostosowane przez pochodząca od <xref:System.Web.Compilation.ExpressionBuilder>. Aby uruchomić ten przykład kodu, należy umieścić klasy w folderze App_Code.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#1)] 
 [!code-vb[System.Web.Compilation.ExpressionBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#1)]   
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Przy dziedziczeniu z <see cref="T:System.Web.Compilation.ExpressionBuilder" /> klasy, konieczne jest przesłonięcie <see cref="M:System.Web.Compilation.ExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" /> metody.</para></block>
    <altmember cref="T:System.Web.Compilation.ExpressionBuilderContext" />
    <altmember cref="T:System.Web.Configuration.ExpressionBuilder" />
    <altmember cref="T:System.Web.Configuration.ExpressionBuilderCollection" />
    <altmember cref="T:System.Web.Compilation.AppSettingsExpressionBuilder" />
    <altmember cref="T:System.Web.Compilation.ConnectionStringsExpressionBuilder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Compilation.ExpressionBuilder" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ <xref:System.Web.Compilation.ExpressionBuilder> klasa jest klasą abstrakcyjną, nie można utworzyć wystąpienia <xref:System.Web.Compilation.ExpressionBuilder> bezpośrednio przy użyciu <xref:System.Web.Compilation.ExpressionBuilder.%23ctor%2A> konstruktora.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Podczas wyprowadzania z <see cref="T:System.Web.Compilation.ExpressionBuilder" /> klasy, Zastąp <see cref="M:System.Web.Compilation.ExpressionBuilder.#ctor" /> konstruktora do zaimplementowania akcji niestandardowej inicjalizacji wyrażenia implementacji konstruktora.</para></block>
        <altmember cref="T:System.Web.Compilation.ExpressionBuilderContext" />
        <altmember cref="T:System.Web.Configuration.ExpressionBuilder" />
        <altmember cref="T:System.Web.Configuration.ExpressionBuilderCollection" />
        <altmember cref="T:System.Web.Compilation.AppSettingsExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ConnectionStringsExpressionBuilder" />
      </Docs>
    </Member>
    <Member MemberName="EvaluateExpression">
      <MemberSignature Language="C#" Value="public virtual object EvaluateExpression (object target, System.Web.UI.BoundPropertyEntry entry, object parsedData, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EvaluateExpression(object target, class System.Web.UI.BoundPropertyEntry entry, object parsedData, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EvaluateExpression (target As Object, entry As BoundPropertyEntry, parsedData As Object, context As ExpressionBuilderContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ EvaluateExpression(System::Object ^ target, System::Web::UI::BoundPropertyEntry ^ entry, System::Object ^ parsedData, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member EvaluateExpression : obj * System.Web.UI.BoundPropertyEntry * obj * System.Web.Compilation.ExpressionBuilderContext -&gt; obj&#xA;override this.EvaluateExpression : obj * System.Web.UI.BoundPropertyEntry * obj * System.Web.Compilation.ExpressionBuilderContext -&gt; obj" Usage="expressionBuilder.EvaluateExpression (target, entry, parsedData, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="entry" Type="System.Web.UI.BoundPropertyEntry" />
        <Parameter Name="parsedData" Type="System.Object" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="target">Obiekt zawierający wyrażenie.</param>
        <param name="entry">Obiekt, który reprezentuje informacji dotyczących właściwości powiązany z danym wyrażeniem.</param>
        <param name="parsedData">Obiekt zawierający przeanalizować dane zwrócone przez <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />.</param>
        <param name="context">Informacje kontekstowe oceny wyrażenia.</param>
        <summary>Po przesłonięciu w klasie pochodnej zwraca obiekt, który reprezentuje obliczane wyrażenie.</summary>
        <returns>Obiekt, który reprezentuje obliczane wyrażenie; w przeciwnym razie <see langword="null" /> Jeśli inheritor nie implementuje <see cref="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli chcesz, aby Twoje <xref:System.Web.Compilation.ExpressionBuilder> obiektu będzie aktywny na stronie, która obsługuje funkcję kompilacji nie można zastąpić <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> — metoda i <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> właściwości. <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> Metoda powinna zwrócić obliczania wyrażenia bieżącego.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania zastąpione <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> metodę, aby zwrócić obliczane wyrażenie.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#3)]    
 [!code-vb[System.Web.Compilation.ExpressionBuilder#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#3)]   
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Jeśli zastąpisz <see cref="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" /> metody, konieczne jest również przesłonięcie <see cref="P:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate" /> właściwości.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetCodeExpression">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.CodeExpression GetCodeExpression (System.Web.UI.BoundPropertyEntry entry, object parsedData, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeExpression GetCodeExpression(class System.Web.UI.BoundPropertyEntry entry, object parsedData, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetCodeExpression (entry As BoundPropertyEntry, parsedData As Object, context As ExpressionBuilderContext) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::CodeExpression ^ GetCodeExpression(System::Web::UI::BoundPropertyEntry ^ entry, System::Object ^ parsedData, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member GetCodeExpression : System.Web.UI.BoundPropertyEntry * obj * System.Web.Compilation.ExpressionBuilderContext -&gt; System.CodeDom.CodeExpression" Usage="expressionBuilder.GetCodeExpression (entry, parsedData, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Web.UI.BoundPropertyEntry" />
        <Parameter Name="parsedData" Type="System.Object" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="entry">Obiekt, który reprezentuje informacji dotyczących właściwości powiązany z danym wyrażeniem.</param>
        <param name="parsedData">Obiekt zawierający przeanalizować dane zwrócone przez <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />.</param>
        <param name="context">Informacje kontekstowe oceny wyrażenia.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, zwracany jest kod, który jest używany podczas wykonywania strony do uzyskiwania obliczane wyrażenie.</summary>
        <returns>A <see cref="T:System.CodeDom.CodeExpression" /> służący do przypisywania właściwości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy, które dziedziczą z <xref:System.Web.Compilation.ExpressionBuilder> klasa musi implementować <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> metody abstrakcyjnej.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób zwracania <xref:System.CodeDom.CodeExpression> obiektu przez zastąpienie <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> metody.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#4)] 
 [!code-vb[System.Web.Compilation.ExpressionBuilder#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#4)]   
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>W przypadku zastosowania konstruktora wyrażenia niestandardowego musi wykonaj rzutowanie typu odpowiedniego dla właściwości kontrolki i zwracać operacji rzutowania w <see cref="T:System.CodeDom.CodeExpression" /> obiektu.</para></block>
      </Docs>
    </Member>
    <Member MemberName="ParseExpression">
      <MemberSignature Language="C#" Value="public virtual object ParseExpression (string expression, Type propertyType, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ParseExpression(string expression, class System.Type propertyType, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ParseExpression (expression As String, propertyType As Type, context As ExpressionBuilderContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ParseExpression(System::String ^ expression, Type ^ propertyType, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ParseExpression : string * Type * System.Web.Compilation.ExpressionBuilderContext -&gt; obj&#xA;override this.ParseExpression : string * Type * System.Web.Compilation.ExpressionBuilderContext -&gt; obj" Usage="expressionBuilder.ParseExpression (expression, propertyType, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="expression">Wartość wyrażenia deklaratywnego.</param>
        <param name="propertyType">Typ właściwości powiązany z danym wyrażeniem.</param>
        <param name="context">Informacje kontekstowe oceny wyrażenia.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, funkcja zwraca obiekt, który reprezentuje wyrażenie przeanalizowany.</summary>
        <returns><see cref="T:System.Object" /> Zawierający przeanalizowana reprezentacja wyrażenia; w przeciwnym razie <see langword="null" /> Jeśli <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" /> nie jest zaimplementowana.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku przesłonięcia w klasie pochodnej, ta metoda analizowania wyrażenia i zwraca go jako obiekt, który może służyć jako `parsedData` parametru w <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> lub <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsEvaluate">
      <MemberSignature Language="C#" Value="public virtual bool SupportsEvaluate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsEvaluate" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SupportsEvaluate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool SupportsEvaluate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsEvaluate : bool" Usage="System.Web.Compilation.ExpressionBuilder.SupportsEvaluate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Po przesłonięciu w klasie pochodnej zwraca wartość wskazującą czy bieżący <see cref="T:System.Web.Compilation.ExpressionBuilder" /> obiekt obsługuje stron nie jest potrzebne kompilowanie.</summary>
        <value><see langword="true" /> Jeśli <see cref="T:System.Web.Compilation.ExpressionBuilder" /> obsługuje oceny wyrażenia; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartością domyślną dla <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> właściwość `false`. Do obsługi nie jest potrzebne kompilowanie stron, konieczne jest przesłonięcie zarówno <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> metody i <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> właściwości.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#2)] 
 [!code-vb[System.Web.Compilation.ExpressionBuilder#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#2)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>