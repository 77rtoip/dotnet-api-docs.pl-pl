<Type Name="ExpressionBuilder" FullName="System.Web.Compilation.ExpressionBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="203b0d475469a88a88a694024bb22c74746c33e2" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69142263" /></Metadata><TypeSignature Language="C#" Value="public abstract class ExpressionBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.ExpressionBuilder" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionBuilder abstract" />
  <TypeSignature Language="F#" Value="type ExpressionBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Oblicza wyrażenia podczas analizowania strony.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa jest klasą bazową dla konstruktorów wyrażeń, takich <xref:System.Web.Compilation.AppSettingsExpressionBuilder> jak Klasa, która tworzy wyrażenia kodu podczas analizowania strony. <xref:System.Web.Compilation.ExpressionBuilder>  
  
 Konstruktorzy wyrażeń analizują wyrażenia deklaracyjne i tworzą kod w celu pobrania wartości związanych z właściwością kontrolki. W scenariuszach bez kompilowania Konstruktor wyrażeń obsługujący funkcję No-Compile oblicza wyrażenie w czasie wykonywania.  
  
 Gdy Analizator strony napotka wyrażenie, które jest rozdzielane ciągiem `<%$ %>`, tworzy konstruktora wyrażeń dla wyrażenia na podstawie prefiksu w ciągu. Prefiks jest częścią ciągu, która znajduje się po lewej stronie dwukropka (:). Na przykład gdy analizator napotka ciąg `<%$ ConnectionStrings:MessageDB %>`, <xref:System.Web.Compilation.ConnectionStringsExpressionBuilder> tworzy obiekt. Prefiksy są skojarzone z konstruktorami wyrażeń w pliku Web. config w <xref:System.Web.Configuration.CompilationSection.ExpressionBuilders%2A> sekcji.  
  
 Prawa strona wyrażenia deklaracyjnego jest przenoszona do konstruktora wyrażeń w celu oceny. Zastąp <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> metodę, aby wygenerować kod, który zostanie skompilowany ze stroną.  
  
 Jeśli niestandardowy Konstruktor wyrażeń ma być aktywny na stronach, które nie są kompilowane, należy również zastąpić <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> metodę, aby zwracała obiekt, który reprezentuje wyniki wyrażenia. Należy również przesłonić <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> właściwość, aby wskazać, że niestandardowy Konstruktor wyrażeń nie obsługuje stron bez kompilowania.  
  
 Można zdefiniować zestaw właściwości i metod do wybierania i oceniania wyrażenia, które jest skojarzone z właściwością kontrolki w czasie projektowania przez implementację edytora wyrażeń. Edytor jest oznaczany w Konstruktorze wyrażeń za pomocą metadanych na poziomie klasy. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.Design.ExpressionEditor>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak utworzyć niestandardowy Konstruktor wyrażeń przez implementację <xref:System.Web.Compilation.ExpressionBuilder> klasy abstrakcyjnej. Ta implementacja <xref:System.Web.Compilation.ExpressionBuilder> zwraca obliczaną instrukcję, która jest przenoszona do wyrażenia. Aby uruchomić ten przykład, należy najpierw zarejestrować niestandardowe konstruktora wyrażeń w pliku Web. config. Pierwszy przykład kodu demonstruje sposób rejestrowania niestandardowego konstruktora wyrażeń w pliku Web. config.  
  
```  
<configuration>  
    <system.web>  
       <compilation>  
          <expressionBuilders>  
              <add expressionPrefix="MyCustomExpression"  
               type="MyCustomExpressionBuilder"/>  
          </expressionBuilders>  
       </compilation>  
    </system.web>  
</configuration>  
```  
  
 Drugi przykład kodu demonstruje, jak odwoływać się do wyrażenia w pliku aspx.  
  
```  
<asp:Label ID="Label1" runat="server"   
Text="<%$ MyCustomExpression:Hello, world! %>" />  
```  
  
 Trzeci przykład kodu demonstruje sposób tworzenia dostosowanego konstruktora wyrażeń przez wyprowadzanie z <xref:System.Web.Compilation.ExpressionBuilder>. Aby uruchomić ten przykład kodu, należy umieścić klasę w folderze App_Code.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#1)] 
 [!code-vb[System.Web.Compilation.ExpressionBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#1)]   
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>W przypadku dziedziczenia z <see cref="T:System.Web.Compilation.ExpressionBuilder" /> klasy należy <see cref="M:System.Web.Compilation.ExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" /> zastąpić metodę.</para></block>
    <altmember cref="T:System.Web.Compilation.ExpressionBuilderContext" />
    <altmember cref="T:System.Web.Configuration.ExpressionBuilder" />
    <altmember cref="T:System.Web.Configuration.ExpressionBuilderCollection" />
    <altmember cref="T:System.Web.Compilation.AppSettingsExpressionBuilder" />
    <altmember cref="T:System.Web.Compilation.ConnectionStringsExpressionBuilder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Compilation.ExpressionBuilder" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ Klasa jest abstrakcyjna, nie można utworzyć <xref:System.Web.Compilation.ExpressionBuilder> wystąpienia bezpośrednio przy użyciu <xref:System.Web.Compilation.ExpressionBuilder.%23ctor%2A> konstruktora. <xref:System.Web.Compilation.ExpressionBuilder>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Podczas wyprowadzania z <see cref="T:System.Web.Compilation.ExpressionBuilder" /> klasy, <see cref="M:System.Web.Compilation.ExpressionBuilder.#ctor" /> Przesłoń konstruktora, aby zaimplementować niestandardowe akcje inicjowania dla implementacji programu Expression Builder.</para></block>
        <altmember cref="T:System.Web.Compilation.ExpressionBuilderContext" />
        <altmember cref="T:System.Web.Configuration.ExpressionBuilder" />
        <altmember cref="T:System.Web.Configuration.ExpressionBuilderCollection" />
        <altmember cref="T:System.Web.Compilation.AppSettingsExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ConnectionStringsExpressionBuilder" />
      </Docs>
    </Member>
    <Member MemberName="EvaluateExpression">
      <MemberSignature Language="C#" Value="public virtual object EvaluateExpression (object target, System.Web.UI.BoundPropertyEntry entry, object parsedData, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EvaluateExpression(object target, class System.Web.UI.BoundPropertyEntry entry, object parsedData, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EvaluateExpression (target As Object, entry As BoundPropertyEntry, parsedData As Object, context As ExpressionBuilderContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ EvaluateExpression(System::Object ^ target, System::Web::UI::BoundPropertyEntry ^ entry, System::Object ^ parsedData, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member EvaluateExpression : obj * System.Web.UI.BoundPropertyEntry * obj * System.Web.Compilation.ExpressionBuilderContext -&gt; obj&#xA;override this.EvaluateExpression : obj * System.Web.UI.BoundPropertyEntry * obj * System.Web.Compilation.ExpressionBuilderContext -&gt; obj" Usage="expressionBuilder.EvaluateExpression (target, entry, parsedData, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="entry" Type="System.Web.UI.BoundPropertyEntry" />
        <Parameter Name="parsedData" Type="System.Object" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="target">Obiekt zawierający wyrażenie.</param>
        <param name="entry">Obiekt, który reprezentuje informacje o właściwości powiązanej przez wyrażenie.</param>
        <param name="parsedData">Obiekt zawierający dane przeanalizowane przez <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />.</param>
        <param name="context">Informacje kontekstowe na potrzeby oceny wyrażenia.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, zwraca obiekt, który reprezentuje wyrażenie oceniane.</summary>
        <returns>Obiekt, który reprezentuje wyrażenie oceniane; w przeciwnym <see langword="null" /> razie, jeśli dziedziczy nie implementuje. <see cref="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli obiekt ma być aktywny na stronie, która obsługuje funkcję No-compile, można <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> zastąpić metodę i <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> właściwość. <xref:System.Web.Compilation.ExpressionBuilder> <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> Metoda powinna zwracać ocenę bieżącego wyrażenia.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak użyć zastąpionej <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> metody, aby zwrócić oceniane wyrażenie.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#3)]    
 [!code-vb[System.Web.Compilation.ExpressionBuilder#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#3)]   
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>W przypadku zastąpienia <see cref="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" /> metody należy również <see cref="P:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate" /> zastąpić właściwość.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetCodeExpression">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.CodeExpression GetCodeExpression (System.Web.UI.BoundPropertyEntry entry, object parsedData, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeExpression GetCodeExpression(class System.Web.UI.BoundPropertyEntry entry, object parsedData, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetCodeExpression (entry As BoundPropertyEntry, parsedData As Object, context As ExpressionBuilderContext) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::CodeExpression ^ GetCodeExpression(System::Web::UI::BoundPropertyEntry ^ entry, System::Object ^ parsedData, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member GetCodeExpression : System.Web.UI.BoundPropertyEntry * obj * System.Web.Compilation.ExpressionBuilderContext -&gt; System.CodeDom.CodeExpression" Usage="expressionBuilder.GetCodeExpression (entry, parsedData, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Web.UI.BoundPropertyEntry" />
        <Parameter Name="parsedData" Type="System.Object" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="entry">Obiekt, który reprezentuje informacje o właściwości powiązanej przez wyrażenie.</param>
        <param name="parsedData">Obiekt zawierający dane przeanalizowane przez <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />.</param>
        <param name="context">Informacje kontekstowe na potrzeby oceny wyrażenia.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, zwraca kod, który jest używany podczas wykonywania strony, aby uzyskać obliczone wyrażenie.</summary>
        <returns>Obiekt <see cref="T:System.CodeDom.CodeExpression" /> , który jest używany do przypisywania właściwości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy dziedziczące z <xref:System.Web.Compilation.ExpressionBuilder> klasy muszą <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> implementować metodę abstrakcyjną.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak zwrócić <xref:System.CodeDom.CodeExpression> obiekt przez <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> zastąpienie metody.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#4)] 
 [!code-vb[System.Web.Compilation.ExpressionBuilder#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#4)]   
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>W przypadku zaimplementowania niestandardowego konstruktora wyrażeń należy wykonać odpowiednie rzutowanie typu dla właściwości kontrolki i zwrócić operację Cast w <see cref="T:System.CodeDom.CodeExpression" /> obiekcie.</para></block>
      </Docs>
    </Member>
    <Member MemberName="ParseExpression">
      <MemberSignature Language="C#" Value="public virtual object ParseExpression (string expression, Type propertyType, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ParseExpression(string expression, class System.Type propertyType, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ParseExpression (expression As String, propertyType As Type, context As ExpressionBuilderContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ParseExpression(System::String ^ expression, Type ^ propertyType, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ParseExpression : string * Type * System.Web.Compilation.ExpressionBuilderContext -&gt; obj&#xA;override this.ParseExpression : string * Type * System.Web.Compilation.ExpressionBuilderContext -&gt; obj" Usage="expressionBuilder.ParseExpression (expression, propertyType, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="expression">Wartość wyrażenia deklaratywnego.</param>
        <param name="propertyType">Typ właściwości powiązanej przez wyrażenie.</param>
        <param name="context">Informacje kontekstowe na potrzeby oceny wyrażenia.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, zwraca obiekt, który reprezentuje wyrażenie analizowane.</summary>
        <returns>Zawierający przeanalizowana reprezentację wyrażenia; w przeciwnym razie, <see langword="null" /> Jeśli <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" /> nie jest zaimplementowany. <see cref="T:System.Object" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy jest zastępowany w klasie pochodnej, ta metoda analizuje wyrażenie i zwraca go jako obiekt, który może być używany jako `parsedData` parametr <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> w metodzie lub <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsEvaluate">
      <MemberSignature Language="C#" Value="public virtual bool SupportsEvaluate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsEvaluate" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SupportsEvaluate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool SupportsEvaluate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsEvaluate : bool" Usage="System.Web.Compilation.ExpressionBuilder.SupportsEvaluate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gdy jest zastępowany w klasie pochodnej, zwraca wartość wskazującą, czy bieżący <see cref="T:System.Web.Compilation.ExpressionBuilder" /> obiekt obsługuje strony bez kompilowania.</summary>
        <value><see langword="true" />Jeśli obsługuje szacowanie wyrażeń; w przeciwnym razie <see langword="false" />,. <see cref="T:System.Web.Compilation.ExpressionBuilder" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> domyślna właściwości to `false`. Aby obsługiwać strony bez kompilacji, należy zastąpić <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> metodę <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> i właściwość.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> jak używać właściwości.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#2)] 
 [!code-vb[System.Web.Compilation.ExpressionBuilder#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#2)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
