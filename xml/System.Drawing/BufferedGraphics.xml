<Type Name="BufferedGraphics" FullName="System.Drawing.BufferedGraphics">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8eb376f4bda7764bd0c534a86c20b084960c4a7d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30452361" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class BufferedGraphics : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BufferedGraphics extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.BufferedGraphics" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BufferedGraphics&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class BufferedGraphics sealed : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Udostępnia bufor grafiki dla podwójnego buforowania.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.BufferedGraphics> Klasa umożliwia Implementowanie niestandardowych podwójnego buforowania grafiki. Tworzy otokę dla buforu grafiki, oraz metody, których można zapisać w buforze i renderowania jego zawartości na urządzeniach.  
  
 Użyj podwójnego buforowania grafiki można ograniczenie lub wyeliminowanie migotania powodowany przez ponownego narysowania powierzchni ekranu. Użycie podwójnego buforowania, zaktualizowano grafikę najpierw są rysowane w buforze w pamięci, a bufor są następnie szybko zapisać zawartości niektórych lub wszystkich wyświetlanych powierzchni. Zwykle to stosunkowo Zastąp grafiki wyświetlane ograniczyć lub eliminuje migotanie, która czasami występuje po zaktualizowaniu grafiki.  
  
> [!NOTE]
>  Najprostszym sposobem, aby użyć podwójnego buforowania jest skonfigurowanie <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> kontrolować Flaga stylu w kontroli przy użyciu <xref:System.Windows.Forms.Control.SetStyle%2A> metody. Ustawienie <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> Flaga dla formantu przekierowuje wszystkie malowanie formantu za pomocą domyślnego buforu grafiki, bez wymagania jakiegokolwiek dodatkowego kodu. Ta flaga jest ustawiona na `true` domyślnie.  
  
 <xref:System.Drawing.BufferedGraphics> Klasa nie ma publicznego konstruktora i muszą zostać utworzone przez <xref:System.Drawing.BufferedGraphicsContext> dla domeny aplikacji przy użyciu jego <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> metody. Możesz pobrać <xref:System.Drawing.BufferedGraphicsContext> bieżącej domeny aplikacji z statycznych <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType> właściwości.  
  
 <xref:System.Drawing.BufferedGraphics.Graphics%2A> Właściwość może być używana do rysowania do buforu grafiki. Ta właściwość zapewnia dostęp do <xref:System.Drawing.Graphics> rysuje do buforu grafiki przydzielone dla tego obiektu <xref:System.Drawing.BufferedGraphics> obiektu.  
  
 <xref:System.Drawing.BufferedGraphics.Render%2A> Metoda z nie rysuje argumenty buforować zawartość grafiki na powierzchnię określona, gdy został przydzielony rozmiar buforu. Inne przeciążenia <xref:System.Drawing.BufferedGraphics.Render%2A> metody umożliwiają określenie <xref:System.Drawing.Graphics> obiektu lub <xref:System.IntPtr> obiekt, który wskazuje kontekst urządzenia, do którego ma zostać narysowany zawartości buforu grafiki.  
  
 Aby uzyskać więcej informacji na temat rysowania podwójnie buforowana grafika zobacz [podwójne buforowana grafika](~/docs/framework/winforms/advanced/double-buffered-graphics.md).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, przy użyciu <xref:System.Drawing.BufferedGraphics> obiektu do rysowania grafiki przy użyciu kilku typów buforowanie implementacji. Alternatywnie klikając formularz uruchamiania i zatrzymywania czasomierza, że powoduje Rysowanie aktualizacji. Aktualizacje rysowania umożliwiają obserwować wpływ podwójnego buforowania. Kliknięcie prawym przyciskiem myszy cykle formularza za pomocą następujących trybów rysowania:  
  
-   Rysowanie bezpośrednio do <xref:System.Windows.Forms.Control.Handle%2A> dla <xref:System.Windows.Forms.Form>.  
  
-   Rysowanie przez zastąpienie <xref:System.Windows.Forms.Form.OnPaint%2A> przy użyciu metody <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> kontrolować stylu.  
  
-   Rysowanie przez zastąpienie <xref:System.Windows.Forms.Form.OnPaint%2A> metodę dla metody formularza bez użycia <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> kontrolować stylu.  
  
 W każdym trybie tekstu jest rysowana Określa bieżący tryb, który określa zachowanie, która występuje po naciśnięciu przycisku myszy.  
  
 [!code-cpp[BufferedGraphicsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferedGraphicsExample/CPP/bufferingtest.cpp#1)]
 [!code-csharp[BufferedGraphicsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferedGraphicsExample/CS/bufferingtest.cs#1)]
 [!code-vb[BufferedGraphicsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferedGraphicsExample/VB/bufferingtest.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <see cref="T:System.Drawing.BufferedGraphics" /> Klasa nie jest bezpieczne dla wątków. Podczas uzyskiwania dostępu do buforu grafiki z oddzielnych wątkach, należy używać mechanizmu kontroli dostępu wątku, aby zapobiec konfliktom.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszelkie zasoby używane przez <see cref="T:System.Drawing.BufferedGraphics" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie <xref:System.Drawing.BufferedGraphics.Dispose%2A> po zakończeniu przy użyciu <xref:System.Drawing.BufferedGraphics> obiektu. <xref:System.Drawing.BufferedGraphics.Dispose%2A> Pozostawia metody <xref:System.Drawing.BufferedGraphics> obiektu w stanie uniemożliwiającym jego używanie. Po wywołaniu <xref:System.Drawing.BufferedGraphics.Dispose%2A>, konieczne jest zwolnienie wszystkich odwołań do <xref:System.Drawing.BufferedGraphics> obiektów, moduł zbierający elementy bezużyteczne mógł odzyskać pamięć który <xref:System.Drawing.BufferedGraphics> klasy obiektu. Aby uzyskać więcej informacji, zobacz [czyszczenie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md) i [implementacja metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Wywoływanie zawsze <xref:System.Drawing.BufferedGraphics.Dispose%2A> przed zwolnieniem ostatniego odwołania do <xref:System.Drawing.BufferedGraphics> obiektu. W przeciwnym razie używa zasobów nie zostanie zwolniona do wywołania modułu zbierającego elementy bezużyteczne <xref:System.Drawing.BufferedGraphics> obiektu `Finalize` metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~BufferedGraphics ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!BufferedGraphics ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Umożliwia obiektu, próby zwolnienia zasobów i wykonywać inne operacje oczyszczania, przed jego jest odzyskana przez wyrzucanie elementów bezużytecznych.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="Graphics">
      <MemberSignature Language="C#" Value="public System.Drawing.Graphics Graphics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Graphics Graphics" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.BufferedGraphics.Graphics" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Graphics As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Graphics ^ Graphics { System::Drawing::Graphics ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Drawing.Graphics" /> obiektu, który wyprowadza do buforu grafiki.</summary>
        <value>A <see cref="T:System.Drawing.Graphics" /> obiektu, który wyprowadza do buforu grafiki.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zapewnia <xref:System.Drawing.Graphics> rysuje do buforu grafiki przydzielone dla tego obiektu <xref:System.Drawing.BufferedGraphics> obiektu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Render">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje zawartość buforu grafiki.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje zawartość buforu grafiki domyślnego urządzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zapisuje zawartość buforu grafiki do urządzenia określonego przez wywołanie metody <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> metody <xref:System.Drawing.BufferedGraphicsContext> użytej do utworzenia tego <xref:System.Drawing.BufferedGraphics> obiektu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render (System.Drawing.Graphics target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render(class System.Drawing.Graphics target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render(System.Drawing.Graphics)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render (target As Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render(System::Drawing::Graphics ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="target">A <see cref="T:System.Drawing.Graphics" /> obiektu, do którego należy zapisać zawartość buforu grafiki.</param>
        <summary>Zapisuje zawartość buforu grafiki do określonego <see cref="T:System.Drawing.Graphics" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zapisuje zawartość buforu grafiki do określonego <xref:System.Drawing.Graphics> obiektu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje renderowania zawartości buforu grafiki na określony <xref:System.Drawing.Graphics> obiektu. Ten kod jest częścią większego przykładu udostępnionego dla <xref:System.Drawing.BufferedGraphics> klasy.  
  
 [!code-cpp[BufferingExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#5)]
 [!code-csharp[BufferingExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#5)]
 [!code-vb[BufferingExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render (IntPtr targetDC);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render(native int targetDC) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render (targetDC As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render(IntPtr targetDC);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDC" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="targetDC">
          <see cref="T:System.IntPtr" /> Wskazującego do kontekstu urządzenia, do którego należy zapisać zawartość buforu grafiki.</param>
        <summary>Zapisuje zawartość buforu grafiki do kontekstu urządzenia skojarzonego z określonym <see cref="T:System.IntPtr" /> obsługi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zapisuje zawartość buforu grafiki do kontekstu urządzenia skojarzonego z określonym <xref:System.IntPtr> obsługi.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób renderowania zawartości buforu grafiki `grafx` dla kontekstu określonego urządzenia. Ten kod jest częścią większego przykładu udostępnionego dla <xref:System.Drawing.BufferedGraphics> klasy.  
  
 [!code-cpp[BufferingExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#6)]
 [!code-csharp[BufferingExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#6)]
 [!code-vb[BufferingExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#6)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać dostęp do kodu niezarządzanego. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <altmember cref="T:System.IntPtr" />
      </Docs>
    </Member>
  </Members>
</Type>