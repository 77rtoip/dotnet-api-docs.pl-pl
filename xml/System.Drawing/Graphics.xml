<Type Name="Graphics" FullName="System.Drawing.Graphics">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="86cf101ca8adcd29b4d106ff6e8a61264722043b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30452916" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Graphics : MarshalByRefObject, IDisposable, System.Drawing.IDeviceContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Graphics extends System.MarshalByRefObject implements class System.Drawing.IDeviceContext, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Graphics" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Graphics&#xA;Inherits MarshalByRefObject&#xA;Implements IDeviceContext, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Graphics sealed : MarshalByRefObject, IDisposable, System::Drawing::IDeviceContext" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Drawing.IDeviceContext</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Hermetyzuje GDI + powierzchni do rysowania. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics> Klasa dostarcza metody do rysowania obiektów do urządzenia. A <xref:System.Drawing.Graphics> jest skojarzony z kontekstem określonego urządzenia.  
  
 Możesz uzyskać <xref:System.Drawing.Graphics> obiektu przez wywołanie metody <xref:System.Windows.Forms.Control.CreateGraphics%2A?displayProperty=nameWithType> metody dla obiekt, który dziedziczy z <xref:System.Windows.Forms.Control?displayProperty=nameWithType>, lub obsługa formantu <xref:System.Windows.Forms.Control.Paint?displayProperty=nameWithType> zdarzeń i uzyskiwania dostępu do <xref:System.Windows.Forms.PaintEventArgs.Graphics%2A> właściwość <xref:System.Windows.Forms.PaintEventArgs?displayProperty=nameWithType> klasy. Można również utworzyć <xref:System.Drawing.Graphics> obiektu z obrazu przy użyciu <xref:System.Drawing.Graphics.FromImage%2A> metody. Aby uzyskać więcej informacji o tworzeniu <xref:System.Drawing.Graphics> obiektów, zobacz [porady: Tworzenie obiektów graficznych do rysowania](~/docs/framework/winforms/advanced/how-to-create-graphics-objects-for-drawing.md).  
  
 Może wykonywać rysowanie wielu różnych kształtów i wiersze, za pomocą <xref:System.Drawing.Graphics> obiektu. Aby uzyskać więcej informacji o sposobie Rysowanie linii i kształtów, zobacz konkretnym `Draw` *GraphicalElement* metoda wiersza lub aby narysować kształt. Te metody obejmują <xref:System.Drawing.Graphics.DrawLine%2A>, <xref:System.Drawing.Graphics.DrawArc%2A>, <xref:System.Drawing.Graphics.DrawClosedCurve%2A>, <xref:System.Drawing.Graphics.DrawPolygon%2A>, i <xref:System.Drawing.Graphics.DrawRectangle%2A>. Aby uzyskać więcej informacji o sposobie Rysowanie linii i kształtów, zobacz [za pomocą pióra do rysowania linii i kształtów](~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md) i [używanie pędzla do wypełnienia kształtów](~/docs/framework/winforms/advanced/using-a-brush-to-fill-shapes.md).  
  
 Można również narysować przy użyciu obrazów i ikon <xref:System.Drawing.Graphics.DrawImage%2A> i <xref:System.Drawing.Graphics.DrawIcon%2A> metod, odpowiednio. Na transfer bitowego bloku danych koloru z ekranu do powierzchni rysowania <xref:System.Drawing.Graphics> obiektów, zobacz <xref:System.Drawing.Graphics.CopyFromScreen%2A>. Aby uzyskać więcej informacji o sposobie rysowanie obrazów z <xref:System.Drawing.Graphics> obiektów, zobacz [Praca z obrazami, mapami bitowymi, ikony i metapliki](~/docs/framework/winforms/advanced/working-with-images-bitmaps-icons-and-metafiles.md).  
  
 Ponadto można manipulować współrzędnych używany przez <xref:System.Drawing.Graphics> obiektu. Aby uzyskać więcej informacji na układ współrzędnych i jak zmian, zobacz [systemy i transformacje współrzędnych](~/docs/framework/winforms/advanced/coordinate-systems-and-transformations.md).  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> obiektu. <xref:System.Windows.Forms.PaintEventArgs> Nosi nazwę obiektu `e` i jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG. Plik o nazwie SampImag.jpg i znajduje się w folderze przykładu.  
  
-   Tworzy punkt, w którym ma zostać narysowany lewego górnego rogu obrazu.  
  
-   Rysuje obraz nieskalowanego do ekranu przy użyciu <xref:System.Drawing.Graphics> obiektu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#40)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#40)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#40)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddMetafileComment">
      <MemberSignature Language="C#" Value="public void AddMetafileComment (byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddMetafileComment(unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.AddMetafileComment(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddMetafileComment (data As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddMetafileComment(cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="data">Tablica bajtów zawierająca komentarz.</param>
        <summary>Dodaje komentarz do bieżącego <see cref="T:System.Drawing.Imaging.Metafile" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest prawidłowa tylko wtedy, gdy ten <xref:System.Drawing.Graphics> jest skojarzony z <xref:System.Drawing.Imaging.Metafile>.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> program obsługi zdarzeń, jak również `thisForm`, <xref:System.Windows.Forms.Form> dla przykładu. Kod wykonuje następujące czynności:  
  
-   Tworzy tymczasowy <xref:System.Drawing.Graphics> tworzenia metaplik i pobiera `hdc`, dojścia do jego kontekst urządzenia.  
  
-   Tworzy nowego przy użyciu metaplik `hdc`.  
  
-   Tworzy <xref:System.Drawing.Graphics> do wyświetlenia metaplik z <xref:System.Drawing.Imaging.Metafile>.  
  
-   Rysuje prostokąt metaplik.  
  
-   Dodaje komentarz do metaplik.  
  
-   Usuwa <xref:System.Drawing.Graphics> dla metaplik, który zamyka metaplik.  
  
-   Usuwa metaplik.  
  
-   Zwalnia tymczasowy `hdc`.  
  
-   Usuwa tymczasowy <xref:System.Drawing.Graphics>.  
  
-   Tworzy drugi metaplik z utworzonego wcześniej pliku.  
  
-   Rysuje metaplik do ekranu.  
  
-   Usuwa metaplik.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginContainer">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje bieżący stan to kontener grafiki <see cref="T:System.Drawing.Graphics" /> otwiera i używa nowego kontenera grafiki.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer () As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje bieżący stan to kontener grafiki <see cref="T:System.Drawing.Graphics" /> otwiera i używa nowego kontenera grafiki.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> reprezentujący stan to <see cref="T:System.Drawing.Graphics" /> w momencie wywołania metody.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej metody za pomocą <xref:System.Drawing.Graphics.EndContainer%2A> metodę w celu utworzenia zagnieżdżonych kontenerów grafiki. Kontenery grafiki zachowany stan grafiki, takie jak przekształcania, obszar przycinania i właściwości renderowania.  
  
 Podczas wywoływania <xref:System.Drawing.Graphics.BeginContainer%2A> metody <xref:System.Drawing.Graphics>, blok informacji, która przechowuje stan <xref:System.Drawing.Graphics> jest umieszczany na stosie. <xref:System.Drawing.Graphics.BeginContainer%2A> Metoda zwraca <xref:System.Drawing.Drawing2D.GraphicsContainer> identyfikujący ten blok informacji. Podczas przekazywania identyfikujące obiektu <xref:System.Drawing.Graphics.EndContainer%2A> metoda, zostanie usunięta ze stosu blok informacji i służy do przywracania <xref:System.Drawing.Graphics> do stanu, istniał w momencie <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody.  
  
 Mogą być zagnieżdżone kontenery; oznacza to, że można wywołać <xref:System.Drawing.Graphics.BeginContainer%2A> metody kilka razy przed wywołaniem <xref:System.Drawing.Graphics.EndContainer%2A> metody. Zawsze należy wywołać <xref:System.Drawing.Graphics.BeginContainer%2A> metody blok informacji jest umieszczany na stosie i pojawi się <xref:System.Drawing.Drawing2D.GraphicsContainer> bloku informacji. Podczas przekazywania jednego z tych obiektów do <xref:System.Drawing.Graphics.EndContainer%2A> metody <xref:System.Drawing.Graphics> jest zwracana do stanu, istniał w momencie <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody, zwrócona który określonego <xref:System.Drawing.Drawing2D.GraphicsContainer>. Blok informacji umieszczone na stosie przez to <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody jest usuwana ze stosu, a wszystkie bloki informacji dotyczącymi ten stos po <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody, które również zostaną usunięte.  
  
 Wywołuje się <xref:System.Drawing.Graphics.Save%2A> metody bloków informacyjnych miejsce na tym samym stosie jako wywołania <xref:System.Drawing.Graphics.BeginContainer%2A> metody. Podobnie jak <xref:System.Drawing.Graphics.EndContainer%2A> wywołanie metody łączyć się z <xref:System.Drawing.Graphics.BeginContainer%2A> wywołanie metody <xref:System.Drawing.Graphics.Restore%2A> wywołanie metody łączyć się z <xref:System.Drawing.Graphics.Save%2A> wywołania metody.  
  
 Podczas wywoływania <xref:System.Drawing.Graphics.EndContainer%2A> metody wszystkich bloków informacyjnych umieszczone na stosie (przez <xref:System.Drawing.Graphics.Save%2A> metody lub <xref:System.Drawing.Graphics.BeginContainer%2A> — metoda) po odpowiedniego wywołania <xref:System.Drawing.Graphics.BeginContainer%2A> metody zostaną usunięte ze stosu. Podobnie podczas wywoływania <xref:System.Drawing.Graphics.Restore%2A> metody wszystkich bloków informacyjnych umieszczone na stosie (przez <xref:System.Drawing.Graphics.Save%2A> — metoda lub <xref:System.Drawing.Graphics.BeginContainer%2A> — metoda) po odpowiedniego wywołania <xref:System.Drawing.Graphics.Save%2A> metody zostaną usunięte ze stosu.  
  
 Stan grafiki ustala <xref:System.Drawing.Graphics.BeginContainer%2A> metoda zawiera właściwości renderowania domyślny stan grafiki; zmiany stanu renderingu istniejących podczas wywoływania metody są resetowane do wartości domyślnych.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Zostanie otwarty nowy kontener grafiki i zapisuje starego kontenera.  
  
-   Wykonuje translację współrzędnych świata w kontenerze.  
  
-   Wypełnia czerwonym prostokątem (translacji współrzędne) nowego kontenera.  
  
-   Zamyka nowego kontenera i przywraca zapisane kontenera.  
  
-   Wypełnia zielony prostokąt (niezrozumiały współrzędne) zapisane kontenera.  
  
 Wynik jest zielony prostokąt overlies czerwony prostokąt ten sam rozmiar.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.Rectangle dstrect, System.Drawing.Rectangle srcrect, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer(valuetype System.Drawing.Rectangle dstrect, valuetype System.Drawing.Rectangle srcrect, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer (dstrect As Rectangle, srcrect As Rectangle, unit As GraphicsUnit) As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer(System::Drawing::Rectangle dstrect, System::Drawing::Rectangle srcrect, System::Drawing::GraphicsUnit unit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dstrect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcrect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="dstrect">
          <see cref="T:System.Drawing.Rectangle" /> struktury, wraz z <c>srcrect</c> parametr określa transformację skalowania dla kontenera.</param>
        <param name="srcrect">
          <see cref="T:System.Drawing.Rectangle" /> struktury, wraz z <c>dstrect</c> parametr określa transformację skalowania dla kontenera.</param>
        <param name="unit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostkę miary dla kontenera.</param>
        <summary>Zapisuje bieżący stan to kontener grafiki <see cref="T:System.Drawing.Graphics" /> otwiera i używa nowego kontenera grafiki z przekształcania określonej skali.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> reprezentujący stan to <see cref="T:System.Drawing.Graphics" /> w momencie wywołania metody.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej metody za pomocą <xref:System.Drawing.Graphics.EndContainer%2A> metodę w celu utworzenia zagnieżdżonych kontenerów grafiki. Kontenery grafiki zachowany stan grafiki, takie jak przekształcania, obszar przycinania i właściwości renderowania.  
  
 Podczas wywoływania <xref:System.Drawing.Graphics.BeginContainer%2A> metody <xref:System.Drawing.Graphics>, blok informacji, która przechowuje stan <xref:System.Drawing.Graphics> jest umieszczany na stosie. <xref:System.Drawing.Graphics.BeginContainer%2A> Metoda zwraca <xref:System.Drawing.Drawing2D.GraphicsContainer> identyfikujący ten blok informacji. Podczas przekazywania identyfikujące obiektu <xref:System.Drawing.Graphics.EndContainer%2A> metoda, zostanie usunięta ze stosu blok informacji i służy do przywracania <xref:System.Drawing.Graphics> do stanu, istniał w momencie <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody.  
  
 Mogą być zagnieżdżone kontenery; oznacza to, że można wywołać <xref:System.Drawing.Graphics.BeginContainer%2A> metody kilka razy przed wywołaniem <xref:System.Drawing.Graphics.EndContainer%2A> metody. Zawsze należy wywołać <xref:System.Drawing.Graphics.BeginContainer%2A> metody blok informacji jest umieszczany na stosie i pojawi się <xref:System.Drawing.Drawing2D.GraphicsContainer> bloku informacji. Podczas przekazywania jednego z tych obiektów do <xref:System.Drawing.Graphics.EndContainer%2A> metody <xref:System.Drawing.Graphics> jest zwracana do stanu, istniał w momencie <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody, zwrócona który określonego <xref:System.Drawing.Drawing2D.GraphicsContainer>. Blok informacji umieszczone na stosie przez to <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody jest usuwana ze stosu, a wszystkie bloki informacji dotyczącymi ten stos po <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody, które również zostaną usunięte.  
  
 Wywołuje się <xref:System.Drawing.Graphics.Save%2A> metody bloków informacyjnych miejsce na tym samym stosie jako wywołania <xref:System.Drawing.Graphics.BeginContainer%2A> metody. Podobnie jak <xref:System.Drawing.Graphics.EndContainer%2A> wywołanie metody łączyć się z <xref:System.Drawing.Graphics.BeginContainer%2A> wywołanie metody <xref:System.Drawing.Graphics.Restore%2A> wywołanie metody łączyć się z <xref:System.Drawing.Graphics.Save%2A> wywołania metody.  
  
 Podczas wywoływania <xref:System.Drawing.Graphics.EndContainer%2A> metody wszystkich bloków informacyjnych umieszczone na stosie (przez <xref:System.Drawing.Graphics.Save%2A> metody lub <xref:System.Drawing.Graphics.BeginContainer%2A> — metoda) po odpowiedniego wywołania <xref:System.Drawing.Graphics.BeginContainer%2A> metody zostaną usunięte ze stosu. Podobnie podczas wywoływania <xref:System.Drawing.Graphics.Restore%2A> metody wszystkich bloków informacyjnych umieszczone na stosie (przez <xref:System.Drawing.Graphics.Save%2A> — metoda lub <xref:System.Drawing.Graphics.BeginContainer%2A> — metoda) po odpowiedniego wywołania <xref:System.Drawing.Graphics.Save%2A> metody zostaną usunięte ze stosu.  
  
 Ta metoda Określa transformację skalowania dla nowego kontenera grafiki z `dstrect` i `srcrect` parametrów. Skala jest taki sam, transformacja, gdy jest stosowany do `srcrect`, wynikiem `dstrect`.  
  
 Stan grafiki ustala <xref:System.Drawing.Graphics.BeginContainer%2A> metoda zawiera właściwości renderowania domyślny stan grafiki; zmiany stanu renderingu istniejących podczas wywoływania metody są resetowane do wartości domyślnych.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy dwie prostokątach, aby określić transformację skalowania dla nowego kontenera.  
  
-   Zostanie otwarty nowy kontener grafiki i zapisuje starego kontenera.  
  
-   Wypełnia czerwonym prostokątem (skalowane współrzędne) nowego kontenera.  
  
-   Zamyka nowego kontenera i przywraca zapisane kontenera.  
  
-   Wypełnia zielony prostokąt (nieskalowanego współrzędne) zapisane kontenera.  
  
 Wynik jest zielony prostokąt overlies mniejszych prostokąt czerwony.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.RectangleF dstrect, System.Drawing.RectangleF srcrect, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer(valuetype System.Drawing.RectangleF dstrect, valuetype System.Drawing.RectangleF srcrect, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer (dstrect As RectangleF, srcrect As RectangleF, unit As GraphicsUnit) As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer(System::Drawing::RectangleF dstrect, System::Drawing::RectangleF srcrect, System::Drawing::GraphicsUnit unit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dstrect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcrect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="dstrect">
          <see cref="T:System.Drawing.RectangleF" /> struktury, wraz z <c>srcrect</c> parametr określa transformację skalowania dla nowego kontenera grafiki.</param>
        <param name="srcrect">
          <see cref="T:System.Drawing.RectangleF" /> struktury, wraz z <c>dstrect</c> parametr określa transformację skalowania dla nowego kontenera grafiki.</param>
        <param name="unit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostkę miary dla kontenera.</param>
        <summary>Zapisuje bieżący stan to kontener grafiki <see cref="T:System.Drawing.Graphics" /> otwiera i używa nowego kontenera grafiki z przekształcania określonej skali.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> reprezentujący stan to <see cref="T:System.Drawing.Graphics" /> w momencie wywołania metody.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej metody za pomocą <xref:System.Drawing.Graphics.EndContainer%2A> metodę w celu utworzenia zagnieżdżonych kontenerów grafiki. Kontenery grafiki zachowany stan grafiki, takie jak przekształcania, obszar przycinania i właściwości renderowania.  
  
 Podczas wywoływania <xref:System.Drawing.Graphics.BeginContainer%2A> metody <xref:System.Drawing.Graphics>, blok informacji, która przechowuje stan <xref:System.Drawing.Graphics> jest umieszczany na stosie. <xref:System.Drawing.Graphics.BeginContainer%2A> Metoda zwraca <xref:System.Drawing.Drawing2D.GraphicsContainer> identyfikujący ten blok informacji. Podczas przekazywania identyfikujące obiektu <xref:System.Drawing.Graphics.EndContainer%2A> metoda, zostanie usunięta ze stosu blok informacji i służy do przywracania <xref:System.Drawing.Graphics> do stanu, istniał w momencie <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody.  
  
 Mogą być zagnieżdżone kontenery; oznacza to, że można wywołać <xref:System.Drawing.Graphics.BeginContainer%2A> metody kilka razy przed wywołaniem <xref:System.Drawing.Graphics.EndContainer%2A> metody. Zawsze należy wywołać <xref:System.Drawing.Graphics.BeginContainer%2A> metody blok informacji jest umieszczany na stosie i pojawi się <xref:System.Drawing.Drawing2D.GraphicsContainer> bloku informacji. Podczas przekazywania jednego z tych obiektów do <xref:System.Drawing.Graphics.EndContainer%2A> metody <xref:System.Drawing.Graphics> jest zwracana do stanu, istniał w momencie <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody, zwrócona który określonego <xref:System.Drawing.Drawing2D.GraphicsContainer>. Blok informacji umieszczone na stosie przez to <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody jest usuwana ze stosu, a wszystkie bloki informacji dotyczącymi ten stos po <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody, które również zostaną usunięte.  
  
 Wywołuje się <xref:System.Drawing.Graphics.Save%2A> metody bloków informacyjnych miejsce na tym samym stosie jako wywołania <xref:System.Drawing.Graphics.BeginContainer%2A> metody. Podobnie jak <xref:System.Drawing.Graphics.EndContainer%2A> wywołanie metody łączyć się z <xref:System.Drawing.Graphics.BeginContainer%2A> wywołanie metody <xref:System.Drawing.Graphics.Restore%2A> wywołanie metody łączyć się z <xref:System.Drawing.Graphics.Save%2A> wywołania metody.  
  
 Podczas wywoływania <xref:System.Drawing.Graphics.EndContainer%2A> metody wszystkich bloków informacyjnych umieszczone na stosie (przez `Save` metody lub <xref:System.Drawing.Graphics.BeginContainer%2A> — metoda) po odpowiedniego wywołania <xref:System.Drawing.Graphics.BeginContainer%2A> metody zostaną usunięte ze stosu. Podobnie podczas wywoływania <xref:System.Drawing.Graphics.Restore%2A> metody wszystkich bloków informacyjnych umieszczone na stosie (przez <xref:System.Drawing.Graphics.Save%2A> — metoda lub <xref:System.Drawing.Graphics.BeginContainer%2A> — metoda) po odpowiedniego wywołania <xref:System.Drawing.Graphics.Save%2A> metody zostaną usunięte ze stosu.  
  
 Ta metoda Określa transformację skalowania dla nowego kontenera grafiki z `dstrect` i `srcrect` parametrów. Skala jest taki sam, transformacja, gdy jest stosowany do `srcrect`, wynikiem `dstrect`.  
  
 Stan grafiki ustala <xref:System.Drawing.Graphics.BeginContainer%2A> metoda zawiera właściwości renderowania domyślny stan grafiki; zmiany stanu renderingu istniejących podczas wywoływania metody są resetowane do wartości domyślnych.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy dwie prostokątach, aby określić transformację skalowania dla nowego kontenera.  
  
-   Zostanie otwarty nowy kontener grafiki i zapisuje starego kontenera.  
  
-   Wypełnia czerwonym prostokątem (skalowane współrzędne) nowego kontenera.  
  
-   Zamyka nowego kontenera i przywraca zapisane kontenera.  
  
-   Wypełnia zielony prostokąt (nieskalowanego współrzędne) zapisane kontenera.  
  
 Wynik jest zielony prostokąt overlies mniejszych prostokąt czerwony.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear(valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Clear(System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear(System::Drawing::Color color);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color">
          <see cref="T:System.Drawing.Color" /> Struktura, która reprezentuje kolor tła powierzchni do rysowania.</param>
        <summary>Czyści całą powierzchni do rysowania i wypełnia je kolor tła określony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.Clear%2A> Metody czyści stanu obiektu grafiki i nie powinna być wywoływana, gdy nie można zaktualizować obiektu grafiki. Na przykład jeśli <xref:System.Drawing.Graphics.Clear%2A> metoda jest wywoływana na bezpiecznym pulpicie w sesji serwera terminali <xref:System.Runtime.InteropServices.ExternalException> może wystąpić, pozostawiając <xref:System.Drawing.Graphics> obiektu w niespójnym stanie.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod usuwa powierzchni rysowania <xref:System.Drawing.Graphics> i ustawia kolor tła na kolor jest zdefiniowana w systemie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Drawing.Region Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Region Clip" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Property Clip As Region" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Region ^ Clip { System::Drawing::Region ^ get(); void set(System::Drawing::Region ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Region</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Drawing.Region" /> , która ogranicza regionie rysowania <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>A <see cref="T:System.Drawing.Region" /> , która ogranicza to część <see cref="T:System.Drawing.Graphics" /> obecnie dostępnej na rysunku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Modyfikowanie <xref:System.Drawing.Region> obiektu zwróconego przez <xref:System.Drawing.Graphics.Clip%2A> właściwość nie ma wpływu na rysunku kolejnych z <xref:System.Drawing.Graphics> obiektu. Aby zmienić obszar przycinania, należy zastąpić <xref:System.Drawing.Graphics.Clip%2A> nowej wartości właściwości <xref:System.Drawing.Region> obiektu. Aby ustalić, czy obszar przycinania to nieskończoność, pobrać <xref:System.Drawing.Graphics.Clip%2A> właściwości i wywołanie jego <xref:System.Drawing.Region.IsInfinite%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie <xref:System.Drawing.Graphics.Clip%2A> właściwości. W tym przykładzie jest przeznaczony do użycia z formularzy systemu Windows. Wklej kod do formularza i wywołanie `SetAndFillClip` metody podczas obsługi formularza <xref:System.Windows.Forms.Control.Paint> przekazywania zdarzeń `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.GraphicsProperties#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#4)]
 [!code-vb[System.Drawing.GraphicsProperties#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF ClipBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF ClipBounds" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.ClipBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClipBounds As RectangleF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::RectangleF ClipBounds { System::Drawing::RectangleF get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Drawing.RectangleF" /> strukturę, która zakresem obszaru przycinania tego <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>A <see cref="T:System.Drawing.RectangleF" /> strukturę, która reprezentuje prostokąt ograniczający dla regionu wycinka <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jednostką wynikowy prostokąt określony przez <xref:System.Drawing.Graphics.PageUnit%2A> właściwości. Wartość jednostki jest pikseli. A <xref:System.Drawing.Graphics> jest zazwyczaj skojarzony z formantem i pochodzenia prostokąt będzie względem obszaru klienckiego formantu.  
  
 Jeśli obszaru przycinania to nieskończoność, <xref:System.Drawing.Graphics.ClipBounds%2A> właściwość zwraca prostokąt dużych znaczenia. Aby ustalić, czy obszar przycinania to nieskończoność, pobrać <xref:System.Drawing.Graphics.Clip%2A> właściwości i wywołanie jego <xref:System.Drawing.Region.IsInfinite%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositingMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CompositingMode CompositingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.CompositingMode CompositingMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.CompositingMode" />
      <MemberSignature Language="VB.NET" Value="Public Property CompositingMode As CompositingMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CompositingMode CompositingMode { System::Drawing::Drawing2D::CompositingMode get(); void set(System::Drawing::Drawing2D::CompositingMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CompositingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość określającą sposób połączone obrazy są rysowane to <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Ta właściwość określa członkiem <see cref="T:System.Drawing.Drawing2D.CompositingMode" /> wyliczenia. Wartość domyślna to <see cref="F:System.Drawing.Drawing2D.CompositingMode.SourceOver" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Trybu składania Określa, czy pikseli z obrazu źródłowego zastąpić, czy są połączone z tła pikseli.  
  
> [!NOTE]
>  Nie należy używać <xref:System.Drawing.Graphics.CompositingMode%2A> wartość właściwości <xref:System.Drawing.Drawing2D.CompositingMode.SourceCopy> podczas <xref:System.Drawing.Graphics.TextRenderingHint%2A> właściwość jest ustawiona na <xref:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit>. Może wystąpić wyjątek lub obrazu może nie być wyświetlana poprawnie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositingQuality">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CompositingQuality CompositingQuality { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.CompositingQuality CompositingQuality" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.CompositingQuality" />
      <MemberSignature Language="VB.NET" Value="Public Property CompositingQuality As CompositingQuality" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CompositingQuality CompositingQuality { System::Drawing::Drawing2D::CompositingQuality get(); void set(System::Drawing::Drawing2D::CompositingQuality value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CompositingQuality</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia jakość renderowania połączone obrazy do to <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Ta właściwość określa członkiem <see cref="T:System.Drawing.Drawing2D.CompositingQuality" /> wyliczenia. Wartość domyślna to <see cref="F:System.Drawing.Drawing2D.CompositingQuality.Default" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jakość składania określa poziom jakości renderowanie obrazów połączone.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyFromScreen">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wykonuje transfer blok bitowy dane koloru z ekranu do powierzchni rysowania <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(valuetype System.Drawing.Point upperLeftSource, valuetype System.Drawing.Point upperLeftDestination, valuetype System.Drawing.Size blockRegionSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFromScreen (upperLeftSource As Point, upperLeftDestination As Point, blockRegionSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(System::Drawing::Point upperLeftSource, System::Drawing::Point upperLeftDestination, System::Drawing::Size blockRegionSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upperLeftSource" Type="System.Drawing.Point" />
        <Parameter Name="upperLeftDestination" Type="System.Drawing.Point" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="upperLeftSource">Punkt w lewym górnym rogu prostokąta źródła.</param>
        <param name="upperLeftDestination">Punkt w lewym górnym rogu prostokąta docelowego.</param>
        <param name="blockRegionSize">Rozmiar obszaru do przeniesienia.</param>
        <summary>Wykonuje blok bitowy transfer danych kolor odpowiadający prostokąt pikseli, z ekranu do powierzchni rysowania <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> Metody są przydatne w przypadku warstwy jednego obrazu na innym. Aby określić, jak kolory źródłowy i docelowy są mieszane, użyj jednej z <xref:System.Drawing.Graphics.CopyFromScreen%2A> metody, która przyjmuje <xref:System.Drawing.CopyPixelOperation> parametru.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób użycia <xref:System.Drawing.Graphics.CopyFromScreen%2A> metody. Aby uruchomić ten przykład, wklej go do formularza systemu Windows. Obsługa formularzy <xref:System.Windows.Forms.Control.Paint> zdarzeń i wywołanie `CopyPixels1` metody z <xref:System.Windows.Forms.Control.Paint> jest metoda obsługi zdarzeń `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#4)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Operacja nie powiodła się.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Aby uzyskać dostęp do wszystkich okien. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(valuetype System.Drawing.Point upperLeftSource, valuetype System.Drawing.Point upperLeftDestination, valuetype System.Drawing.Size blockRegionSize, valuetype System.Drawing.CopyPixelOperation copyPixelOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size,System.Drawing.CopyPixelOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(System::Drawing::Point upperLeftSource, System::Drawing::Point upperLeftDestination, System::Drawing::Size blockRegionSize, System::Drawing::CopyPixelOperation copyPixelOperation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upperLeftSource" Type="System.Drawing.Point" />
        <Parameter Name="upperLeftDestination" Type="System.Drawing.Point" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
        <Parameter Name="copyPixelOperation" Type="System.Drawing.CopyPixelOperation" />
      </Parameters>
      <Docs>
        <param name="upperLeftSource">Punkt w lewym górnym rogu prostokąta źródła.</param>
        <param name="upperLeftDestination">Punkt w lewym górnym rogu prostokąta docelowego.</param>
        <param name="blockRegionSize">Rozmiar obszaru do przeniesienia.</param>
        <param name="copyPixelOperation">Jeden z <see cref="T:System.Drawing.CopyPixelOperation" /> wartości.</param>
        <summary>Wykonuje blok bitowy transfer danych kolor odpowiadający prostokąt pikseli, z ekranu do powierzchni rysowania <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> Metody są przydatne w przypadku warstwy jednego obrazu na innym. `copyPixelOperation` Parametr umożliwia określenie, czy i jak kolory źródła powinna przenikaniem kolorów w obszarze docelowym.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób użycia <xref:System.Drawing.Graphics.CopyFromScreen%2A> metody. Aby uruchomić ten przykład, wklej go do formularza systemu Windows. Obsługa formularzy <xref:System.Windows.Forms.Control.Paint> zdarzeń i wywołanie `CopyPixels2` metody z <xref:System.Windows.Forms.Control.Paint> jest metoda obsługi zdarzeń `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#5)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="copyPixelOperation" /> nie jest członkiem <see cref="T:System.Drawing.CopyPixelOperation" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Operacja nie powiodła się.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Aby uzyskać dostęp do wszystkich okien. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(int32 sourceX, int32 sourceY, int32 destinationX, int32 destinationY, valuetype System.Drawing.Size blockRegionSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFromScreen (sourceX As Integer, sourceY As Integer, destinationX As Integer, destinationY As Integer, blockRegionSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, System::Drawing::Size blockRegionSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceX" Type="System.Int32" />
        <Parameter Name="sourceY" Type="System.Int32" />
        <Parameter Name="destinationX" Type="System.Int32" />
        <Parameter Name="destinationY" Type="System.Int32" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="sourceX">Współrzędna x punktu w lewym górnym rogu prostokąta źródła.</param>
        <param name="sourceY">Współrzędna y punktu w lewym górnym rogu prostokąta źródła.</param>
        <param name="destinationX">Współrzędna x punktu w lewym górnym rogu prostokąta docelowego.</param>
        <param name="destinationY">Współrzędna y punktu w lewym górnym rogu prostokąta docelowego.</param>
        <param name="blockRegionSize">Rozmiar obszaru do przeniesienia.</param>
        <summary>Wykonuje blok bitowy transfer danych kolor odpowiadający prostokąt pikseli, z ekranu do powierzchni rysowania <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> Metody są przydatne w przypadku warstwy jednego obrazu na innym. Aby określić, jak kolory źródłowy i docelowy są mieszane, użyj jednej z <xref:System.Drawing.Graphics.CopyFromScreen%2A> metody, która przyjmuje <xref:System.Drawing.CopyPixelOperation> parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Drawing.Graphics.CopyFromScreen%2A> drukowania kopię bieżącego formularza.  
  
 [!code-csharp[System.Drawing.Graphics.CopyFromScreen#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Graphics.CopyFromScreen/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Graphics.CopyFromScreen#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Graphics.CopyFromScreen/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Operacja nie powiodła się.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Aby uzyskać dostęp do wszystkich okien. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(int32 sourceX, int32 sourceY, int32 destinationX, int32 destinationY, valuetype System.Drawing.Size blockRegionSize, valuetype System.Drawing.CopyPixelOperation copyPixelOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size,System.Drawing.CopyPixelOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, System::Drawing::Size blockRegionSize, System::Drawing::CopyPixelOperation copyPixelOperation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceX" Type="System.Int32" />
        <Parameter Name="sourceY" Type="System.Int32" />
        <Parameter Name="destinationX" Type="System.Int32" />
        <Parameter Name="destinationY" Type="System.Int32" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
        <Parameter Name="copyPixelOperation" Type="System.Drawing.CopyPixelOperation" />
      </Parameters>
      <Docs>
        <param name="sourceX">Współrzędna x punktu w lewym górnym rogu prostokąta źródła.</param>
        <param name="sourceY">Współrzędna y punktu w lewym górnym rogu prostokąta źródła</param>
        <param name="destinationX">Współrzędna x punktu w lewym górnym rogu prostokąta docelowego.</param>
        <param name="destinationY">Współrzędna y punktu w lewym górnym rogu prostokąta docelowego.</param>
        <param name="blockRegionSize">Rozmiar obszaru do przeniesienia.</param>
        <param name="copyPixelOperation">Jeden z <see cref="T:System.Drawing.CopyPixelOperation" /> wartości.</param>
        <summary>Wykonuje blok bitowy transfer danych kolor odpowiadający prostokąt pikseli, z ekranu do powierzchni rysowania <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> Metody są przydatne w przypadku warstwy jednego obrazu na innym. `copyPixelOperation` Parametr umożliwia określenie, czy i jak kolory źródła powinna przenikaniem kolorów w obszarze docelowym.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób użycia <xref:System.Drawing.Graphics.CopyFromScreen%2A> metody. Aby uruchomić ten przykład, wklej go do formularza systemu Windows. Obsługa formularzy <xref:System.Windows.Forms.Control.Paint> zdarzeń i wywołanie `CopyPixels4` metody z <xref:System.Windows.Forms.Control.Paint> jest metoda obsługi zdarzeń `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#7)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="copyPixelOperation" /> nie jest członkiem <see cref="T:System.Drawing.CopyPixelOperation" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Operacja nie powiodła się.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Aby uzyskać dostęp do wszystkich okien. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszelkie zasoby używane przez to <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywoływanie <xref:System.Drawing.Graphics.Dispose%2A> umożliwia zasoby używane przez to <xref:System.Drawing.Graphics> odbiorczego do innych celów.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy <xref:System.Drawing.Image> z funkcją pliku SampImag.jpg w katalogu przykładzie.  
  
-   Tworzy <xref:System.Drawing.Graphics> z <xref:System.Drawing.Image>.  
  
-   Zmienia obraz, wypełniając prostokąt w niej.  
  
-   Rysuje <xref:System.Drawing.Image> do ekranu.  
  
-   Zwalnia utworzony <xref:System.Drawing.Graphics>.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#6)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiX">
      <MemberSignature Language="C#" Value="public float DpiX { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DpiX" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.DpiX" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DpiX As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float DpiX { float get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera rozdzielczość pozioma tego <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Wartość w punktach na cal dla rozdzielczość pozioma obsługiwanych przez to <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji o tworzeniu aplikacji o wysokiej rozdzielczości zobacz  
  
 [Wysokie DPI](http://go.microsoft.com/fwlink/?LinkId=159804).  
  
   
  
## Examples  
 Następująca metoda pokazano sposób użycia <xref:System.Drawing.Graphics.DpiX%2A> i <xref:System.Drawing.Graphics.DpiY%2A> właściwości. W tym przykładzie jest przeznaczony do użytku z formularza systemu Windows. Aby uruchomić ten przykład, wklej go do formularza, który zawiera <xref:System.Windows.Forms.ListBox> o nazwie Pole_listy1 i ta metoda jest wywoływana z konstruktora formularza.  
  
 [!code-cpp[System.Drawing.MiscExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.MiscExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.MiscExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiY">
      <MemberSignature Language="C#" Value="public float DpiY { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DpiY" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.DpiY" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DpiY As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float DpiY { float get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera rozdzielczość pionowa tego <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Wartość w punktach na cal dla rozdzielczość pionowa obsługiwanych przez to <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji o tworzeniu aplikacji o wysokiej rozdzielczości zobacz  
  
 [Wysokie DPI](http://go.microsoft.com/fwlink/?LinkId=159804).  
  
   
  
## Examples  
 Następująca metoda pokazano sposób użycia <xref:System.Drawing.Graphics.DpiX%2A> i <xref:System.Drawing.Graphics.DpiY%2A> właściwości. W tym przykładzie jest przeznaczony do użytku z formularza systemu Windows. Aby uruchomić ten przykład, wklej go do formularza, który zawiera <xref:System.Windows.Forms.ListBox> o nazwie Pole_listy1 i ta metoda jest wywoływana z konstruktora formularza.  
  
 [!code-cpp[System.Drawing.MiscExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.MiscExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.MiscExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawArc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje łuk reprezentujących część elipsy określony przez parę współrzędnych, szerokość i wysokość.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl łuk.</param>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która definiuje granice elipsy.</param>
        <param name="startAngle">Kąt w stopniach mierzone wskazówek zegara od osi x do punktu początkowego łuk.</param>
        <param name="sweepAngle">Kąt w stopniach wskazówek zegara mierzony z <c>startAngle</c> parametr końcowe łuk.</param>
        <summary>Łuk reprezentujących część elipsy określony przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda Rysuje łuk, który jest częścią obwodowej elipsy. Elipsy jest zdefiniowana przez granice prostokąta. Łuk jest to część obwodowej elipsy między `startAngle` parametru i `startAngle`  +  `sweepAngle` parametrów.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy prostokąt powiązane elipsy.  
  
-   Określa początkowy (45 stopni) i kąta odchylenia (270 stopni).  
  
-   Rysuje łuku do ekranu.  
  
 Wynik jest częściowe elipsy, brak segmentu między + i - 45 stopni na osi x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl łuk.</param>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która definiuje granice elipsy.</param>
        <param name="startAngle">Kąt w stopniach mierzone wskazówek zegara od osi x do punktu początkowego łuk.</param>
        <param name="sweepAngle">Kąt w stopniach wskazówek zegara mierzony z <c>startAngle</c> parametr końcowe łuk.</param>
        <summary>Łuk reprezentujących część elipsy określony przez <see cref="T:System.Drawing.RectangleF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda Rysuje łuk, który jest częścią obwodowej elipsy. Elipsy jest zdefiniowana przez granice prostokąta. Łuk jest to część obwodowej elipsy między `startAngle` parametru i `startAngle`  +  `sweepAngle` parametrów.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy prostokąt powiązane elipsy.  
  
-   Określa początkowy (45 stopni) i kąta odchylenia (270 stopni).  
  
-   Rysuje łuku do ekranu.  
  
 Wynik jest częściowe elipsy, brak segmentu między + i - 45 stopni na osi x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#8)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" /></exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl łuk.</param>
        <param name="x">Współrzędna x górnego lewego rogu prostokąta, który definiuje wielokropka.</param>
        <param name="y">Współrzędna y górnego lewego rogu prostokąta, który definiuje wielokropka.</param>
        <param name="width">Szerokość prostokąta, który definiuje wielokropka.</param>
        <param name="height">Wysokość prostokąta, który definiuje wielokropka.</param>
        <param name="startAngle">Kąt w stopniach mierzone wskazówek zegara od osi x do punktu początkowego łuk.</param>
        <param name="sweepAngle">Kąt w stopniach wskazówek zegara mierzony z <c>startAngle</c> parametr końcowe łuk.</param>
        <summary>Rysuje łuk reprezentujących część elipsy określony przez parę współrzędnych, szerokość i wysokość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda Rysuje łuk, który jest częścią obwodowej elipsy. Elipsy jest zdefiniowana przez granice prostokąta. Łuk jest to część obwodowej elipsy między `startAngle` parametru i `startAngle`  +  `sweepAngle` parametrów.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy położenie i rozmiar prostokąta powiązane elipsy.  
  
-   Określa początkowy (45 stopni) i kąta odchylenia (270 stopni).  
  
-   Rysuje łuku do ekranu.  
  
 Wynik jest częściowe elipsy, brak segmentu między + i - 45 stopni na osi x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#9)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#9)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rects" /> jest tablicą o zerowej długości.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl łuk.</param>
        <param name="x">Współrzędna x górnego lewego rogu prostokąta, który definiuje wielokropka.</param>
        <param name="y">Współrzędna y górnego lewego rogu prostokąta, który definiuje wielokropka.</param>
        <param name="width">Szerokość prostokąta, który definiuje wielokropka.</param>
        <param name="height">Wysokość prostokąta, który definiuje wielokropka.</param>
        <param name="startAngle">Kąt w stopniach mierzone wskazówek zegara od osi x do punktu początkowego łuk.</param>
        <param name="sweepAngle">Kąt w stopniach wskazówek zegara mierzony z <c>startAngle</c> parametr końcowe łuk.</param>
        <summary>Rysuje łuk reprezentujących część elipsy określony przez parę współrzędnych, szerokość i wysokość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda Rysuje łuk, który jest częścią obwodowej elipsy. Elipsy jest zdefiniowana przez granice prostokąta. Łuk jest to część obwodowej elipsy między `startAngle` parametru i `startAngle`  +  `sweepAngle` parametrów.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy położenie i rozmiar prostokąta powiązane elipsy.  
  
-   Określa początkowy (45 stopni) i kąta odchylenia (270 stopni).  
  
-   Rysuje łuku do ekranu.  
  
 Wynik jest częściowe elipsy, brak segmentu między + i - 45 stopni na osi x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#10)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#10)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawBezier">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje krzywej Beziera, zdefiniowane przez cztery <see cref="T:System.Drawing.Point" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2, System.Drawing.Point pt3, System.Drawing.Point pt4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, valuetype System.Drawing.Point pt1, valuetype System.Drawing.Point pt2, valuetype System.Drawing.Point pt3, valuetype System.Drawing.Point pt4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, System::Drawing::Point pt1, System::Drawing::Point pt2, System::Drawing::Point pt3, System::Drawing::Point pt4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.Point" />
        <Parameter Name="pt2" Type="System.Drawing.Point" />
        <Parameter Name="pt3" Type="System.Drawing.Point" />
        <Parameter Name="pt4" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> Struktura, która określa kolor, szerokość i styl krzywej.</param>
        <param name="pt1">
          <see cref="T:System.Drawing.Point" /> Struktura, która reprezentuje punkt początkowy krzywej.</param>
        <param name="pt2">
          <see cref="T:System.Drawing.Point" /> Struktura, która reprezentuje pierwszy punkt kontrolny krzywej.</param>
        <param name="pt3">
          <see cref="T:System.Drawing.Point" /> Struktura, która reprezentuje drugi punkt kontrolny krzywej.</param>
        <param name="pt4">
          <see cref="T:System.Drawing.Point" /> Struktura, która reprezentuje punkt końcowy krzywej.</param>
        <summary>Rysuje krzywej Beziera, zdefiniowane przez cztery <see cref="T:System.Drawing.Point" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Krzywej Beziera jest przenoszony z pierwszego punktu w punkcie czwarty. Punkty drugi i trzeci są punkty kontrolne, które określają kształt krzywej.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy rozpoczęcia, zakończenia i punkty kontrolne dwóch krzywej.  
  
-   Rysuje krzywej Beziera na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#11)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#11)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2, System.Drawing.PointF pt3, System.Drawing.PointF pt4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, valuetype System.Drawing.PointF pt1, valuetype System.Drawing.PointF pt2, valuetype System.Drawing.PointF pt3, valuetype System.Drawing.PointF pt4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, System::Drawing::PointF pt1, System::Drawing::PointF pt2, System::Drawing::PointF pt3, System::Drawing::PointF pt4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.PointF" />
        <Parameter Name="pt2" Type="System.Drawing.PointF" />
        <Parameter Name="pt3" Type="System.Drawing.PointF" />
        <Parameter Name="pt4" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl krzywej.</param>
        <param name="pt1">
          <see cref="T:System.Drawing.PointF" /> Struktura, która reprezentuje punkt początkowy krzywej.</param>
        <param name="pt2">
          <see cref="T:System.Drawing.PointF" /> Struktura, która reprezentuje pierwszy punkt kontrolny krzywej.</param>
        <param name="pt3">
          <see cref="T:System.Drawing.PointF" /> Struktura, która reprezentuje drugi punkt kontrolny krzywej.</param>
        <param name="pt4">
          <see cref="T:System.Drawing.PointF" /> Struktura, która reprezentuje punkt końcowy krzywej.</param>
        <summary>Rysuje krzywej Beziera, zdefiniowane przez cztery <see cref="T:System.Drawing.PointF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Krzywej Beziera jest przenoszony z pierwszego punktu w punkcie czwarty. Punkty drugi i trzeci są punkty kontrolne, które określają kształt krzywej.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy rozpoczęcia, zakończenia i punkty kontrolne dwóch krzywej.  
  
-   Rysuje krzywej Beziera na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#12)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#12)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, float32 x1, float32 y1, float32 x2, float32 y2, float32 x3, float32 y3, float32 x4, float32 y4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="x2" Type="System.Single" />
        <Parameter Name="y2" Type="System.Single" />
        <Parameter Name="x3" Type="System.Single" />
        <Parameter Name="y3" Type="System.Single" />
        <Parameter Name="x4" Type="System.Single" />
        <Parameter Name="y4" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl krzywej.</param>
        <param name="x1">Współrzędna x punktu początkowego krzywej.</param>
        <param name="y1">Współrzędna y punktu początkowego krzywej.</param>
        <param name="x2">Współrzędna x pierwszy punkt kontrolny krzywej.</param>
        <param name="y2">Współrzędna y pierwszy punkt kontrolny krzywej.</param>
        <param name="x3">Współrzędna x drugi punkt kontrolny krzywej.</param>
        <param name="y3">Współrzędna y drugi punkt kontrolny krzywej.</param>
        <param name="x4">Współrzędna x punktu końcowego krzywej.</param>
        <param name="y4">Współrzędna y punktu końcowego krzywej.</param>
        <summary>Rysuje krzywej Beziera, zdefiniowane przez cztery uporządkowanej pary współrzędnych, które reprezentują punkty.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Krzywej Beziera jest przenoszony z pierwszego punktu w punkcie czwarty. Punkty drugi i trzeci są punkty kontrolne, które określają kształt krzywej.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy współrzędne początek, koniec i dwa punkty kontrolne krzywej.  
  
-   Rysuje krzywej Beziera na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#13)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#13)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawBeziers">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje serii krzywych Beziera z tablicy <see cref="T:System.Drawing.Point" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawBeziers">
      <MemberSignature Language="C#" Value="public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBeziers(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBeziers(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl krzywej.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.Point" /> struktur, które reprezentują punkty, które określają krzywej. Liczba punktów w tablicy powinna być wielokrotnością liczby 3 plus 1, 4, 7 lub 10.</param>
        <summary>Rysuje serii krzywych Beziera z tablicy <see cref="T:System.Drawing.Point" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Liczba punktów w tablicy powinna być wielokrotnością liczby 3 plus 1, ponieważ pierwszy krzywej składanej wymaga 4 punkty, a inne krzywe wymagają 3 punkty. Pierwszy krzywej Beziera jest przenoszony z pierwszym punktem czwarty punktu w macierzy punktu. Punkty drugi i trzeci są punkty kontrolne, które określają kształt krzywej. Każda kolejne krzywej musi dokładnie trzy więcej punktów: dwa więcej kontroli punktów i punkt końcowy. Punkt końcowy poprzedniej krzywej służy jako punkt początkowy dla każdego dodatkowego krzywej.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy rozpoczęcia, zakończenia i punkty kontrolne dwa pierwsze krzywej i punktu końcowego i punkty kontrolny krzywej drugiego.  
  
-   Rysuje kolejnych krzywych Beziera na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#14)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#14)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBeziers">
      <MemberSignature Language="C#" Value="public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBeziers(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBeziers(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl krzywej.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które reprezentują punkty, które określają krzywej. Liczba punktów w tablicy powinna być wielokrotnością liczby 3 plus 1, 4, 7 lub 10.</param>
        <summary>Rysuje serii krzywych Beziera z tablicy <see cref="T:System.Drawing.PointF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Liczba punktów w tablicy powinna być wielokrotnością liczby 3 plus 1, ponieważ pierwszy krzywej składanej wymaga 4 punkty, a inne krzywe wymagają 3 punkty. Pierwszy krzywej Beziera jest przenoszony z pierwszym punktem czwarty punktu w macierzy punktu. Punkty drugi i trzeci są punkty kontrolne, które określają kształt krzywej. Każda kolejne krzywej musi dokładnie trzy więcej punktów: dwa więcej kontroli punktów i punkt końcowy. Punkt końcowy poprzedniej krzywej służy jako punkt początkowy dla każdego dodatkowego krzywej.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy rozpoczęcia, zakończenia i punkty kontrolne dwa pierwsze krzywej i punktu końcowego i punkty kontrolny krzywej drugiego.  
  
-   Rysuje kolejnych krzywych Beziera na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#15)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#15)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawClosedCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje zamkniętego kardynalnej krzywej składanej zdefiniowane przez tablicę <see cref="T:System.Drawing.Point" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i wysokość krzywej.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.Point" /> struktur, które definiują krzywej składanej.</param>
        <summary>Rysuje zamkniętego kardynalnej krzywej składanej zdefiniowane przez tablicę <see cref="T:System.Drawing.Point" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje zamkniętego kardynalnej krzywej składanej, który przechodzi przez każdego punktu w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszego punktu, dodatkowe segmentu jest dodawana z ostatniego punktu do pierwszego punktu, aby zamknąć na rysunku.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.Point> struktury.  
  
 Ta metoda używa domyślnej napięcie 0,5.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwony i zielony pióra.  
  
-   Tworzy siedem punktów do definiowania krzywą.  
  
-   Rysuje siedmiu czerwoną linie proste między siedem punktów do zamkniętej wielokąta.  
  
-   Rysuje zielony zamkniętej krzywej przez siedem punkty.  
  
 Metoda korzysta z domyślnego napięcie 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#16)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#16)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i wysokość krzywej.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które definiują krzywej składanej.</param>
        <summary>Rysuje zamkniętego kardynalnej krzywej składanej zdefiniowane przez tablicę <see cref="T:System.Drawing.PointF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje zamkniętego kardynalnej krzywej składanej, który przechodzi przez każdego punktu w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszego punktu, dodatkowe segmentu jest dodawana z ostatniego punktu do pierwszego punktu, aby je zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.PointF> struktury.  
  
 Ta metoda używa domyślnej napięcie 0,5.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwony i zielony pióra.  
  
-   Tworzy siedem punktów do definiowania krzywą.  
  
-   Rysuje siedmiu czerwoną linie proste między siedem punktów do zamkniętej wielokąta.  
  
-   Rysuje zielony zamkniętej krzywej przez siedem punkty.  
  
 Metoda korzysta z domyślnego napięcie 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#18)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#18)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, float32 tension, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single,System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, float tension, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="tension" Type="System.Single" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i wysokość krzywej.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.Point" /> struktur, które definiują krzywej składanej.</param>
        <param name="tension">Wartość większą lub równą 0.0f, który określa naprężenia krzywej.</param>
        <param name="fillmode">Element członkowski <see cref="T:System.Drawing.Drawing2D.FillMode" /> wyliczenie określające, jak krzywej jest wypełnione. Ten parametr jest wymagany, lecz ignorowane.</param>
        <summary>Rysuje zamkniętego kardynalnej krzywej składanej zdefiniowane przez tablicę <see cref="T:System.Drawing.Point" /> struktury przy użyciu określonego naprężenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje zamkniętego kardynalnej krzywej składanej, który przechodzi przez każdego punktu w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszego punktu, dodatkowe segmentu jest dodawana z ostatniego punktu do pierwszego punktu, aby je zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.Point> struktury.  
  
 `tension` Parametr określa kształt krzywej składanej. Jeśli wartość `tension` parametru jest 0.0f, ta metoda pobiera segmenty linii prostej nawiązać punkty. Zazwyczaj `tension` parametr jest mniejsza niż 1,0 f. Wartości na 1,0 f generować nieoczekiwane rezultaty.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwony i zielony pióra.  
  
-   Tworzy siedem punktów do definiowania krzywej.  
  
-   Rysuje siedmiu czerwoną linie proste między punktami siedmiu do utworzenia wielokąta.  
  
-   Tworzy ustawienia trybu naprężenia i wypełnienia.  
  
-   Rysuje zielony zamkniętej krzywej przez siedem punkty.  
  
 Metoda używa naprężenia 1.0 i ustawia tryb wypełniania `FillMode.Alternate`.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#17)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#17)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, float32 tension, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single,System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, float tension, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="tension" Type="System.Single" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i wysokość krzywej.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które definiują krzywej składanej.</param>
        <param name="tension">Wartość większą lub równą 0.0f, który określa naprężenia krzywej.</param>
        <param name="fillmode">Element członkowski <see cref="T:System.Drawing.Drawing2D.FillMode" /> wyliczenie określające, jak krzywej jest wypełnione. Ten parametr jest wymagany, ale został zignorowany.</param>
        <summary>Rysuje zamkniętego kardynalnej krzywej składanej zdefiniowane przez tablicę <see cref="T:System.Drawing.PointF" /> struktury przy użyciu określonego naprężenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje zamkniętego kardynalnej krzywej składanej, który przechodzi przez każdego punktu w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszego punktu, dodatkowe segmentu jest dodawana z ostatniego punktu do pierwszego punktu, aby je zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.PointF> struktury.  
  
 `tension` Parametr określa kształt krzywej składanej. Jeśli wartość `tension` parametru jest 0.0f, ta metoda pobiera segmenty linii prostej nawiązać punkty. Zazwyczaj `tension` parametr jest mniejsza niż 1,0 f. Wartości na 1,0 f generować nieoczekiwane rezultaty.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwony i zielony pióra.  
  
-   Tworzy siedem punktów do definiowania krzywej.  
  
-   Rysuje siedmiu czerwoną linie proste między punktami siedmiu do utworzenia wielokąta.  
  
-   Tworzy ustawienia trybu naprężenia i wypełnienia.  
  
-   Rysuje zielony zamkniętej krzywej przez siedem punkty.  
  
 Metoda używa naprężenia 1.0 i ustawia tryb wypełniania `FillMode.Alternate`.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#19)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#19)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje kardynalnej krzywej składanej za pośrednictwem określona tablica elementów <see cref="T:System.Drawing.Point" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i wysokość krzywej.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.Point" /> struktur, które definiują krzywej składanej.</param>
        <summary>Rysuje kardynalnej krzywej składanej za pośrednictwem określona tablica elementów <see cref="T:System.Drawing.Point" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje kardynalnej krzywej składanej, który przechodzi przez każdego punktu w tablicy.  
  
 Tablica punktów musi zawierać co najmniej trzy <xref:System.Drawing.Point> struktur krzywej do narysowania.  
  
 Ta metoda używa domyślnej napięcie 0,5.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwony i zielony pióra.  
  
-   Tworzy siedem punktów do definiowania krzywą.  
  
-   Rysuje sześciu czerwoną linie proste między punktami siedmiu do utworzenia niekompletne wielokąta.  
  
-   Rysuje krzywą zielony Otwórz za pomocą siedmiu punktów.  
  
 Metoda korzysta z domyślnego napięcie 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#20)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#20)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl krzywej.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które definiują krzywej składanej.</param>
        <summary>Rysuje kardynalnej krzywej składanej za pośrednictwem określona tablica elementów <see cref="T:System.Drawing.PointF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje kardynalnej krzywej składanej, który przechodzi przez każdego punktu w tablicy.  
  
 Tablica punktów musi zawierać co najmniej trzy <xref:System.Drawing.PointF> struktur krzywej do narysowania.  
  
 Ta metoda używa domyślnej napięcie 0,5.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwony i zielony pióra.  
  
-   Tworzy siedem punktów do definiowania krzywą.  
  
-   Rysuje sześciu czerwoną linie proste między punktami siedmiu do utworzenia niekompletne wielokąta.  
  
-   Rysuje krzywą zielony Otwórz za pomocą siedmiu punktów.  
  
 Metoda korzysta z domyślnego napięcie 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#23)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#23)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, float tension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl krzywej.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.Point" /> struktur, które definiują krzywej składanej.</param>
        <param name="tension">Wartość większą lub równą 0.0f, który określa naprężenia krzywej.</param>
        <summary>Rysuje kardynalnej krzywej składanej za pośrednictwem określona tablica elementów <see cref="T:System.Drawing.Point" /> struktury przy użyciu określonego naprężenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje kardynalnej krzywej składanej, który przechodzi przez każdego punktu w tablicy.  
  
 Tablica punktów musi zawierać co najmniej trzy <xref:System.Drawing.Point> struktur krzywej do narysowania.  
  
 `tension` Parametr określa kształt krzywej składanej. Jeśli wartość `tension` parametru jest 0.0f, ta metoda pobiera segmenty linii prostej nawiązać punkty. Zazwyczaj `tension` parametr jest mniejsza niż 1,0 f. Wartości na 1,0 f generować nieoczekiwane rezultaty.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwony i zielony pióra.  
  
-   Tworzy siedem punktów do definiowania krzywej.  
  
-   Rysuje sześciu czerwoną linie proste między punktami siedmiu do utworzenia niekompletne wielokąta.  
  
-   Tworzy ustawienie naprężenia.  
  
-   Rysuje Otwórz zielony zamkniętej krzywej przez siedem punkty.  
  
 Metoda używa naprężenia 1.0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#22)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#22)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, float tension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl krzywej.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które reprezentują punkty, które definiują krzywej.</param>
        <param name="tension">Wartość większą lub równą 0.0f, który określa naprężenia krzywej.</param>
        <summary>Rysuje kardynalnej krzywej składanej za pośrednictwem określona tablica elementów <see cref="T:System.Drawing.PointF" /> struktury przy użyciu określonego naprężenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje kardynalnej krzywej składanej, który przechodzi przez każdego punktu w tablicy.  
  
 Tablica punktów musi zawierać co najmniej trzy <xref:System.Drawing.PointF> struktur krzywej do narysowania.  
  
 `tension` Parametr określa kształt krzywej składanej. Jeśli wartość `tension` parametru jest 0.0f, ta metoda pobiera segmenty linii prostej nawiązać punkty. Zazwyczaj `tension` parametr jest mniejsza niż 1,0 f. Wartości na 1,0 f generować nieoczekiwane rezultaty.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwony i zielony pióra.  
  
-   Tworzy siedem punktów do definiowania krzywej.  
  
-   Rysuje sześciu czerwoną linie proste między punktami siedmiu do utworzenia niekompletne wielokąta.  
  
-   Tworzy ustawienie naprężenia.  
  
-   Rysuje Otwórz zielony zamkniętej krzywej przez siedem punkty.  
  
 Metoda używa naprężenia 1.0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#26)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#26)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, int32 offset, int32 numberOfSegments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, int offset, int numberOfSegments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl krzywej.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które definiują krzywej składanej.</param>
        <param name="offset">Przesunięcie od pierwszego elementu w tablicy <c>punktów</c> parametr punkt początkowy krzywej.</param>
        <param name="numberOfSegments">Liczba segmentów po punkt początkowy do uwzględnienia w krzywej.</param>
        <summary>Rysuje kardynalnej krzywej składanej za pośrednictwem określona tablica elementów <see cref="T:System.Drawing.PointF" /> struktury. Rysowanie rozpoczyna przesunięcie od początku tablicy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje kardynalnej krzywej składanej, który przechodzi przez każdego punktu w tablicy.  
  
 Tablica punktów musi zawierać co najmniej trzy <xref:System.Drawing.PointF> struktur krzywej do narysowania.  
  
 Wartość `offset` parametr określa liczbę elementów do pominięcia w tablicy. Pierwszym elementem po pominięto elementy reprezentuje punkt początkowy krzywej.  
  
 Wartość `numberOfSegments` parametr określa liczbę segmentów, po punkt początkowy, aby narysować krzywej. Wartość `numberOfSegments` parametr musi być co najmniej 1. Wartość `offset` parametr oraz wartość `numberOfSegments` parametru musi być mniejsza niż liczba elementów w tablicy `points` parametru.  
  
 Ta metoda używa domyślnej napięcie 0,5.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwony i zielony pióra.  
  
-   Tworzy siedem punktów do definiowania krzywą.  
  
-   Rysuje sześciu czerwoną linie proste między punktami siedmiu do utworzenia niekompletne wielokąta.  
  
-   Określa przesunięcie początkowe punktu i liczbę segmentów.  
  
-   Rysuje Otwórz zielony krzywą (rozpoczyna się od trzeciego punktu) przez pięć ostatnich punkty.  
  
 Metoda korzysta z domyślnego napięcie 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#24)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#24)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, int32 offset, int32 numberOfSegments, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Int32,System.Int32,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, int offset, int numberOfSegments, float tension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl krzywej.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.Point" /> struktur, które definiują krzywej składanej.</param>
        <param name="offset">Przesunięcie od pierwszego elementu w tablicy <c>punktów</c> parametr punkt początkowy krzywej.</param>
        <param name="numberOfSegments">Liczba segmentów po punkt początkowy do uwzględnienia w krzywej.</param>
        <param name="tension">Wartość większą lub równą 0.0f, który określa naprężenia krzywej.</param>
        <summary>Rysuje kardynalnej krzywej składanej za pośrednictwem określona tablica elementów <see cref="T:System.Drawing.Point" /> struktury przy użyciu określonego naprężenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje kardynalnej krzywej składanej, który przechodzi przez każdego punktu w tablicy.  
  
 Tablica punktów musi zawierać co najmniej trzy <xref:System.Drawing.Point> struktur krzywej do narysowania.  
  
 Wartość `offset` parametr określa liczbę elementów do pominięcia w tablicy. Pierwszym elementem po pominięto elementy reprezentuje punkt początkowy krzywej.  
  
 Wartość `numberOfSegments` parametr określa liczbę segmentów, po punkt początkowy, aby narysować krzywej. Wartość `numberOfSegments` parametr musi być co najmniej 1. Wartość `offset` parametr oraz wartość `numberOfSegments` parametru musi być mniejsza niż liczba elementów w tablicy `points` parametru.  
  
 `tension` Parametr określa kształt krzywej składanej. Jeśli wartość `tension` parametru jest 0.0f, ta metoda pobiera segmenty linii prostej nawiązać punkty. Zazwyczaj `tension` parametr jest mniejsza niż 1,0 f. Wartości na 1,0 f generować nieoczekiwane rezultaty.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwony i zielony pióra.  
  
-   Tworzy siedem punktów do definiowania krzywą.  
  
-   Rysuje sześciu czerwoną linie proste między punktami siedmiu do utworzenia niekompletne wielokąta.  
  
-   Określa przesunięcie początkowe punktu i liczbę segmentów.  
  
-   Definiuje naciągnięcie.  
  
-   Rysuje Otwórz zielony krzywą (rozpoczyna się od trzeciego punktu) przez pięć ostatnich punkty.  
  
 Metoda ustawia naciągnięcie 1.0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#21)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#21)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, int32 offset, int32 numberOfSegments, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, int offset, int numberOfSegments, float tension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl krzywej.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które definiują krzywej składanej.</param>
        <param name="offset">Przesunięcie od pierwszego elementu w tablicy <c>punktów</c> parametr punkt początkowy krzywej.</param>
        <param name="numberOfSegments">Liczba segmentów po punkt początkowy do uwzględnienia w krzywej.</param>
        <param name="tension">Wartość większą lub równą 0.0f, który określa naprężenia krzywej.</param>
        <summary>Rysuje kardynalnej krzywej składanej za pośrednictwem określona tablica elementów <see cref="T:System.Drawing.PointF" /> struktury przy użyciu określonego naprężenia. Rysowanie rozpoczyna przesunięcie od początku tablicy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje kardynalnej krzywej składanej, który przechodzi przez każdego punktu w tablicy.  
  
 Tablica punktów musi zawierać co najmniej trzy <xref:System.Drawing.PointF> struktur krzywej do narysowania.  
  
 Wartość `offset` parametr określa liczbę elementów do pominięcia w tablicy. Pierwszym elementem po pominięto elementy reprezentuje punkt początkowy krzywej.  
  
 Wartość `numberOfSegments` parametr określa liczbę segmentów, po punkt początkowy, aby narysować krzywej. Wartość `numberOfSegments` parametr musi być co najmniej 1. Wartość `offset` parametr oraz wartość `numberOfSegments` parametru musi być mniejsza niż liczba elementów w tablicy `points` parametru.  
  
 `tension` Parametr określa kształt krzywej składanej. Jeśli wartość `tension` parametru jest 0.0f, ta metoda pobiera segmenty linii prostej nawiązać punkty. Zazwyczaj `tension` parametr jest mniejsza niż 1,0 f. Wartości na 1,0 f generować nieoczekiwane rezultaty.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwony i zielony pióra.  
  
-   Tworzy siedem punktów do definiowania krzywą.  
  
-   Rysuje sześciu czerwoną linie proste między punktami siedmiu do utworzenia niekompletne wielokąta.  
  
-   Określa przesunięcie początkowe punktu i liczbę segmentów.  
  
-   Definiuje naciągnięcie.  
  
-   Rysuje Otwórz zielony krzywą (rozpoczyna się od trzeciego punktu) przez pięć ostatnich punkty.  
  
 Metoda ustawia naciągnięcie 1.0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#25)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#25)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawEllipse">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje elipsę zdefiniowane przez prostokąt ograniczający określony przez parę współrzędnych, wysokości i szerokości.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl elipsy.</param>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która definiuje granice elipsy.</param>
        <summary>Rysuje elipsę określony przez ograniczenia <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda Rysuje elipsę, zdefiniowanego przez prostokątem określony przez `rect` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy prostokąt powiązane elipsy.  
  
-   Rysuje elipsę z ekranem.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#27)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#27)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl elipsy.</param>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która definiuje granice elipsy.</param>
        <summary>Rysuje elipsę wynika z ograniczenia <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda Rysuje elipsę, zdefiniowanego przez prostokątem określony przez `rect` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy prostokąt powiązane elipsy.  
  
-   Rysuje elipsę z ekranem.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#28)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#28)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, int x, int y, int width, int height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl elipsy.</param>
        <param name="x">Współrzędna x górnego lewego rogu prostokątem, który definiuje wielokropka.</param>
        <param name="y">Współrzędna y górnego lewego rogu prostokątem, który definiuje wielokropka.</param>
        <param name="width">Szerokość prostokątem, który definiuje wielokropka.</param>
        <param name="height">Wysokość prostokątem, który definiuje wielokropka.</param>
        <summary>Rysuje elipsę zdefiniowane przez prostokąt ograniczający określony przez współrzędne górnego lewego rogu prostokąta, wysokości i szerokości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda Rysuje elipsę jest definiowana za pomocą prostokątem opisanego przez `x`, `y`, `width`, i `height` parametrów.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy położenie i rozmiar prostokąta powiązane elipsy.  
  
-   Rysuje elipsę z ekranem.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#29)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#29)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, float x, float y, float width, float height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl elipsy.</param>
        <param name="x">Współrzędna x górnego lewego rogu prostokątem, który definiuje wielokropka.</param>
        <param name="y">Współrzędna y górnego lewego rogu prostokątem, który definiuje wielokropka.</param>
        <param name="width">Szerokość prostokątem, który definiuje wielokropka.</param>
        <param name="height">Wysokość prostokątem, który definiuje wielokropka.</param>
        <summary>Rysuje elipsę zdefiniowane przez prostokąt ograniczający określony przez parę współrzędnych, wysokości i szerokości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda Rysuje elipsę jest definiowana za pomocą prostokątem opisanego przez `x`, `y`, `width`, i `height` parametrów.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy położenie i rozmiar prostokąta powiązane elipsy.  
  
-   Rysuje elipsę z ekranem.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#30)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#30)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawIcon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje obraz reprezentowany przez określony <see cref="T:System.Drawing.Icon" /> w określonych współrzędnych.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawIcon">
      <MemberSignature Language="C#" Value="public void DrawIcon (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIcon(class System.Drawing.Icon icon, valuetype System.Drawing.Rectangle targetRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIcon(System::Drawing::Icon ^ icon, System::Drawing::Rectangle targetRect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="icon">
          <see cref="T:System.Drawing.Icon" /> Rysowanie.</param>
        <param name="targetRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar Wynikowy obraz na powierzchni ekranu. Obraz zawarte w <c>ikona</c> skalowania parametr wymiary to prostokątny obszar.</param>
        <summary>Rysuje obraz reprezentowany przez określony <see cref="T:System.Drawing.Icon" /> z zakresu określonego przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ikony na podstawie standardowego pliku ikony Windows SampIcon.ico w folderze przykład.  
  
-   Tworzy prostokąt do rysowania ikony.  
  
-   Pobiera ikonę do ekranu.  
  
 Pozycja prostokąta lokalizuje ikony na ekranie i rozmiar prostokąta Określa skalowanie narysowanego ikony.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#31)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#31)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="icon" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawIcon">
      <MemberSignature Language="C#" Value="public void DrawIcon (System.Drawing.Icon icon, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIcon(class System.Drawing.Icon icon, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIcon(System::Drawing::Icon ^ icon, int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="icon">
          <see cref="T:System.Drawing.Icon" /> Rysowanie.</param>
        <param name="x">Współrzędna x górnego lewego rogu narysowanego obrazu.</param>
        <param name="y">Współrzędna y górnego lewego rogu narysowanego obrazu.</param>
        <summary>Rysuje obraz reprezentowany przez określony <see cref="T:System.Drawing.Icon" /> w określonych współrzędnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ikony na podstawie standardowego pliku ikony Windows SampIcon.ico w folderze przykład.  
  
-   Tworzy współrzędne lewego górnego rogu, w którym ma zostać narysowany ikony.  
  
-   Pobiera ikonę do ekranu.  
  
 Ikona narysowanego jest nieskalowanego.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#32)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#32)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="icon" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawIconUnstretched">
      <MemberSignature Language="C#" Value="public void DrawIconUnstretched (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIconUnstretched(class System.Drawing.Icon icon, valuetype System.Drawing.Rectangle targetRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIconUnstretched(System.Drawing.Icon,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIconUnstretched(System::Drawing::Icon ^ icon, System::Drawing::Rectangle targetRect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="icon">
          <see cref="T:System.Drawing.Icon" /> Rysowanie.</param>
        <param name="targetRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar obraz wynikowy. Obraz nie jest skalowane w celu dopasowania prostokąta, ale zachowa jego oryginalny rozmiar. Jeśli obraz jest większy niż prostokąt, zostanie obcięta mieści się w nim.</param>
        <summary>Rysuje obraz reprezentowany przez określony <see cref="T:System.Drawing.Icon" /> bez skalowania obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ikony na podstawie standardowego pliku ikony Windows SampIcon.ico w folderze przykład.  
  
-   Tworzy prostokąt do rysowania ikony.  
  
-   Pobiera ikonę do ekranu.  
  
 Pozycja prostokąta lokalizuje ikony na ekranie, a ikona narysowanego jest nieskalowane i nieobcinane.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#33)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#33)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="icon" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawImage">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji oraz z oryginalnego rozmiaru.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="point">
          <see cref="T:System.Drawing.Point" /> Struktura, która reprezentuje lokalizację w lewym górnym rogu narysowanego obrazu.</param>
        <summary>Rysuje określonego <see cref="T:System.Drawing.Image" />, przy użyciu oryginalnego rozmiaru fizycznej, w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość dla szerokości i wartość rozdzielczość pozioma (punkty na cal). Szerokość fizycznych, mierzony w milimetrach obrazu jest szerokość piksela rozdzielonych rozdzielczość pozioma. Na przykład obraz o szerokości pikseli 216 i rozdzielczość pozioma 72 dpi ma fizycznego szerokość 3 cala. Podobne uwagi dotyczą wysokość pikseli i wysokość fizycznych.  
  
 Ta metoda Rysuje obraz przy użyciu rozmiaru fizycznych, tak aby było jego poprawny rozmiar obrazu w calach niezależnie od rozdzielczości (punkty na cal) urządzenia. Na przykład załóżmy, że obraz ma pikseli szerokości 216 i rozdzielczość pozioma 72 dpi. Wywołanie tej metody do rysowania obrazu na urządzeniu rozdzielczości 96 dpi szerokość piksela renderowanym obrazie będzie (216/72) * 96 = 288.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkt, w którym ma zostać narysowany lewego górnego rogu obrazu.  
  
-   Rysuje obraz nieskalowanego do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#34)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#34)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok.</param>
        <summary>Rysuje określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji oraz określony kształt i rozmiar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.Point> lewym górnym, prawym górnym i lewym dolnym rogu równoległobok reprezentują struktury. Punkt czwarty ekstrapolacji jest pierwsze trzy do utworzenia równoległobok.  
  
 Obraz reprezentowany przez `image` parametr jest skalowana i pochylono do rozmiaru kształtu równoległobok określony przez `destPoints` parametrów.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok do rysowania obrazu.  
  
-   Rysuje obraz ekranu.  
  
 Pozycja równoległobok lokalizuje obrazu na ekranie, a rozmiar oryginalnego obrazu oraz wielkość i kształt równoległobok Określa skalowanie i pochylanie narysowanego obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#35)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#35)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::PointF point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="point">
          <see cref="T:System.Drawing.PointF" /> Struktura, która reprezentuje lewego górnego rogu narysowanego obrazu.</param>
        <summary>Rysuje określonego <see cref="T:System.Drawing.Image" />, przy użyciu oryginalnego rozmiaru fizycznej, w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość dla szerokości i wartość rozdzielczość pozioma (punkty na cal). Szerokość fizycznych, mierzony w milimetrach obrazu jest szerokość piksela rozdzielonych rozdzielczość pozioma. Na przykład obraz o szerokości pikseli 216 i rozdzielczość pozioma 72 dpi ma fizycznego szerokość 3 cala. Podobne uwagi dotyczą wysokość pikseli i wysokość fizycznych.  
  
 Ta metoda Rysuje obraz przy użyciu rozmiaru fizycznych, tak aby było jego poprawny rozmiar obrazu w calach niezależnie od rozdzielczości (punkty na cal) urządzenia. Na przykład załóżmy, że obraz ma pikseli szerokości 216 i rozdzielczość pozioma 72 dpi. Wywołanie tej metody do rysowania obrazu na urządzeniu rozdzielczości 96 dpi szerokość piksela renderowanym obrazie będzie (216/72) * 96 = 288.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkt, w którym ma zostać narysowany lewego górnego rogu obrazu.  
  
-   Rysuje obraz nieskalowanego do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#40)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#40)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok.</param>
        <summary>Rysuje określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji oraz określony kształt i rozmiar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.PointF> lewym górnym, prawym górnym i lewym dolnym rogu równoległobok reprezentują struktury. Punkt czwarty ekstrapolacji jest pierwsze trzy do utworzenia równoległobok.  
  
 Obraz reprezentowany przez `image` obiekt jest skalowana i pochylono do rozmiaru kształtu równoległobok określony przez `destPoints` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok do rysowania obrazu.  
  
-   Rysuje obraz ekranu.  
  
 Pozycja równoległobok lokalizuje obrazu na ekranie, a rozmiar oryginalnego obrazu oraz wielkość i kształt równoległobok Określa skalowanie i pochylanie narysowanego obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#41)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#41)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar narysowanego obrazu.</param>
        <summary>Rysuje określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obraz reprezentowany przez `image` skalowania obiektu wymiary `rect` prostokąta.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy prostokąt do rysowania obrazu.  
  
-   Rysuje obraz ekranu.  
  
 Pozycja prostokąta lokalizuje obrazu na ekranie i rozmiar oryginalnego obrazu i rozmiar prostokąta Określa skalowanie narysowanego obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#46)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#46)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#46)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::RectangleF rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa lokalizację i rozmiar narysowanego obrazu.</param>
        <summary>Rysuje określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obraz reprezentowany przez `image` skalowania obiektu wymiary `rect` prostokąta.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy prostokąt do rysowania obrazu.  
  
-   Rysuje obraz ekranu.  
  
 Pozycja prostokąta lokalizuje obrazu na ekranie i oryginalny rozmiar obrazu i rozmiar prostokąta Określa skalowanie narysowanego obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#56)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#56)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#56)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="x">Współrzędna x górnego lewego rogu narysowanego obrazu.</param>
        <param name="y">Współrzędna y górnego lewego rogu narysowanego obrazu.</param>
        <summary>Rysuje określonego obrazu przy użyciu oryginalnego rozmiaru fizycznej, w lokalizacji określonej przez parę współrzędnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość dla szerokości i wartość rozdzielczość pozioma (punkty na cal). Szerokość fizycznych, mierzony w milimetrach obrazu jest szerokość piksela rozdzielonych rozdzielczość pozioma. Na przykład obraz o szerokości pikseli 216 i rozdzielczość pozioma 72 dpi ma fizycznego szerokość 3 cala. Podobne uwagi dotyczą wysokość pikseli i wysokość fizycznych.  
  
 <xref:System.Drawing.Graphics.DrawImage%2A> Metody Rysuje obraz przy użyciu rozmiaru fizycznych, tak aby było jego poprawny rozmiar obrazu w calach niezależnie od rozdzielczości (punkty na cal) urządzenia. Na przykład załóżmy, że obraz ma pikseli szerokości 216 i rozdzielczość pozioma 72 dpi. Jeśli należy wywołać <xref:System.Drawing.Graphics.DrawImage%2A> do rysowania obrazu na urządzeniu rozdzielczości 96 dpi, szerokość piksela renderowanym obrazie będzie (216/72) * 96 = 288.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykład SampImag.jpg w folderze przykładu.  
  
-   Tworzy współrzędne punktu, w którym ma zostać narysowany lewego górnego rogu obrazu.  
  
-   Rysuje obraz nieskalowanego.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#58)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#58)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="x">Współrzędna x górnego lewego rogu narysowanego obrazu.</param>
        <param name="y">Współrzędna y górnego lewego rogu narysowanego obrazu.</param>
        <summary>Rysuje określonego <see cref="T:System.Drawing.Image" />, przy użyciu oryginalnego rozmiaru fizycznej, w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość dla szerokości i wartość rozdzielczość pozioma (punkty na cal). Szerokość fizycznych, mierzony w milimetrach obrazu jest szerokość piksela rozdzielonych rozdzielczość pozioma. Na przykład obraz o szerokości pikseli 216 i rozdzielczość pozioma 72 dpi ma fizycznego szerokość 3 cala. Podobne uwagi dotyczą wysokość pikseli i wysokość fizycznych.  
  
 Ta metoda Rysuje obraz przy użyciu rozmiaru fizycznych, tak aby było jego poprawny rozmiar obrazu w calach niezależnie od rozdzielczości (punkty na cal) urządzenia. Na przykład załóżmy, że obraz ma pikseli szerokości 216 i rozdzielczość pozioma 72 dpi. Wywołanie tej metody do rysowania obrazu na urządzeniu rozdzielczości 96 dpi szerokość piksela renderowanym obrazie będzie (216/72) * 96 = 288.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy współrzędne punktu, w którym ma zostać narysowany lewego górnego rogu obrazu.  
  
-   Rysuje obraz nieskalowanego do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#61)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#61)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#61)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część <c>obrazu</c> obiektu do rysowania.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenia, który określa jednostki miary używane przez <c>srcRect</c> parametru.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.Point> lewym górnym, prawym górnym i lewym dolnym rogu równoległobok reprezentują struktury. Punkt czwarty ekstrapolacji jest pierwsze trzy do utworzenia równoległobok.  
  
 `srcRect` Parametr określa prostokątne część `image` obiektu do rysowania. Ta część jest skalowana i ścięty aby zmieścił się wewnątrz równoległobok określony przez `destPoints` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok do rysowania obrazu.  
  
-   Tworzy trzeba zaznaczyć część obrazu do rysowania.  
  
-   Ustawia rysowania jednostki do pikseli grafiki.  
  
-   Rysuje obraz ekranu.  
  
 Pozycja równoległobok lokalizuje obrazu na ekranie, a rozmiar prostokąta oraz wielkość i kształt równoległobok Określa skalowanie i pochylanie narysowanego obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#36)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#36)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#36)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część <c>obrazu</c> obiektu do rysowania.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenia, który określa jednostki miary używane przez <c>srcRect</c> parametru.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.PointF> lewym górnym, prawym górnym i lewym dolnym rogu równoległobok reprezentują struktury. Punkt czwarty ekstrapolacji jest pierwsze trzy do utworzenia równoległobok.  
  
 `srcRect` Parametr określa prostokątne część `image` obiektu do rysowania. Ta część jest skalowana i ścięty aby zmieścił się wewnątrz równoległobok określony przez `destPoints` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok docelowego do rysowania obrazu.  
  
-   Tworzy prostokąt źródło, z którego mają zostać wyodrębnione część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego pikseli.  
  
-   Rysuje obraz ekranu.  
  
 Pozycja równoległobok docelowego lokalizuje obrazu na ekranie, rozmiar prostokąta źródłowego i rozmiaru i kształtu równoległobok docelowego Określa skalowanie i pochylanie narysowanego obrazu i określa rozmiar prostokąta jaka część oryginalnego obrazu jest rysowana na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#42)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#42)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar narysowanego obrazu. Obraz jest skalowane w celu dopasowania prostokąta.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część <c>obrazu</c> obiektu do rysowania.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenia, który określa jednostki miary używane przez <c>srcRect</c> parametru.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcRect` Parametr określa prostokątne część `image` obiektu do rysowania. Ta część jest skalowana, aby zmieścił się wewnątrz prostokąt określony przez `destRect` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy prostokąt docelowego do rysowania obrazu.  
  
-   Tworzy prostokąt źródło, z którego mają zostać wyodrębnione część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego pikseli.  
  
-   Rysuje obraz ekranu.  
  
 Pozycja prostokąta docelowego lokalizuje obrazu na ekranie, rozmiary prostokąty źródłowego i docelowego ustalić skalowanie narysowanego obrazu i rozmiar prostokąta źródłowego Określa, jaka część oryginalnego obrazu jest rysowane ekran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#47)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#47)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#47)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa lokalizację i rozmiar narysowanego obrazu. Obraz jest skalowane w celu dopasowania prostokąta.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część <c>obrazu</c> obiektu do rysowania.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenia, który określa jednostki miary używane przez <c>srcRect</c> parametru.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcRect` Parametr określa prostokątne część `image` obiektu do rysowania. Ta część jest skalowana, aby zmieścił się wewnątrz prostokąt określony przez `destRect` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy prostokąt docelowego do rysowania obrazu.  
  
-   Tworzy prostokąt źródło, z którego mają zostać wyodrębnione część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego pikseli.  
  
-   Rysuje obraz ekranu.  
  
 Pozycja prostokąta docelowego lokalizuje obrazu na ekranie, rozmiary prostokąty źródłowego i docelowego ustalić skalowanie narysowanego obrazu i rozmiar prostokąta źródłowego Określa, jaka część oryginalnego obrazu jest rysowane ekran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#57)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#57)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część <c>obrazu</c> obiektu do rysowania.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenia, który określa jednostki miary używane przez <c>srcRect</c> parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> Określa informacje o ponowne kolorowanie i gamma <c>obrazu</c> obiektu.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.Point> lewym górnym, prawym górnym i lewym dolnym rogu równoległobok reprezentują struktury. Punkt czwarty ekstrapolacji jest pierwsze trzy do utworzenia równoległobok.  
  
 `srcRect` Parametr określa prostokątne część`image` obiektu do rysowania. Ta część jest skalowana i ścięty aby zmieścił się wewnątrz równoległobok określony przez `destPoints` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok do rysowania obrazu.  
  
-   Tworzy trzeba zaznaczyć część obrazu do rysowania.  
  
-   Ustawia rysowania jednostki do pikseli grafiki.  
  
-   Rysuje oryginalnego obrazu ekranu.  
  
-   Tworzy dodatkowe Równoległobok do rysowania skorygowaną obrazu.  
  
-   Tworzy i ustawia atrybuty skorygowaną obrazu będzie mieć wartość większą niż zwykle gamma.  
  
-   Rysuje obraz dostosowane do ekranu.  
  
 Dla oryginalnego, nieskorygowane równoległobok pozycja lokalizuje obrazu na ekranie, a rozmiar prostokąta oraz wielkość i kształt równoległobok Określa skalowanie i pochylanie narysowanego obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#37)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#37)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#37)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część <c>obrazu</c> obiektu do rysowania.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenia, który określa jednostki miary używane przez <c>srcRect</c> parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> Określa informacje o ponowne kolorowanie i gamma <c>obrazu</c> obiektu.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.PointF> lewym górnym, prawym górnym i lewym dolnym rogu równoległobok reprezentują struktury. Punkt czwarty ekstrapolacji jest pierwsze trzy do utworzenia równoległobok.  
  
 `srcRect` Parametr określa prostokątne część `image` obiektu do rysowania. Ta część jest skalowana i ścięty aby zmieścił się wewnątrz równoległobok określony przez `destPoints` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok docelowego do rysowania obrazu.  
  
-   Tworzy prostokąt źródło, z którego mają zostać wyodrębnione część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego pikseli.  
  
-   Rysuje oryginalnego obrazu ekranu.  
  
-   Tworzy dodatkowe Równoległobok do rysowania skorygowaną obrazu.  
  
-   Tworzy i ustawia atrybuty skorygowaną obrazu będzie mieć wartość większą niż zwykle gamma.  
  
-   Rysuje obraz dostosowane do ekranu.  
  
 Dla równoległobok oryginalnej, nieskorygowane docelowym pozycja lokalizuje obrazu ekranu, rozmiar prostokąta źródłowego i wielkości i określa kształt równoległobok docelowego skalowanie i pochylanie narysowanego obrazu i rozmiar Prostokąt Określa, jaka część oryginalnego obrazu jest rysowane na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#43)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#43)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#43)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="x">Współrzędna x górnego lewego rogu narysowanego obrazu.</param>
        <param name="y">Współrzędna y górnego lewego rogu narysowanego obrazu.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część <c>obrazu</c> obiektu do rysowania.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenia, który określa jednostki miary używane przez <c>srcRect</c> parametru.</param>
        <summary>Rysuje część obrazu w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość dla szerokości i wartość rozdzielczość pozioma (punkty na cal). Szerokość fizycznych, mierzony w milimetrach obrazu jest szerokość piksela rozdzielonych rozdzielczość pozioma. Na przykład obraz o szerokości pikseli 360 i rozdzielczość pozioma 72 dpi ma fizycznego szerokość 5 cala. Podobne uwagi dotyczą wysokość pikseli i wysokość fizycznych.  
  
 Ta metoda pobiera część obrazu przy użyciu rozmiaru fizycznych, tak aby było jego poprawny rozmiar części obrazu w calach niezależnie od rozdzielczości (punkty na cal) urządzenia. Na przykład załóżmy, że część obrazu jest pikseli szerokości 216 i rozdzielczość pozioma 72 dpi. Wywołanie tej metody do rysowania część obrazu na urządzeniu rozdzielczości 96 dpi szerokość piksela części renderowanym obrazie będzie (216/72) * 96 = 288.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy współrzędne, w którym ma zostać narysowany lewego górnego rogu obrazu.  
  
-   Tworzy prostokąt źródło, z którego mają zostać wyodrębnione część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego pikseli.  
  
-   Rysuje obraz ekranu.  
  
 Rozmiar prostokąta źródłowego Określa, jaka część nieskalowanego oryginalnego obrazu jest rysowane na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#59)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#59)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y, int width, int height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="x">Współrzędna x górnego lewego rogu narysowanego obrazu.</param>
        <param name="y">Współrzędna y górnego lewego rogu narysowanego obrazu.</param>
        <param name="width">Szerokość narysowanego obrazu.</param>
        <param name="height">Wysokość obrazu narysowanego.</param>
        <summary>Rysuje określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prostokąt zdefiniowane przez `x`, `y`, `width`, i `height` parametry Określa położenie i rozmiar narysowanego obrazu.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy położenie i rozmiar prostokąta do rysowania obrazu.  
  
-   Rysuje obraz ekranu.  
  
 Pozycja prostokąta lokalizuje obrazu na ekranie i rozmiar oryginalnego obrazu i rozmiar prostokąta Określa skalowanie narysowanego obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#60)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#60)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="x">Współrzędna x górnego lewego rogu narysowanego obrazu.</param>
        <param name="y">Współrzędna y górnego lewego rogu narysowanego obrazu.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część <see cref="T:System.Drawing.Image" /> do rysowania.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenia, który określa jednostki miary używane przez <c>srcRect</c> parametru.</param>
        <summary>Rysuje część obrazu w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość dla szerokości i wartość rozdzielczość pozioma (punkty na cal). Szerokość fizycznych, mierzony w milimetrach obrazu jest szerokość piksela rozdzielonych rozdzielczość pozioma. Na przykład obraz o szerokości pikseli 360 i rozdzielczość pozioma 72 dpi ma fizycznego szerokość 5 cala. Podobne uwagi dotyczą wysokość pikseli i wysokość fizycznych.  
  
 Ta metoda pobiera część obrazu przy użyciu rozmiaru fizycznych, tak aby było jego poprawny rozmiar części obrazu w calach niezależnie od rozdzielczości (punkty na cal) urządzenia. Na przykład załóżmy, że część obrazu jest pikseli szerokości 216 i rozdzielczość pozioma 72 dpi. Wywołanie tej metody do rysowania część obrazu na urządzeniu rozdzielczości 96 dpi szerokość piksela części renderowanym obrazie będzie (216/72) * 96 = 288.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy współrzędne, w którym ma zostać narysowany lewego górnego rogu obrazu.  
  
-   Tworzy prostokąt źródło, z którego mają zostać wyodrębnione część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego pikseli.  
  
-   Rysuje obraz ekranu.  
  
 Rozmiar prostokąta źródłowego Określa, jaka część nieskalowanego oryginalnego obrazu jest rysowane na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#62)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#62)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y, float width, float height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="x">Współrzędna x górnego lewego rogu narysowanego obrazu.</param>
        <param name="y">Współrzędna y górnego lewego rogu narysowanego obrazu.</param>
        <param name="width">Szerokość narysowanego obrazu.</param>
        <param name="height">Wysokość obrazu narysowanego.</param>
        <summary>Rysuje określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prostokąt zdefiniowane przez `x`, `y`, `width`, i `height` parametry Określa położenie i rozmiar narysowanego obrazu.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy położenie i rozmiar prostokąta do rysowania obrazu.  
  
-   Rysuje obraz ekranu.  
  
 Pozycja prostokąta lokalizuje obrazu na ekranie i rozmiar oryginalnego obrazu i rozmiar prostokąta Określa skalowanie narysowanego obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#63)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#63)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część <c>obrazu</c> obiektu do rysowania.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenia, który określa jednostki miary używane przez <c>srcRect</c> parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> Określa informacje o ponowne kolorowanie i gamma <c>obrazu</c> obiektu.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> Delegat, który określa metodę do wywołania podczas rysowania obrazu. Ta metoda jest wywoływana często, aby sprawdzić, czy można zatrzymać wykonywania <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> metody zgodnie z kryteria określone przez aplikację.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.PointF> lewym górnym, prawym górnym i lewym dolnym rogu równoległobok reprezentują struktury. Punkt czwarty ekstrapolacji jest pierwsze trzy do utworzenia równoległobok.  
  
 `srcRect` Parametr określa prostokątne część `image` obiektu do rysowania. Ta część jest skalowana i ścięty aby zmieścił się wewnątrz równoległobok określony przez `destPoints` parametru.  
  
 To przeciążenie z `callback` parametru zapewnia sposób zatrzymania rysowania obrazu po jego uruchomieniu zgodnie z kryteria określone przez aplikację. Na przykład aplikację można uruchomić rysowania duży obraz, a użytkownik może przewiń obrazu ekranie, w których przypadku aplikacji można zatrzymać rysunku.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod najpierw definiuje metodę wywołania zwrotnego <xref:System.Drawing.Graphics.DrawImageAbort> delegata; definicja jest simplistic i tylko testy, aby zobaczyć, czy <xref:System.Drawing.Graphics.DrawImage%2A> metoda wywołuje ona wartość null `callBackData` parametru. Główną przykładu wykonuje następujące czynności:  
  
-   Tworzy wystąpienie <xref:System.Drawing.Graphics.DrawImageAbort> metody wywołania zwrotnego:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok do rysowania obrazu.  
  
-   Tworzy trzeba zaznaczyć część obrazu do rysowania.  
  
-   Ustawia rysowania jednostki do pikseli grafiki.  
  
-   Rysuje oryginalnego obrazu ekranu.  
  
-   Tworzy dodatkowe Równoległobok do rysowania skorygowaną obrazu.  
  
-   Tworzy i ustawia atrybuty skorygowaną obrazu będzie mieć wartość większą niż zwykle gamma.  
  
-   Rysuje obraz dostosowane do ekranu.  
  
 Dla oryginalnego, nieskorygowane równoległobok pozycja lokalizuje obrazu na ekranie, a rozmiar prostokąta oraz wielkość i kształt równoległobok Określa skalowanie i pochylanie narysowanego obrazu.  
  
 Ponieważ w tym przykładzie użyto przeciążenia, które nie zostały spełnione `callBackData` parametru <xref:System.Drawing.Graphics.DrawImageAbort> zwraca wywołania zwrotnego `true`, co powoduje, że <xref:System.Drawing.Graphics.DrawImage%2A> metody w celu oraz zawarte w tym przykładzie kodu obsługi wyjątków do drukowania tekst wyjątku zamiast rysowania obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#38)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#38)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część <c>obrazu</c> obiektu do rysowania.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenia, który określa jednostki miary używane przez <c>srcRect</c> parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> Określa informacje o ponowne kolorowanie i gamma <c>obrazu</c> obiektu.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> Delegat, który określa metodę do wywołania podczas rysowania obrazu. Ta metoda jest wywoływana często, aby sprawdzić, czy można zatrzymać wykonywania <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> metody zgodnie z kryteria określone przez aplikację.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.PointF> lewym górnym, prawym górnym i lewym dolnym rogu równoległobok reprezentują struktury. Punkt czwarty ekstrapolacji jest pierwsze trzy do utworzenia równoległobok.  
  
 `srcRect` Parametr określa prostokątne część `image` obiektu do rysowania. Ta część jest skalowana i ścięty aby zmieścił się wewnątrz równoległobok określony przez `destPoints` parametru.  
  
 To przeciążenie z `callback` parametru zapewnia sposób zatrzymania rysowania obrazu po jego uruchomieniu zgodnie z kryteria określone przez aplikację. Na przykład aplikację można uruchomić rysowania duży obraz, a użytkownik może przewiń obrazu ekranie, w których przypadku aplikacji można zatrzymać rysunku.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod najpierw definiuje metodę wywołania zwrotnego <xref:System.Drawing.Graphics.DrawImageAbort> delegata; definicja jest simplistic i tylko testy, aby zobaczyć, czy <xref:System.Drawing.Graphics.DrawImage%2A> metoda wywołuje ona wartość null `callBackData` parametru. Główną przykładu wykonuje następujące czynności:  
  
-   Tworzy wystąpienie <xref:System.Drawing.Graphics.DrawImageAbort> metody wywołania zwrotnego.  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok do rysowania obrazu.  
  
-   Tworzy trzeba zaznaczyć część obrazu do rysowania.  
  
-   Ustawia rysowania jednostki do pikseli grafiki.  
  
-   Rysuje oryginalnego obrazu ekranu.  
  
-   Tworzy dodatkowe Równoległobok do rysowania skorygowaną obrazu.  
  
-   Tworzy i ustawia atrybuty skorygowaną obrazu będzie mieć wartość większą niż zwykle gamma.  
  
-   Rysuje obraz dostosowane do ekranu.  
  
 Dla oryginalnego, nieskorygowane równoległobok pozycja lokalizuje obrazu na ekranie, a rozmiar prostokąta oraz wielkość i kształt równoległobok Określa skalowanie i pochylanie narysowanego obrazu.  
  
 Ponieważ w tym przykładzie użyto przeciążenia, które nie zostały spełnione `callBackData` parametru <xref:System.Drawing.Graphics.DrawImageAbort> zwraca wywołania zwrotnego `true`, co powoduje, że <xref:System.Drawing.Graphics.DrawImage%2A> metody w celu oraz zawarte w tym przykładzie kodu obsługi wyjątków do drukowania tekst wyjątku zamiast rysowania obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#44)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#44)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback, int32 callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback, int callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część <c>obrazu</c> obiektu do rysowania.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenia, który określa jednostki miary używane przez <c>srcRect</c> parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> Określa informacje o ponowne kolorowanie i gamma <c>obrazu</c> obiektu.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> Delegat, który określa metodę do wywołania podczas rysowania obrazu. Ta metoda jest wywoływana często, aby sprawdzić, czy można zatrzymać wykonywania <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> metody zgodnie z kryteria określone przez aplikację.</param>
        <param name="callbackData">Wartość określającą dodatkowymi danymi dotyczącymi <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> delegata używany do sprawdzania, czy można zatrzymać wykonywania <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> metody.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.PointF> lewym górnym, prawym górnym i lewym dolnym rogu równoległobok reprezentują struktury. Punkt czwarty ekstrapolacji jest pierwsze trzy do utworzenia równoległobok.  
  
 `srcRect` Parametr określa prostokątne część `image` obiektu do rysowania. Ta część jest skalowana i ścięty aby zmieścił się wewnątrz równoległobok określony przez `destPoints` parametru.  
  
 To przeciążenie z `callback` i `callbackData` parametry w celu dostarczania środków zatrzymać rysowania obrazu po jego uruchomieniu zgodnie z kryteriami i dane określone przez aplikację. Na przykład aplikację można uruchomić rysowania duży obraz, a użytkownik może przewiń obrazu ekranie, w których przypadku aplikacji można zatrzymać rysunku.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod najpierw definiuje metodę wywołania zwrotnego <xref:System.Drawing.Graphics.DrawImageAbort> delegata; definicja jest simplistic i tylko testy, aby zobaczyć, czy <xref:System.Drawing.Graphics.DrawImage%2A> metoda wywołuje ona wartość null `callBackData` parametru. Główną przykładu wykonuje następujące czynności:  
  
-   Tworzy wystąpienie <xref:System.Drawing.Graphics.DrawImageAbort> metody wywołania zwrotnego.  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok do rysowania obrazu.  
  
-   Tworzy trzeba zaznaczyć część obrazu do rysowania.  
  
-   Ustawia rysowania jednostki do pikseli grafiki.  
  
-   Rysuje oryginalnego obrazu ekranu.  
  
-   Tworzy dodatkowe Równoległobok do rysowania skorygowaną obrazu.  
  
-   Tworzy i ustawia atrybuty skorygowaną obrazu będzie mieć wartość większą niż zwykle gamma.  
  
-   Rysuje obraz dostosowane do ekranu.  
  
 Dla oryginalnego, nieskorygowane równoległobok pozycja lokalizuje obrazu na ekranie, a rozmiar prostokąta oraz wielkość i kształt równoległobok Określa skalowanie i pochylanie narysowanego obrazu.  
  
 Ponieważ w tym przykładzie użyto przeciążenia, które przekazuje `callBackData` parametru <xref:System.Drawing.Graphics.DrawImageAbort> zwraca wywołania zwrotnego `false`, co powoduje, że <xref:System.Drawing.Graphics.DrawImage%2A> metodę, aby kontynuować i przykładzie Rysuje obraz dostosowane do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#39)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#39)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#39)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback, int32 callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback, int callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część <c>obrazu</c> obiektu do rysowania.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenia, który określa jednostki miary używane przez <c>srcRect</c> parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> Określa informacje o ponowne kolorowanie i gamma <c>obrazu</c> obiektu.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> Delegat, który określa metodę do wywołania podczas rysowania obrazu. Ta metoda jest wywoływana często, aby sprawdzić, czy można zatrzymać wykonywania <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> metody zgodnie z kryteria określone przez aplikację.</param>
        <param name="callbackData">Wartość określającą dodatkowymi danymi dotyczącymi <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> delegata używany do sprawdzania, czy można zatrzymać wykonywania <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> metody.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.PointF> lewym górnym, prawym górnym i lewym dolnym rogu równoległobok reprezentują struktury. Punkt czwarty ekstrapolacji jest pierwsze trzy do utworzenia równoległobok.  
  
 `srcRect` Parametr określa prostokątne część `image` obiektu do rysowania. Ta część jest skalowana i ścięty aby zmieścił się wewnątrz równoległobok określony przez `destPoints` parametru.  
  
 To przeciążenie z `callback` i `callbackData` parametry w celu dostarczania środków zatrzymać rysowania obrazu po jego uruchomieniu zgodnie z kryteriami i dane określone przez aplikację. Na przykład aplikację można uruchomić rysowania duży obraz, a użytkownik może przewiń obrazu ekranie, w których przypadku aplikacji można zatrzymać rysunku.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem `Pa` <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod najpierw definiuje metodę wywołania zwrotnego <xref:System.Drawing.Graphics.DrawImageAbort> delegata; definicja jest simplistic i tylko testy, aby zobaczyć, czy <xref:System.Drawing.Graphics.DrawImage%2A> metoda wywołuje ona wartość null `callBackData` parametru. Główną przykładu wykonuje następujące czynności:  
  
-   Tworzy wystąpienie <xref:System.Drawing.Graphics.DrawImageAbort> metody wywołania zwrotnego.  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok do rysowania obrazu.  
  
-   Tworzy trzeba zaznaczyć część obrazu do rysowania.  
  
-   Ustawia rysowania jednostki do pikseli grafiki.  
  
-   Rysuje oryginalnego obrazu ekranu.  
  
-   Tworzy dodatkowe Równoległobok do rysowania skorygowaną obrazu.  
  
-   Tworzy i ustawia atrybuty skorygowaną obrazu będzie mieć wartość większą niż zwykle gamma.  
  
-   Rysuje obraz dostosowane do ekranu.  
  
 Dla oryginalnego, nieskorygowane równoległobok pozycja lokalizuje obrazu na ekranie, a rozmiar prostokąta oraz wielkość i kształt równoległobok Określa skalowanie i pochylanie narysowanego obrazu.  
  
 Ponieważ w tym przykładzie użyto przeciążenia, które przekazuje `callBackData` parametru <xref:System.Drawing.Graphics.DrawImageAbort> zwraca wywołania zwrotnego `false`, co powoduje, że <xref:System.Drawing.Graphics.DrawImage%2A> metodę, aby kontynuować i przykładzie Rysuje obraz dostosowane do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#45)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#45)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar narysowanego obrazu. Obraz jest skalowane w celu dopasowania prostokąta.</param>
        <param name="srcX">Współrzędna x górnego lewego rogu część obrazu źródłowego do rysowania.</param>
        <param name="srcY">Współrzędna y górnego lewego rogu część obrazu źródłowego do rysowania.</param>
        <param name="srcWidth">Szerokość obrazu źródłowego do rysowania.</param>
        <param name="srcHeight">Wysokość część obrazu źródłowego do rysowania.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostki miary umożliwiający określanie prostokąt źródła.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`, `srcY`, `srcWidth`, I `srcHeight` parametry określają prostokątne części `image` obiektu do rysowania. Prostokąt jest określana względem lewego górnego rogu obrazu źródłowego. Ta część jest skalowana, aby zmieścił się wewnątrz prostokąt określony przez `destRect` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy prostokąt docelowego do rysowania obrazu.  
  
-   Tworzy współrzędne prostokąt źródło, z którego mają zostać wyodrębnione część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego pikseli.  
  
-   Rysuje obraz ekranu.  
  
 Pozycja prostokąta docelowego lokalizuje obrazu na ekranie rozmiary prostokąty źródłowego i docelowego ustalić skalowanie narysowanego obrazu i rozmiar prostokąta źródłowego Określa, jaka część oryginalnego obrazu jest rysowane ekran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#48)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#48)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#48)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar narysowanego obrazu. Obraz jest skalowane w celu dopasowania prostokąta.</param>
        <param name="srcX">Współrzędna x górnego lewego rogu część obrazu źródłowego do rysowania.</param>
        <param name="srcY">Współrzędna y górnego lewego rogu część obrazu źródłowego do rysowania.</param>
        <param name="srcWidth">Szerokość obrazu źródłowego do rysowania.</param>
        <param name="srcHeight">Wysokość część obrazu źródłowego do rysowania.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostki miary umożliwiający określanie prostokąt źródła.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`, `srcY`, `srcWidth`, I `srcHeight` parametry określają prostokątne części `image` obiektu do rysowania. Prostokąt jest określana względem lewego górnego rogu obrazu źródłowego. Ta część jest skalowana, aby zmieścił się wewnątrz prostokąt określony przez `destRect` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy współrzędne docelowy prostokąt do rysowania obrazu.  
  
-   Tworzy prostokąt źródło, z którego mają zostać wyodrębnione część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego pikseli.  
  
-   Rysuje obraz ekranu.  
  
 Pozycja prostokąta docelowego lokalizuje obrazu na ekranie, rozmiary prostokąty źródłowego i docelowego ustalić skalowanie narysowanego obrazu i rozmiar prostokąta źródłowego Określa, jaka część oryginalnego obrazu jest rysowane ekran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#52)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#52)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar narysowanego obrazu. Obraz jest skalowane w celu dopasowania prostokąta.</param>
        <param name="srcX">Współrzędna x górnego lewego rogu część obrazu źródłowego do rysowania.</param>
        <param name="srcY">Współrzędna y górnego lewego rogu część obrazu źródłowego do rysowania.</param>
        <param name="srcWidth">Szerokość obrazu źródłowego do rysowania.</param>
        <param name="srcHeight">Wysokość część obrazu źródłowego do rysowania.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostki miary umożliwiający określanie prostokąt źródła.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> Określa informacje o ponowne kolorowanie i gamma <c>obrazu</c> obiektu.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`, `srcY`, `srcWidth`, I `srcHeight` parametry określają prostokątne części `image` obiektu do rysowania. Prostokąt jest określana względem lewego górnego rogu obrazu źródłowego. Ta część jest skalowana, aby zmieścił się wewnątrz prostokąt określony przez `destRect` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy prostokąt docelowego do rysowania obrazu.  
  
-   Tworzy współrzędne prostokąt źródło, z którego mają zostać wyodrębnione część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego pikseli.  
  
-   Rysuje oryginalnego obrazu ekranu.  
  
-   Tworzy dodatkowe prostokąta do rysowania skorygowaną obrazu.  
  
-   Tworzy i ustawia atrybuty skorygowaną obrazu będzie mieć wartość większą niż zwykle gamma.  
  
-   Rysuje obraz dostosowane do ekranu.  
  
 Pozycja prostokąta oryginalnej, nieskorygowane docelowym lokalizuje obrazu na ekranie i rozmiary prostokąty źródłowego i docelowego ustalić skalowanie narysowanego obrazu i rozmiar prostokąta źródłowego Określa, jaka część oryginalny obraz jest rysowany na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#49)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#49)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#49)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar narysowanego obrazu. Obraz jest skalowane w celu dopasowania prostokąta.</param>
        <param name="srcX">Współrzędna x górnego lewego rogu część obrazu źródłowego do rysowania.</param>
        <param name="srcY">Współrzędna y górnego lewego rogu część obrazu źródłowego do rysowania.</param>
        <param name="srcWidth">Szerokość obrazu źródłowego do rysowania.</param>
        <param name="srcHeight">Wysokość część obrazu źródłowego do rysowania.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostki miary umożliwiający określanie prostokąt źródła.</param>
        <param name="imageAttrs">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> Określa informacje o ponowne kolorowanie i gamma <c>obrazu</c> obiektu.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`, `srcY`, `srcWidth`, I `srcHeight` parametry określają prostokątne części `image` obiektu do rysowania. Prostokąt jest określana względem lewego górnego rogu obrazu źródłowego. Ta część jest skalowana, aby zmieścił się wewnątrz prostokąt określony przez `destRect` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy prostokąt docelowego do rysowania obrazu.  
  
-   Tworzy współrzędne prostokąt źródło, z którego mają zostać wyodrębnione część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego pikseli.  
  
-   Rysuje oryginalnego obrazu ekranu.  
  
-   Tworzy dodatkowe prostokąta do rysowania skorygowaną obrazu.  
  
-   Tworzy i ustawia atrybuty skorygowaną obrazu będzie mieć wartość większą niż zwykle gamma.  
  
-   Rysuje obraz dostosowane do ekranu.  
  
 Pozycja prostokąta oryginalnej, nieskorygowane docelowym lokalizuje obrazu na ekranie i rozmiary prostokąty źródłowego i docelowego ustalić skalowanie narysowanego obrazu i rozmiar prostokąta źródłowego Określa, jaka część oryginalny obraz jest rysowany na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#53)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#53)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar narysowanego obrazu. Obraz jest skalowane w celu dopasowania prostokąta.</param>
        <param name="srcX">Współrzędna x górnego lewego rogu część obrazu źródłowego do rysowania.</param>
        <param name="srcY">Współrzędna y górnego lewego rogu część obrazu źródłowego do rysowania.</param>
        <param name="srcWidth">Szerokość obrazu źródłowego do rysowania.</param>
        <param name="srcHeight">Wysokość część obrazu źródłowego do rysowania.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostki miary umożliwiający określanie prostokąt źródła.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> Określa informacje o ponowne kolorowanie i gamma <c>obrazu</c>.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> Delegat, który określa metodę do wywołania podczas rysowania obrazu. Ta metoda jest wywoływana często, aby sprawdzić, czy można zatrzymać wykonywania <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> metody zgodnie z kryteria określone przez aplikację.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`, `srcY`, `srcWidth`, I `srcHeight` parametry określają prostokątne części `image` obiektu do rysowania. Prostokąt jest określana względem lewego górnego rogu obrazu źródłowego. Ta część jest skalowana, aby zmieścił się wewnątrz prostokąt określony przez `destRect` obiektu.  
  
 To przeciążenie z `callback` parametru zapewnia sposób zatrzymania rysowania obrazu po jego uruchomieniu zgodnie z kryteria określone przez aplikację. Na przykład aplikację można uruchomić rysowania duży obraz, a użytkownik może przewiń obrazu ekranie, w których przypadku aplikacji można zatrzymać rysunku.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod najpierw definiuje metodę wywołania zwrotnego <xref:System.Drawing.Graphics.DrawImageAbort> delegata; definicja jest simplistic i tylko testy, aby zobaczyć, czy <xref:System.Drawing.Graphics.DrawImage%2A> metoda wywołuje ona wartość null `callBackData` parametru. Główną przykładu wykonuje następujące czynności:  
  
-   Tworzy wystąpienie <xref:System.Drawing.Graphics.DrawImageAbort> metody wywołania zwrotnego.  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty definiujące docelowy prostokąt do rysowania obrazu.  
  
-   Tworzy prostokąt źródła, wybierz część obrazu do rysowania.  
  
-   Ustawia rysowania jednostki do pikseli grafiki.  
  
-   Rysuje oryginalnego obrazu ekranu.  
  
-   Tworzy prostokąt dodatkowe miejsce docelowe do rysowania skorygowaną obrazu.  
  
-   Tworzy i ustawia atrybuty skorygowaną obrazu będzie mieć wartość większą niż zwykle gamma.  
  
-   Rysuje obraz dostosowane do ekranu.  
  
 Prostokąta oryginalnej, nieskorygowane docelowym pozycja lokalizuje obrazu na ekranie i rozmiar prostokąta źródłowego i rozmiaru i kształtu docelowy prostokąt Określa skalowanie narysowanego obrazu.  
  
 Ponieważ w tym przykładzie użyto przeciążenia, które nie zostały spełnione `callBackData` parametru <xref:System.Drawing.Graphics.DrawImageAbort> zwraca wywołania zwrotnego `true`, co powoduje, że <xref:System.Drawing.Graphics.DrawImage%2A> metody w celu oraz zawarte w tym przykładzie kodu obsługi wyjątków do drukowania tekst wyjątku zamiast rysowania obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#50)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#50)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar narysowanego obrazu. Obraz jest skalowane w celu dopasowania prostokąta.</param>
        <param name="srcX">Współrzędna x górnego lewego rogu część obrazu źródłowego do rysowania.</param>
        <param name="srcY">Współrzędna y górnego lewego rogu część obrazu źródłowego do rysowania.</param>
        <param name="srcWidth">Szerokość obrazu źródłowego do rysowania.</param>
        <param name="srcHeight">Wysokość część obrazu źródłowego do rysowania.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostki miary umożliwiający określanie prostokąt źródła.</param>
        <param name="imageAttrs">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> Określa informacje o ponowne kolorowanie i gamma <c>obrazu</c> obiektu.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> Delegat, który określa metodę do wywołania podczas rysowania obrazu. Ta metoda jest wywoływana często, aby sprawdzić, czy można zatrzymać wykonywania <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> metody zgodnie z kryteria określone przez aplikację.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`, `srcY`, `srcWidth`, I `srcHeight` parametry określają prostokątne części `image` obiektu do rysowania. Prostokąt jest określana względem lewego górnego rogu obrazu źródłowego. Ta część jest skalowana, aby zmieścił się wewnątrz prostokąt określony przez `destRect` parametru.  
  
 To przeciążenie z `callback` parametru zapewnia sposób zatrzymania rysowania obrazu po jego uruchomieniu zgodnie z kryteria określone przez aplikację. Na przykład aplikację można uruchomić rysowania duży obraz, a użytkownik może przewiń obrazu ekranie, w których przypadku aplikacji można zatrzymać rysunku.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod najpierw definiuje metodę wywołania zwrotnego <xref:System.Drawing.Graphics.DrawImageAbort> delegata; definicja jest simplistic i tylko testy, aby zobaczyć, czy <xref:System.Drawing.Graphics.DrawImage%2A> metoda wywołuje ona wartość null `callBackData` parametru. Główną przykładu wykonuje następujące czynności:  
  
-   Tworzy wystąpienie <xref:System.Drawing.Graphics.DrawImageAbort> metody wywołania zwrotnego.  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty definiujące docelowy prostokąt do rysowania obrazu.  
  
-   Tworzy prostokąt źródła, wybierz część obrazu do rysowania.  
  
-   Ustawia rysowania jednostki do pikseli grafiki.  
  
-   Rysuje oryginalnego obrazu ekranu.  
  
-   Tworzy prostokąt dodatkowe miejsce docelowe do rysowania skorygowaną obrazu.  
  
-   Tworzy i ustawia atrybuty skorygowaną obrazu będzie mieć wartość większą niż zwykle gamma.  
  
-   Rysuje obraz dostosowane do ekranu.  
  
 Prostokąta oryginalnej, nieskorygowane docelowym pozycja lokalizuje obrazu na ekranie i rozmiar prostokąta źródłowego i rozmiaru i kształtu docelowy prostokąt Określa skalowanie narysowanego obrazu.  
  
 Ponieważ w tym przykładzie użyto przeciążenia, które nie zostały spełnione `callBackData` parametru <xref:System.Drawing.Graphics.DrawImageAbort> zwraca wywołania zwrotnego `true`, co powoduje, że <xref:System.Drawing.Graphics.DrawImage%2A> metody w celu oraz zawarte w tym przykładzie kodu obsługi wyjątków do drukowania tekst wyjątku zamiast rysowania obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#54)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#54)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar narysowanego obrazu. Obraz jest skalowane w celu dopasowania prostokąta.</param>
        <param name="srcX">Współrzędna x górnego lewego rogu część obrazu źródłowego do rysowania.</param>
        <param name="srcY">Współrzędna y górnego lewego rogu część obrazu źródłowego do rysowania.</param>
        <param name="srcWidth">Szerokość obrazu źródłowego do rysowania.</param>
        <param name="srcHeight">Wysokość część obrazu źródłowego do rysowania.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostki miary umożliwiający określanie prostokąt źródła.</param>
        <param name="imageAttrs">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> Określa informacje o ponowne kolorowanie i gamma <c>obrazu</c> obiektu.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> Delegat, który określa metodę do wywołania podczas rysowania obrazu. Ta metoda jest wywoływana często, aby sprawdzić, czy można zatrzymać wykonywania <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" /> metody zgodnie z kryteria określone przez aplikację.</param>
        <param name="callbackData">Wartość określającą dodatkowymi danymi dotyczącymi <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> delegata używany do sprawdzania, czy można zatrzymać wykonywania <see langword="DrawImage" /> metody.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`, `srcY`, `srcWidth`, I `srcHeight` parametry określają prostokątne części `image` obiektu do rysowania. Prostokąt jest określana względem lewego górnego rogu obrazu źródłowego. Ta część jest skalowana, aby zmieścił się wewnątrz prostokąt określony przez `destRect` parametru.  
  
 To przeciążenie z `callback` i `callbackData` parametry w celu dostarczania środków zatrzymać rysowania obrazu po jego uruchomieniu zgodnie z kryteriami i dane określone przez aplikację. Na przykład aplikację można uruchomić rysowania duży obraz, a użytkownik może przewiń obrazu ekranie, w których przypadku aplikacji można zatrzymać rysunku.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod najpierw definiuje metodę wywołania zwrotnego <xref:System.Drawing.Graphics.DrawImageAbort> delegata; definicja jest simplistic i tylko testy, aby zobaczyć, czy <xref:System.Drawing.Graphics.DrawImage%2A> metoda wywołuje ona wartość null `callBackData` parametru. Główną przykładu wykonuje następujące czynności:  
  
-   Tworzy wystąpienie <xref:System.Drawing.Graphics.DrawImageAbort> metody wywołania zwrotnego.  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty definiujące docelowy prostokąt do rysowania obrazu.  
  
-   Tworzy prostokąt źródła, wybierz część obrazu do rysowania.  
  
-   Ustawia rysowania jednostki do pikseli grafiki.  
  
-   Rysuje oryginalnego obrazu ekranu.  
  
-   Tworzy prostokąt dodatkowe miejsce docelowe do rysowania skorygowaną obrazu.  
  
-   Tworzy i ustawia atrybuty skorygowaną obrazu będzie mieć wartość większą niż zwykle gamma.  
  
-   Rysuje obraz dostosowane do ekranu.  
  
 Prostokąta oryginalnej, nieskorygowane docelowym pozycja lokalizuje obrazu na ekranie i rozmiar prostokąta źródłowego i rozmiaru i kształtu docelowy prostokąt Określa skalowanie narysowanego obrazu.  
  
 Ponieważ w tym przykładzie użyto przeciążenia, które przekazuje `callBackData` parametru <xref:System.Drawing.Graphics.DrawImageAbort> zwraca wywołania zwrotnego `false`, co powoduje, że <xref:System.Drawing.Graphics.DrawImage%2A> metodę, aby kontynuować i przykładzie Rysuje obraz dostosowane do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#51)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#51)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar narysowanego obrazu. Obraz jest skalowane w celu dopasowania prostokąta.</param>
        <param name="srcX">Współrzędna x górnego lewego rogu część obrazu źródłowego do rysowania.</param>
        <param name="srcY">Współrzędna y górnego lewego rogu część obrazu źródłowego do rysowania.</param>
        <param name="srcWidth">Szerokość obrazu źródłowego do rysowania.</param>
        <param name="srcHeight">Wysokość część obrazu źródłowego do rysowania.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostki miary umożliwiający określanie prostokąt źródła.</param>
        <param name="imageAttrs">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> Określa informacje o ponowne kolorowanie i gamma <c>obrazu</c> obiektu.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> Delegat, który określa metodę do wywołania podczas rysowania obrazu. Ta metoda jest wywoływana często, aby sprawdzić, czy można zatrzymać wykonywania <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" /> metody zgodnie z kryteria określone przez aplikację.</param>
        <param name="callbackData">Wartość określającą dodatkowymi danymi dotyczącymi <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> delegata używany do sprawdzania, czy można zatrzymać wykonywania <see langword="DrawImage" /> metody.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`, `srcY`, `srcWidth`, I `srcHeight` parametry określają prostokątne części `image` obiektu do rysowania. Prostokąt jest określana względem lewego górnego rogu obrazu źródłowego. Ta część jest skalowana, aby zmieścił się wewnątrz prostokąt określony przez `destRect` parametru.  
  
 To przeciążenie z `callback` i `callbackData` parametry w celu dostarczania środków zatrzymać rysowania obrazu po jego uruchomieniu zgodnie z kryteriami i dane określone przez aplikację. Na przykład aplikację można uruchomić rysowania duży obraz, a użytkownik może przewiń obrazu ekranie, w których przypadku aplikacji można zatrzymać rysunku.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod najpierw definiuje metodę wywołania zwrotnego <xref:System.Drawing.Graphics.DrawImageAbort> delegata; definicja jest simplistic i tylko testy, aby zobaczyć, czy <xref:System.Drawing.Graphics.DrawImage%2A> metoda wywołuje ona wartość null `callBackData` parametru. Główną przykładu wykonuje następujące czynności:  
  
-   Tworzy wystąpienie <xref:System.Drawing.Graphics.DrawImageAbort> metody wywołania zwrotnego.  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty definiujące docelowy prostokąt do rysowania obrazu.  
  
-   Tworzy prostokąt źródła, wybierz część obrazu do rysowania.  
  
-   Ustawia rysowania jednostki do pikseli grafiki.  
  
-   Rysuje oryginalnego obrazu ekranu.  
  
-   Tworzy prostokąt dodatkowe miejsce docelowe do rysowania skorygowaną obrazu.  
  
-   Tworzy i ustawia atrybuty skorygowaną obrazu będzie mieć wartość większą niż zwykle gamma.  
  
-   Rysuje obraz dostosowane do ekranu.  
  
 Prostokąta oryginalnej, nieskorygowane docelowym pozycja lokalizuje obrazu na ekranie i rozmiar prostokąta źródłowego i rozmiaru i kształtu docelowy prostokąt Określa skalowanie narysowanego obrazu.  
  
 Ponieważ w tym przykładzie użyto przeciążenia, które przekazuje `callBackData` parametru <xref:System.Drawing.Graphics.DrawImageAbort> zwraca wywołania zwrotnego `false`, co powoduje, że <xref:System.Drawing.Graphics.DrawImage%2A> metodę, aby kontynuować i przykładzie Rysuje obraz dostosowane do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#55)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#55)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawImageUnscaled">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje określonego obrazu przy użyciu oryginalnego rozmiaru fizycznych w lokalizacji określonej przez parę współrzędnych.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, System::Drawing::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="point">
          <see cref="T:System.Drawing.Point" /> Struktura, która określa lewego górnego rogu narysowanego obrazu.</param>
        <summary>Rysuje określonego obrazu przy użyciu oryginalnego rozmiaru fizycznych w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość dla szerokości i wartość rozdzielczość pozioma (punkty na cal). Szerokość fizycznych, mierzony w milimetrach obrazu jest szerokość piksela rozdzielonych rozdzielczość pozioma. Na przykład obraz o szerokości pikseli 216 i rozdzielczość pozioma 72 dpi ma fizycznego szerokość 3 cala. Podobne uwagi dotyczą wysokość pikseli i wysokość fizycznych.  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> Metody Rysuje obraz przy użyciu rozmiaru fizycznych, tak aby było jego poprawny rozmiar obrazu w calach niezależnie od rozdzielczości (punkty na cal) urządzenia. Na przykład załóżmy, że obraz ma pikseli szerokości 216 i rozdzielczość pozioma 72 dpi. Jeśli należy wywołać <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> do rysowania obrazu na urządzeniu rozdzielczości 96 dpi, szerokość piksela renderowanym obrazie będzie (216/72) * 96 = 288.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkt, w którym ma zostać narysowany lewego górnego rogu obrazu.  
  
-   Rysuje całego obrazu przy użyciu rozmiaru fizycznych.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#64)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#64)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> która określa lewego górnego rogu narysowanego obrazu. Właściwości X i Y prostokąta Określ lewym górnym rogu. Właściwości Width i Height są ignorowane.</param>
        <summary>Rysuje określonego obrazu przy użyciu oryginalnego rozmiaru fizycznych w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość dla szerokości i wartość rozdzielczość pozioma (punkty na cal). Szerokość fizycznych, mierzony w milimetrach obrazu jest szerokość piksela rozdzielonych rozdzielczość pozioma. Na przykład obraz o szerokości pikseli 216 i rozdzielczość pozioma 72 dpi ma fizycznego szerokość 3 cala. Podobne uwagi dotyczą wysokość pikseli i wysokość fizycznych.  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> Metody Rysuje obraz przy użyciu rozmiaru fizycznych, tak aby było jego poprawny rozmiar obrazu w calach niezależnie od rozdzielczości (punkty na cal) urządzenia. Na przykład załóżmy, że obraz ma pikseli szerokości 216 i rozdzielczość pozioma 72 dpi. Jeśli należy wywołać <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> do rysowania obrazu na urządzeniu rozdzielczości 96 dpi, szerokość piksela renderowanym obrazie będzie (216/72) * 96 = 288.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="x">Współrzędna x górnego lewego rogu narysowanego obrazu.</param>
        <param name="y">Współrzędna y górnego lewego rogu narysowanego obrazu.</param>
        <summary>Rysuje określonego obrazu przy użyciu oryginalnego rozmiaru fizycznych w lokalizacji określonej przez parę współrzędnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość dla szerokości i wartość rozdzielczość pozioma (punkty na cal). Szerokość fizycznych, mierzony w milimetrach obrazu jest szerokość piksela rozdzielonych rozdzielczość pozioma. Na przykład obraz o szerokości pikseli 216 i rozdzielczość pozioma 72 dpi ma fizycznego szerokość 3 cala. Podobne uwagi dotyczą wysokość pikseli i wysokość fizycznych.  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> Metody Rysuje obraz przy użyciu rozmiaru fizycznych, tak aby było jego poprawny rozmiar obrazu w calach niezależnie od rozdzielczości (punkty na cal) urządzenia. Na przykład załóżmy, że obraz ma pikseli szerokości 216 i rozdzielczość pozioma 72 dpi. Jeśli należy wywołać <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> do rysowania obrazu na urządzeniu rozdzielczości 96 dpi, szerokość piksela renderowanym obrazie będzie (216/72) * 96 = 288.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkt, w którym ma zostać narysowany lewego górnego rogu obrazu.  
  
-   Rysuje całego obrazu przy użyciu rozmiaru fizycznych.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#65)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#65)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#65)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, int x, int y, int width, int height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Rysowanie.</param>
        <param name="x">Współrzędna x górnego lewego rogu narysowanego obrazu.</param>
        <param name="y">Współrzędna y górnego lewego rogu narysowanego obrazu.</param>
        <param name="width">Nie używany.</param>
        <param name="height">Nie używany.</param>
        <summary>Rysuje określonego obrazu przy użyciu oryginalnego rozmiaru fizycznych w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość dla szerokości i wartość rozdzielczość pozioma (punkty na cal). Szerokość fizycznych, mierzony w milimetrach obrazu jest szerokość piksela rozdzielonych rozdzielczość pozioma. Na przykład obraz o szerokości pikseli 216 i rozdzielczość pozioma 72 dpi ma fizycznego szerokość 3 cala. Podobne uwagi dotyczą wysokość pikseli i wysokość fizycznych.  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> Metody Rysuje obraz przy użyciu rozmiaru fizycznych, tak aby było jego poprawny rozmiar obrazu w calach niezależnie od rozdzielczości (punkty na cal) urządzenia. Na przykład załóżmy, że obraz ma pikseli szerokości 216 i rozdzielczość pozioma 72 dpi. Jeśli należy wywołać <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> do rysowania obrazu na urządzeniu rozdzielczości 96 dpi, szerokość piksela renderowanym obrazie będzie (216/72) * 96 = 288.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaledAndClipped">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaledAndClipped (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaledAndClipped(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaledAndClipped(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaledAndClipped(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Do rysowania.</param>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> Do rysowania obrazu.</param>
        <summary>Pobiera określony obraz bez skalowania i klipy, jeśli to konieczne zmieścić się w prostokącie określonego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie pokazano sposób użycia <xref:System.Drawing.Graphics.DrawImageUnscaledAndClipped%2A> metody. Aby uruchomić ten przykład, wklej go do formularza systemu Windows. Obsługa formularzy <xref:System.Windows.Forms.Control.Paint> zdarzeń i wywołanie `DrawImageUnscaled` metody z <xref:System.Windows.Forms.Control.Paint> jest metoda obsługi zdarzeń `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#8)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawLine">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje linię łączącą dwa punkty określony przez pary współrzędnych.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, valuetype System.Drawing.Point pt1, valuetype System.Drawing.Point pt2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, System::Drawing::Point pt1, System::Drawing::Point pt2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.Point" />
        <Parameter Name="pt2" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl linii.</param>
        <param name="pt1">
          <see cref="T:System.Drawing.Point" /> Struktura, która reprezentuje pierwszy punkt nawiązywania połączenia.</param>
        <param name="pt2">
          <see cref="T:System.Drawing.Point" /> Struktura, która reprezentuje drugi punkt połączenia.</param>
        <summary>Rysuje linię łączącą dwa <see cref="T:System.Drawing.Point" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy punkty dla punktów końcowych wiersza.  
  
-   Rysuje linię do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#66)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#66)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#66)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, valuetype System.Drawing.PointF pt1, valuetype System.Drawing.PointF pt2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, System::Drawing::PointF pt1, System::Drawing::PointF pt2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.PointF" />
        <Parameter Name="pt2" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl linii.</param>
        <param name="pt1">
          <see cref="T:System.Drawing.PointF" /> Struktura, która reprezentuje pierwszy punkt nawiązywania połączenia.</param>
        <param name="pt2">
          <see cref="T:System.Drawing.PointF" /> Struktura, która reprezentuje drugi punkt połączenia.</param>
        <summary>Rysuje linię łączącą dwa <see cref="T:System.Drawing.PointF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje linię łączącą dwa punkty określony przez `pt1` i p`2` parametrów.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy punkty dla punktów końcowych wiersza.  
  
-   Rysuje linię do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#67)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#67)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#67)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, int x1, int y1, int x2, int y2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, int32 x1, int32 y1, int32 x2, int32 y2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, int x1, int y1, int x2, int y2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Int32" />
        <Parameter Name="y1" Type="System.Int32" />
        <Parameter Name="x2" Type="System.Int32" />
        <Parameter Name="y2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl linii.</param>
        <param name="x1">Współrzędna x pierwszego punktu.</param>
        <param name="y1">Współrzędna y pierwszego punktu.</param>
        <param name="x2">Współrzędna x punktu drugiego.</param>
        <param name="y2">Współrzędna y drugiego punktu.</param>
        <summary>Rysuje linię łączącą dwa punkty określony przez pary współrzędnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje linię łączącą dwa punkty określony przez `x1`, `y1`, `x2`, i `y2` parametrów.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy współrzędne punktów końcowych wiersza.  
  
-   Rysuje linię do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#68)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#68)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, float x1, float y1, float x2, float y2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, float32 x1, float32 y1, float32 x2, float32 y2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, float x1, float y1, float x2, float y2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="x2" Type="System.Single" />
        <Parameter Name="y2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl linii.</param>
        <param name="x1">Współrzędna x pierwszego punktu.</param>
        <param name="y1">Współrzędna y pierwszego punktu.</param>
        <param name="x2">Współrzędna x punktu drugiego.</param>
        <param name="y2">Współrzędna y drugiego punktu.</param>
        <summary>Rysuje linię łączącą dwa punkty określony przez pary współrzędnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje linię łączącą dwa punkty określony przez `x1`, `y1`, `x2`, i `y2` parametrów.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy współrzędne punktów końcowych wiersza.  
  
-   Rysuje linię do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#69)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#69)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawLines">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje szereg segmenty linii, łączących tablicę <see cref="T:System.Drawing.Point" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawLines">
      <MemberSignature Language="C#" Value="public void DrawLines (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLines(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLines(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl segmenty linii.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.Point" /> struktur, które reprezentują punkty nawiązywania połączenia.</param>
        <summary>Rysuje szereg segmenty linii, łączących tablicę <see cref="T:System.Drawing.Point" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje szereg linie łączące tablicę końcowe punkty. Pierwsze dwa punkty w tablicy, określ pierwszy wiersz. Każdy dodatkowy punkt Określa koniec segmentu wiersza, którego punkt początkowy jest punkt końcowy poprzedniego segmentu linii.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy tablicę punktów segmenty linii.  
  
-   Rysuje segmenty linii połączonej do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#70)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#70)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#70)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLines">
      <MemberSignature Language="C#" Value="public void DrawLines (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLines(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLines(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl segmenty linii.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które reprezentują punkty nawiązywania połączenia.</param>
        <summary>Rysuje szereg segmenty linii, łączących tablicę <see cref="T:System.Drawing.PointF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje szereg linie łączące tablicę końcowe punkty. Pierwsze dwa punkty w tablicy, określ pierwszy wiersz. Każdy dodatkowy punkt Określa koniec segmentu wiersza, którego punkt początkowy jest punkt końcowy poprzedniego segmentu linii.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Kod tworzy czarny pióra.  
  
-   Tworzy tablicę punktów segmenty linii.  
  
-   Rysuje segmenty linii połączonej do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#71)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#71)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#71)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPath">
      <MemberSignature Language="C#" Value="public void DrawPath (System.Drawing.Pen pen, System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPath(class System.Drawing.Pen pen, class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPath(System::Drawing::Pen ^ pen, System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl ścieżki.</param>
        <param name="path">
          <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> Rysowanie.</param>
        <summary>Rysuje <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bieżący transformacja w kontekście graficzne jest stosowana do <xref:System.Drawing.Drawing2D.GraphicsPath> przed narysowaniem go.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obiekt ścieżki grafiki i dodaje elipsy do niego.  
  
-   Tworzy czarne pióra.  
  
-   Rysuje ścieżki grafiki na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#72)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#72)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#72)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="path" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawPie">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje kształt koła zdefiniowane przez określony przez parę współrzędnych, szerokości, wysokości i dwóch wierszy promieniowe elipsy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i Styl kształtu koła.</param>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która reprezentuje prostokątem, który definiuje wielokropka, z którego pochodzi kształtu koła.</param>
        <param name="startAngle">Kąt mierzony w stopni w prawo od osi x do pierwszej strony kształtu koła.</param>
        <param name="sweepAngle">Kąt mierzony w stopni w prawo z <c>startAngle</c> parametr do drugiej strony kształt koła.</param>
        <summary>Rysuje kształt koła zdefiniowane przez elipsy określony przez <see cref="T:System.Drawing.Rectangle" /> struktury i dwóch wierszy promieniowe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje kształt koła zdefiniowane przez łuku elipsy i dwóch wierszy promieniowe przecinających z punktami końcowymi łuku. Elipsy jest zdefiniowana przez prostokątem. Kształt koła składa się z dwóch wierszy promieniowe zdefiniowane przez `startAngle` i `sweepAngle` parametry i łuk między przecięcia tych wierszy promieniowe z elipsy.  
  
 Jeśli `sweepAngle` parametru jest większa niż 360 lub mniej niż-360 stopni, jest traktowana tak, jakby to był 360 lub stopni-360 odpowiednio.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy prostokąt zakresem pełną elipsy.  
  
-   Określa kąt, w którym należy uruchomić rysowania (względem osi x) i za pośrednictwem do rysowania (zarówno w prawo).  
  
-   Rysuje segmentu kołowego na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#73)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#73)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#73)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i Styl kształtu koła.</param>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która reprezentuje prostokątem, który definiuje wielokropka, z którego pochodzi kształtu koła.</param>
        <param name="startAngle">Kąt mierzony w stopni w prawo od osi x do pierwszej strony kształtu koła.</param>
        <param name="sweepAngle">Kąt mierzony w stopni w prawo z <c>startAngle</c> parametr do drugiej strony kształt koła.</param>
        <summary>Rysuje kształt koła zdefiniowane przez elipsy określony przez <see cref="T:System.Drawing.RectangleF" /> struktury i dwóch wierszy promieniowe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje kształt koła zdefiniowane przez łuku elipsy i dwóch wierszy promieniowe przecinających z punktami końcowymi łuku. Elipsy jest zdefiniowana przez prostokątem. Kształt koła składa się z dwóch wierszy promieniowe zdefiniowane przez `startAngle` i `sweepAngle` parametry i łuk między przecięcia tych wierszy promieniowe z elipsy.  
  
 Jeśli `sweepAngle` parametru jest większa niż 360 lub mniej niż-360 stopni, jest traktowana tak, jakby to był 360 lub stopni-360 odpowiednio.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy prostokąt zakresem pełną elipsy.  
  
-   Określa kąt, w którym należy uruchomić rysowania (względem osi x) i za pośrednictwem do rysowania (zarówno w prawo).  
  
-   Rysuje segmentu kołowego na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#74)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#74)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#74)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i Styl kształtu koła.</param>
        <param name="x">Współrzędna x górnego lewego rogu prostokątem, który definiuje wielokropka, z którego pochodzi kształtu koła.</param>
        <param name="y">Współrzędna y górnego lewego rogu prostokątem, który definiuje wielokropka, z którego pochodzi kształtu koła.</param>
        <param name="width">Szerokość prostokątem, który definiuje wielokropka, z którego pochodzi kształtu koła.</param>
        <param name="height">Wysokość prostokątem, który definiuje wielokropka, z którego pochodzi kształtu koła.</param>
        <param name="startAngle">Kąt mierzony w stopni w prawo od osi x do pierwszej strony kształtu koła.</param>
        <param name="sweepAngle">Kąt mierzony w stopni w prawo z <c>startAngle</c> parametr do drugiej strony kształt koła.</param>
        <summary>Rysuje kształt koła zdefiniowane przez określony przez parę współrzędnych, szerokości, wysokości i dwóch wierszy promieniowe elipsy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje kształt koła zdefiniowane przez łuku elipsy i dwóch wierszy promieniowe przecinających z punktami końcowymi łuku. Elipsy jest definiowana za pomocą prostokątem opisanego przez `x`, `y`, `width`, i `height` parametrów. Kształt koła składa się z dwóch wierszy promieniowe zdefiniowane przez `startAngle` i `sweepAngle` parametry i łuk między przecięcia tych wierszy promieniowe z elipsy.  
  
 Jeśli `sweepAngle` parametru jest większa niż 360 lub mniej niż-360 stopni, jest traktowana tak, jakby to był 360 lub stopni-360 odpowiednio.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy położenie i rozmiar prostokąt zakresem pełną elipsy.  
  
-   Określa kąt, w którym należy uruchomić rysowania (względem osi x) i za pośrednictwem do rysowania (zarówno w prawo).  
  
-   Rysuje kształt kołowego na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#75)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#75)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#75)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i Styl kształtu koła.</param>
        <param name="x">Współrzędna x górnego lewego rogu prostokątem, który definiuje wielokropka, z którego pochodzi kształtu koła.</param>
        <param name="y">Współrzędna y górnego lewego rogu prostokątem, który definiuje wielokropka, z którego pochodzi kształtu koła.</param>
        <param name="width">Szerokość prostokątem, który definiuje wielokropka, z którego pochodzi kształtu koła.</param>
        <param name="height">Wysokość prostokątem, który definiuje wielokropka, z którego pochodzi kształtu koła.</param>
        <param name="startAngle">Kąt mierzony w stopni w prawo od osi x do pierwszej strony kształtu koła.</param>
        <param name="sweepAngle">Kąt mierzony w stopni w prawo z <c>startAngle</c> parametr do drugiej strony kształt koła.</param>
        <summary>Rysuje kształt koła zdefiniowane przez określony przez parę współrzędnych, szerokości, wysokości i dwóch wierszy promieniowe elipsy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje kształt koła zdefiniowane przez łuku elipsy i dwóch wierszy promieniowe przecinających z punktami końcowymi łuku. Elipsy jest definiowana za pomocą prostokątem opisanego przez `x`, `y`, `width`, i `height` parametrów. Kształt koła składa się z dwóch wierszy promieniowe zdefiniowane przez `startAngle` i `sweepAngle` parametry i łuk między przecięcia tych wierszy promieniowe z elipsy.  
  
 Jeśli `sweepAngle` parametru jest większa niż 360 lub mniej niż-360 stopni, jest traktowana tak, jakby to był 360 lub stopni-360 odpowiednio.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy położenie i rozmiar prostokąt zakresem pełną elipsy.  
  
-   Określa kąt, w którym należy uruchomić rysowania (względem osi x) i za pośrednictwem do rysowania (zarówno w prawo).  
  
-   Rysuje segmentu kołowego na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#76)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#76)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#76)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawPolygon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje wielokąt zdefiniowane przez tablicę <see cref="T:System.Drawing.Point" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawPolygon">
      <MemberSignature Language="C#" Value="public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPolygon(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPolygon(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl wielokąta.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.Point" /> struktur reprezentujących wierzchołki wielokąta.</param>
        <summary>Rysuje wielokąt zdefiniowane przez tablicę <see cref="T:System.Drawing.Point" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie pary dwóch kolejnych punktów w tablicy określa bok wielokąta. Ponadto jeśli ostatni punkt i pierwszy punkt tablicy nie pokrywają się, określają ostatniej części wielokąta.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy tablicę siedmiu punkty wierzchołki wielokąta.  
  
-   Rysuje wielokąta na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#78)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#78)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#78)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPolygon">
      <MemberSignature Language="C#" Value="public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPolygon(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPolygon(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl wielokąta.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur reprezentujących wierzchołki wielokąta.</param>
        <summary>Rysuje wielokąt zdefiniowane przez tablicę <see cref="T:System.Drawing.PointF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie pary dwóch kolejnych punktów w tablicy określa bok wielokąta. Ponadto jeśli ostatni punkt i pierwszy punkt tablicy nie pokrywają się, określają ostatniej części wielokąta.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy tablicę siedmiu punkty wierzchołki wielokąta.  
  
-   Rysuje wielokąta na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#77)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#77)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#77)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawRectangle">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje prostokąt określony przez parę współrzędnych, szerokość i wysokość.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="pen">A <see cref="T:System.Drawing.Pen" /> Określa kolor, szerokość i Styl krawędzi prostokąta.</param>
        <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> strukturę, która reprezentuje prostokąta do rysowania.</param>
        <summary>Rysuje prostokąt określony przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informacje na temat do rysowania <xref:System.Drawing.RectangleF>, zobacz <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy prostokąt.  
  
-   Rysuje prostokąt na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#79)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#79)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#79)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, int x, int y, int width, int height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i Styl krawędzi prostokąta.</param>
        <param name="x">Współrzędna x górnego lewego rogu prostokąta do rysowania.</param>
        <param name="y">Współrzędna y górnego lewego rogu prostokąta do rysowania.</param>
        <param name="width">Szerokość prostokąta do rysowania.</param>
        <param name="height">Wysokość prostokąta do rysowania.</param>
        <summary>Rysuje prostokąt określony przez parę współrzędnych, szerokość i wysokość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informacje na temat do rysowania <xref:System.Drawing.RectangleF>, zobacz <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy położenie i rozmiar prostokąta.  
  
-   Rysuje prostokąt na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#80)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#80)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#80)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, float x, float y, float width, float height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">A <see cref="T:System.Drawing.Pen" /> Określa kolor, szerokość i Styl krawędzi prostokąta.</param>
        <param name="x">Współrzędna x górnego lewego rogu prostokąta do rysowania.</param>
        <param name="y">Współrzędna y górnego lewego rogu prostokąta do rysowania.</param>
        <param name="width">Szerokość prostokąta do rysowania.</param>
        <param name="height">Wysokość prostokąta do rysowania.</param>
        <summary>Rysuje prostokąt określony przez parę współrzędnych, szerokość i wysokość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informacje na temat do rysowania <xref:System.Drawing.RectangleF>, zobacz <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy położenie i rozmiar prostokąta.  
  
-   Rysuje prostokąt na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#81)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#81)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#81)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawRectangles">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje szereg prostokąty określony przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawRectangles">
      <MemberSignature Language="C#" Value="public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.Rectangle[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangles(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.Rectangle[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangles(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Rectangle&gt; ^ rects);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rects" Type="System.Drawing.Rectangle[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl obramowania prostokątów.</param>
        <param name="rects">Tablica <see cref="T:System.Drawing.Rectangle" /> struktur reprezentujących prostokąty do rysowania.</param>
        <summary>Rysuje szereg prostokąty określony przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy tablicę trzy prostokąty.  
  
-   Rysuje prostokątów do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#82)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#82)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="rects" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="rects" /> jest tablicą o zerowej długości.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangles">
      <MemberSignature Language="C#" Value="public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.RectangleF[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangles(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangles(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::RectangleF&gt; ^ rects);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rects" Type="System.Drawing.RectangleF[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> które określa kolor, szerokość i styl obramowania prostokątów.</param>
        <param name="rects">Tablica <see cref="T:System.Drawing.RectangleF" /> struktur reprezentujących prostokąty do rysowania.</param>
        <summary>Rysuje szereg prostokąty określony przez <see cref="T:System.Drawing.RectangleF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióra.  
  
-   Tworzy tablicę trzy prostokąty.  
  
-   Rysuje prostokątów do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#83)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#83)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#83)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="rects" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="rects" /> jest tablicą o zerowej długości.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawString">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje ciągu określonego tekstu w określonej lokalizacji z określonym <see cref="T:System.Drawing.Brush" /> i <see cref="T:System.Drawing.Font" /> obiektów.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::PointF point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg do rysowania.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> definiuje format tekstu ciągu.</param>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> określający, kolor i tekstury narysowanego tekstu.</param>
        <param name="point">
          <see cref="T:System.Drawing.PointF" /> Struktura, która określa lewego górnego rogu narysowanego tekstu.</param>
        <summary>Rysuje ciągu określonego tekstu w określonej lokalizacji z określonym <see cref="T:System.Drawing.Brush" /> i <see cref="T:System.Drawing.Font" /> obiektów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg tekstowy do rysowania.  
  
-   Określa kolor czcionki jako Arial (16pt).  
  
-   Tworzy stałej, czarny pędzla do rysowania z.  
  
-   Tworzy punkt dla lewego górnego rogu, w którym ma zostać narysowany tekst.  
  
-   Rysuje ciąg do ekranu przy użyciu czcionki, pędzla i punktem docelowym.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#84)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#84)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#84)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="s" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF layoutRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::RectangleF layoutRectangle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="layoutRectangle" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg do rysowania.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> definiuje format tekstu ciągu.</param>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> określający, kolor i tekstury narysowanego tekstu.</param>
        <param name="layoutRectangle">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa lokalizację narysowanego tekstu.</param>
        <summary>Rysuje ciągu określonego tekstu w prostokącie określonego z określonym <see cref="T:System.Drawing.Brush" /> i <see cref="T:System.Drawing.Font" /> obiektów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tekst reprezentowany przez `s` parametr jest rysowane wewnątrz prostokąta reprezentowany przez `layoutRectangle` parametru. Jeśli tekst nie mieści się w prostokącie, zostanie obcięta w najbliższej programu word. Dalsze manipulować jak ciąg jest rysowane wewnątrz Użyj prostokąt <xref:System.Drawing.Graphics.DrawString%2A> przeciążenia, które przyjmuje <xref:System.Drawing.StringFormat>.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg tekstowy do rysowania.  
  
-   Określa kolor czcionki jako Arial (16pt).  
  
-   Tworzy stałej, czarny pędzla do rysowania z.  
  
-   Tworzy prostokąt, w którym ma zostać narysowany tekst.  
  
-   Rysuje prostokąt na ekranie.  
  
-   Rysuje ciąg do ekranu przy użyciu czcionek, pędzla i docelowy prostokąt.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#86)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#86)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#86)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="s" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.PointF point, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::PointF point, System::Drawing::StringFormat ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg do rysowania.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> definiuje format tekstu ciągu.</param>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> określający, kolor i tekstury narysowanego tekstu.</param>
        <param name="point">
          <see cref="T:System.Drawing.PointF" /> Struktura, która określa lewego górnego rogu narysowanego tekstu.</param>
        <param name="format">
          <see cref="T:System.Drawing.StringFormat" /> Określa, że atrybuty formatowania, takie jak wiersz odstępów i wyrównania, które są stosowane do narysowanego tekstu.</param>
        <summary>Rysuje ciągu określonego tekstu w określonej lokalizacji z określonym <see cref="T:System.Drawing.Brush" /> i <see cref="T:System.Drawing.Font" /> obiektów przy użyciu atrybutów formatowania określonego <see cref="T:System.Drawing.StringFormat" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg tekstowy do rysowania.  
  
-   Określa kolor czcionki jako Arial (16pt).  
  
-   Tworzy stałej, czarny pędzla do rysowania z.  
  
-   Tworzy punkt dla lewego górnego rogu, w którym ma zostać narysowany tekst.  
  
-   Ustawia format ciągu do rysowania w pionie.  
  
-   Rysuje ekranu przy użyciu czcionek, pędzla, punkt docelowy i formatu ciągu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#85)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#85)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#85)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="s" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF layoutRectangle, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::RectangleF layoutRectangle, System::Drawing::StringFormat ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="layoutRectangle" Type="System.Drawing.RectangleF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg do rysowania.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> definiuje format tekstu ciągu.</param>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> określający, kolor i tekstury narysowanego tekstu.</param>
        <param name="layoutRectangle">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa lokalizację narysowanego tekstu.</param>
        <param name="format">
          <see cref="T:System.Drawing.StringFormat" /> Określa, że atrybuty formatowania, takie jak wiersz odstępów i wyrównania, które są stosowane do narysowanego tekstu.</param>
        <summary>Rysuje ciągu określonego tekstu w prostokącie określonego z określonym <see cref="T:System.Drawing.Brush" /> i <see cref="T:System.Drawing.Font" /> obiektów przy użyciu atrybutów formatowania określonego <see cref="T:System.Drawing.StringFormat" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tekst reprezentowany przez `s` parametr jest rysowane wewnątrz prostokąta reprezentowany przez `layoutRectangle` parametru. Jeśli tekst nie mieści się w prostokącie, zostanie obcięta w najbliższej word, chyba że określono inaczej `format` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg tekstowy do rysowania.  
  
-   Określa kolor czcionki jako Arial (16pt).  
  
-   Tworzy stałej, czarny pędzla do rysowania z.  
  
-   Tworzy prostokąt, w którym ma zostać narysowany tekst.  
  
-   Rysuje prostokąt na ekranie.  
  
-   Ustawia format ciągu do środka go w prostokącie.  
  
-   Rysuje ciąg do ekranu przy użyciu czcionek, pędzla i docelowy prostokąt.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#87)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#87)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="s" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, float x, float y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg do rysowania.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> definiuje format tekstu ciągu.</param>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> określający, kolor i tekstury narysowanego tekstu.</param>
        <param name="x">Współrzędna x górnego lewego rogu narysowanego tekstu.</param>
        <param name="y">Współrzędna y górnego lewego rogu narysowanego tekstu.</param>
        <summary>Rysuje ciągu określonego tekstu w określonej lokalizacji z określonym <see cref="T:System.Drawing.Brush" /> i <see cref="T:System.Drawing.Font" /> obiektów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg tekstowy do rysowania.  
  
-   Określa kolor czcionki jako Arial (16pt).  
  
-   Tworzy stałe czarny pędzla do rysowania z.  
  
-   Tworzy punkt dla lewego górnego rogu, w którym ma zostać narysowany tekst.  
  
-   Rysuje ciąg do ekranu przy użyciu czcionki, pędzla i punktem docelowym.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#88)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#88)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#88)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="s" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, float32 x, float32 y, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, float x, float y, System::Drawing::StringFormat ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg do rysowania.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> definiuje format tekstu ciągu.</param>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> określający, kolor i tekstury narysowanego tekstu.</param>
        <param name="x">Współrzędna x górnego lewego rogu narysowanego tekstu.</param>
        <param name="y">Współrzędna y górnego lewego rogu narysowanego tekstu.</param>
        <param name="format">
          <see cref="T:System.Drawing.StringFormat" /> Określa, że atrybuty formatowania, takie jak wiersz odstępów i wyrównania, które są stosowane do narysowanego tekstu.</param>
        <summary>Rysuje ciągu określonego tekstu w określonej lokalizacji z określonym <see cref="T:System.Drawing.Brush" /> i <see cref="T:System.Drawing.Font" /> obiektów przy użyciu atrybutów formatowania określonego <see cref="T:System.Drawing.StringFormat" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg tekstowy do rysowania.  
  
-   Określa kolor czcionki jako Arial (16pt).  
  
-   Tworzy stałej, czarny pędzla do rysowania z.  
  
-   Tworzy współrzędne punktu dla lewego górnego rogu, w którym ma zostać narysowany tekst.  
  
-   Ustawia format ciągu do rysowania w pionie  
  
-   Rysuje ekranu przy użyciu czcionek, pędzla, punkt docelowy i formatu ciągu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#89)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#89)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#89)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="s" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="EndContainer">
      <MemberSignature Language="C#" Value="public void EndContainer (System.Drawing.Drawing2D.GraphicsContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndContainer(class System.Drawing.Drawing2D.GraphicsContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndContainer (container As GraphicsContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndContainer(System::Drawing::Drawing2D::GraphicsContainer ^ container);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.Drawing.Drawing2D.GraphicsContainer" />
      </Parameters>
      <Docs>
        <param name="container">
          <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> reprezentujący kontenera, które przywraca tej metody.</param>
        <summary>Zamyka bieżący kontener grafiki i przywraca stan to <see cref="T:System.Drawing.Graphics" /> stan zapisane przez wywołanie do <see cref="M:System.Drawing.Graphics.BeginContainer" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej metody za pomocą <xref:System.Drawing.Graphics.BeginContainer%2A> metodę w celu utworzenia zagnieżdżonych kontenerów grafiki. Kontenery grafiki zachowany stan grafiki, takie jak przekształcania, obszar przycinania i właściwości renderowania.  
  
 Podczas wywoływania <xref:System.Drawing.Graphics.BeginContainer%2A> metody <xref:System.Drawing.Graphics>, blok informacji, która przechowuje stan <xref:System.Drawing.Graphics> jest umieszczany na stosie. <xref:System.Drawing.Graphics.BeginContainer%2A> Metoda zwraca <xref:System.Drawing.Drawing2D.GraphicsContainer> identyfikujący ten blok informacji. Podczas przekazywania identyfikujące obiektu <xref:System.Drawing.Graphics.EndContainer%2A> metoda, zostanie usunięta ze stosu blok informacji i służy do przywracania <xref:System.Drawing.Graphics> do stanu, istniał w momencie <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody.  
  
 Mogą być zagnieżdżone kontenery; oznacza to, że można wywołać <xref:System.Drawing.Graphics.BeginContainer%2A> metody kilka razy przed wywołaniem <xref:System.Drawing.Graphics.EndContainer%2A> metody. Zawsze należy wywołać <xref:System.Drawing.Graphics.BeginContainer%2A> metody blok informacji jest umieszczany na stosie i pojawi się <xref:System.Drawing.Drawing2D.GraphicsContainer> bloku informacji. Podczas przekazywania jednego z tych obiektów do <xref:System.Drawing.Graphics.EndContainer%2A> metody <xref:System.Drawing.Graphics> jest zwracana do stanu, istniał w momencie <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody, zwrócona który określonego <xref:System.Drawing.Drawing2D.GraphicsContainer>. Blok informacji umieszczone na stosie przez to <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody jest usuwana ze stosu, a wszystkie bloki informacji dotyczącymi ten stos po <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody, które również zostaną usunięte.  
  
 Wywołuje się <xref:System.Drawing.Graphics.Save%2A> metody bloków informacyjnych miejsce na tym samym stosie jako wywołania <xref:System.Drawing.Graphics.BeginContainer%2A> metody. Podobnie jak <xref:System.Drawing.Graphics.EndContainer%2A> wywołanie metody łączyć się z <xref:System.Drawing.Graphics.BeginContainer%2A> wywołanie metody <xref:System.Drawing.Graphics.Restore%2A> wywołanie metody łączyć się z <xref:System.Drawing.Graphics.Save%2A> wywołania metody.  
  
 Podczas wywoływania <xref:System.Drawing.Graphics.EndContainer%2A> metody wszystkich bloków informacyjnych umieszczone na stosie (przez <xref:System.Drawing.Graphics.Save%2A> metody lub <xref:System.Drawing.Graphics.BeginContainer%2A> — metoda) po odpowiedniego wywołania <xref:System.Drawing.Graphics.BeginContainer%2A> metody zostaną usunięte ze stosu. Podobnie podczas wywoływania <xref:System.Drawing.Graphics.Restore%2A> metody wszystkich bloków informacyjnych umieszczone na stosie (przez <xref:System.Drawing.Graphics.Save%2A> — metoda lub <xref:System.Drawing.Graphics.BeginContainer%2A> — metoda) po odpowiedniego wywołania <xref:System.Drawing.Graphics.Save%2A> metody zostaną usunięte ze stosu.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Zostanie otwarty nowy kontener grafiki i zapisuje starego kontenera.  
  
-   Wykonuje translację współrzędnych świata w kontenerze.  
  
-   Wypełnia czerwonym prostokątem (translacji współrzędne) nowego kontenera.  
  
-   Zamyka nowego kontenera i przywraca zapisane kontenera.  
  
-   Wypełnia zielony prostokąt (niezrozumiały współrzędne) zapisane kontenera.  
  
 Wynik jest zielony prostokąt overlies czerwony prostokąt ten sam rozmiar.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#90)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#90)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#90)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnumerateMetafile">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, metody wywołania zwrotnego do wyświetlenia w określonym punkcie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.Point" /> Struktura, która określa lokalizację, w lewym górnym rogu narysowanego metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, metody wywołania zwrotnego do wyświetlenia w określonym punkcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy formularz zawierający <xref:System.Drawing.Imaging.Metafile> jako jeden z jego prywatne elementy członkowskie. <xref:System.Windows.Forms.Control.OnPaint%2A> Wywołania metody <xref:System.Drawing.Graphics.EnumerateMetafile%2A>, które wywołuje formularza `MetafileCallback` metody dla każdego rekordu w metaplik. `MetafileCallback` Wywołania metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody. Zwróć uwagę, że `MetafileCallback` metody odbiera dane rekordu jako <xref:System.IntPtr>, ale <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda oczekuje danych rekordu jako tablicę bajtów. Wywołanie <xref:System.Runtime.InteropServices.Marshal.Copy%2A> kopiuje dane rekordu do tablicy typu byte, dzięki czemu mogą zostać przekazane do <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>.  
  
 [!code-csharp[System.Drawing.Graphics.EnumerateMetafile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Graphics.EnumerateMetafile/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Graphics.EnumerateMetafile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Graphics.EnumerateMetafile/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok, określająca rozmiar i położenie narysowanego metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, metody wywołania zwrotnego do wyświetlenia w określonym równoległobok.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.PointF" /> Struktura, która określa lokalizację, w lewym górnym rogu narysowanego metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, metody wywołania zwrotnego do wyświetlenia w określonym punkcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok, określająca rozmiar i położenie narysowanego metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, metody wywołania zwrotnego do wyświetlenia w określonym równoległobok.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.PointF> lewym górnym, prawym górnym i lewym dolnym rogu równoległobok reprezentują struktury. Punkt czwarty ekstrapolacji jest pierwsze trzy do utworzenia równoległobok. Narysowanego metaplik jest skalowany i ścięty, aby dopasować równoległobok.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar narysowanego metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <summary>Wysyła rekordy z określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, metody wywołania zwrotnego do wyświetlania na prostokąt określony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa lokalizację i rozmiar narysowanego metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <summary>Wysyła rekordy z określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, metody wywołania zwrotnego do wyświetlania na prostokąt określony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.Point" /> Struktura, która określa lokalizację, w lewym górnym rogu narysowanego metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, która jest wymagana, ale jest ignorowane. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, metody wywołania zwrotnego do wyświetlenia w określonym punkcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok, określająca rozmiar i położenie narysowanego metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, która jest wymagana, ale jest ignorowane. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, metody wywołania zwrotnego do wyświetlenia w określonym równoległobok.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.PointF" /> Struktura, która określa lokalizację, w lewym górnym rogu narysowanego metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, która jest wymagana, ale jest ignorowane. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, metody wywołania zwrotnego do wyświetlenia w określonym punkcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok, określająca rozmiar i położenie narysowanego metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, która jest wymagana, ale jest ignorowane. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, metody wywołania zwrotnego do wyświetlenia w określonym równoległobok.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.PointF> lewym górnym, prawym górnym i lewym dolnym rogu równoległobok reprezentują struktury. Punkt czwarty ekstrapolacji jest pierwsze trzy do utworzenia równoległobok. Narysowanego metaplik jest skalowany i ścięty, aby dopasować równoległobok.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar narysowanego metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, która jest wymagana, ale jest ignorowane. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy z określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, metody wywołania zwrotnego do wyświetlania na prostokąt określony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa lokalizację i rozmiar narysowanego metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, która jest wymagana, ale jest ignorowane. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy z określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, metody wywołania zwrotnego do wyświetlania na prostokąt określony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.Point" /> Struktura, która określa lokalizację, w lewym górnym rogu narysowanego metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, która jest wymagana, ale jest ignorowane. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> informacje o atrybutach obrazu narysowanego obrazu, który określa.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, co w czasie, metody wywołania zwrotnego do wyświetlenia w określonym punkcie przy użyciu określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.Point" /> Struktura, która określa lokalizację, w lewym górnym rogu narysowanego metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część metaplik, względem lewego górnego rogu, aby narysować.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostkę miary używany do określenia część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <summary>Wysyła rekordy w wybranej prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, metody wywołania zwrotnego do wyświetlenia w określonym punkcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok, określająca rozmiar i położenie narysowanego metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, która jest wymagana, ale jest ignorowane. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> informacje o atrybutach obrazu narysowanego obrazu, który określa.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, co w czasie, metody wywołania zwrotnego do wyświetlenia w określonym równoległobok przy użyciu określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.Point> lewym górnym, prawym górnym i lewym dolnym rogu równoległobok reprezentują struktury. Punkt czwarty ekstrapolacji jest pierwsze trzy do utworzenia równoległobok. Narysowanego metaplik jest skalowany i ścięty, aby dopasować równoległobok.  
  
 Atrybuty obrazu określone przez `imageAttr` zastąp parametr określone, gdy zostało zapisane metaplik.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok, określająca rozmiar i położenie narysowanego metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część metaplik, względem lewego górnego rogu, aby narysować.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostkę miary używany do określenia część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <summary>Wysyła rekordy w wybranej prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, metody wywołania zwrotnego do wyświetlenia w określonym równoległobok.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.Point> lewym górnym, prawym górnym i lewym dolnym rogu równoległobok reprezentują struktury. Punkt czwarty ekstrapolacji jest pierwsze trzy do utworzenia równoległobok. Narysowanego metaplik jest skalowany i ścięty, aby dopasować równoległobok.  
  
 Wszelkie rysowania odbywa się poza prostokąt określony przez `srcRect` parametru jest ignorowana.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.PointF" /> Struktura, która określa lokalizację, w lewym górnym rogu narysowanego metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, która jest wymagana, ale jest ignorowane. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> informacje o atrybutach obrazu narysowanego obrazu, który określa.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, co w czasie, metody wywołania zwrotnego do wyświetlenia w określonym punkcie przy użyciu określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego musi to zrobić przez wywołanie metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
 Atrybuty obrazu określone przez `imageAttr` zastąp parametr określone, gdy zostało zapisane metaplik.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.PointF" /> Struktura, która określa lokalizację, w lewym górnym rogu narysowanego metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część metaplik, względem lewego górnego rogu, aby narysować.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostkę miary używany do określenia część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <summary>Wysyła rekordy w wybranej prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, metody wywołania zwrotnego do wyświetlenia w określonym punkcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
 Wszelkie rysowania odbywa się poza prostokąt określony przez `srcRect` parametru jest ignorowana.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok, określająca rozmiar i położenie narysowanego metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, która jest wymagana, ale jest ignorowane. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> informacje o atrybutach obrazu narysowanego obrazu, który określa.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, co w czasie, metody wywołania zwrotnego do wyświetlenia w określonym równoległobok przy użyciu określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.PointF> lewym górnym, prawym górnym i lewym dolnym rogu równoległobok reprezentują struktury. Punkt czwarty ekstrapolacji jest pierwsze trzy do utworzenia równoległobok. Narysowanego metaplik jest skalowany i ścięty, aby dopasować równoległobok.  
  
 Atrybuty obrazu określone przez `imageAttr` zastąp parametr określone, gdy zostało zapisane metaplik.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok, określająca rozmiar i położenie narysowanego metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> struktury, który określa część metaplik, względem lewego górnego rogu, aby narysować.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostkę miary używany do określenia część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <summary>Wysyła rekordy w wybranej prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, metody wywołania zwrotnego do wyświetlenia w określonym równoległobok.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.Point> lewym górnym, prawym górnym i lewym dolnym rogu równoległobok reprezentują struktury. Punkt czwarty ekstrapolacji jest pierwsze trzy do utworzenia równoległobok. Narysowanego metaplik jest skalowany i ścięty, aby dopasować równoległobok.  
  
 Wszelkie rysowania odbywa się poza prostokąt określony przez `srcRect` parametru jest ignorowana.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar narysowanego metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, która jest wymagana, ale jest ignorowane. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> informacje o atrybutach obrazu narysowanego obrazu, który określa.</param>
        <summary>Wysyła rekordy z określonym <see cref="T:System.Drawing.Imaging.Metafile" />, co w czasie, metody wywołania zwrotnego do wyświetlenia w prostokącie określonego przy użyciu określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
 Atrybuty obrazu określone przez `imageAttr` zastąp parametr określone, gdy zostało zapisane metaplik.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar narysowanego metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część metaplik, względem lewego górnego rogu, aby narysować.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostkę miary używany do określenia część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <summary>Wysyła rekordy wybranych prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, metody wywołania zwrotnego do wyświetlania na prostokąt określony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
 Wszelkie rysowania odbywa się poza prostokąt określony przez `srcRect` parametru jest ignorowana.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa lokalizację i rozmiar narysowanego metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, która jest wymagana, ale jest ignorowane. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> informacje o atrybutach obrazu narysowanego obrazu, który określa.</param>
        <summary>Wysyła rekordy z określonym <see cref="T:System.Drawing.Imaging.Metafile" />, co w czasie, metody wywołania zwrotnego do wyświetlenia w prostokącie określonego przy użyciu określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
 Atrybuty obrazu określone przez `imageAttr` zastąp parametr określone, gdy zostało zapisane metaplik.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa lokalizację i rozmiar narysowanego metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część metaplik, względem lewego górnego rogu, aby narysować.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostkę miary używany do określenia część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <summary>Wysyła rekordy wybranych prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, metody wywołania zwrotnego do wyświetlania na prostokąt określony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
 Wszelkie rysowania odbywa się poza prostokąt określony przez `srcRect` parametru jest ignorowana.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.Point" /> Struktura, która określa lokalizację, w lewym górnym rogu narysowanego metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część metaplik, względem lewego górnego rogu, aby narysować.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostkę miary używany do określenia część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, która jest wymagana, ale jest ignorowane. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy w wybranej prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, metody wywołania zwrotnego do wyświetlenia w określonym punkcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok, określająca rozmiar i położenie narysowanego metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część metaplik, względem lewego górnego rogu, aby narysować.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostkę miary używany do określenia część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, która jest wymagana, ale jest ignorowane. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy w wybranej prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, metody wywołania zwrotnego do wyświetlenia w określonym równoległobok.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.Point> lewym górnym, prawym górnym i lewym dolnym rogu równoległobok reprezentują struktury. Punkt czwarty ekstrapolacji jest pierwsze trzy do utworzenia równoległobok. Narysowanego metaplik jest skalowany i ścięty, aby dopasować równoległobok.  
  
 Wszelkie rysowania odbywa się poza prostokąt określony przez `srcRect` parametru jest ignorowana.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.PointF" /> Struktura, która określa lokalizację, w lewym górnym rogu narysowanego metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część metaplik, względem lewego górnego rogu, aby narysować.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostkę miary używany do określenia część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, która jest wymagana, ale jest ignorowane. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy w wybranej prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, metody wywołania zwrotnego do wyświetlenia w określonym punkcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
 Wszelkie rysowania odbywa się poza prostokąt określony przez `srcRect` parametru jest ignorowana.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok, określająca rozmiar i położenie narysowanego metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część metaplik, względem lewego górnego rogu, aby narysować.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostkę miary używany do określenia część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, która jest wymagana, ale jest ignorowane. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy w wybranej prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, metody wywołania zwrotnego do wyświetlenia w określonym równoległobok.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.PointF> lewym górnym, prawym górnym i lewym dolnym rogu równoległobok reprezentują struktury. Punkt czwarty ekstrapolacji jest pierwsze trzy do utworzenia równoległobok. Narysowanego metaplik jest skalowany i ścięty, aby dopasować równoległobok.  
  
 Wszelkie rysowania odbywa się poza prostokąt określony przez `srcRect` parametru jest ignorowana.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar narysowanego metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część metaplik, względem lewego górnego rogu, aby narysować.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostkę miary używany do określenia część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, która jest wymagana, ale jest ignorowane. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy wybranych prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, metody wywołania zwrotnego do wyświetlania na prostokąt określony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
 Wszelkie rysowania odbywa się poza prostokąt określony przez `srcRect` parametru jest ignorowana.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa lokalizację i rozmiar narysowanego metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część metaplik, względem lewego górnego rogu, aby narysować.</param>
        <param name="srcUnit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostkę miary używany do określenia część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, która jest wymagana, ale jest ignorowane. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy wybranych prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, metody wywołania zwrotnego do wyświetlania na prostokąt określony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego`callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
 Wszelkie rysowania odbywa się poza prostokąt określony przez `srcRect` parametru jest ignorowana.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.Point" /> Struktura, która określa lokalizację, w lewym górnym rogu narysowanego metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część metaplik, względem lewego górnego rogu, aby narysować.</param>
        <param name="unit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostkę miary używany do określenia część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, która jest wymagana, ale jest ignorowane. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> informacje o atrybutach obrazu narysowanego obrazu, który określa.</param>
        <summary>Wysyła rekordy w wybranej prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, co w czasie, metody wywołania zwrotnego do wyświetlenia w określonym punkcie przy użyciu określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok, określająca rozmiar i położenie narysowanego metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część metaplik, względem lewego górnego rogu, aby narysować.</param>
        <param name="unit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostkę miary używany do określenia część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, która jest wymagana, ale jest ignorowane. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> informacje o atrybutach obrazu narysowanego obrazu, który określa.</param>
        <summary>Wysyła rekordy w wybranej prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, co w czasie, metody wywołania zwrotnego do wyświetlenia w określonym równoległobok przy użyciu określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.Point> lewym górnym, prawym górnym i lewym dolnym rogu równoległobok reprezentują struktury. Punkt czwarty ekstrapolacji jest pierwsze trzy do utworzenia równoległobok. Narysowanego metaplik jest skalowany i ścięty, aby dopasować równoległobok.  
  
 Wszelkie rysowania odbywa się poza prostokąt określony przez `srcRect` parametru jest ignorowana.  
  
 Atrybuty obrazu określone przez `imageAttr` zastąp parametr określone, gdy zostało zapisane metaplik.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.PointF" /> Struktura, która określa lokalizację, w lewym górnym rogu narysowanego metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część metaplik, względem lewego górnego rogu, aby narysować.</param>
        <param name="unit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostkę miary używany do określenia część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, która jest wymagana, ale jest ignorowane. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> informacje o atrybutach obrazu narysowanego obrazu, który określa.</param>
        <summary>Wysyła rekordy w wybranej prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, co w czasie, metody wywołania zwrotnego do wyświetlenia w określonym punkcie przy użyciu określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
 Wszelkie rysowania odbywa się poza prostokąt określony przez `srcRect` parametru jest ignorowana.  
  
 Atrybuty obrazu określone przez `imageAttr` zastąp parametr określone, gdy zostało zapisane metaplik.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok, określająca rozmiar i położenie narysowanego metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część metaplik, względem lewego górnego rogu, aby narysować.</param>
        <param name="unit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostkę miary używany do określenia część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, która jest wymagana, ale jest ignorowane. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> informacje o atrybutach obrazu narysowanego obrazu, który określa.</param>
        <summary>Wysyła rekordy w wybranej prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, co w czasie, metody wywołania zwrotnego do wyświetlenia w określonym równoległobok przy użyciu określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.PointF> lewym górnym, prawym górnym i lewym dolnym rogu równoległobok reprezentują struktury. Punkt czwarty ekstrapolacji jest pierwsze trzy do utworzenia równoległobok. Narysowanego metaplik jest skalowany i ścięty, aby dopasować równoległobok.  
  
 Wszelkie rysowania odbywa się poza prostokąt określony przez `srcRect` parametru jest ignorowana.  
  
 Atrybuty obrazu określone przez `imageAttr` zastąp parametr określone, gdy zostało zapisane metaplik.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar narysowanego metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część metaplik, względem lewego górnego rogu, aby narysować.</param>
        <param name="unit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostkę miary używany do określenia część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, która jest wymagana, ale jest ignorowane. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> informacje o atrybutach obrazu narysowanego obrazu, który określa.</param>
        <summary>Wysyła rekordy wybranych prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, co w czasie, metody wywołania zwrotnego do wyświetlenia w prostokącie określonego przy użyciu określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
 Wszelkie rysowania odbywa się poza prostokąt określony przez `srcRect` parametru jest ignorowana.  
  
 Atrybuty obrazu określone przez `imageAttr` zastąp parametr określone, gdy zostało zapisane metaplik.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> Aby wyliczyć.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa lokalizację i rozmiar narysowanego metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część metaplik, względem lewego górnego rogu, aby narysować.</param>
        <param name="unit">Element członkowski <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie określający jednostkę miary używany do określenia część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, która jest wymagana, ale jest ignorowane. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> informacje o atrybutach obrazu narysowanego obrazu, który określa.</param>
        <summary>Wysyła rekordy wybranych prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, co w czasie, metody wywołania zwrotnego do wyświetlenia w prostokącie określonego przy użyciu określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonej metaplik. Każdy rekord indywidualnie są wysyłane do określonego przez metodę wywołania zwrotnego `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody "Odtwarzanie", lub rysowania, rekord.  
  
 Wywołuje metodę wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody konkretnym <xref:System.Drawing.Imaging.Metafile> który wyliczany.  
  
 Wszelkie rysowania odbywa się poza prostokąt określony przez `srcRect` parametru jest ignorowana.  
  
 Atrybuty obrazu określone przez `imageAttr` zastąp parametr określone, gdy zostało zapisane metaplik.  
  
   
  
## Examples  
 Na przykład kod, zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExcludeClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aktualizuje obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> do wykluczenia z zakresu określonego przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExcludeClip">
      <MemberSignature Language="C#" Value="public void ExcludeClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExcludeClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ExcludeClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExcludeClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExcludeClip(System::Drawing::Rectangle rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa prostokąta do wykluczenia z obszar przycinania.</param>
        <summary>Aktualizuje obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> do wykluczenia z zakresu określonego przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie obejmuje określony przez obszar `rect` parametru z bieżącego obszaru przycinania, a następnie przypisuje wynikowy obszaru do <xref:System.Drawing.Graphics.Clip%2A> właściwości tego <xref:System.Drawing.Graphics>.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy 100 pikseli przy 100 pikseli prostokąt którego lewego górnego rogu współrzędną (100, 100).  
  
-   Tworzy obszar zdefiniowany przez prostokąta.  
  
-   Ustawia obszar przycinania do wykluczenia prostokątny obszar.  
  
-   Wypełnia 300 pikseli przez 300 pikseli prostokąt którego lewego górnego rogu współrzędną (0, 0) z niebieskim pędzla pełnego koloru.  
  
 Wynik jest niebieski prostokąt z obszarem kwadratowy kierunku jego brak prawym dolnym rogu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#92)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#92)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#92)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExcludeClip">
      <MemberSignature Language="C#" Value="public void ExcludeClip (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExcludeClip(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ExcludeClip(System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExcludeClip(System::Drawing::Region ^ region);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region">
          <see cref="T:System.Drawing.Region" /> która określa region do wykluczenia z obszar przycinania.</param>
        <summary>Aktualizuje obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> do wykluczenia z zakresu określonego przez <see cref="T:System.Drawing.Region" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie obejmuje określony przez obszar `region` parametru z bieżącego obszaru przycinania, a następnie przypisuje wynikowy obszaru do <xref:System.Drawing.Graphics.Clip%2A> właściwości tego <xref:System.Drawing.Graphics>.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy 100 pikseli przy 100 pikseli prostokąt którego lewego górnego rogu współrzędną (100, 100).  
  
-   Ustawia obszar przycinania do wykluczenia prostokąta.  
  
-   Wypełnia 300 pikseli przez 300 pikseli prostokąt którego lewego górnego rogu współrzędną (0, 0) z niebieskim pędzla pełnego koloru.  
  
 Wynik jest niebieski prostokąt z obszarem kwadratowy kierunku jego brak prawym dolnym rogu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#91)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#91)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#91)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillClosedCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wypełnia wewnętrznych zamkniętej krzywej kardynalnej krzywej zdefiniowane przez tablicę <see cref="T:System.Drawing.Point" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> Określa charakterystykę wypełnienia.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.Point" /> struktur, które definiują krzywej składanej.</param>
        <summary>Wypełnia wewnętrznych zamkniętej krzywej kardynalnej krzywej zdefiniowane przez tablicę <see cref="T:System.Drawing.Point" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wewnętrznych zamkniętego kardynalnej krzywej składanej, który przechodzi przez każdego punktu w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszego punktu, dodatkowe segmentu jest dodawana z ostatniego punktu do pierwszego punktu, aby je zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.Point> struktury.  
  
 Ta metoda używa domyślnej napięcie 0,5.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pędzla pełnego koloru czerwony.  
  
-   Tworzy tablicę cztery punkty do definiowania krzywej składanej.  
  
-   Wstawia krzywą na ekranie.  
  
 Krzywej ma domyślne napięcie 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#93)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#93)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#93)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> Określa charakterystykę wypełnienia.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które definiują krzywej składanej.</param>
        <summary>Wypełnia wewnętrznych zamkniętej krzywej kardynalnej krzywej zdefiniowane przez tablicę <see cref="T:System.Drawing.PointF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wewnętrznych zamkniętego kardynalnej krzywej składanej, który przechodzi przez każdego punktu w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszego punktu, dodatkowe segmentu jest dodawana z ostatniego punktu do pierwszego punktu, aby je zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.PointF> struktury.  
  
 Ta metoda używa domyślnej napięcie 0,5.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pędzla pełnego koloru czerwony.  
  
-   Tworzy tablicę cztery punkty do definiowania krzywej składanej.  
  
-   Wstawia krzywą na ekranie.  
  
 Krzywej ma domyślne napięcie 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#96)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#96)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#96)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> Określa charakterystykę wypełnienia.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.Point" /> struktur, które definiują krzywej składanej.</param>
        <param name="fillmode">Element członkowski <see cref="T:System.Drawing.Drawing2D.FillMode" /> wyliczenie określające, jak krzywej jest wypełnione.</param>
        <summary>Wypełnia wewnętrznych zamkniętej krzywej kardynalnej krzywej zdefiniowane przez tablicę <see cref="T:System.Drawing.Point" /> struktury przy użyciu trybu określonego wypełnienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wewnętrznych zamkniętego kardynalnej krzywej składanej, który przechodzi przez każdego punktu w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszego punktu, dodatkowe segmentu jest dodawana z ostatniego punktu do pierwszego punktu, aby je zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.Point> struktury.  
  
 Ta metoda używa domyślnej napięcie 0,5.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pędzla pełnego koloru czerwony.  
  
-   Tworzy tablicę cztery punkty do definiowania krzywej składanej.  
  
-   Ustawia tryb wypełniania <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Wstawia krzywą na ekranie.  
  
 Krzywej ma domyślne napięcie 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#94)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#94)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#94)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> Określa charakterystykę wypełnienia.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które definiują krzywej składanej.</param>
        <param name="fillmode">Element członkowski <see cref="T:System.Drawing.Drawing2D.FillMode" /> wyliczenie określające, jak krzywej jest wypełnione.</param>
        <summary>Wypełnia wewnętrznych zamkniętej krzywej kardynalnej krzywej zdefiniowane przez tablicę <see cref="T:System.Drawing.PointF" /> struktury przy użyciu trybu określonego wypełnienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wewnętrznych zamkniętego kardynalnej krzywej składanej, który przechodzi przez każdego punktu w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszego punktu, dodatkowe segmentu jest dodawana z ostatniego punktu do pierwszego punktu, aby je zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.Point> struktury.  
  
 Ta metoda używa domyślnej napięcie 0,5.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pędzla pełnego koloru czerwony.  
  
-   Tworzy tablicę cztery punkty do definiowania krzywej składanej.  
  
-   Ustawia tryb wypełniania <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Wstawia krzywą na ekranie.  
  
 Krzywej ma domyślne napięcie 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#97)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#97)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#97)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode, float tension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> Określa charakterystykę wypełnienia.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.Point" /> struktur, które definiują krzywej składanej.</param>
        <param name="fillmode">Element członkowski <see cref="T:System.Drawing.Drawing2D.FillMode" /> wyliczenie określające, jak krzywej jest wypełnione.</param>
        <param name="tension">Wartość większą lub równą 0.0f, który określa naprężenia krzywej.</param>
        <summary>Wypełnia wewnętrznych zamkniętej krzywej kardynalnej krzywej zdefiniowane przez tablicę <see cref="T:System.Drawing.Point" /> struktury przy użyciu trybu określonego wypełnienia i napięcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wewnętrznych zamkniętego kardynalnej krzywej składanej, który przechodzi przez każdego punktu w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszego punktu, dodatkowe segmentu jest dodawana z ostatniego punktu do pierwszego punktu, aby je zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.Point> struktury.  
  
 `tension` Parametr określa kształt krzywej składanej. Jeśli wartość `tension` parametru jest 0.0f, ta metoda pobiera segmenty linii prostej nawiązać punkty. Zazwyczaj `tension` parametr jest mniejsza niż 1,0 f. Wartości na 1,0 f generować nieoczekiwane rezultaty.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pędzla pełnego koloru czerwony.  
  
-   Tworzy tablicę cztery punkty do definiowania krzywej składanej.  
  
-   Ustawia tryb wypełniania <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Ustawia naciągnięcie 1.0.  
  
-   Wstawia krzywą na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#95)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#95)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#95)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode, float tension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">A <see cref="T:System.Drawing.Brush" /> , który określa właściwości wypełnienia.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które definiują krzywej składanej.</param>
        <param name="fillmode">Element członkowski <see cref="T:System.Drawing.Drawing2D.FillMode" /> wyliczenie określające, jak krzywej jest wypełnione.</param>
        <param name="tension">Wartość większą lub równą 0.0f, który określa naprężenia krzywej.</param>
        <summary>Wypełnia wewnętrznych zamkniętej krzywej kardynalnej krzywej zdefiniowane przez tablicę <see cref="T:System.Drawing.PointF" /> struktury przy użyciu trybu określonego wypełnienia i napięcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wewnętrznych zamkniętego kardynalnej krzywej składanej, który przechodzi przez każdego punktu w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszego punktu, dodatkowe segmentu jest dodawana z ostatniego punktu do pierwszego punktu, aby je zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.Point> struktury.  
  
 `tension` Parametr określa kształt krzywej składanej. Jeśli wartość `tension` parametru jest 0.0f, ta metoda pobiera segmenty linii prostej nawiązać punkty. Zazwyczaj `tension` parametr jest mniejsza niż 1,0 f. Wartości na 1,0 f generować nieoczekiwane rezultaty.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pędzla pełnego koloru czerwony.  
  
-   Tworzy tablicę cztery punkty do definiowania krzywej składanej.  
  
-   Ustawia tryb wypełniania <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Ustawia naciągnięcie 1.0.  
  
-   Wstawia krzywą na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#98)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#98)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillEllipse">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wypełnia wewnątrz elipsy zdefiniowane przez prostokąt ograniczający określony przez parę współrzędnych, szerokość i wysokość.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> Określa charakterystykę wypełnienia.</param>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która reprezentuje prostokątem, który definiuje wielokropka.</param>
        <summary>Wypełnia wewnątrz elipsy zdefiniowane przez prostokąt ograniczający określony przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wewnętrznych elipsę z <xref:System.Drawing.Brush>. Elipsy jest definiowana za pomocą prostokątem reprezentowany przez `rect` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pędzla pełnego koloru czerwony.  
  
-   Tworzy prostokąt zakresem elipsy.  
  
-   Wypełnia Wielokropek na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#99)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#99)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#99)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, System::Drawing::RectangleF rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> Określa charakterystykę wypełnienia.</param>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która reprezentuje prostokątem, który definiuje wielokropka.</param>
        <summary>Wypełnia wewnątrz elipsy zdefiniowane przez prostokąt ograniczający określony przez <see cref="T:System.Drawing.RectangleF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wewnętrznych elipsę z <xref:System.Drawing.Brush>. Elipsy jest definiowana za pomocą prostokątem reprezentowany przez `rect` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pędzla pełnego koloru czerwony.  
  
-   Tworzy prostokąt zakresem elipsy.  
  
-   Wypełnia Wielokropek na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#100)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#100)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#100)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, int x, int y, int width, int height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> Określa charakterystykę wypełnienia.</param>
        <param name="x">Współrzędna x górnego lewego rogu prostokątem, który definiuje wielokropka.</param>
        <param name="y">Współrzędna y górnego lewego rogu prostokątem, który definiuje wielokropka.</param>
        <param name="width">Szerokość prostokątem, który definiuje wielokropka.</param>
        <param name="height">Wysokość prostokątem, który definiuje wielokropka.</param>
        <summary>Wypełnia wewnątrz elipsy zdefiniowane przez prostokąt ograniczający określony przez parę współrzędnych, szerokość i wysokość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wewnętrznych elipsę z <xref:System.Drawing.Brush>. Elipsy jest definiowana za pomocą prostokątem reprezentowany przez `x`, `y`, `width`, i `height` parametrów.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pędzla pełnego koloru czerwony.  
  
-   Tworzy lokalizacja i rozmiar prostokąt zakresem elipsy.  
  
-   Wypełnia Wielokropek na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#101)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#101)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#101)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, float x, float y, float width, float height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> Określa charakterystykę wypełnienia.</param>
        <param name="x">Współrzędna x górnego lewego rogu prostokątem, który definiuje wielokropka.</param>
        <param name="y">Współrzędna y górnego lewego rogu prostokątem, który definiuje wielokropka.</param>
        <param name="width">Szerokość prostokątem, który definiuje wielokropka.</param>
        <param name="height">Wysokość prostokątem, który definiuje wielokropka.</param>
        <summary>Wypełnia wewnątrz elipsy zdefiniowane przez prostokąt ograniczający określony przez parę współrzędnych, szerokość i wysokość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wewnętrznych elipsę z <xref:System.Drawing.Brush>. Elipsy jest definiowana za pomocą prostokątem reprezentowany przez `x`, `y`, `width`, i `height` parametrów.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pędzla pełnego koloru czerwony.  
  
-   Tworzy lokalizacja i rozmiar prostokąt zakresem elipsy.  
  
-   Wypełnia Wielokropek na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#102)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#102)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#102)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPath">
      <MemberSignature Language="C#" Value="public void FillPath (System.Drawing.Brush brush, System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPath(class System.Drawing.Brush brush, class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPath(System::Drawing::Brush ^ brush, System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> Określa charakterystykę wypełnienia.</param>
        <param name="path">
          <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> reprezentujący ścieżkę do wypełnienia.</param>
        <summary>Wypełnia wnętrza <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Drawing.Drawing2D.GraphicsPath> składa się z szeregu segmenty linii i krzywych. Jeśli ścieżka reprezentowany przez `path` parametru nie są zamknięte, dodatkowe segmentu jest dodawana z ostatniego punktu do pierwszego punktu, aby zamknąć ścieżkę.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pędzla pełnego koloru czerwony.  
  
-   Tworzy obiekt ścieżki grafiki.  
  
-   Dodaje elipsy do ścieżki grafiki.  
  
-   Wypełnia ścieżki na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#103)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#103)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#103)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="path" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillPie">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wypełnia wewnątrz sekcji kołowego zdefiniowanych przez określony przez parę współrzędnych, szerokości, wysokości i dwóch wierszy promieniowe elipsy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> Określa charakterystykę wypełnienia.</param>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która reprezentuje prostokątem, który definiuje wielokropka, z którego pochodzi sekcji kołowego.</param>
        <param name="startAngle">Kąt w stopniach mierzone wskazówek zegara od osi x do pierwszej strony sekcji kołowego.</param>
        <param name="sweepAngle">Kąt w stopniach wskazówek zegara mierzony z <c>startAngle</c> parametr do drugiej strony sekcji kołowego.</param>
        <summary>Wypełnia wewnątrz sekcji koła zdefiniowane przez elipsy określony przez <see cref="T:System.Drawing.RectangleF" /> struktury i dwóch wierszy promieniowe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wewnątrz sekcji koła zdefiniowane przez łuku elipsy i dwóch wierszy promieniowe przecinających z punktami końcowymi łuku. Elipsy jest zdefiniowana przez prostokątem. Sekcja kołowego składa się z dwóch wierszy promieniowe zdefiniowane przez `startAngle` i `sweepAngle` parametry i łuk między przecięcia tych wierszy promieniowe z elipsy.  
  
 Jeśli `sweepAngle` parametru jest większa niż 360 lub mniej niż-360 stopni, jest traktowana tak, jakby to był 360 lub stopni-360 odpowiednio.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pędzla pełnego koloru czerwony.  
  
-   Tworzy prostokąt zakresem elipsy.  
  
-   Określa kąt początkowy (względem osi x) i kąta odchylenia, (zarówno w prawo).  
  
-   Wypełnia obszaru w kształcie koła elipsy na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#104)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#104)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#104)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> Określa charakterystykę wypełnienia.</param>
        <param name="x">Współrzędna x górnego lewego rogu prostokątem, który definiuje wielokropka, z którego pochodzi sekcji kołowego.</param>
        <param name="y">Współrzędna y górnego lewego rogu prostokątem, który definiuje wielokropka, z którego pochodzi sekcji kołowego.</param>
        <param name="width">Szerokość prostokątem, który definiuje wielokropka, z którego pochodzi sekcji kołowego.</param>
        <param name="height">Wysokość prostokątem, który definiuje wielokropka, z którego pochodzi sekcji kołowego.</param>
        <param name="startAngle">Kąt w stopniach mierzone wskazówek zegara od osi x do pierwszej strony sekcji kołowego.</param>
        <param name="sweepAngle">Kąt w stopniach wskazówek zegara mierzony z <c>startAngle</c> parametr do drugiej strony sekcji kołowego.</param>
        <summary>Wypełnia wewnątrz sekcji kołowego zdefiniowanych przez określony przez parę współrzędnych, szerokości, wysokości i dwóch wierszy promieniowe elipsy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wewnątrz sekcji koła zdefiniowane przez łuku elipsy i dwóch wierszy promieniowe przecinających z punktami końcowymi łuku. Elipsy jest zdefiniowana przez prostokątem. Sekcja kołowego składa się z dwóch wierszy promieniowe zdefiniowane przez `startAngle` i `sweepAngle` parametry i łuk między przecięcia tych wierszy promieniowe z elipsy.  
  
 Jeśli `sweepAngle` parametru jest większa niż 360 lub mniej niż-360 stopni, jest traktowana tak, jakby to był 360 lub stopni-360 odpowiednio.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pędzla pełnego koloru czerwony.  
  
-   Tworzy lokalizacja i rozmiar prostokąt zakresem elipsy.  
  
-   Określa kąt początkowy (względem osi x) i kąta odchylenia, (zarówno w prawo).  
  
-   Wypełnia obszaru w kształcie koła elipsy na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#105)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#105)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#105)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> Określa charakterystykę wypełnienia.</param>
        <param name="x">Współrzędna x górnego lewego rogu prostokątem, który definiuje wielokropka, z którego pochodzi sekcji kołowego.</param>
        <param name="y">Współrzędna y górnego lewego rogu prostokątem, który definiuje wielokropka, z którego pochodzi sekcji kołowego.</param>
        <param name="width">Szerokość prostokątem, który definiuje wielokropka, z którego pochodzi sekcji kołowego.</param>
        <param name="height">Wysokość prostokątem, który definiuje wielokropka, z którego pochodzi sekcji kołowego.</param>
        <param name="startAngle">Kąt w stopniach mierzone wskazówek zegara od osi x do pierwszej strony sekcji kołowego.</param>
        <param name="sweepAngle">Kąt w stopniach wskazówek zegara mierzony z <c>startAngle</c> parametr do drugiej strony sekcji kołowego.</param>
        <summary>Wypełnia wewnątrz sekcji kołowego zdefiniowanych przez określony przez parę współrzędnych, szerokości, wysokości i dwóch wierszy promieniowe elipsy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wewnątrz sekcji koła zdefiniowane przez łuku elipsy i dwóch wierszy promieniowe przecinających z punktami końcowymi łuku. Elipsy jest zdefiniowana przez prostokątem. Sekcja kołowego składa się z dwóch wierszy promieniowe zdefiniowane przez `startAngle` i `sweepAngle` parametry i łuk między przecięcia tych wierszy promieniowe z elipsy.  
  
 Jeśli `sweepAngle` parametru jest większa niż 360 lub mniej niż-360 stopni, jest traktowana tak, jakby to był 360 lub stopni-360 odpowiednio.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pędzla pełnego koloru czerwony.  
  
-   Tworzy lokalizacja i rozmiar prostokąt zakresem elipsy.  
  
-   Określa kąt początkowy (względem osi x) i kąta odchylenia, (zarówno w prawo).  
  
-   Wypełnia obszaru w kształcie koła elipsy na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#106)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#106)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#106)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillPolygon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wypełnia wnętrze wielokąta zdefiniowane przez tablicę o punktów <see cref="T:System.Drawing.Point" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> Określa charakterystykę wypełnienia.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.Point" /> struktur reprezentujących wierzchołki wielokąta w celu wypełnienia.</param>
        <summary>Wypełnia wnętrze wielokąta zdefiniowane przez tablicę o punktów <see cref="T:System.Drawing.Point" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Co dwa kolejne punktów w tablicy Określ bok wielokąta. Ponadto jeśli ostatni punkt i pierwszy punkt nie pokrywają się, określają zamknięcia części wielokąta.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy niebieski pędzla pełnego koloru.  
  
-   Tworzy tablicę siedem punktów do definiowania wielokąta.  
  
-   Wypełnia obszaru wielokątne na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#107)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#107)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#107)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> Określa charakterystykę wypełnienia.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur reprezentujących wierzchołki wielokąta w celu wypełnienia.</param>
        <summary>Wypełnia wnętrze wielokąta zdefiniowane przez tablicę o punktów <see cref="T:System.Drawing.PointF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Co dwa kolejne punktów w tablicy Określ bok wielokąta. Ponadto jeśli ostatni punkt i pierwszy punkt nie pokrywają się, określają zamknięcia części wielokąta.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy niebieski pędzla pełnego koloru.  
  
-   Tworzy tablicę siedem punktów do definiowania wielokąta.  
  
-   Wypełnia obszaru wielokątne na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#109)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#109)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#109)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> Określa charakterystykę wypełnienia.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.Point" /> struktur reprezentujących wierzchołki wielokąta w celu wypełnienia.</param>
        <param name="fillMode">Element członkowski <see cref="T:System.Drawing.Drawing2D.FillMode" /> wyliczenia, która określa styl wypełnienia.</param>
        <summary>Wypełnia wnętrze wielokąta zdefiniowane przez tablicę o punktów <see cref="T:System.Drawing.Point" /> struktury przy użyciu trybu określonego wypełnienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Co dwa kolejne punktów w tablicy Określ bok wielokąta. Ponadto jeśli ostatni punkt i pierwszy punkt nie pokrywają się, określają zamknięcia części wielokąta.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy niebieski pędzla pełnego koloru.  
  
-   Tworzy tablicę siedem punktów do definiowania wielokąta.  
  
-   Ustawia tryb wypełniania <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Wypełnia obszaru wielokątne na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#108)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#108)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#108)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> Określa charakterystykę wypełnienia.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur reprezentujących wierzchołki wielokąta w celu wypełnienia.</param>
        <param name="fillMode">Element członkowski <see cref="T:System.Drawing.Drawing2D.FillMode" /> wyliczenia, która określa styl wypełnienia.</param>
        <summary>Wypełnia wnętrze wielokąta zdefiniowane przez tablicę o punktów <see cref="T:System.Drawing.PointF" /> struktury przy użyciu trybu określonego wypełnienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Co dwa kolejne punktów w tablicy Określ bok wielokąta. Ponadto jeśli ostatni punkt i pierwszy punkt nie pokrywają się, określają zamknięcia części wielokąta.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy niebieski pędzla pełnego koloru.  
  
-   Tworzy tablicę siedem punktów do definiowania wielokąta.  
  
-   Ustawia tryb wypełniania <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Wypełnia obszaru wielokątne na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#110)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#110)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#110)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillRectangle">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wypełnia wewnętrznych określony przez parę współrzędnych, szerokość i wysokość prostokąta.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> Określa charakterystykę wypełnienia.</param>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która reprezentuje prostokąta do wypełnienia.</param>
        <summary>Wypełnia wewnętrznych prostokąt określony przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wewnątrz prostokąta zdefiniowane przez `rect` parametru, łącznie z określonym lewym górnym rogu i maksymalnie obliczony obniżyć i dolnej krawędzi.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy niebieski pędzla pełnego koloru.  
  
-   Tworzy prostokąt.  
  
-   Wstawia prostokątny obszar na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#111)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#111)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#111)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, System::Drawing::RectangleF rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> Określa charakterystykę wypełnienia.</param>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która reprezentuje prostokąta do wypełnienia.</param>
        <summary>Wypełnia wewnętrznych prostokąt określony przez <see cref="T:System.Drawing.RectangleF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wewnątrz prostokąta zdefiniowane przez `rect` parametru, łącznie z określonym lewym górnym rogu i maksymalnie obliczony obniżyć i dolnej krawędzi.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy niebieski pędzla pełnego koloru.  
  
-   Tworzy prostokąt.  
  
-   Wstawia prostokątny obszar na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#112)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#112)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#112)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, int x, int y, int width, int height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> Określa charakterystykę wypełnienia.</param>
        <param name="x">Współrzędna x górnego lewego rogu prostokąta do wypełnienia.</param>
        <param name="y">Współrzędna y górnego lewego rogu prostokąta do wypełnienia.</param>
        <param name="width">Szerokość prostokąta do wypełnienia.</param>
        <param name="height">Wysokość prostokąta do wypełnienia.</param>
        <summary>Wypełnia wewnętrznych określony przez parę współrzędnych, szerokość i wysokość prostokąta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wewnątrz prostokąta zdefiniowane przez`x`, `y`, `width`, i `height` parametrów, takich jak określony lewym górnym rogu i maksymalnie obliczony obniżyć i dolnej krawędzi.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy niebieski pędzla pełnego koloru.  
  
-   Tworzy lokalizacja i rozmiar prostokąta.  
  
-   Wstawia prostokątny obszar na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#113)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#113)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#113)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, float x, float y, float width, float height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> Określa charakterystykę wypełnienia.</param>
        <param name="x">Współrzędna x górnego lewego rogu prostokąta do wypełnienia.</param>
        <param name="y">Współrzędna y górnego lewego rogu prostokąta do wypełnienia.</param>
        <param name="width">Szerokość prostokąta do wypełnienia.</param>
        <param name="height">Wysokość prostokąta do wypełnienia.</param>
        <summary>Wypełnia wewnętrznych określony przez parę współrzędnych, szerokość i wysokość prostokąta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wewnątrz prostokąta zdefiniowane przez `x`, `y`, `width`, i `height` parametrów, takich jak określony lewym górnym rogu i maksymalnie obliczony obniżyć i dolnej krawędzi.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy niebieski pędzla pełnego koloru.  
  
-   Tworzy lokalizacja i rozmiar prostokąta.  
  
-   Wstawia prostokątny obszar na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#114)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#114)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#114)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillRectangles">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wypełnia wnętrza szereg prostokąty określony przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillRectangles">
      <MemberSignature Language="C#" Value="public void FillRectangles (System.Drawing.Brush brush, System.Drawing.Rectangle[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangles(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.Rectangle[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangles(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Rectangle&gt; ^ rects);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rects" Type="System.Drawing.Rectangle[]" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> Określa charakterystykę wypełnienia.</param>
        <param name="rects">Tablica <see cref="T:System.Drawing.Rectangle" /> struktur reprezentujących prostokątach, aby wypełnić.</param>
        <summary>Wypełnia wnętrza szereg prostokąty określony przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy niebieski pędzla pełnego koloru.  
  
-   Tworzy tablicę trzy prostokąty.  
  
-   Wypełnia trzy obszary prostokątne na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#115)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#115)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#115)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="rects" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="rects" /> jest tablicą o zerowej długości.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangles">
      <MemberSignature Language="C#" Value="public void FillRectangles (System.Drawing.Brush brush, System.Drawing.RectangleF[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangles(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.RectangleF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangles(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::RectangleF&gt; ^ rects);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rects" Type="System.Drawing.RectangleF[]" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> Określa charakterystykę wypełnienia.</param>
        <param name="rects">Tablica <see cref="T:System.Drawing.RectangleF" /> struktur reprezentujących prostokątach, aby wypełnić.</param>
        <summary>Wypełnia wnętrza szereg prostokąty określony przez <see cref="T:System.Drawing.RectangleF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy niebieski pędzla pełnego koloru.  
  
-   Tworzy tablicę trzy prostokąty.  
  
-   Wypełnia trzy obszary prostokątne na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#116)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#116)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#116)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="rects" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Rects" /> jest tablicą o zerowej długości.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRegion">
      <MemberSignature Language="C#" Value="public void FillRegion (System.Drawing.Brush brush, System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRegion(class System.Drawing.Brush brush, class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRegion(System.Drawing.Brush,System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRegion(System::Drawing::Brush ^ brush, System::Drawing::Region ^ region);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> Określa charakterystykę wypełnienia.</param>
        <param name="region">
          <see cref="T:System.Drawing.Region" /> który reprezentuje obszar, aby wypełnić.</param>
        <summary>Wypełnia wnętrza <see cref="T:System.Drawing.Region" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Drawing.Region> składa się z prostokąty i ścieżki. Jeśli obszar nie są zamknięte, dodatkowe segmentu jest dodawana z ostatniego punktu do pierwszego punktu, aby je zamknąć.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy niebieski pędzla pełnego koloru.  
  
-   Tworzy prostokąt.  
  
-   Tworzy prostokątny obszar.  
  
-   Wstawia prostokątny obszar na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#117)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#117)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#117)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="region" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Graphics ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Graphics ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Umożliwia obiektu, próby zwolnienia zasobów i wykonywać inne operacje oczyszczania, przed jego jest odzyskana przez wyrzucanie elementów bezużytecznych.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Flush">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wymusza wykonanie wszystkich oczekujących operacji grafiki i zwraca natychmiast bez oczekiwania na zakończenie operacji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wymusza wykonanie wszystkich oczekujących operacji grafiki i zwraca natychmiast bez oczekiwania na zakończenie operacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rozpoczyna się opróżnienie i zwraca natychmiast bez oczekiwania na wszystkie aktualnie wykonywane grafiki na zakończenie operacji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush (System.Drawing.Drawing2D.FlushIntention intention);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush(valuetype System.Drawing.Drawing2D.FlushIntention intention) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Flush(System.Drawing.Drawing2D.FlushIntention)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush (intention As FlushIntention)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush(System::Drawing::Drawing2D::FlushIntention intention);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intention" Type="System.Drawing.Drawing2D.FlushIntention" />
      </Parameters>
      <Docs>
        <param name="intention">Element członkowski <see cref="T:System.Drawing.Drawing2D.FlushIntention" /> wyliczenia, która określa, czy metoda zwraca natychmiast lub czeka na wszelkie istniejące operacje zakończyć.</param>
        <summary>Wymusza wykonanie wszystkich oczekujących operacji grafiki przy użyciu metody Oczekiwanie lub nie jest oczekiwane, jak określono, aby zwrócić przed zakończenie operacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Drawing.Drawing2D.FlushIntention.Flush> dla `intention` parametr określa, że metoda zwracać natychmiast, po rozpoczęciu flush, podczas wartość <xref:System.Drawing.Drawing2D.FlushIntention.Sync> Określa, że metoda czekać przed zwróceniem do momentu zakończenia wszystkich istniejących operacji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromHdc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy nową <see cref="T:System.Drawing.Graphics" /> z określonego dojścia do kontekstu urządzenia.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdc(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdc (hdc As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdc(IntPtr hdc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Dojście do kontekstu urządzenia.</param>
        <summary>Tworzy nową <see cref="T:System.Drawing.Graphics" /> z określonego dojścia do kontekstu urządzenia.</summary>
        <returns>Ta metoda zwraca nową <see cref="T:System.Drawing.Graphics" /> dla kontekstu określonego urządzenia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zawsze należy wywołać <xref:System.Drawing.Graphics.Dispose%2A> metodę, aby zwolnić <xref:System.Drawing.Graphics> i powiązane zasoby utworzone przez <xref:System.Drawing.Graphics.FromHdc%2A> metody.  
  
 Nawet jeśli urządzenia wyświetlającego ma skojarzony profil kolorów ICM [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] domyślnie nie będzie używać tego profilu. Aby włączyć ICM dla <xref:System.Drawing.Graphics>, utworzyć <xref:System.Drawing.Graphics> z elementu HDC po elementu HDC (i ICM_ON) są przekazywane do `SetICMMode` funkcji. Następnie dowolnego rysunku programach <xref:System.Drawing.Graphics> zostaną dostosowane, zgodnie z profilem ICM skojarzone z urządzenia. Włączanie ICM spowoduje niższej wydajności.  
  
 Stan kontekstu urządzenia (tryb mapowania, jednostki logicznej i podobne) w czasie, należy wywołać <xref:System.Drawing.Graphics.FromHdc%2A> mogą mieć wpływ na renderowanie programach <xref:System.Drawing.Graphics>.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy zmienną typu wskaźnik wewnętrzny `hdc` i ustawia ją na dojście do kontekstu urządzenia obiektu grafiki formularza.  
  
-   Tworzy nowy obiekt grafiki, przy użyciu `hdc`.  
  
-   Rysuje prostokąt z nowego obiektu graphics (na ekranie).  
  
-   Zwalnia nowego grafiki obiektu przy użyciu `hdc`.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#118)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#118)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#118)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdc (IntPtr hdc, IntPtr hdevice);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdc(native int hdc, native int hdevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdc(System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdc (hdc As IntPtr, hdevice As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdc(IntPtr hdc, IntPtr hdevice);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
        <Parameter Name="hdevice" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Dojście do kontekstu urządzenia.</param>
        <param name="hdevice">Dojście do urządzenia.</param>
        <summary>Tworzy nową <see cref="T:System.Drawing.Graphics" /> z określonego dojścia do kontekstu urządzenia i dojścia do urządzenia.</summary>
        <returns>Ta metoda zwraca nową <see cref="T:System.Drawing.Graphics" /> dla kontekstu określonego urządzenia i urządzenia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zawsze należy wywołać <xref:System.Drawing.Graphics.Dispose%2A> metodę, aby zwolnić <xref:System.Drawing.Graphics> i powiązane zasoby utworzone przez <xref:System.Drawing.Graphics.FromHdc%2A> metody.  
  
 Nawet jeśli urządzenia wyświetlającego ma skojarzony profil kolorów ICM [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] domyślnie nie będzie używać tego profilu. Aby włączyć ICM dla <xref:System.Drawing.Graphics>, utworzyć <xref:System.Drawing.Graphics> z elementu HDC po elementu HDC (i ICM_ON) są przekazywane do `SetICMMode` funkcji. Następnie dowolnego rysunku programach <xref:System.Drawing.Graphics> zostaną dostosowane, zgodnie z profilem ICM skojarzone z urządzenia. Włączanie ICM spowoduje niższej wydajności.  
  
 Stan kontekstu urządzenia (tryb mapowania, jednostki logicznej i podobne) w czasie, należy wywołać <xref:System.Drawing.Graphics.FromHdc%2A> mogą mieć wpływ na renderowanie programach <xref:System.Drawing.Graphics>.  
  
 Dojście do urządzenia jest zwykle używane do możliwości drukarki określonego zapytania.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać dostęp do kodu niezarządzanego. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="FromHdcInternal">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdcInternal (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdcInternal(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdcInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdcInternal (hdc As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdcInternal(IntPtr hdc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Dojście do kontekstu urządzenia.</param>
        <summary>Zwraca <see cref="T:System.Drawing.Graphics" /> dla kontekstu określonego urządzenia.</summary>
        <returns>A <see cref="T:System.Drawing.Graphics" /> dla kontekstu określonego urządzenia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można używać tej metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHwnd">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHwnd (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHwnd(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHwnd(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHwnd (hwnd As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHwnd(IntPtr hwnd);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">Dojście do okna.</param>
        <summary>Tworzy nową <see cref="T:System.Drawing.Graphics" /> z określonego dojścia do okna.</summary>
        <returns>Ta metoda zwraca nową <see cref="T:System.Drawing.Graphics" /> dla określony uchwyt okna.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zawsze należy wywołać <xref:System.Drawing.Graphics.Dispose%2A> metodę, aby zwolnić <xref:System.Drawing.Graphics> i powiązane zasoby utworzone przez <xref:System.Drawing.Graphics.FromHwnd%2A> metody.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> program obsługi zdarzeń, jak również `thisForm`, <xref:System.Windows.Forms.Form> dla przykładu. Kod wykonuje następujące czynności:  
  
-   Tworzy nową zmienną wskaźnik wewnętrzny `hwnd` i ustawia ją na dojście przykład formularza.  
  
-   Tworzy nową <xref:System.Drawing.Graphics> z dojścia.  
  
-   Rysuje prostokąt do nowego <xref:System.Drawing.Graphics> czerwony piórem.  
  
-   Usuwa nową <xref:System.Drawing.Graphics>.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#119)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#119)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#119)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać dostęp do kodu niezarządzanego. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="FromHwndInternal">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHwndInternal (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHwndInternal(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHwndInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHwndInternal (hwnd As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHwndInternal(IntPtr hwnd);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">Dojście do okna.</param>
        <summary>Tworzy nową <see cref="T:System.Drawing.Graphics" /> do obsługi określonego systemu windows.</summary>
        <returns>A <see cref="T:System.Drawing.Graphics" /> dla określony uchwyt okna.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można używać tej metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromImage">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromImage (System.Drawing.Image image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromImage(class System.Drawing.Image image) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromImage(System.Drawing.Image)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromImage(System::Drawing::Image ^ image);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> z którym ma zostać utworzony nowy <see cref="T:System.Drawing.Graphics" />.</param>
        <summary>Tworzy nowy <see cref="T:System.Drawing.Graphics" /> z określonego <see cref="T:System.Drawing.Image" />.</summary>
        <returns>Ta metoda zwraca nową <see cref="T:System.Drawing.Graphics" /> dla określonego <see cref="T:System.Drawing.Image" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli obraz ma format piksela indeksowanego, ta metoda zgłasza wyjątek z komunikatem, "nie można utworzyć obiektu Graphics z obrazu, który ma format piksela indeksowanego." W poniższej liście przedstawiono formatów pikseli indeksowanych.  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format1bppIndexed>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format4bppIndexed>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format8bppIndexed>  
  
 Zaindeksowanego obrazu można zapisać jako innego formatu za pomocą <xref:System.Drawing.Image.Save%28System.String%2CSystem.Drawing.Imaging.ImageFormat%29> metody, a następnie pobrać <xref:System.Drawing.Graphics> obiektu dla nowego obrazu.  
  
 Ta metoda również zgłasza wyjątek, jeśli obraz ma jakiekolwiek z następujących formatów pikseli.  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Undefined>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.DontCare>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format16bppArgb1555>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale>  
  
 Zawsze należy wywołać <xref:System.Drawing.Graphics.Dispose%2A> metodę, aby zwolnić <xref:System.Drawing.Graphics> i powiązane zasoby utworzone przez <xref:System.Drawing.Graphics.FromImage%2A> metody.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy <xref:System.Drawing.Image> z funkcją SampImag.jpg dla plików w folderze przykład.  
  
-   Tworzy <xref:System.Drawing.Graphics> z <xref:System.Drawing.Image>.  
  
-   Zmienia obraz, wypełniając prostokąt w niej.  
  
-   Rysuje <xref:System.Drawing.Image> do ekranu.  
  
-   Zwalnia utworzony <xref:System.Drawing.Graphics>.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#120)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#120)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.Exception">
          <paramref name="image" /> ma format piksela indeksowanego lub jego format jest niezdefiniowany.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetContextInfo">
      <MemberSignature Language="C#" Value="public object GetContextInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetContextInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetContextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContextInfo () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetContextInfo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera kontekst zbiorczą grafiki.</summary>
        <returns>
          <see cref="T:System.Object" /> Reprezentującą kontekst zbiorczą grafiki.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest Tablica obiektów, gdzie pierwszy element zawiera obszar przycinania zbiorczej, a drugi element macierzy tłumaczenie/Przekształcanie zbiorczą.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHalftonePalette">
      <MemberSignature Language="C#" Value="public static IntPtr GetHalftonePalette ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetHalftonePalette() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetHalftonePalette" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHalftonePalette () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetHalftonePalette();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera dojścia do bieżącej palety półtonów systemu Windows.</summary>
        <returns>Wewnętrzny wskaźnik określający dojście do palety.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Celem <xref:System.Drawing.Graphics.GetHalftonePalette%2A> metody jest umożliwienie [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] umożliwia utworzenie lepsze półtonów jakości, podczas wyświetlania używa 8 bitów na piksel. Aby wyświetlić obraz przy użyciu palety półtonów, użyj następującej procedury.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Definiuje współdziałanie <xref:System.Runtime.InteropServices.DllImportAttribute> atrybuty gdi32.dll pliku DLL systemu Windows, który zawiera niezbędne [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] funkcji.  
  
-   Definiuje `SelectPalette` i `RealizePalette` funkcje w tej bibliotece DLL jako zewnętrzne.  
  
-   Tworzy obraz z istniejącego pliku obrazu SampImag.jpg (który musi być w tym samym folderze co plik przykładowy kod), a wynikowy obraz do ekranu.  
  
-   Tworzy zmienne typu wskaźnik wewnętrzny i odpowiednio ustawia wartości uchwyt do obiektu graphics i bieżącej palety półtonów systemu Windows.  
  
-   Wybiera i realizuje półtonów palety.  
  
-   Tworzy nowy obiekt grafiki, przy użyciu `hdc` parametru.  
  
-   Rysuje obraz ponownie.  
  
-   Zwalnia dojście do kontekstu urządzenia.  
  
 Wynik jest dwóch obrzutki obrazu próbki: z palety 16-bitową i jedną z palety 8-bitową.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#121)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#121)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#121)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHdc">
      <MemberSignature Language="C#" Value="public IntPtr GetHdc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetHdc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetHdc" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHdc () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IntPtr GetHdc();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Drawing.IDeviceContext.GetHdc</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera dojścia do kontekstu urządzenia skojarzone z tym <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>Dojście do kontekstu urządzenia skojarzone z tym <see cref="T:System.Drawing.Graphics" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kontekst urządzenia jest strukturą systemu Windows na podstawie [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] definiuje zestaw obiektów graficznych i ich skojarzonych z nimi atrybutów, a także graficznego tryby, które mają wpływ na dane wyjściowe. Ta metoda zwraca kontekst tego urządzenia, z wyjątkiem czcionki. Ponieważ nie wybrano czcionkę, wywołań <xref:System.Drawing.Font.FromHdc%2A> przy użyciu dojścia zwrócony z metody <xref:System.Drawing.Graphics.GetHdc%2A> metody zakończy się niepowodzeniem.  
  
 Wywołuje się <xref:System.Drawing.Graphics.GetHdc%2A> i <xref:System.Drawing.Graphics.ReleaseHdc%2A> metody muszą występować parami. W zakresie <xref:System.Drawing.Graphics.GetHdc%2A> i <xref:System.Drawing.Graphics.ReleaseHdc%2A> pary metod zwykle wprowadzeniu tylko wywołania [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] funkcji. Wywołuje w tym zakresie wprowadzone [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] metody <xref:System.Drawing.Graphics> wytworzonego `hdc` niepowodzenie parametru `ObjectBusy` błędu. Ponadto [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] ignoruje stanu zmian <xref:System.Drawing.Graphics> z `hdc` parametr podczas kolejnych operacji.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Pokazano w przykładzie wywołanie systemu Windows [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] funkcja do wykonania tych samych zadań [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> metody. Kod wykonuje następujące czynności:  
  
-   Definiuje współdziałanie <xref:System.Runtime.InteropServices.DllImportAttribute> atrybutu gdi32.dll plik DLL systemu Windows. Ta biblioteka DLL zawiera żądaną [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] funkcji.  
  
-   Definiuje <xref:System.Drawing.Rectangle> funkcji w tej bibliotece DLL jako zewnętrzne.  
  
-   Tworzy red pióra.  
  
-   Za pomocą pióra, rysuje prostokąt na ekranie za pomocą [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics.DrawRectangle%2A> metody.  
  
-   Definiuje wewnętrznego wskaźnika typu zmienną `hdc` i ustawia wartość dojścia do kontekstu urządzenia formularza.  
  
-   Rysuje prostokąt na ekranie za pomocą [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <xref:System.Drawing.Rectangle> funkcji.  
  
-   Zwalnia reprezentowanej przez kontekst urządzenia `hdc` parametru.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#122)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#122)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#122)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać dostęp do kodu niezarządzanego. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetNearestColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color GetNearestColor (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Color GetNearestColor(valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetNearestColor(System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Color GetNearestColor(System::Drawing::Color color);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color">
          <see cref="T:System.Drawing.Color" /> Struktura, dla której mają zostać znalezione dopasowanie.</param>
        <summary>Pobiera kolor dokładnością do określonej <see cref="T:System.Drawing.Color" /> struktury.</summary>
        <returns>A <see cref="T:System.Drawing.Color" /> strukturę, która reprezentuje kolor dokładnością do określonej z <paramref name="color" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy kolor dowolnego z ARGB współrzędne (255, 165, 63, 136).  
  
-   Tworzy pędzla pełnego koloru i ustawia kolor określonego koloru.  
  
-   Wypełnia elipsy przy użyciu dowolnego koloru.  
  
-   Tworzy drugi kolor i ustawia wartość do najbliższej systemu ARGB kolorów.  
  
-   Wypełnia drugi elipsy przy użyciu tego koloru.  
  
 Wynik jest dwie elipsy: pierwszy z dowolnego podany kolor, a drugi kolor systemu najbliższej podany kolor.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#123)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#123)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#123)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolationMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.InterpolationMode InterpolationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.InterpolationMode InterpolationMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.InterpolationMode" />
      <MemberSignature Language="VB.NET" Value="Public Property InterpolationMode As InterpolationMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::InterpolationMode InterpolationMode { System::Drawing::Drawing2D::InterpolationMode get(); void set(System::Drawing::Drawing2D::InterpolationMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.InterpolationMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tryb interpolacji skojarzony z tym <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Jeden z <see cref="T:System.Drawing.Drawing2D.InterpolationMode" /> wartości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tryb interpolacji Określa, jak pośredni wartości między dwoma punktami końcowymi są obliczane.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IntersectClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aktualizuje obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> do przecięcia bieżący obszar przycinania i określonego <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub IntersectClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::Rectangle rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura do intersect z bieżącego obszaru przycinania.</param>
        <summary>Aktualizuje obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> do przecięcia bieżący obszar przycinania i określonego <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda przypisuje <xref:System.Drawing.Graphics.Clip%2A> właściwości tego <xref:System.Drawing.Graphics> reprezentowany przez przecięcie, a bieżący obszar przycinania na prostokąt określony przez obszar `rect` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokąt z lewym górnym rogu na (0, 0) i ustawia obszar przycinania na prostokąt.  
  
-   Tworzy drugi prostokąt z lewym górnym rogu na (100, 100) i ustawia obszar przycinania na przecięciu prostokąta i bieżącego obszaru przycinania (prostokąt pierwszy).  
  
-   Wypełnia dużych prostokąt obejmującą zarówno poprzedniej prostokąty z niebieskim pędzla pełnego koloru.  
  
-   Resetuje nieskończone obszaru przycinania.  
  
-   Rysuje prostokąty wokół wycinka dwóch regionach. Czarne pióro używa pierwszego Prostokątny wycinek i czerwone pióro dla drugiego obszaru przycinania.  
  
 Wynik jest tylko część wspólną dwóch prostokątów jest wypełniony niebieski.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#124)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#124)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#124)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub IntersectClip (rect As RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::RectangleF rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura do intersect z bieżącego obszaru przycinania.</param>
        <summary>Aktualizuje obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> do przecięcia bieżący obszar przycinania i określonego <see cref="T:System.Drawing.RectangleF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda przypisuje <xref:System.Drawing.Graphics.Clip%2A> właściwości tego <xref:System.Drawing.Graphics> reprezentowany przez przecięcie, a bieżący obszar przycinania na prostokąt określony przez obszar `rect` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokąt z lewym górnym rogu na (0, 0) i ustawia obszar przycinania na prostokąt.  
  
-   Tworzy drugi prostokąt z lewym górnym rogu na (100, 100) i ustawia obszar przycinania na przecięciu prostokąta i bieżącego obszaru przycinania (prostokąt pierwszy).  
  
-   Wypełnia dużych prostokąt obejmującą zarówno poprzedniej prostokąty z niebieskim pędzla pełnego koloru.  
  
-   Resetuje nieskończone obszaru przycinania.  
  
-   Rysuje prostokąty wokół wycinka dwóch regionach. Czarne pióro używa pierwszego Prostokątny wycinek i czerwone pióro dla drugiego obszaru przycinania.  
  
 Wynik jest tylko część wspólną dwóch prostokątów jest wypełniony niebieski.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#125)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#125)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#125)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::Region ^ region);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region">
          <see cref="T:System.Drawing.Region" /> Aby intersect z bieżącego obszaru.</param>
        <summary>Aktualizuje obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> do przecięcia bieżący obszar przycinania i określonego <see cref="T:System.Drawing.Region" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda przypisuje <xref:System.Drawing.Graphics.Clip%2A> właściwości tego <xref:System.Drawing.Graphics> reprezentowany przez przecięcie bieżący obszar przycinania i regionu, określony przez obszar `region` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokąt z lewym górnym rogu na (0, 0).  
  
-   Tworzy obszar ustawia ją na prostokąt i ustawia obszar przycinania w tym regionie.  
  
-   Tworzy drugi prostokąt z lewym górnym rogu na (100, 100).  
  
-   Tworzy obszar ustawia ją na drugi prostokąt i ustawia obszar przycinania na przecięciu tego regionu i bieżącego obszaru przycinania (pierwszy prostokąt) przy użyciu trybu łączenie <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Wypełnia dużych prostokąt obejmuje zarówno poprzedniej regiony z niebieskim pędzla pełnego koloru.  
  
-   Resetuje nieskończone obszaru przycinania.  
  
-   Rysuje prostokąty wokół wycinka dwóch regionach. Czarne pióro używa pierwszego obszaru przycinania i czerwone pióro dla drugiego obszaru przycinania.  
  
 Wynik jest tylko część wspólną dwóch regionach jest wypełniony niebieski.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#126)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#126)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#126)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClipEmpty">
      <MemberSignature Language="C#" Value="public bool IsClipEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClipEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.IsClipEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClipEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClipEmpty { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą czy obszaru przycinania tego <see cref="T:System.Drawing.Graphics" /> jest pusta.</summary>
        <value>
          <see langword="true" /> Jeśli obszaru przycinania tego <see cref="T:System.Drawing.Graphics" /> jest pusty; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsVisible">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wskazuje, czy określony przez parę współrzędnych punkt znajduje się w regionie widoczne klip <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">
          <see cref="T:System.Drawing.Point" /> Struktura do testowania widoczności.</param>
        <summary>Wskazuje, czy określony <see cref="T:System.Drawing.Point" /> struktury znajduje się w regionie widoczne klip <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          <see langword="true" /> Jeśli punkt określony przez <paramref name="point" /> parametru znajduje się w regionie widoczne klip <see cref="T:System.Drawing.Graphics" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obszar prostokątny wycinek i ustawia go jako obszaru przycinania dla obiektu grafiki przy użyciu formularza <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Tworzy dwa punkty: jeden wewnątrz obszaru przycinania, a drugi poza.  
  
-   Testy każdego z punktów widoczności i rysuje tylko widoczne z nich.  
  
 Wynik jest jeden małe czerwone kółko, który znajduje się w regionie klip.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#127)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#127)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#127)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.PointF)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (point As PointF) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::PointF point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="point">
          <see cref="T:System.Drawing.PointF" /> Struktura do testowania widoczności.</param>
        <summary>Wskazuje, czy określony <see cref="T:System.Drawing.PointF" /> struktury znajduje się w regionie widoczne klip <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          <see langword="true" /> Jeśli punkt określony przez <paramref name="point" /> parametru znajduje się w regionie widoczne klip <see cref="T:System.Drawing.Graphics" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obszar prostokątny wycinek i ustawia go jako obszar przycinania grafiki przy użyciu formularza <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Tworzy dwa punkty: jeden wewnątrz obszaru przycinania, a drugi poza.  
  
-   Testy każdego z punktów widoczności i rysuje tylko widoczne z nich.  
  
 Wynik jest jeden małe czerwone kółko, który znajduje się w regionie klip.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#128)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#128)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#128)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (rect As Rectangle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::Rectangle rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura do testowania widoczności.</param>
        <summary>Wskazuje, czy prostokąt określony przez <see cref="T:System.Drawing.Rectangle" /> struktury znajduje się w regionie widoczne klip <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          <see langword="true" /> Jeśli prostokąt określony przez <paramref name="rect" /> parametru znajduje się w regionie widoczne klip <see cref="T:System.Drawing.Graphics" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obszar prostokątny wycinek i ustawia go jako obszaru przycinania dla obiektu grafiki przy użyciu formularza <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Tworzy lokalizacja i rozmiar dwóch prostokątów jeden wewnątrz obszaru przycinania, a drugi poza.  
  
-   Testy każdego prostokąty widoczności i rysuje tylko widoczne z nich.  
  
 Wynik jest jeden niewielki prostokąt red, który znajduje się w regionie klip.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#129)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#129)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#129)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (rect As RectangleF) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::RectangleF rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura do testowania widoczności.</param>
        <summary>Wskazuje, czy prostokąt określony przez <see cref="T:System.Drawing.RectangleF" /> struktury znajduje się w regionie widoczne klip <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          <see langword="true" /> Jeśli prostokąt określony przez <paramref name="rect" /> parametru znajduje się w regionie widoczne klip <see cref="T:System.Drawing.Graphics" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obszar prostokątny wycinek i ustawia go jako obszaru przycinania dla obiektu grafiki przy użyciu formularza <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Tworzy dwie prostokątów: jedna wewnątrz obszaru przycinania, a druga poza.  
  
-   Testy każdego prostokąty widoczności i rysuje tylko widoczne z nich.  
  
 Wynik jest jeden niewielki prostokąt red, który znajduje się w regionie klip.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#130)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#130)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#130)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Integer, y As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Współrzędna x punktu do testowania widoczności.</param>
        <param name="y">Współrzędna y punktu do testowania widoczności.</param>
        <summary>Wskazuje, czy określony przez parę współrzędnych punkt znajduje się w regionie widoczne klip <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          <see langword="true" /> Jeśli punkt określony przez <paramref name="x" /> i <paramref name="y" /> parametry znajduje się w regionie widoczne klip <see cref="T:System.Drawing.Graphics" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obszar prostokątny wycinek i ustawia go jako obszaru przycinania dla obiektu grafiki przy użyciu formularza <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Tworzy dwa punkty: jeden wewnątrz obszaru przycinania, a drugi poza.  
  
-   Testy każdego z punktów widoczności i rysuje tylko widoczne z nich.  
  
 Wynik jest jeden małe czerwone kółko, który znajduje się w regionie klip.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#131)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#131)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Single, y As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(float x, float y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Współrzędna x punktu do testowania widoczności.</param>
        <param name="y">Współrzędna y punktu do testowania widoczności.</param>
        <summary>Wskazuje, czy określony przez parę współrzędnych punkt znajduje się w regionie widoczne klip <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          <see langword="true" /> Jeśli punkt określony przez <paramref name="x" /> i <paramref name="y" /> parametry znajduje się w regionie widoczne klip <see cref="T:System.Drawing.Graphics" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obszar prostokątny wycinek i ustawia go jako obszaru przycinania dla obiektu grafiki przy użyciu formularza <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Tworzy dwa punkty: jeden wewnątrz obszaru przycinania, a drugi poza.  
  
-   Testy każdego z punktów widoczności i rysuje tylko widoczne z nich.  
  
 Wynik jest jeden małe czerwone kółko, który znajduje się w regionie klip.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#133)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#133)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#133)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Integer, y As Integer, width As Integer, height As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(int x, int y, int width, int height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Współrzędna x górnego lewego rogu prostokąta do testowania widoczności.</param>
        <param name="y">Współrzędna y górnego lewego rogu prostokąta do testowania widoczności.</param>
        <param name="width">Szerokość prostokąta do testowania widoczności.</param>
        <param name="height">Wysokość prostokąta do testowania widoczności.</param>
        <summary>Wskazuje, czy określony przez parę współrzędnych, szerokość i wysokość prostokąta znajduje się w regionie widoczne klip <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          <see langword="true" /> Jeśli prostokąt określony przez <paramref name="x" />, <paramref name="y" />, <paramref name="width" />, i <paramref name="height" /> parametry znajduje się w regionie widoczne klip <see cref="T:System.Drawing.Graphics" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obszar prostokątny wycinek i ustawia go jako obszaru przycinania dla obiektu grafiki przy użyciu formularza <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Tworzy lokalizacja i rozmiar dwóch prostokątów jeden wewnątrz obszaru przycinania, a drugi poza.  
  
-   Testy każdego prostokąty widoczności i rysuje tylko widoczne z nich.  
  
 Wynik jest jeden niewielki prostokąt red, który znajduje się w regionie klip.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#132)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#132)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#132)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Single, y As Single, width As Single, height As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(float x, float y, float width, float height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Współrzędna x górnego lewego rogu prostokąta do testowania widoczności.</param>
        <param name="y">Współrzędna y górnego lewego rogu prostokąta do testowania widoczności.</param>
        <param name="width">Szerokość prostokąta do testowania widoczności.</param>
        <param name="height">Wysokość prostokąta do testowania widoczności.</param>
        <summary>Wskazuje, czy określony przez parę współrzędnych, szerokość i wysokość prostokąta znajduje się w regionie widoczne klip <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          <see langword="true" /> Jeśli prostokąt określony przez <paramref name="x" />, <paramref name="y" />, <paramref name="width" />, i <paramref name="height" /> parametry znajduje się w regionie widoczne klip <see cref="T:System.Drawing.Graphics" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obszar prostokątny wycinek i ustawia go jako obszaru przycinania dla obiektu grafiki przy użyciu formularza <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Tworzy lokalizacja i rozmiar dwóch prostokątów jeden wewnątrz obszaru przycinania, a drugi poza.  
  
-   Testy każdego prostokąty widoczności i rysuje tylko widoczne z nich.  
  
 Wynik jest jeden niewielki prostokąt red, który znajduje się w regionie klip.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#134)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#134)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#134)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleClipEmpty">
      <MemberSignature Language="C#" Value="public bool IsVisibleClipEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisibleClipEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.IsVisibleClipEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisibleClipEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisibleClipEmpty { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą czy obszaru przycinania widoczne tego <see cref="T:System.Drawing.Graphics" /> jest pusta.</summary>
        <value>
          <see langword="true" /> Jeśli widoczną część obszaru przycinania tego <see cref="T:System.Drawing.Graphics" /> jest pusty; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obszar przycinania widoczny jest przecięcia obszaru przycinania tego `Graphics` i obszaru przycinania okna.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCharacterRanges">
      <MemberSignature Language="C#" Value="public System.Drawing.Region[] MeasureCharacterRanges (string text, System.Drawing.Font font, System.Drawing.RectangleF layoutRect, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Region[] MeasureCharacterRanges(string text, class System.Drawing.Font font, valuetype System.Drawing.RectangleF layoutRect, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Drawing::Region ^&gt; ^ MeasureCharacterRanges(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::RectangleF layoutRect, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Region[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do pomiaru.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> definiuje format tekstu ciągu.</param>
        <param name="layoutRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa prostokątne układu dla ciągu.</param>
        <param name="stringFormat">
          <see cref="T:System.Drawing.StringFormat" /> reprezentujący formatowania informacje, takie jak wierszami, ciągu.</param>
        <summary>Pobiera tablicę <see cref="T:System.Drawing.Region" /> obiektów, z których każdy zakresem zakres pozycji znaku w ciągu określonego ciągu.</summary>
        <returns>Ta metoda zwraca tablicę <see cref="T:System.Drawing.Region" /> obiektów, z których każdy zakresem zakres pozycji znaku w ciągu określonego ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Regionów zwracane przez tę metodę są zależne od rozdzielczości, więc może być nieznaczne utratę dokładności, jeśli ciągi są rejestrowane w metaplik w jednej rozdzielczości i później odtwarzane innego rozwiązania.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Ustawia ciąg "pierwszego i drugiego zakresy" i czcionki do wyświetlenia w ciągu ("razy nowe łacińskich", punkt 16).  
  
-   Zestawy znaków dwa zakresy w ciągu (odpowiadające wyrazy "Pierwszy" i "Drugi").  
  
-   Tworzy prostokąt wyświetlania ciąg.  
  
-   Ustawia formatowania ciągu ľ zakres dwóch znaków włącznie.  
  
-   Rysuje ciąg do ekranu.  
  
-   Mierzy zakres znaków, określa prostokąty, które powiązane z dwoma określonymi zakresami.  
  
-   Rysuje dwóch prostokątów do ekranu.  
  
 Wynik jest wyświetlany ciąg z pierwszego zakresu ("pierwszy") jest ograniczone przez czerwonym prostokątem oraz drugiego zakresu ("drugi") jest ograniczone przez niebieskiego prostokąta.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#135)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#135)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#135)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)" />
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MeasureString">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Mierzy określony ciąg narysować z określonym <see cref="T:System.Drawing.Font" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do pomiaru.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> definiuje format tekstu ciągu.</param>
        <summary>Mierzy określony ciąg narysować z określonym <see cref="T:System.Drawing.Font" />.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.SizeF" /> strukturę, która reprezentuje rozmiar w jednostkach określonych we <see cref="P:System.Drawing.Graphics.PageUnit" /> właściwości ciągu określonego przez <paramref name="text" /> parametru zgodnie z <paramref name="font" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> — Metoda jest przeznaczony dla użytku z poszczególnymi ciągi i obejmuje małej ilości miejsca dodatkowe przed i po ciągu, aby umożliwić ich symboli. Ponadto <xref:System.Drawing.Graphics.DrawString%2A> metoda dopasowuje symbolu punkty w celu zoptymalizowania jakości wyświetlania i może być wyświetlany ciąg węższe niż zgłoszony przez <xref:System.Drawing.Graphics.MeasureString%2A>. Aby uzyskać metryki odpowiednie do sąsiadujących ze sobą ciągów w układzie (na przykład podczas implementowania sformatowanego tekstu), użyj <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> metody lub jeden z <xref:System.Drawing.Graphics.MeasureString%2A> metody, która przyjmuje <xref:System.Drawing.StringFormat>i przekaż <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Upewnij się również, <xref:System.Drawing.Graphics.TextRenderingHint%2A> dla <xref:System.Drawing.Graphics> jest <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg do pomiaru.  
  
-   Tworzy obiekt czcionki i ustawia ją na Arial (punkt 16).  
  
-   Tworzy obiekt rozmiar i używa go i obiekt czcionki do mierzenia rozmiar ciągu.  
  
-   Rysuje prostokąt red przy użyciu zmierzona rozmiar ciągu.  
  
-   Rysuje ciągu w narysowanego prostokąta.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#136)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#136)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#136)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do pomiaru.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> Określa ciąg formatu tekstu.</param>
        <param name="layoutArea">
          <see cref="T:System.Drawing.SizeF" /> Struktura, która określa obszar maksymalny układu tekstu.</param>
        <summary>Mierzy określony ciąg narysować z określonym <see cref="T:System.Drawing.Font" /> w obszarze określonej układu.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.SizeF" /> strukturę, która reprezentuje rozmiar w jednostkach określonych we <see cref="P:System.Drawing.Graphics.PageUnit" /> właściwości ciągu określonego przez <paramref name="text" /> parametru zgodnie z <paramref name="font" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> — Metoda jest przeznaczony dla użytku z poszczególnymi ciągi i obejmuje małej ilości miejsca dodatkowe przed i po ciągu, aby umożliwić ich symboli. Ponadto <xref:System.Drawing.Graphics.DrawString%2A> metoda dopasowuje symbolu punkty w celu zoptymalizowania jakości wyświetlania i może być wyświetlany ciąg węższe niż zgłoszony przez <xref:System.Drawing.Graphics.MeasureString%2A>. Aby uzyskać metryki odpowiednie do sąsiadujących ze sobą ciągów w układzie (na przykład podczas implementowania sformatowanego tekstu), użyj <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> metody lub jeden z <xref:System.Drawing.Graphics.MeasureString%2A> metody, która przyjmuje <xref:System.Drawing.StringFormat>i przekaż <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Upewnij się również, <xref:System.Drawing.Graphics.TextRenderingHint%2A> dla <xref:System.Drawing.Graphics> jest <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg do mierzenia i obiektu czcionki ustawioną Arial (punkt 16).  
  
-   Ustawia rozmiar maksymalny układu parametrów.  
  
-   Tworzy obiekt rozmiar i używa go, obiekt czcionki i rozmiar maksymalny układu do mierzenia rozmiar ciągu.  
  
-   Rysuje prostokąt red przy użyciu zmierzona rozmiar ciągu.  
  
-   Rysuje ciągu w narysowanego prostokąta.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#138)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#138)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#138)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, int32 width) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, int width);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="width" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do pomiaru.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> definiuje format ciągu.</param>
        <param name="width">Maksymalna szerokość ciągu w pikselach.</param>
        <summary>Mierzy określony ciąg narysować z określonym <see cref="T:System.Drawing.Font" />.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.SizeF" /> strukturę, która reprezentuje rozmiar w jednostkach określonych we <see cref="P:System.Drawing.Graphics.PageUnit" /> właściwości ciągu określonego w <paramref name="text" /> parametru zgodnie z <paramref name="font" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `width` Parametr określa maksymalną wartość zwracana składnika szerokość <xref:System.Drawing.SizeF> struktury (<xref:System.Drawing.SizeF.Width%2A>). Jeśli `width` parametrów jest mniejsza niż rzeczywista szerokość ciągu zwróconego <xref:System.Drawing.SizeF.Width%2A> składnika jest obcinana do wartość reprezentującą maksymalną liczbę znaków, które zmieści się w określonej szerokości. Aby pomieścić cały ciąg zwrócony <xref:System.Drawing.SizeF.Height%2A> składnika jest dostosowana do wartość, która umożliwia wyświetlanie ciągu z zawijania znaków.  
  
 <xref:System.Drawing.Graphics.MeasureString%2A> — Metoda jest przeznaczony dla użytku z poszczególnymi ciągi i obejmuje małej ilości miejsca dodatkowe przed i po ciągu, aby umożliwić ich symboli. Ponadto <xref:System.Drawing.Graphics.DrawString%2A> metoda dopasowuje symbolu punkty w celu zoptymalizowania jakości wyświetlania i może być wyświetlany ciąg węższe niż zgłoszony przez <xref:System.Drawing.Graphics.MeasureString%2A>. Aby uzyskać metryki odpowiednie do sąsiadujących ze sobą ciągów w układzie (na przykład podczas implementowania sformatowanego tekstu), użyj <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> metody lub jeden z <xref:System.Drawing.Graphics.MeasureString%2A> metody, która przyjmuje <xref:System.Drawing.StringFormat>i przekaż <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Upewnij się również, <xref:System.Drawing.Graphics.TextRenderingHint%2A> dla <xref:System.Drawing.Graphics> jest <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg do mierzenia i obiektu czcionki ustawioną Arial (punkt 16).  
  
-   Ustawia maksymalną szerokość ciągu.  
  
-   Tworzy obiekt rozmiar i używa go, obiekt czcionki i maksymalną szerokość do mierzenia rozmiar ciągu.  
  
-   Rysuje prostokąt red przy użyciu zmierzona rozmiar ciągu.  
  
-   Rysuje ciągu w narysowanego prostokąta.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#141)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#141)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#141)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.PointF origin, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.PointF origin, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::PointF origin, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="origin" Type="System.Drawing.PointF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do pomiaru.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> Określa ciąg formatu tekstu.</param>
        <param name="origin">
          <see cref="T:System.Drawing.PointF" /> Struktura, która reprezentuje lewego górnego rogu ciągu.</param>
        <param name="stringFormat">
          <see cref="T:System.Drawing.StringFormat" /> reprezentujący formatowania informacje, takie jak wierszami, ciągu.</param>
        <summary>Mierzy określony ciąg narysować z określonym <see cref="T:System.Drawing.Font" /> i sformatowane przy użyciu określonego <see cref="T:System.Drawing.StringFormat" />.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.SizeF" /> strukturę, która reprezentuje rozmiar w jednostkach określonych we <see cref="P:System.Drawing.Graphics.PageUnit" /> właściwości ciągu określonego przez <paramref name="text" /> parametru zgodnie z <paramref name="font" /> parametru i <paramref name="stringFormat" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> — Metoda jest przeznaczony dla użytku z poszczególnymi ciągi i obejmuje małej ilości miejsca dodatkowe przed i po ciągu, aby umożliwić ich symboli. Ponadto <xref:System.Drawing.Graphics.DrawString%2A> metoda dopasowuje symbolu punkty w celu zoptymalizowania jakości wyświetlania i może być wyświetlany ciąg węższe niż zgłoszony przez <xref:System.Drawing.Graphics.MeasureString%2A>. Aby uzyskać metryki odpowiednie do sąsiadujących ze sobą ciągów w układzie (na przykład podczas implementowania sformatowanego tekstu), użyj <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> metody lub jeden z <xref:System.Drawing.Graphics.MeasureString%2A> metody, która przyjmuje <xref:System.Drawing.StringFormat>i przekaż <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Upewnij się również, <xref:System.Drawing.Graphics.TextRenderingHint%2A> dla <xref:System.Drawing.Graphics> jest <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg do mierzenia i obiektu czcionki ustawioną Arial (punkt 16)  
  
-   Tworzy punkt, aby zlokalizować lewego górnego rogu ciągu.  
  
-   Tworzy obiekt do formatu ciągu i ustawia jej flag formatu <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  
  
-   Tworzy obiekt rozmiar do mierzenia ciąg.  
  
-   Mierzy rozmiar ciągu przy użyciu ciągu, obiekt czcionki lokalizowania punktu i format ciągu.  
  
-   Rysuje prostokąt red przy użyciu lokalizowania punktu i zmierzona rozmiar ciągu.  
  
-   Rysuje ciągu w narysowanego prostokąta.  
  
 Wynik jest pionowy prostokąt otaczającej pionowy ciąg.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#137)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#137)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#137)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do pomiaru.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> Określa ciąg formatu tekstu.</param>
        <param name="layoutArea">
          <see cref="T:System.Drawing.SizeF" /> Struktura, która określa obszar maksymalny układu tekstu.</param>
        <param name="stringFormat">
          <see cref="T:System.Drawing.StringFormat" /> reprezentujący formatowania informacje, takie jak wierszami, ciągu.</param>
        <summary>Mierzy określony ciąg narysować z określonym <see cref="T:System.Drawing.Font" /> i sformatowane przy użyciu określonego <see cref="T:System.Drawing.StringFormat" />.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.SizeF" /> strukturę, która reprezentuje rozmiar w jednostkach określonych we <see cref="P:System.Drawing.Graphics.PageUnit" /> właściwości ciągu określonego w <paramref name="text" /> parametru zgodnie z <paramref name="font" /> parametru i <paramref name="stringFormat" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> — Metoda jest przeznaczony dla użytku z poszczególnymi ciągi i obejmuje małej ilości miejsca dodatkowe przed i po ciągu, aby umożliwić ich symboli. Ponadto <xref:System.Drawing.Graphics.DrawString%2A> metoda dopasowuje symbolu punkty w celu zoptymalizowania jakości wyświetlania i może być wyświetlany ciąg węższe niż zgłoszony przez <xref:System.Drawing.Graphics.MeasureString%2A>. Aby uzyskać metryki odpowiednie do sąsiadujących ze sobą ciągów w układzie (na przykład podczas implementowania sformatowanego tekstu), użyj <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> metody lub jeden z <xref:System.Drawing.Graphics.MeasureString%2A> metody, która przyjmuje <xref:System.Drawing.StringFormat>i przekaż <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Upewnij się również, <xref:System.Drawing.Graphics.TextRenderingHint%2A> dla <xref:System.Drawing.Graphics> jest <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg do mierzenia i obiektu czcionki ustawioną Arial (punkt 16).  
  
-   Ustawia rozmiar maksymalny układu ciągu tworzenia obiektu rozmiar do mierzenia ciąg.  
  
-   Tworzy obiekt do formatu ciągu i ustawia jej flag formatu <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  
  
-   Mierzy rozmiar ciągu przy użyciu ciągu, obiekt czcionki, rozmiar maksymalny układ i format ciągu.  
  
-   Rysuje prostokąt red przy użyciu zmierzona rozmiar ciągu.  
  
-   Rysuje ciągu w narysowanego prostokąta.  
  
 Wynik jest pionowy prostokąt otaczającej pionowy ciąg.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#139)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#139)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#139)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, int32 width, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, int width, System::Drawing::StringFormat ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do pomiaru.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> definiuje format tekstu ciągu.</param>
        <param name="width">Maksymalna szerokość ciągu.</param>
        <param name="format">
          <see cref="T:System.Drawing.StringFormat" /> reprezentujący formatowania informacje, takie jak wierszami, ciągu.</param>
        <summary>Mierzy określony ciąg narysować z określonym <see cref="T:System.Drawing.Font" /> i sformatowane przy użyciu określonego <see cref="T:System.Drawing.StringFormat" />.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.SizeF" /> strukturę, która reprezentuje rozmiar w jednostkach określonych we <see cref="P:System.Drawing.Graphics.PageUnit" /> właściwości ciągu określonego w <paramref name="text" /> parametru zgodnie z <paramref name="font" /> parametru i <paramref name="stringFormat" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> — Metoda jest przeznaczony dla użytku z poszczególnymi ciągi i obejmuje małej ilości miejsca dodatkowe przed i po ciągu, aby umożliwić ich symboli. Ponadto <xref:System.Drawing.Graphics.DrawString%2A> metoda dopasowuje symbolu punkty w celu zoptymalizowania jakości wyświetlania i może być wyświetlany ciąg węższe niż zgłoszony przez <xref:System.Drawing.Graphics.MeasureString%2A>. Aby uzyskać metryki odpowiednie do sąsiadujących ze sobą ciągów w układzie (na przykład podczas implementowania sformatowanego tekstu), użyj <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> metody lub jeden z <xref:System.Drawing.Graphics.MeasureString%2A> metody, która przyjmuje <xref:System.Drawing.StringFormat>i przekaż <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Upewnij się również, <xref:System.Drawing.Graphics.TextRenderingHint%2A> dla <xref:System.Drawing.Graphics> jest <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg do mierzenia i czcionkę obiektu ustawić ją na Arial (punkt 16).  
  
-   Ustawia maksymalną szerokość ciągu.  
  
-   Tworzy obiekt do formatu ciągu i ustawia jej flag formatu <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  
  
-   Tworzy obiekt rozmiar do mierzenia ciąg.  
  
-   Mierzy rozmiar ciągu przy użyciu ciągu, obiekt czcionki maksymalną szerokość i format ciągu.  
  
-   Rysuje prostokąt red przy użyciu zmierzona rozmiar ciągu.  
  
-   Rysuje ciągu w narysowanego prostokąta.  
  
 Wynik jest pionowy prostokąt otaczającej pionowy ciąg.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#142)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#142)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#142)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat, out int charactersFitted, out int linesFilled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea, class System.Drawing.StringFormat stringFormat, [out] int32&amp; charactersFitted, [out] int32&amp; linesFilled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat,System.Int32@,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea, System::Drawing::StringFormat ^ stringFormat, [Runtime::InteropServices::Out] int % charactersFitted, [Runtime::InteropServices::Out] int % linesFilled);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
        <Parameter Name="charactersFitted" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="linesFilled" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do pomiaru.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> definiuje format tekstu ciągu.</param>
        <param name="layoutArea">
          <see cref="T:System.Drawing.SizeF" /> Struktura, która określa obszar maksymalny układu tekstu.</param>
        <param name="stringFormat">
          <see cref="T:System.Drawing.StringFormat" /> reprezentujący formatowania informacje, takie jak wierszami, ciągu.</param>
        <param name="charactersFitted">Liczba znaków w ciągu.</param>
        <param name="linesFilled">Liczba wierszy tekstu w ciągu.</param>
        <summary>Mierzy określony ciąg narysować z określonym <see cref="T:System.Drawing.Font" /> i sformatowane przy użyciu określonego <see cref="T:System.Drawing.StringFormat" />.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.SizeF" /> strukturę, która reprezentuje rozmiar ciągu, w jednostkach określonych we <see cref="P:System.Drawing.Graphics.PageUnit" /> właściwości, z <paramref name="text" /> parametru zgodnie z <paramref name="font" /> parametru i <paramref name="stringFormat" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> — Metoda jest przeznaczony dla użytku z poszczególnymi ciągi i obejmuje małej ilości miejsca dodatkowe przed i po ciągu, aby umożliwić ich symboli. Ponadto <xref:System.Drawing.Graphics.DrawString%2A> metoda dopasowuje symbolu punkty w celu zoptymalizowania jakości wyświetlania i może być wyświetlany ciąg węższe niż zgłoszony przez <xref:System.Drawing.Graphics.MeasureString%2A>. Aby uzyskać metryki odpowiednie do sąsiadujących ze sobą ciągów w układzie (na przykład podczas implementowania sformatowanego tekstu), użyj <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> metody lub jeden z <xref:System.Drawing.Graphics.MeasureString%2A> metody, która przyjmuje <xref:System.Drawing.StringFormat> i przekaż <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Upewnij się również <xref:System.Drawing.Graphics.TextRenderingHint%2A> dla <xref:System.Drawing.Graphics> jest <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg do mierzenia i obiektu czcionki ustawioną Arial (punkt 16)  
  
-   Ustawia rozmiar maksymalny układu parametrów.  
  
-   Tworzy obiekt do formatu ciągu i ustawia jej flag formatu <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  
  
-   Tworzy zmienne całkowitą `charactersFitted` i `linesFilled` i obiektu rozmiar do mierzenia ciąg.  
  
-   Mierzy rozmiar ciągu, określa liczbę znaków zainstalowane i linie wypełnione przy użyciu ciągu, obiekt czcionki, rozmiar maksymalny układ i format ciągu.  
  
-   Rysuje prostokąt red przy użyciu zmierzona rozmiar ciągu.  
  
-   Rysuje ciągu w narysowanego prostokąta.  
  
-   Rysuje wartości liczby znaków zainstalowane i wypełnione wiersze.  
  
 Wynik jest pionowy prostokąt otaczającej pionowy ciąg.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#140)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#140)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#140)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Mnoży transformacji świata tego <see cref="T:System.Drawing.Graphics" /> i określić <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">4 x 4 <see cref="T:System.Drawing.Drawing2D.Matrix" /> który mnoży transformacji świata.</param>
        <summary>Mnoży transformacji świata tego <see cref="T:System.Drawing.Graphics" /> i określić <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda dołącza macierzy określony przez `matrix` parametr tak, aby wynik `matrix` x transformacja świata.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy `transformMatrix` macierzy (dwa przez dwa macierzą oraz wektor tłumaczenia zero).  
  
-   Wykonuje translację macierzy transformacji wektor (200, 100).  
  
-   Obraca macierzy transformacji świata formularza systemu Windows przez 30 stopni, dołącza macierzy obrotu dla 30 stopni do postaci macierzy transformacji.  
  
-   Mnoży macierzy transformacji świata obrócony przez przetłumaczonego `transformMatrix`i dołącza `transformMatrix` do macierzy transformacji świata.  
  
-   Rysuje elipsę obrócony, przetłumaczonego.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#143)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#143)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#143)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="matrix">4 x 4 <see cref="T:System.Drawing.Drawing2D.Matrix" /> który mnoży transformacji świata.</param>
        <param name="order">Element członkowski <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> wyliczenie określające kolejność mnożenia.</param>
        <summary>Mnoży transformacji świata tego <see cref="T:System.Drawing.Graphics" /> i określić <see cref="T:System.Drawing.Drawing2D.Matrix" /> w określonej kolejności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Drawing.Drawing2D.MatrixOrder.Prepend> dla `order` parametr określa, że kolejność mnożenia `matrix` x transformacja świata. Wartość <xref:System.Drawing.Drawing2D.MatrixOrder.Append> dla `order` Określa, że kolejność mnożenia transformacja świata x `matrix`.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy `transformMatrix` macierzy (dwa przez dwa macierzą oraz wektor tłumaczenia zero).  
  
-   Wykonuje translację macierzy transformacji wektor (200, 100).  
  
-   Obraca macierzy transformacji świata formularza systemu Windows przez 30 stopni dołączanie macierzy obrotu dla 30 stopni do postaci macierzy transformacji.  
  
-   Mnoży macierzy transformacji świata obrócony przez przetłumaczonego `transformMatrix`, dołączanie `transformMatrix` do macierzy transformacji świata.  
  
-   Rysuje elipsę obrócony, przetłumaczonego.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#144)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#144)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#144)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PageScale">
      <MemberSignature Language="C#" Value="public float PageScale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 PageScale" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PageScale" />
      <MemberSignature Language="VB.NET" Value="Public Property PageScale As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float PageScale { float get(); void set(float value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia skalowanie między world i jednostek strony dla tego <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Ta właściwość określa wartość skalowania między world i jednostek strony dla tego <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Drawing.Graphics.PageScale%2A> i <xref:System.Drawing.Graphics.TranslateTransform%2A> elementów członkowskich do zmiany skali i pochodzenia po Rysuj prostokąt.  
  
 W tym przykładzie jest przeznaczony do użycia z formularzy systemu Windows. Wklej kod do formularza i wywołanie `ChangePageScaleAndTranslateTransform` metody podczas obsługi formularza <xref:System.Windows.Forms.Control.Paint> przekazywania zdarzeń `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.GraphicsProperties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#2)]
 [!code-vb[System.Drawing.GraphicsProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PageUnit">
      <MemberSignature Language="C#" Value="public System.Drawing.GraphicsUnit PageUnit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.GraphicsUnit PageUnit" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PageUnit" />
      <MemberSignature Language="VB.NET" Value="Public Property PageUnit As GraphicsUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::GraphicsUnit PageUnit { System::Drawing::GraphicsUnit get(); void set(System::Drawing::GraphicsUnit value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.GraphicsUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia jednostki miary używane dla współrzędnych strony w tym <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Jeden z <see cref="T:System.Drawing.GraphicsUnit" /> wartości innych niż <see cref="F:System.Drawing.GraphicsUnit.World" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Graficzny to jednostka miary używana dla współrzędnych strony w tym <xref:System.Drawing.Graphics>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje efekt zmiany <xref:System.Drawing.Graphics.PageUnit%2A> właściwości.  
  
 W tym przykładzie jest przeznaczony do użycia z formularzy systemu Windows. Wklej kod do formularza i wywołanie `ChangePageUnit` metody podczas obsługi formularza <xref:System.Windows.Forms.Control.Paint> przekazywania zdarzeń `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.GraphicsProperties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#3)]
 [!code-vb[System.Drawing.GraphicsProperties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <see cref="P:System.Drawing.Graphics.PageUnit" /> ustawiono <see cref="F:System.Drawing.GraphicsUnit.World" />, która nie jest jednostką fizycznych.</exception>
      </Docs>
    </Member>
    <Member MemberName="PixelOffsetMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PixelOffsetMode" />
      <MemberSignature Language="VB.NET" Value="Public Property PixelOffsetMode As PixelOffsetMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::PixelOffsetMode PixelOffsetMode { System::Drawing::Drawing2D::PixelOffsetMode get(); void set(System::Drawing::Drawing2D::PixelOffsetMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.PixelOffsetMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustaw wartość określającą, jak pikseli są przesuwane podczas renderowania tego <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Ta właściwość określa członkiem <see cref="T:System.Drawing.Drawing2D.PixelOffsetMode" /> — wyliczenie</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość umożliwia określenie albo wyższej jakości, wolniejsze renderowania lub niższą jakość, szybszego renderowania zawartości to <xref:System.Drawing.Graphics> obiektu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReleaseHdc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Uchwyt kontekstu urządzenia uzyskany przez poprzednie wywołanie wersje <see cref="M:System.Drawing.Graphics.GetHdc" /> to metoda <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReleaseHdc">
      <MemberSignature Language="C#" Value="public void ReleaseHdc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHdc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdc" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdc ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHdc();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Drawing.IDeviceContext.ReleaseHdc</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Uchwyt kontekstu urządzenia uzyskany przez poprzednie wywołanie wersje <see cref="M:System.Drawing.Graphics.GetHdc" /> to metoda <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.GetHdc%2A> i <xref:System.Drawing.Graphics.ReleaseHdc%2A> są dwie metody, które umożliwiają uzyskiwanie i zwolnić dojścia do urządzenia z systemem Windows. Należy zawsze wykonać wywołania <xref:System.Drawing.Graphics.GetHdc%2A> wywołaniem <xref:System.Drawing.Graphics.ReleaseHdc%2A> po zakończeniu z dojściem systemu Windows.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać dostęp do kodu niezarządzanego. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <altmember cref="T:System.Drawing.IDeviceContext" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHdc">
      <MemberSignature Language="C#" Value="public void ReleaseHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdc(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdc (hdc As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseHdc(IntPtr hdc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Dojście do kontekstu urządzenia uzyskany przez poprzednie wywołanie <see cref="M:System.Drawing.Graphics.GetHdc" /> to metoda <see cref="T:System.Drawing.Graphics" />.</param>
        <summary>Uchwyt kontekstu urządzenia uzyskany przez poprzednie wywołanie wersje <see cref="M:System.Drawing.Graphics.GetHdc" /> to metoda <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kontekst urządzenia jest strukturą systemu Windows na podstawie [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] definiuje zestaw obiektów graficznych i ich skojarzonych z nimi atrybutów, a także graficznego tryby, które mają wpływ na dane wyjściowe.  
  
 Wywołuje się <xref:System.Drawing.Graphics.GetHdc%2A> i <xref:System.Drawing.Graphics.ReleaseHdc%2A> metody muszą występować parami. W zakresie <xref:System.Drawing.Graphics.GetHdc%2A> i <xref:System.Drawing.Graphics.ReleaseHdc%2A> pary metod można zwykle wywołań tylko z [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] funkcji. Wywołuje w tym zakresie wprowadzone [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] metody <xref:System.Drawing.Graphics> wytworzonego `hdc` niepowodzenie parametru `ObjectBusy` błędu. Ponadto [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] ignoruje stanu zmian <xref:System.Drawing.Graphics> z `hdc` parametr podczas kolejnych operacji.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Pokazano w przykładzie wywołanie systemu Windows [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] funkcja do wykonania tych samych zadań [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> metody. Kod wykonuje następujące czynności:  
  
-   Definiuje współdziałanie <xref:System.Runtime.InteropServices.DllImportAttribute> atrybutu gdi32.dll plik DLL systemu Windows. Ta biblioteka DLL zawiera żądaną [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] funkcja która definiuje <xref:System.Drawing.Rectangle> funkcji w tej bibliotece DLL jako zewnętrzne.  
  
-   Tworzy red pióra.  
  
-   Za pomocą pióra, rysuje prostokąt na ekranie za pomocą [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics.DrawRectangle%2A> metody.  
  
-   Definiuje wewnętrznego wskaźnika typu zmienną `hdc` i ustawia wartość dojścia do kontekstu urządzenia formularza.  
  
-   Rysuje prostokąt na ekranie za pomocą [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <xref:System.Drawing.Rectangle> funkcji.  
  
-   Zwalnia reprezentowanej przez kontekst urządzenia `hdc` parametru.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#145)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#145)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#145)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać dostęp do kodu niezarządzanego. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="ReleaseHdcInternal">
      <MemberSignature Language="C#" Value="public void ReleaseHdcInternal (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseHdcInternal(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdcInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdcInternal (hdc As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseHdcInternal(IntPtr hdc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Dojście do kontekstu urządzenia.</param>
        <summary>Zwalnia dojścia do kontekstu urządzenia.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać dostęp do kodu niezarządzanego. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="RenderingOrigin">
      <MemberSignature Language="C#" Value="public System.Drawing.Point RenderingOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point RenderingOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.RenderingOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderingOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point RenderingOrigin { System::Drawing::Point get(); void set(System::Drawing::Point value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia pochodzenie renderowania <see cref="T:System.Drawing.Graphics" /> symulowanie i pędzlami ze stylem kreskowania.</summary>
        <value>A <see cref="T:System.Drawing.Point" /> strukturę, która reprezentuje początkowego symulacji 8 bitów na piksel i 16 bitów na piksel symulowanie i jest również używana do ustawiania początkowego pędzlami ze stylem kreskowania.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetClip">
      <MemberSignature Language="C#" Value="public void ResetClip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetClip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ResetClip" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetClip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetClip();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resetuje obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> nieskończone regionu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy obszar przycinania z <xref:System.Drawing.Graphics> to nieskończoność, że elementy <xref:System.Drawing.Graphics> Rysuje nie jest przycinana.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokąt z lewym górnym rogu na (0, 0) i ustawia obszar przycinania na prostokąt.  
  
-   Tworzy drugi prostokąt z lewym górnym rogu na (100, 100) i ustawia obszar przycinania na przecięciu prostokąta i bieżącego obszaru przycinania (prostokąt pierwszy).  
  
-   Wypełnia dużych prostokąt obejmującą zarówno poprzedniej prostokąty z niebieskim pędzla pełnego koloru.  
  
-   Resetuje nieskończone obszaru przycinania.  
  
-   Rysuje prostokąty wycinka dwóch regionach; Czarne pióro używa pierwszego Prostokątny wycinek i czerwone pióro dla drugiego obszaru przycinania.  
  
 Wynik jest tylko część wspólną dwóch prostokątów jest wypełniony niebieski.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#146)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#146)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#146)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetTransform">
      <MemberSignature Language="C#" Value="public void ResetTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetTransform() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ResetTransform" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetTransform ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetTransform();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resetuje macierzy transformacji świata tego <see cref="T:System.Drawing.Graphics" /> macierzy tożsamości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Macierzą reprezentuje przekształcenie z bez skalowania, obrotu lub tłumaczenia. Resetowanie transformacji świata tego <xref:System.Drawing.Graphics> macierzą oznacza jego transformacja świata nie zmienia geometrii przekształcone elementów.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Wykonuje translację transformacji świata formularza systemu Windows wektor (100, 0).  
  
-   Zapisuje stan grafiki formularza.  
  
-   Resetuje transformacji świata formularza do tożsamości i wypełnia prostokąt pędzla pełnego koloru czerwony.  
  
-   Przywraca stan przetłumaczonego grafiki i wypełnia prostokąt niebieski pędzla pełnego koloru.  
  
 Wynik jest niezrozumiały prostokąt wypełniony czerwony i przetłumaczonego prostokąt wypełnione niebieski.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#147)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#147)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#147)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Restore">
      <MemberSignature Language="C#" Value="public void Restore (System.Drawing.Drawing2D.GraphicsState gstate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restore(class System.Drawing.Drawing2D.GraphicsState gstate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Restore (gstate As GraphicsState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Restore(System::Drawing::Drawing2D::GraphicsState ^ gstate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gstate" Type="System.Drawing.Drawing2D.GraphicsState" />
      </Parameters>
      <Docs>
        <param name="gstate">
          <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> reprezentujący stan, do którego należy przywrócić to <see cref="T:System.Drawing.Graphics" />.</param>
        <summary>Przywraca stan to <see cref="T:System.Drawing.Graphics" /> stan reprezentowany przez <see cref="T:System.Drawing.Drawing2D.GraphicsState" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wywoływania <xref:System.Drawing.Graphics.Save%2A> metody <xref:System.Drawing.Graphics>, blok informacji, która przechowuje stan <xref:System.Drawing.Graphics> jest umieszczany na stosie. <xref:System.Drawing.Graphics.Save%2A> Metoda zwraca <xref:System.Drawing.Drawing2D.GraphicsState> identyfikujący ten blok informacji. Podczas przekazywania identyfikowanie <xref:System.Drawing.Drawing2D.GraphicsState> do <xref:System.Drawing.Graphics.Restore%2A> metoda, zostanie usunięta ze stosu blok informacji i służy do przywracania <xref:System.Drawing.Graphics> do stanu, istniał w momencie <xref:System.Drawing.Graphics.Save%2A> wywołania metody. Należy pamiętać, że <xref:System.Drawing.Drawing2D.GraphicsState> zwrócony przez wywołanie danego <xref:System.Drawing.Graphics.Save%2A> metody mogą zostać przekazane tylko raz do `Restore` metody.  
  
 Wywołań <xref:System.Drawing.Graphics.Save%2A> metody mogą być zagnieżdżane; oznacza to, że można wywołać <xref:System.Drawing.Graphics.Save%2A> metody kilka razy przed wywołaniem <xref:System.Drawing.Graphics.Restore%2A> metody. Zawsze należy wywołać <xref:System.Drawing.Graphics.Save%2A> metody blok informacji jest umieszczany na stosie i pojawi się <xref:System.Drawing.Drawing2D.GraphicsState> bloku informacji. Podczas przekazywania jednego z tych obiektów do <xref:System.Drawing.Graphics.Restore%2A> metody <xref:System.Drawing.Graphics> jest zwracana do stanu, istniał w momencie <xref:System.Drawing.Graphics.Save%2A> wywołania metody, zwrócona który określonego <xref:System.Drawing.Drawing2D.GraphicsState>. Blok informacji umieszczone na stosie przez to <xref:System.Drawing.Graphics.Save%2A> wywołania metody jest usuwana ze stosu, a wszystkie bloki informacji dotyczącymi ten stos po <xref:System.Drawing.Graphics.Save%2A> wywołania metody, które również zostaną usunięte.  
  
 Wywołuje się <xref:System.Drawing.Graphics.BeginContainer%2A> metody bloków informacyjnych miejsce na tym samym stosie jako wywołania <xref:System.Drawing.Graphics.Save%2A> metody. Podobnie jak <xref:System.Drawing.Graphics.Restore%2A> wywołania łączyć się z <xref:System.Drawing.Graphics.Save%2A> wywołać, <xref:System.Drawing.Graphics.EndContainer%2A> wywołanie metody łączyć się z <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody.  
  
 Podczas wywoływania <xref:System.Drawing.Graphics.Restore%2A> metody wszystkich bloków informacyjnych umieszczone na stosie (przez <xref:System.Drawing.Graphics.Save%2A> metody lub <xref:System.Drawing.Graphics.BeginContainer%2A> — metoda) po odpowiedniego wywołania <xref:System.Drawing.Graphics.Save%2A> metody zostaną usunięte ze stosu. Podobnie podczas wywoływania <xref:System.Drawing.Graphics.EndContainer%2A> metody wszystkich bloków informacyjnych umieszczone na stosie (przez <xref:System.Drawing.Graphics.Save%2A> — metoda lub <xref:System.Drawing.Graphics.BeginContainer%2A> — metoda) po odpowiedniego wywołania <xref:System.Drawing.Graphics.BeginContainer%2A> metody zostaną usunięte ze stosu.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Wykonuje translację transformacji świata formularza systemu Windows wektor (100, 0).  
  
-   Zapisuje stan grafiki formularza.  
  
-   Resetuje transformacji świata formularza do tożsamości i wypełnia prostokąt pędzla pełnego koloru czerwony.  
  
-   Przywraca stan przetłumaczonego grafiki i wypełnia drugi prostokąt niebieski pędzla pełnego koloru.  
  
 Wynik jest niezrozumiały prostokąt wypełniony czerwony i przetłumaczonego prostokąt wypełnione niebieski.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#148)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#148)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#148)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RotateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dotyczy określonej obrót macierzy transformacji tego <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.RotateTransform(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="angle">Kąt obrotu w stopniach.</param>
        <summary>Dotyczy określonej obrót macierzy transformacji tego <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacja obrotu obejmuje mnożenie macierzy transformacji przez macierz, której elementy są uzyskiwane z `angle` parametru. Ta metoda ma zastosowanie obrót, dołączając do macierzy transformacji.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Wykonuje translację macierzy transformacji świata formularza systemu Windows o wektor (100, 0).  
  
-   Obraca transformacji świata kąt 30 stopni dołączanie macierzy obrotu macierzy transformacji świata.  
  
-   Rysuje elipsę obrócony, przetłumaczonego piórem niebieski.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#149)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#149)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#149)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="angle">Kąt obrotu w stopniach.</param>
        <param name="order">Element członkowski <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> wyliczenia, który określa obrót dołączany czy jest dołączany na początku do przekształcenia macierzy.</param>
        <summary>Dotyczy określonej obrót macierzy transformacji <see cref="T:System.Drawing.Graphics" /> w określonej kolejności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacja obrotu obejmuje mnożenie macierzy transformacji przez macierz, której elementy są uzyskiwane z `angle` parametru. Ta metoda dołącza lub dołącza macierzy transformacji z <xref:System.Drawing.Graphics> przez macierzy obrotu zgodnie ze standardem `order` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Wykonuje translację macierzy transformacji świata formularza systemu Windows o wektor (100, 0).  
  
-   Obraca transformacji świata kąt 30 stopni, dodanie macierzy obrotu do macierzy transformacji świata z <xref:System.Drawing.Drawing2D.MatrixOrder.Append>.  
  
-   Rysuje elipsę przetłumaczonego, obrócony piórem niebieski.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#150)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#150)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#150)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsState Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsState Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Save" />
      <MemberSignature Language="VB.NET" Value="Public Function Save () As GraphicsState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsState ^ Save();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje bieżący stan to <see cref="T:System.Drawing.Graphics" /> i identyfikuje zapisany stan z <see cref="T:System.Drawing.Drawing2D.GraphicsState" />.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> reprezentujący zapisany stan <see cref="T:System.Drawing.Graphics" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wywoływania <xref:System.Drawing.Graphics.Save%2A> metody <xref:System.Drawing.Graphics>, blok informacji, która przechowuje stan <xref:System.Drawing.Graphics> jest umieszczany na stosie. <xref:System.Drawing.Graphics.Save%2A> Metoda zwraca <xref:System.Drawing.Drawing2D.GraphicsState> identyfikujący ten blok informacji. Podczas przekazywania identyfikowanie <xref:System.Drawing.Drawing2D.GraphicsState> do <xref:System.Drawing.Graphics.Restore%2A> metoda, zostanie usunięta ze stosu blok informacji i służy do przywracania <xref:System.Drawing.Graphics> do stanu, istniał w momencie <xref:System.Drawing.Graphics.Save%2A> wywołania metody. Należy pamiętać, że <xref:System.Drawing.Drawing2D.GraphicsState> zwrócony przez wywołanie danego <xref:System.Drawing.Graphics.Save%2A> metody mogą zostać przekazane tylko raz do <xref:System.Drawing.Graphics.Restore%2A> metody.  
  
 Wywołań <xref:System.Drawing.Graphics.Save%2A> metody mogą być zagnieżdżane; oznacza to, że można wywołać <xref:System.Drawing.Graphics.Save%2A> metody kilka razy przed wywołaniem <xref:System.Drawing.Graphics.Restore%2A> metody. Zawsze należy wywołać <xref:System.Drawing.Graphics.Save%2A> metody blok informacji jest umieszczany na stosie i pojawi się <xref:System.Drawing.Drawing2D.GraphicsState> bloku informacji. Podczas przekazywania jednego z tych obiektów do <xref:System.Drawing.Graphics.Restore%2A> metody <xref:System.Drawing.Graphics> jest zwracana do stanu, istniał w momencie <xref:System.Drawing.Graphics.Save%2A> wywołania metody, zwrócona który określonego <xref:System.Drawing.Drawing2D.GraphicsState>. Blok informacji umieszczone na stosie przez to <xref:System.Drawing.Graphics.Save%2A> wywołania metody jest usuwana ze stosu, a wszystkie bloki informacji dotyczącymi ten stos po <xref:System.Drawing.Graphics.Save%2A> wywołania metody, które również zostaną usunięte.  
  
 Wywołuje się <xref:System.Drawing.Graphics.BeginContainer%2A> metody bloków informacyjnych miejsce na tym samym stosie jako wywołania <xref:System.Drawing.Graphics.Save%2A> metody. Podobnie jak <xref:System.Drawing.Graphics.Restore%2A> wywołania łączyć się z <xref:System.Drawing.Graphics.Save%2A> wywołać, <xref:System.Drawing.Graphics.EndContainer%2A> wywołanie metody łączyć się z <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody.  
  
 Podczas wywoływania <xref:System.Drawing.Graphics.Restore%2A> metody wszystkich bloków informacyjnych umieszczone na stosie (przez <xref:System.Drawing.Graphics.Save%2A> metody lub <xref:System.Drawing.Graphics.BeginContainer%2A> — metoda) po odpowiedniego wywołania <xref:System.Drawing.Graphics.Save%2A> metody zostaną usunięte ze stosu. Podobnie podczas wywoływania <xref:System.Drawing.Graphics.EndContainer%2A> metody wszystkich bloków informacyjnych umieszczone na stosie (przez <xref:System.Drawing.Graphics.Save%2A> — metoda lub <xref:System.Drawing.Graphics.BeginContainer%2A> — metoda) po odpowiedniego wywołania <xref:System.Drawing.Graphics.BeginContainer%2A> metody zostaną usunięte ze stosu.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Wykonuje translację transformacji świata formularza systemu Windows wektor (100, 0).  
  
-   Zapisuje stan grafiki formularza.  
  
-   Resetuje transformacji świata formularza do tożsamości, (2 x 2 macierzą oraz tłumaczenia wektor zero) i wypełnia prostokąt pędzla pełnego koloru czerwony.  
  
-   Przywraca stan przetłumaczonego grafiki i wypełnia prostokąt niebieski pędzla pełnego koloru.  
  
 Wynik jest niezrozumiały czerwony wypełniony prostokąt po lewej stronie i przetłumaczonego prostokąt wypełnione blue po prawej stronie formularza.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#151)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#151)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#151)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScaleTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dotyczy określonej operacji skalowania macierzy transformacji <see cref="T:System.Drawing.Graphics" /> dołączając do macierzy transformacji obiektu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ScaleTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">Współczynnik skali w kierunku x.</param>
        <param name="sy">Współczynnik skali w kierunku y.</param>
        <summary>Dotyczy określonej operacji skalowania macierzy transformacji <see cref="T:System.Drawing.Graphics" /> dołączając do macierzy transformacji obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacja skalowania obejmuje mnożenie macierzy transformacji przez ukośnych macierzy, której elementy są (`sx`, `sy`, 1). Ta metoda dołącza macierzy transformacji z <xref:System.Drawing.Graphics> przez skalowania macierzy.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Obraca macierzy transformacji świata formularza systemu Windows przez 30 stopni.  
  
-   Skalowanie tej macierzy przez współczynnik 3 w kierunku x i o 1 w kierunku y dołączając skalowania transformacji.  
  
-   Rysuje prostokąt skalowana, obrócony piórem niebieski.  
  
 Wynik jest nadal prostokąta.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#152)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#152)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#152)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="sx">Współczynnik skali w kierunku x.</param>
        <param name="sy">Współczynnik skali w kierunku y.</param>
        <param name="order">Element członkowski <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> wyliczenia, która określa, czy operacja skalowania jest dołączany początku czy dołączany do macierzy transformacji.</param>
        <summary>Dotyczy określonej operacji skalowania macierzy transformacji <see cref="T:System.Drawing.Graphics" /> w określonej kolejności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacja skalowania obejmuje mnożenie macierzy transformacji przez ukośnych macierzy, której elementy są (`sx`, `sy`, 1). Ta metoda dołącza lub dołącza macierzy transformacji z <xref:System.Drawing.Graphics> przez skalowania macierzy zgodnie z `order` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Obraca macierzy transformacji świata formularza systemu Windows przez 30 stopni.  
  
-   Skaluje tej macierzy przez współczynnik 3 w kierunku x i o 1 w kierunku y przez dołączenie skalowania przekształcania z <xref:System.Drawing.Drawing2D.MatrixOrder.Append> elementu członkowskiego.  
  
-   Rysuje prostokąt obrócony, skalowany przy użyciu pióra niebieski.  
  
 Wynik jest równoległobok.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#153)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#153)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#153)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ustawia obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> do <see langword="Clip" /> właściwości określonego <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (path As GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">
          <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> reprezentujący nowy obszar przycinania.</param>
        <summary>Ustawia obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> do określonego <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ścieżka grafiki reprezentowany przez `path` parametru nie są zamknięte, dodatkowe segmentu jest dodawana z ostatniego punktu do pierwszego punktu, aby zamknąć ścieżkę.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ścieżkę grafiki i dodaje elipsy do ścieżki.  
  
-   Ustawia ścieżkę eliptycznej obszaru przycinania.  
  
-   Wypełnia duży prostokąt z czarnym pędzla pełnego koloru.  
  
 Wynik jest elipsy wypełniony, czarny.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#154)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#154)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#154)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Graphics g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Graphics g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Graphics)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (g As Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Graphics ^ g);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="g">
          <see cref="T:System.Drawing.Graphics" /> z którego podjęcie nowy obszar przycinania.</param>
        <summary>Ustawia obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> do <see langword="Clip" /> właściwości określonego <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> program obsługi zdarzeń, jak również `thisForm`, <xref:System.Windows.Forms.Form> dla przykładu. Kod wykonuje następujące czynności:  
  
-   Tworzy tymczasowy <xref:System.Drawing.Graphics> z `thisForm` <xref:System.Windows.Forms.Form> przykładu.  
  
-   Ustawia obszar przycinania tymczasowych <xref:System.Drawing.Graphics> do kwadratu mała.  
  
-   Aktualizacje z tymczasowy obszar przycinania obiektu graficznego formularza <xref:System.Drawing.Graphics>.  
  
-   Wypełnia duży prostokąt z czarnym pędzla pełnego koloru.  
  
 Wynik jest mały, wypełniony, czarny kwadrat.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#156)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#156)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#156)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Rectangle rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która reprezentuje nowy obszar przycinania.</param>
        <summary>Ustawia obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> na prostokąt określony przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy mały prostokąt dla obszaru przycinania.  
  
-   Ustawia obszar przycinania na prostokąt.  
  
-   Wypełnia duży prostokąt z czarnym pędzla pełnego koloru.  
  
 Wynik jest mały, wypełniony, czarny prostokąt.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#158)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#158)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#158)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (rect As RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::RectangleF rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która reprezentuje nowy obszar przycinania.</param>
        <summary>Ustawia obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> na prostokąt określony przez <see cref="T:System.Drawing.RectangleF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy mały prostokąt dla obszaru przycinania.  
  
-   Ustawia obszar przycinania na prostokąt.  
  
-   Wypełnia duży prostokąt z czarnym pędzla pełnego koloru.  
  
 Wynik jest mały, wypełniony, czarny prostokąt.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#160)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#160)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#160)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Drawing2D.GraphicsPath path, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Drawing2D.GraphicsPath path, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Drawing2D::GraphicsPath ^ path, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="path">
          <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> Aby połączyć.</param>
        <param name="combineMode">Element członkowski <see cref="T:System.Drawing.Drawing2D.CombineMode" /> wyliczenia, który określa operacji łączenia przy użyciu.</param>
        <summary>Ustawia obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> wynik określonej operacji łączenia bieżący obszar przycinania i określonego <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ścieżka grafiki reprezentowany przez `path` parametru nie są zamknięte, dodatkowe segmentu jest dodawana z ostatniego punktu do pierwszego punktu, aby zamknąć ścieżkę.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ścieżkę grafiki i dodaje elipsy do ścieżki.  
  
-   Ustawia obszar przycinania na ścieżkę eliptycznej z <xref:System.Drawing.Drawing2D.CombineMode.Replace> elementu członkowskiego.  
  
-   Wypełnia duży prostokąt z czarnym pędzla pełnego koloru.  
  
 Wynik jest elipsy wypełniony, czarny.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#155)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#155)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#155)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Graphics g, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Graphics g, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Graphics,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Graphics ^ g, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="g">
          <see cref="T:System.Drawing.Graphics" /> która określa obszar przycinania połączyć.</param>
        <param name="combineMode">Element członkowski <see cref="T:System.Drawing.Drawing2D.CombineMode" /> wyliczenia, który określa operacji łączenia przy użyciu.</param>
        <summary>Ustawia obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> do wyniku określonego łączenie operacji bieżący obszar przycinania i <see cref="P:System.Drawing.Graphics.Clip" /> właściwości określonego <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> program obsługi zdarzeń, jak również `thisForm`, <xref:System.Windows.Forms.Form> dla przykładu. Kod wykonuje następujące czynności:  
  
-   Tworzy tymczasowy <xref:System.Drawing.Graphics> z `thisForm` <xref:System.Windows.Forms.Form> przykładu.  
  
-   Ustawia obszar przycinania tymczasowych <xref:System.Drawing.Graphics> do kwadratu mała.  
  
-   Aktualizuje obszaru przycinania formularza obiektu graficznego do tej nowej <xref:System.Drawing.Graphics> z <xref:System.Drawing.Drawing2D.CombineMode.Replace> elementu członkowskiego.  
  
-   Wypełnia duży prostokąt z czarnym pędzla pełnego koloru.  
  
 Wynik jest mały, wypełniony, czarny kwadrat.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#157)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#157)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#157)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Rectangle rect, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.Rectangle rect, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Rectangle rect, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura połączyć.</param>
        <param name="combineMode">Element członkowski <see cref="T:System.Drawing.Drawing2D.CombineMode" /> wyliczenia, który określa operacji łączenia przy użyciu.</param>
        <summary>Ustawia obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> wynik określonej operacji łączenia, a bieżący obszar przycinania na prostokąt określony przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy mały prostokąt dla obszaru przycinania.  
  
-   Ustawia obszar przycinania na prostokąt z <xref:System.Drawing.Drawing2D.CombineMode.Replace> elementu członkowskiego.  
  
-   Wypełnia duży prostokąt z czarnym pędzla pełnego koloru.  
  
 Wynik jest mały, wypełniony, czarny prostokąt.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#159)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#159)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#159)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.RectangleF rect, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.RectangleF rect, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.RectangleF,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::RectangleF rect, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura połączyć.</param>
        <param name="combineMode">Element członkowski <see cref="T:System.Drawing.Drawing2D.CombineMode" /> wyliczenia, który określa operacji łączenia przy użyciu.</param>
        <summary>Ustawia obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> wynik określonej operacji łączenia, a bieżący obszar przycinania na prostokąt określony przez <see cref="T:System.Drawing.RectangleF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy mały prostokąt dla obszaru przycinania.  
  
-   Ustawia obszar przycinania na prostokąt z <xref:System.Drawing.Drawing2D.CombineMode.Replace> elementu członkowskiego.  
  
-   Wypełnia duży prostokąt z czarnym pędzla pełnego koloru.  
  
 Wynik jest mały, wypełniony, czarny prostokąt.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#161)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#161)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#161)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Region region, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Region region, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Region,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Region ^ region, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="region">
          <see cref="T:System.Drawing.Region" /> Aby połączyć.</param>
        <param name="combineMode">Element członkowski z <see cref="T:System.Drawing.Drawing2D.CombineMode" /> wyliczenia, który określa operacji łączenia przy użyciu.</param>
        <summary>Ustawia obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> wynik określonej operacji łączenia bieżący obszar przycinania i określonego <see cref="T:System.Drawing.Region" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy mały prostokąt dla obszaru przycinania.  
  
-   Ustawia obszar przycinania na prostokąt z <xref:System.Drawing.Drawing2D.CombineMode.Replace> elementu członkowskiego.  
  
-   Wypełnia duży prostokąt z czarnym pędzla pełnego koloru.  
  
 Wynik jest mały, wypełniony, czarny prostokąt.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#162)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#162)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#162)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SmoothingMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.SmoothingMode SmoothingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.SmoothingMode SmoothingMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.SmoothingMode" />
      <MemberSignature Language="VB.NET" Value="Public Property SmoothingMode As SmoothingMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::SmoothingMode SmoothingMode { System::Drawing::Drawing2D::SmoothingMode get(); void set(System::Drawing::Drawing2D::SmoothingMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.SmoothingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia jakość renderowania tego <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Jeden z <see cref="T:System.Drawing.Drawing2D.SmoothingMode" /> wartości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tryb wygładzania Określa, czy linie, krzywe i krawędzi wypełniony obszarów używać Wygładzanie (nazywanych również antialiasing). Jedynym wyjątkiem jest ścieżka pędzle gradientów podlega tryb wygładzania. Obszary wypełnione przy użyciu <xref:System.Drawing.Drawing2D.PathGradientBrush> mają być renderowane bez względu na to samo (alias) <xref:System.Drawing.Graphics.SmoothingMode%2A> właściwości.  
  
   
  
## Examples  
 Następująca metoda pokazuje wpływ ustawienia <xref:System.Drawing.Pen.DashCap%2A>, <xref:System.Drawing.Pen.DashPattern%2A>, i <xref:System.Drawing.Graphics.SmoothingMode%2A> właściwości. Na poniższej ilustracji przedstawiono przykład danych wyjściowych.  
  
 ![Wiersze z włączonymi i wyłączonymi wygładzanie zastosowane. ] (~/add/media/gdi-smoothingmode.png "Wiersze z włączonymi i wyłączonymi wygładzanie zastosowane.")  
  
 W tym przykładzie jest przeznaczony do użycia z formularzy systemu Windows. Wklej kod do formularza i wywołanie `ShowPensAndSmoothingMode` metody podczas obsługi formularza <xref:System.Windows.Forms.Control.Paint> przekazywania zdarzeń `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.PensExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.PensExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextContrast">
      <MemberSignature Language="C#" Value="public int TextContrast { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextContrast" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.TextContrast" />
      <MemberSignature Language="VB.NET" Value="Public Property TextContrast As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextContrast { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość korekcji gamma renderowanie tekstu.</summary>
        <value>Wartość korekcji gamma używany do renderowania antyaliasowany i ClearType tekstu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość korekcji gamma musi należeć do zakresu od 0 do 12. Wartość domyślna to 4.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie <xref:System.Drawing.Graphics.TextRenderingHint%2A> i <xref:System.Drawing.Graphics.TextContrast%2A> właściwości.  
  
 W tym przykładzie jest przeznaczony do użycia z formularzy systemu Windows. Wklej kod do formularza i wywołanie `ChangeTextRenderingHintAndTextContrast` metody podczas obsługi formularza <xref:System.Windows.Forms.Control.Paint> przekazywania zdarzeń `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.GraphicsProperties#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#5)]
 [!code-vb[System.Drawing.GraphicsProperties#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextRenderingHint">
      <MemberSignature Language="C#" Value="public System.Drawing.Text.TextRenderingHint TextRenderingHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Text.TextRenderingHint TextRenderingHint" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.TextRenderingHint" />
      <MemberSignature Language="VB.NET" Value="Public Property TextRenderingHint As TextRenderingHint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Text::TextRenderingHint TextRenderingHint { System::Drawing::Text::TextRenderingHint get(); void set(System::Drawing::Text::TextRenderingHint value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Text.TextRenderingHint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tryb renderowania tekstu skojarzony z tym <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Jeden z <see cref="T:System.Drawing.Text.TextRenderingHint" /> wartości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wskazówkę dotyczącą renderowania tekstu określa, czy tekst renderuje z antialiasingu.  
  
> [!NOTE]
>  Nie należy używać <xref:System.Drawing.Graphics.CompositingMode%2A> wartość właściwości <xref:System.Drawing.Drawing2D.CompositingMode.SourceCopy> podczas <xref:System.Drawing.Graphics.TextRenderingHint%2A> właściwość jest ustawiona na <xref:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit>. Może wystąpić wyjątek lub obrazu może nie być wyświetlana poprawnie.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie <xref:System.Drawing.Graphics.TextRenderingHint%2A> i <xref:System.Drawing.Graphics.TextContrast%2A> właściwości.  
  
 W tym przykładzie jest przeznaczony do użycia z formularzy systemu Windows. Wklej kod do formularza i wywołanie `ChangeTextRenderingHintAndTextContrast` metody podczas obsługi formularza <xref:System.Windows.Forms.Control.Paint> przekazywania zdarzeń `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.GraphicsProperties#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#5)]
 [!code-vb[System.Drawing.GraphicsProperties#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.Matrix Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.Matrix Transform" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Property Transform As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::Matrix ^ Transform { System::Drawing::Drawing2D::Matrix ^ get(); void set(System::Drawing::Drawing2D::Matrix ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia kopię transformacji świata geometryczne, w tym <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Kopię <see cref="T:System.Drawing.Drawing2D.Matrix" /> reprezentujący transformacji świata geometryczne, w tym <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 GDI + używa trzech przestrzeni współrzędnych: world, strony i urządzenia. Współrzędnych świata są współrzędne użyta do modelowania określonego world grafiki i współrzędne, które są przekazywane do metody w programie .NET Framework. Układ współrzędnych używany przez powierzchni rysowania, takich jak formularz lub formant można znaleźć współrzędnych strony. Współrzędne urządzenia są współrzędne używany przez urządzenie fizyczne sformułowane, takich jak ekranu lub drukarki. <xref:System.Drawing.Graphics.Transform%2A> Właściwość reprezentuje transformacji świata, który mapuje współrzędnych świata na współrzędnych strony.  
  
 Ponieważ zwracany macierzy i przez <xref:System.Drawing.Graphics.Transform%2A> właściwość kopię przekształcenia geometryczne, należy usunąć macierzy, gdy nie są już potrzebne.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TransformPoints">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Przekształca tablicę punktów z jednej przestrzeni współrzędnych do drugiego za pomocą bieżącego transformacji świata i strony tego <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.Point[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformPoints(valuetype System.Drawing.Drawing2D.CoordinateSpace destSpace, valuetype System.Drawing.Drawing2D.CoordinateSpace srcSpace, valuetype System.Drawing.Point[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Point[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransformPoints (destSpace As CoordinateSpace, srcSpace As CoordinateSpace, pts As Point())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransformPoints(System::Drawing::Drawing2D::CoordinateSpace destSpace, System::Drawing::Drawing2D::CoordinateSpace srcSpace, cli::array &lt;System::Drawing::Point&gt; ^ pts);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="srcSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="pts" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="destSpace">Element członkowski <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> wyliczenie określający przestrzeni współrzędnych docelowego.</param>
        <param name="srcSpace">Element członkowski <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> wyliczenie określający przestrzeni współrzędnych źródła.</param>
        <param name="pts">Tablica <see cref="T:System.Drawing.Point" /> struktur, które reprezentuje punkty do przekształcania.</param>
        <summary>Przekształca tablicę punktów z jednej przestrzeni współrzędnych do drugiego za pomocą bieżącego transformacji świata i strony tego <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy dwa punkty i niebieski Rysuje między nimi.  
  
-   Ustawia transformacji świata tłumaczenie ilości 40 w kierunku x i 30 w kierunku y.  
  
-   Przekształca punkty z współrzędnych świata (<xref:System.Drawing.Drawing2D.CoordinateSpace.World>) do współrzędnych strony (<xref:System.Drawing.Drawing2D.CoordinateSpace.Page>).  
  
-   Resetuje transformacji świata tożsamości.  
  
-   Rysuje linię red między punktami po przekształceniu.  
  
 Wynik jest niebieski wiersza i przetłumaczonego wiersza red poniżej.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#163)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#163)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#163)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.PointF[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformPoints(valuetype System.Drawing.Drawing2D.CoordinateSpace destSpace, valuetype System.Drawing.Drawing2D.CoordinateSpace srcSpace, valuetype System.Drawing.PointF[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.PointF[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransformPoints (destSpace As CoordinateSpace, srcSpace As CoordinateSpace, pts As PointF())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransformPoints(System::Drawing::Drawing2D::CoordinateSpace destSpace, System::Drawing::Drawing2D::CoordinateSpace srcSpace, cli::array &lt;System::Drawing::PointF&gt; ^ pts);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="srcSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="pts" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="destSpace">Element członkowski <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> wyliczenie określający przestrzeni współrzędnych docelowego.</param>
        <param name="srcSpace">Element członkowski <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> wyliczenie określający przestrzeni współrzędnych źródła.</param>
        <param name="pts">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które reprezentują punkty do przekształcenia.</param>
        <summary>Przekształca tablicę punktów z jednej przestrzeni współrzędnych do drugiego za pomocą bieżącego transformacji świata i strony tego <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy dwa punkty i niebieski Rysuje między nimi.  
  
-   Ustawia transformacji świata tłumaczenie ilości 40 w kierunku x i 30 w kierunku y.  
  
-   Przekształca punkty z współrzędnych świata (<xref:System.Drawing.Drawing2D.CoordinateSpace.World>) do współrzędnych strony (<xref:System.Drawing.Drawing2D.CoordinateSpace.Page>).  
  
-   Resetuje transformacji świata tożsamości i rysuje czerwony między punktami po przekształceniu.  
  
 Wynik jest niebieski wiersza i przetłumaczonego wiersza red poniżej.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#164)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#164)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#164)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wykonuje translację obszaru przycinania tego <see cref="T:System.Drawing.Graphics" /> przez podana w poziomie i w pionie kierunkach.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateClip">
      <MemberSignature Language="C#" Value="public void TranslateClip (int dx, int dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateClip(int32 dx, int32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateClip(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateClip (dx As Integer, dy As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateClip(int dx, int dy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Int32" />
        <Parameter Name="dy" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dx">Współrzędna x tłumaczenia.</param>
        <param name="dy">Współrzędna y tłumaczenia.</param>
        <summary>Wykonuje translację obszaru przycinania tego <see cref="T:System.Drawing.Graphics" /> przez podana w poziomie i w pionie kierunkach.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokąta obszaru przycinania.  
  
-   Ustawia obszar przycinania na prostokąt.  
  
-   Wykonuje translację obszaru przycinania wektor (50, 50).  
  
-   Wypełnia duży prostokąt z czarnym pędzla pełnego koloru.  
  
 Wynik jest przetłumaczony, mała, czarny prostokąt.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#165)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#165)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#165)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateClip">
      <MemberSignature Language="C#" Value="public void TranslateClip (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateClip(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateClip(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateClip (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateClip(float dx, float dy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">Współrzędna x tłumaczenia.</param>
        <param name="dy">Współrzędna y tłumaczenia.</param>
        <summary>Wykonuje translację obszaru przycinania tego <see cref="T:System.Drawing.Graphics" /> przez podana w poziomie i w pionie kierunkach.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokąta obszaru przycinania.  
  
-   Ustawia obszar przycinania na prostokąt.  
  
-   Wykonuje translację obszaru przycinania wektor (50.0F, 50.0F).  
  
-   Wypełnia duży prostokąt z czarnym pędzla pełnego koloru.  
  
 Wynik jest przetłumaczony, mała, czarny prostokąt.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#166)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#166)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#166)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zmienia układ współrzędnych punktu początkowego przez poprzedzenie jej tłumaczenie określonej w macierzy transformacji to <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">Współrzędna x tłumaczenia.</param>
        <param name="dy">Współrzędna y tłumaczenia.</param>
        <summary>Zmienia układ współrzędnych punktu początkowego przez poprzedzenie jej tłumaczenie określonej w macierzy transformacji to <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Źródło ma zazwyczaj lewej górnego rogu powierzchni do rysowania.  Operacja tłumaczenia obejmuje mnożenie macierzy transformacji przez macierz jest której część tłumaczenia `dx` i `dy` parametrów. Ta metoda ma zastosowanie tłumaczenia dołączając macierzy tłumaczenia macierzy transformacji.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Obraca macierzy transformacji świata formularza systemu Windows o 30.0F stopni.  
  
-   Przenosi punkt początkowy grafiki obiektu przez wywołanie metody <xref:System.Drawing.Graphics.TranslateTransform%2A>, dołączanie tłumaczenia do macierzy transformacji.  
  
-   Rysuje elipsę przetłumaczonego, obrócony piórem niebieski.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#167)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#167)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#167)]  
  
 Na poniższej ilustracji przedstawiono dane wyjściowe uruchomionych w poprzednim przykładzie kodu.  
  
 ![Tłumaczone i przekształcony elipsy](~/add/media/ndp-tranlatetransform.png "tłumaczone i przekształcony wielokropka")  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="dx">Współrzędna x tłumaczenia.</param>
        <param name="dy">Współrzędna y tłumaczenia.</param>
        <param name="order">Element członkowski <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> wyliczenie określająca, czy tłumaczenia jest dołączany początku czy dołączany do macierzy transformacji.</param>
        <summary>Zmienia pochodzenia współrzędnych uwzględniając tłumaczenia określonej macierzy transformacji <see cref="T:System.Drawing.Graphics" /> w określonej kolejności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacja tłumaczenia obejmuje mnożenie macierzy transformacji przez macierz jest której część tłumaczenia `dx` i `dy` parametrów. Ta metoda dołącza lub dołącza macierzy transformacji z <xref:System.Drawing.Graphics> przez macierzy tłumaczenia zgodnie z `order` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest przeznaczony do użytku z formularzy systemu Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który jest parametrem <xref:System.Windows.Forms.Control.Paint> obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Obraca macierzy transformacji świata formularza systemu Windows o 30.0F stopni.  
  
-   Przenosi obiekt graphics pochodzenia przez wywołanie metody <xref:System.Drawing.Graphics.TranslateTransform%2A>, dołączanie tłumaczenia macierzy transformacji świata.  
  
-   Rysuje elipsę obrócony, przetłumaczonego piórem niebieski.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#168)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#168)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#168)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisibleClipBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF VisibleClipBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF VisibleClipBounds" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.VisibleClipBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VisibleClipBounds As RectangleF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::RectangleF VisibleClipBounds { System::Drawing::RectangleF get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera prostokąt ograniczający obszaru przycinania widoczne tego <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>A <see cref="T:System.Drawing.RectangleF" /> strukturę, która reprezentuje prostokąt ograniczający dla regionu widoczne wycinka <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jednostką wynikowy prostokąt określony przez <xref:System.Drawing.Graphics.PageUnit%2A> właściwości. Wartość jednostki jest pikseli. A <xref:System.Drawing.Graphics> jest zazwyczaj skojarzony z formantem i pochodzenia prostokąt będzie względem obszaru klienckiego formantu.  
  
 Obszar przycinania widoczny jest przecięcia obszaru przycinania tego <xref:System.Drawing.Graphics> i obszaru przycinania okna.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>