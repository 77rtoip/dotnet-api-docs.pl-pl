<Type Name="Graphics" FullName="System.Drawing.Graphics">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9207695453282e660bd1743c5458ee211c87c426" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51939840" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Graphics : MarshalByRefObject, IDisposable, System.Drawing.IDeviceContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Graphics extends System.MarshalByRefObject implements class System.Drawing.IDeviceContext, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Graphics" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Graphics&#xA;Inherits MarshalByRefObject&#xA;Implements IDeviceContext, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Graphics sealed : MarshalByRefObject, IDisposable, System::Drawing::IDeviceContext" />
  <TypeSignature Language="F#" Value="type Graphics = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable&#xA;    interface IDeviceContext" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Drawing.IDeviceContext</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Hermetyzuje powierzchnię rysunku GDI +. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics> Klasa dostarcza metody dla Rysowanie obiektów do urządzenia. Element <xref:System.Drawing.Graphics> jest skojarzony z kontekstem określonego urządzenia.  
  
 Możesz uzyskać <xref:System.Drawing.Graphics> obiektu przez wywołanie metody <xref:System.Windows.Forms.Control.CreateGraphics%2A?displayProperty=nameWithType> metody na obiekt, który dziedziczy z <xref:System.Windows.Forms.Control?displayProperty=nameWithType>, lub dzięki obsłudze kontrolki <xref:System.Windows.Forms.Control.Paint?displayProperty=nameWithType> zdarzeń i uzyskiwania dostępu do <xref:System.Windows.Forms.PaintEventArgs.Graphics%2A> właściwość <xref:System.Windows.Forms.PaintEventArgs?displayProperty=nameWithType> klasy. Można również utworzyć <xref:System.Drawing.Graphics> obiektu na podstawie obrazu za pomocą <xref:System.Drawing.Graphics.FromImage%2A> metody. Aby uzyskać więcej informacji o tworzeniu <xref:System.Drawing.Graphics> obiektu, zobacz [porady: Tworzenie obiektów graficznych do rysowania](~/docs/framework/winforms/advanced/how-to-create-graphics-objects-for-drawing.md).  
  
 Można narysować wiele różne kształty i linie, które znajdują się za pomocą <xref:System.Drawing.Graphics> obiektu. Aby uzyskać więcej informacji na temat Rysowanie linii i kształtów, zobacz konkretne `Draw` *GraphicalElement* metody dla wiersza lub chcemy narysować kształt. Te metody obejmują <xref:System.Drawing.Graphics.DrawLine%2A>, <xref:System.Drawing.Graphics.DrawArc%2A>, <xref:System.Drawing.Graphics.DrawClosedCurve%2A>, <xref:System.Drawing.Graphics.DrawPolygon%2A>, i <xref:System.Drawing.Graphics.DrawRectangle%2A>. Aby uzyskać więcej informacji na temat Rysowanie linii i kształtów, zobacz [za pomocą pióra, aby rysować linie i kształty](~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md) i [używanie pędzla do wypełnienia kształtów](~/docs/framework/winforms/advanced/using-a-brush-to-fill-shapes.md).  
  
 Można też rysować przy użyciu obrazów i ikon <xref:System.Drawing.Graphics.DrawImage%2A> i <xref:System.Drawing.Graphics.DrawIcon%2A> metod, odpowiednio. Na transfer blok bitowy kolorów danych na ekranie powierzchni rysowania <xref:System.Drawing.Graphics> obiektu, zobacz <xref:System.Drawing.Graphics.CopyFromScreen%2A>. Aby uzyskać więcej informacji o tym, jak rysowanie obrazów z <xref:System.Drawing.Graphics> obiektu, zobacz [Praca z obrazami, map bitowych, ikon i metapliki](~/docs/framework/winforms/advanced/working-with-images-bitmaps-icons-and-metafiles.md).  
  
 Ponadto można manipulować w układzie współrzędnych posługują się <xref:System.Drawing.Graphics> obiektu. Aby uzyskać więcej informacji na układ współrzędnych i sposoby manipulowania go, zobacz [systemy i przekształcenia współrzędnych](~/docs/framework/winforms/advanced/coordinate-systems-and-transformations.md).  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> obiektu. <xref:System.Windows.Forms.PaintEventArgs> Nosi nazwę obiektu `e` i jest parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG. Plik o nazwie SampImag.jpg i znajduje się w folderze przykładu.  
  
-   Tworzy punkt, w którym należy narysować w lewym górnym rogu obrazu.  
  
-   Rysuje nieskalowanego obrazu na ekranie przy użyciu <xref:System.Drawing.Graphics> obiektu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#40)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#40)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#40)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/162861f9-f050-445e-8abb-b2c43a918b8b">Porady: tworzenie obiektów graficznych do rysowania</related>
    <related type="Article" href="https://msdn.microsoft.com/library/eb0f6d6f-9e52-4167-9592-ff4b82fb5869">Wprowadzenie do programowania grafiki</related>
    <related type="Article" href="https://msdn.microsoft.com/library/6207cad1-7a34-4bd6-bfc1-db823ca7a73e">Zarządzanie stanem obiektu graficznego</related>
  </Docs>
  <Members>
    <Member MemberName="AddMetafileComment">
      <MemberSignature Language="C#" Value="public void AddMetafileComment (byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddMetafileComment(unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.AddMetafileComment(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddMetafileComment (data As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddMetafileComment(cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.AddMetafileComment : byte[] -&gt; unit" Usage="graphics.AddMetafileComment data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="data">Tablica bajtów, która zawiera komentarz.</param>
        <summary>Dodaje komentarz do bieżącego <see cref="T:System.Drawing.Imaging.Metafile" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest prawidłowa tylko wtedy, gdy ten <xref:System.Drawing.Graphics> jest skojarzony z <xref:System.Drawing.Imaging.Metafile>.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń oraz `thisForm`, <xref:System.Windows.Forms.Form> dla przykładu. Kod wykonuje następujące czynności:  
  
-   Tworzy tymczasową <xref:System.Drawing.Graphics> tworzenia metaplik i pobiera `hdc`, dojścia do jego kontekstu urządzenia.  
  
-   Tworzy nowe przy użyciu metaplik `hdc`.  
  
-   Tworzy <xref:System.Drawing.Graphics> do wyświetlenia metaplik z <xref:System.Drawing.Imaging.Metafile>.  
  
-   Rysuje prostokąt metaplik.  
  
-   Dodaje komentarz do metaplik.  
  
-   Usuwa <xref:System.Drawing.Graphics> dla metaplik — która zamyka metaplik.  
  
-   Usuwa metaplik.  
  
-   Zwalnia tymczasowy `hdc`.  
  
-   Usuwa tymczasowy <xref:System.Drawing.Graphics>.  
  
-   Tworzy metaplik drugi z utworzonego wcześniej pliku.  
  
-   Rysuje metaplik do ekranu.  
  
-   Usuwa metaplik.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginContainer">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje bieżący stan to kontenerów grafiki <see cref="T:System.Drawing.Graphics" /> otwiera i używa nowego kontenera grafiki.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer () As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer();" />
      <MemberSignature Language="F#" Value="member this.BeginContainer : unit -&gt; System.Drawing.Drawing2D.GraphicsContainer" Usage="graphics.BeginContainer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje bieżący stan to kontenerów grafiki <see cref="T:System.Drawing.Graphics" /> otwiera i używa nowego kontenera grafiki.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> reprezentujący stan to <see cref="T:System.Drawing.Graphics" /> w momencie wywołania metody.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej metody za pomocą <xref:System.Drawing.Graphics.EndContainer%2A> metodą tworzenia zagnieżdżonych kontenerów grafiki. Kontenery grafiki zachowuje stan grafiki, takich jak przekształcenie, obszaru przycinania i właściwości w renderingu.  
  
 Gdy wywołujesz <xref:System.Drawing.Graphics.BeginContainer%2A> metody <xref:System.Drawing.Graphics>, blok informacji, który zawiera stan <xref:System.Drawing.Graphics> jest umieszczany na stosie. <xref:System.Drawing.Graphics.BeginContainer%2A> Metoda zwraca <xref:System.Drawing.Drawing2D.GraphicsContainer> określający, że blok informacji. Podczas przekazywania identyfikujący obiekt do <xref:System.Drawing.Graphics.EndContainer%2A> metody blok informacji jest usuwany ze stosu i służy do przywracania <xref:System.Drawing.Graphics> stan był w momencie <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody.  
  
 Kontenery mogą być zagnieżdżone; oznacza to, można wywołać <xref:System.Drawing.Graphics.BeginContainer%2A> metoda kilka razy przed wywołaniem <xref:System.Drawing.Graphics.EndContainer%2A> metody. Zawsze należy wywołać <xref:System.Drawing.Graphics.BeginContainer%2A> metody blok informacji jest umieszczany na stosie i pojawi się <xref:System.Drawing.Drawing2D.GraphicsContainer> bloku informacji. Gdy jeden z tych obiektów do przekazania <xref:System.Drawing.Graphics.EndContainer%2A> metody <xref:System.Drawing.Graphics> zwracany jest stan był w momencie <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody, które są zwracane, określonego <xref:System.Drawing.Drawing2D.GraphicsContainer>. Blok informacji umieszczenie w stosie, przez który <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody jest usuwany ze stosu i wszystkich bloków informacyjnych umieszczone na ten stos po tym <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody także zostaną usunięte.  
  
 Wywołania <xref:System.Drawing.Graphics.Save%2A> bloków informacyjnych miejscu metody na tym samym stosie jako wywołania <xref:System.Drawing.Graphics.BeginContainer%2A> metody. Podobnie jak <xref:System.Drawing.Graphics.EndContainer%2A> wywołania metody jest powiązany z <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody <xref:System.Drawing.Graphics.Restore%2A> wywołania metody jest powiązany z <xref:System.Drawing.Graphics.Save%2A> wywołania metody.  
  
 Podczas wywoływania <xref:System.Drawing.Graphics.EndContainer%2A> metody wszystkich bloków informacyjnych umieszczenie w stosie (przez <xref:System.Drawing.Graphics.Save%2A> metody lub <xref:System.Drawing.Graphics.BeginContainer%2A> metody) po odpowiedniego wywołania <xref:System.Drawing.Graphics.BeginContainer%2A> metody zostaną usunięte ze stosu. Podobnie, jeśli wywołasz <xref:System.Drawing.Graphics.Restore%2A> metody wszystkich bloków informacyjnych umieszczenie w stosie, (przez <xref:System.Drawing.Graphics.Save%2A> metody lub <xref:System.Drawing.Graphics.BeginContainer%2A> metoda) po odpowiedniego wywołania <xref:System.Drawing.Graphics.Save%2A> metody zostaną usunięte ze stosu.  
  
 Stan grafiki ustanowione przez <xref:System.Drawing.Graphics.BeginContainer%2A> metoda zawiera jakość renderowania domyślny stan grafiki; wszelkie zmiany stanu renderingu istniejące, gdy wywoływana jest metoda zostają zresetowane do wartości domyślnych.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Zostanie otwarty nowy kontener grafiki i zapisuje stare kontenera.  
  
-   Wykonuje translację współrzędne świata w kontenerze.  
  
-   Wypełnia czerwonym prostokątem (przetłumaczone współrzędne) nowego kontenera.  
  
-   Zamyka nowego kontenera i przywrócenie zapisanej kontenera.  
  
-   Wypełnia zielony prostokąt (nieprzetłumaczonym współrzędne) zapisane kontenera.  
  
 Wynik jest zielony prostokąt, który overlies czerwony prostokąt o takim samym rozmiarze.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.Rectangle dstrect, System.Drawing.Rectangle srcrect, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer(valuetype System.Drawing.Rectangle dstrect, valuetype System.Drawing.Rectangle srcrect, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer (dstrect As Rectangle, srcrect As Rectangle, unit As GraphicsUnit) As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer(System::Drawing::Rectangle dstrect, System::Drawing::Rectangle srcrect, System::Drawing::GraphicsUnit unit);" />
      <MemberSignature Language="F#" Value="member this.BeginContainer : System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; System.Drawing.Drawing2D.GraphicsContainer" Usage="graphics.BeginContainer (dstrect, srcrect, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dstrect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcrect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="dstrect">
          <see cref="T:System.Drawing.Rectangle" /> struktury, łącznie z <c>srcrect</c> parametr określa transformację skalowania dla kontenera.</param>
        <param name="srcrect">
          <see cref="T:System.Drawing.Rectangle" /> struktury, łącznie z <c>dstrect</c> parametr określa transformację skalowania dla kontenera.</param>
        <param name="unit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostkę miary dla kontenera.</param>
        <summary>Zapisuje bieżący stan to kontenerów grafiki <see cref="T:System.Drawing.Graphics" /> otwiera i używa nowego kontenera grafiki za pomocą przekształcania określonej skali.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> reprezentujący stan to <see cref="T:System.Drawing.Graphics" /> w momencie wywołania metody.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej metody za pomocą <xref:System.Drawing.Graphics.EndContainer%2A> metodą tworzenia zagnieżdżonych kontenerów grafiki. Kontenery grafiki zachowuje stan grafiki, takich jak przekształcenie, obszaru przycinania i właściwości w renderingu.  
  
 Gdy wywołujesz <xref:System.Drawing.Graphics.BeginContainer%2A> metody <xref:System.Drawing.Graphics>, blok informacji, który zawiera stan <xref:System.Drawing.Graphics> jest umieszczany na stosie. <xref:System.Drawing.Graphics.BeginContainer%2A> Metoda zwraca <xref:System.Drawing.Drawing2D.GraphicsContainer> określający, że blok informacji. Podczas przekazywania identyfikujący obiekt do <xref:System.Drawing.Graphics.EndContainer%2A> metody blok informacji jest usuwany ze stosu i służy do przywracania <xref:System.Drawing.Graphics> stan był w momencie <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody.  
  
 Kontenery mogą być zagnieżdżone; oznacza to, można wywołać <xref:System.Drawing.Graphics.BeginContainer%2A> metoda kilka razy przed wywołaniem <xref:System.Drawing.Graphics.EndContainer%2A> metody. Zawsze należy wywołać <xref:System.Drawing.Graphics.BeginContainer%2A> metody blok informacji jest umieszczany na stosie i pojawi się <xref:System.Drawing.Drawing2D.GraphicsContainer> bloku informacji. Gdy jeden z tych obiektów do przekazania <xref:System.Drawing.Graphics.EndContainer%2A> metody <xref:System.Drawing.Graphics> zwracany jest stan był w momencie <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody, które są zwracane, określonego <xref:System.Drawing.Drawing2D.GraphicsContainer>. Blok informacji umieszczenie w stosie, przez który <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody jest usuwany ze stosu i wszystkich bloków informacyjnych umieszczone na ten stos po tym <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody także zostaną usunięte.  
  
 Wywołania <xref:System.Drawing.Graphics.Save%2A> bloków informacyjnych miejscu metody na tym samym stosie jako wywołania <xref:System.Drawing.Graphics.BeginContainer%2A> metody. Podobnie jak <xref:System.Drawing.Graphics.EndContainer%2A> wywołania metody jest powiązany z <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody <xref:System.Drawing.Graphics.Restore%2A> wywołania metody jest powiązany z <xref:System.Drawing.Graphics.Save%2A> wywołania metody.  
  
 Podczas wywoływania <xref:System.Drawing.Graphics.EndContainer%2A> metody wszystkich bloków informacyjnych umieszczenie w stosie (przez <xref:System.Drawing.Graphics.Save%2A> metody lub <xref:System.Drawing.Graphics.BeginContainer%2A> metody) po odpowiedniego wywołania <xref:System.Drawing.Graphics.BeginContainer%2A> metody zostaną usunięte ze stosu. Podobnie, jeśli wywołasz <xref:System.Drawing.Graphics.Restore%2A> metody wszystkich bloków informacyjnych umieszczenie w stosie, (przez <xref:System.Drawing.Graphics.Save%2A> metody lub <xref:System.Drawing.Graphics.BeginContainer%2A> metoda) po odpowiedniego wywołania <xref:System.Drawing.Graphics.Save%2A> metody zostaną usunięte ze stosu.  
  
 Ta metoda Określa transformację skalowania dla nowego kontenera grafiki przy użyciu `dstrect` i `srcrect` parametrów. Skala jest równa przekształcenie, po zastosowaniu do `srcrect`, wynikiem `dstrect`.  
  
 Stan grafiki ustanowione przez <xref:System.Drawing.Graphics.BeginContainer%2A> metoda zawiera jakość renderowania domyślny stan grafiki; wszelkie zmiany stanu renderingu istniejące, gdy wywoływana jest metoda zostają zresetowane do wartości domyślnych.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy dwie prostokątach, aby określić przekształcenie skalowania dla nowego kontenera.  
  
-   Zostanie otwarty nowy kontener grafiki i zapisuje stare kontenera.  
  
-   Wypełnia czerwonym prostokątem (skalowanie współrzędne) nowego kontenera.  
  
-   Zamyka nowego kontenera i przywrócenie zapisanej kontenera.  
  
-   Wypełnia zielony prostokąt (nieskalowanego współrzędne) zapisane kontenera.  
  
 Wynik jest zielony prostokąt, który overlies mniejszych prostokąt czerwony.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.RectangleF dstrect, System.Drawing.RectangleF srcrect, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer(valuetype System.Drawing.RectangleF dstrect, valuetype System.Drawing.RectangleF srcrect, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer (dstrect As RectangleF, srcrect As RectangleF, unit As GraphicsUnit) As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer(System::Drawing::RectangleF dstrect, System::Drawing::RectangleF srcrect, System::Drawing::GraphicsUnit unit);" />
      <MemberSignature Language="F#" Value="member this.BeginContainer : System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; System.Drawing.Drawing2D.GraphicsContainer" Usage="graphics.BeginContainer (dstrect, srcrect, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dstrect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcrect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="dstrect">
          <see cref="T:System.Drawing.RectangleF" /> struktury, łącznie z <c>srcrect</c> parametr określa transformację skalowania dla nowego kontenera grafiki.</param>
        <param name="srcrect">
          <see cref="T:System.Drawing.RectangleF" /> struktury, łącznie z <c>dstrect</c> parametr określa transformację skalowania dla nowego kontenera grafiki.</param>
        <param name="unit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostkę miary dla kontenera.</param>
        <summary>Zapisuje bieżący stan to kontenerów grafiki <see cref="T:System.Drawing.Graphics" /> otwiera i używa nowego kontenera grafiki za pomocą przekształcania określonej skali.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> reprezentujący stan to <see cref="T:System.Drawing.Graphics" /> w momencie wywołania metody.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej metody za pomocą <xref:System.Drawing.Graphics.EndContainer%2A> metodą tworzenia zagnieżdżonych kontenerów grafiki. Kontenery grafiki zachowuje stan grafiki, takich jak przekształcenie, obszaru przycinania i właściwości w renderingu.  
  
 Gdy wywołujesz <xref:System.Drawing.Graphics.BeginContainer%2A> metody <xref:System.Drawing.Graphics>, blok informacji, który zawiera stan <xref:System.Drawing.Graphics> jest umieszczany na stosie. <xref:System.Drawing.Graphics.BeginContainer%2A> Metoda zwraca <xref:System.Drawing.Drawing2D.GraphicsContainer> określający, że blok informacji. Podczas przekazywania identyfikujący obiekt do <xref:System.Drawing.Graphics.EndContainer%2A> metody blok informacji jest usuwany ze stosu i służy do przywracania <xref:System.Drawing.Graphics> stan był w momencie <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody.  
  
 Kontenery mogą być zagnieżdżone; oznacza to, można wywołać <xref:System.Drawing.Graphics.BeginContainer%2A> metoda kilka razy przed wywołaniem <xref:System.Drawing.Graphics.EndContainer%2A> metody. Zawsze należy wywołać <xref:System.Drawing.Graphics.BeginContainer%2A> metody blok informacji jest umieszczany na stosie i pojawi się <xref:System.Drawing.Drawing2D.GraphicsContainer> bloku informacji. Gdy jeden z tych obiektów do przekazania <xref:System.Drawing.Graphics.EndContainer%2A> metody <xref:System.Drawing.Graphics> zwracany jest stan był w momencie <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody, które są zwracane, określonego <xref:System.Drawing.Drawing2D.GraphicsContainer>. Blok informacji umieszczenie w stosie, przez który <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody jest usuwany ze stosu i wszystkich bloków informacyjnych umieszczone na ten stos po tym <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody także zostaną usunięte.  
  
 Wywołania <xref:System.Drawing.Graphics.Save%2A> bloków informacyjnych miejscu metody na tym samym stosie jako wywołania <xref:System.Drawing.Graphics.BeginContainer%2A> metody. Podobnie jak <xref:System.Drawing.Graphics.EndContainer%2A> wywołania metody jest powiązany z <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody <xref:System.Drawing.Graphics.Restore%2A> wywołania metody jest powiązany z <xref:System.Drawing.Graphics.Save%2A> wywołania metody.  
  
 Podczas wywoływania <xref:System.Drawing.Graphics.EndContainer%2A> metody wszystkich bloków informacyjnych umieszczenie w stosie (przez `Save` metody lub <xref:System.Drawing.Graphics.BeginContainer%2A> metody) po odpowiedniego wywołania <xref:System.Drawing.Graphics.BeginContainer%2A> metody zostaną usunięte ze stosu. Podobnie, jeśli wywołasz <xref:System.Drawing.Graphics.Restore%2A> metody wszystkich bloków informacyjnych umieszczenie w stosie, (przez <xref:System.Drawing.Graphics.Save%2A> metody lub <xref:System.Drawing.Graphics.BeginContainer%2A> metoda) po odpowiedniego wywołania <xref:System.Drawing.Graphics.Save%2A> metody zostaną usunięte ze stosu.  
  
 Ta metoda Określa transformację skalowania dla nowego kontenera grafiki przy użyciu `dstrect` i `srcrect` parametrów. Skala jest równa przekształcenie, po zastosowaniu do `srcrect`, wynikiem `dstrect`.  
  
 Stan grafiki ustanowione przez <xref:System.Drawing.Graphics.BeginContainer%2A> metoda zawiera jakość renderowania domyślny stan grafiki; wszelkie zmiany stanu renderingu istniejące, gdy wywoływana jest metoda zostają zresetowane do wartości domyślnych.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy dwie prostokątach, aby określić przekształcenie skalowania dla nowego kontenera.  
  
-   Zostanie otwarty nowy kontener grafiki i zapisuje stare kontenera.  
  
-   Wypełnia czerwonym prostokątem (skalowanie współrzędne) nowego kontenera.  
  
-   Zamyka nowego kontenera i przywrócenie zapisanej kontenera.  
  
-   Wypełnia zielony prostokąt (nieskalowanego współrzędne) zapisane kontenera.  
  
 Wynik jest zielony prostokąt, który overlies mniejszych prostokąt czerwony.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear(valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Clear(System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear(System::Drawing::Color color);" />
      <MemberSignature Language="F#" Value="member this.Clear : System.Drawing.Color -&gt; unit" Usage="graphics.Clear color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color">
          <see cref="T:System.Drawing.Color" /> Struktura, która reprezentuje kolor tła powierzchni do rysowania.</param>
        <summary>Czyści całą powierzchnia do rysowania i wypełnia go kolorem tła określony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.Clear%2A> Metoda czyści stan obiektu grafiki i nie powinna być wywoływana, gdy nie można zaktualizować obiektu grafiki. Na przykład jeśli <xref:System.Drawing.Graphics.Clear%2A> metoda jest wywoływana na bezpieczny pulpit w sesji serwera terminali <xref:System.Runtime.InteropServices.ExternalException> może wystąpić, pozostawiając <xref:System.Drawing.Graphics> obiektu w niespójnym stanie.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod czyści powierzchni do rysowania programu <xref:System.Drawing.Graphics> i ustawia kolor tła na kolor zielonomodrym zdefiniowaną przez system.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Drawing.Region Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Region Clip" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Property Clip As Region" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Region ^ Clip { System::Drawing::Region ^ get(); void set(System::Drawing::Region ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Clip : System.Drawing.Region with get, set" Usage="System.Drawing.Graphics.Clip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Region</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Drawing.Region" /> region rysowania, która ogranicza <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>A <see cref="T:System.Drawing.Region" /> , która ogranicza to część <see cref="T:System.Drawing.Graphics" /> czy jest aktualnie dostępna do rysowania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Modyfikowanie <xref:System.Drawing.Region> obiektu zwróconego przez <xref:System.Drawing.Graphics.Clip%2A> właściwość nie ma wpływu na kolejne Rysowanie <xref:System.Drawing.Graphics> obiektu. Aby zmienić obszar przycinania, Zastąp <xref:System.Drawing.Graphics.Clip%2A> wartości właściwości z nową <xref:System.Drawing.Region> obiektu. Aby ustalić, czy obszar przycinania to nieskończoność, Pobierz <xref:System.Drawing.Graphics.Clip%2A> właściwości i wywołania jego <xref:System.Drawing.Region.IsInfinite%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Drawing.Graphics.Clip%2A> właściwości. W tym przykładzie jest przeznaczona do użycia za pomocą interfejsu Windows Forms. Wklej kod do formularza i wywołania `SetAndFillClip` metody obsługi danych formularza <xref:System.Windows.Forms.Control.Paint> zdarzenie, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.GraphicsProperties#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#4)]
 [!code-vb[System.Drawing.GraphicsProperties#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF ClipBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF ClipBounds" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.ClipBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClipBounds As RectangleF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::RectangleF ClipBounds { System::Drawing::RectangleF get(); };" />
      <MemberSignature Language="F#" Value="member this.ClipBounds : System.Drawing.RectangleF" Usage="System.Drawing.Graphics.ClipBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Drawing.RectangleF" /> strukturę, która jest zakresem obszaru przycinania tego <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>A <see cref="T:System.Drawing.RectangleF" /> strukturę, która reprezentuje prostokąt otaczający dla regionu wycinka <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jednostki na potrzeby wynikowego prostokąt określony przez <xref:System.Drawing.Graphics.PageUnit%2A> właściwości. Domyślna jednostka to pikseli. Element <xref:System.Drawing.Graphics> jest zwykle skojarzona z kontrolką pochodzenia krawędzi prostokąta. zostanie ona względem pola klienta tej kontrolki.  
  
 Jeśli region wycinka jest nieograniczony, <xref:System.Drawing.Graphics.ClipBounds%2A> właściwość zwraca prostokąt dużych ta nie ma znaczenia. Aby ustalić, czy obszar przycinania to nieskończoność, Pobierz <xref:System.Drawing.Graphics.Clip%2A> właściwości i wywołania jego <xref:System.Drawing.Region.IsInfinite%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositingMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CompositingMode CompositingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.CompositingMode CompositingMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.CompositingMode" />
      <MemberSignature Language="VB.NET" Value="Public Property CompositingMode As CompositingMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CompositingMode CompositingMode { System::Drawing::Drawing2D::CompositingMode get(); void set(System::Drawing::Drawing2D::CompositingMode value); };" />
      <MemberSignature Language="F#" Value="member this.CompositingMode : System.Drawing.Drawing2D.CompositingMode with get, set" Usage="System.Drawing.Graphics.CompositingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CompositingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość określającą sposób złożone obrazy są rysowane to <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Ta właściwość określa członkiem <see cref="T:System.Drawing.Drawing2D.CompositingMode" /> wyliczenia. Wartość domyślna to <see cref="F:System.Drawing.Drawing2D.CompositingMode.SourceOver" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Trybu składania Określa, czy pikseli z obrazu źródłowego zastąpić, czy są połączone z tła pikseli.  
  
> [!NOTE]
>  Nie należy używać <xref:System.Drawing.Graphics.CompositingMode%2A> wartość właściwości <xref:System.Drawing.Drawing2D.CompositingMode.SourceCopy> podczas <xref:System.Drawing.Graphics.TextRenderingHint%2A> właściwość jest ustawiona na <xref:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit>. Może wystąpić wyjątek pustej lub obraz może nie być wyświetlana poprawnie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositingQuality">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CompositingQuality CompositingQuality { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.CompositingQuality CompositingQuality" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.CompositingQuality" />
      <MemberSignature Language="VB.NET" Value="Public Property CompositingQuality As CompositingQuality" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CompositingQuality CompositingQuality { System::Drawing::Drawing2D::CompositingQuality get(); void set(System::Drawing::Drawing2D::CompositingQuality value); };" />
      <MemberSignature Language="F#" Value="member this.CompositingQuality : System.Drawing.Drawing2D.CompositingQuality with get, set" Usage="System.Drawing.Graphics.CompositingQuality" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CompositingQuality</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia jakość renderowania obrazów złożone szukali go to <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Ta właściwość określa członkiem <see cref="T:System.Drawing.Drawing2D.CompositingQuality" /> wyliczenia. Wartość domyślna to <see cref="F:System.Drawing.Drawing2D.CompositingQuality.Default" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jakość składania określa poziom jakości renderowanie obrazów złożone.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyFromScreen">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wykonuje blok bitowy transfer danych koloru z ekranu do powierzchni rysowania <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(valuetype System.Drawing.Point upperLeftSource, valuetype System.Drawing.Point upperLeftDestination, valuetype System.Drawing.Size blockRegionSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFromScreen (upperLeftSource As Point, upperLeftDestination As Point, blockRegionSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(System::Drawing::Point upperLeftSource, System::Drawing::Point upperLeftDestination, System::Drawing::Size blockRegionSize);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : System.Drawing.Point * System.Drawing.Point * System.Drawing.Size -&gt; unit" Usage="graphics.CopyFromScreen (upperLeftSource, upperLeftDestination, blockRegionSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upperLeftSource" Type="System.Drawing.Point" />
        <Parameter Name="upperLeftDestination" Type="System.Drawing.Point" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="upperLeftSource">Punkt w lewym górnym rogu prostokąta źródłowego.</param>
        <param name="upperLeftDestination">Punkt w lewym górnym rogu prostokąta docelowego.</param>
        <param name="blockRegionSize">Rozmiar obszaru do przeniesienia.</param>
        <summary>Wykonuje blok bitowy transfer danych kolor odpowiadający prostokąt pikseli, na ekranie powierzchni rysowania <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> Metody są przydatne w przypadku warstwowo jeden obraz na innym. Aby określić, jak kolory źródłowe i docelowe są mieszane, użyj jednej z <xref:System.Drawing.Graphics.CopyFromScreen%2A> metody, które przyjmuje <xref:System.Drawing.CopyPixelOperation> parametru.  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia <xref:System.Drawing.Graphics.CopyFromScreen%2A> metody. Aby uruchomić ten przykład, wklej go do postaci Windows. Obsługa formularzy <xref:System.Windows.Forms.Control.Paint> zdarzenia i wywołania `CopyPixels1` metody z <xref:System.Windows.Forms.Control.Paint> metody obsługi zdarzeń, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#4)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Operacja nie powiodła się.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Aby uzyskać dostęp do wszystkich okien. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/c8dff5f8-f56a-4c07-ae31-64643b31f8fc">Porady: drukowanie formularza systemu Windows</related>
        <related type="Article" href="https://msdn.microsoft.com/library/33b76910-13a3-4521-be98-5c097341ae3b">Porady: kopiowanie pikseli w celi zmniejszenia migotania w formularzach Windows Forms</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(valuetype System.Drawing.Point upperLeftSource, valuetype System.Drawing.Point upperLeftDestination, valuetype System.Drawing.Size blockRegionSize, valuetype System.Drawing.CopyPixelOperation copyPixelOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size,System.Drawing.CopyPixelOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(System::Drawing::Point upperLeftSource, System::Drawing::Point upperLeftDestination, System::Drawing::Size blockRegionSize, System::Drawing::CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : System.Drawing.Point * System.Drawing.Point * System.Drawing.Size * System.Drawing.CopyPixelOperation -&gt; unit" Usage="graphics.CopyFromScreen (upperLeftSource, upperLeftDestination, blockRegionSize, copyPixelOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upperLeftSource" Type="System.Drawing.Point" />
        <Parameter Name="upperLeftDestination" Type="System.Drawing.Point" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
        <Parameter Name="copyPixelOperation" Type="System.Drawing.CopyPixelOperation" />
      </Parameters>
      <Docs>
        <param name="upperLeftSource">Punkt w lewym górnym rogu prostokąta źródłowego.</param>
        <param name="upperLeftDestination">Punkt w lewym górnym rogu prostokąta docelowego.</param>
        <param name="blockRegionSize">Rozmiar obszaru do przeniesienia.</param>
        <param name="copyPixelOperation">Jedną z <see cref="T:System.Drawing.CopyPixelOperation" /> wartości.</param>
        <summary>Wykonuje blok bitowy transfer danych kolor odpowiadający prostokąt pikseli, na ekranie powierzchni rysowania <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> Metody są przydatne w przypadku warstwowo jeden obraz na innym. `copyPixelOperation` Parametr umożliwia określenie, jeśli i jak kolory źródła powinna być mieszany kolory w obszarze docelowym.  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia <xref:System.Drawing.Graphics.CopyFromScreen%2A> metody. Aby uruchomić ten przykład, wklej go do postaci Windows. Obsługa formularzy <xref:System.Windows.Forms.Control.Paint> zdarzenia i wywołania `CopyPixels2` metody z <xref:System.Windows.Forms.Control.Paint> metody obsługi zdarzeń, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#5)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="copyPixelOperation" /> nie jest członkiem <see cref="T:System.Drawing.CopyPixelOperation" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Operacja nie powiodła się.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Aby uzyskać dostęp do wszystkich okien. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/c8dff5f8-f56a-4c07-ae31-64643b31f8fc">Porady: drukowanie formularza systemu Windows</related>
        <related type="Article" href="https://msdn.microsoft.com/library/33b76910-13a3-4521-be98-5c097341ae3b">Porady: kopiowanie pikseli w celi zmniejszenia migotania w formularzach Windows Forms</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(int32 sourceX, int32 sourceY, int32 destinationX, int32 destinationY, valuetype System.Drawing.Size blockRegionSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFromScreen (sourceX As Integer, sourceY As Integer, destinationX As Integer, destinationY As Integer, blockRegionSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, System::Drawing::Size blockRegionSize);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : int * int * int * int * System.Drawing.Size -&gt; unit" Usage="graphics.CopyFromScreen (sourceX, sourceY, destinationX, destinationY, blockRegionSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceX" Type="System.Int32" />
        <Parameter Name="sourceY" Type="System.Int32" />
        <Parameter Name="destinationX" Type="System.Int32" />
        <Parameter Name="destinationY" Type="System.Int32" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="sourceX">Współrzędna x punktu, w lewym górnym rogu prostokąta źródłowego.</param>
        <param name="sourceY">Współrzędna y punktu, w lewym górnym rogu prostokąta źródłowego.</param>
        <param name="destinationX">Współrzędna x punktu, w lewym górnym rogu prostokąta docelowego.</param>
        <param name="destinationY">Współrzędna y punktu, w lewym górnym rogu prostokąta docelowego.</param>
        <param name="blockRegionSize">Rozmiar obszaru do przeniesienia.</param>
        <summary>Wykonuje blok bitowy transfer danych kolor odpowiadający prostokąt pikseli, na ekranie powierzchni rysowania <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> Metody są przydatne w przypadku warstwowo jeden obraz na innym. Aby określić, jak kolory źródłowe i docelowe są mieszane, użyj jednej z <xref:System.Drawing.Graphics.CopyFromScreen%2A> metody, które przyjmuje <xref:System.Drawing.CopyPixelOperation> parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Drawing.Graphics.CopyFromScreen%2A> do drukowania kopię bieżącego formularza.  
  
 [!code-csharp[System.Drawing.Graphics.CopyFromScreen#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Graphics.CopyFromScreen/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Graphics.CopyFromScreen#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Graphics.CopyFromScreen/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Operacja nie powiodła się.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Aby uzyskać dostęp do wszystkich okien. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/c8dff5f8-f56a-4c07-ae31-64643b31f8fc">Porady: drukowanie formularza systemu Windows</related>
        <related type="Article" href="https://msdn.microsoft.com/library/33b76910-13a3-4521-be98-5c097341ae3b">Porady: kopiowanie pikseli w celi zmniejszenia migotania w formularzach Windows Forms</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(int32 sourceX, int32 sourceY, int32 destinationX, int32 destinationY, valuetype System.Drawing.Size blockRegionSize, valuetype System.Drawing.CopyPixelOperation copyPixelOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size,System.Drawing.CopyPixelOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, System::Drawing::Size blockRegionSize, System::Drawing::CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : int * int * int * int * System.Drawing.Size * System.Drawing.CopyPixelOperation -&gt; unit" Usage="graphics.CopyFromScreen (sourceX, sourceY, destinationX, destinationY, blockRegionSize, copyPixelOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceX" Type="System.Int32" />
        <Parameter Name="sourceY" Type="System.Int32" />
        <Parameter Name="destinationX" Type="System.Int32" />
        <Parameter Name="destinationY" Type="System.Int32" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
        <Parameter Name="copyPixelOperation" Type="System.Drawing.CopyPixelOperation" />
      </Parameters>
      <Docs>
        <param name="sourceX">Współrzędna x punktu, w lewym górnym rogu prostokąta źródłowego.</param>
        <param name="sourceY">Współrzędna y punktu, w lewym górnym rogu prostokąta źródłowego</param>
        <param name="destinationX">Współrzędna x punktu, w lewym górnym rogu prostokąta docelowego.</param>
        <param name="destinationY">Współrzędna y punktu, w lewym górnym rogu prostokąta docelowego.</param>
        <param name="blockRegionSize">Rozmiar obszaru do przeniesienia.</param>
        <param name="copyPixelOperation">Jedną z <see cref="T:System.Drawing.CopyPixelOperation" /> wartości.</param>
        <summary>Wykonuje blok bitowy transfer danych kolor odpowiadający prostokąt pikseli, na ekranie powierzchni rysowania <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> Metody są przydatne w przypadku warstwowo jeden obraz na innym. `copyPixelOperation` Parametr umożliwia określenie, jeśli i jak kolory źródła powinna być mieszany kolory w obszarze docelowym.  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia <xref:System.Drawing.Graphics.CopyFromScreen%2A> metody. Aby uruchomić ten przykład, wklej go do postaci Windows. Obsługa formularzy <xref:System.Windows.Forms.Control.Paint> zdarzenia i wywołania `CopyPixels4` metody z <xref:System.Windows.Forms.Control.Paint> metody obsługi zdarzeń, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#7)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="copyPixelOperation" /> nie jest członkiem <see cref="T:System.Drawing.CopyPixelOperation" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Operacja nie powiodła się.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Aby uzyskać dostęp do wszystkich okien. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/c8dff5f8-f56a-4c07-ae31-64643b31f8fc">Porady: drukowanie formularza systemu Windows</related>
        <related type="Article" href="https://msdn.microsoft.com/library/33b76910-13a3-4521-be98-5c097341ae3b">Porady: kopiowanie pikseli w celi zmniejszenia migotania w formularzach Windows Forms</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="graphics.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszelkie zasoby używane przez to <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywoływanie <xref:System.Drawing.Graphics.Dispose%2A> umożliwia zasoby używane przez to <xref:System.Drawing.Graphics> zostają przeniesione do innych celów.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy <xref:System.Drawing.Image> z grafiki pliku SampImag.jpg, w tym przykładzie katalogu.  
  
-   Tworzy <xref:System.Drawing.Graphics> z <xref:System.Drawing.Image>.  
  
-   Zmienia obrazu, wypełniając prostokąt znajdujący się w nim.  
  
-   Rysuje <xref:System.Drawing.Image> do ekranu.  
  
-   Zwalnia utworzony <xref:System.Drawing.Graphics>.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#6)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiX">
      <MemberSignature Language="C#" Value="public float DpiX { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DpiX" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.DpiX" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DpiX As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float DpiX { float get(); };" />
      <MemberSignature Language="F#" Value="member this.DpiX : single" Usage="System.Drawing.Graphics.DpiX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera rozdzielczość w poziomie, to <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Wartość w punktach na cal dla rozdzielczość pozioma obsługiwanych przez to <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat tworzenia aplikacji o wysokiej rozdzielczości zobacz  
  
 [Wysokie DPI](https://go.microsoft.com/fwlink/?LinkId=159804).  
  
   
  
## Examples  
 Poniższa metoda pokazuje użycie klasy <xref:System.Drawing.Graphics.DpiX%2A> i <xref:System.Drawing.Graphics.DpiY%2A> właściwości. W tym przykładzie jest przeznaczony do użytku z formularzem Windows. Aby uruchomić ten przykład, wkleić go do formularza, który zawiera <xref:System.Windows.Forms.ListBox> o nazwie Pole_listy1 i wywołać tej metody z konstruktora formularza.  
  
 [!code-cpp[System.Drawing.MiscExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.MiscExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.MiscExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=159804">Wysokie DPI</related>
      </Docs>
    </Member>
    <Member MemberName="DpiY">
      <MemberSignature Language="C#" Value="public float DpiY { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DpiY" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.DpiY" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DpiY As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float DpiY { float get(); };" />
      <MemberSignature Language="F#" Value="member this.DpiY : single" Usage="System.Drawing.Graphics.DpiY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera rozdzielczość w pionie, to <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Wartość w punktach na cal dla obsługiwanych przez to rozdzielczość w pionie <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat tworzenia aplikacji o wysokiej rozdzielczości zobacz  
  
 [Wysokie DPI](https://go.microsoft.com/fwlink/?LinkId=159804).  
  
   
  
## Examples  
 Poniższa metoda pokazuje użycie klasy <xref:System.Drawing.Graphics.DpiX%2A> i <xref:System.Drawing.Graphics.DpiY%2A> właściwości. W tym przykładzie jest przeznaczony do użytku z formularzem Windows. Aby uruchomić ten przykład, wkleić go do formularza, który zawiera <xref:System.Windows.Forms.ListBox> o nazwie Pole_listy1 i wywołać tej metody z konstruktora formularza.  
  
 [!code-cpp[System.Drawing.MiscExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.MiscExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.MiscExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=159804">Wysokie DPI</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawArc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje łuk reprezentujących część określony przez parę współrzędne, szerokość i wysokość elipsy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * System.Drawing.Rectangle * single * single -&gt; unit" Usage="graphics.DrawArc (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl łuku.</param>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która definiuje granice elipsy.</param>
        <param name="startAngle">Kąt w stopniach zgodnie ze wskazówkami zegara mierzony od osi x do punktu początkowego łuku.</param>
        <param name="sweepAngle">Kąt w stopniach mierzone zgodnie ze wskazówkami zegara od <c>startAngle</c> parametru, aby końcowy punkt łuku.</param>
        <summary>Rysuje łuk reprezentujących część elipsę określony przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda łuk będącego częścią obwód elipsę. Wielokropek jest definiowany przez granice prostokąta. Łuk jest częścią sieci obwodowej elipsy między `startAngle` parametru i `startAngle`  +  `sweepAngle` parametrów.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy prostokąt powiązany elipsę.  
  
-   Określa początkowy (45 stopni) i kąta odchylenia (270 stopni).  
  
-   Rysuje łuk eliptyczny do ekranu.  
  
 Wynik jest częściowe elipsy, brak segmentów między + i - 45 stopni na osi x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * System.Drawing.RectangleF * single * single -&gt; unit" Usage="graphics.DrawArc (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl łuku.</param>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która definiuje granice elipsy.</param>
        <param name="startAngle">Kąt w stopniach zgodnie ze wskazówkami zegara mierzony od osi x do punktu początkowego łuku.</param>
        <param name="sweepAngle">Kąt w stopniach mierzone zgodnie ze wskazówkami zegara od <c>startAngle</c> parametru, aby końcowy punkt łuku.</param>
        <summary>Rysuje łuk reprezentujących część elipsę określony przez <see cref="T:System.Drawing.RectangleF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda łuk będącego częścią obwód elipsę. Wielokropek jest definiowany przez granice prostokąta. Łuk jest częścią sieci obwodowej elipsy między `startAngle` parametru i `startAngle`  +  `sweepAngle` parametrów.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy prostokąt powiązany elipsę.  
  
-   Określa początkowy (45 stopni) i kąta odchylenia (270 stopni).  
  
-   Rysuje łuk eliptyczny do ekranu.  
  
 Wynik jest częściowe elipsy, brak segmentów między + i - 45 stopni na osi x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#8)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" /></exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * int * int * int * int * int * int -&gt; unit" Usage="graphics.DrawArc (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl łuku.</param>
        <param name="x">Współrzędna x lewego górnego rogu prostokąta, który definiuje elipsy.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąta, który definiuje elipsy.</param>
        <param name="width">Szerokość prostokąt, który definiuje elipsy.</param>
        <param name="height">Wysokość prostokąta, który definiuje elipsy.</param>
        <param name="startAngle">Kąt w stopniach zgodnie ze wskazówkami zegara mierzony od osi x do punktu początkowego łuku.</param>
        <param name="sweepAngle">Kąt w stopniach mierzone zgodnie ze wskazówkami zegara od <c>startAngle</c> parametru, aby końcowy punkt łuku.</param>
        <summary>Rysuje łuk reprezentujących część określony przez parę współrzędne, szerokość i wysokość elipsy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda łuk będącego częścią obwód elipsę. Wielokropek jest definiowany przez granice prostokąta. Łuk jest częścią sieci obwodowej elipsy między `startAngle` parametru i `startAngle`  +  `sweepAngle` parametrów.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy, położenie i rozmiar prostokąta powiązany elipsę.  
  
-   Określa początkowy (45 stopni) i kąta odchylenia (270 stopni).  
  
-   Rysuje łuk eliptyczny do ekranu.  
  
 Wynik jest częściowe elipsy, brak segmentów między + i - 45 stopni na osi x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#9)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#9)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rects" /> jest tablicą o zerowej długości.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * single * single * single * single * single * single -&gt; unit" Usage="graphics.DrawArc (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl łuku.</param>
        <param name="x">Współrzędna x lewego górnego rogu prostokąta, który definiuje elipsy.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąta, który definiuje elipsy.</param>
        <param name="width">Szerokość prostokąt, który definiuje elipsy.</param>
        <param name="height">Wysokość prostokąta, który definiuje elipsy.</param>
        <param name="startAngle">Kąt w stopniach zgodnie ze wskazówkami zegara mierzony od osi x do punktu początkowego łuku.</param>
        <param name="sweepAngle">Kąt w stopniach mierzone zgodnie ze wskazówkami zegara od <c>startAngle</c> parametru, aby końcowy punkt łuku.</param>
        <summary>Rysuje łuk reprezentujących część określony przez parę współrzędne, szerokość i wysokość elipsy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda łuk będącego częścią obwód elipsę. Wielokropek jest definiowany przez granice prostokąta. Łuk jest częścią sieci obwodowej elipsy między `startAngle` parametru i `startAngle`  +  `sweepAngle` parametrów.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy, położenie i rozmiar prostokąta powiązany elipsę.  
  
-   Określa początkowy (45 stopni) i kąta odchylenia (270 stopni).  
  
-   Rysuje łuk eliptyczny do ekranu.  
  
 Wynik jest częściowe elipsy, brak segmentów między + i - 45 stopni na osi x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#10)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#10)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawBezier">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje Beziera, zdefiniowane przez cztery <see cref="T:System.Drawing.Point" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2, System.Drawing.Point pt3, System.Drawing.Point pt4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, valuetype System.Drawing.Point pt1, valuetype System.Drawing.Point pt2, valuetype System.Drawing.Point pt3, valuetype System.Drawing.Point pt4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, System::Drawing::Point pt1, System::Drawing::Point pt2, System::Drawing::Point pt3, System::Drawing::Point pt4);" />
      <MemberSignature Language="F#" Value="member this.DrawBezier : System.Drawing.Pen * System.Drawing.Point * System.Drawing.Point * System.Drawing.Point * System.Drawing.Point -&gt; unit" Usage="graphics.DrawBezier (pen, pt1, pt2, pt3, pt4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.Point" />
        <Parameter Name="pt2" Type="System.Drawing.Point" />
        <Parameter Name="pt3" Type="System.Drawing.Point" />
        <Parameter Name="pt4" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> Struktura, która określa kolor, szerokość i styl krzywej.</param>
        <param name="pt1">
          <see cref="T:System.Drawing.Point" /> Struktura, która reprezentuje początkowy punkt krzywej.</param>
        <param name="pt2">
          <see cref="T:System.Drawing.Point" /> Struktura, która reprezentuje pierwszy punkt kontrolny krzywej.</param>
        <param name="pt3">
          <see cref="T:System.Drawing.Point" /> Struktura, która reprezentuje drugi punkt kontrolny krzywej.</param>
        <param name="pt4">
          <see cref="T:System.Drawing.Point" /> Struktura, która reprezentuje punkt końcowy krzywej.</param>
        <summary>Rysuje Beziera, zdefiniowane przez cztery <see cref="T:System.Drawing.Point" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Krzywa Beziera jest rysowana od pierwszego punktu czwarty punktu. Drugi i trzeci punkty są punkty kontrolne, które określają kształtu krzywej.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy rozpoczęcia, zakończenia i punkty kontrolne dwóch dla krzywej.  
  
-   Rysuje krzywej Beziera na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#11)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#11)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2, System.Drawing.PointF pt3, System.Drawing.PointF pt4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, valuetype System.Drawing.PointF pt1, valuetype System.Drawing.PointF pt2, valuetype System.Drawing.PointF pt3, valuetype System.Drawing.PointF pt4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, System::Drawing::PointF pt1, System::Drawing::PointF pt2, System::Drawing::PointF pt3, System::Drawing::PointF pt4);" />
      <MemberSignature Language="F#" Value="member this.DrawBezier : System.Drawing.Pen * System.Drawing.PointF * System.Drawing.PointF * System.Drawing.PointF * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawBezier (pen, pt1, pt2, pt3, pt4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.PointF" />
        <Parameter Name="pt2" Type="System.Drawing.PointF" />
        <Parameter Name="pt3" Type="System.Drawing.PointF" />
        <Parameter Name="pt4" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl krzywej.</param>
        <param name="pt1">
          <see cref="T:System.Drawing.PointF" /> Struktura, która reprezentuje początkowy punkt krzywej.</param>
        <param name="pt2">
          <see cref="T:System.Drawing.PointF" /> Struktura, która reprezentuje pierwszy punkt kontrolny krzywej.</param>
        <param name="pt3">
          <see cref="T:System.Drawing.PointF" /> Struktura, która reprezentuje drugi punkt kontrolny krzywej.</param>
        <param name="pt4">
          <see cref="T:System.Drawing.PointF" /> Struktura, która reprezentuje punkt końcowy krzywej.</param>
        <summary>Rysuje Beziera, zdefiniowane przez cztery <see cref="T:System.Drawing.PointF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Krzywej Beziera jest rysowana od pierwszego punktu czwarty punktu. Drugi i trzeci punkty są punkty kontrolne, które określają kształtu krzywej.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy rozpoczęcia, zakończenia i punkty kontrolne dwóch dla krzywej.  
  
-   Rysuje krzywej Beziera na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#12)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#12)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, float32 x1, float32 y1, float32 x2, float32 y2, float32 x3, float32 y3, float32 x4, float32 y4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);" />
      <MemberSignature Language="F#" Value="member this.DrawBezier : System.Drawing.Pen * single * single * single * single * single * single * single * single -&gt; unit" Usage="graphics.DrawBezier (pen, x1, y1, x2, y2, x3, y3, x4, y4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="x2" Type="System.Single" />
        <Parameter Name="y2" Type="System.Single" />
        <Parameter Name="x3" Type="System.Single" />
        <Parameter Name="y3" Type="System.Single" />
        <Parameter Name="x4" Type="System.Single" />
        <Parameter Name="y4" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl krzywej.</param>
        <param name="x1">Współrzędna x punktu początkowego krzywej.</param>
        <param name="y1">Współrzędna y punktu początkowego krzywej.</param>
        <param name="x2">Współrzędna x pierwszy punkt kontrolny krzywej.</param>
        <param name="y2">Współrzędna y pierwszy punkt kontrolny krzywej.</param>
        <param name="x3">Współrzędna x drugi punkt kontrolny krzywej.</param>
        <param name="y3">Współrzędna y drugi punkt kontrolny krzywej.</param>
        <param name="x4">Współrzędna x punktu końcowego krzywej.</param>
        <param name="y4">Współrzędna y punktu końcowego krzywej.</param>
        <summary>Rysuje Beziera, zdefiniowane przez cztery par uporządkowanych współrzędnych, które reprezentują punkty.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Krzywej Beziera jest rysowana od pierwszego punktu czwarty punktu. Drugi i trzeci punkty są punkty kontrolne, które określają kształtu krzywej.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy współrzędne rozpoczęcia, zakończenia i dwa punkty kontrolne dla krzywej.  
  
-   Rysuje krzywej Beziera na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#13)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#13)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawBeziers">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje szereg krzywych Beziera przy użyciu tablicy <see cref="T:System.Drawing.Point" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawBeziers">
      <MemberSignature Language="C#" Value="public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBeziers(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBeziers(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawBeziers : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawBeziers (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl krzywej.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.Point" /> struktur, które reprezentują punkty, które określają krzywej. Liczba punktów w tablicy powinna być wielokrotnością liczby 3 powiększoną o 1, 4, 7 lub 10.</param>
        <summary>Rysuje szereg krzywych Beziera przy użyciu tablicy <see cref="T:System.Drawing.Point" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Liczba punktów w tablicy powinna być wielokrotnością liczby 3 powiększoną o 1, ponieważ pierwszy z krzywymi składanymi wymaga 4 punkty, a inne krzywe wymagają 3 punkty. Pierwszy Beziera jest rysowana od pierwszego punktu czwarty punkcie w tablicy punktu. Drugi i trzeci punkty są punkty kontrolne, które określają kształtu krzywej. Każda kolejne krzywa musi dokładnie trzy większej liczby punktów: dwa więcej kontroli punktów i punkt końcowy. Punkt końcowy poprzedniego krzywej służy jako punkt początkowy dla każdego dodatkowego krzywej.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy rozpoczęcia, zakończenia i punkty kontrolne dwóch pierwszy łuk i punktu końcowego i punkty kontrolne dwóch dla drugiego krzywej.  
  
-   Rysuje kolejnych krzywych Beziera na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#14)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#14)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBeziers">
      <MemberSignature Language="C#" Value="public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBeziers(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBeziers(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawBeziers : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawBeziers (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl krzywej.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które reprezentują punkty, które określają krzywej. Liczba punktów w tablicy powinna być wielokrotnością liczby 3 powiększoną o 1, 4, 7 lub 10.</param>
        <summary>Rysuje szereg krzywych Beziera przy użyciu tablicy <see cref="T:System.Drawing.PointF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Liczba punktów w tablicy powinna być wielokrotnością liczby 3 powiększoną o 1, ponieważ pierwszy z krzywymi składanymi wymaga 4 punkty, a inne krzywe wymagają 3 punkty. Pierwszy krzywej Beziera jest rysowana od pierwszego punktu czwarty punkcie w tablicy punktu. Drugi i trzeci punkty są punkty kontrolne, które określają kształtu krzywej. Każda kolejne krzywa musi dokładnie trzy większej liczby punktów: dwa więcej kontroli punktów i punkt końcowy. Punkt końcowy poprzedniego krzywej służy jako punkt początkowy dla każdego dodatkowego krzywej.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy rozpoczęcia, zakończenia i punkty kontrolne dwóch pierwszy łuk i punktu końcowego i punkty kontrolne dwóch dla drugiego krzywej.  
  
-   Rysuje kolejnych krzywych Beziera na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#15)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#15)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawClosedCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje zamknięte kardynalna zdefiniowane przez tablicę <see cref="T:System.Drawing.Point" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i wysokość krzywej.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.Point" /> struktur, które definiują krzywej składanej.</param>
        <summary>Rysuje zamknięte kardynalna zdefiniowane przez tablicę <see cref="T:System.Drawing.Point" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje zamknięte kardynalna przechodzący przez każdy punkt w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszego punktu, dodatkowe segmentu, jest on dodawany z ostatniego punktu pierwszego punktu, aby zamknąć na rysunku.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.Point> struktury.  
  
 Ta metoda używa napięcie domyślne, wynosi 0,5.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwonego i zielonego pióra.  
  
-   Tworzy siedem punktów do definiowania krzywej.  
  
-   Rysuje siedem czerwone linie w proste między siedem punktów w celu utworzenia zamknięte wielokąta.  
  
-   Rysuje zielony zamkniętej krzywej przez siedem punkty.  
  
 Metoda używa napięcie domyślne, wynosi 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#16)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#16)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i wysokość krzywej.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które definiują krzywej składanej.</param>
        <summary>Rysuje zamknięte kardynalna zdefiniowane przez tablicę <see cref="T:System.Drawing.PointF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje zamknięte kardynalna przechodzący przez każdy punkt w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszego punktu, dodatkowe segmentu, jest on dodawany z ostatniego punktu pierwszego punktu, aby je zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.PointF> struktury.  
  
 Ta metoda używa napięcie domyślne, wynosi 0,5.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwonego i zielonego pióra.  
  
-   Tworzy siedem punktów do definiowania krzywej.  
  
-   Rysuje siedem czerwone linie w proste między siedem punktów w celu utworzenia zamknięte wielokąta.  
  
-   Rysuje zielony zamkniętej krzywej przez siedem punkty.  
  
 Metoda używa napięcie domyślne, wynosi 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#18)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#18)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, float32 tension, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single,System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, float tension, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.Point[] * single * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points, tension, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="tension" Type="System.Single" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i wysokość krzywej.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.Point" /> struktur, które definiują krzywej składanej.</param>
        <param name="tension">Wartość większa niż lub równa 0.0f, który określa napięcie krzywej.</param>
        <param name="fillmode">Członek <see cref="T:System.Drawing.Drawing2D.FillMode" /> wyliczenie, które określa, jak krzywej jest wypełnione. Ten parametr jest wymagany, ale ignorowane.</param>
        <summary>Rysuje zamknięte kardynalna zdefiniowane przez tablicę <see cref="T:System.Drawing.Point" /> struktury za pomocą określonego napięcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje zamknięte kardynalna przechodzący przez każdy punkt w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszego punktu, dodatkowe segmentu, jest on dodawany z ostatniego punktu pierwszego punktu, aby je zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.Point> struktury.  
  
 `tension` Parametr określa kształt krzywej składanej. Jeśli wartość `tension` parametru to 0.0f, ta metoda rysuje linię prostą segmentów do łączenia z punktów. Zazwyczaj `tension` parametr jest mniejsza niż 1.0f. Wartości w ciągu 1.0f generować nieoczekiwane rezultaty.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwonego i zielonego pióra.  
  
-   Tworzy siedem punktów do definiowania krzywej.  
  
-   Rysuje siedem czerwone linie w proste między siedem punktów w celu utworzenia wielokąta.  
  
-   Tworzy napięcie i wprowadź ustawienia trybu.  
  
-   Rysuje zielony zamkniętej krzywej przez siedem punkty.  
  
 Metoda używa napięcie 1.0 i ustawia tryb wypełniania `FillMode.Alternate`.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#17)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#17)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, float32 tension, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single,System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, float tension, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.PointF[] * single * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points, tension, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="tension" Type="System.Single" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i wysokość krzywej.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które definiują krzywej składanej.</param>
        <param name="tension">Wartość większa niż lub równa 0.0f, który określa napięcie krzywej.</param>
        <param name="fillmode">Członek <see cref="T:System.Drawing.Drawing2D.FillMode" /> wyliczenie, które określa, jak krzywej jest wypełnione. Ten parametr jest wymagany, ale jest ignorowana.</param>
        <summary>Rysuje zamknięte kardynalna zdefiniowane przez tablicę <see cref="T:System.Drawing.PointF" /> struktury za pomocą określonego napięcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje zamknięte kardynalna przechodzący przez każdy punkt w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszego punktu, dodatkowe segmentu, jest on dodawany z ostatniego punktu pierwszego punktu, aby je zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.PointF> struktury.  
  
 `tension` Parametr określa kształt krzywej składanej. Jeśli wartość `tension` parametru to 0.0f, ta metoda rysuje linię prostą segmentów do łączenia z punktów. Zazwyczaj `tension` parametr jest mniejsza niż 1.0f. Wartości w ciągu 1.0f generować nieoczekiwane rezultaty.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwonego i zielonego pióra.  
  
-   Tworzy siedem punktów do definiowania krzywej.  
  
-   Rysuje siedem czerwone linie w proste między siedem punktów w celu utworzenia wielokąta.  
  
-   Tworzy napięcie i wprowadź ustawienia trybu.  
  
-   Rysuje zielony zamkniętej krzywej przez siedem punkty.  
  
 Metoda używa napięcie 1.0 i ustawia tryb wypełniania `FillMode.Alternate`.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#19)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#19)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje kardynalna przy użyciu określonej tablicy <see cref="T:System.Drawing.Point" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i wysokość krzywej.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.Point" /> struktur, które definiują krzywej składanej.</param>
        <summary>Rysuje kardynalna przy użyciu określonej tablicy <see cref="T:System.Drawing.Point" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje kardynalna, który przechodzi przez każdy punkt w tablicy.  
  
 Tablica punktów musi zawierać co najmniej trzech <xref:System.Drawing.Point> struktur dla krzywej do narysowania.  
  
 Ta metoda używa napięcie domyślne, wynosi 0,5.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwonego i zielonego pióra.  
  
-   Tworzy siedem punktów do definiowania krzywej.  
  
-   Rysuje sześć czerwone linie w proste między siedem punktów na formularzu niekompletna wielokąta.  
  
-   Rysuje Otwórz krzywą zielony, przez siedem punkty.  
  
 Metoda używa napięcie domyślne, wynosi 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#20)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#20)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl krzywej.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które definiują krzywej składanej.</param>
        <summary>Rysuje kardynalna przy użyciu określonej tablicy <see cref="T:System.Drawing.PointF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje kardynalna, który przechodzi przez każdy punkt w tablicy.  
  
 Tablica punktów musi zawierać co najmniej trzech <xref:System.Drawing.PointF> struktur dla krzywej do narysowania.  
  
 Ta metoda używa napięcie domyślne, wynosi 0,5.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwonego i zielonego pióra.  
  
-   Tworzy siedem punktów do definiowania krzywej.  
  
-   Rysuje sześć czerwone linie w proste między siedem punktów na formularzu niekompletna wielokąta.  
  
-   Rysuje Otwórz krzywą zielony, przez siedem punkty.  
  
 Metoda używa napięcie domyślne, wynosi 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#23)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#23)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.Point[] * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl krzywej.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.Point" /> struktur, które definiują krzywej składanej.</param>
        <param name="tension">Wartość większa niż lub równa 0.0f, który określa napięcie krzywej.</param>
        <summary>Rysuje kardynalna przy użyciu określonej tablicy <see cref="T:System.Drawing.Point" /> struktury za pomocą określonego napięcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje kardynalna, który przechodzi przez każdy punkt w tablicy.  
  
 Tablica punktów musi zawierać co najmniej trzech <xref:System.Drawing.Point> struktur dla krzywej do narysowania.  
  
 `tension` Parametr określa kształt krzywej składanej. Jeśli wartość `tension` parametru to 0.0f, ta metoda rysuje linię prostą segmentów do łączenia z punktów. Zazwyczaj `tension` parametr jest mniejsza niż 1.0f. Wartości w ciągu 1.0f generować nieoczekiwane rezultaty.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwonego i zielonego pióra.  
  
-   Tworzy siedem punktów do definiowania krzywej.  
  
-   Rysuje sześć czerwone linie w proste między siedem punktów na formularzu niekompletna wielokąta.  
  
-   Tworzy ustawienia napięcie.  
  
-   Rysuje Otwórz zielony zamkniętej krzywej przez siedem punkty.  
  
 Metoda używa napięcie 1.0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#22)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#22)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl krzywej.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które reprezentują punkty, które definiują krzywej.</param>
        <param name="tension">Wartość większa niż lub równa 0.0f, który określa napięcie krzywej.</param>
        <summary>Rysuje kardynalna przy użyciu określonej tablicy <see cref="T:System.Drawing.PointF" /> struktury za pomocą określonego napięcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje kardynalna, który przechodzi przez każdy punkt w tablicy.  
  
 Tablica punktów musi zawierać co najmniej trzech <xref:System.Drawing.PointF> struktur dla krzywej do narysowania.  
  
 `tension` Parametr określa kształt krzywej składanej. Jeśli wartość `tension` parametru to 0.0f, ta metoda rysuje linię prostą segmentów do łączenia z punktów. Zazwyczaj `tension` parametr jest mniejsza niż 1.0f. Wartości w ciągu 1.0f generować nieoczekiwane rezultaty.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwonego i zielonego pióra.  
  
-   Tworzy siedem punktów do definiowania krzywej.  
  
-   Rysuje sześć czerwone linie w proste między siedem punktów na formularzu niekompletna wielokąta.  
  
-   Tworzy ustawienia napięcie.  
  
-   Rysuje Otwórz zielony zamkniętej krzywej przez siedem punkty.  
  
 Metoda używa napięcie 1.0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#26)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#26)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, int32 offset, int32 numberOfSegments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, int offset, int numberOfSegments);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] * int * int -&gt; unit" Usage="graphics.DrawCurve (pen, points, offset, numberOfSegments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl krzywej.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które definiują krzywej składanej.</param>
        <param name="offset">Przesunięcie od pierwszego elementu w tablicy <c>punktów</c> parametr punkt początkowy na krzywej.</param>
        <param name="numberOfSegments">Liczba segmentów po punkt początkowy, które mają zostać objęte krzywej.</param>
        <summary>Rysuje kardynalna przy użyciu określonej tablicy <see cref="T:System.Drawing.PointF" /> struktury. Rysunek rozpoczyna przesunięcie od początku tablicy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje kardynalna, który przechodzi przez każdy punkt w tablicy.  
  
 Tablica punktów musi zawierać co najmniej trzech <xref:System.Drawing.PointF> struktur dla krzywej do narysowania.  
  
 Wartość `offset` parametr określa liczbę elementów do pominięcia w tablicy. Pierwszy element po pominięto elementy reprezentuje początkowy punkt krzywej.  
  
 Wartość `numberOfSegments` parametr określa liczbę segmentów, po punkcie początkowym Rysowanie krzywej. Wartość `numberOfSegments` parametr musi być co najmniej 1. Wartość `offset` parametru oraz wartości `numberOfSegments` parametru musi być mniejsza niż liczba elementów w tablicy `points` parametru.  
  
 Ta metoda używa napięcie domyślne, wynosi 0,5.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwonego i zielonego pióra.  
  
-   Tworzy siedem punktów do definiowania krzywej.  
  
-   Rysuje sześć czerwone linie w proste między siedem punktów na formularzu niekompletna wielokąta.  
  
-   Definiuje początkowe przesunięcie punktów i liczbę segmentów.  
  
-   Rysuje Otwórz zielony krzywą (rozpoczyna się od trzeciego punktu) za pomocą pięć ostatnich punktów.  
  
 Metoda używa napięcie domyślne, wynosi 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#24)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#24)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, int32 offset, int32 numberOfSegments, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Int32,System.Int32,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.Point[] * int * int * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, offset, numberOfSegments, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl krzywej.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.Point" /> struktur, które definiują krzywej składanej.</param>
        <param name="offset">Przesunięcie od pierwszego elementu w tablicy <c>punktów</c> parametr punkt początkowy na krzywej.</param>
        <param name="numberOfSegments">Liczba segmentów po punkt początkowy, które mają zostać objęte krzywej.</param>
        <param name="tension">Wartość większa niż lub równa 0.0f, który określa napięcie krzywej.</param>
        <summary>Rysuje kardynalna przy użyciu określonej tablicy <see cref="T:System.Drawing.Point" /> struktury za pomocą określonego napięcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje kardynalna, który przechodzi przez każdy punkt w tablicy.  
  
 Tablica punktów musi zawierać co najmniej trzech <xref:System.Drawing.Point> struktur dla krzywej do narysowania.  
  
 Wartość `offset` parametr określa liczbę elementów do pominięcia w tablicy. Pierwszy element po pominięto elementy reprezentuje początkowy punkt krzywej.  
  
 Wartość `numberOfSegments` parametr określa liczbę segmentów, po punkcie początkowym Rysowanie krzywej. Wartość `numberOfSegments` parametr musi być co najmniej 1. Wartość `offset` parametru oraz wartości `numberOfSegments` parametru musi być mniejsza niż liczba elementów w tablicy `points` parametru.  
  
 `tension` Parametr określa kształt krzywej składanej. Jeśli wartość `tension` parametru to 0.0f, ta metoda rysuje linię prostą segmentów do łączenia z punktów. Zazwyczaj `tension` parametr jest mniejsza niż 1.0f. Wartości w ciągu 1.0f generować nieoczekiwane rezultaty.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwonego i zielonego pióra.  
  
-   Tworzy siedem punktów do definiowania krzywej.  
  
-   Rysuje sześć czerwone linie w proste między siedem punktów na formularzu niekompletna wielokąta.  
  
-   Definiuje początkowe przesunięcie punktów i liczbę segmentów.  
  
-   Definiuje naciągnięcie.  
  
-   Rysuje Otwórz zielony krzywą (rozpoczyna się od trzeciego punktu) za pomocą pięć ostatnich punktów.  
  
 Metoda ustawia naciągnięcie 1.0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#21)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#21)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, int32 offset, int32 numberOfSegments, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] * int * int * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, offset, numberOfSegments, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl krzywej.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które definiują krzywej składanej.</param>
        <param name="offset">Przesunięcie od pierwszego elementu w tablicy <c>punktów</c> parametr punkt początkowy na krzywej.</param>
        <param name="numberOfSegments">Liczba segmentów po punkt początkowy, które mają zostać objęte krzywej.</param>
        <param name="tension">Wartość większa niż lub równa 0.0f, który określa napięcie krzywej.</param>
        <summary>Rysuje kardynalna przy użyciu określonej tablicy <see cref="T:System.Drawing.PointF" /> struktury za pomocą określonego napięcie. Rysunek rozpoczyna przesunięcie od początku tablicy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje kardynalna, który przechodzi przez każdy punkt w tablicy.  
  
 Tablica punktów musi zawierać co najmniej trzech <xref:System.Drawing.PointF> struktur dla krzywej do narysowania.  
  
 Wartość `offset` parametr określa liczbę elementów do pominięcia w tablicy. Pierwszy element po pominięto elementy reprezentuje początkowy punkt krzywej.  
  
 Wartość `numberOfSegments` parametr określa liczbę segmentów, po punkcie początkowym Rysowanie krzywej. Wartość `numberOfSegments` parametr musi być co najmniej 1. Wartość `offset` parametru oraz wartości `numberOfSegments` parametru musi być mniejsza niż liczba elementów w tablicy `points` parametru.  
  
 `tension` Parametr określa kształt krzywej składanej. Jeśli wartość `tension` parametru to 0.0f, ta metoda rysuje linię prostą segmentów do łączenia z punktów. Zazwyczaj `tension` parametr jest mniejsza niż 1.0f. Wartości w ciągu 1.0f generować nieoczekiwane rezultaty.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwonego i zielonego pióra.  
  
-   Tworzy siedem punktów do definiowania krzywej.  
  
-   Rysuje sześć czerwone linie w proste między siedem punktów na formularzu niekompletna wielokąta.  
  
-   Definiuje początkowe przesunięcie punktów i liczbę segmentów.  
  
-   Definiuje naciągnięcie.  
  
-   Rysuje Otwórz zielony krzywą (rozpoczyna się od trzeciego punktu) za pomocą pięć ostatnich punktów.  
  
 Metoda ustawia naciągnięcie 1.0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#25)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#25)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawEllipse">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje elipsę z definicją otaczający prostokąt określony przez parę współrzędne, wysokość i szerokość.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawEllipse (pen, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl elipsy.</param>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która definiuje granice elipsy.</param>
        <summary>Rysuje elipsę określony przez blokujących <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda Rysuje elipsę, który jest definiowany przez prostokąt otaczający określony przez `rect` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy prostokąt powiązany elipsę.  
  
-   Rysuje elipsę na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#27)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#27)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * System.Drawing.RectangleF -&gt; unit" Usage="graphics.DrawEllipse (pen, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl elipsy.</param>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która definiuje granice elipsy.</param>
        <summary>Rysuje elipsę z definicją blokujących <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda Rysuje elipsę, który jest definiowany przez prostokąt otaczający określony przez `rect` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy prostokąt powiązany elipsę.  
  
-   Rysuje elipsę na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#28)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#28)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * int * int * int * int -&gt; unit" Usage="graphics.DrawEllipse (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl elipsy.</param>
        <param name="x">Współrzędna x w lewym górnym rogu prostokąt otaczający, który definiuje elipsy.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąt otaczający, który definiuje elipsy.</param>
        <param name="width">Szerokość prostokąt otaczający, który definiuje elipsy.</param>
        <param name="height">Wysokość prostokąt otaczający, który definiuje elipsy.</param>
        <summary>Rysuje elipsę z definicją otaczający prostokąt określony przez współrzędne lewego górnego rogu prostokąta, wysokość i szerokość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda Rysuje elipsę, który jest definiowany przez prostokąt otaczający opisanego przez `x`, `y`, `width`, i `height` parametrów.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy, położenie i rozmiar prostokąta powiązany elipsę.  
  
-   Rysuje elipsę na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#29)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#29)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * single * single * single * single -&gt; unit" Usage="graphics.DrawEllipse (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl elipsy.</param>
        <param name="x">Współrzędna x w lewym górnym rogu prostokąt otaczający, który definiuje elipsy.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąt otaczający, który definiuje elipsy.</param>
        <param name="width">Szerokość prostokąt otaczający, który definiuje elipsy.</param>
        <param name="height">Wysokość prostokąt otaczający, który definiuje elipsy.</param>
        <summary>Rysuje elipsę z definicją otaczający prostokąt określony przez parę współrzędne, wysokość i szerokość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda Rysuje elipsę, który jest definiowany przez prostokąt otaczający opisanego przez `x`, `y`, `width`, i `height` parametrów.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy, położenie i rozmiar prostokąta powiązany elipsę.  
  
-   Rysuje elipsę na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#30)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#30)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawIcon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje obraz, reprezentowane przez określony <see cref="T:System.Drawing.Icon" /> na określonych współrzędnych.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawIcon">
      <MemberSignature Language="C#" Value="public void DrawIcon (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIcon(class System.Drawing.Icon icon, valuetype System.Drawing.Rectangle targetRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIcon(System::Drawing::Icon ^ icon, System::Drawing::Rectangle targetRect);" />
      <MemberSignature Language="F#" Value="member this.DrawIcon : System.Drawing.Icon * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawIcon (icon, targetRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="icon">
          <see cref="T:System.Drawing.Icon" /> Aby narysować.</param>
        <param name="targetRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar obraz wynikowy na wyświetlanej powierzchni. Obraz zawarte w <c>ikonę</c> parametru jest skalowana do wymiarów tej prostokątny obszar.</param>
        <summary>Rysuje obraz, reprezentowane przez określony <see cref="T:System.Drawing.Icon" /> z zakresu określonego przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ikony na podstawie standardowego pliku ikony Windows SampIcon.ico w folderze przykładu.  
  
-   Tworzy prostokąt, w którym można narysować ikonę.  
  
-   Pobiera ikonę do ekranu.  
  
 Pozycja prostokąta lokalizuje ikony na ekranie i rozmiar prostokąta Określa skalowanie rysowane ikony.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#31)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#31)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="icon" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawIcon">
      <MemberSignature Language="C#" Value="public void DrawIcon (System.Drawing.Icon icon, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIcon(class System.Drawing.Icon icon, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIcon(System::Drawing::Icon ^ icon, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.DrawIcon : System.Drawing.Icon * int * int -&gt; unit" Usage="graphics.DrawIcon (icon, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="icon">
          <see cref="T:System.Drawing.Icon" /> Aby narysować.</param>
        <param name="x">Współrzędna x w lewym górnym rogu narysowany obraz.</param>
        <param name="y">Współrzędna y lewego górnego rogu narysowany obraz.</param>
        <summary>Rysuje obraz, reprezentowane przez określony <see cref="T:System.Drawing.Icon" /> na określonych współrzędnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ikony na podstawie standardowego pliku ikony Windows SampIcon.ico w folderze przykładu.  
  
-   Tworzy współrzędne lewego górnego rogu, od którego należy narysować ikonę.  
  
-   Pobiera ikonę do ekranu.  
  
 Ikona rysowane jest nieskalowanego.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#32)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#32)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="icon" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawIconUnstretched">
      <MemberSignature Language="C#" Value="public void DrawIconUnstretched (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIconUnstretched(class System.Drawing.Icon icon, valuetype System.Drawing.Rectangle targetRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIconUnstretched(System.Drawing.Icon,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIconUnstretched(System::Drawing::Icon ^ icon, System::Drawing::Rectangle targetRect);" />
      <MemberSignature Language="F#" Value="member this.DrawIconUnstretched : System.Drawing.Icon * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawIconUnstretched (icon, targetRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="icon">
          <see cref="T:System.Drawing.Icon" /> Aby narysować.</param>
        <param name="targetRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar obraz wynikowy. Obraz, który nie jest skalowane w celu dopasowania tej prostokąt, ale zachowuje oryginalnego rozmiaru. Jeśli obraz, który jest większy niż prostokąt, zostanie obcięta zmieścił się wewnątrz go.</param>
        <summary>Rysuje obraz, reprezentowane przez określony <see cref="T:System.Drawing.Icon" /> bez skalowania obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ikony na podstawie standardowego pliku ikony Windows SampIcon.ico w folderze przykładu.  
  
-   Tworzy prostokąt, w którym można narysować ikonę.  
  
-   Pobiera ikonę do ekranu.  
  
 Pozycja prostokąta lokalizuje ikony na ekranie, a ikona rysowane jest nieskalowane i nieobcinanego.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#33)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#33)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="icon" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawImage">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z oryginalnego rozmiaru.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point -&gt; unit" Usage="graphics.DrawImage (image, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="point">
          <see cref="T:System.Drawing.Point" /> Struktura, która reprezentuje lokalizację w lewym górnym rogu narysowany obraz.</param>
        <summary>Rysuje określonego <see cref="T:System.Drawing.Image" />, przy użyciu oryginalnego rozmiaru fizycznego, w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość pikseli szerokości i wartość rozdzielczość pozioma (punkty na cal). Szerokość fizycznej (w calach) obrazu jest podzielona przez rozdzielczość pozioma szerokość w pikselach. Na przykład obraz o pikseli szerokości 216 i rozdzielczość pozioma 72 dpi ma fizyczny szerokość cala 3. Podobne uwagi dotyczą pikseli wysokości i wysokość fizycznych.  
  
 Ta metoda pobiera obraz z użyciem jego rozmiar fizyczny, tak aby było jego poprawny rozmiar obrazu (w calach) niezależnie od tego, rozdzielczość (punkty na cal) urządzenia wyświetlającego. Na przykład załóżmy, że obraz został pikseli szerokości 216 i rozdzielczość pozioma 72 dpi. Jeśli chcesz wywołać tę metodę, aby narysować tego obrazu na urządzeniu wyposażonym w rozdzielczości 96 dpi, szerokość piksela wyrenderowany obraz będzie (216/72) * 96 = 288.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkt, w którym należy narysować w lewym górnym rogu obrazu.  
  
-   Rysuje nieskalowanego obrazu na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#34)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#34)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawImage (image, destPoints)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="destPoints">Tablica trzy <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok.</param>
        <summary>Rysuje określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym kształtu i rozmiaru.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.Point> struktury reprezentują lewym, prawym górnym rogu i lewym dolnym rogu równoległobok. Czwarty punkt jest ekstrapolacji pierwsze trzy w celu utworzenia równoległobok.  
  
 Obraz, który zastąpionego `image` parametru jest skalowany i pochylono do rozmiaru kształtu równoległobok określony przez `destPoints` parametrów.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok do rysowania obrazu.  
  
-   Rysuje obraz do ekranu.  
  
 Pozycja równoległobok lokalizuje obrazu na ekranie, a rozmiar oryginalny obraz oraz wielkość i kształt równoległobok Określa skalowanie i pochylenia rysowane obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#35)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#35)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::PointF point);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawImage (image, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="point">
          <see cref="T:System.Drawing.PointF" /> Struktura, która reprezentuje w lewym górnym rogu narysowany obraz.</param>
        <summary>Rysuje określonego <see cref="T:System.Drawing.Image" />, przy użyciu oryginalnego rozmiaru fizycznego, w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość pikseli szerokości i wartość rozdzielczość pozioma (punkty na cal). Szerokość fizycznej (w calach) obrazu jest podzielona przez rozdzielczość pozioma szerokość w pikselach. Na przykład obraz o pikseli szerokości 216 i rozdzielczość pozioma 72 dpi ma fizyczny szerokość cala 3. Podobne uwagi dotyczą pikseli wysokości i wysokość fizycznych.  
  
 Ta metoda pobiera obraz z użyciem jego rozmiar fizyczny, tak aby było jego poprawny rozmiar obrazu (w calach) niezależnie od tego, rozdzielczość (punkty na cal) urządzenia wyświetlającego. Na przykład załóżmy, że obraz został pikseli szerokości 216 i rozdzielczość pozioma 72 dpi. Jeśli chcesz wywołać tę metodę, aby narysować tego obrazu na urządzeniu wyposażonym w rozdzielczości 96 dpi, szerokość piksela wyrenderowany obraz będzie (216/72) * 96 = 288.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkt, w którym należy narysować w lewym górnym rogu obrazu.  
  
-   Rysuje nieskalowanego obrazu na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#40)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#40)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawImage (image, destPoints)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="destPoints">Tablica trzy <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok.</param>
        <summary>Rysuje określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym kształtu i rozmiaru.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.PointF> struktury reprezentują lewym, prawym górnym rogu i lewym dolnym rogu równoległobok. Czwarty punkt jest ekstrapolacji pierwsze trzy w celu utworzenia równoległobok.  
  
 Obraz, który zastąpionego `image` obiektu jest skalowany i pochylono do rozmiaru kształtu równoległobok określony przez `destPoints` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok do rysowania obrazu.  
  
-   Rysuje obraz do ekranu.  
  
 Pozycja równoległobok lokalizuje obrazu na ekranie, a rozmiar oryginalny obraz oraz wielkość i kształt równoległobok Określa skalowanie i pochylenia rysowane obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#41)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#41)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawImage (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar narysowany obraz.</param>
        <summary>Rysuje określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obraz, który zastąpionego `image` obiektu jest skalowany wymiary `rect` prostokąta.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy prostokąt, w którym do rysowania obrazu.  
  
-   Rysuje obraz do ekranu.  
  
 Pozycja prostokąta lokalizuje obrazu na ekranie, a rozmiar oryginalny obraz i rozmiar prostokąta Określa skalowanie narysowany obraz.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#46)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#46)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#46)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.RectangleF -&gt; unit" Usage="graphics.DrawImage (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa lokalizację i rozmiar narysowany obraz.</param>
        <summary>Rysuje określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obraz, który zastąpionego `image` obiektu jest skalowany wymiary `rect` prostokąta.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy prostokąt, w którym do rysowania obrazu.  
  
-   Rysuje obraz do ekranu.  
  
 Pozycja prostokąta lokalizuje obrazu na ekranie, a oryginalny rozmiar obrazu i rozmiar prostokąta Określa skalowanie narysowany obraz.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#56)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#56)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#56)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * int * int -&gt; unit" Usage="graphics.DrawImage (image, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="x">Współrzędna x w lewym górnym rogu narysowany obraz.</param>
        <param name="y">Współrzędna y lewego górnego rogu narysowany obraz.</param>
        <summary>Rysuje określonego obrazu, przy użyciu oryginalnego rozmiaru fizycznego, w lokalizacji określonej przez parę współrzędnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość pikseli szerokości i wartość rozdzielczość pozioma (punkty na cal). Szerokość fizycznej (w calach) obrazu jest podzielona przez rozdzielczość pozioma szerokość w pikselach. Na przykład obraz o pikseli szerokości 216 i rozdzielczość pozioma 72 dpi ma fizyczny szerokość cala 3. Podobne uwagi dotyczą pikseli wysokości i wysokość fizycznych.  
  
 <xref:System.Drawing.Graphics.DrawImage%2A> Metoda Rysuje obraz z użyciem jego rozmiar fizyczny, tak aby było jego poprawny rozmiar obrazu (w calach) niezależnie od tego, rozdzielczość (punkty na cal) urządzenia wyświetlającego. Na przykład załóżmy, że obraz został pikseli szerokości 216 i rozdzielczość pozioma 72 dpi. Jeśli wywołasz <xref:System.Drawing.Graphics.DrawImage%2A> rysowanie tego obrazu na urządzeniu wyposażonym w rozdzielczości 96 dpi, szerokość piksela wyrenderowany obraz będzie (216/72) * 96 = 288.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykład SampImag.jpg w folderze przykładu.  
  
-   Tworzy współrzędne punktu, w którym do rysowania w lewym górnym rogu obrazu.  
  
-   Rysuje obraz nieskalowanego.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#58)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#58)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * single * single -&gt; unit" Usage="graphics.DrawImage (image, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="x">Współrzędna x w lewym górnym rogu narysowany obraz.</param>
        <param name="y">Współrzędna y lewego górnego rogu narysowany obraz.</param>
        <summary>Rysuje określonego <see cref="T:System.Drawing.Image" />, przy użyciu oryginalnego rozmiaru fizycznego, w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość pikseli szerokości i wartość rozdzielczość pozioma (punkty na cal). Szerokość fizycznej (w calach) obrazu jest podzielona przez rozdzielczość pozioma szerokość w pikselach. Na przykład obraz o pikseli szerokości 216 i rozdzielczość pozioma 72 dpi ma fizyczny szerokość cala 3. Podobne uwagi dotyczą pikseli wysokości i wysokość fizycznych.  
  
 Ta metoda pobiera obraz z użyciem jego rozmiar fizyczny, tak aby było jego poprawny rozmiar obrazu (w calach) niezależnie od tego, rozdzielczość (punkty na cal) urządzenia wyświetlającego. Na przykład załóżmy, że obraz został pikseli szerokości 216 i rozdzielczość pozioma 72 dpi. Jeśli chcesz wywołać tę metodę, aby narysować tego obrazu na urządzeniu wyposażonym w rozdzielczości 96 dpi, szerokość piksela wyrenderowany obraz będzie (216/72) * 96 = 288.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy współrzędne punktu, w którym do rysowania w lewym górnym rogu obrazu.  
  
-   Rysuje nieskalowanego obrazu na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#61)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#61)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#61)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="destPoints">Tablica trzy <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część <c>obraz</c> obiektu do rysowania.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostki miary używanej przez <c>srcRect</c> parametru.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.Point> struktury reprezentują lewym, prawym górnym rogu i lewym dolnym rogu równoległobok. Czwarty punkt jest ekstrapolacji pierwsze trzy w celu utworzenia równoległobok.  
  
 `srcRect` Parametr określa prostokątny fragment `image` obiektu do rysowania. Ta część jest skalowany i pochylono aby zmieścił się wewnątrz równoległobok określony przez `destPoints` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok do rysowania obrazu.  
  
-   Tworzy prostokąt, aby wybrać część obrazu do rysowania.  
  
-   Ustawia rysowania jednostki do pikseli grafiki.  
  
-   Rysuje obraz do ekranu.  
  
 Pozycja równoległobok lokalizuje obrazu na ekranie, a rozmiar prostokąta oraz wielkość i kształt równoległobok Określa skalowanie i pochylenia rysowane obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#36)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#36)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#36)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="destPoints">Tablica trzy <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część <c>obraz</c> obiektu do rysowania.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostki miary używanej przez <c>srcRect</c> parametru.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.PointF> struktury reprezentują lewym, prawym górnym rogu i lewym dolnym rogu równoległobok. Czwarty punkt jest ekstrapolacji pierwsze trzy w celu utworzenia równoległobok.  
  
 `srcRect` Parametr określa prostokątny fragment `image` obiektu do rysowania. Ta część jest skalowany i pochylono aby zmieścił się wewnątrz równoległobok określony przez `destPoints` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok docelowego do rysowania obrazu.  
  
-   Tworzy prostokąt źródło, z którego mają zostać wyodrębnione część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego do pikseli.  
  
-   Rysuje obraz do ekranu.  
  
 Pozycja równoległobok docelowego lokalizuje obrazu na ekranie, rozmiar prostokąta źródłowego oraz wielkość i kształt równoległobok docelowego Określa skalowanie i pochylanie rysowane obrazu i określa rozmiar prostokąta jaka część oryginalnego obrazu jest rysowana na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#42)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#42)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar narysowany obraz. Obraz, który jest odpowiednio dopasowane prostokątem.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część <c>obraz</c> obiektu do rysowania.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostki miary używanej przez <c>srcRect</c> parametru.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcRect` Parametr określa prostokątny fragment `image` obiektu do rysowania. Ta część jest skalowana, aby zmieścił się wewnątrz prostokąt określony przez `destRect` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy prostokąta docelowego do rysowania obrazu.  
  
-   Tworzy prostokąt źródło, z którego mają zostać wyodrębnione część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego do pikseli.  
  
-   Rysuje obraz do ekranu.  
  
 Pozycja prostokąta docelowego lokalizuje obrazu na ekranie, rozmiary prostokąty źródłowe i docelowe określić skalowanie narysowany obraz i rozmiar prostokąta źródłowego Określa, jaka część oryginalnego obrazu jest rysowane ekran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#47)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#47)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#47)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa lokalizację i rozmiar narysowany obraz. Obraz, który jest odpowiednio dopasowane prostokątem.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część <c>obraz</c> obiektu do rysowania.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostki miary używanej przez <c>srcRect</c> parametru.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcRect` Parametr określa prostokątny fragment `image` obiektu do rysowania. Ta część jest skalowana, aby zmieścił się wewnątrz prostokąt określony przez `destRect` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy prostokąta docelowego do rysowania obrazu.  
  
-   Tworzy prostokąt źródło, z którego mają zostać wyodrębnione część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego do pikseli.  
  
-   Rysuje obraz do ekranu.  
  
 Pozycja prostokąta docelowego lokalizuje obrazu na ekranie, rozmiary prostokąty źródłowe i docelowe określić skalowanie narysowany obraz i rozmiar prostokąta źródłowego Określa, jaka część oryginalnego obrazu jest rysowane ekran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#57)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#57)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="destPoints">Tablica trzy <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część <c>obraz</c> obiektu do rysowania.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostki miary używanej przez <c>srcRect</c> parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> Określa informacje o ponowne kolorowanie i gamma <c>obraz</c> obiektu.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.Point> struktury reprezentują lewym, prawym górnym rogu i lewym dolnym rogu równoległobok. Czwarty punkt jest ekstrapolacji pierwsze trzy w celu utworzenia równoległobok.  
  
 `srcRect` Parametr określa prostokątny fragment`image` obiektu do rysowania. Ta część jest skalowany i pochylono aby zmieścił się wewnątrz równoległobok określony przez `destPoints` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok do rysowania obrazu.  
  
-   Tworzy prostokąt, aby wybrać część obrazu do rysowania.  
  
-   Ustawia rysowania jednostki do pikseli grafiki.  
  
-   Rysuje oryginalnego obrazu na ekranie.  
  
-   Tworzy dodatkowe Równoległobok do rysowania skorygowany obrazu.  
  
-   Tworzy i ustawia atrybuty skorygowany obrazu będzie mieć wartość gamma większe niż zwykle.  
  
-   Rysuje obraz skorygowany do ekranu.  
  
 W przypadku równoległobok oryginalny, nieskorygowane pozycja lokalizuje obrazu na ekranie i rozmiar prostokąta oraz wielkość i kształt równoległobok Określa skalowanie i pochylanie rysowane obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#37)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#37)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#37)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="destPoints">Tablica trzy <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część <c>obraz</c> obiektu do rysowania.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostki miary używanej przez <c>srcRect</c> parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> Określa informacje o ponowne kolorowanie i gamma <c>obraz</c> obiektu.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.PointF> struktury reprezentują lewym, prawym górnym rogu i lewym dolnym rogu równoległobok. Czwarty punkt jest ekstrapolacji pierwsze trzy w celu utworzenia równoległobok.  
  
 `srcRect` Parametr określa prostokątny fragment `image` obiektu do rysowania. Ta część jest skalowany i pochylono aby zmieścił się wewnątrz równoległobok określony przez `destPoints` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok docelowego do rysowania obrazu.  
  
-   Tworzy prostokąt źródło, z którego mają zostać wyodrębnione część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego do pikseli.  
  
-   Rysuje oryginalnego obrazu na ekranie.  
  
-   Tworzy dodatkowe Równoległobok do rysowania skorygowany obrazu.  
  
-   Tworzy i ustawia atrybuty skorygowany obrazu będzie mieć wartość gamma większe niż zwykle.  
  
-   Rysuje obraz skorygowany do ekranu.  
  
 Dla równoległobok oryginalnego nieskorygowane docelowy, pozycja lokalizuje obrazu na ekranie, rozmiar prostokąta źródłowego i rozmiar i kształt równoległobok docelowego Określa skalowanie i pochylanie narysowany obraz i rozmiar Prostokąt Określa, jaka część oryginalnego obrazu jest rysowana na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#43)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#43)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#43)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * int * int * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, x, y, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="x">Współrzędna x w lewym górnym rogu narysowany obraz.</param>
        <param name="y">Współrzędna y lewego górnego rogu narysowany obraz.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część <c>obraz</c> obiektu do rysowania.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostki miary używanej przez <c>srcRect</c> parametru.</param>
        <summary>Rysuje część obrazu w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość pikseli szerokości i wartość rozdzielczość pozioma (punkty na cal). Szerokość fizycznej (w calach) obrazu jest podzielona przez rozdzielczość pozioma szerokość w pikselach. Na przykład obraz o 360 pikseli szerokości i rozdzielczość pozioma 72 dpi ma fizyczny szerokość 5 cali. Podobne uwagi dotyczą pikseli wysokości i wysokość fizycznych.  
  
 Ta metoda pobiera część obrazu przy użyciu jego rozmiar fizyczny, więc część obrazu będzie mieć prawidłowy rozmiar (w calach) niezależnie od rozwiązania (punkty na cal) urządzenia. Na przykład załóżmy, że część obrazu ma pikseli szerokości 216 i rozdzielczość pozioma 72 dpi. Jeśli chcesz wywołać tę metodę, aby narysować część obrazu na urządzeniu wyposażonym w rozdzielczości 96 dpi, szerokość piksela części wyrenderowany obraz będzie (216/72) * 96 = 288.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy współrzędne, w którym należy narysować w lewym górnym rogu obrazu.  
  
-   Tworzy prostokąt źródło, z którego mają zostać wyodrębnione część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego do pikseli.  
  
-   Rysuje obraz do ekranu.  
  
 Rozmiar prostokąta źródłowego Określa, jaka część nieskalowanego oryginalny obraz jest rysowana na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#59)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#59)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * int * int * int * int -&gt; unit" Usage="graphics.DrawImage (image, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="x">Współrzędna x w lewym górnym rogu narysowany obraz.</param>
        <param name="y">Współrzędna y lewego górnego rogu narysowany obraz.</param>
        <param name="width">Szerokość narysowany obraz.</param>
        <param name="height">Wysokość narysowany obraz.</param>
        <summary>Rysuje określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prostokąta zdefiniowanego przez `x`, `y`, `width`, i `height` parametrów określa położenie i rozmiar narysowany obraz.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy, położenie i rozmiar prostokąta do rysowania obrazu.  
  
-   Rysuje obraz do ekranu.  
  
 Pozycja prostokąta lokalizuje obrazu na ekranie, a rozmiar oryginalny obraz i rozmiar prostokąta Określa skalowanie narysowany obraz.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#60)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#60)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * single * single * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, x, y, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="x">Współrzędna x w lewym górnym rogu narysowany obraz.</param>
        <param name="y">Współrzędna y lewego górnego rogu narysowany obraz.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część <see cref="T:System.Drawing.Image" /> do rysowania.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostki miary używanej przez <c>srcRect</c> parametru.</param>
        <summary>Rysuje część obrazu w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość pikseli szerokości i wartość rozdzielczość pozioma (punkty na cal). Szerokość fizycznej (w calach) obrazu jest podzielona przez rozdzielczość pozioma szerokość w pikselach. Na przykład obraz o 360 pikseli szerokości i rozdzielczość pozioma 72 dpi ma fizyczny szerokość 5 cali. Podobne uwagi dotyczą pikseli wysokości i wysokość fizycznych.  
  
 Ta metoda pobiera część obrazu przy użyciu jego rozmiar fizyczny, więc część obrazu będzie mieć prawidłowy rozmiar (w calach) niezależnie od rozwiązania (punkty na cal) urządzenia. Na przykład załóżmy, że część obrazu ma pikseli szerokości 216 i rozdzielczość pozioma 72 dpi. Jeśli chcesz wywołać tę metodę, aby narysować część obrazu na urządzeniu wyposażonym w rozdzielczości 96 dpi, szerokość piksela części wyrenderowany obraz będzie (216/72) * 96 = 288.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy współrzędne, w którym należy narysować w lewym górnym rogu obrazu.  
  
-   Tworzy prostokąt źródło, z którego mają zostać wyodrębnione część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego do pikseli.  
  
-   Rysuje obraz do ekranu.  
  
 Rozmiar prostokąta źródłowego Określa, jaka część nieskalowanego oryginalny obraz jest rysowana na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#62)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#62)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * single * single * single * single -&gt; unit" Usage="graphics.DrawImage (image, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="x">Współrzędna x w lewym górnym rogu narysowany obraz.</param>
        <param name="y">Współrzędna y lewego górnego rogu narysowany obraz.</param>
        <param name="width">Szerokość narysowany obraz.</param>
        <param name="height">Wysokość narysowany obraz.</param>
        <summary>Rysuje określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prostokąta zdefiniowanego przez `x`, `y`, `width`, i `height` parametrów określa położenie i rozmiar narysowany obraz.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy, położenie i rozmiar prostokąta do rysowania obrazu.  
  
-   Rysuje obraz do ekranu.  
  
 Pozycja prostokąta lokalizuje obrazu na ekranie, a rozmiar oryginalny obraz i rozmiar prostokąta Określa skalowanie narysowany obraz.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#63)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#63)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="destPoints">Tablica trzy <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część <c>obraz</c> obiektu do rysowania.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostki miary używanej przez <c>srcRect</c> parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> Określa informacje o ponowne kolorowanie i gamma <c>obraz</c> obiektu.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> Delegat, który określa metodę do wywołania podczas rysowania obrazu. Ta metoda jest wywoływana często, aby sprawdzić, czy chcesz zatrzymać wykonywanie <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> metoda zgodnie z kryteriami określane przez aplikację.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.PointF> struktury reprezentują lewym, prawym górnym rogu i lewym dolnym rogu równoległobok. Czwarty punkt jest ekstrapolacji pierwsze trzy w celu utworzenia równoległobok.  
  
 `srcRect` Parametr określa prostokątny fragment `image` obiektu do rysowania. Ta część jest skalowany i pochylono aby zmieścił się wewnątrz równoległobok określony przez `destPoints` parametru.  
  
 Tego przeciążenia z `callback` parametru udostępnia środki, aby zatrzymać Rysowanie obrazu po jego uruchomieniu, zgodnie z kryteriami określone przez aplikację. Na przykład można uruchomić aplikacji rysowania duży obraz, a użytkownik może przewijać obraz mieściły się na ekranie, w których w przypadku aplikacji można zatrzymać rysunku.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Ten kod najpierw definiuje metodę wywołania zwrotnego <xref:System.Drawing.Graphics.DrawImageAbort> delegować; definicja jest uproszczony i jedynie testy, aby zobaczyć, czy <xref:System.Drawing.Graphics.DrawImage%2A> metoda wywołuje on wartość null `callBackData` parametru. Główną przykład wykonuje następujące czynności:  
  
-   Tworzy wystąpienie <xref:System.Drawing.Graphics.DrawImageAbort> metody wywołania zwrotnego:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok do rysowania obrazu.  
  
-   Tworzy prostokąt, aby wybrać część obrazu do rysowania.  
  
-   Ustawia rysowania jednostki do pikseli grafiki.  
  
-   Rysuje oryginalnego obrazu na ekranie.  
  
-   Tworzy dodatkowe Równoległobok do rysowania skorygowany obrazu.  
  
-   Tworzy i ustawia atrybuty skorygowany obrazu będzie mieć wartość gamma większe niż zwykle.  
  
-   Rysuje obraz skorygowany do ekranu.  
  
 W przypadku równoległobok oryginalny, nieskorygowane pozycja lokalizuje obrazu na ekranie i rozmiar prostokąta oraz wielkość i kształt równoległobok Określa skalowanie i pochylanie rysowane obrazu.  
  
 Ponieważ w tym przykładzie użyto przeciążenia, które nie zostały spełnione `callBackData` parametru <xref:System.Drawing.Graphics.DrawImageAbort> wywołania zwrotnego zwraca `true`, co powoduje, że <xref:System.Drawing.Graphics.DrawImage%2A> metody w celu i kod obsługi wyjątków, ujęty w przykładzie do drukowania tekst wyjątku zamiast rysowania obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#38)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#38)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="destPoints">Tablica trzy <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część <c>obraz</c> obiektu do rysowania.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostki miary używanej przez <c>srcRect</c> parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> Określa informacje o ponowne kolorowanie i gamma <c>obraz</c> obiektu.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> Delegat, który określa metodę do wywołania podczas rysowania obrazu. Ta metoda jest wywoływana często, aby sprawdzić, czy chcesz zatrzymać wykonywanie <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> metoda zgodnie z kryteriami określane przez aplikację.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.PointF> struktury reprezentują lewym, prawym górnym rogu i lewym dolnym rogu równoległobok. Czwarty punkt jest ekstrapolacji pierwsze trzy w celu utworzenia równoległobok.  
  
 `srcRect` Parametr określa prostokątny fragment `image` obiektu do rysowania. Ta część jest skalowany i pochylono aby zmieścił się wewnątrz równoległobok określony przez `destPoints` parametru.  
  
 Tego przeciążenia z `callback` parametru udostępnia środki, aby zatrzymać Rysowanie obrazu po jego uruchomieniu, zgodnie z kryteriami określone przez aplikację. Na przykład można uruchomić aplikacji rysowania duży obraz, a użytkownik może przewijać obraz mieściły się na ekranie, w których w przypadku aplikacji można zatrzymać rysunku.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Ten kod najpierw definiuje metodę wywołania zwrotnego <xref:System.Drawing.Graphics.DrawImageAbort> delegować; definicja jest uproszczony i jedynie testy, aby zobaczyć, czy <xref:System.Drawing.Graphics.DrawImage%2A> metoda wywołuje on wartość null `callBackData` parametru. Główną przykład wykonuje następujące czynności:  
  
-   Tworzy wystąpienie <xref:System.Drawing.Graphics.DrawImageAbort> metody wywołania zwrotnego.  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok do rysowania obrazu.  
  
-   Tworzy prostokąt, aby wybrać część obrazu do rysowania.  
  
-   Ustawia rysowania jednostki do pikseli grafiki.  
  
-   Rysuje oryginalnego obrazu na ekranie.  
  
-   Tworzy dodatkowe Równoległobok do rysowania skorygowany obrazu.  
  
-   Tworzy i ustawia atrybuty skorygowany obrazu będzie mieć wartość gamma większe niż zwykle.  
  
-   Rysuje obraz skorygowany do ekranu.  
  
 W przypadku równoległobok oryginalny, nieskorygowane pozycja lokalizuje obrazu na ekranie i rozmiar prostokąta oraz wielkość i kształt równoległobok Określa skalowanie i pochylanie rysowane obrazu.  
  
 Ponieważ w tym przykładzie użyto przeciążenia, które nie zostały spełnione `callBackData` parametru <xref:System.Drawing.Graphics.DrawImageAbort> wywołania zwrotnego zwraca `true`, co powoduje, że <xref:System.Drawing.Graphics.DrawImage%2A> metody w celu i kod obsługi wyjątków, ujęty w przykładzie do drukowania tekst wyjątku zamiast rysowania obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#44)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#44)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback, int32 callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback, int callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * int -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="destPoints">Tablica trzy <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część <c>obraz</c> obiektu do rysowania.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostki miary używanej przez <c>srcRect</c> parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> Określa informacje o ponowne kolorowanie i gamma <c>obraz</c> obiektu.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> Delegat, który określa metodę do wywołania podczas rysowania obrazu. Ta metoda jest wywoływana często, aby sprawdzić, czy chcesz zatrzymać wykonywanie <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> metoda zgodnie z kryteriami określane przez aplikację.</param>
        <param name="callbackData">Wartość określająca dodatkowymi danymi dotyczącymi <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> delegata używany do sprawdzania, czy chcesz zatrzymać wykonywanie <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> metody.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.PointF> struktury reprezentują lewym, prawym górnym rogu i lewym dolnym rogu równoległobok. Czwarty punkt jest ekstrapolacji pierwsze trzy w celu utworzenia równoległobok.  
  
 `srcRect` Parametr określa prostokątny fragment `image` obiektu do rysowania. Ta część jest skalowany i pochylono aby zmieścił się wewnątrz równoległobok określony przez `destPoints` parametru.  
  
 Tego przeciążenia z `callback` i `callbackData` parametry udostępnia środki, aby zatrzymać Rysowanie obrazu po jego uruchomieniu, zgodnie z kryteriami i dane określone przez aplikację. Na przykład można uruchomić aplikacji rysowania duży obraz, a użytkownik może przewijać obraz mieściły się na ekranie, w których w przypadku aplikacji można zatrzymać rysunku.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Ten kod najpierw definiuje metodę wywołania zwrotnego <xref:System.Drawing.Graphics.DrawImageAbort> delegować; definicja jest uproszczony i jedynie testy, aby zobaczyć, czy <xref:System.Drawing.Graphics.DrawImage%2A> metoda wywołuje on wartość null `callBackData` parametru. Główną przykład wykonuje następujące czynności:  
  
-   Tworzy wystąpienie <xref:System.Drawing.Graphics.DrawImageAbort> metody wywołania zwrotnego.  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok do rysowania obrazu.  
  
-   Tworzy prostokąt, aby wybrać część obrazu do rysowania.  
  
-   Ustawia rysowania jednostki do pikseli grafiki.  
  
-   Rysuje oryginalnego obrazu na ekranie.  
  
-   Tworzy dodatkowe Równoległobok do rysowania skorygowany obrazu.  
  
-   Tworzy i ustawia atrybuty skorygowany obrazu będzie mieć wartość gamma większe niż zwykle.  
  
-   Rysuje obraz skorygowany do ekranu.  
  
 W przypadku równoległobok oryginalny, nieskorygowane pozycja lokalizuje obrazu na ekranie i rozmiar prostokąta oraz wielkość i kształt równoległobok Określa skalowanie i pochylanie rysowane obrazu.  
  
 Ponieważ w tym przykładzie używane jest przeciążenie, które przekazuje `callBackData` parametru <xref:System.Drawing.Graphics.DrawImageAbort> wywołania zwrotnego zwraca `false`, co powoduje, że <xref:System.Drawing.Graphics.DrawImage%2A> metodę, aby kontynuować, a przykład Rysuje obraz skorygowany do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#39)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#39)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#39)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback, int32 callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback, int callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * int -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="destPoints">Tablica trzy <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część <c>obraz</c> obiektu do rysowania.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostki miary używanej przez <c>srcRect</c> parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> Określa informacje o ponowne kolorowanie i gamma <c>obraz</c> obiektu.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> Delegat, który określa metodę do wywołania podczas rysowania obrazu. Ta metoda jest wywoływana często, aby sprawdzić, czy chcesz zatrzymać wykonywanie <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> metoda zgodnie z kryteriami określane przez aplikację.</param>
        <param name="callbackData">Wartość określająca dodatkowymi danymi dotyczącymi <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> delegata używany do sprawdzania, czy chcesz zatrzymać wykonywanie <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> metody.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.PointF> struktury reprezentują lewym, prawym górnym rogu i lewym dolnym rogu równoległobok. Czwarty punkt jest ekstrapolacji pierwsze trzy w celu utworzenia równoległobok.  
  
 `srcRect` Parametr określa prostokątny fragment `image` obiektu do rysowania. Ta część jest skalowany i pochylono aby zmieścił się wewnątrz równoległobok określony przez `destPoints` parametru.  
  
 Tego przeciążenia z `callback` i `callbackData` parametry udostępnia środki, aby zatrzymać Rysowanie obrazu po jego uruchomieniu, zgodnie z kryteriami i dane określone przez aplikację. Na przykład można uruchomić aplikacji rysowania duży obraz, a użytkownik może przewijać obraz mieściły się na ekranie, w których w przypadku aplikacji można zatrzymać rysunku.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem `Pa` <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Ten kod najpierw definiuje metodę wywołania zwrotnego <xref:System.Drawing.Graphics.DrawImageAbort> delegować; definicja jest uproszczony i jedynie testy, aby zobaczyć, czy <xref:System.Drawing.Graphics.DrawImage%2A> metoda wywołuje on wartość null `callBackData` parametru. Główną przykład wykonuje następujące czynności:  
  
-   Tworzy wystąpienie <xref:System.Drawing.Graphics.DrawImageAbort> metody wywołania zwrotnego.  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok do rysowania obrazu.  
  
-   Tworzy prostokąt, aby wybrać część obrazu do rysowania.  
  
-   Ustawia rysowania jednostki do pikseli grafiki.  
  
-   Rysuje oryginalnego obrazu na ekranie.  
  
-   Tworzy dodatkowe Równoległobok do rysowania skorygowany obrazu.  
  
-   Tworzy i ustawia atrybuty skorygowany obrazu będzie mieć wartość gamma większe niż zwykle.  
  
-   Rysuje obraz skorygowany do ekranu.  
  
 W przypadku równoległobok oryginalny, nieskorygowane pozycja lokalizuje obrazu na ekranie i rozmiar prostokąta oraz wielkość i kształt równoległobok Określa skalowanie i pochylanie rysowane obrazu.  
  
 Ponieważ w tym przykładzie używane jest przeciążenie, które przekazuje `callBackData` parametru <xref:System.Drawing.Graphics.DrawImageAbort> wywołania zwrotnego zwraca `false`, co powoduje, że <xref:System.Drawing.Graphics.DrawImage%2A> metodę, aby kontynuować, a przykład Rysuje obraz skorygowany do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#45)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#45)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar narysowany obraz. Obraz, który jest odpowiednio dopasowane prostokątem.</param>
        <param name="srcX">Współrzędna x w lewym górnym rogu część obrazu źródłowego, aby narysować.</param>
        <param name="srcY">Współrzędna y lewego górnego rogu część obrazu źródłowego do rysowania.</param>
        <param name="srcWidth">Szerokość obrazu źródłowego do rysowania.</param>
        <param name="srcHeight">Wysokość część obrazu źródłowego do rysowania.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostki miary, używany do określenia prostokąta źródłowego.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`, `srcY`, `srcWidth`, I `srcHeight` parametry określają prostokątny fragment z `image` obiektu do rysowania. Prostokąt stanie się względem lewego górnego rogu obrazu źródłowego. Ta część jest skalowana, aby zmieścił się wewnątrz prostokąt określony przez `destRect` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy prostokąta docelowego do rysowania obrazu.  
  
-   Tworzy współrzędnych prostokąta źródłowego, z którego mają zostać wyodrębnione część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego do pikseli.  
  
-   Rysuje obraz do ekranu.  
  
 Pozycja prostokąta docelowego lokalizuje obrazu na ekranie i rozmiary prostokąty źródłowe i docelowe określić skalowanie narysowany obraz, a rozmiar prostokąta źródłowego Określa, jaka część oryginalnego obrazu, są wizualizowane w ekran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#48)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#48)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#48)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar narysowany obraz. Obraz, który jest odpowiednio dopasowane prostokątem.</param>
        <param name="srcX">Współrzędna x w lewym górnym rogu część obrazu źródłowego, aby narysować.</param>
        <param name="srcY">Współrzędna y lewego górnego rogu część obrazu źródłowego do rysowania.</param>
        <param name="srcWidth">Szerokość obrazu źródłowego do rysowania.</param>
        <param name="srcHeight">Wysokość część obrazu źródłowego do rysowania.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostki miary, używany do określenia prostokąta źródłowego.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`, `srcY`, `srcWidth`, I `srcHeight` parametry określają prostokątny fragment z `image` obiektu do rysowania. Prostokąt stanie się względem lewego górnego rogu obrazu źródłowego. Ta część jest skalowana, aby zmieścił się wewnątrz prostokąt określony przez `destRect` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy współrzędnych prostokąta docelowego do rysowania obrazu.  
  
-   Tworzy prostokąt źródło, z którego mają zostać wyodrębnione część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego do pikseli.  
  
-   Rysuje obraz do ekranu.  
  
 Pozycja prostokąta docelowego lokalizuje obrazu na ekranie, rozmiary prostokąty źródłowe i docelowe określić skalowanie narysowany obraz i rozmiar prostokąta źródłowego Określa, jaka część oryginalnego obrazu jest rysowane ekran.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#52)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#52)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar narysowany obraz. Obraz, który jest odpowiednio dopasowane prostokątem.</param>
        <param name="srcX">Współrzędna x w lewym górnym rogu część obrazu źródłowego, aby narysować.</param>
        <param name="srcY">Współrzędna y lewego górnego rogu część obrazu źródłowego do rysowania.</param>
        <param name="srcWidth">Szerokość obrazu źródłowego do rysowania.</param>
        <param name="srcHeight">Wysokość część obrazu źródłowego do rysowania.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostki miary, używany do określenia prostokąta źródłowego.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> Określa informacje o ponowne kolorowanie i gamma <c>obraz</c> obiektu.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`, `srcY`, `srcWidth`, I `srcHeight` parametry określają prostokątny fragment z `image` obiektu do rysowania. Prostokąt stanie się względem lewego górnego rogu obrazu źródłowego. Ta część jest skalowana, aby zmieścił się wewnątrz prostokąt określony przez `destRect` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy prostokąta docelowego do rysowania obrazu.  
  
-   Tworzy współrzędnych prostokąta źródłowego, z którego mają zostać wyodrębnione część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego do pikseli.  
  
-   Rysuje oryginalnego obrazu na ekranie.  
  
-   Tworzy dodatkowe prostokąta do rysowania skorygowany obrazu.  
  
-   Tworzy i ustawia atrybuty skorygowany obrazu będzie mieć wartość gamma większe niż zwykle.  
  
-   Rysuje obraz skorygowany do ekranu.  
  
 Pozycja prostokąta docelowego oryginalny, nieskorygowane lokalizuje obrazu na ekranie rozmiary prostokąty źródłowe i docelowe określić skalowanie narysowany obraz, i określa rozmiar prostokąta źródłowego, jaka część oryginalny obraz jest rysowana na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#49)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#49)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#49)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar narysowany obraz. Obraz, który jest odpowiednio dopasowane prostokątem.</param>
        <param name="srcX">Współrzędna x w lewym górnym rogu część obrazu źródłowego, aby narysować.</param>
        <param name="srcY">Współrzędna y lewego górnego rogu część obrazu źródłowego do rysowania.</param>
        <param name="srcWidth">Szerokość obrazu źródłowego do rysowania.</param>
        <param name="srcHeight">Wysokość część obrazu źródłowego do rysowania.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostki miary, używany do określenia prostokąta źródłowego.</param>
        <param name="imageAttrs">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> Określa informacje o ponowne kolorowanie i gamma <c>obraz</c> obiektu.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`, `srcY`, `srcWidth`, I `srcHeight` parametry określają prostokątny fragment z `image` obiektu do rysowania. Prostokąt stanie się względem lewego górnego rogu obrazu źródłowego. Ta część jest skalowana, aby zmieścił się wewnątrz prostokąt określony przez `destRect` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy prostokąta docelowego do rysowania obrazu.  
  
-   Tworzy współrzędnych prostokąta źródłowego, z którego mają zostać wyodrębnione część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego do pikseli.  
  
-   Rysuje oryginalnego obrazu na ekranie.  
  
-   Tworzy dodatkowe prostokąta do rysowania skorygowany obrazu.  
  
-   Tworzy i ustawia atrybuty skorygowany obrazu będzie mieć wartość gamma większe niż zwykle.  
  
-   Rysuje obraz skorygowany do ekranu.  
  
 Pozycja prostokąta docelowego oryginalny, nieskorygowane lokalizuje obrazu na ekranie rozmiary prostokąty źródłowe i docelowe określić skalowanie narysowany obraz, i określa rozmiar prostokąta źródłowego, jaka część oryginalny obraz jest rysowana na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#53)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#53)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttr, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar narysowany obraz. Obraz, który jest odpowiednio dopasowane prostokątem.</param>
        <param name="srcX">Współrzędna x w lewym górnym rogu część obrazu źródłowego, aby narysować.</param>
        <param name="srcY">Współrzędna y lewego górnego rogu część obrazu źródłowego do rysowania.</param>
        <param name="srcWidth">Szerokość obrazu źródłowego do rysowania.</param>
        <param name="srcHeight">Wysokość część obrazu źródłowego do rysowania.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostki miary, używany do określenia prostokąta źródłowego.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> Określa informacje o ponowne kolorowanie i gamma <c>obraz</c>.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> Delegat, który określa metodę do wywołania podczas rysowania obrazu. Ta metoda jest wywoływana często, aby sprawdzić, czy chcesz zatrzymać wykonywanie <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> metoda zgodnie z kryteriami określane przez aplikację.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`, `srcY`, `srcWidth`, I `srcHeight` parametry określają prostokątny fragment z `image` obiektu do rysowania. Prostokąt stanie się względem lewego górnego rogu obrazu źródłowego. Ta część jest skalowana, aby zmieścił się wewnątrz prostokąt określony przez `destRect` obiektu.  
  
 Tego przeciążenia z `callback` parametru udostępnia środki, aby zatrzymać Rysowanie obrazu po jego uruchomieniu, zgodnie z kryteriami określone przez aplikację. Na przykład można uruchomić aplikacji rysowania duży obraz, a użytkownik może przewijać obraz mieściły się na ekranie, w których w przypadku aplikacji można zatrzymać rysunku.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Ten kod najpierw definiuje metodę wywołania zwrotnego <xref:System.Drawing.Graphics.DrawImageAbort> delegować; definicja jest uproszczony i jedynie testy, aby zobaczyć, czy <xref:System.Drawing.Graphics.DrawImage%2A> metoda wywołuje on wartość null `callBackData` parametru. Główną przykład wykonuje następujące czynności:  
  
-   Tworzy wystąpienie <xref:System.Drawing.Graphics.DrawImageAbort> metody wywołania zwrotnego.  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują prostokąta docelowego do rysowania obrazu.  
  
-   Tworzy prostokąta źródłowego, aby wybrać część obrazu do rysowania.  
  
-   Ustawia rysowania jednostki do pikseli grafiki.  
  
-   Rysuje oryginalnego obrazu na ekranie.  
  
-   Tworzy prostokąt dodatkowe miejsce docelowe do rysowania skorygowany obrazu.  
  
-   Tworzy i ustawia atrybuty skorygowany obrazu będzie mieć wartość gamma większe niż zwykle.  
  
-   Rysuje obraz skorygowany do ekranu.  
  
 Prostokąta docelowego oryginalny, nieskorygowane pozycja lokalizuje obrazu na ekranie, a rozmiar prostokąta źródłowego oraz wielkość i kształt prostokąta docelowego określa, skalowanie narysowany obraz.  
  
 Ponieważ w tym przykładzie użyto przeciążenia, które nie zostały spełnione `callBackData` parametru <xref:System.Drawing.Graphics.DrawImageAbort> wywołania zwrotnego zwraca `true`, co powoduje, że <xref:System.Drawing.Graphics.DrawImage%2A> metody w celu i kod obsługi wyjątków, ujęty w przykładzie do drukowania tekst wyjątku zamiast rysowania obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#50)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#50)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar narysowany obraz. Obraz, który jest odpowiednio dopasowane prostokątem.</param>
        <param name="srcX">Współrzędna x w lewym górnym rogu część obrazu źródłowego, aby narysować.</param>
        <param name="srcY">Współrzędna y lewego górnego rogu część obrazu źródłowego do rysowania.</param>
        <param name="srcWidth">Szerokość obrazu źródłowego do rysowania.</param>
        <param name="srcHeight">Wysokość część obrazu źródłowego do rysowania.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostki miary, używany do określenia prostokąta źródłowego.</param>
        <param name="imageAttrs">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> Określa informacje o ponowne kolorowanie i gamma <c>obraz</c> obiektu.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> Delegat, który określa metodę do wywołania podczas rysowania obrazu. Ta metoda jest wywoływana często, aby sprawdzić, czy chcesz zatrzymać wykonywanie <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> metoda zgodnie z kryteriami określane przez aplikację.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`, `srcY`, `srcWidth`, I `srcHeight` parametry określają prostokątny fragment z `image` obiektu do rysowania. Prostokąt stanie się względem lewego górnego rogu obrazu źródłowego. Ta część jest skalowana, aby zmieścił się wewnątrz prostokąt określony przez `destRect` parametru.  
  
 Tego przeciążenia z `callback` parametru udostępnia środki, aby zatrzymać Rysowanie obrazu po jego uruchomieniu, zgodnie z kryteriami określone przez aplikację. Na przykład można uruchomić aplikacji rysowania duży obraz, a użytkownik może przewijać obraz mieściły się na ekranie, w których w przypadku aplikacji można zatrzymać rysunku.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Ten kod najpierw definiuje metodę wywołania zwrotnego <xref:System.Drawing.Graphics.DrawImageAbort> delegować; definicja jest uproszczony i jedynie testy, aby zobaczyć, czy <xref:System.Drawing.Graphics.DrawImage%2A> metoda wywołuje on wartość null `callBackData` parametru. Główną przykład wykonuje następujące czynności:  
  
-   Tworzy wystąpienie <xref:System.Drawing.Graphics.DrawImageAbort> metody wywołania zwrotnego.  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują prostokąta docelowego do rysowania obrazu.  
  
-   Tworzy prostokąta źródłowego, aby wybrać część obrazu do rysowania.  
  
-   Ustawia rysowania jednostki do pikseli grafiki.  
  
-   Rysuje oryginalnego obrazu na ekranie.  
  
-   Tworzy prostokąt dodatkowe miejsce docelowe do rysowania skorygowany obrazu.  
  
-   Tworzy i ustawia atrybuty skorygowany obrazu będzie mieć wartość gamma większe niż zwykle.  
  
-   Rysuje obraz skorygowany do ekranu.  
  
 Prostokąta docelowego oryginalny, nieskorygowane pozycja lokalizuje obrazu na ekranie, a rozmiar prostokąta źródłowego oraz wielkość i kształt prostokąta docelowego określa, skalowanie narysowany obraz.  
  
 Ponieważ w tym przykładzie użyto przeciążenia, które nie zostały spełnione `callBackData` parametru <xref:System.Drawing.Graphics.DrawImageAbort> wywołania zwrotnego zwraca `true`, co powoduje, że <xref:System.Drawing.Graphics.DrawImage%2A> metody w celu i kod obsługi wyjątków, ujęty w przykładzie do drukowania tekst wyjątku zamiast rysowania obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#54)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#54)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * nativeint -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar narysowany obraz. Obraz, który jest odpowiednio dopasowane prostokątem.</param>
        <param name="srcX">Współrzędna x w lewym górnym rogu część obrazu źródłowego, aby narysować.</param>
        <param name="srcY">Współrzędna y lewego górnego rogu część obrazu źródłowego do rysowania.</param>
        <param name="srcWidth">Szerokość obrazu źródłowego do rysowania.</param>
        <param name="srcHeight">Wysokość część obrazu źródłowego do rysowania.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostki miary, używany do określenia prostokąta źródłowego.</param>
        <param name="imageAttrs">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> Określa informacje o ponowne kolorowanie i gamma <c>obraz</c> obiektu.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> Delegat, który określa metodę do wywołania podczas rysowania obrazu. Ta metoda jest wywoływana często, aby sprawdzić, czy chcesz zatrzymać wykonywanie <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" /> metoda zgodnie z kryteriami określane przez aplikację.</param>
        <param name="callbackData">Wartość określająca dodatkowymi danymi dotyczącymi <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> delegata używany do sprawdzania, czy chcesz zatrzymać wykonywanie <see langword="DrawImage" /> metody.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`, `srcY`, `srcWidth`, I `srcHeight` parametry określają prostokątny fragment z `image` obiektu do rysowania. Prostokąt stanie się względem lewego górnego rogu obrazu źródłowego. Ta część jest skalowana, aby zmieścił się wewnątrz prostokąt określony przez `destRect` parametru.  
  
 Tego przeciążenia z `callback` i `callbackData` parametry udostępnia środki, aby zatrzymać Rysowanie obrazu po jego uruchomieniu, zgodnie z kryteriami i dane określone przez aplikację. Na przykład można uruchomić aplikacji rysowania duży obraz, a użytkownik może przewijać obraz mieściły się na ekranie, w których w przypadku aplikacji można zatrzymać rysunku.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Ten kod najpierw definiuje metodę wywołania zwrotnego <xref:System.Drawing.Graphics.DrawImageAbort> delegować; definicja jest uproszczony i jedynie testy, aby zobaczyć, czy <xref:System.Drawing.Graphics.DrawImage%2A> metoda wywołuje on wartość null `callBackData` parametru. Główną przykład wykonuje następujące czynności:  
  
-   Tworzy wystąpienie <xref:System.Drawing.Graphics.DrawImageAbort> metody wywołania zwrotnego.  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują prostokąta docelowego do rysowania obrazu.  
  
-   Tworzy prostokąta źródłowego, aby wybrać część obrazu do rysowania.  
  
-   Ustawia rysowania jednostki do pikseli grafiki.  
  
-   Rysuje oryginalnego obrazu na ekranie.  
  
-   Tworzy prostokąt dodatkowe miejsce docelowe do rysowania skorygowany obrazu.  
  
-   Tworzy i ustawia atrybuty skorygowany obrazu będzie mieć wartość gamma większe niż zwykle.  
  
-   Rysuje obraz skorygowany do ekranu.  
  
 Prostokąta docelowego oryginalny, nieskorygowane pozycja lokalizuje obrazu na ekranie, a rozmiar prostokąta źródłowego oraz wielkość i kształt prostokąta docelowego określa, skalowanie narysowany obraz.  
  
 Ponieważ w tym przykładzie używane jest przeciążenie, które przekazuje `callBackData` parametru <xref:System.Drawing.Graphics.DrawImageAbort> wywołania zwrotnego zwraca `false`, co powoduje, że <xref:System.Drawing.Graphics.DrawImage%2A> metodę, aby kontynuować, a przykład Rysuje obraz skorygowany do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#51)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#51)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * nativeint -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar narysowany obraz. Obraz, który jest odpowiednio dopasowane prostokątem.</param>
        <param name="srcX">Współrzędna x w lewym górnym rogu część obrazu źródłowego, aby narysować.</param>
        <param name="srcY">Współrzędna y lewego górnego rogu część obrazu źródłowego do rysowania.</param>
        <param name="srcWidth">Szerokość obrazu źródłowego do rysowania.</param>
        <param name="srcHeight">Wysokość część obrazu źródłowego do rysowania.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostki miary, używany do określenia prostokąta źródłowego.</param>
        <param name="imageAttrs">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> Określa informacje o ponowne kolorowanie i gamma <c>obraz</c> obiektu.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> Delegat, który określa metodę do wywołania podczas rysowania obrazu. Ta metoda jest wywoływana często, aby sprawdzić, czy chcesz zatrzymać wykonywanie <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" /> metoda zgodnie z kryteriami określane przez aplikację.</param>
        <param name="callbackData">Wartość określająca dodatkowymi danymi dotyczącymi <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> delegata używany do sprawdzania, czy chcesz zatrzymać wykonywanie <see langword="DrawImage" /> metody.</param>
        <summary>Rysuje określoną część określonego <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z określonym rozmiarem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`, `srcY`, `srcWidth`, I `srcHeight` parametry określają prostokątny fragment z `image` obiektu do rysowania. Prostokąt stanie się względem lewego górnego rogu obrazu źródłowego. Ta część jest skalowana, aby zmieścił się wewnątrz prostokąt określony przez `destRect` parametru.  
  
 Tego przeciążenia z `callback` i `callbackData` parametry udostępnia środki, aby zatrzymać Rysowanie obrazu po jego uruchomieniu, zgodnie z kryteriami i dane określone przez aplikację. Na przykład można uruchomić aplikacji rysowania duży obraz, a użytkownik może przewijać obraz mieściły się na ekranie, w których w przypadku aplikacji można zatrzymać rysunku.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Ten kod najpierw definiuje metodę wywołania zwrotnego <xref:System.Drawing.Graphics.DrawImageAbort> delegować; definicja jest uproszczony i jedynie testy, aby zobaczyć, czy <xref:System.Drawing.Graphics.DrawImage%2A> metoda wywołuje on wartość null `callBackData` parametru. Główną przykład wykonuje następujące czynności:  
  
-   Tworzy wystąpienie <xref:System.Drawing.Graphics.DrawImageAbort> metody wywołania zwrotnego.  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują prostokąta docelowego do rysowania obrazu.  
  
-   Tworzy prostokąta źródłowego, aby wybrać część obrazu do rysowania.  
  
-   Ustawia rysowania jednostki do pikseli grafiki.  
  
-   Rysuje oryginalnego obrazu na ekranie.  
  
-   Tworzy prostokąt dodatkowe miejsce docelowe do rysowania skorygowany obrazu.  
  
-   Tworzy i ustawia atrybuty skorygowany obrazu będzie mieć wartość gamma większe niż zwykle.  
  
-   Rysuje obraz skorygowany do ekranu.  
  
 Prostokąta docelowego oryginalny, nieskorygowane pozycja lokalizuje obrazu na ekranie, a rozmiar prostokąta źródłowego oraz wielkość i kształt prostokąta docelowego określa, skalowanie narysowany obraz.  
  
 Ponieważ w tym przykładzie używane jest przeciążenie, które przekazuje `callBackData` parametru <xref:System.Drawing.Graphics.DrawImageAbort> wywołania zwrotnego zwraca `false`, co powoduje, że <xref:System.Drawing.Graphics.DrawImage%2A> metodę, aby kontynuować, a przykład Rysuje obraz skorygowany do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#55)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#55)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawImageUnscaled">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje określony obraz przy użyciu oryginalnego rozmiaru fizycznego w lokalizacji określonej przez parę współrzędnych.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * System.Drawing.Point -&gt; unit" Usage="graphics.DrawImageUnscaled (image, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="point">
          <see cref="T:System.Drawing.Point" /> Struktura, która określa, w lewym górnym rogu narysowany obraz.</param>
        <summary>Rysuje określony obraz przy użyciu oryginalnego rozmiaru fizycznego w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość pikseli szerokości i wartość rozdzielczość pozioma (punkty na cal). Szerokość fizycznej (w calach) obrazu jest podzielona przez rozdzielczość pozioma szerokość w pikselach. Na przykład obraz o pikseli szerokości 216 i rozdzielczość pozioma 72 dpi ma fizyczny szerokość cala 3. Podobne uwagi dotyczą pikseli wysokości i wysokość fizycznych.  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> Metoda Rysuje obraz z użyciem jego rozmiar fizyczny, tak aby było jego poprawny rozmiar obrazu (w calach) niezależnie od tego, rozdzielczość (punkty na cal) urządzenia wyświetlającego. Na przykład załóżmy, że obraz został pikseli szerokości 216 i rozdzielczość pozioma 72 dpi. Jeśli wywołasz <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> rysowanie tego obrazu na urządzeniu wyposażonym w rozdzielczości 96 dpi, szerokość piksela wyrenderowany obraz będzie (216/72) * 96 = 288.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkt, w którym należy narysować w lewym górnym rogu obrazu.  
  
-   Rysuje całego obrazu przy użyciu jego rozmiar fizyczny.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#64)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#64)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawImageUnscaled (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> w lewym górnym rogu narysowany obraz, który określa. Właściwości X i Y prostokąta Określ lewego górnego rogu. Właściwości wysokość i szerokość są ignorowane.</param>
        <summary>Rysuje określony obraz przy użyciu oryginalnego rozmiaru fizycznego w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość pikseli szerokości i wartość rozdzielczość pozioma (punkty na cal). Szerokość fizycznej (w calach) obrazu jest podzielona przez rozdzielczość pozioma szerokość w pikselach. Na przykład obraz o pikseli szerokości 216 i rozdzielczość pozioma 72 dpi ma fizyczny szerokość cala 3. Podobne uwagi dotyczą pikseli wysokości i wysokość fizycznych.  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> Metoda Rysuje obraz z użyciem jego rozmiar fizyczny, tak aby było jego poprawny rozmiar obrazu (w calach) niezależnie od tego, rozdzielczość (punkty na cal) urządzenia wyświetlającego. Na przykład załóżmy, że obraz został pikseli szerokości 216 i rozdzielczość pozioma 72 dpi. Jeśli wywołasz <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> rysowanie tego obrazu na urządzeniu wyposażonym w rozdzielczości 96 dpi, szerokość piksela wyrenderowany obraz będzie (216/72) * 96 = 288.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * int * int -&gt; unit" Usage="graphics.DrawImageUnscaled (image, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="x">Współrzędna x w lewym górnym rogu narysowany obraz.</param>
        <param name="y">Współrzędna y lewego górnego rogu narysowany obraz.</param>
        <summary>Rysuje określony obraz przy użyciu oryginalnego rozmiaru fizycznego w lokalizacji określonej przez parę współrzędnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość pikseli szerokości i wartość rozdzielczość pozioma (punkty na cal). Szerokość fizycznej (w calach) obrazu jest podzielona przez rozdzielczość pozioma szerokość w pikselach. Na przykład obraz o pikseli szerokości 216 i rozdzielczość pozioma 72 dpi ma fizyczny szerokość cala 3. Podobne uwagi dotyczą pikseli wysokości i wysokość fizycznych.  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> Metoda Rysuje obraz z użyciem jego rozmiar fizyczny, tak aby było jego poprawny rozmiar obrazu (w calach) niezależnie od tego, rozdzielczość (punkty na cal) urządzenia wyświetlającego. Na przykład załóżmy, że obraz został pikseli szerokości 216 i rozdzielczość pozioma 72 dpi. Jeśli wywołasz <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> rysowanie tego obrazu na urządzeniu wyposażonym w rozdzielczości 96 dpi, szerokość piksela wyrenderowany obraz będzie (216/72) * 96 = 288.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG, SampImag.jpg w folderze przykładu.  
  
-   Tworzy punkt, w którym należy narysować w lewym górnym rogu obrazu.  
  
-   Rysuje całego obrazu przy użyciu jego rozmiar fizyczny.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#65)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#65)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#65)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * int * int * int * int -&gt; unit" Usage="graphics.DrawImageUnscaled (image, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Aby narysować.</param>
        <param name="x">Współrzędna x w lewym górnym rogu narysowany obraz.</param>
        <param name="y">Współrzędna y lewego górnego rogu narysowany obraz.</param>
        <param name="width">Nie używany.</param>
        <param name="height">Nie używany.</param>
        <summary>Rysuje określony obraz przy użyciu oryginalnego rozmiaru fizycznego w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość pikseli szerokości i wartość rozdzielczość pozioma (punkty na cal). Szerokość fizycznej (w calach) obrazu jest podzielona przez rozdzielczość pozioma szerokość w pikselach. Na przykład obraz o pikseli szerokości 216 i rozdzielczość pozioma 72 dpi ma fizyczny szerokość cala 3. Podobne uwagi dotyczą pikseli wysokości i wysokość fizycznych.  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> Metoda Rysuje obraz z użyciem jego rozmiar fizyczny, tak aby było jego poprawny rozmiar obrazu (w calach) niezależnie od tego, rozdzielczość (punkty na cal) urządzenia wyświetlającego. Na przykład załóżmy, że obraz został pikseli szerokości 216 i rozdzielczość pozioma 72 dpi. Jeśli wywołasz <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> rysowanie tego obrazu na urządzeniu wyposażonym w rozdzielczości 96 dpi, szerokość piksela wyrenderowany obraz będzie (216/72) * 96 = 288.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaledAndClipped">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaledAndClipped (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaledAndClipped(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaledAndClipped(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaledAndClipped(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaledAndClipped : System.Drawing.Image * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawImageUnscaledAndClipped (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> Do rysowania.</param>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> Do rysowania obrazu.</param>
        <summary>Rysuje określony obraz bez skalowania, a następnie przycina, jeśli to konieczne zmieścić ją w prostokącie określonego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład pokazuje sposób użycia <xref:System.Drawing.Graphics.DrawImageUnscaledAndClipped%2A> metody. Aby uruchomić ten przykład, wklej go do postaci Windows. Obsługa formularzy <xref:System.Windows.Forms.Control.Paint> zdarzenia i wywołania `DrawImageUnscaled` metody z <xref:System.Windows.Forms.Control.Paint> metody obsługi zdarzeń, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#8)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawLine">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje linię łączącą dwa momenty, które są określone przez pary współrzędnych.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, valuetype System.Drawing.Point pt1, valuetype System.Drawing.Point pt2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, System::Drawing::Point pt1, System::Drawing::Point pt2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * System.Drawing.Point * System.Drawing.Point -&gt; unit" Usage="graphics.DrawLine (pen, pt1, pt2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.Point" />
        <Parameter Name="pt2" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl linii.</param>
        <param name="pt1">
          <see cref="T:System.Drawing.Point" /> Struktura, która reprezentuje pierwszy punkt połączyć.</param>
        <param name="pt2">
          <see cref="T:System.Drawing.Point" /> Struktura, która reprezentuje drugi punkt połączyć.</param>
        <summary>Rysuje linię łączącą dwa <see cref="T:System.Drawing.Point" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy punkty punktów końcowych wiersza.  
  
-   Rysuje na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#66)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#66)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#66)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md">Rysowanie linii i kształtów za pomocą pióra</related>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, valuetype System.Drawing.PointF pt1, valuetype System.Drawing.PointF pt2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, System::Drawing::PointF pt1, System::Drawing::PointF pt2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * System.Drawing.PointF * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawLine (pen, pt1, pt2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.PointF" />
        <Parameter Name="pt2" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl linii.</param>
        <param name="pt1">
          <see cref="T:System.Drawing.PointF" /> Struktura, która reprezentuje pierwszy punkt połączyć.</param>
        <param name="pt2">
          <see cref="T:System.Drawing.PointF" /> Struktura, która reprezentuje drugi punkt połączyć.</param>
        <summary>Rysuje linię łączącą dwa <see cref="T:System.Drawing.PointF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje linię łączącą dwa momenty, które są określone przez `pt1` i p`2` parametrów.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy punkty punktów końcowych wiersza.  
  
-   Rysuje na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#67)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#67)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#67)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md">Rysowanie linii i kształtów za pomocą pióra</related>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, int x1, int y1, int x2, int y2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, int32 x1, int32 y1, int32 x2, int32 y2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, int x1, int y1, int x2, int y2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * int * int * int * int -&gt; unit" Usage="graphics.DrawLine (pen, x1, y1, x2, y2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Int32" />
        <Parameter Name="y1" Type="System.Int32" />
        <Parameter Name="x2" Type="System.Int32" />
        <Parameter Name="y2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl linii.</param>
        <param name="x1">Współrzędna x pierwszego punktu.</param>
        <param name="y1">Współrzędna y pierwszego punktu.</param>
        <param name="x2">Współrzędna x drugiego punktu.</param>
        <param name="y2">Współrzędna y drugiego punktu.</param>
        <summary>Rysuje linię łączącą dwa momenty, które są określone przez pary współrzędnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje linię łączącą dwa momenty, które są określone przez `x1`, `y1`, `x2`, i `y2` parametrów.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy współrzędne punktów końcowych wiersza.  
  
-   Rysuje na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#68)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#68)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md">Rysowanie linii i kształtów za pomocą pióra</related>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, float x1, float y1, float x2, float y2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, float32 x1, float32 y1, float32 x2, float32 y2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, float x1, float y1, float x2, float y2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * single * single * single * single -&gt; unit" Usage="graphics.DrawLine (pen, x1, y1, x2, y2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="x2" Type="System.Single" />
        <Parameter Name="y2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl linii.</param>
        <param name="x1">Współrzędna x pierwszego punktu.</param>
        <param name="y1">Współrzędna y pierwszego punktu.</param>
        <param name="x2">Współrzędna x drugiego punktu.</param>
        <param name="y2">Współrzędna y drugiego punktu.</param>
        <summary>Rysuje linię łączącą dwa momenty, które są określone przez pary współrzędnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje linię łączącą dwa momenty, które są określone przez `x1`, `y1`, `x2`, i `y2` parametrów.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy współrzędne punktów końcowych wiersza.  
  
-   Rysuje na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#69)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#69)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md">Rysowanie linii i kształtów za pomocą pióra</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawLines">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje szereg segmenty linii, łączących tablicę <see cref="T:System.Drawing.Point" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawLines">
      <MemberSignature Language="C#" Value="public void DrawLines (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLines(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLines(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawLines : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawLines (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl segmenty linii.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.Point" /> struktur, które reprezentują punkty połączyć.</param>
        <summary>Rysuje szereg segmenty linii, łączących tablicę <see cref="T:System.Drawing.Point" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda pobiera szereg łączącymi tablicę końcowe punkty. Pierwsze dwa punkty w tablicy, określ pierwszy wiersz. Każdy dodatkowy punkt Określa koniec segment linii, którego punkt początkowy jest punkt końcowy segmentu poprzedniego wiersza.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy tablicę punktów segmenty linii.  
  
-   Rysuje segmenty linii połączonej do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#70)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#70)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#70)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLines">
      <MemberSignature Language="C#" Value="public void DrawLines (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLines(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLines(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawLines : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawLines (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl segmenty linii.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które reprezentują punkty połączyć.</param>
        <summary>Rysuje szereg segmenty linii, łączących tablicę <see cref="T:System.Drawing.PointF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda pobiera szereg łączącymi tablicę końcowe punkty. Pierwsze dwa punkty w tablicy, określ pierwszy wiersz. Każdy dodatkowy punkt Określa koniec segment linii, którego punkt początkowy jest punkt końcowy segmentu poprzedniego wiersza.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Kod umożliwia utworzenie czarne pióro.  
  
-   Tworzy tablicę punktów segmenty linii.  
  
-   Rysuje segmenty linii połączonej do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#71)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#71)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#71)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPath">
      <MemberSignature Language="C#" Value="public void DrawPath (System.Drawing.Pen pen, System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPath(class System.Drawing.Pen pen, class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPath(System::Drawing::Pen ^ pen, System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.DrawPath : System.Drawing.Pen * System.Drawing.Drawing2D.GraphicsPath -&gt; unit" Usage="graphics.DrawPath (pen, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl ścieżki.</param>
        <param name="path">
          <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> Aby narysować.</param>
        <summary>Rysuje <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bieżący transformacja w kontekście grafiki jest stosowana do <xref:System.Drawing.Drawing2D.GraphicsPath> przed jej rysowania.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obiekt ścieżki grafiki i dodaje elipsę.  
  
-   Tworzy czarne pióro.  
  
-   Rysuje ścieżki grafiki na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#72)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#72)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#72)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="path" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawPie">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje kształt kołowy definicją elipsę określony przez parę współrzędnych, szerokości, wysokości i dwa wiersze promieniowego.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * System.Drawing.Rectangle * single * single -&gt; unit" Usage="graphics.DrawPie (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl kształt koła.</param>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która reprezentuje otaczający prostokąt, który definiuje elipsy, z którego pochodzi kształt koła.</param>
        <param name="startAngle">Kąt mierzony w stopni w prawo od osi x na pierwszą stronę kształtu koła.</param>
        <param name="sweepAngle">Kąt mierzony w stopni w prawo z <c>startAngle</c> parametr do drugiej strony kształt koła.</param>
        <summary>Rysuje kształt kołowy definicją elipsę określony przez <see cref="T:System.Drawing.Rectangle" /> struktury i dwa wiersze promieniowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje kształt kołowy definicją łuk elipsę i dwa wiersze promieniowego, które przecinają z punktami końcowymi łuku. Wielokropek jest definiowany przez prostokąt otaczający. Kształt kołowy składa się z dwóch wierszy promieniowego zdefiniowane przez `startAngle` i `sweepAngle` parametrów i łuk między przecięcia tych linii promieniowych z elipsy.  
  
 Jeśli `sweepAngle` parametru jest większa niż 360 lub mniej niż-360 stopni, jest ona traktowana jak w przypadku 360 lub-360 stopni, odpowiednio.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy prostokąt, który granic pełną elipsy.  
  
-   Definiuje kąty, w której należy rozpocząć rysowania (względem osi x) i za pomocą którego można narysować (zarówno w kierunku do ruchu wskazówek zegara).  
  
-   Rysuje segment kołowym do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#73)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#73)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#73)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * System.Drawing.RectangleF * single * single -&gt; unit" Usage="graphics.DrawPie (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl kształt koła.</param>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która reprezentuje otaczający prostokąt, który definiuje elipsy, z którego pochodzi kształt koła.</param>
        <param name="startAngle">Kąt mierzony w stopni w prawo od osi x na pierwszą stronę kształtu koła.</param>
        <param name="sweepAngle">Kąt mierzony w stopni w prawo z <c>startAngle</c> parametr do drugiej strony kształt koła.</param>
        <summary>Rysuje kształt kołowy definicją elipsę określony przez <see cref="T:System.Drawing.RectangleF" /> struktury i dwa wiersze promieniowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje kształt kołowy definicją łuk elipsę i dwa wiersze promieniowego, które przecinają z punktami końcowymi łuku. Wielokropek jest definiowany przez prostokąt otaczający. Kształt kołowy składa się z dwóch wierszy promieniowego zdefiniowane przez `startAngle` i `sweepAngle` parametrów i łuk między przecięcia tych linii promieniowych z elipsy.  
  
 Jeśli `sweepAngle` parametru jest większa niż 360 lub mniej niż-360 stopni, jest ona traktowana jak w przypadku 360 lub-360 stopni, odpowiednio.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy prostokąt, który granic pełną elipsy.  
  
-   Definiuje kąty, w której należy rozpocząć rysowania (względem osi x) i za pomocą którego można narysować (zarówno w kierunku do ruchu wskazówek zegara).  
  
-   Rysuje segment kołowym do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#74)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#74)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#74)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * int * int * int * int * int * int -&gt; unit" Usage="graphics.DrawPie (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl kształt koła.</param>
        <param name="x">Współrzędna x lewego górnego rogu otaczający prostokąt, który definiuje elipsy, z którego pochodzi kształt koła.</param>
        <param name="y">Współrzędna y lewego górnego rogu otaczający prostokąt, który definiuje elipsy, z którego pochodzi kształt koła.</param>
        <param name="width">Szerokość otaczający prostokąt, który definiuje elipsy, z którego pochodzi kształt koła.</param>
        <param name="height">Wysokość otaczający prostokąt, który definiuje elipsy, z którego pochodzi kształt koła.</param>
        <param name="startAngle">Kąt mierzony w stopni w prawo od osi x na pierwszą stronę kształtu koła.</param>
        <param name="sweepAngle">Kąt mierzony w stopni w prawo z <c>startAngle</c> parametr do drugiej strony kształt koła.</param>
        <summary>Rysuje kształt kołowy definicją elipsę określony przez parę współrzędnych, szerokości, wysokości i dwa wiersze promieniowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje kształt kołowy definicją łuk elipsę i dwa wiersze promieniowego, które przecinają z punktami końcowymi łuku. Wielokropek jest definiowany przez prostokąt otaczający opisanego przez `x`, `y`, `width`, i `height` parametrów. Kształt kołowy składa się z dwóch wierszy promieniowego zdefiniowane przez `startAngle` i `sweepAngle` parametrów i łuk między przecięcia tych linii promieniowych z elipsy.  
  
 Jeśli `sweepAngle` parametru jest większa niż 360 lub mniej niż-360 stopni, jest ona traktowana jak w przypadku 360 lub-360 stopni, odpowiednio.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy, położenie i rozmiar prostokąt, który granic pełną elipsy.  
  
-   Definiuje kąty, w której należy rozpocząć rysowania (względem osi x) i za pomocą którego można narysować (zarówno w kierunku do ruchu wskazówek zegara).  
  
-   Rysuje kształt kołowy na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#75)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#75)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#75)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * single * single * single * single * single * single -&gt; unit" Usage="graphics.DrawPie (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl kształt koła.</param>
        <param name="x">Współrzędna x lewego górnego rogu otaczający prostokąt, który definiuje elipsy, z którego pochodzi kształt koła.</param>
        <param name="y">Współrzędna y lewego górnego rogu otaczający prostokąt, który definiuje elipsy, z którego pochodzi kształt koła.</param>
        <param name="width">Szerokość otaczający prostokąt, który definiuje elipsy, z którego pochodzi kształt koła.</param>
        <param name="height">Wysokość otaczający prostokąt, który definiuje elipsy, z którego pochodzi kształt koła.</param>
        <param name="startAngle">Kąt mierzony w stopni w prawo od osi x na pierwszą stronę kształtu koła.</param>
        <param name="sweepAngle">Kąt mierzony w stopni w prawo z <c>startAngle</c> parametr do drugiej strony kształt koła.</param>
        <summary>Rysuje kształt kołowy definicją elipsę określony przez parę współrzędnych, szerokości, wysokości i dwa wiersze promieniowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje kształt kołowy definicją łuk elipsę i dwa wiersze promieniowego, które przecinają z punktami końcowymi łuku. Wielokropek jest definiowany przez prostokąt otaczający opisanego przez `x`, `y`, `width`, i `height` parametrów. Kształt kołowy składa się z dwóch wierszy promieniowego zdefiniowane przez `startAngle` i `sweepAngle` parametrów i łuk między przecięcia tych linii promieniowych z elipsy.  
  
 Jeśli `sweepAngle` parametru jest większa niż 360 lub mniej niż-360 stopni, jest ona traktowana jak w przypadku 360 lub-360 stopni, odpowiednio.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy, położenie i rozmiar prostokąt, który granic pełną elipsy.  
  
-   Definiuje kąty, w której należy rozpocząć rysowania (względem osi x) i za pomocą którego można narysować (zarówno w kierunku do ruchu wskazówek zegara).  
  
-   Rysuje segment kołowym do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#76)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#76)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#76)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawPolygon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje wielokąt zdefiniowane przez tablicę <see cref="T:System.Drawing.Point" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawPolygon">
      <MemberSignature Language="C#" Value="public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPolygon(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPolygon(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawPolygon : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawPolygon (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl wielokąta.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.Point" /> struktur, które reprezentują wierzchołki wielokąta.</param>
        <summary>Rysuje wielokąt zdefiniowane przez tablicę <see cref="T:System.Drawing.Point" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdej pary dwóch kolejnych punktów w tablicy określa bok wielokąta. Ponadto jeśli ostatni punkt i pierwszy punkt tablicy nie pokrywają się, określają ostatniej części wielokąta.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy tablicę siedmiu punkty wierzchołki wielokąta.  
  
-   Rysuje wielokąta na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#78)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#78)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#78)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPolygon">
      <MemberSignature Language="C#" Value="public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPolygon(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPolygon(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawPolygon : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawPolygon (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl wielokąta.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które reprezentują wierzchołki wielokąta.</param>
        <summary>Rysuje wielokąt zdefiniowane przez tablicę <see cref="T:System.Drawing.PointF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdej pary dwóch kolejnych punktów w tablicy określa bok wielokąta. Ponadto jeśli ostatni punkt i pierwszy punkt tablicy nie pokrywają się, określają ostatniej części wielokąta.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy tablicę siedmiu punkty wierzchołki wielokąta.  
  
-   Rysuje wielokąta na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#77)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#77)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#77)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawRectangle">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje prostokąt określony przez parę współrzędnych, szerokość i wysokość.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangle : System.Drawing.Pen * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawRectangle (pen, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="pen">A <see cref="T:System.Drawing.Pen" /> określający kolor, szerokość i Styl krawędzi prostokąta.</param>
        <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> strukturę, która reprezentuje narysować prostokąt.</param>
        <summary>Rysuje prostokąt określony przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać informacje o tym, jak do rysowania <xref:System.Drawing.RectangleF>, zobacz <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy prostokąt.  
  
-   Rysuje prostokąt na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#79)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#79)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#79)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangle : System.Drawing.Pen * int * int * int * int -&gt; unit" Usage="graphics.DrawRectangle (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i Styl krawędzi prostokąta.</param>
        <param name="x">Współrzędna x lewego górnego rogu prostokąta do rysowania.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąta do rysowania.</param>
        <param name="width">Szerokość krawędzi prostokąta do rysowania.</param>
        <param name="height">Wysokość prostokąta do rysowania.</param>
        <summary>Rysuje prostokąt określony przez parę współrzędnych, szerokość i wysokość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać informacje o tym, jak do rysowania <xref:System.Drawing.RectangleF>, zobacz <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy, położenie i rozmiar prostokąta.  
  
-   Rysuje prostokąt na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#80)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#80)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#80)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangle : System.Drawing.Pen * single * single * single * single -&gt; unit" Usage="graphics.DrawRectangle (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">A <see cref="T:System.Drawing.Pen" /> określający kolor, szerokość i Styl krawędzi prostokąta.</param>
        <param name="x">Współrzędna x lewego górnego rogu prostokąta do rysowania.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąta do rysowania.</param>
        <param name="width">Szerokość prostokąta do rysowania.</param>
        <param name="height">Wysokość prostokąta do rysowania.</param>
        <summary>Rysuje prostokąt określony przez parę współrzędnych, szerokość i wysokość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać informacje o tym, jak do rysowania <xref:System.Drawing.RectangleF>, zobacz <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy, położenie i rozmiar prostokąta.  
  
-   Rysuje prostokąt na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#81)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#81)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#81)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawRectangles">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje szereg prostokąty określony przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawRectangles">
      <MemberSignature Language="C#" Value="public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.Rectangle[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangles(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.Rectangle[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangles(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Rectangle&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangles : System.Drawing.Pen * System.Drawing.Rectangle[] -&gt; unit" Usage="graphics.DrawRectangles (pen, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rects" Type="System.Drawing.Rectangle[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl obramowania prostokątów.</param>
        <param name="rects">Tablica <see cref="T:System.Drawing.Rectangle" /> struktur, które reprezentują prostokąty do rysowania.</param>
        <summary>Rysuje szereg prostokąty określony przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy tablicę o trzy prostokąty.  
  
-   Rysuje prostokątów do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#82)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#82)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="rects" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="rects" /> jest tablicą o zerowej długości.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangles">
      <MemberSignature Language="C#" Value="public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.RectangleF[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangles(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangles(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::RectangleF&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangles : System.Drawing.Pen * System.Drawing.RectangleF[] -&gt; unit" Usage="graphics.DrawRectangles (pen, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rects" Type="System.Drawing.RectangleF[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          <see cref="T:System.Drawing.Pen" /> który określa kolor, szerokość i styl obramowania prostokątów.</param>
        <param name="rects">Tablica <see cref="T:System.Drawing.RectangleF" /> struktur, które reprezentują prostokąty do rysowania.</param>
        <summary>Rysuje szereg prostokąty określony przez <see cref="T:System.Drawing.RectangleF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy tablicę o trzy prostokąty.  
  
-   Rysuje prostokątów do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#83)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#83)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#83)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="rects" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="rects" /> jest tablicą o zerowej długości.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawString">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje określony ciąg tekstowy w określonej lokalizacji z określonym <see cref="T:System.Drawing.Brush" /> i <see cref="T:System.Drawing.Font" /> obiektów.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::PointF point);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawString (s, font, brush, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg do rysowania.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> definiuje format tekstu w ciągu.</param>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa kolor i tekstury narysowanego tekstu.</param>
        <param name="point">
          <see cref="T:System.Drawing.PointF" /> Struktura, która określa, w lewym górnym rogu narysowanego tekstu.</param>
        <summary>Rysuje określony ciąg tekstowy w określonej lokalizacji z określonym <see cref="T:System.Drawing.Brush" /> i <see cref="T:System.Drawing.Font" /> obiektów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg tekstowy do rysowania.  
  
-   Określa kolor czcionki jako Arial (16pt).  
  
-   Tworzy stałej, czarne pędzla do rysowania za pomocą.  
  
-   Tworzy punkt do lewego górnego rogu, w którym ma zostać narysowany tekst.  
  
-   Rysuje ciągu na ekranie przy użyciu czcionek, pędzli i docelowy punkt.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#84)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#84)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#84)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="s" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Używanie czcionek i tekstu</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF layoutRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::RectangleF layoutRectangle);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.RectangleF -&gt; unit" Usage="graphics.DrawString (s, font, brush, layoutRectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="layoutRectangle" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg do rysowania.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> definiuje format tekstu w ciągu.</param>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa kolor i tekstury narysowanego tekstu.</param>
        <param name="layoutRectangle">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa lokalizację narysowanego tekstu.</param>
        <summary>Rysuje ciągu określonego tekstu w prostokącie określonego z określonym <see cref="T:System.Drawing.Brush" /> i <see cref="T:System.Drawing.Font" /> obiektów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tekst, reprezentowane przez `s` parametru jest rysowane wewnątrz prostokąta, reprezentowane przez `layoutRectangle` parametru. Jeśli tekst nie mieści się w prostokącie, zostanie obcięta w najbliższej programu word. Do dalszych manipulacji, jak ciąg jest rysowane wewnątrz Użyj prostokąt <xref:System.Drawing.Graphics.DrawString%2A> przeciążenia przyjmującego <xref:System.Drawing.StringFormat>.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg tekstowy do rysowania.  
  
-   Określa kolor czcionki jako Arial (16pt).  
  
-   Tworzy stałej, czarne pędzla do rysowania za pomocą.  
  
-   Tworzy prostokąt, w którym ma zostać narysowany tekst.  
  
-   Rysuje prostokąt na ekranie.  
  
-   Rysuje ciągu na ekranie przy użyciu czcionek, pędzli i prostokąta docelowego.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#86)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#86)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#86)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="s" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Używanie czcionek i tekstu</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.PointF point, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::PointF point, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.PointF * System.Drawing.StringFormat -&gt; unit" Usage="graphics.DrawString (s, font, brush, point, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg do rysowania.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> definiuje format tekstu w ciągu.</param>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa kolor i tekstury narysowanego tekstu.</param>
        <param name="point">
          <see cref="T:System.Drawing.PointF" /> Struktura, która określa, w lewym górnym rogu narysowanego tekstu.</param>
        <param name="format">
          <see cref="T:System.Drawing.StringFormat" /> która określa formatowania atrybutów, takich jak odstępy i wyrównanie, które są stosowane do narysowanego tekstu.</param>
        <summary>Rysuje określony ciąg tekstowy w określonej lokalizacji z określonym <see cref="T:System.Drawing.Brush" /> i <see cref="T:System.Drawing.Font" /> obiektów przy użyciu atrybutów formatowania określonego <see cref="T:System.Drawing.StringFormat" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg tekstowy do rysowania.  
  
-   Określa kolor czcionki jako Arial (16pt).  
  
-   Tworzy stałej, czarne pędzla do rysowania za pomocą.  
  
-   Tworzy punkt do lewego górnego rogu, w którym ma zostać narysowany tekst.  
  
-   Ustawia format ciągu, aby narysować w pionie.  
  
-   Rysuje ekranu przy użyciu czcionek, pędzla, docelowy punkt i format ciągu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#85)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#85)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#85)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="s" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Używanie czcionek i tekstu</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF layoutRectangle, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::RectangleF layoutRectangle, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.RectangleF * System.Drawing.StringFormat -&gt; unit" Usage="graphics.DrawString (s, font, brush, layoutRectangle, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="layoutRectangle" Type="System.Drawing.RectangleF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg do rysowania.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> definiuje format tekstu w ciągu.</param>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa kolor i tekstury narysowanego tekstu.</param>
        <param name="layoutRectangle">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa lokalizację narysowanego tekstu.</param>
        <param name="format">
          <see cref="T:System.Drawing.StringFormat" /> która określa formatowania atrybutów, takich jak odstępy i wyrównanie, które są stosowane do narysowanego tekstu.</param>
        <summary>Rysuje ciągu określonego tekstu w prostokącie określonego z określonym <see cref="T:System.Drawing.Brush" /> i <see cref="T:System.Drawing.Font" /> obiektów przy użyciu atrybutów formatowania określonego <see cref="T:System.Drawing.StringFormat" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tekst, reprezentowane przez `s` parametru jest rysowane wewnątrz prostokąta, reprezentowane przez `layoutRectangle` parametru. Jeśli tekst nie mieści się w prostokącie, zostanie obcięta w najbliższej word, chyba że określono inaczej, za pomocą `format` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg tekstowy do rysowania.  
  
-   Określa kolor czcionki jako Arial (16pt).  
  
-   Tworzy stałej, czarne pędzla do rysowania za pomocą.  
  
-   Tworzy prostokąt, w którym ma zostać narysowany tekst.  
  
-   Rysuje prostokąt na ekranie.  
  
-   Ustawia format ciągu, aby wyśrodkować go w obrębie prostokąta.  
  
-   Rysuje ciągu na ekranie przy użyciu czcionek, pędzli i prostokąta docelowego.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#87)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#87)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="s" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Używanie czcionek i tekstu</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, float x, float y);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * single * single -&gt; unit" Usage="graphics.DrawString (s, font, brush, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg do rysowania.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> definiuje format tekstu w ciągu.</param>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa kolor i tekstury narysowanego tekstu.</param>
        <param name="x">Współrzędna x w lewym górnym rogu narysowanego tekstu.</param>
        <param name="y">Współrzędna y lewego górnego rogu narysowanego tekstu.</param>
        <summary>Rysuje określony ciąg tekstowy w określonej lokalizacji z określonym <see cref="T:System.Drawing.Brush" /> i <see cref="T:System.Drawing.Font" /> obiektów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg tekstowy do rysowania.  
  
-   Określa kolor czcionki jako Arial (16pt).  
  
-   Tworzy czarne pędzla do rysowania za pomocą.  
  
-   Tworzy punkt do lewego górnego rogu, w którym ma zostać narysowany tekst.  
  
-   Rysuje ciągu na ekranie przy użyciu czcionek, pędzli i docelowy punkt.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#88)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#88)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#88)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="s" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Używanie czcionek i tekstu</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, float32 x, float32 y, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, float x, float y, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * single * single * System.Drawing.StringFormat -&gt; unit" Usage="graphics.DrawString (s, font, brush, x, y, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg do rysowania.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> definiuje format tekstu w ciągu.</param>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa kolor i tekstury narysowanego tekstu.</param>
        <param name="x">Współrzędna x w lewym górnym rogu narysowanego tekstu.</param>
        <param name="y">Współrzędna y lewego górnego rogu narysowanego tekstu.</param>
        <param name="format">
          <see cref="T:System.Drawing.StringFormat" /> która określa formatowania atrybutów, takich jak odstępy i wyrównanie, które są stosowane do narysowanego tekstu.</param>
        <summary>Rysuje określony ciąg tekstowy w określonej lokalizacji z określonym <see cref="T:System.Drawing.Brush" /> i <see cref="T:System.Drawing.Font" /> obiektów przy użyciu atrybutów formatowania określonego <see cref="T:System.Drawing.StringFormat" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg tekstowy do rysowania.  
  
-   Określa kolor czcionki jako Arial (16pt).  
  
-   Tworzy stałej, czarne pędzla do rysowania za pomocą.  
  
-   Tworzy współrzędne punktu do lewego górnego rogu, w którym ma zostać narysowany tekst.  
  
-   Ustawia format ciągu, aby narysować w pionie  
  
-   Rysuje ekranu przy użyciu czcionek, pędzla, docelowy punkt i format ciągu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#89)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#89)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#89)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="s" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Używanie czcionek i tekstu</related>
      </Docs>
    </Member>
    <Member MemberName="EndContainer">
      <MemberSignature Language="C#" Value="public void EndContainer (System.Drawing.Drawing2D.GraphicsContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndContainer(class System.Drawing.Drawing2D.GraphicsContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndContainer (container As GraphicsContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndContainer(System::Drawing::Drawing2D::GraphicsContainer ^ container);" />
      <MemberSignature Language="F#" Value="member this.EndContainer : System.Drawing.Drawing2D.GraphicsContainer -&gt; unit" Usage="graphics.EndContainer container" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.Drawing.Drawing2D.GraphicsContainer" />
      </Parameters>
      <Docs>
        <param name="container">
          <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> który reprezentuje kontener, który przywraca tej metody.</param>
        <summary>Zamyka bieżący kontener grafiki i przywraca stan to <see cref="T:System.Drawing.Graphics" /> stan zapisany przez wywołanie <see cref="M:System.Drawing.Graphics.BeginContainer" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej metody za pomocą <xref:System.Drawing.Graphics.BeginContainer%2A> metodą tworzenia zagnieżdżonych kontenerów grafiki. Kontenery grafiki zachowuje stan grafiki, takich jak przekształcenie, obszaru przycinania i właściwości w renderingu.  
  
 Gdy wywołujesz <xref:System.Drawing.Graphics.BeginContainer%2A> metody <xref:System.Drawing.Graphics>, blok informacji, który zawiera stan <xref:System.Drawing.Graphics> jest umieszczany na stosie. <xref:System.Drawing.Graphics.BeginContainer%2A> Metoda zwraca <xref:System.Drawing.Drawing2D.GraphicsContainer> określający, że blok informacji. Podczas przekazywania identyfikujący obiekt do <xref:System.Drawing.Graphics.EndContainer%2A> metody blok informacji jest usuwany ze stosu i służy do przywracania <xref:System.Drawing.Graphics> stan był w momencie <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody.  
  
 Kontenery mogą być zagnieżdżone; oznacza to, można wywołać <xref:System.Drawing.Graphics.BeginContainer%2A> metoda kilka razy przed wywołaniem <xref:System.Drawing.Graphics.EndContainer%2A> metody. Zawsze należy wywołać <xref:System.Drawing.Graphics.BeginContainer%2A> metody blok informacji jest umieszczany na stosie i pojawi się <xref:System.Drawing.Drawing2D.GraphicsContainer> bloku informacji. Gdy jeden z tych obiektów do przekazania <xref:System.Drawing.Graphics.EndContainer%2A> metody <xref:System.Drawing.Graphics> zwracany jest stan był w momencie <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody, które są zwracane, określonego <xref:System.Drawing.Drawing2D.GraphicsContainer>. Blok informacji umieszczenie w stosie, przez który <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody jest usuwany ze stosu i wszystkich bloków informacyjnych umieszczone na ten stos po tym <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody także zostaną usunięte.  
  
 Wywołania <xref:System.Drawing.Graphics.Save%2A> bloków informacyjnych miejscu metody na tym samym stosie jako wywołania <xref:System.Drawing.Graphics.BeginContainer%2A> metody. Podobnie jak <xref:System.Drawing.Graphics.EndContainer%2A> wywołania metody jest powiązany z <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody <xref:System.Drawing.Graphics.Restore%2A> wywołania metody jest powiązany z <xref:System.Drawing.Graphics.Save%2A> wywołania metody.  
  
 Podczas wywoływania <xref:System.Drawing.Graphics.EndContainer%2A> metody wszystkich bloków informacyjnych umieszczenie w stosie (przez <xref:System.Drawing.Graphics.Save%2A> metody lub <xref:System.Drawing.Graphics.BeginContainer%2A> metody) po odpowiedniego wywołania <xref:System.Drawing.Graphics.BeginContainer%2A> metody zostaną usunięte ze stosu. Podobnie, jeśli wywołasz <xref:System.Drawing.Graphics.Restore%2A> metody wszystkich bloków informacyjnych umieszczenie w stosie, (przez <xref:System.Drawing.Graphics.Save%2A> metody lub <xref:System.Drawing.Graphics.BeginContainer%2A> metoda) po odpowiedniego wywołania <xref:System.Drawing.Graphics.Save%2A> metody zostaną usunięte ze stosu.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Zostanie otwarty nowy kontener grafiki i zapisuje stare kontenera.  
  
-   Wykonuje translację współrzędne świata w kontenerze.  
  
-   Wypełnia czerwonym prostokątem (przetłumaczone współrzędne) nowego kontenera.  
  
-   Zamyka nowego kontenera i przywrócenie zapisanej kontenera.  
  
-   Wypełnia zielony prostokąt (nieprzetłumaczonym współrzędne) zapisane kontenera.  
  
 Wynik jest zielony prostokąt, który overlies czerwony prostokąt o takim samym rozmiarze.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#90)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#90)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#90)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnumerateMetafile">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlenia w określonym momencie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.Point" /> Struktura, która określa lokalizację lewego górnego rogu rysowane metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlenia w określonym momencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy formularz, który ma <xref:System.Drawing.Imaging.Metafile> jako jeden z jego prywatnych elementów członkowskich. <xref:System.Windows.Forms.Control.OnPaint%2A> Wywołania metody <xref:System.Drawing.Graphics.EnumerateMetafile%2A>, które wywołuje formularza `MetafileCallback` metody dla każdego rekordu w metaplik. `MetafileCallback` Wywołania metody <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metody. Należy zauważyć, że `MetafileCallback` metoda otrzymuje dane rekordu jako <xref:System.IntPtr>, ale <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda oczekuje, że dane rekordu jako tablicę bajtów. Wywołanie <xref:System.Runtime.InteropServices.Marshal.Copy%2A> kopiuje dane z rekordu do tablicy typu byte, dzięki czemu mogą być przekazywane do <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>.  
  
 [!code-csharp[System.Drawing.Graphics.EnumerateMetafile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Graphics.EnumerateMetafile/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Graphics.EnumerateMetafile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Graphics.EnumerateMetafile/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destPoints">Tablica trzy <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok określająca rozmiar i położenie rysowane metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlenia w określonym równoległobok.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.PointF" /> Struktura, która określa lokalizację lewego górnego rogu rysowane metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlenia w określonym momencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destPoints">Tablica trzy <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok określająca rozmiar i położenie rysowane metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlenia w określonym równoległobok.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.PointF> struktury reprezentują lewym, prawym górnym rogu i lewym dolnym rogu równoległobok. Czwarty punkt jest ekstrapolacji pierwsze trzy w celu utworzenia równoległobok. Rysowane metaplik jest skalowany i pochylono, aby dopasować równoległobok.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar rysowane metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <summary>Wysyła rekordy określonego <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlenia w prostokącie określonego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa lokalizację i rozmiar rysowane metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <summary>Wysyła rekordy określonego <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlenia w prostokącie określonego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.Point" /> Struktura, która określa lokalizację lewego górnego rogu rysowane metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagana, ale jest ignorowana. Możesz przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlenia w określonym momencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destPoints">Tablica trzy <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok określająca rozmiar i położenie rysowane metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagana, ale jest ignorowana. Możesz przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlenia w określonym równoległobok.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.PointF" /> Struktura, która określa lokalizację lewego górnego rogu rysowane metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagana, ale jest ignorowana. Możesz przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlenia w określonym momencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destPoints">Tablica trzy <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok określająca rozmiar i położenie rysowane metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagana, ale jest ignorowana. Możesz przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlenia w określonym równoległobok.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.PointF> struktury reprezentują lewym, prawym górnym rogu i lewym dolnym rogu równoległobok. Czwarty punkt jest ekstrapolacji pierwsze trzy w celu utworzenia równoległobok. Rysowane metaplik jest skalowany i pochylono, aby dopasować równoległobok.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar rysowane metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagana, ale jest ignorowana. Możesz przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy określonego <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlenia w prostokącie określonego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa lokalizację i rozmiar rysowane metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagana, ale jest ignorowana. Możesz przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy określonego <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlenia w prostokącie określonego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.Point" /> Struktura, która określa lokalizację lewego górnego rogu rysowane metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagana, ale jest ignorowana. Możesz przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> informacje o atrybutach obrazu narysowany obraz, który określa.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, jeden w czasie, do metody wywołania zwrotnego do wyświetlenia w określonym momencie za pomocą określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.Point" /> Struktura, która określa lokalizację lewego górnego rogu rysowane metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część metaplik, względem jego lewym górnym rogu, aby narysować.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostkę miary umożliwiają ustalenie część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <summary>Wysyła rekordy w wybranych prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlenia w określonym momencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destPoints">Tablica trzy <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok określająca rozmiar i położenie rysowane metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagana, ale jest ignorowana. Możesz przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> informacje o atrybutach obrazu narysowany obraz, który określa.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, jeden w czasie, do metody wywołania zwrotnego do wyświetlenia w określonym równoległobok za pomocą określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.Point> struktury reprezentują lewym, prawym górnym rogu i lewym dolnym rogu równoległobok. Czwarty punkt jest ekstrapolacji pierwsze trzy w celu utworzenia równoległobok. Rysowane metaplik jest skalowany i pochylono, aby dopasować równoległobok.  
  
 Atrybuty obrazu, określone przez `imageAttr` zastąp parametr określone, gdy został napisany metaplik.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destPoints">Tablica trzy <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok określająca rozmiar i położenie rysowane metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część metaplik, względem jego lewym górnym rogu, aby narysować.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostkę miary umożliwiają ustalenie część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <summary>Wysyła rekordy w wybranych prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlenia w określonym równoległobok.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.Point> struktury reprezentują lewym, prawym górnym rogu i lewym dolnym rogu równoległobok. Czwarty punkt jest ekstrapolacji pierwsze trzy w celu utworzenia równoległobok. Rysowane metaplik jest skalowany i pochylono, aby dopasować równoległobok.  
  
 Wszelkie Rysowanie odbywa się poza prostokąt określony przez `srcRect` parametr jest ignorowany.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.PointF" /> Struktura, która określa lokalizację lewego górnego rogu rysowane metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagana, ale jest ignorowana. Możesz przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> informacje o atrybutach obrazu narysowany obraz, który określa.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, jeden w czasie, do metody wywołania zwrotnego do wyświetlenia w określonym momencie za pomocą określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jego należy to zrobić przez wywołanie metody określonego <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
 Atrybuty obrazu, określone przez `imageAttr` zastąp parametr określone, gdy został napisany metaplik.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.PointF" /> Struktura, która określa lokalizację lewego górnego rogu rysowane metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część metaplik, względem jego lewym górnym rogu, aby narysować.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostkę miary umożliwiają ustalenie część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <summary>Wysyła rekordy w wybranych prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlenia w określonym momencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
 Wszelkie Rysowanie odbywa się poza prostokąt określony przez `srcRect` parametr jest ignorowany.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destPoints">Tablica trzy <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok określająca rozmiar i położenie rysowane metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagana, ale jest ignorowana. Możesz przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> informacje o atrybutach obrazu narysowany obraz, który określa.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, jeden w czasie, do metody wywołania zwrotnego do wyświetlenia w określonym równoległobok za pomocą określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.PointF> struktury reprezentują lewym, prawym górnym rogu i lewym dolnym rogu równoległobok. Czwarty punkt jest ekstrapolacji pierwsze trzy w celu utworzenia równoległobok. Rysowane metaplik jest skalowany i pochylono, aby dopasować równoległobok.  
  
 Atrybuty obrazu, określone przez `imageAttr` zastąp parametr określone, gdy został napisany metaplik.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destPoints">Tablica trzy <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok określająca rozmiar i położenie rysowane metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> struktury, która określa część metaplik, względem jego lewym górnym rogu, aby narysować.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostkę miary umożliwiają ustalenie część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <summary>Wysyła rekordy w wybranych prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlenia w określonym równoległobok.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.Point> struktury reprezentują lewym, prawym górnym rogu i lewym dolnym rogu równoległobok. Czwarty punkt jest ekstrapolacji pierwsze trzy w celu utworzenia równoległobok. Rysowane metaplik jest skalowany i pochylono, aby dopasować równoległobok.  
  
 Wszelkie Rysowanie odbywa się poza prostokąt określony przez `srcRect` parametr jest ignorowany.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar rysowane metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagana, ale jest ignorowana. Możesz przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> informacje o atrybutach obrazu narysowany obraz, który określa.</param>
        <summary>Wysyła rekordy określonego <see cref="T:System.Drawing.Imaging.Metafile" />, jeden w czasie, do metody wywołania zwrotnego do wyświetlenia w prostokącie określonego za pomocą określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
 Atrybuty obrazu, określone przez `imageAttr` zastąp parametr określone, gdy został napisany metaplik.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar rysowane metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część metaplik, względem jego lewym górnym rogu, aby narysować.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostkę miary umożliwiają ustalenie część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <summary>Wysyła rekordów wybranych prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlenia w prostokącie określonego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
 Wszelkie Rysowanie odbywa się poza prostokąt określony przez `srcRect` parametr jest ignorowany.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa lokalizację i rozmiar rysowane metaplik.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagana, ale jest ignorowana. Możesz przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> informacje o atrybutach obrazu narysowany obraz, który określa.</param>
        <summary>Wysyła rekordy określonego <see cref="T:System.Drawing.Imaging.Metafile" />, jeden w czasie, do metody wywołania zwrotnego do wyświetlenia w prostokącie określonego za pomocą określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
 Atrybuty obrazu, określone przez `imageAttr` zastąp parametr określone, gdy został napisany metaplik.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa lokalizację i rozmiar rysowane metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część metaplik, względem jego lewym górnym rogu, aby narysować.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostkę miary umożliwiają ustalenie część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <summary>Wysyła rekordów wybranych prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlenia w prostokącie określonego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
 Wszelkie Rysowanie odbywa się poza prostokąt określony przez `srcRect` parametr jest ignorowany.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.Point" /> Struktura, która określa lokalizację lewego górnego rogu rysowane metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część metaplik, względem jego lewym górnym rogu, aby narysować.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostkę miary umożliwiają ustalenie część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagana, ale jest ignorowana. Możesz przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy w wybranych prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlenia w określonym momencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destPoints">Tablica trzy <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok określająca rozmiar i położenie rysowane metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część metaplik, względem jego lewym górnym rogu, aby narysować.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostkę miary umożliwiają ustalenie część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagana, ale jest ignorowana. Możesz przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy w wybranych prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlenia w określonym równoległobok.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.Point> struktury reprezentują lewym, prawym górnym rogu i lewym dolnym rogu równoległobok. Czwarty punkt jest ekstrapolacji pierwsze trzy w celu utworzenia równoległobok. Rysowane metaplik jest skalowany i pochylono, aby dopasować równoległobok.  
  
 Wszelkie Rysowanie odbywa się poza prostokąt określony przez `srcRect` parametr jest ignorowany.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.PointF" /> Struktura, która określa lokalizację lewego górnego rogu rysowane metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część metaplik, względem jego lewym górnym rogu, aby narysować.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostkę miary umożliwiają ustalenie część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagana, ale jest ignorowana. Możesz przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy w wybranych prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlenia w określonym momencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
 Wszelkie Rysowanie odbywa się poza prostokąt określony przez `srcRect` parametr jest ignorowany.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destPoints">Tablica trzy <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok określająca rozmiar i położenie rysowane metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część metaplik, względem jego lewym górnym rogu, aby narysować.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostkę miary umożliwiają ustalenie część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagana, ale jest ignorowana. Możesz przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy w wybranych prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlenia w określonym równoległobok.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.PointF> struktury reprezentują lewym, prawym górnym rogu i lewym dolnym rogu równoległobok. Czwarty punkt jest ekstrapolacji pierwsze trzy w celu utworzenia równoległobok. Rysowane metaplik jest skalowany i pochylono, aby dopasować równoległobok.  
  
 Wszelkie Rysowanie odbywa się poza prostokąt określony przez `srcRect` parametr jest ignorowany.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar rysowane metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część metaplik, względem jego lewym górnym rogu, aby narysować.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostkę miary umożliwiają ustalenie część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagana, ale jest ignorowana. Możesz przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordów wybranych prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlenia w prostokącie określonego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
 Wszelkie Rysowanie odbywa się poza prostokąt określony przez `srcRect` parametr jest ignorowany.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa lokalizację i rozmiar rysowane metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część metaplik, względem jego lewym górnym rogu, aby narysować.</param>
        <param name="srcUnit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostkę miary umożliwiają ustalenie część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagana, ale jest ignorowana. Możesz przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordów wybranych prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlenia w prostokącie określonego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez`callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
 Wszelkie Rysowanie odbywa się poza prostokąt określony przez `srcRect` parametr jest ignorowany.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.Point" /> Struktura, która określa lokalizację lewego górnego rogu rysowane metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część metaplik, względem jego lewym górnym rogu, aby narysować.</param>
        <param name="unit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostkę miary umożliwiają ustalenie część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagana, ale jest ignorowana. Możesz przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> informacje o atrybutach obrazu narysowany obraz, który określa.</param>
        <summary>Wysyła rekordy w wybranych prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, jeden w czasie, do metody wywołania zwrotnego do wyświetlenia w określonym momencie za pomocą określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destPoints">Tablica trzy <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok określająca rozmiar i położenie rysowane metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część metaplik, względem jego lewym górnym rogu, aby narysować.</param>
        <param name="unit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostkę miary umożliwiają ustalenie część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagana, ale jest ignorowana. Możesz przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> informacje o atrybutach obrazu narysowany obraz, który określa.</param>
        <summary>Wysyła rekordy w wybranych prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, jeden w czasie, do metody wywołania zwrotnego do wyświetlenia w określonym równoległobok za pomocą określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.Point> struktury reprezentują lewym, prawym górnym rogu i lewym dolnym rogu równoległobok. Czwarty punkt jest ekstrapolacji pierwsze trzy w celu utworzenia równoległobok. Rysowane metaplik jest skalowany i pochylono, aby dopasować równoległobok.  
  
 Wszelkie Rysowanie odbywa się poza prostokąt określony przez `srcRect` parametr jest ignorowany.  
  
 Atrybuty obrazu, określone przez `imageAttr` zastąp parametr określone, gdy został napisany metaplik.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destPoint">
          <see cref="T:System.Drawing.PointF" /> Struktura, która określa lokalizację lewego górnego rogu rysowane metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część metaplik, względem jego lewym górnym rogu, aby narysować.</param>
        <param name="unit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostkę miary umożliwiają ustalenie część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagana, ale jest ignorowana. Możesz przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> informacje o atrybutach obrazu narysowany obraz, który określa.</param>
        <summary>Wysyła rekordy w wybranych prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, jeden w czasie, do metody wywołania zwrotnego do wyświetlenia w określonym momencie za pomocą określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
 Wszelkie Rysowanie odbywa się poza prostokąt określony przez `srcRect` parametr jest ignorowany.  
  
 Atrybuty obrazu, określone przez `imageAttr` zastąp parametr określone, gdy został napisany metaplik.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destPoints">Tablica trzy <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok określająca rozmiar i położenie rysowane metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część metaplik, względem jego lewym górnym rogu, aby narysować.</param>
        <param name="unit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostkę miary umożliwiają ustalenie część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagana, ale jest ignorowana. Możesz przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> informacje o atrybutach obrazu narysowany obraz, który określa.</param>
        <summary>Wysyła rekordy w wybranych prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, jeden w czasie, do metody wywołania zwrotnego do wyświetlenia w określonym równoległobok za pomocą określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
 `destPoints` Parametr określa trzy punkty równoległobok. Trzy <xref:System.Drawing.PointF> struktury reprezentują lewym, prawym górnym rogu i lewym dolnym rogu równoległobok. Czwarty punkt jest ekstrapolacji pierwsze trzy w celu utworzenia równoległobok. Rysowane metaplik jest skalowany i pochylono, aby dopasować równoległobok.  
  
 Wszelkie Rysowanie odbywa się poza prostokąt określony przez `srcRect` parametr jest ignorowany.  
  
 Atrybuty obrazu, określone przez `imageAttr` zastąp parametr określone, gdy został napisany metaplik.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa lokalizację i rozmiar rysowane metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa część metaplik, względem jego lewym górnym rogu, aby narysować.</param>
        <param name="unit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostkę miary umożliwiają ustalenie część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagana, ale jest ignorowana. Możesz przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> informacje o atrybutach obrazu narysowany obraz, który określa.</param>
        <summary>Wysyła rekordów wybranych prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, jeden w czasie, do metody wywołania zwrotnego do wyświetlenia w prostokącie określonego za pomocą określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
 Wszelkie Rysowanie odbywa się poza prostokąt określony przez `srcRect` parametr jest ignorowany.  
  
 Atrybuty obrazu, określone przez `imageAttr` zastąp parametr określone, gdy został napisany metaplik.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          <see cref="T:System.Drawing.Imaging.Metafile" /> do wyliczenia.</param>
        <param name="destRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa lokalizację i rozmiar rysowane metaplik.</param>
        <param name="srcRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa część metaplik, względem jego lewym górnym rogu, aby narysować.</param>
        <param name="unit">Członek <see cref="T:System.Drawing.GraphicsUnit" /> wyliczenie, które określa jednostkę miary umożliwiają ustalenie część metaplik, który prostokąt określony przez <c>srcRect</c> zawiera parametr.</param>
        <param name="callback">
          <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> Delegat, który określa metodę, do którego są wysyłane rekordów metaplik.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagana, ale jest ignorowana. Możesz przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> informacje o atrybutach obrazu narysowany obraz, który określa.</param>
        <summary>Wysyła rekordów wybranych prostokąt z <see cref="T:System.Drawing.Imaging.Metafile" />, jeden w czasie, do metody wywołania zwrotnego do wyświetlenia w prostokącie określonego za pomocą określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w z określonego meta pliku. Każdego rekordu indywidualnie są wysyłane do metody wywołania zwrotnego, określony przez `callback` parametru. Zazwyczaj wywołania metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodę "Odtwarzanie", lub rysowania, rekord.  
  
 Jeśli wywołuje metody wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, jej należy to zrobić, wywołując <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metoda konkretne <xref:System.Drawing.Imaging.Metafile> , wyliczenia.  
  
 Wszelkie Rysowanie odbywa się poza prostokąt określony przez `srcRect` parametr jest ignorowany.  
  
 Atrybuty obrazu, określone przez `imageAttr` zastąp parametr określone, gdy został napisany metaplik.  
  
   
  
## Examples  
 Dla przykładu kodu zobacz <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExcludeClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aktualizuje region klipu <see cref="T:System.Drawing.Graphics" /> do wykluczenia z zakresu określonego przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExcludeClip">
      <MemberSignature Language="C#" Value="public void ExcludeClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExcludeClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ExcludeClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExcludeClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExcludeClip(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.ExcludeClip : System.Drawing.Rectangle -&gt; unit" Usage="graphics.ExcludeClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która określa prostokąta do wykluczenia z obszar przycinania.</param>
        <summary>Aktualizuje region klipu <see cref="T:System.Drawing.Graphics" /> do wykluczenia z zakresu określonego przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie obejmuje z zakresu określonego przez `rect` parametru z bieżącego regionu klipu i przypisuje wynikowy obszar <xref:System.Drawing.Graphics.Clip%2A> właściwości tego <xref:System.Drawing.Graphics>.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pikseli 100, 100 pikseli prostokąta, którego lewego górnego rogu znajduje się na współrzędnych (100, 100).  
  
-   Tworzy obszar zdefiniowany przez prostokąta.  
  
-   Ustawia obszar przycinania, które mają zostać wykluczone prostokątny obszar.  
  
-   Wypełnia 300 pikseli przez 300 pikseli prostokąta, którego lewego górnego rogu znajduje się na współrzędnych (0, 0) z niebieskim pędzla.  
  
 Wynik jest niebieski prostokąt z regionem kwadratowy kierunku brak jej w prawym dolnym rogu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#92)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#92)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#92)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExcludeClip">
      <MemberSignature Language="C#" Value="public void ExcludeClip (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExcludeClip(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ExcludeClip(System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExcludeClip(System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.ExcludeClip : System.Drawing.Region -&gt; unit" Usage="graphics.ExcludeClip region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region">
          <see cref="T:System.Drawing.Region" /> która określa region do wykluczenia z obszar przycinania.</param>
        <summary>Aktualizuje region klipu <see cref="T:System.Drawing.Graphics" /> do wykluczenia z zakresu określonego przez <see cref="T:System.Drawing.Region" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie obejmuje z zakresu określonego przez `region` parametru z bieżącego regionu klipu i przypisuje wynikowy obszar <xref:System.Drawing.Graphics.Clip%2A> właściwości tego <xref:System.Drawing.Graphics>.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pikseli 100, 100 pikseli prostokąta, którego lewego górnego rogu znajduje się na współrzędnych (100, 100).  
  
-   Ustawia obszar przycinania, które mają zostać wykluczone prostokąta.  
  
-   Wypełnia 300 pikseli przez 300 pikseli prostokąta, którego lewego górnego rogu znajduje się na współrzędnych (0, 0) z niebieskim pędzla.  
  
 Wynik jest niebieski prostokąt z obszarem kwadratowy kierunku brak jej w prawym dolnym rogu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#91)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#91)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#91)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillClosedCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wypełnia wewnętrznych zamkniętej krzywej kardynalnej krzywej zdefiniowane przez tablicę <see cref="T:System.Drawing.Point" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.Point[] -&gt; unit" Usage="graphics.FillClosedCurve (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa właściwości wypełnienia.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.Point" /> struktur, które definiują krzywej składanej.</param>
        <summary>Wypełnia wewnętrznych zamkniętej krzywej kardynalnej krzywej zdefiniowane przez tablicę <see cref="T:System.Drawing.Point" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełni wewnętrznych zamknięte kardynalna przechodzący przez każdy punkt w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszego punktu, dodatkowe segmentu, jest on dodawany z ostatniego punktu pierwszego punktu, aby je zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.Point> struktury.  
  
 Ta metoda używa napięcie domyślne, wynosi 0,5.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwony pędzla.  
  
-   Tworzy tablicę czterech punktów do definiowania krzywej składanej.  
  
-   Wypełnia krzywą na ekranie.  
  
 Krzywa ma domyślne napięcie 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#93)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#93)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#93)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.PointF[] -&gt; unit" Usage="graphics.FillClosedCurve (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa właściwości wypełnienia.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które definiują krzywej składanej.</param>
        <summary>Wypełnia wewnętrznych zamkniętej krzywej kardynalnej krzywej zdefiniowane przez tablicę <see cref="T:System.Drawing.PointF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełni wewnętrznych zamknięte kardynalna przechodzący przez każdy punkt w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszego punktu, dodatkowe segmentu, jest on dodawany z ostatniego punktu pierwszego punktu, aby je zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.PointF> struktury.  
  
 Ta metoda używa napięcie domyślne, wynosi 0,5.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwony pędzla.  
  
-   Tworzy tablicę czterech punktów do definiowania krzywej składanej.  
  
-   Wypełnia krzywą na ekranie.  
  
 Krzywa ma domyślne napięcie 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#96)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#96)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#96)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.Point[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa właściwości wypełnienia.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.Point" /> struktur, które definiują krzywej składanej.</param>
        <param name="fillmode">Członek <see cref="T:System.Drawing.Drawing2D.FillMode" /> wyliczenie, które określa, jak krzywej jest wypełnione.</param>
        <summary>Wypełnia wewnętrznych zamkniętej krzywej kardynalnej krzywej zdefiniowane przez tablicę <see cref="T:System.Drawing.Point" /> struktury przy użyciu trybu określonego wypełnienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełni wewnętrznych zamknięte kardynalna przechodzący przez każdy punkt w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszego punktu, dodatkowe segmentu, jest on dodawany z ostatniego punktu pierwszego punktu, aby je zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.Point> struktury.  
  
 Ta metoda używa napięcie domyślne, wynosi 0,5.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwony pędzla.  
  
-   Tworzy tablicę czterech punktów do definiowania krzywej składanej.  
  
-   Ustawia tryb wypełniania <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Wypełnia krzywą na ekranie.  
  
 Krzywa ma domyślne napięcie 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#94)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#94)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#94)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.PointF[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa właściwości wypełnienia.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które definiują krzywej składanej.</param>
        <param name="fillmode">Członek <see cref="T:System.Drawing.Drawing2D.FillMode" /> wyliczenie, które określa, jak krzywej jest wypełnione.</param>
        <summary>Wypełnia wewnętrznych zamkniętej krzywej kardynalnej krzywej zdefiniowane przez tablicę <see cref="T:System.Drawing.PointF" /> struktury przy użyciu trybu określonego wypełnienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełni wewnętrznych zamknięte kardynalna przechodzący przez każdy punkt w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszego punktu, dodatkowe segmentu, jest on dodawany z ostatniego punktu pierwszego punktu, aby je zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.Point> struktury.  
  
 Ta metoda używa napięcie domyślne, wynosi 0,5.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwony pędzla.  
  
-   Tworzy tablicę czterech punktów do definiowania krzywej składanej.  
  
-   Ustawia tryb wypełniania <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Wypełnia krzywą na ekranie.  
  
 Krzywa ma domyślne napięcie 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#97)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#97)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#97)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode, float tension);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.Point[] * System.Drawing.Drawing2D.FillMode * single -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa właściwości wypełnienia.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.Point" /> struktur, które definiują krzywej składanej.</param>
        <param name="fillmode">Członek <see cref="T:System.Drawing.Drawing2D.FillMode" /> wyliczenie, które określa, jak krzywej jest wypełnione.</param>
        <param name="tension">Wartość większa niż lub równa 0.0f, który określa napięcie krzywej.</param>
        <summary>Wypełnia wewnętrznych zamkniętej krzywej kardynalnej krzywej zdefiniowane przez tablicę <see cref="T:System.Drawing.Point" /> struktury przy użyciu trybu określonego wypełnienia i napięcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełni wewnętrznych zamknięte kardynalna przechodzący przez każdy punkt w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszego punktu, dodatkowe segmentu, jest on dodawany z ostatniego punktu pierwszego punktu, aby je zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.Point> struktury.  
  
 `tension` Parametr określa kształt krzywej składanej. Jeśli wartość `tension` parametru to 0.0f, ta metoda rysuje linię prostą segmentów do łączenia z punktów. Zazwyczaj `tension` parametr jest mniejsza niż 1.0f. Wartości w ciągu 1.0f generować nieoczekiwane rezultaty.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwony pędzla.  
  
-   Tworzy tablicę czterech punktów do definiowania krzywej składanej.  
  
-   Ustawia tryb wypełniania <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Ustawia naciągnięcie 1.0.  
  
-   Wypełnia krzywą na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#95)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#95)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#95)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode, float tension);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.PointF[] * System.Drawing.Drawing2D.FillMode * single -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">A <see cref="T:System.Drawing.Brush" /> określający charakterystyki wypełnienia.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które definiują krzywej składanej.</param>
        <param name="fillmode">Członek <see cref="T:System.Drawing.Drawing2D.FillMode" /> wyliczenie, które określa, jak krzywej jest wypełnione.</param>
        <param name="tension">Wartość większa niż lub równa 0.0f, który określa napięcie krzywej.</param>
        <summary>Wypełnia wewnętrznych zamkniętej krzywej kardynalnej krzywej zdefiniowane przez tablicę <see cref="T:System.Drawing.PointF" /> struktury przy użyciu trybu określonego wypełnienia i napięcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełni wewnętrznych zamknięte kardynalna przechodzący przez każdy punkt w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszego punktu, dodatkowe segmentu, jest on dodawany z ostatniego punktu pierwszego punktu, aby je zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.Point> struktury.  
  
 `tension` Parametr określa kształt krzywej składanej. Jeśli wartość `tension` parametru to 0.0f, ta metoda rysuje linię prostą segmentów do łączenia z punktów. Zazwyczaj `tension` parametr jest mniejsza niż 1.0f. Wartości w ciągu 1.0f generować nieoczekiwane rezultaty.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwony pędzla.  
  
-   Tworzy tablicę czterech punktów do definiowania krzywej składanej.  
  
-   Ustawia tryb wypełniania <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Ustawia naciągnięcie 1.0.  
  
-   Wypełnia krzywą na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#98)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#98)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillEllipse">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wypełnia wewnętrznych definicją otaczający prostokąt określony przez parę współrzędne, szerokość i wysokość elipsy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * System.Drawing.Rectangle -&gt; unit" Usage="graphics.FillEllipse (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa właściwości wypełnienia.</param>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która reprezentuje prostokąt otaczający, który definiuje elipsy.</param>
        <summary>Wypełnia wewnętrznych elipsę definicją otaczający prostokąt określony przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełni wewnętrznych elipsę z <xref:System.Drawing.Brush>. Wielokropek jest definiowany przez prostokąt otaczający reprezentowany przez `rect` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwony pędzla.  
  
-   Tworzy prostokąt, który granic elipsę.  
  
-   Wypełnia elipsy na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#99)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#99)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#99)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * System.Drawing.RectangleF -&gt; unit" Usage="graphics.FillEllipse (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa właściwości wypełnienia.</param>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która reprezentuje prostokąt otaczający, który definiuje elipsy.</param>
        <summary>Wypełnia wewnętrznych elipsę definicją otaczający prostokąt określony przez <see cref="T:System.Drawing.RectangleF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełni wewnętrznych elipsę z <xref:System.Drawing.Brush>. Wielokropek jest definiowany przez prostokąt otaczający reprezentowany przez `rect` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwony pędzla.  
  
-   Tworzy prostokąt, który granic elipsę.  
  
-   Wypełnia elipsy na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#100)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#100)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#100)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * int * int * int * int -&gt; unit" Usage="graphics.FillEllipse (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa właściwości wypełnienia.</param>
        <param name="x">Współrzędna x w lewym górnym rogu prostokąt otaczający, który definiuje elipsy.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąt otaczający, który definiuje elipsy.</param>
        <param name="width">Szerokość prostokąt otaczający, który definiuje elipsy.</param>
        <param name="height">Wysokość prostokąt otaczający, który definiuje elipsy.</param>
        <summary>Wypełnia wewnętrznych definicją otaczający prostokąt określony przez parę współrzędne, szerokość i wysokość elipsy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełni wewnętrznych elipsę z <xref:System.Drawing.Brush>. Wielokropek jest definiowany przez prostokąt otaczający reprezentowany przez `x`, `y`, `width`, i `height` parametrów.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwony pędzla.  
  
-   Tworzy, lokalizacja i rozmiar prostokąt, który granic elipsę.  
  
-   Wypełnia elipsy na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#101)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#101)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#101)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * single * single * single * single -&gt; unit" Usage="graphics.FillEllipse (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa właściwości wypełnienia.</param>
        <param name="x">Współrzędna x w lewym górnym rogu prostokąt otaczający, który definiuje elipsy.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąt otaczający, który definiuje elipsy.</param>
        <param name="width">Szerokość prostokąt otaczający, który definiuje elipsy.</param>
        <param name="height">Wysokość prostokąt otaczający, który definiuje elipsy.</param>
        <summary>Wypełnia wewnętrznych definicją otaczający prostokąt określony przez parę współrzędne, szerokość i wysokość elipsy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełni wewnętrznych elipsę z <xref:System.Drawing.Brush>. Wielokropek jest definiowany przez prostokąt otaczający reprezentowany przez `x`, `y`, `width`, i `height` parametrów.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwony pędzla.  
  
-   Tworzy, lokalizacja i rozmiar prostokąt, który granic elipsę.  
  
-   Wypełnia elipsy na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#102)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#102)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#102)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPath">
      <MemberSignature Language="C#" Value="public void FillPath (System.Drawing.Brush brush, System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPath(class System.Drawing.Brush brush, class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPath(System::Drawing::Brush ^ brush, System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.FillPath : System.Drawing.Brush * System.Drawing.Drawing2D.GraphicsPath -&gt; unit" Usage="graphics.FillPath (brush, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa właściwości wypełnienia.</param>
        <param name="path">
          <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> która reprezentuje ścieżkę do wypełnienia.</param>
        <summary>Wypełnia wnętrza <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Drawing.Drawing2D.GraphicsPath> składa się z szeregu segmenty linii i krzywych. Jeśli ścieżka jest reprezentowane przez `path` parametru nie są zamknięte, dodatkowe segmentu jest dodawany z ostatniego punktu z pierwszym punktem, aby zamknąć ścieżkę.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwony pędzla.  
  
-   Tworzy obiekt ścieżki grafiki.  
  
-   Dodaje elipsy do ścieżki grafiki.  
  
-   Wypełnia ścieżkę na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#103)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#103)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#103)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="path" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillPie">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wypełnia wewnątrz sekcji kołowy definicją elipsę określony przez parę współrzędne, szerokości, wysokości i dwa wiersze promieniowego.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.FillPie : System.Drawing.Brush * System.Drawing.Rectangle * single * single -&gt; unit" Usage="graphics.FillPie (brush, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa właściwości wypełnienia.</param>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która reprezentuje prostokąt otaczający, który definiuje elipsy, z którego pochodzi sekcji kołowy.</param>
        <param name="startAngle">Kąt w stopniach zgodnie ze wskazówkami zegara mierzony od osi x do pierwszej strony w sekcji koła.</param>
        <param name="sweepAngle">Kąt w stopniach mierzone zgodnie ze wskazówkami zegara od <c>startAngle</c> parametr do drugiej strony w sekcji koła.</param>
        <summary>Wypełnia wewnętrznych definicją elipsę określone przez sekcję kołowy <see cref="T:System.Drawing.RectangleF" /> struktury i dwa wiersze promieniowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełni wewnątrz sekcji kołowy definicją łuk elipsę i dwa wiersze promieniowego, które przecinają z punktami końcowymi łuku. Wielokropek jest definiowany przez prostokąt otaczający. Sekcja kołowy składa się z dwóch wierszy promieniowego zdefiniowane przez `startAngle` i `sweepAngle` parametrów i łuk między przecięcia tych linii promieniowych z elipsy.  
  
 Jeśli `sweepAngle` parametru jest większa niż 360 lub mniej niż-360 stopni, jest ona traktowana jak w przypadku 360 lub-360 stopni, odpowiednio.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwony pędzla.  
  
-   Tworzy prostokąt, który granic elipsę.  
  
-   Określa kąt początkowy (względem osi x) i kąt odchylenia (zarówno w kierunku do ruchu wskazówek zegara).  
  
-   Wypełnia obszar kołowy w kształcie elipsy na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#104)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#104)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#104)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.FillPie : System.Drawing.Brush * int * int * int * int * int * int -&gt; unit" Usage="graphics.FillPie (brush, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa właściwości wypełnienia.</param>
        <param name="x">Współrzędna x lewego górnego rogu otaczający prostokąt, który definiuje elipsy, z którego pochodzi sekcji koła.</param>
        <param name="y">Współrzędna y lewego górnego rogu otaczający prostokąt, który definiuje elipsy, z którego pochodzi sekcji koła.</param>
        <param name="width">Szerokość otaczający prostokąt, który definiuje elipsy, z którego pochodzi sekcji koła.</param>
        <param name="height">Wysokość otaczający prostokąt, który definiuje elipsy, z którego pochodzi sekcji koła.</param>
        <param name="startAngle">Kąt w stopniach zgodnie ze wskazówkami zegara mierzony od osi x do pierwszej strony w sekcji koła.</param>
        <param name="sweepAngle">Kąt w stopniach mierzone zgodnie ze wskazówkami zegara od <c>startAngle</c> parametr do drugiej strony w sekcji koła.</param>
        <summary>Wypełnia wewnątrz sekcji kołowy definicją elipsę określony przez parę współrzędne, szerokości, wysokości i dwa wiersze promieniowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełni wewnątrz sekcji kołowy definicją łuk elipsę i dwa wiersze promieniowego, które przecinają z punktami końcowymi łuku. Wielokropek jest definiowany przez prostokąt otaczający. Sekcja kołowy składa się z dwóch wierszy promieniowego zdefiniowane przez `startAngle` i `sweepAngle` parametrów i łuk między przecięcia tych linii promieniowych z elipsy.  
  
 Jeśli `sweepAngle` parametru jest większa niż 360 lub mniej niż-360 stopni, jest ona traktowana jak w przypadku 360 lub-360 stopni, odpowiednio.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwony pędzla.  
  
-   Tworzy, lokalizacja i rozmiar prostokąt, który granic elipsę.  
  
-   Określa kąt początkowy (względem osi x) i kąt odchylenia (zarówno w kierunku do ruchu wskazówek zegara).  
  
-   Wypełnia obszar kołowy w kształcie elipsy na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#105)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#105)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#105)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.FillPie : System.Drawing.Brush * single * single * single * single * single * single -&gt; unit" Usage="graphics.FillPie (brush, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa właściwości wypełnienia.</param>
        <param name="x">Współrzędna x lewego górnego rogu otaczający prostokąt, który definiuje elipsy, z którego pochodzi sekcji koła.</param>
        <param name="y">Współrzędna y lewego górnego rogu otaczający prostokąt, który definiuje elipsy, z którego pochodzi sekcji koła.</param>
        <param name="width">Szerokość otaczający prostokąt, który definiuje elipsy, z którego pochodzi sekcji koła.</param>
        <param name="height">Wysokość otaczający prostokąt, który definiuje elipsy, z którego pochodzi sekcji koła.</param>
        <param name="startAngle">Kąt w stopniach zgodnie ze wskazówkami zegara mierzony od osi x do pierwszej strony w sekcji koła.</param>
        <param name="sweepAngle">Kąt w stopniach mierzone zgodnie ze wskazówkami zegara od <c>startAngle</c> parametr do drugiej strony w sekcji koła.</param>
        <summary>Wypełnia wewnątrz sekcji kołowy definicją elipsę określony przez parę współrzędne, szerokości, wysokości i dwa wiersze promieniowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełni wewnątrz sekcji kołowy definicją łuk elipsę i dwa wiersze promieniowego, które przecinają z punktami końcowymi łuku. Wielokropek jest definiowany przez prostokąt otaczający. Sekcja kołowy składa się z dwóch wierszy promieniowego zdefiniowane przez `startAngle` i `sweepAngle` parametrów i łuk między przecięcia tych linii promieniowych z elipsy.  
  
 Jeśli `sweepAngle` parametru jest większa niż 360 lub mniej niż-360 stopni, jest ona traktowana jak w przypadku 360 lub-360 stopni, odpowiednio.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwony pędzla.  
  
-   Tworzy, lokalizacja i rozmiar prostokąt, który granic elipsę.  
  
-   Określa kąt początkowy (względem osi x) i kąt odchylenia (zarówno w kierunku do ruchu wskazówek zegara).  
  
-   Wypełnia obszar kołowy w kształcie elipsy na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#106)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#106)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#106)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillPolygon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wypełnia wnętrze wielokąta zdefiniowane przez tablicę o punktów <see cref="T:System.Drawing.Point" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.Point[] -&gt; unit" Usage="graphics.FillPolygon (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa właściwości wypełnienia.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.Point" /> struktur, które reprezentują wierzchołki wielokąta do wypełnienia.</param>
        <summary>Wypełnia wnętrze wielokąta zdefiniowane przez tablicę o punktów <see cref="T:System.Drawing.Point" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Co dwa kolejne punkty w tablicy Określ bok wielokąta. Ponadto jeśli ostatni punkt i pierwszy punkt nie pokrywają się, określają zamknięcia boku wielokąta.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny obiekt brush niebieski.  
  
-   Tworzy tablicę siedmiu punktów do definiowania wielokąta.  
  
-   Wypełnia obszar wielokątne na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#107)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#107)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#107)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.PointF[] -&gt; unit" Usage="graphics.FillPolygon (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa właściwości wypełnienia.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które reprezentują wierzchołki wielokąta do wypełnienia.</param>
        <summary>Wypełnia wnętrze wielokąta zdefiniowane przez tablicę o punktów <see cref="T:System.Drawing.PointF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Co dwa kolejne punkty w tablicy Określ bok wielokąta. Ponadto jeśli ostatni punkt i pierwszy punkt nie pokrywają się, określają zamknięcia boku wielokąta.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny obiekt brush niebieski.  
  
-   Tworzy tablicę siedmiu punktów do definiowania wielokąta.  
  
-   Wypełnia obszar wielokątne na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#109)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#109)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#109)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillMode);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.Point[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillPolygon (brush, points, fillMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa właściwości wypełnienia.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.Point" /> struktur, które reprezentują wierzchołki wielokąta do wypełnienia.</param>
        <param name="fillMode">Członek <see cref="T:System.Drawing.Drawing2D.FillMode" /> wyliczenie, które określa styl wypełnienia.</param>
        <summary>Wypełnia wnętrze wielokąta zdefiniowane przez tablicę o punktów <see cref="T:System.Drawing.Point" /> struktury przy użyciu trybu określonego wypełnienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Co dwa kolejne punkty w tablicy Określ bok wielokąta. Ponadto jeśli ostatni punkt i pierwszy punkt nie pokrywają się, określają zamknięcia boku wielokąta.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny obiekt brush niebieski.  
  
-   Tworzy tablicę siedmiu punktów do definiowania wielokąta.  
  
-   Ustawia tryb wypełniania <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Wypełnia obszar wielokątne na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#108)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#108)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#108)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillMode);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.PointF[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillPolygon (brush, points, fillMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa właściwości wypełnienia.</param>
        <param name="points">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które reprezentują wierzchołki wielokąta do wypełnienia.</param>
        <param name="fillMode">Członek <see cref="T:System.Drawing.Drawing2D.FillMode" /> wyliczenie, które określa styl wypełnienia.</param>
        <summary>Wypełnia wnętrze wielokąta zdefiniowane przez tablicę o punktów <see cref="T:System.Drawing.PointF" /> struktury przy użyciu trybu określonego wypełnienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Co dwa kolejne punkty w tablicy Określ bok wielokąta. Ponadto jeśli ostatni punkt i pierwszy punkt nie pokrywają się, określają zamknięcia boku wielokąta.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny obiekt brush niebieski.  
  
-   Tworzy tablicę siedmiu punktów do definiowania wielokąta.  
  
-   Ustawia tryb wypełniania <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Wypełnia obszar wielokątne na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#110)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#110)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#110)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillRectangle">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wypełnia wewnętrznych określony przez parę współrzędne, szerokość i wysokość prostokąta.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * System.Drawing.Rectangle -&gt; unit" Usage="graphics.FillRectangle (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa właściwości wypełnienia.</param>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, która reprezentuje prostokąta do wypełnienia.</param>
        <summary>Wypełnia wewnętrznych prostokąt określony przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełni wewnętrznych prostokąta zdefiniowanego przez `rect` parametru, w tym określonym lewym górnym rogu i maksymalnie obliczony obniżyć dolnej krawędzi.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny obiekt brush niebieski.  
  
-   Tworzy prostokąt.  
  
-   Wypełnia prostokątny obszar, na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#111)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#111)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#111)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * System.Drawing.RectangleF -&gt; unit" Usage="graphics.FillRectangle (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa właściwości wypełnienia.</param>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która reprezentuje prostokąta do wypełnienia.</param>
        <summary>Wypełnia wewnętrznych prostokąt określony przez <see cref="T:System.Drawing.RectangleF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełni wewnętrznych prostokąta zdefiniowanego przez `rect` parametru, w tym określonym lewym górnym rogu i maksymalnie obliczony obniżyć dolnej krawędzi.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny obiekt brush niebieski.  
  
-   Tworzy prostokąt.  
  
-   Wypełnia prostokątny obszar, na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#112)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#112)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#112)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * int * int * int * int -&gt; unit" Usage="graphics.FillRectangle (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa właściwości wypełnienia.</param>
        <param name="x">Współrzędna x lewego górnego rogu prostokąta do wypełnienia.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąta do wypełnienia.</param>
        <param name="width">Szerokość krawędzi prostokąta do wypełnienia.</param>
        <param name="height">Wysokość prostokąta, aby wypełnić.</param>
        <summary>Wypełnia wewnętrznych określony przez parę współrzędne, szerokość i wysokość prostokąta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełni wewnętrznych prostokąta zdefiniowanego przez`x`, `y`, `width`, i `height` parametry, włącznie z określonym lewego górnego rogu maksymalnie obliczony obniżyć i dolną krawędzią.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny obiekt brush niebieski.  
  
-   Tworzy, lokalizacja i rozmiar prostokąta.  
  
-   Wypełnia prostokątny obszar, na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#113)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#113)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#113)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * single * single * single * single -&gt; unit" Usage="graphics.FillRectangle (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa właściwości wypełnienia.</param>
        <param name="x">Współrzędna x lewego górnego rogu prostokąta do wypełnienia.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąta do wypełnienia.</param>
        <param name="width">Szerokość krawędzi prostokąta do wypełnienia.</param>
        <param name="height">Wysokość prostokąta, aby wypełnić.</param>
        <summary>Wypełnia wewnętrznych określony przez parę współrzędne, szerokość i wysokość prostokąta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełni wewnętrznych prostokąta zdefiniowanego przez `x`, `y`, `width`, i `height` parametry, włącznie z określonym lewego górnego rogu maksymalnie obliczony obniżyć i dolną krawędzią.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny obiekt brush niebieski.  
  
-   Tworzy, lokalizacja i rozmiar prostokąta.  
  
-   Wypełnia prostokątny obszar, na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#114)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#114)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#114)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillRectangles">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wypełnia wnętrza szereg prostokąty określony przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillRectangles">
      <MemberSignature Language="C#" Value="public void FillRectangles (System.Drawing.Brush brush, System.Drawing.Rectangle[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangles(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.Rectangle[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangles(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Rectangle&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.FillRectangles : System.Drawing.Brush * System.Drawing.Rectangle[] -&gt; unit" Usage="graphics.FillRectangles (brush, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rects" Type="System.Drawing.Rectangle[]" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa właściwości wypełnienia.</param>
        <param name="rects">Tablica <see cref="T:System.Drawing.Rectangle" /> struktur, które reprezentują prostokątach, aby go wypełnić.</param>
        <summary>Wypełnia wnętrza szereg prostokąty określony przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny obiekt brush niebieski.  
  
-   Tworzy tablicę o trzy prostokąty.  
  
-   Wprowadza trzy obszary prostokątne na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#115)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#115)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#115)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="rects" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="rects" /> jest tablicą o zerowej długości.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangles">
      <MemberSignature Language="C#" Value="public void FillRectangles (System.Drawing.Brush brush, System.Drawing.RectangleF[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangles(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.RectangleF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangles(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::RectangleF&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.FillRectangles : System.Drawing.Brush * System.Drawing.RectangleF[] -&gt; unit" Usage="graphics.FillRectangles (brush, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rects" Type="System.Drawing.RectangleF[]" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa właściwości wypełnienia.</param>
        <param name="rects">Tablica <see cref="T:System.Drawing.RectangleF" /> struktur, które reprezentują prostokątach, aby go wypełnić.</param>
        <summary>Wypełnia wnętrza szereg prostokąty określony przez <see cref="T:System.Drawing.RectangleF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny obiekt brush niebieski.  
  
-   Tworzy tablicę o trzy prostokąty.  
  
-   Wprowadza trzy obszary prostokątne na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#116)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#116)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#116)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="rects" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Rects" /> jest tablicą o zerowej długości.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRegion">
      <MemberSignature Language="C#" Value="public void FillRegion (System.Drawing.Brush brush, System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRegion(class System.Drawing.Brush brush, class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRegion(System.Drawing.Brush,System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRegion(System::Drawing::Brush ^ brush, System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.FillRegion : System.Drawing.Brush * System.Drawing.Region -&gt; unit" Usage="graphics.FillRegion (brush, region)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="brush">
          <see cref="T:System.Drawing.Brush" /> który określa właściwości wypełnienia.</param>
        <param name="region">
          <see cref="T:System.Drawing.Region" /> który reprezentuje obszar, aby wypełnić.</param>
        <summary>Wypełnia wnętrza <see cref="T:System.Drawing.Region" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Drawing.Region> składa się z prostokąty i ścieżki. Jeśli region nie jest zamknięty, dodatkowe segmentu, jest on dodawany z ostatniego punktu pierwszego punktu, aby je zamknąć.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny obiekt brush niebieski.  
  
-   Tworzy prostokąt.  
  
-   Tworzy prostokątny obszar.  
  
-   Wypełnia prostokątny obszar, na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#117)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#117)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#117)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="region" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Graphics ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Graphics ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="graphics.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Umożliwia obiektu spróbuj zwolnić zasoby i wykonywać inne operacje oczyszczania, zanim go jest odzyskiwane przez wyrzucanie elementów bezużytecznych.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Flush">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wymusza wykonanie wszystkie oczekujące operacje graficzne i zwraca natychmiast bez oczekiwania na zakończenie operacji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="graphics.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wymusza wykonanie wszystkie oczekujące operacje graficzne i zwraca natychmiast bez oczekiwania na zakończenie operacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rozpoczyna się opróżnienie i zwraca natychmiast bez oczekiwania na wszystkie aktualnie wykonywanej na zakończenie operacji graficznych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush (System.Drawing.Drawing2D.FlushIntention intention);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush(valuetype System.Drawing.Drawing2D.FlushIntention intention) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Flush(System.Drawing.Drawing2D.FlushIntention)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush (intention As FlushIntention)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush(System::Drawing::Drawing2D::FlushIntention intention);" />
      <MemberSignature Language="F#" Value="member this.Flush : System.Drawing.Drawing2D.FlushIntention -&gt; unit" Usage="graphics.Flush intention" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intention" Type="System.Drawing.Drawing2D.FlushIntention" />
      </Parameters>
      <Docs>
        <param name="intention">Członek <see cref="T:System.Drawing.Drawing2D.FlushIntention" /> wyliczenie, które określa, czy metoda zwraca natychmiast czeka, aż wszystkie istniejące operacje zakończyć.</param>
        <summary>Wymusza wykonanie wszystkich oczekujących operacji grafiki przy użyciu metody oczekiwania lub nie jest oczekiwane, jak określono do zwrócenia przed zakończenie operacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Drawing.Drawing2D.FlushIntention.Flush> dla `intention` parametr określa, że metoda zwraca natychmiast, po rozpoczęciu flush, podczas wartość <xref:System.Drawing.Drawing2D.FlushIntention.Sync> Określa, że metoda czekać przed zwróceniem aż do zakończenia wszystkich istniejących operacji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromHdc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy nową <see cref="T:System.Drawing.Graphics" /> z określone dojście do kontekstu urządzenia.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdc(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdc (hdc As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdc(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="static member FromHdc : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHdc hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Dojście do kontekstu urządzenia.</param>
        <summary>Tworzy nową <see cref="T:System.Drawing.Graphics" /> z określone dojście do kontekstu urządzenia.</summary>
        <returns>Ta metoda zwraca nowy <see cref="T:System.Drawing.Graphics" /> dla kontekstu określonego urządzenia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zawsze powinna wywołać <xref:System.Drawing.Graphics.Dispose%2A> metodę, aby zwolnić <xref:System.Drawing.Graphics> i powiązane zasoby utworzone w ramach <xref:System.Drawing.Graphics.FromHdc%2A> metody.  
  
 Nawet jeśli urządzenia wyświetlającego ma skojarzony profil kolorów ICM [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] domyślnie nie będzie używać tego profilu. Aby włączyć ICM dla <xref:System.Drawing.Graphics>, konstruowania <xref:System.Drawing.Graphics> z elementu HDC po przejściu z elementu HDC (i ICM_ON) do `SetICMMode` funkcji. Następnie dowolnego rysunku, wykonywane przez <xref:System.Drawing.Graphics> zostaną dostosowane zgodnie z profilem ICM skojarzone z urządzenia. Włączanie ICM spowoduje mniejszą wydajność.  
  
 Stan kontekstu urządzenia (tryb mapowania, jednostkę logiczną i podobne) w czasie, należy wywołać <xref:System.Drawing.Graphics.FromHdc%2A> mogą wpływać na renderowanie, wykonywane przez <xref:System.Drawing.Graphics>.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy zmienną typu wskaźnik wewnętrzny `hdc` i ustawia ją na dojście do kontekstu urządzenia grafiki obiektu formularza.  
  
-   Tworzy nowy obiekt graficzne, przy użyciu `hdc`.  
  
-   Rysuje prostokąt przy użyciu nowego obiektu grafiki (na ekranie).  
  
-   Zwalnia nowej grafiki obiektu za pomocą `hdc`.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#118)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#118)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#118)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdc (IntPtr hdc, IntPtr hdevice);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdc(native int hdc, native int hdevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdc(System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdc (hdc As IntPtr, hdevice As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdc(IntPtr hdc, IntPtr hdevice);" />
      <MemberSignature Language="F#" Value="static member FromHdc : nativeint * nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHdc (hdc, hdevice)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
        <Parameter Name="hdevice" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Dojście do kontekstu urządzenia.</param>
        <param name="hdevice">Dojście do urządzenia.</param>
        <summary>Tworzy nową <see cref="T:System.Drawing.Graphics" /> z określone dojście do kontekstu urządzenia i dojścia do urządzenia.</summary>
        <returns>Ta metoda zwraca nowy <see cref="T:System.Drawing.Graphics" /> dla kontekstu określonego urządzenia i urządzenia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zawsze powinna wywołać <xref:System.Drawing.Graphics.Dispose%2A> metodę, aby zwolnić <xref:System.Drawing.Graphics> i powiązane zasoby utworzone w ramach <xref:System.Drawing.Graphics.FromHdc%2A> metody.  
  
 Nawet jeśli urządzenia wyświetlającego ma skojarzony profil kolorów ICM [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] domyślnie nie będzie używać tego profilu. Aby włączyć ICM dla <xref:System.Drawing.Graphics>, konstruowania <xref:System.Drawing.Graphics> z elementu HDC po przejściu z elementu HDC (i ICM_ON) do `SetICMMode` funkcji. Następnie dowolnego rysunku, wykonywane przez <xref:System.Drawing.Graphics> zostaną dostosowane zgodnie z profilem ICM skojarzone z urządzenia. Włączanie ICM spowoduje mniejszą wydajność.  
  
 Stan kontekstu urządzenia (tryb mapowania, jednostkę logiczną i podobne) w czasie, należy wywołać <xref:System.Drawing.Graphics.FromHdc%2A> mogą wpływać na renderowanie, wykonywane przez <xref:System.Drawing.Graphics>.  
  
 Dojście do urządzenia jest zazwyczaj używany do możliwości określonej drukarki zapytań.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać dostęp do kodu niezarządzanego. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="FromHdcInternal">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdcInternal (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdcInternal(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdcInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdcInternal (hdc As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdcInternal(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="static member FromHdcInternal : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHdcInternal hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Dojście do kontekstu urządzenia.</param>
        <summary>Zwraca <see cref="T:System.Drawing.Graphics" /> dla kontekstu określonego urządzenia.</summary>
        <returns>Element <see cref="T:System.Drawing.Graphics" /> dla kontekstu określonego urządzenia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można używać tej metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHwnd">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHwnd (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHwnd(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHwnd(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHwnd (hwnd As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHwnd(IntPtr hwnd);" />
      <MemberSignature Language="F#" Value="static member FromHwnd : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHwnd hwnd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">Dojście do okna.</param>
        <summary>Tworzy nową <see cref="T:System.Drawing.Graphics" /> określonego dojścia do okna.</summary>
        <returns>Ta metoda zwraca nowy <see cref="T:System.Drawing.Graphics" /> dla określony uchwyt okna.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zawsze powinna wywołać <xref:System.Drawing.Graphics.Dispose%2A> metodę, aby zwolnić <xref:System.Drawing.Graphics> i powiązane zasoby utworzone w ramach <xref:System.Drawing.Graphics.FromHwnd%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń oraz `thisForm`, <xref:System.Windows.Forms.Form> dla przykładu. Kod wykonuje następujące czynności:  
  
-   Tworzy nową zmienną wewnętrzny wskaźnik `hwnd` i ustawia ją na uchwyt formularza omawianego w przykładzie.  
  
-   Tworzy nową <xref:System.Drawing.Graphics> z uchwytu.  
  
-   Rysuje prostokąt do nowego <xref:System.Drawing.Graphics> za pomocą czerwonego pióra.  
  
-   Usuwa nową <xref:System.Drawing.Graphics>.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#119)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#119)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#119)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać dostęp do kodu niezarządzanego. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="FromHwndInternal">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHwndInternal (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHwndInternal(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHwndInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHwndInternal (hwnd As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHwndInternal(IntPtr hwnd);" />
      <MemberSignature Language="F#" Value="static member FromHwndInternal : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHwndInternal hwnd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">Dojście do okna.</param>
        <summary>Tworzy nową <see cref="T:System.Drawing.Graphics" /> dla określonego okna obsługi.</summary>
        <returns>Element <see cref="T:System.Drawing.Graphics" /> dla określony uchwyt okna.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można używać tej metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromImage">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromImage (System.Drawing.Image image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromImage(class System.Drawing.Image image) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromImage(System.Drawing.Image)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromImage(System::Drawing::Image ^ image);" />
      <MemberSignature Language="F#" Value="static member FromImage : System.Drawing.Image -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromImage image" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> z której chcesz utworzyć nowy <see cref="T:System.Drawing.Graphics" />.</param>
        <summary>Tworzy nową <see cref="T:System.Drawing.Graphics" /> z określonego <see cref="T:System.Drawing.Image" />.</summary>
        <returns>Ta metoda zwraca nowy <see cref="T:System.Drawing.Graphics" /> dla określonego <see cref="T:System.Drawing.Image" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli obraz ma na format indeksowanych pikseli, ta metoda zgłasza wyjątek z komunikatem, "nie można utworzyć obiektu grafiki z obrazu, który ma na format indeksowanych pikseli." W poniższej liście przedstawiono formaty indeksowanych pikseli.  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format1bppIndexed>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format4bppIndexed>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format8bppIndexed>  
  
 Zaindeksowanego obrazu można zapisać jako inny format za pomocą <xref:System.Drawing.Image.Save%28System.String%2CSystem.Drawing.Imaging.ImageFormat%29> metody, a następnie pobrać <xref:System.Drawing.Graphics> obiektu dla nowego obrazu.  
  
 Ta metoda również zgłasza wyjątek, jeśli obraz zawiera dowolny z następujących formatów pikseli.  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Undefined>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.DontCare>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format16bppArgb1555>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale>  
  
 Zawsze powinna wywołać <xref:System.Drawing.Graphics.Dispose%2A> metodę, aby zwolnić <xref:System.Drawing.Graphics> i powiązane zasoby utworzone w ramach <xref:System.Drawing.Graphics.FromImage%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy <xref:System.Drawing.Image> z grafiki plik SampImag.jpg przykładowy folder.  
  
-   Tworzy <xref:System.Drawing.Graphics> z <xref:System.Drawing.Image>.  
  
-   Zmienia obrazu, wypełniając prostokąt znajdujący się w nim.  
  
-   Rysuje <xref:System.Drawing.Image> do ekranu.  
  
-   Zwalnia utworzony <xref:System.Drawing.Graphics>.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#120)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#120)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.Exception">
          <paramref name="image" /> ma format indeksowanych pikseli lub jego format jest niezdefiniowany.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/737bae30-e599-4e1d-bf30-bab8280b32be">Porady: tworzenie mapy bitowej w czasie wykonywania</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a626d701-bd99-4fd8-b92f-7b8f794e042b">Praca z obrazami, mapami bitowymi, ikonami i metaplikami</related>
        <related type="Article" href="https://msdn.microsoft.com/library/162861f9-f050-445e-8abb-b2c43a918b8b">Porady: tworzenie obiektów graficznych do rysowania</related>
      </Docs>
    </Member>
    <Member MemberName="GetContextInfo">
      <MemberSignature Language="C#" Value="public object GetContextInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetContextInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetContextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContextInfo () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetContextInfo();" />
      <MemberSignature Language="F#" Value="member this.GetContextInfo : unit -&gt; obj" Usage="graphics.GetContextInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera kontekst zbiorczą grafiki.</summary>
        <returns>
          <see cref="T:System.Object" /> Reprezentującą kontekst zbiorczą grafiki.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest Tablica obiektów, gdzie pierwszy element zawiera obszar skumulowany przycinania, a drugi element macierzy tłumaczenie/Przekształcanie zbiorczej.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHalftonePalette">
      <MemberSignature Language="C#" Value="public static IntPtr GetHalftonePalette ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetHalftonePalette() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetHalftonePalette" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHalftonePalette () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetHalftonePalette();" />
      <MemberSignature Language="F#" Value="static member GetHalftonePalette : unit -&gt; nativeint" Usage="System.Drawing.Graphics.GetHalftonePalette " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera uchwyt do bieżącej palecie półtonów Windows.</summary>
        <returns>Wewnętrzny wskaźnik określający dojście do palety.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Celem <xref:System.Drawing.Graphics.GetHalftonePalette%2A> metody jest umożliwienie [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] umożliwia utworzenie lepsze półtonów jakości, podczas wyświetlania używa 8 bitów na piksel. Aby wyświetlić obraz korzystanie z palety półtonów, należy użyć następującej procedury.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Definiuje współdziałanie <xref:System.Runtime.InteropServices.DllImportAttribute> atrybuty dla Windows DLL gdi32.dll pliku, który zawiera niezbędne [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] funkcji.  
  
-   Definiuje `SelectPalette` i `RealizePalette` funkcje w tej bibliotece DLL jako zewnętrzne.  
  
-   Tworzy obraz na podstawie istniejącego pliku obrazu SampImag.jpg (który musi być w tym samym folderze co plik kodu przykładzie) i rysuje obraz do ekranu.  
  
-   Tworzy zmienne typu wskaźnika wewnętrznego i ustawia wartości uchwytu do obiektu grafiki i bieżącej palecie półtonów Windows, odpowiednio.  
  
-   Wybiera i zdaje sobie sprawę z palety półtonów.  
  
-   Tworzy nowy obiekt graficzne, przy użyciu `hdc` parametru.  
  
-   Rysuje obraz ponownie.  
  
-   Zwalnia dojścia do kontekstu urządzenia.  
  
 Wynik jest dwóch obrazkami przedstawiającymi przykładowy obraz: jeden z palety 16-bitowych i jeden z palety 8-bitową.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#121)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#121)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#121)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHdc">
      <MemberSignature Language="C#" Value="public IntPtr GetHdc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetHdc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetHdc" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHdc () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IntPtr GetHdc();" />
      <MemberSignature Language="F#" Value="abstract member GetHdc : unit -&gt; nativeint&#xA;override this.GetHdc : unit -&gt; nativeint" Usage="graphics.GetHdc " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Drawing.IDeviceContext.GetHdc</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera uchwyt do kontekstu urządzenia skojarzony z tym <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>Dojście do kontekstu urządzenia skojarzony z tym <see cref="T:System.Drawing.Graphics" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kontekst urządzenia to struktura Windows na podstawie [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] definiujący zestaw obiektów graficznych i ich skojarzonych z nimi atrybutów, a także graficzny tryby, które mają wpływ na dane wyjściowe. Ta metoda zwraca kontekst tego urządzenia, z wyjątkiem czcionki. Ponieważ nie wybrano czcionkę, wywołania <xref:System.Drawing.Font.FromHdc%2A> przy użyciu dojścia zwrócony z metody <xref:System.Drawing.Graphics.GetHdc%2A> metoda zakończy się niepowodzeniem.  
  
 Wywołania <xref:System.Drawing.Graphics.GetHdc%2A> i <xref:System.Drawing.Graphics.ReleaseHdc%2A> metody musi znajdować się w parach. W zakresie <xref:System.Drawing.Graphics.GetHdc%2A> i <xref:System.Drawing.Graphics.ReleaseHdc%2A> pary metod zwykle wprowadzeniu tylko wywołania [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] funkcji. Wywołuje się, że wprowadzone w zakresie [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] metody <xref:System.Drawing.Graphics> wytworzonego `hdc` parametru kończy się niepowodzeniem z `ObjectBusy` błędu. Ponadto [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] ignoruje wszelkie zmiany stanu <xref:System.Drawing.Graphics> z `hdc` parametru podczas kolejnych operacji.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. W przykładzie pokazano wywołanie Windows [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] funkcję, aby wykonać to samo zadanie [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> metody. Kod wykonuje następujące czynności:  
  
-   Definiuje interoperacyjności <xref:System.Runtime.InteropServices.DllImportAttribute> atrybut gdi32.dll pliku Windows DLL. Ta biblioteka DLL zawiera żądane [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] funkcji.  
  
-   Definiuje <xref:System.Drawing.Rectangle> funkcji w tej bibliotece DLL jako zewnętrzne.  
  
-   Tworzy Czerwone pióro.  
  
-   Za pomocą pióra, rysuje prostokąt na ekranie za pomocą [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics.DrawRectangle%2A> metody.  
  
-   Definiuje zmienną typu wskaźnik wewnętrzny `hdc` i ustawia dla niej wartość dojścia do kontekstu urządzenia formularza.  
  
-   Rysuje prostokąt na ekranie za pomocą [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <xref:System.Drawing.Rectangle> funkcji.  
  
-   Zwalnia reprezentowanej przez kontekst urządzenia `hdc` parametru.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#122)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#122)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#122)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać dostęp do kodu niezarządzanego. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetNearestColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color GetNearestColor (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Color GetNearestColor(valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetNearestColor(System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Color GetNearestColor(System::Drawing::Color color);" />
      <MemberSignature Language="F#" Value="member this.GetNearestColor : System.Drawing.Color -&gt; System.Drawing.Color" Usage="graphics.GetNearestColor color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color">
          <see cref="T:System.Drawing.Color" /> Struktura, dla którego w celu znalezienia dopasowania.</param>
        <summary>Pobiera kolor dokładnością do określonej <see cref="T:System.Drawing.Color" /> struktury.</summary>
        <returns>A <see cref="T:System.Drawing.Color" /> strukturę, która reprezentuje kolor dokładnością do określonej za pomocą <paramref name="color" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy dowolny kolor ARGB współrzędnych (255, 165, 63, 136).  
  
-   Tworzy pełny obiekt brush i ustawia jego kolor określony kolor.  
  
-   Wypełnia elipsę za pomocą dowolnego kolorów.  
  
-   Tworzy drugi kolor i ustawia jej wartość do najbliższej systemu ARGB kolorów.  
  
-   Wypełnia drugi elipsy przy użyciu tego koloru.  
  
 Wynik jest dwie elipsy: pierwszy narysować za pomocą dowolnego określonego koloru i drugi rysowane kolorem system najbliższym określonego koloru.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#123)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#123)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#123)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolationMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.InterpolationMode InterpolationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.InterpolationMode InterpolationMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.InterpolationMode" />
      <MemberSignature Language="VB.NET" Value="Public Property InterpolationMode As InterpolationMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::InterpolationMode InterpolationMode { System::Drawing::Drawing2D::InterpolationMode get(); void set(System::Drawing::Drawing2D::InterpolationMode value); };" />
      <MemberSignature Language="F#" Value="member this.InterpolationMode : System.Drawing.Drawing2D.InterpolationMode with get, set" Usage="System.Drawing.Graphics.InterpolationMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.InterpolationMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tryb interpolacji skojarzony z tym <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Jedną z <see cref="T:System.Drawing.Drawing2D.InterpolationMode" /> wartości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tryb interpolacji Określa, jak pośredni wartości między dwoma punktami końcowymi są obliczane.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IntersectClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aktualizuje region klipu <see cref="T:System.Drawing.Graphics" /> do przecięcia bieżący region klipu, a określony <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub IntersectClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.IntersectClip : System.Drawing.Rectangle -&gt; unit" Usage="graphics.IntersectClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura do przecięcia z bieżącego regionu klipu.</param>
        <summary>Aktualizuje region klipu <see cref="T:System.Drawing.Graphics" /> do przecięcia bieżący region klipu, a określony <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda przypisuje do <xref:System.Drawing.Graphics.Clip%2A> właściwość to <xref:System.Drawing.Graphics> obszaru, reprezentowane przez przecięcie bieżący region klipu i prostokąt określony przez `rect` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokąt, za pomocą lewego górnego rogu w (0, 0) i ustawia obszar przycinania na prostokąt.  
  
-   Tworzy prostokąt, drugi z lewego górnego rogu w (100, 100) i ustawia obszar przycinania na przecięciu prostokąt i bieżącego obszaru przycinania (pierwszy prostokąt).  
  
-   Wypełnia dużych prostokąt, który zawiera oba poprzedniego prostokąty z niebieskim pędzla.  
  
-   Resetuje obszaru przycinania nieskończone.  
  
-   Rysuje prostokąty wokół wycinka dwóch regionach. Czarne pióro używa pierwszego prostokątnego wycinka i czerwone pióro dla drugiego regionu wycinka.  
  
 Wynik jest tylko część wspólną dwóch prostokątów jest wypełniany niebieski.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#124)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#124)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#124)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub IntersectClip (rect As RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.IntersectClip : System.Drawing.RectangleF -&gt; unit" Usage="graphics.IntersectClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura do przecięcia z bieżącego regionu klipu.</param>
        <summary>Aktualizuje region klipu <see cref="T:System.Drawing.Graphics" /> do przecięcia bieżący region klipu, a określony <see cref="T:System.Drawing.RectangleF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda przypisuje do <xref:System.Drawing.Graphics.Clip%2A> właściwość to <xref:System.Drawing.Graphics> obszaru, reprezentowane przez przecięcie bieżący region klipu i prostokąt określony przez `rect` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokąt, za pomocą lewego górnego rogu w (0, 0) i ustawia obszar przycinania na prostokąt.  
  
-   Tworzy prostokąt, drugi z lewego górnego rogu w (100, 100) i ustawia obszar przycinania na przecięciu prostokąt i bieżącego obszaru przycinania (pierwszy prostokąt).  
  
-   Wypełnia dużych prostokąt, który zawiera oba poprzedniego prostokąty z niebieskim pędzla.  
  
-   Resetuje obszaru przycinania nieskończone.  
  
-   Rysuje prostokąty wokół wycinka dwóch regionach. Czarne pióro używa pierwszego prostokątnego wycinka i czerwone pióro dla drugiego regionu wycinka.  
  
 Wynik jest tylko część wspólną dwóch prostokątów jest wypełniany niebieski.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#125)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#125)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#125)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.IntersectClip : System.Drawing.Region -&gt; unit" Usage="graphics.IntersectClip region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region">
          <see cref="T:System.Drawing.Region" /> do przecięcia z bieżącym regionie.</param>
        <summary>Aktualizuje region klipu <see cref="T:System.Drawing.Graphics" /> do przecięcia bieżący region klipu, a określony <see cref="T:System.Drawing.Region" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda przypisuje do <xref:System.Drawing.Graphics.Clip%2A> właściwość to <xref:System.Drawing.Graphics> obszaru, reprezentowane przez przecięcie bieżący region klipu i region, w określonym przez `region` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokąt, za pomocą lewego górnego rogu w (0, 0).  
  
-   Tworzy obszar i ustawia ją na prostokąt i ustawia obszar przycinania do tego regionu.  
  
-   Tworzy prostokąt, drugi z lewego górnego rogu w (100, 100).  
  
-   Tworzy obszar i ustawia ją na drugim prostokąt i ustawia obszar przycinania na przecięciu ten region i bieżącego obszaru przycinania (pierwszy prostokąt) przy użyciu trybu łączenia <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Wypełnia dużych prostokąt, który zawiera oba regiony poprzedniego z niebieskim pędzla.  
  
-   Resetuje obszaru przycinania nieskończone.  
  
-   Rysuje prostokąty wokół wycinka dwóch regionach. Czarne pióro używa pierwszego obszaru przycinania i czerwone pióro dla drugiego regionu wycinka.  
  
 Wynik jest tylko część wspólną dwóch regionach jest wypełniany niebieski.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#126)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#126)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#126)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClipEmpty">
      <MemberSignature Language="C#" Value="public bool IsClipEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClipEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.IsClipEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClipEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClipEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClipEmpty : bool" Usage="System.Drawing.Graphics.IsClipEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą czy obszaru przycinania tego <see cref="T:System.Drawing.Graphics" /> jest pusty.</summary>
        <value>
          <see langword="true" /> Jeśli region wycinka <see cref="T:System.Drawing.Graphics" /> jest pusty; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsVisible">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wskazuje, czy określony przez parę współrzędnych punkt znajduje się w regionie widoczne klipu <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.Point -&gt; bool" Usage="graphics.IsVisible point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">
          <see cref="T:System.Drawing.Point" /> Struktura do testowania widoczności.</param>
        <summary>Wskazuje, czy określony <see cref="T:System.Drawing.Point" /> struktury znajduje się w regionie widoczne klipu <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          <see langword="true" /> Jeśli punkt określony przez <paramref name="point" /> parametr znajduje się w regionie widoczne klipu <see cref="T:System.Drawing.Graphics" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obszar prostokątnego wycinka i ustawia go jako obszaru przycinania dla formularza przy użyciu obiektu grafiki <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Tworzy dwa punkty: jeden wewnątrz obszaru przycinania, a drugi poza.  
  
-   Sprawdza każdy punktów widoczności i rysuje tylko widoczne z nich.  
  
 Wynikiem jest jeden mały czerwone kółko, który znajduje się w regionie klipu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#127)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#127)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#127)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.PointF)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (point As PointF) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::PointF point);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.PointF -&gt; bool" Usage="graphics.IsVisible point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="point">
          <see cref="T:System.Drawing.PointF" /> Struktura do testowania widoczności.</param>
        <summary>Wskazuje, czy określony <see cref="T:System.Drawing.PointF" /> struktury znajduje się w regionie widoczne klipu <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          <see langword="true" /> Jeśli punkt określony przez <paramref name="point" /> parametr znajduje się w regionie widoczne klipu <see cref="T:System.Drawing.Graphics" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obszar prostokątnego wycinka i ustawia go jako obszar przycinania grafiki za pomocą formularza <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Tworzy dwa punkty: jeden wewnątrz obszaru przycinania, a drugi poza.  
  
-   Sprawdza każdy punktów widoczności i rysuje tylko widoczne z nich.  
  
 Wynikiem jest jeden mały czerwone kółko, który znajduje się w regionie klipu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#128)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#128)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#128)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (rect As Rectangle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.Rectangle -&gt; bool" Usage="graphics.IsVisible rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura do testowania widoczności.</param>
        <summary>Wskazuje, czy prostokąt określony przez <see cref="T:System.Drawing.Rectangle" /> struktury znajduje się w regionie widoczne klipu <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          <see langword="true" /> Jeśli prostokąt określony przez <paramref name="rect" /> parametr znajduje się w regionie widoczne klipu <see cref="T:System.Drawing.Graphics" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obszar prostokątnego wycinka i ustawia go jako obszaru przycinania dla formularza przy użyciu obiektu grafiki <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Tworzy, lokalizacja i rozmiar dwoma prostokątami jeden wewnątrz obszaru przycinania, a drugi poza.  
  
-   Sprawdza każdy prostokąty widoczności i rysuje tylko widoczne z nich.  
  
 Wynikiem jest jeden niewielki prostokąt czerwony, który znajduje się w regionie klipu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#129)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#129)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#129)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (rect As RectangleF) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.RectangleF -&gt; bool" Usage="graphics.IsVisible rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura do testowania widoczności.</param>
        <summary>Wskazuje, czy prostokąt określony przez <see cref="T:System.Drawing.RectangleF" /> struktury znajduje się w regionie widoczne klipu <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          <see langword="true" /> Jeśli prostokąt określony przez <paramref name="rect" /> parametr znajduje się w regionie widoczne klipu <see cref="T:System.Drawing.Graphics" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obszar prostokątnego wycinka i ustawia go jako obszaru przycinania dla formularza przy użyciu obiektu grafiki <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Tworzy dwoma prostokątami: jeden wewnątrz obszaru przycinania, a drugi poza.  
  
-   Sprawdza każdy prostokąty widoczności i rysuje tylko widoczne z nich.  
  
 Wynikiem jest jeden niewielki prostokąt czerwony, który znajduje się w regionie klipu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#130)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#130)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#130)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Integer, y As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : int * int -&gt; bool" Usage="graphics.IsVisible (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Współrzędna x punktu do testowania widoczności.</param>
        <param name="y">Współrzędna y punktu do testowania widoczności.</param>
        <summary>Wskazuje, czy określony przez parę współrzędnych punkt znajduje się w regionie widoczne klipu <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          <see langword="true" /> Jeśli punkt zdefiniowana <paramref name="x" /> i <paramref name="y" /> parametry znajduje się w regionie widoczne klipu <see cref="T:System.Drawing.Graphics" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obszar prostokątnego wycinka i ustawia go jako obszaru przycinania dla formularza przy użyciu obiektu grafiki <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Tworzy dwa punkty: jeden wewnątrz obszaru przycinania, a drugi poza.  
  
-   Sprawdza każdy punktów widoczności i rysuje tylko widoczne z nich.  
  
 Wynikiem jest jeden mały czerwone kółko, który znajduje się w regionie klipu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#131)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#131)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Single, y As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(float x, float y);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : single * single -&gt; bool" Usage="graphics.IsVisible (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Współrzędna x punktu do testowania widoczności.</param>
        <param name="y">Współrzędna y punktu do testowania widoczności.</param>
        <summary>Wskazuje, czy określony przez parę współrzędnych punkt znajduje się w regionie widoczne klipu <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          <see langword="true" /> Jeśli punkt zdefiniowana <paramref name="x" /> i <paramref name="y" /> parametry znajduje się w regionie widoczne klipu <see cref="T:System.Drawing.Graphics" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obszar prostokątnego wycinka i ustawia go jako obszaru przycinania dla formularza przy użyciu obiektu grafiki <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Tworzy dwa punkty: jeden wewnątrz obszaru przycinania, a drugi poza.  
  
-   Sprawdza każdy punktów widoczności i rysuje tylko widoczne z nich.  
  
 Wynikiem jest jeden mały czerwone kółko, który znajduje się w regionie klipu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#133)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#133)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#133)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Integer, y As Integer, width As Integer, height As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : int * int * int * int -&gt; bool" Usage="graphics.IsVisible (x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Współrzędna x lewego górnego rogu prostokąta do testowania widoczności.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąta do testowania widoczności.</param>
        <param name="width">Szerokość krawędzi prostokąta do testowania widoczności.</param>
        <param name="height">Wysokość prostokąta, aby przetestować widoczności.</param>
        <summary>Wskazuje, czy prostokąt określony przez parę współrzędne, szerokość i wysokość znajduje się w regionie widoczne klipu <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          <see langword="true" /> Jeśli prostokąt określony przez <paramref name="x" />, <paramref name="y" />, <paramref name="width" />, i <paramref name="height" /> parametry znajduje się w regionie widoczne klipu <see cref="T:System.Drawing.Graphics" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obszar prostokątnego wycinka i ustawia go jako obszaru przycinania dla formularza przy użyciu obiektu grafiki <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Tworzy, lokalizacja i rozmiar dwoma prostokątami jeden wewnątrz obszaru przycinania, a drugi poza.  
  
-   Sprawdza każdy prostokąty widoczności i rysuje tylko widoczne z nich.  
  
 Wynikiem jest jeden niewielki prostokąt czerwony, który znajduje się w regionie klipu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#132)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#132)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#132)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Single, y As Single, width As Single, height As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : single * single * single * single -&gt; bool" Usage="graphics.IsVisible (x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Współrzędna x lewego górnego rogu prostokąta do testowania widoczności.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąta do testowania widoczności.</param>
        <param name="width">Szerokość krawędzi prostokąta do testowania widoczności.</param>
        <param name="height">Wysokość prostokąta, aby przetestować widoczności.</param>
        <summary>Wskazuje, czy prostokąt określony przez parę współrzędne, szerokość i wysokość znajduje się w regionie widoczne klipu <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          <see langword="true" /> Jeśli prostokąt określony przez <paramref name="x" />, <paramref name="y" />, <paramref name="width" />, i <paramref name="height" /> parametry znajduje się w regionie widoczne klipu <see cref="T:System.Drawing.Graphics" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obszar prostokątnego wycinka i ustawia go jako obszaru przycinania dla formularza przy użyciu obiektu grafiki <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Tworzy, lokalizacja i rozmiar dwoma prostokątami jeden wewnątrz obszaru przycinania, a drugi poza.  
  
-   Sprawdza każdy prostokąty widoczności i rysuje tylko widoczne z nich.  
  
 Wynikiem jest jeden niewielki prostokąt czerwony, który znajduje się w regionie klipu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#134)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#134)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#134)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleClipEmpty">
      <MemberSignature Language="C#" Value="public bool IsVisibleClipEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisibleClipEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.IsVisibleClipEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisibleClipEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisibleClipEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisibleClipEmpty : bool" Usage="System.Drawing.Graphics.IsVisibleClipEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą czy region widoczne wycinka <see cref="T:System.Drawing.Graphics" /> jest pusty.</summary>
        <value>
          <see langword="true" /> Jeśli widoczną część obszaru przycinania tego <see cref="T:System.Drawing.Graphics" /> jest pusty; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obszar przycinania widoczny jest częścią obszaru przycinania tego wspólną `Graphics` i obszaru przycinania okna.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCharacterRanges">
      <MemberSignature Language="C#" Value="public System.Drawing.Region[] MeasureCharacterRanges (string text, System.Drawing.Font font, System.Drawing.RectangleF layoutRect, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Region[] MeasureCharacterRanges(string text, class System.Drawing.Font font, valuetype System.Drawing.RectangleF layoutRect, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Drawing::Region ^&gt; ^ MeasureCharacterRanges(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::RectangleF layoutRect, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberSignature Language="F#" Value="member this.MeasureCharacterRanges : string * System.Drawing.Font * System.Drawing.RectangleF * System.Drawing.StringFormat -&gt; System.Drawing.Region[]" Usage="graphics.MeasureCharacterRanges (text, font, layoutRect, stringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Region[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do mierzenia.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> definiuje format tekstu w ciągu.</param>
        <param name="layoutRect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, która określa prostokąt układu parametrów.</param>
        <param name="stringFormat">
          <see cref="T:System.Drawing.StringFormat" /> reprezentujący informacje formatowania, takie jak odstępy, w ciągu.</param>
        <summary>Pobiera tablicę elementów <see cref="T:System.Drawing.Region" /> obiektów, z których każdy zakresem zakres pozycji znaku w ciągu określonego ciągu.</summary>
        <returns>Ta metoda zwraca tablicę <see cref="T:System.Drawing.Region" /> obiektów, z których każdy zakresem zakres pozycji znaku w ciągu określonego ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Regiony zwracanego przez tę metodę są zależne od rozdzielczości, więc może być niewielkie utratę dokładności, jeśli ciągi są zapisywane w metaplik w jednej rozdzielczości, a później odtworzyć w różnych rozdzielczości.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Ustawia ciąg "pierwszy i drugi-zakresami" i czcionki do wyświetlenia ciągu ("razy nowe Roman", 16 punktów).  
  
-   Zestawy znaków dwa zakresy w ciągu (informational słowa "First" i "").  
  
-   Tworzy prostokąt, w którym do wyświetlenia ciągu.  
  
-   Określa formatowanie ciągu ľ zakresy dwóch znaków włącznie.  
  
-   Rysuje ciąg do ekranu.  
  
-   Mierzy zakres znaków, określa prostokątami, które są powiązane z dwoma określonymi zakresami.  
  
-   Rysuje dwa prostokąty do ekranu.  
  
 Wynik jest wyświetlany ciąg z pierwszego zakresu ("First") jest ograniczany przez czerwony prostokąta oraz drugiego zakresu ("drugi") jest ograniczany przez niebieski prostokąt.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#135)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#135)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#135)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)" />
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MeasureString">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Mierzy określonego ciągu podczas rysowania z określonym <see cref="T:System.Drawing.Font" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do mierzenia.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> definiuje format tekstu w ciągu.</param>
        <summary>Mierzy określonego ciągu podczas rysowania z określonym <see cref="T:System.Drawing.Font" />.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.SizeF" /> strukturę, która reprezentuje rozmiar w jednostkach określonych <see cref="P:System.Drawing.Graphics.PageUnit" /> właściwość ciągu określonego przez <paramref name="text" /> parametru, zgodnie z <paramref name="font" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> Metoda zostało zaprojektowane w celu użycia z poszczególnych ciągów i zawierają niewielką ilość dodatkowego miejsca przed i po nim ciąg w sposób umożliwiający ich symbole. Ponadto <xref:System.Drawing.Graphics.DrawString%2A> metoda dopasowuje punkty symbol do optymalizacji jakości wyświetlania i może być wyświetlany ciąg jest mniejsza niż zgłoszony przez <xref:System.Drawing.Graphics.MeasureString%2A>. Aby uzyskać metryki odpowiednie dla ciągów sąsiadujących w układzie (na przykład podczas implementowania sformatowany tekst), użyj <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> metody lub jednego z <xref:System.Drawing.Graphics.MeasureString%2A> metody, które przyjmuje <xref:System.Drawing.StringFormat>i przekazać <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Upewnij się również, <xref:System.Drawing.Graphics.TextRenderingHint%2A> dla <xref:System.Drawing.Graphics> jest <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg do mierzenia.  
  
-   Tworzy obiekt czcionki i ustawia ją na Arial (16 punktów).  
  
-   Tworzy obiekt rozmiaru i używa go i obiektu czcionki do mierzenia rozmiar ciągu.  
  
-   Rysuje prostokąt czerwony, przy użyciu mierzonego rozmiar ciągu.  
  
-   Rysuje ciągu w rysowanym prostokąta.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#136)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#136)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#136)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Używanie czcionek i tekstu</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.SizeF -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, layoutArea)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do mierzenia.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> definiuje format tekstu w ciągu.</param>
        <param name="layoutArea">
          <see cref="T:System.Drawing.SizeF" /> Struktura, która określa obszar maksymalna układu tekstu.</param>
        <summary>Mierzy określonego ciągu podczas rysowania z określonym <see cref="T:System.Drawing.Font" /> wewnątrz obszaru określonego układu.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.SizeF" /> strukturę, która reprezentuje rozmiar w jednostkach określonych <see cref="P:System.Drawing.Graphics.PageUnit" /> właściwość ciągu określonego przez <paramref name="text" /> parametru, zgodnie z <paramref name="font" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> Metoda zostało zaprojektowane w celu użycia z poszczególnych ciągów i zawierają niewielką ilość dodatkowego miejsca przed i po nim ciąg w sposób umożliwiający ich symbole. Ponadto <xref:System.Drawing.Graphics.DrawString%2A> metoda dopasowuje punkty symbol do optymalizacji jakości wyświetlania i może być wyświetlany ciąg jest mniejsza niż zgłoszony przez <xref:System.Drawing.Graphics.MeasureString%2A>. Aby uzyskać metryki odpowiednie dla ciągów sąsiadujących w układzie (na przykład podczas implementowania sformatowany tekst), użyj <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> metody lub jednego z <xref:System.Drawing.Graphics.MeasureString%2A> metody, które przyjmuje <xref:System.Drawing.StringFormat>i przekazać <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Upewnij się również, <xref:System.Drawing.Graphics.TextRenderingHint%2A> dla <xref:System.Drawing.Graphics> jest <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg do mierzenia i obiektu czcionki ustawiony na Arial (16 punktów).  
  
-   Ustawia rozmiar maksymalny układ ciągu.  
  
-   Tworzy obiekt rozmiar i używa on obiektu czcionki i rozmiar maksymalny układu do mierzenia rozmiar ciągu.  
  
-   Rysuje prostokąt czerwony, przy użyciu mierzonego rozmiar ciągu.  
  
-   Rysuje ciągu w rysowanym prostokąta.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#138)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#138)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#138)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Używanie czcionek i tekstu</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, int32 width) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, int width);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * int -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, width)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="width" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do mierzenia.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> definiuje format ciągu.</param>
        <param name="width">Maksymalna szerokość ciągu w pikselach.</param>
        <summary>Mierzy określonego ciągu podczas rysowania z określonym <see cref="T:System.Drawing.Font" />.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.SizeF" /> strukturę, która reprezentuje rozmiar w jednostkach określonych <see cref="P:System.Drawing.Graphics.PageUnit" /> właściwość ciągu określonego w <paramref name="text" /> parametru, zgodnie z <paramref name="font" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `width` Parametr określa maksymalną wartość składnika szerokość zwracanego <xref:System.Drawing.SizeF> struktury (<xref:System.Drawing.SizeF.Width%2A>). Jeśli `width` parametru jest mniejszy niż rzeczywista szerokość ciągu zwracanego <xref:System.Drawing.SizeF.Width%2A> składnik jest obcinana do wartość reprezentująca maksymalną liczbę znaków, które zmieści się w obrębie określonej szerokości. Aby pomieścić cały ciąg zwrócony <xref:System.Drawing.SizeF.Height%2A> składnik jest dostosowywana do wartość, która umożliwia wyświetlanie ciąg z zawijanie znaków.  
  
 <xref:System.Drawing.Graphics.MeasureString%2A> Metoda zostało zaprojektowane w celu użycia z poszczególnych ciągów i zawierają niewielką ilość dodatkowego miejsca przed i po nim ciąg w sposób umożliwiający ich symbole. Ponadto <xref:System.Drawing.Graphics.DrawString%2A> metoda dopasowuje punkty symbol do optymalizacji jakości wyświetlania i może być wyświetlany ciąg jest mniejsza niż zgłoszony przez <xref:System.Drawing.Graphics.MeasureString%2A>. Aby uzyskać metryki odpowiednie dla ciągów sąsiadujących w układzie (na przykład podczas implementowania sformatowany tekst), użyj <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> metody lub jednego z <xref:System.Drawing.Graphics.MeasureString%2A> metody, które przyjmuje <xref:System.Drawing.StringFormat>i przekazać <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Upewnij się również, <xref:System.Drawing.Graphics.TextRenderingHint%2A> dla <xref:System.Drawing.Graphics> jest <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg do mierzenia i obiektu czcionki ustawiony na Arial (16 punktów).  
  
-   Ustawia maksymalną szerokość ciągu.  
  
-   Tworzy obiekt rozmiaru i używa on obiektu czcionki i szerokość maksymalna ciąg do mierzenia rozmiar ciągu.  
  
-   Rysuje prostokąt czerwony, przy użyciu mierzonego rozmiar ciągu.  
  
-   Rysuje ciągu w rysowanym prostokąta.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#141)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#141)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#141)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Używanie czcionek i tekstu</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.PointF origin, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.PointF origin, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::PointF origin, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.PointF * System.Drawing.StringFormat -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, origin, stringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="origin" Type="System.Drawing.PointF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do mierzenia.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> definiuje format tekstu w ciągu.</param>
        <param name="origin">
          <see cref="T:System.Drawing.PointF" /> Struktura, która reprezentuje lewym górnym rogu w ciągu.</param>
        <param name="stringFormat">
          <see cref="T:System.Drawing.StringFormat" /> reprezentujący informacje formatowania, takie jak odstępy, w ciągu.</param>
        <summary>Mierzy określonego ciągu podczas rysowania z określonym <see cref="T:System.Drawing.Font" /> i sformatowany przy użyciu określonego <see cref="T:System.Drawing.StringFormat" />.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.SizeF" /> strukturę, która reprezentuje rozmiar w jednostkach określonych <see cref="P:System.Drawing.Graphics.PageUnit" /> właściwość ciągu określonego przez <paramref name="text" /> parametru, zgodnie z <paramref name="font" /> parametru i <paramref name="stringFormat" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> Metoda zostało zaprojektowane w celu użycia z poszczególnych ciągów i zawierają niewielką ilość dodatkowego miejsca przed i po nim ciąg w sposób umożliwiający ich symbole. Ponadto <xref:System.Drawing.Graphics.DrawString%2A> metoda dopasowuje punkty symbol do optymalizacji jakości wyświetlania i może być wyświetlany ciąg jest mniejsza niż zgłoszony przez <xref:System.Drawing.Graphics.MeasureString%2A>. Aby uzyskać metryki odpowiednie dla ciągów sąsiadujących w układzie (na przykład podczas implementowania sformatowany tekst), użyj <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> metody lub jednego z <xref:System.Drawing.Graphics.MeasureString%2A> metody, które przyjmuje <xref:System.Drawing.StringFormat>i przekazać <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Upewnij się również, <xref:System.Drawing.Graphics.TextRenderingHint%2A> dla <xref:System.Drawing.Graphics> jest <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg do mierzenia i obiektu czcionki ustawiony na Arial (16 punktów)  
  
-   Tworzy punkt do zlokalizowania w lewym górnym rogu ciągu.  
  
-   Tworzy obiekt ciągu formatu i ustawia jego flagi formatu <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  
  
-   Tworzy obiekt rozmiar, aby zmierzyć ten ciąg.  
  
-   Mierzy rozmiar ciągu, przy użyciu ciągu, obiekt czcionki, lokalizowania punktów i format ciągu.  
  
-   Rysuje prostokąt czerwony, przy użyciu punktu lokalizowania i mierzonego rozmiar ciągu.  
  
-   Rysuje ciągu w rysowanym prostokąta.  
  
 Wynik jest pionowy prostokąt otaczający pionowy ciągu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#137)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#137)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#137)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Używanie czcionek i tekstu</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.SizeF * System.Drawing.StringFormat -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, layoutArea, stringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do mierzenia.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> definiuje format tekstu w ciągu.</param>
        <param name="layoutArea">
          <see cref="T:System.Drawing.SizeF" /> Struktura, która określa obszar maksymalna układu tekstu.</param>
        <param name="stringFormat">
          <see cref="T:System.Drawing.StringFormat" /> reprezentujący informacje formatowania, takie jak odstępy, w ciągu.</param>
        <summary>Mierzy określonego ciągu podczas rysowania z określonym <see cref="T:System.Drawing.Font" /> i sformatowany przy użyciu określonego <see cref="T:System.Drawing.StringFormat" />.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.SizeF" /> strukturę, która reprezentuje rozmiar w jednostkach określonych <see cref="P:System.Drawing.Graphics.PageUnit" /> właściwość ciągu określonego w <paramref name="text" /> parametru, zgodnie z <paramref name="font" /> parametru i <paramref name="stringFormat" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> Metoda zostało zaprojektowane w celu użycia z poszczególnych ciągów i zawierają niewielką ilość dodatkowego miejsca przed i po nim ciąg w sposób umożliwiający ich symbole. Ponadto <xref:System.Drawing.Graphics.DrawString%2A> metoda dopasowuje punkty symbol do optymalizacji jakości wyświetlania i może być wyświetlany ciąg jest mniejsza niż zgłoszony przez <xref:System.Drawing.Graphics.MeasureString%2A>. Aby uzyskać metryki odpowiednie dla ciągów sąsiadujących w układzie (na przykład podczas implementowania sformatowany tekst), użyj <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> metody lub jednego z <xref:System.Drawing.Graphics.MeasureString%2A> metody, które przyjmuje <xref:System.Drawing.StringFormat>i przekazać <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Upewnij się również, <xref:System.Drawing.Graphics.TextRenderingHint%2A> dla <xref:System.Drawing.Graphics> jest <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg do mierzenia i obiektu czcionki ustawiony na Arial (16 punktów).  
  
-   Ustawia rozmiar maksymalny układ ciągu, tworzenie obiektu rozmiar do mierzenia ciągu.  
  
-   Tworzy obiekt ciągu formatu i ustawia jego flagi formatu <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  
  
-   Mierzy rozmiar ciągu, przy użyciu ciągu, obiekt czcionkę, rozmiar maksymalny układ i format ciągu.  
  
-   Rysuje prostokąt czerwony, przy użyciu mierzonego rozmiar ciągu.  
  
-   Rysuje ciągu w rysowanym prostokąta.  
  
 Wynik jest pionowy prostokąt otaczający pionowy ciągu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#139)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#139)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#139)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Używanie czcionek i tekstu</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, int32 width, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, int width, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * int * System.Drawing.StringFormat -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, width, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do mierzenia.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> definiuje format tekstu w ciągu.</param>
        <param name="width">Maksymalna szerokość ciągu.</param>
        <param name="format">
          <see cref="T:System.Drawing.StringFormat" /> reprezentujący informacje formatowania, takie jak odstępy, w ciągu.</param>
        <summary>Mierzy określonego ciągu podczas rysowania z określonym <see cref="T:System.Drawing.Font" /> i sformatowany przy użyciu określonego <see cref="T:System.Drawing.StringFormat" />.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.SizeF" /> strukturę, która reprezentuje rozmiar w jednostkach określonych <see cref="P:System.Drawing.Graphics.PageUnit" /> właściwość ciągu określonego w <paramref name="text" /> parametru, zgodnie z <paramref name="font" /> parametru i <paramref name="stringFormat" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> Metoda zostało zaprojektowane w celu użycia z poszczególnych ciągów i zawierają niewielką ilość dodatkowego miejsca przed i po nim ciąg w sposób umożliwiający ich symbole. Ponadto <xref:System.Drawing.Graphics.DrawString%2A> metoda dopasowuje punkty symbol do optymalizacji jakości wyświetlania i może być wyświetlany ciąg jest mniejsza niż zgłoszony przez <xref:System.Drawing.Graphics.MeasureString%2A>. Aby uzyskać metryki odpowiednie dla ciągów sąsiadujących w układzie (na przykład podczas implementowania sformatowany tekst), użyj <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> metody lub jednego z <xref:System.Drawing.Graphics.MeasureString%2A> metody, które przyjmuje <xref:System.Drawing.StringFormat>i przekazać <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Upewnij się również, <xref:System.Drawing.Graphics.TextRenderingHint%2A> dla <xref:System.Drawing.Graphics> jest <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg do mierzenia i czcionki obiektu ustaw ją na Arial (16 punktów).  
  
-   Ustawia maksymalną szerokość ciągu.  
  
-   Tworzy obiekt ciągu formatu i ustawia jego flagi formatu <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  
  
-   Tworzy obiekt rozmiar, aby zmierzyć ten ciąg.  
  
-   Mierzy rozmiar ciągu, przy użyciu ciągu, obiekt czcionki, maksymalną szerokość i format ciągu.  
  
-   Rysuje prostokąt czerwony, przy użyciu mierzonego rozmiar ciągu.  
  
-   Rysuje ciągu w rysowanym prostokąta.  
  
 Wynik jest pionowy prostokąt otaczający pionowy ciągu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#142)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#142)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#142)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Używanie czcionek i tekstu</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat, out int charactersFitted, out int linesFilled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea, class System.Drawing.StringFormat stringFormat, [out] int32&amp; charactersFitted, [out] int32&amp; linesFilled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat,System.Int32@,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea, System::Drawing::StringFormat ^ stringFormat, [Runtime::InteropServices::Out] int % charactersFitted, [Runtime::InteropServices::Out] int % linesFilled);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.SizeF * System.Drawing.StringFormat *  *  -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, layoutArea, stringFormat, charactersFitted, linesFilled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
        <Parameter Name="charactersFitted" Type="System.Int32" RefType="out" />
        <Parameter Name="linesFilled" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do mierzenia.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> definiuje format tekstu w ciągu.</param>
        <param name="layoutArea">
          <see cref="T:System.Drawing.SizeF" /> Struktura, która określa obszar maksymalna układu tekstu.</param>
        <param name="stringFormat">
          <see cref="T:System.Drawing.StringFormat" /> reprezentujący informacje formatowania, takie jak odstępy, w ciągu.</param>
        <param name="charactersFitted">Liczba znaków w ciągu.</param>
        <param name="linesFilled">Liczba wierszy tekstu w ciągu.</param>
        <summary>Mierzy określonego ciągu podczas rysowania z określonym <see cref="T:System.Drawing.Font" /> i sformatowany przy użyciu określonego <see cref="T:System.Drawing.StringFormat" />.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.SizeF" /> strukturę, która reprezentuje rozmiar ciągu w jednostkach określonych <see cref="P:System.Drawing.Graphics.PageUnit" /> właściwości z <paramref name="text" /> parametru, zgodnie z <paramref name="font" /> parametru i <paramref name="stringFormat" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> Metoda zostało zaprojektowane w celu użycia z poszczególnych ciągów i zawierają niewielką ilość dodatkowego miejsca przed i po nim ciąg w sposób umożliwiający ich symbole. Ponadto <xref:System.Drawing.Graphics.DrawString%2A> metoda dopasowuje punkty symbol do optymalizacji jakości wyświetlania i może być wyświetlany ciąg jest mniejsza niż zgłoszony przez <xref:System.Drawing.Graphics.MeasureString%2A>. Aby uzyskać metryki odpowiednie dla ciągów sąsiadujących w układzie (na przykład podczas implementowania sformatowany tekst), użyj <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> metody lub jednego z <xref:System.Drawing.Graphics.MeasureString%2A> metody, które przyjmuje <xref:System.Drawing.StringFormat> i przekazać <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Upewnij się również <xref:System.Drawing.Graphics.TextRenderingHint%2A> dla <xref:System.Drawing.Graphics> jest <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg do mierzenia i obiektu czcionki ustawiony na Arial (16 punktów)  
  
-   Ustawia rozmiar maksymalny układ ciągu.  
  
-   Tworzy obiekt ciągu formatu i ustawia jego flagi formatu <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  
  
-   Tworzy zmiennych całkowitych `charactersFitted` i `linesFilled` i rozmiar obiektu do mierzenia ciągu.  
  
-   Mierzy rozmiar ciągu i określa liczbę znaków, zainstalowane i wiersze wypełnione, przy użyciu ciągu, obiekt czcionkę, rozmiar maksymalny układ i format ciągu.  
  
-   Rysuje prostokąt czerwony, przy użyciu mierzonego rozmiar ciągu.  
  
-   Rysuje ciągu w rysowanym prostokąta.  
  
-   Rysuje wartości liczby znaków zainstalowane i wypełnione wiersze.  
  
 Wynik jest pionowy prostokąt otaczający pionowy ciągu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#140)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#140)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#140)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Używanie czcionek i tekstu</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Mnoży Przekształcanie świata <see cref="T:System.Drawing.Graphics" /> i określić <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix);" />
      <MemberSignature Language="F#" Value="member this.MultiplyTransform : System.Drawing.Drawing2D.Matrix -&gt; unit" Usage="graphics.MultiplyTransform matrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">4 x 4 <see cref="T:System.Drawing.Drawing2D.Matrix" /> , mnoży transformacji świata.</param>
        <summary>Mnoży Przekształcanie świata <see cref="T:System.Drawing.Graphics" /> i określić <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda dołącza macierzy, określony przez `matrix` parametru, więc, że wynik jest `matrix` x transformacji świata.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy `transformMatrix` macierzy (dwa przez dwa macierz tożsamości, a także wektor tłumaczenia zero).  
  
-   Tłumaczy macierzy transformacji wektor (200, 100).  
  
-   Obraca macierzy transformacji świata formularza Windows przez 30, degrees, dołącza macierzy obrotu 30 stopni macierzy transformacji formularza.  
  
-   Mnoży macierzy transformacji świata obrócony przez przetłumaczone `transformMatrix`i dołącza `transformMatrix` do macierzy transformacji świata.  
  
-   Rysuje elipsę obrócony, tłumaczenia.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#143)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#143)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#143)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/0659fe00-9e0c-41c4-9118-016f2404c905">Macierzowe przedstawienie przekształcenia</related>
      </Docs>
    </Member>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.MultiplyTransform : System.Drawing.Drawing2D.Matrix * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.MultiplyTransform (matrix, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="matrix">4 x 4 <see cref="T:System.Drawing.Drawing2D.Matrix" /> , mnoży transformacji świata.</param>
        <param name="order">Członek <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> wyliczenia, która określa kolejność mnożenia.</param>
        <summary>Mnoży Przekształcanie świata <see cref="T:System.Drawing.Graphics" /> i określić <see cref="T:System.Drawing.Drawing2D.Matrix" /> w określonej kolejności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Drawing.Drawing2D.MatrixOrder.Prepend> dla `order` parametr określa, że kolejność mnożenia `matrix` x transformacji świata. Wartość <xref:System.Drawing.Drawing2D.MatrixOrder.Append> dla `order` Określa, że kolejność mnożenia transformacji świata x `matrix`.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy `transformMatrix` macierzy (dwa przez dwa macierz tożsamości, a także wektor tłumaczenia zero).  
  
-   Tłumaczy macierzy transformacji wektor (200, 100).  
  
-   Obraca macierzy transformacji świata formularza Windows przez 30 stopni, dołączenie macierzy obrotu 30 stopni macierzy transformacji formularza.  
  
-   Mnoży macierzy transformacji świata obrócony przez przetłumaczone `transformMatrix`, dołączanie `transformMatrix` do macierzy transformacji świata.  
  
-   Rysuje elipsę obrócony, tłumaczenia.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#144)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#144)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#144)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/0659fe00-9e0c-41c4-9118-016f2404c905">Macierzowe przedstawienie przekształcenia</related>
      </Docs>
    </Member>
    <Member MemberName="PageScale">
      <MemberSignature Language="C#" Value="public float PageScale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 PageScale" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PageScale" />
      <MemberSignature Language="VB.NET" Value="Public Property PageScale As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float PageScale { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.PageScale : single with get, set" Usage="System.Drawing.Graphics.PageScale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia skalowania między jednostkami w świecie i jednostki strony, w tym <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Ta właściwość określa wartość dla skalowania między jednostkami w świecie i jednostki strony, w tym <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Drawing.Graphics.PageScale%2A> i <xref:System.Drawing.Graphics.TranslateTransform%2A> elementy członkowskie, aby zmienić skalę i źródła, gdy narysować prostokąt.  
  
 W tym przykładzie jest przeznaczona do użycia za pomocą interfejsu Windows Forms. Wklej kod do formularza i wywołania `ChangePageScaleAndTranslateTransform` metody obsługi danych formularza <xref:System.Windows.Forms.Control.Paint> zdarzenie, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.GraphicsProperties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#2)]
 [!code-vb[System.Drawing.GraphicsProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c61ff50a-eb1d-4e6c-83cd-f7e9764cfa9f">Typy systemów współrzędnych</related>
      </Docs>
    </Member>
    <Member MemberName="PageUnit">
      <MemberSignature Language="C#" Value="public System.Drawing.GraphicsUnit PageUnit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.GraphicsUnit PageUnit" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PageUnit" />
      <MemberSignature Language="VB.NET" Value="Public Property PageUnit As GraphicsUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::GraphicsUnit PageUnit { System::Drawing::GraphicsUnit get(); void set(System::Drawing::GraphicsUnit value); };" />
      <MemberSignature Language="F#" Value="member this.PageUnit : System.Drawing.GraphicsUnit with get, set" Usage="System.Drawing.Graphics.PageUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.GraphicsUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia jednostki miary, umożliwiający współrzędne strony, w tym <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Jedną z <see cref="T:System.Drawing.GraphicsUnit" /> wartości innych niż <see cref="F:System.Drawing.GraphicsUnit.World" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jednostka grafiki jest jednostką miary umożliwiający współrzędne strony, w tym <xref:System.Drawing.Graphics>.  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje efekt zmiany <xref:System.Drawing.Graphics.PageUnit%2A> właściwości.  
  
 W tym przykładzie jest przeznaczona do użycia za pomocą interfejsu Windows Forms. Wklej kod do formularza i wywołania `ChangePageUnit` metody obsługi danych formularza <xref:System.Windows.Forms.Control.Paint> zdarzenie, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.GraphicsProperties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#3)]
 [!code-vb[System.Drawing.GraphicsProperties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <see cref="P:System.Drawing.Graphics.PageUnit" /> ustawiono <see cref="F:System.Drawing.GraphicsUnit.World" />, który nie jest jednostką fizycznych.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c61ff50a-eb1d-4e6c-83cd-f7e9764cfa9f">Typy systemów współrzędnych</related>
      </Docs>
    </Member>
    <Member MemberName="PixelOffsetMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PixelOffsetMode" />
      <MemberSignature Language="VB.NET" Value="Public Property PixelOffsetMode As PixelOffsetMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::PixelOffsetMode PixelOffsetMode { System::Drawing::Drawing2D::PixelOffsetMode get(); void set(System::Drawing::Drawing2D::PixelOffsetMode value); };" />
      <MemberSignature Language="F#" Value="member this.PixelOffsetMode : System.Drawing.Drawing2D.PixelOffsetMode with get, set" Usage="System.Drawing.Graphics.PixelOffsetMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.PixelOffsetMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustaw wartość określającą, jak pikseli są przesuwane podczas renderowania tego <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Ta właściwość określa członkiem <see cref="T:System.Drawing.Drawing2D.PixelOffsetMode" /> wyliczenia</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość służy do określenia obu wyższej jakości, renderowanie wolniej lub niższa jakość szybsze renderowanie zawartości to <xref:System.Drawing.Graphics> obiektu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReleaseHdc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wersje uchwyt kontekstu urządzenia uzyskanych przez poprzednie wywołanie <see cref="M:System.Drawing.Graphics.GetHdc" /> to metoda <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReleaseHdc">
      <MemberSignature Language="C#" Value="public void ReleaseHdc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHdc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdc" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdc ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHdc();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHdc : unit -&gt; unit&#xA;override this.ReleaseHdc : unit -&gt; unit" Usage="graphics.ReleaseHdc " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Drawing.IDeviceContext.ReleaseHdc</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wersje uchwyt kontekstu urządzenia uzyskanych przez poprzednie wywołanie <see cref="M:System.Drawing.Graphics.GetHdc" /> to metoda <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.GetHdc%2A> i <xref:System.Drawing.Graphics.ReleaseHdc%2A> są dwie metody, które pozwalają uzyskać i zwolnienie uchwytu dla urządzenia Windows. Należy zawsze przestrzegać wywołanie <xref:System.Drawing.Graphics.GetHdc%2A> wywołaniem <xref:System.Drawing.Graphics.ReleaseHdc%2A> po zakończeniu z dojściem do Windows.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać dostęp do kodu niezarządzanego. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <altmember cref="T:System.Drawing.IDeviceContext" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHdc">
      <MemberSignature Language="C#" Value="public void ReleaseHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdc(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdc (hdc As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseHdc(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="member this.ReleaseHdc : nativeint -&gt; unit" Usage="graphics.ReleaseHdc hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Dojście do kontekstu urządzenia uzyskanych przez poprzednie wywołanie <see cref="M:System.Drawing.Graphics.GetHdc" /> to metoda <see cref="T:System.Drawing.Graphics" />.</param>
        <summary>Wersje uchwyt kontekstu urządzenia uzyskanych przez poprzednie wywołanie <see cref="M:System.Drawing.Graphics.GetHdc" /> to metoda <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kontekst urządzenia to struktura Windows na podstawie [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] definiujący zestaw obiektów graficznych i ich skojarzonych z nimi atrybutów, a także graficzny tryby, które mają wpływ na dane wyjściowe.  
  
 Wywołania <xref:System.Drawing.Graphics.GetHdc%2A> i <xref:System.Drawing.Graphics.ReleaseHdc%2A> metody musi znajdować się w parach. W zakresie <xref:System.Drawing.Graphics.GetHdc%2A> i <xref:System.Drawing.Graphics.ReleaseHdc%2A> pary metod można zwykle wykonywanie wywołań tylko do [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] funkcji. Wywołuje się, że wprowadzone w zakresie [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] metody <xref:System.Drawing.Graphics> wytworzonego `hdc` parametru kończy się niepowodzeniem z `ObjectBusy` błędu. Ponadto [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] ignoruje wszelkie zmiany stanu <xref:System.Drawing.Graphics> z `hdc` parametru podczas kolejnych operacji.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. W przykładzie pokazano wywołanie Windows [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] funkcję, aby wykonać to samo zadanie [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> metody. Kod wykonuje następujące czynności:  
  
-   Definiuje interoperacyjności <xref:System.Runtime.InteropServices.DllImportAttribute> atrybut gdi32.dll pliku Windows DLL. Ta biblioteka DLL zawiera żądane [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] funkcja która definiuje <xref:System.Drawing.Rectangle> funkcji w tej bibliotece DLL jako zewnętrzne.  
  
-   Tworzy Czerwone pióro.  
  
-   Za pomocą pióra, rysuje prostokąt na ekranie za pomocą [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics.DrawRectangle%2A> metody.  
  
-   Definiuje zmienną typu wskaźnik wewnętrzny `hdc` i ustawia dla niej wartość dojścia do kontekstu urządzenia formularza.  
  
-   Rysuje prostokąt na ekranie za pomocą [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <xref:System.Drawing.Rectangle> funkcji.  
  
-   Zwalnia reprezentowanej przez kontekst urządzenia `hdc` parametru.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#145)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#145)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#145)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać dostęp do kodu niezarządzanego. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="ReleaseHdcInternal">
      <MemberSignature Language="C#" Value="public void ReleaseHdcInternal (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseHdcInternal(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdcInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdcInternal (hdc As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseHdcInternal(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="member this.ReleaseHdcInternal : nativeint -&gt; unit" Usage="graphics.ReleaseHdcInternal hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Dojście do kontekstu urządzenia.</param>
        <summary>Zwalnia dojścia do kontekstu urządzenia.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać dostęp do kodu niezarządzanego. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="RenderingOrigin">
      <MemberSignature Language="C#" Value="public System.Drawing.Point RenderingOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point RenderingOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.RenderingOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderingOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point RenderingOrigin { System::Drawing::Point get(); void set(System::Drawing::Point value); };" />
      <MemberSignature Language="F#" Value="member this.RenderingOrigin : System.Drawing.Point with get, set" Usage="System.Drawing.Graphics.RenderingOrigin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia źródło renderowania <see cref="T:System.Drawing.Graphics" /> symulowanie i pędzlami ze stylem kreskowania.</summary>
        <value>A <see cref="T:System.Drawing.Point" /> strukturę, która reprezentuje punkt początkowy symulacji 8 bitów na piksel i 16 bitów na piksel symulowania kolorów, a także jest używane do ustawienia początkowego pędzlami ze stylem kreskowania.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetClip">
      <MemberSignature Language="C#" Value="public void ResetClip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetClip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ResetClip" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetClip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetClip();" />
      <MemberSignature Language="F#" Value="member this.ResetClip : unit -&gt; unit" Usage="graphics.ResetClip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resetuje region klipu <see cref="T:System.Drawing.Graphics" /> do regionu nieskończone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy region wycinka <xref:System.Drawing.Graphics> to nieskończoność, że elementy <xref:System.Drawing.Graphics> nie powoduje rysuje.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokąt, za pomocą lewego górnego rogu w (0, 0) i ustawia obszar przycinania na prostokąt.  
  
-   Tworzy prostokąt, drugi z lewego górnego rogu w (100, 100) i ustawia obszar przycinania na przecięciu prostokąt i bieżącego obszaru przycinania (pierwszy prostokąt).  
  
-   Wypełnia dużych prostokąt, który zawiera oba poprzedniego prostokąty z niebieskim pędzla.  
  
-   Resetuje obszaru przycinania nieskończone.  
  
-   Rysuje prostokąty przycinania dwa regiony; Czarne pióro używa pierwszego prostokątnego wycinka i czerwone pióro dla drugiego regionu wycinka.  
  
 Wynik jest tylko część wspólną dwóch prostokątów jest wypełniany niebieski.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#146)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#146)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#146)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetTransform">
      <MemberSignature Language="C#" Value="public void ResetTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetTransform() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ResetTransform" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetTransform ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetTransform();" />
      <MemberSignature Language="F#" Value="member this.ResetTransform : unit -&gt; unit" Usage="graphics.ResetTransform " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resetuje macierzy transformacji świata tego <see cref="T:System.Drawing.Graphics" /> macierz tożsamości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Macierz tożsamości reprezentuje przekształcenie w przypadku nie skalowania obrotu lub tłumaczenia. Resetowanie Przekształcanie świata <xref:System.Drawing.Graphics> macierzą oznacza przekształcanie świata nie zmienia geometrii elementy przekształcone.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tłumaczy Przekształcanie świata w formularzu Windows wektor (100, 0).  
  
-   Zapisuje stan grafiki formularza.  
  
-   Transformacja świata formularza jest resetowany do tożsamości usługi i wypełnia prostokąt pędzla czerwony.  
  
-   Przywraca stan przetłumaczone grafiki i wypełnia pędzla niebieski prostokąt.  
  
 Wynik jest niezrozumiały prostokąt wypełnione red i przetłumaczone wypełnione niebieski prostokąt.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#147)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#147)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#147)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Restore">
      <MemberSignature Language="C#" Value="public void Restore (System.Drawing.Drawing2D.GraphicsState gstate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restore(class System.Drawing.Drawing2D.GraphicsState gstate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Restore (gstate As GraphicsState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Restore(System::Drawing::Drawing2D::GraphicsState ^ gstate);" />
      <MemberSignature Language="F#" Value="member this.Restore : System.Drawing.Drawing2D.GraphicsState -&gt; unit" Usage="graphics.Restore gstate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gstate" Type="System.Drawing.Drawing2D.GraphicsState" />
      </Parameters>
      <Docs>
        <param name="gstate">
          <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> reprezentujący stan, do której chcesz przywrócić to <see cref="T:System.Drawing.Graphics" />.</param>
        <summary>Przywraca stan to <see cref="T:System.Drawing.Graphics" /> stan reprezentowany przez <see cref="T:System.Drawing.Drawing2D.GraphicsState" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy wywołujesz <xref:System.Drawing.Graphics.Save%2A> metody <xref:System.Drawing.Graphics>, blok informacji, który zawiera stan <xref:System.Drawing.Graphics> jest umieszczany na stosie. <xref:System.Drawing.Graphics.Save%2A> Metoda zwraca <xref:System.Drawing.Drawing2D.GraphicsState> określający, że blok informacji. Podczas przekazywania identyfikowanie <xref:System.Drawing.Drawing2D.GraphicsState> do <xref:System.Drawing.Graphics.Restore%2A> metody blok informacji jest usuwany ze stosu i służy do przywracania <xref:System.Drawing.Graphics> stan był w momencie <xref:System.Drawing.Graphics.Save%2A> wywołania metody. Należy pamiętać, że <xref:System.Drawing.Drawing2D.GraphicsState> zwracany przez wywołanie danego <xref:System.Drawing.Graphics.Save%2A> metoda może być przekazywany tylko raz do `Restore` metody.  
  
 Wywołania <xref:System.Drawing.Graphics.Save%2A> metody mogą być zagnieżdżane; oznacza to, można wywołać <xref:System.Drawing.Graphics.Save%2A> metoda kilka razy przed wywołaniem <xref:System.Drawing.Graphics.Restore%2A> metody. Zawsze należy wywołać <xref:System.Drawing.Graphics.Save%2A> metody blok informacji jest umieszczany na stosie i pojawi się <xref:System.Drawing.Drawing2D.GraphicsState> bloku informacji. Gdy jeden z tych obiektów do przekazania <xref:System.Drawing.Graphics.Restore%2A> metody <xref:System.Drawing.Graphics> zwracany jest stan był w momencie <xref:System.Drawing.Graphics.Save%2A> wywołania metody, które są zwracane, określonego <xref:System.Drawing.Drawing2D.GraphicsState>. Blok informacji umieszczenie w stosie, przez który <xref:System.Drawing.Graphics.Save%2A> wywołania metody jest usuwany ze stosu i wszystkich bloków informacyjnych umieszczone na ten stos po tym <xref:System.Drawing.Graphics.Save%2A> wywołania metody także zostaną usunięte.  
  
 Wywołania <xref:System.Drawing.Graphics.BeginContainer%2A> bloków informacyjnych miejscu metody na tym samym stosie jako wywołania <xref:System.Drawing.Graphics.Save%2A> metody. Podobnie jak <xref:System.Drawing.Graphics.Restore%2A> wywołanie jest powiązany z <xref:System.Drawing.Graphics.Save%2A> wywołać, <xref:System.Drawing.Graphics.EndContainer%2A> wywołania metody jest powiązany z <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody.  
  
 Podczas wywoływania <xref:System.Drawing.Graphics.Restore%2A> metody wszystkich bloków informacyjnych umieszczenie w stosie (przez <xref:System.Drawing.Graphics.Save%2A> metody lub <xref:System.Drawing.Graphics.BeginContainer%2A> metody) po odpowiedniego wywołania <xref:System.Drawing.Graphics.Save%2A> metody zostaną usunięte ze stosu. Podobnie, jeśli wywołasz <xref:System.Drawing.Graphics.EndContainer%2A> metody wszystkich bloków informacyjnych umieszczenie w stosie, (przez <xref:System.Drawing.Graphics.Save%2A> metody lub <xref:System.Drawing.Graphics.BeginContainer%2A> metoda) po odpowiedniego wywołania <xref:System.Drawing.Graphics.BeginContainer%2A> metody zostaną usunięte ze stosu.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tłumaczy Przekształcanie świata w formularzu Windows wektor (100, 0).  
  
-   Zapisuje stan grafiki formularza.  
  
-   Transformacja świata formularza jest resetowany do tożsamości usługi i wypełnia prostokąt pędzla czerwony.  
  
-   Przywraca stan przetłumaczone grafiki i wypełnia prostokąt druga niebieski pędzla.  
  
 Wynik jest niezrozumiały prostokąt wypełnione red i przetłumaczone wypełnione niebieski prostokąt.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#148)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#148)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#148)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RotateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dotyczy określonego obrotu macierzy transformacji tego <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.RotateTransform(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle);" />
      <MemberSignature Language="F#" Value="member this.RotateTransform : single -&gt; unit" Usage="graphics.RotateTransform angle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="angle">Kąt obrotu w stopniach.</param>
        <summary>Dotyczy określonego obrotu macierzy transformacji tego <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacji rotacji składa się z mnożenie macierzy transformacji, macierz, której elementy są uzyskiwane z `angle` parametru. Ta metoda dotyczy obrót, dołączając ją do macierzy transformacji.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tłumaczy macierzy transformacji świata formularza Windows wektor (100, 0).  
  
-   Obraca transformacji świata kąt 30 stopni, dołączenie macierz obrotu macierzy transformacji świata.  
  
-   Rysuje elipsę obrócony, przetłumaczone piórem niebieski.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#149)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#149)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#149)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.RotateTransform : single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.RotateTransform (angle, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="angle">Kąt obrotu w stopniach.</param>
        <param name="order">Członek <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> wyliczenie, które określa, czy obrót jest dołączany dołączony do przekształcenia macierzy.</param>
        <summary>Dotyczy określonego obrotu macierzy transformacji <see cref="T:System.Drawing.Graphics" /> w określonej kolejności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacji rotacji składa się z mnożenie macierzy transformacji, macierz, której elementy są uzyskiwane z `angle` parametru. Ta metoda dołącza lub dołącza macierzy transformacji z <xref:System.Drawing.Graphics> przez macierz obrotu, zgodnie z opisem w `order` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tłumaczy macierzy transformacji świata formularza Windows wektor (100, 0).  
  
-   Obraca transformacji świata kąt 30 stopni, dodanie macierzy rotacji do macierzy transformacji świata z <xref:System.Drawing.Drawing2D.MatrixOrder.Append>.  
  
-   Rysuje elipsę tłumaczenia, obrócony piórem niebieski.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#150)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#150)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#150)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsState Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsState Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Save" />
      <MemberSignature Language="VB.NET" Value="Public Function Save () As GraphicsState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsState ^ Save();" />
      <MemberSignature Language="F#" Value="member this.Save : unit -&gt; System.Drawing.Drawing2D.GraphicsState" Usage="graphics.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje bieżący stan to <see cref="T:System.Drawing.Graphics" /> i identyfikuje zapisanego stanu z <see cref="T:System.Drawing.Drawing2D.GraphicsState" />.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> reprezentujący zapisany stan <see cref="T:System.Drawing.Graphics" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy wywołujesz <xref:System.Drawing.Graphics.Save%2A> metody <xref:System.Drawing.Graphics>, blok informacji, który zawiera stan <xref:System.Drawing.Graphics> jest umieszczany na stosie. <xref:System.Drawing.Graphics.Save%2A> Metoda zwraca <xref:System.Drawing.Drawing2D.GraphicsState> określający, że blok informacji. Podczas przekazywania identyfikowanie <xref:System.Drawing.Drawing2D.GraphicsState> do <xref:System.Drawing.Graphics.Restore%2A> metody blok informacji jest usuwany ze stosu i służy do przywracania <xref:System.Drawing.Graphics> stan był w momencie <xref:System.Drawing.Graphics.Save%2A> wywołania metody. Należy pamiętać, że <xref:System.Drawing.Drawing2D.GraphicsState> zwracany przez wywołanie danego <xref:System.Drawing.Graphics.Save%2A> metoda może być przekazywany tylko raz do <xref:System.Drawing.Graphics.Restore%2A> metody.  
  
 Wywołania <xref:System.Drawing.Graphics.Save%2A> metody mogą być zagnieżdżane; oznacza to, można wywołać <xref:System.Drawing.Graphics.Save%2A> metoda kilka razy przed wywołaniem <xref:System.Drawing.Graphics.Restore%2A> metody. Zawsze należy wywołać <xref:System.Drawing.Graphics.Save%2A> metody blok informacji jest umieszczany na stosie i pojawi się <xref:System.Drawing.Drawing2D.GraphicsState> bloku informacji. Gdy jeden z tych obiektów do przekazania <xref:System.Drawing.Graphics.Restore%2A> metody <xref:System.Drawing.Graphics> zwracany jest stan był w momencie <xref:System.Drawing.Graphics.Save%2A> wywołania metody, które są zwracane, określonego <xref:System.Drawing.Drawing2D.GraphicsState>. Blok informacji umieszczenie w stosie, przez który <xref:System.Drawing.Graphics.Save%2A> wywołania metody jest usuwany ze stosu i wszystkich bloków informacyjnych umieszczone na ten stos po tym <xref:System.Drawing.Graphics.Save%2A> wywołania metody także zostaną usunięte.  
  
 Wywołania <xref:System.Drawing.Graphics.BeginContainer%2A> bloków informacyjnych miejscu metody na tym samym stosie jako wywołania <xref:System.Drawing.Graphics.Save%2A> metody. Podobnie jak <xref:System.Drawing.Graphics.Restore%2A> wywołanie jest powiązany z <xref:System.Drawing.Graphics.Save%2A> wywołać, <xref:System.Drawing.Graphics.EndContainer%2A> wywołania metody jest powiązany z <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody.  
  
 Podczas wywoływania <xref:System.Drawing.Graphics.Restore%2A> metody wszystkich bloków informacyjnych umieszczenie w stosie (przez <xref:System.Drawing.Graphics.Save%2A> metody lub <xref:System.Drawing.Graphics.BeginContainer%2A> metody) po odpowiedniego wywołania <xref:System.Drawing.Graphics.Save%2A> metody zostaną usunięte ze stosu. Podobnie, jeśli wywołasz <xref:System.Drawing.Graphics.EndContainer%2A> metody wszystkich bloków informacyjnych umieszczenie w stosie, (przez <xref:System.Drawing.Graphics.Save%2A> metody lub <xref:System.Drawing.Graphics.BeginContainer%2A> metoda) po odpowiedniego wywołania <xref:System.Drawing.Graphics.BeginContainer%2A> metody zostaną usunięte ze stosu.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tłumaczy Przekształcanie świata w formularzu Windows wektor (100, 0).  
  
-   Zapisuje stan grafiki formularza.  
  
-   Przekształcanie świata formularza jest resetowany do tożsamości, (2 x 2 macierz tożsamości oraz translację o wektor zero) i wypełnia prostokąt czerwony pędzla.  
  
-   Przywraca stan przetłumaczone grafiki i wypełnia pędzla niebieski prostokąt.  
  
 Wynik jest niezrozumiały prostokąt wypełnione czerwony po lewej stronie i przetłumaczone wypełnione niebieski prostokąt w prawym rogu formularza.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#151)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#151)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#151)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScaleTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dotyczy określonej operacji skalowania macierzy transformacji <see cref="T:System.Drawing.Graphics" /> przez dołączenie go do obiektu macierzy transformacji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ScaleTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy);" />
      <MemberSignature Language="F#" Value="member this.ScaleTransform : single * single -&gt; unit" Usage="graphics.ScaleTransform (sx, sy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">Współczynnik skali w kierunku x.</param>
        <param name="sy">Współczynnik skali w kierunku y.</param>
        <summary>Dotyczy określonej operacji skalowania macierzy transformacji <see cref="T:System.Drawing.Graphics" /> przez dołączenie go do obiektu macierzy transformacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacja skalowania składa się z mnożenie macierzy transformacji, skos macierzy, której elementy są (`sx`, `sy`, 1). Ta metoda dołącza macierzy transformacji z <xref:System.Drawing.Graphics> przez skalowania macierzy.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Obraca macierzy transformacji świata formularza Windows przez 30 stopni.  
  
-   Skalowanie tej macierzy przez współczynnik 3 w kierunku x i o 1 w kierunku y przez poprzedzenie jej skalowania transformacji.  
  
-   Rysuje prostokąt skalowana, obrócony piórem niebieski.  
  
 Wynik jest nadal prostokąta.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#152)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#152)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#152)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.ScaleTransform : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.ScaleTransform (sx, sy, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="sx">Współczynnik skali w kierunku x.</param>
        <param name="sy">Współczynnik skali w kierunku y.</param>
        <param name="order">Członek <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> wyliczenie, które określa, czy operacja skalowania jest dołączony do macierzy transformacji.</param>
        <summary>Dotyczy określonej operacji skalowania macierzy transformacji <see cref="T:System.Drawing.Graphics" /> w określonej kolejności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacja skalowania składa się z mnożenie macierzy transformacji, skos macierzy, której elementy są (`sx`, `sy`, 1). Ta metoda dołącza lub dołącza macierzy transformacji z <xref:System.Drawing.Graphics> przez skalowania macierzy zgodnie z opisem w `order` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Obraca macierzy transformacji świata formularza Windows przez 30 stopni.  
  
-   Skalowanie tej macierzy przez współczynnik 3 w kierunku x i o 1 w kierunku y, dodając skalowania transformację dzięki <xref:System.Drawing.Drawing2D.MatrixOrder.Append> elementu członkowskiego.  
  
-   Rysuje prostokąt obrócony, skalowane za pomocą pióra niebieski.  
  
 Wynik jest równoległobok.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#153)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#153)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#153)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ustawia obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> do <see langword="Clip" /> właściwości określonego <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (path As GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Drawing2D.GraphicsPath -&gt; unit" Usage="graphics.SetClip path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">
          <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> reprezentujący nowy region klipu.</param>
        <summary>Ustawia obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> określonej <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ścieżka grafiki, reprezentowane przez `path` parametru nie są zamknięte, dodatkowe segmentu jest dodawany z ostatniego punktu z pierwszym punktem, aby zamknąć ścieżkę.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ścieżkę grafiki i dodaje elipsy do ścieżki.  
  
-   Ustawia ścieżkę eliptycznego obszaru przycinania.  
  
-   Wypełnia duży prostokąt przy użyciu pędzla czarny.  
  
 Wynik jest elipsy wypełnione, czarny.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#154)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#154)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#154)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Graphics g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Graphics g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Graphics)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (g As Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Graphics ^ g);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Graphics -&gt; unit" Usage="graphics.SetClip g" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="g">
          <see cref="T:System.Drawing.Graphics" /> z którego można wykonać nowego regionu klipu.</param>
        <summary>Ustawia obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> do <see langword="Clip" /> właściwości określonego <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń oraz `thisForm`, <xref:System.Windows.Forms.Form> dla przykładu. Kod wykonuje następujące czynności:  
  
-   Tworzy tymczasową <xref:System.Drawing.Graphics> z `thisForm` <xref:System.Windows.Forms.Form> przykładu.  
  
-   Ustawia obszar przycinania tymczasowych <xref:System.Drawing.Graphics> do mały kwadrat.  
  
-   Aktualizuje obszaru przycinania obiektu graficznego do formularza, tymczasowy <xref:System.Drawing.Graphics>.  
  
-   Wypełnia duży prostokąt przy użyciu pędzla czarny.  
  
 Wynik jest kwadratowy małej, wypełnione, czarny.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#156)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#156)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#156)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Rectangle -&gt; unit" Usage="graphics.SetClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura, który reprezentuje nowy region klipu.</param>
        <summary>Ustawia obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> przycinania na prostokąt określony przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy niewielki prostokąt dla obszaru przycinania.  
  
-   Ustawia obszar przycinania na prostokąt.  
  
-   Wypełnia duży prostokąt przy użyciu pędzla czarny.  
  
 Wynik jest małe, wypełnione, czarne prostokąt.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#158)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#158)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#158)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (rect As RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.RectangleF -&gt; unit" Usage="graphics.SetClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura, który reprezentuje nowy region klipu.</param>
        <summary>Ustawia obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> przycinania na prostokąt określony przez <see cref="T:System.Drawing.RectangleF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy niewielki prostokąt dla obszaru przycinania.  
  
-   Ustawia obszar przycinania na prostokąt.  
  
-   Wypełnia duży prostokąt przy użyciu pędzla czarny.  
  
 Wynik jest małe, wypełnione, czarne prostokąt.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#160)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#160)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#160)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Drawing2D.GraphicsPath path, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Drawing2D.GraphicsPath path, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Drawing2D::GraphicsPath ^ path, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Drawing2D.GraphicsPath * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (path, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="path">
          <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> Aby połączyć.</param>
        <param name="combineMode">Członek <see cref="T:System.Drawing.Drawing2D.CombineMode" /> wyliczenie, które określa operację łączenia do użycia.</param>
        <summary>Ustawia obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> do wyniku określonej operacji łączenia bieżący region klipu, a określony <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ścieżka grafiki, reprezentowane przez `path` parametru nie są zamknięte, dodatkowe segmentu jest dodawany z ostatniego punktu z pierwszym punktem, aby zamknąć ścieżkę.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ścieżkę grafiki i dodaje elipsy do ścieżki.  
  
-   Ustawia obszar przycinania na ścieżkę eliptycznego z <xref:System.Drawing.Drawing2D.CombineMode.Replace> elementu członkowskiego.  
  
-   Wypełnia duży prostokąt przy użyciu pędzla czarny.  
  
 Wynik jest elipsy wypełnione, czarny.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#155)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#155)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#155)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Graphics g, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Graphics g, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Graphics,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Graphics ^ g, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Graphics * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (g, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="g">
          <see cref="T:System.Drawing.Graphics" /> który określa obszar przycinania, aby połączyć.</param>
        <param name="combineMode">Członek <see cref="T:System.Drawing.Drawing2D.CombineMode" /> wyliczenie, które określa operację łączenia do użycia.</param>
        <summary>Ustawia obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> do wyniku określonego łączenia operacji bieżący region klipu i <see cref="P:System.Drawing.Graphics.Clip" /> właściwości określonego <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń oraz `thisForm`, <xref:System.Windows.Forms.Form> dla przykładu. Kod wykonuje następujące czynności:  
  
-   Tworzy tymczasową <xref:System.Drawing.Graphics> z `thisForm` <xref:System.Windows.Forms.Form> przykładu.  
  
-   Ustawia obszar przycinania tymczasowych <xref:System.Drawing.Graphics> do mały kwadrat.  
  
-   Aktualizuje obszaru przycinania formularza obiektu graficznego do tego nowego <xref:System.Drawing.Graphics> z <xref:System.Drawing.Drawing2D.CombineMode.Replace> elementu członkowskiego.  
  
-   Wypełnia duży prostokąt przy użyciu pędzla czarny.  
  
 Wynik jest kwadratowy małej, wypełnione, czarny.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#157)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#157)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#157)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Rectangle rect, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.Rectangle rect, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Rectangle rect, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Rectangle * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (rect, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> Struktura połączyć.</param>
        <param name="combineMode">Członek <see cref="T:System.Drawing.Drawing2D.CombineMode" /> wyliczenie, które określa operację łączenia do użycia.</param>
        <summary>Ustawia obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> do wyniku określonej operacji łączenia bieżący region klipu i prostokąt określony przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy niewielki prostokąt dla obszaru przycinania.  
  
-   Ustawia obszar przycinania na prostokąt z <xref:System.Drawing.Drawing2D.CombineMode.Replace> elementu członkowskiego.  
  
-   Wypełnia duży prostokąt przy użyciu pędzla czarny.  
  
 Wynik jest małe, wypełnione, czarne prostokąt.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#159)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#159)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#159)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.RectangleF rect, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.RectangleF rect, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.RectangleF,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::RectangleF rect, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.RectangleF * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (rect, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> Struktura połączyć.</param>
        <param name="combineMode">Członek <see cref="T:System.Drawing.Drawing2D.CombineMode" /> wyliczenie, które określa operację łączenia do użycia.</param>
        <summary>Ustawia obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> do wyniku określonej operacji łączenia bieżący region klipu i prostokąt określony przez <see cref="T:System.Drawing.RectangleF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy niewielki prostokąt dla obszaru przycinania.  
  
-   Ustawia obszar przycinania na prostokąt z <xref:System.Drawing.Drawing2D.CombineMode.Replace> elementu członkowskiego.  
  
-   Wypełnia duży prostokąt przy użyciu pędzla czarny.  
  
 Wynik jest małe, wypełnione, czarne prostokąt.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#161)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#161)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#161)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Region region, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Region region, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Region,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Region ^ region, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Region * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (region, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="region">
          <see cref="T:System.Drawing.Region" /> Aby połączyć.</param>
        <param name="combineMode">Element członkowski z <see cref="T:System.Drawing.Drawing2D.CombineMode" /> wyliczenie, które określa operację łączenia do użycia.</param>
        <summary>Ustawia obszar przycinania tego <see cref="T:System.Drawing.Graphics" /> do wyniku określonej operacji łączenia bieżący region klipu, a określony <see cref="T:System.Drawing.Region" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy niewielki prostokąt dla obszaru przycinania.  
  
-   Ustawia obszar przycinania na prostokąt z <xref:System.Drawing.Drawing2D.CombineMode.Replace> elementu członkowskiego.  
  
-   Wypełnia duży prostokąt przy użyciu pędzla czarny.  
  
 Wynik jest małe, wypełnione, czarne prostokąt.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#162)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#162)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#162)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SmoothingMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.SmoothingMode SmoothingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.SmoothingMode SmoothingMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.SmoothingMode" />
      <MemberSignature Language="VB.NET" Value="Public Property SmoothingMode As SmoothingMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::SmoothingMode SmoothingMode { System::Drawing::Drawing2D::SmoothingMode get(); void set(System::Drawing::Drawing2D::SmoothingMode value); };" />
      <MemberSignature Language="F#" Value="member this.SmoothingMode : System.Drawing.Drawing2D.SmoothingMode with get, set" Usage="System.Drawing.Graphics.SmoothingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.SmoothingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia jakość renderowania w tym <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Jedną z <see cref="T:System.Drawing.Drawing2D.SmoothingMode" /> wartości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tryb wygładzania Określa, czy linie, krzywe i krawędzi wypełnionego obszarów używać Wygładzanie (nazywane również antialiasing). Jedynym wyjątkiem jest, że pędzle gradientów ścieżki nie przestrzegają tryb wygładzania. Obszary wypełnione przy użyciu <xref:System.Drawing.Drawing2D.PathGradientBrush> — zostaną zrenderowane (alias) tak samo niezależnie od wartości <xref:System.Drawing.Graphics.SmoothingMode%2A> właściwości.  
  
   
  
## Examples  
 Następującą metodę przedstawia skutki ustawienie <xref:System.Drawing.Pen.DashCap%2A>, <xref:System.Drawing.Pen.DashPattern%2A>, i <xref:System.Drawing.Graphics.SmoothingMode%2A> właściwości. Dane wyjściowe z przykładu jest wyświetlany na poniższej ilustracji.  
  
 ![Wiersze z lub bez wygładzanie stosowane. ] (~/add/media/gdi-smoothingmode.png "Wiersze z lub bez wygładzanie stosowane.")  
  
 W tym przykładzie jest przeznaczona do użycia za pomocą interfejsu Windows Forms. Wklej kod do formularza i wywołania `ShowPensAndSmoothingMode` metody obsługi danych formularza <xref:System.Windows.Forms.Control.Paint> zdarzenie, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.PensExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.PensExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextContrast">
      <MemberSignature Language="C#" Value="public int TextContrast { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextContrast" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.TextContrast" />
      <MemberSignature Language="VB.NET" Value="Public Property TextContrast As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextContrast { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TextContrast : int with get, set" Usage="System.Drawing.Graphics.TextContrast" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość korekcji gamma do renderowania tekstu.</summary>
        <value>Wartość korekcji gamma używany do renderowania antialiased i ClearType tekstu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość korekcji gamma musi być z zakresu od 0 do 12. Wartość domyślna to 4.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Drawing.Graphics.TextRenderingHint%2A> i <xref:System.Drawing.Graphics.TextContrast%2A> właściwości.  
  
 W tym przykładzie jest przeznaczona do użycia za pomocą interfejsu Windows Forms. Wklej kod do formularza i wywołania `ChangeTextRenderingHintAndTextContrast` metody obsługi danych formularza <xref:System.Windows.Forms.Control.Paint> zdarzenie, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.GraphicsProperties#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#5)]
 [!code-vb[System.Drawing.GraphicsProperties#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextRenderingHint">
      <MemberSignature Language="C#" Value="public System.Drawing.Text.TextRenderingHint TextRenderingHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Text.TextRenderingHint TextRenderingHint" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.TextRenderingHint" />
      <MemberSignature Language="VB.NET" Value="Public Property TextRenderingHint As TextRenderingHint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Text::TextRenderingHint TextRenderingHint { System::Drawing::Text::TextRenderingHint get(); void set(System::Drawing::Text::TextRenderingHint value); };" />
      <MemberSignature Language="F#" Value="member this.TextRenderingHint : System.Drawing.Text.TextRenderingHint with get, set" Usage="System.Drawing.Graphics.TextRenderingHint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Text.TextRenderingHint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tryb renderowania tekstu skojarzony z tym <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Jedną z <see cref="T:System.Drawing.Text.TextRenderingHint" /> wartości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wskazówka renderowanie tekstu określa, czy tekst, renderowanie przy użyciu antyaliasingu do.  
  
> [!NOTE]
>  Nie należy używać <xref:System.Drawing.Graphics.CompositingMode%2A> wartość właściwości <xref:System.Drawing.Drawing2D.CompositingMode.SourceCopy> podczas <xref:System.Drawing.Graphics.TextRenderingHint%2A> właściwość jest ustawiona na <xref:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit>. Może wystąpić wyjątek pustej lub obraz może nie być wyświetlana poprawnie.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Drawing.Graphics.TextRenderingHint%2A> i <xref:System.Drawing.Graphics.TextContrast%2A> właściwości.  
  
 W tym przykładzie jest przeznaczona do użycia za pomocą interfejsu Windows Forms. Wklej kod do formularza i wywołania `ChangeTextRenderingHintAndTextContrast` metody obsługi danych formularza <xref:System.Windows.Forms.Control.Paint> zdarzenie, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.GraphicsProperties#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#5)]
 [!code-vb[System.Drawing.GraphicsProperties#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.Matrix Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.Matrix Transform" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Property Transform As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::Matrix ^ Transform { System::Drawing::Drawing2D::Matrix ^ get(); void set(System::Drawing::Drawing2D::Matrix ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Drawing.Drawing2D.Matrix with get, set" Usage="System.Drawing.Graphics.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia kopię transformacji świata geometryczne, w tym <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Kopię <see cref="T:System.Drawing.Drawing2D.Matrix" /> reprezentujący transformacji świata geometryczne, w tym <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 GDI + używa trzech przestrzeni współrzędnych: świata, strony i urządzeń. Współrzędne świata są współrzędne używane do modelowania określonego świata graficznego i współrzędne, które są przekazywane do metody w programie .NET Framework. Współrzędne strony można znaleźć w układzie współrzędnych używana przez powierzchnię rysunku, na przykład formularz lub formant. Współrzędne urządzenia są współrzędne używane przez urządzenie fizyczne rysowania, takie jak ekran lub okno drukarki. <xref:System.Drawing.Graphics.Transform%2A> Właściwość reprezentuje transformacji świata, który mapuje współrzędne świata na współrzędne strony.  
  
 Ponieważ zwracany macierzy, jak również <xref:System.Drawing.Graphics.Transform%2A> właściwość kopię przekształcenie geometryczne, należy usunąć macierzy, gdy nie są już potrzebne.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c61ff50a-eb1d-4e6c-83cd-f7e9764cfa9f">Typy systemów współrzędnych</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TransformPoints">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Przekształca tablicę punktów z jednej przestrzeni współrzędnych do innego za pomocą bieżącego świecie i stronę przekształcenia to <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.Point[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformPoints(valuetype System.Drawing.Drawing2D.CoordinateSpace destSpace, valuetype System.Drawing.Drawing2D.CoordinateSpace srcSpace, valuetype System.Drawing.Point[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Point[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransformPoints (destSpace As CoordinateSpace, srcSpace As CoordinateSpace, pts As Point())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransformPoints(System::Drawing::Drawing2D::CoordinateSpace destSpace, System::Drawing::Drawing2D::CoordinateSpace srcSpace, cli::array &lt;System::Drawing::Point&gt; ^ pts);" />
      <MemberSignature Language="F#" Value="member this.TransformPoints : System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.Point[] -&gt; unit" Usage="graphics.TransformPoints (destSpace, srcSpace, pts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="srcSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="pts" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="destSpace">Członek <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> wyliczenie, które określa miejsce docelowe współrzędnych.</param>
        <param name="srcSpace">Członek <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> wyliczenie, które określa źródło współrzędnych.</param>
        <param name="pts">Tablica <see cref="T:System.Drawing.Point" /> struktur, które reprezentuje punkty do przekształcenia.</param>
        <summary>Przekształca tablicę punktów z jednej przestrzeni współrzędnych do innego za pomocą bieżącego świecie i stronę przekształcenia to <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy dwa punkty i rysuje niebieską linię między nimi.  
  
-   Ustawia transformacji świata do translacji przez kwot 40 kierunku x oraz 30 w kierunku y.  
  
-   Przekształca punktów z współrzędnych świata (<xref:System.Drawing.Drawing2D.CoordinateSpace.World>) na współrzędne strony (<xref:System.Drawing.Drawing2D.CoordinateSpace.Page>).  
  
-   Resetuje transformacji świata tożsamości.  
  
-   Rysuje czerwoną linię między punktami przekształcone.  
  
 Wynik jest niebieska linia i przetłumaczone czerwona linia poniżej.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#163)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#163)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#163)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.PointF[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformPoints(valuetype System.Drawing.Drawing2D.CoordinateSpace destSpace, valuetype System.Drawing.Drawing2D.CoordinateSpace srcSpace, valuetype System.Drawing.PointF[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.PointF[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransformPoints (destSpace As CoordinateSpace, srcSpace As CoordinateSpace, pts As PointF())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransformPoints(System::Drawing::Drawing2D::CoordinateSpace destSpace, System::Drawing::Drawing2D::CoordinateSpace srcSpace, cli::array &lt;System::Drawing::PointF&gt; ^ pts);" />
      <MemberSignature Language="F#" Value="member this.TransformPoints : System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.PointF[] -&gt; unit" Usage="graphics.TransformPoints (destSpace, srcSpace, pts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="srcSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="pts" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="destSpace">Członek <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> wyliczenie, które określa miejsce docelowe współrzędnych.</param>
        <param name="srcSpace">Członek <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> wyliczenie, które określa źródło współrzędnych.</param>
        <param name="pts">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które reprezentują punkty w celu przekształcenia.</param>
        <summary>Przekształca tablicę punktów z jednej przestrzeni współrzędnych do innego za pomocą bieżącego świecie i stronę przekształcenia to <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy dwa punkty i rysuje niebieską linię między nimi.  
  
-   Ustawia transformacji świata do translacji przez kwot 40 kierunku x oraz 30 w kierunku y.  
  
-   Przekształca punktów z współrzędnych świata (<xref:System.Drawing.Drawing2D.CoordinateSpace.World>) na współrzędne strony (<xref:System.Drawing.Drawing2D.CoordinateSpace.Page>).  
  
-   Resetuje transformacji świata z tożsamością i rysuje czerwoną linię między punktami przekształcone.  
  
 Wynik jest niebieska linia i przetłumaczone czerwona linia poniżej.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#164)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#164)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#164)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tłumaczy obszaru przycinania tego <see cref="T:System.Drawing.Graphics" /> według określonej ilości w kierunku poziomym i pionowym.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateClip">
      <MemberSignature Language="C#" Value="public void TranslateClip (int dx, int dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateClip(int32 dx, int32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateClip(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateClip (dx As Integer, dy As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateClip(int dx, int dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateClip : int * int -&gt; unit" Usage="graphics.TranslateClip (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Int32" />
        <Parameter Name="dy" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dx">Współrzędna x tłumaczenia.</param>
        <param name="dy">Współrzędna y tłumaczenia.</param>
        <summary>Tłumaczy obszaru przycinania tego <see cref="T:System.Drawing.Graphics" /> według określonej ilości w kierunku poziomym i pionowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokąt dla obszaru przycinania.  
  
-   Ustawia obszar przycinania na prostokąt.  
  
-   Tłumaczy obszaru przycinania wektor (50, 50).  
  
-   Wypełnia duży prostokąt przy użyciu pędzla czarny.  
  
 Wynik jest prostokąt tłumaczenia, małe, czarny.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#165)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#165)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#165)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateClip">
      <MemberSignature Language="C#" Value="public void TranslateClip (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateClip(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateClip(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateClip (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateClip(float dx, float dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateClip : single * single -&gt; unit" Usage="graphics.TranslateClip (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">Współrzędna x tłumaczenia.</param>
        <param name="dy">Współrzędna y tłumaczenia.</param>
        <summary>Tłumaczy obszaru przycinania tego <see cref="T:System.Drawing.Graphics" /> według określonej ilości w kierunku poziomym i pionowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokąt dla obszaru przycinania.  
  
-   Ustawia obszar przycinania na prostokąt.  
  
-   Tłumaczy obszaru przycinania wektor (50.0F, 50.0F).  
  
-   Wypełnia duży prostokąt przy użyciu pędzla czarny.  
  
 Wynik jest prostokąt tłumaczenia, małe, czarny.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#166)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#166)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#166)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zmiany w układzie współrzędnych punktu początkowego przez poprzedzenie jej tłumaczenie określonej w macierzy transformacji to <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateTransform : single * single -&gt; unit" Usage="graphics.TranslateTransform (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">Współrzędna x tłumaczenia.</param>
        <param name="dy">Współrzędna y tłumaczenia.</param>
        <summary>Zmiany w układzie współrzędnych punktu początkowego przez poprzedzenie jej tłumaczenie określonej w macierzy transformacji to <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pochodzi zwykle lewej prawym górnym rogu powierzchni do rysowania.  Operacja tłumaczenia obejmuje mnożenie macierzy transformacji, macierz, w których część tłumaczenia jest `dx` i `dy` parametrów. Ta metoda dotyczy tłumaczenia przez poprzedzenie jej macierz tłumaczenia macierzy transformacji.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Obraca macierzy transformacji świata formularza Windows o 30.0F stopni.  
  
-   Przenosi źródła obiektu grafiki, wywołując <xref:System.Drawing.Graphics.TranslateTransform%2A>, dołączenie tłumaczenia do macierzy transformacji.  
  
-   Rysuje elipsę tłumaczenia, obrócony piórem niebieski.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#167)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#167)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#167)]  
  
 Poniższa ilustracja przedstawia dane wyjściowe uruchomionych w poprzednim przykładzie kodu.  
  
 ![Przetłumaczona i przekształcone elipsy](~/add/media/ndp-tranlatetransform.png "przetłumaczona i przekształcone wielokropka")  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/9fef7451-bddf-4c68-9350-400d1f1f25a3">Systemy i przekształcenia współrzędnych</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f8e18d3-d2f5-460e-a8e3-2da891c301de">Używanie przekształceń w zarządzanym GDI+</related>
      </Docs>
    </Member>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.TranslateTransform : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.TranslateTransform (dx, dy, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="dx">Współrzędna x tłumaczenia.</param>
        <param name="dy">Współrzędna y tłumaczenia.</param>
        <param name="order">Członek <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> wyliczenie, które określa, czy tłumaczenie jest dołączony do macierzy transformacji.</param>
        <summary>Zmiany w układzie współrzędnych punktu początkowego, stosując określoną tłumaczenia macierzy transformacji <see cref="T:System.Drawing.Graphics" /> w określonej kolejności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacja tłumaczenia obejmuje mnożenie macierzy transformacji, macierz, w których część tłumaczenia jest `dx` i `dy` parametrów. Ta metoda dołącza lub dołącza macierzy transformacji z <xref:System.Drawing.Graphics> przez macierz tłumaczenia, zgodnie z opisem w `order` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Obraca macierzy transformacji świata formularza Windows o 30.0F stopni.  
  
-   Przenosi punkt początkowy obiekt grafiki, wywołując <xref:System.Drawing.Graphics.TranslateTransform%2A>, dołączanie tłumaczenie do macierzy transformacji świata.  
  
-   Rysuje elipsę obrócony, przetłumaczone piórem niebieski.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#168)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#168)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#168)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/9fef7451-bddf-4c68-9350-400d1f1f25a3">Systemy i przekształcenia współrzędnych</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f8e18d3-d2f5-460e-a8e3-2da891c301de">Używanie przekształceń w zarządzanym GDI+</related>
      </Docs>
    </Member>
    <Member MemberName="VisibleClipBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF VisibleClipBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF VisibleClipBounds" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.VisibleClipBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VisibleClipBounds As RectangleF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::RectangleF VisibleClipBounds { System::Drawing::RectangleF get(); };" />
      <MemberSignature Language="F#" Value="member this.VisibleClipBounds : System.Drawing.RectangleF" Usage="System.Drawing.Graphics.VisibleClipBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera prostokąt otaczający region widoczne wycinka <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>A <see cref="T:System.Drawing.RectangleF" /> strukturę, która reprezentuje prostokąt otaczający dla regionu widoczne wycinka <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jednostki na potrzeby wynikowego prostokąt określony przez <xref:System.Drawing.Graphics.PageUnit%2A> właściwości. Domyślna jednostka to pikseli. Element <xref:System.Drawing.Graphics> jest zwykle skojarzona z kontrolką pochodzenia krawędzi prostokąta. zostanie ona względem pola klienta tej kontrolki.  
  
 Obszar przycinania widoczny jest częścią obszaru przycinania tego wspólną <xref:System.Drawing.Graphics> i obszaru przycinania okna.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>