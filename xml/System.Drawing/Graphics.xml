<Type Name="Graphics" FullName="System.Drawing.Graphics">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e96e90a01a2c094dce05bf79dba1aba2a592354b" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69360224" /></Metadata><TypeSignature Language="C#" Value="public sealed class Graphics : MarshalByRefObject, IDisposable, System.Drawing.IDeviceContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Graphics extends System.MarshalByRefObject implements class System.Drawing.IDeviceContext, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Graphics" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Graphics&#xA;Inherits MarshalByRefObject&#xA;Implements IDeviceContext, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Graphics sealed : MarshalByRefObject, IDisposable, System::Drawing::IDeviceContext" />
  <TypeSignature Language="F#" Value="type Graphics = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable&#xA;    interface IDeviceContext" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.1</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Drawing.IDeviceContext</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Hermetyzuje powierzchnię rysowania GDI+. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics> Klasa zawiera metody rysowania obiektów na urządzeniu wyświetlającym. Element <xref:System.Drawing.Graphics> jest skojarzony z określonym kontekstem urządzenia.  
  
 Można uzyskać <xref:System.Drawing.Graphics> obiekt przez <xref:System.Windows.Forms.PaintEventArgs.Graphics%2A> <xref:System.Windows.Forms.Control?displayProperty=nameWithType> <xref:System.Windows.Forms.Control.CreateGraphics%2A?displayProperty=nameWithType> wywołanie metody w obiekcie, który dziedziczy z lub przez obsługę <xref:System.Windows.Forms.Control.Paint?displayProperty=nameWithType> zdarzenia kontrolki i uzyskanie dostępu do właściwości <xref:System.Windows.Forms.PaintEventArgs?displayProperty=nameWithType> klasy. Można również utworzyć <xref:System.Drawing.Graphics> obiekt z obrazu za <xref:System.Drawing.Graphics.FromImage%2A> pomocą metody. Aby uzyskać więcej informacji na temat <xref:System.Drawing.Graphics> tworzenia obiektu, [zobacz How to: Utwórz obiekty graficzne do rysowania](~/docs/framework/winforms/advanced/how-to-create-graphics-objects-for-drawing.md).  
  
 Możesz narysować wiele różnych kształtów i linii przy użyciu <xref:System.Drawing.Graphics> obiektu. Aby uzyskać więcej informacji na temat rysowania linii i kształtów, zobacz konkretną `Draw`metodę *graphicelement* dla linii lub kształtu, który chcesz narysować. Metody te obejmują <xref:System.Drawing.Graphics.DrawLine%2A> <xref:System.Drawing.Graphics.DrawArc%2A> ,<xref:System.Drawing.Graphics.DrawClosedCurve%2A> ,<xref:System.Drawing.Graphics.DrawPolygon%2A>,, i<xref:System.Drawing.Graphics.DrawRectangle%2A>. Aby uzyskać więcej informacji na temat rysowania linii i kształtów, zobacz [Używanie pióra do rysowania linii i kształtów](~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md) oraz [używania pędzla do wypełniania kształtów](~/docs/framework/winforms/advanced/using-a-brush-to-fill-shapes.md).  
  
 Możesz również rysować obrazy i ikony odpowiednio przy użyciu <xref:System.Drawing.Graphics.DrawImage%2A> metod i. <xref:System.Drawing.Graphics.DrawIcon%2A> Aby wykonać blok bitowy, Przenieś dane koloru z ekranu do powierzchni <xref:System.Drawing.Graphics> rysowania obiektu, zobacz. <xref:System.Drawing.Graphics.CopyFromScreen%2A> Aby uzyskać więcej informacji o sposobie rysowania obrazów przy użyciu <xref:System.Drawing.Graphics> obiektu, zobacz [Praca z obrazami, mapami bitowymi, ikonami i plikami](~/docs/framework/winforms/advanced/working-with-images-bitmaps-icons-and-metafiles.md).  
  
 Ponadto można manipulować systemem współrzędnych używanym przez <xref:System.Drawing.Graphics> obiekt. Aby uzyskać więcej informacji na temat układu współrzędnych i sposobu manipulowania nim, zobacz [koordynuj systemy i przekształcenia](~/docs/framework/winforms/advanced/coordinate-systems-and-transformations.md).  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> obiektu. Obiekt ma nazwę `e` i<xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. <xref:System.Windows.Forms.PaintEventArgs> Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG. Plik ma nazwę SampImag. jpg i znajduje się w folderze tego przykładu.  
  
-   Tworzy punkt, w którym ma zostać narysowany lewy górny róg obrazu.  
  
-   Rysuje obraz nieskalowanego na ekranie przy użyciu <xref:System.Drawing.Graphics> obiektu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#40)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#40)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#40)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/162861f9-f050-445e-8abb-b2c43a918b8b">Instrukcje: Tworzenie obiektów graficznych do rysowania</related>
    <related type="Article" href="https://msdn.microsoft.com/library/eb0f6d6f-9e52-4167-9592-ff4b82fb5869">Wprowadzenie do programowania grafiki</related>
    <related type="Article" href="https://msdn.microsoft.com/library/6207cad1-7a34-4bd6-bfc1-db823ca7a73e">Zarządzanie stanem obiektu graficznego</related>
  </Docs>
  <Members>
    <Member MemberName="AddMetafileComment">
      <MemberSignature Language="C#" Value="public void AddMetafileComment (byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddMetafileComment(unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.AddMetafileComment(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddMetafileComment (data As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddMetafileComment(cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.AddMetafileComment : byte[] -&gt; unit" Usage="graphics.AddMetafileComment data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="data">Tablica bajtów, która zawiera komentarz.</param>
        <summary>Dodaje komentarz do bieżącego <see cref="T:System.Drawing.Imaging.Metafile" />elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest prawidłowa tylko wtedy, <xref:System.Drawing.Graphics> <xref:System.Drawing.Imaging.Metafile>gdy jest ona skojarzona z.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms <xref:System.Windows.Forms.PaintEventArgs>i wymaga `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi <xref:System.Windows.Forms.Form> zdarzeń, a także `thisForm`dla przykładu. Kod wykonuje następujące czynności:  
  
-   Tworzy tymczasowy <xref:System.Drawing.Graphics> do tworzenia metapliku i `hdc`pobiera uchwyt do kontekstu urządzenia.  
  
-   Tworzy nowy metaplik przy użyciu `hdc`.  
  
-   Tworzy do wyświetlania metapliku <xref:System.Drawing.Imaging.Metafile>z. <xref:System.Drawing.Graphics>  
  
-   Rysuje prostokąt do metapliku.  
  
-   Dodaje komentarz do metapliku.  
  
-   <xref:System.Drawing.Graphics> Usuwa metaplik, który zamknie metaplik.  
  
-   Usuwa metaplik.  
  
-   Zwalnia tymczasowy `hdc`.  
  
-   Usuwa czas tymczasowy <xref:System.Drawing.Graphics>.  
  
-   Tworzy drugi metaplik z utworzonego wcześniej pliku.  
  
-   Rysuje metaplik na ekranie.  
  
-   Usuwa metaplik.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginContainer">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje kontener grafiki z bieżącym stanem tego <see cref="T:System.Drawing.Graphics" /> i otwiera i używa nowego kontenera grafiki.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer () As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer();" />
      <MemberSignature Language="F#" Value="member this.BeginContainer : unit -&gt; System.Drawing.Drawing2D.GraphicsContainer" Usage="graphics.BeginContainer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje kontener grafiki z bieżącym stanem tego <see cref="T:System.Drawing.Graphics" /> i otwiera i używa nowego kontenera grafiki.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> wartość reprezentującą stan tej <see cref="T:System.Drawing.Graphics" /> operacji w momencie wywołania metody.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej metody z <xref:System.Drawing.Graphics.EndContainer%2A> metodą tworzenia zagnieżdżonych kontenerów grafiki. Kontenery grafiki zachowują stan grafiki, takich jak przekształcenia, region przycinania i właściwości renderowania.  
  
 Po wywołaniu <xref:System.Drawing.Graphics.BeginContainer%2A> metody <xref:System.Drawing.Graphics>obiektu, blok informacji, który <xref:System.Drawing.Graphics> posiada stan jest umieszczony na stosie. <xref:System.Drawing.Graphics.BeginContainer%2A> Metoda zwracametodę,<xref:System.Drawing.Drawing2D.GraphicsContainer> która identyfikuje blok informacji. Gdy przekazujesz obiekt identyfikujący do <xref:System.Drawing.Graphics.EndContainer%2A> metody, blok informacji jest usuwany ze stosu i jest używany do <xref:System.Drawing.Graphics> przywracania stanu w momencie <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody.  
  
 Kontenery mogą być zagnieżdżane; oznacza to, że można wywołać <xref:System.Drawing.Graphics.BeginContainer%2A> metodę kilka razy przed <xref:System.Drawing.Graphics.EndContainer%2A> wywołaniem metody. Za każdym razem, gdy <xref:System.Drawing.Graphics.BeginContainer%2A> wywoływana jest metoda, blok informacji jest umieszczany na stosie i otrzymujesz dla bloku informacji. <xref:System.Drawing.Drawing2D.GraphicsContainer> Po przejściu jednego <xref:System.Drawing.Graphics.EndContainer%2A> z tych obiektów do metody <xref:System.Drawing.Graphics> jest on zwracany do stanu, w którym był w czasie <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody, które zwróciło określone <xref:System.Drawing.Drawing2D.GraphicsContainer>. Blok informacji umieszczony na stosie przez to <xref:System.Drawing.Graphics.BeginContainer%2A> wywołanie metody jest usuwany ze stosu, a wszystkie bloki informacji umieszczane na stosie po tym <xref:System.Drawing.Graphics.BeginContainer%2A> wywołaniu metody również zostaną usunięte.  
  
 Wywołania metody umieszczają bloki informacji w tym samym stosie co wywołania <xref:System.Drawing.Graphics.BeginContainer%2A> metody. <xref:System.Drawing.Graphics.Save%2A> Podobnie jak <xref:System.Drawing.Graphics.EndContainer%2A> wywołanie metody jest sparowane <xref:System.Drawing.Graphics.BeginContainer%2A> z wywołaniem metody, <xref:System.Drawing.Graphics.Restore%2A> wywołanie metody jest sparowane z <xref:System.Drawing.Graphics.Save%2A> wywołaniem metody.  
  
 Po wywołaniu <xref:System.Drawing.Graphics.EndContainer%2A> metody wszystkie bloki informacji umieszczane na stosie ( <xref:System.Drawing.Graphics.Save%2A> przez metodę lub przez <xref:System.Drawing.Graphics.BeginContainer%2A> <xref:System.Drawing.Graphics.BeginContainer%2A> metodę) po odpowiednim wywołaniu metody są usuwane ze stosu. Podobnie po wywołaniu <xref:System.Drawing.Graphics.Restore%2A> metody wszystkie bloki informacji umieszczane na stosie ( <xref:System.Drawing.Graphics.Save%2A> przez metodę lub przez <xref:System.Drawing.Graphics.BeginContainer%2A> <xref:System.Drawing.Graphics.Save%2A> metodę) po odpowiednim wywołaniu metody są usuwane ze stosu.  
  
 Stan grafiki ustanowiony przez <xref:System.Drawing.Graphics.BeginContainer%2A> metodę obejmuje jakość renderowania domyślnego stanu grafiki; wszelkie zmiany stanu jakości renderowania istniejące podczas wywoływania metody są resetowane do wartości domyślnych.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Otwiera nowy kontener grafiki i zapisuje stary kontener.  
  
-   Tłumaczy współrzędne świata w kontenerze.  
  
-   Wypełnia czerwony prostokąt w (tłumaczone współrzędne) nowego kontenera.  
  
-   Zamyka nowy kontener i przywraca zapisany kontener.  
  
-   Wypełnia zielony prostokąt (do nieprzetłumaczonych współrzędnych) zapisanego kontenera.  
  
 Wynikiem jest zielony prostokąt, który opiera się na czerwonym prostokącie o tym samym rozmiarze.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.Rectangle dstrect, System.Drawing.Rectangle srcrect, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer(valuetype System.Drawing.Rectangle dstrect, valuetype System.Drawing.Rectangle srcrect, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer (dstrect As Rectangle, srcrect As Rectangle, unit As GraphicsUnit) As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer(System::Drawing::Rectangle dstrect, System::Drawing::Rectangle srcrect, System::Drawing::GraphicsUnit unit);" />
      <MemberSignature Language="F#" Value="member this.BeginContainer : System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; System.Drawing.Drawing2D.GraphicsContainer" Usage="graphics.BeginContainer (dstrect, srcrect, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dstrect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcrect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="dstrect"><see cref="T:System.Drawing.Rectangle" />Struktura, która razem z <paramref name="srcrect" /> parametrem określa przekształcenie skali dla kontenera.</param>
        <param name="srcrect"><see cref="T:System.Drawing.Rectangle" />Struktura, która razem z <paramref name="dstrect" /> parametrem określa przekształcenie skali dla kontenera.</param>
        <param name="unit"><see cref="T:System.Drawing.GraphicsUnit" /> Składowa wyliczenia, która określa jednostkę miary dla kontenera.</param>
        <summary>Zapisuje kontener grafiki z bieżącym stanem tego <see cref="T:System.Drawing.Graphics" /> i otwiera i używa nowego kontenera grafiki z określoną przekształceniem skalowania.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> wartość reprezentującą stan tej <see cref="T:System.Drawing.Graphics" /> operacji w momencie wywołania metody.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej metody z <xref:System.Drawing.Graphics.EndContainer%2A> metodą tworzenia zagnieżdżonych kontenerów grafiki. Kontenery grafiki zachowują stan grafiki, takich jak przekształcenia, region przycinania i właściwości renderowania.  
  
 Po wywołaniu <xref:System.Drawing.Graphics.BeginContainer%2A> metody <xref:System.Drawing.Graphics>obiektu, blok informacji, który <xref:System.Drawing.Graphics> posiada stan jest umieszczony na stosie. <xref:System.Drawing.Graphics.BeginContainer%2A> Metoda zwracametodę,<xref:System.Drawing.Drawing2D.GraphicsContainer> która identyfikuje blok informacji. Gdy przekazujesz obiekt identyfikujący do <xref:System.Drawing.Graphics.EndContainer%2A> metody, blok informacji jest usuwany ze stosu i jest używany do <xref:System.Drawing.Graphics> przywracania stanu w momencie <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody.  
  
 Kontenery mogą być zagnieżdżane; oznacza to, że można wywołać <xref:System.Drawing.Graphics.BeginContainer%2A> metodę kilka razy przed <xref:System.Drawing.Graphics.EndContainer%2A> wywołaniem metody. Za każdym razem, gdy <xref:System.Drawing.Graphics.BeginContainer%2A> wywoływana jest metoda, blok informacji jest umieszczany na stosie i otrzymujesz dla bloku informacji. <xref:System.Drawing.Drawing2D.GraphicsContainer> Po przejściu jednego <xref:System.Drawing.Graphics.EndContainer%2A> z tych obiektów do metody <xref:System.Drawing.Graphics> jest on zwracany do stanu, w którym był w czasie <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody, które zwróciło określone <xref:System.Drawing.Drawing2D.GraphicsContainer>. Blok informacji umieszczony na stosie przez to <xref:System.Drawing.Graphics.BeginContainer%2A> wywołanie metody jest usuwany ze stosu, a wszystkie bloki informacji umieszczane na stosie po tym <xref:System.Drawing.Graphics.BeginContainer%2A> wywołaniu metody również zostaną usunięte.  
  
 Wywołania metody umieszczają bloki informacji w tym samym stosie co wywołania <xref:System.Drawing.Graphics.BeginContainer%2A> metody. <xref:System.Drawing.Graphics.Save%2A> Podobnie jak <xref:System.Drawing.Graphics.EndContainer%2A> wywołanie metody jest sparowane <xref:System.Drawing.Graphics.BeginContainer%2A> z wywołaniem metody, <xref:System.Drawing.Graphics.Restore%2A> wywołanie metody jest sparowane z <xref:System.Drawing.Graphics.Save%2A> wywołaniem metody.  
  
 Po wywołaniu <xref:System.Drawing.Graphics.EndContainer%2A> metody wszystkie bloki informacji umieszczane na stosie ( <xref:System.Drawing.Graphics.Save%2A> przez metodę lub przez <xref:System.Drawing.Graphics.BeginContainer%2A> <xref:System.Drawing.Graphics.BeginContainer%2A> metodę) po odpowiednim wywołaniu metody są usuwane ze stosu. Podobnie po wywołaniu <xref:System.Drawing.Graphics.Restore%2A> metody wszystkie bloki informacji umieszczane na stosie ( <xref:System.Drawing.Graphics.Save%2A> przez metodę lub przez <xref:System.Drawing.Graphics.BeginContainer%2A> <xref:System.Drawing.Graphics.Save%2A> metodę) po odpowiednim wywołaniu metody są usuwane ze stosu.  
  
 Ta metoda określa przekształcenie skali dla nowego kontenera grafiki z `dstrect` parametrami i. `srcrect` Skala jest równa transformacji, która w przypadku zastosowania do `srcrect`, powoduje, że w `dstrect`wyniku.  
  
 Stan grafiki ustanowiony przez <xref:System.Drawing.Graphics.BeginContainer%2A> metodę obejmuje jakość renderowania domyślnego stanu grafiki; wszelkie zmiany stanu jakości renderowania istniejące podczas wywoływania metody są resetowane do wartości domyślnych.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy dwa prostokąty, aby określić przekształcenie skali dla nowego kontenera.  
  
-   Otwiera nowy kontener grafiki i zapisuje stary kontener.  
  
-   Wypełnianie czerwonego prostokąta w (skalowane współrzędnej) nowego kontenera.  
  
-   Zamyka nowy kontener i przywraca zapisany kontener.  
  
-   Wypełnia zielony prostokąt (do współrzędnych nieskalowanych) zapisanego kontenera.  
  
 Wynikiem jest zielony prostokąt, który jest zależny od mniejszego czerwonego prostokąta.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.RectangleF dstrect, System.Drawing.RectangleF srcrect, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer(valuetype System.Drawing.RectangleF dstrect, valuetype System.Drawing.RectangleF srcrect, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer (dstrect As RectangleF, srcrect As RectangleF, unit As GraphicsUnit) As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer(System::Drawing::RectangleF dstrect, System::Drawing::RectangleF srcrect, System::Drawing::GraphicsUnit unit);" />
      <MemberSignature Language="F#" Value="member this.BeginContainer : System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; System.Drawing.Drawing2D.GraphicsContainer" Usage="graphics.BeginContainer (dstrect, srcrect, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dstrect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcrect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="dstrect"><see cref="T:System.Drawing.RectangleF" />Struktura, która razem z <paramref name="srcrect" /> parametrem określa przekształcenie skali dla nowego kontenera grafiki.</param>
        <param name="srcrect"><see cref="T:System.Drawing.RectangleF" />Struktura, która razem z <paramref name="dstrect" /> parametrem określa przekształcenie skali dla nowego kontenera grafiki.</param>
        <param name="unit"><see cref="T:System.Drawing.GraphicsUnit" /> Składowa wyliczenia, która określa jednostkę miary dla kontenera.</param>
        <summary>Zapisuje kontener grafiki z bieżącym stanem tego <see cref="T:System.Drawing.Graphics" /> i otwiera i używa nowego kontenera grafiki z określoną przekształceniem skalowania.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> wartość reprezentującą stan tej <see cref="T:System.Drawing.Graphics" /> operacji w momencie wywołania metody.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej metody z <xref:System.Drawing.Graphics.EndContainer%2A> metodą tworzenia zagnieżdżonych kontenerów grafiki. Kontenery grafiki zachowują stan grafiki, takich jak przekształcenia, region przycinania i właściwości renderowania.  
  
 Po wywołaniu <xref:System.Drawing.Graphics.BeginContainer%2A> metody <xref:System.Drawing.Graphics>obiektu, blok informacji, który <xref:System.Drawing.Graphics> posiada stan jest umieszczony na stosie. <xref:System.Drawing.Graphics.BeginContainer%2A> Metoda zwracametodę,<xref:System.Drawing.Drawing2D.GraphicsContainer> która identyfikuje blok informacji. Gdy przekazujesz obiekt identyfikujący do <xref:System.Drawing.Graphics.EndContainer%2A> metody, blok informacji jest usuwany ze stosu i jest używany do <xref:System.Drawing.Graphics> przywracania stanu w momencie <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody.  
  
 Kontenery mogą być zagnieżdżane; oznacza to, że można wywołać <xref:System.Drawing.Graphics.BeginContainer%2A> metodę kilka razy przed <xref:System.Drawing.Graphics.EndContainer%2A> wywołaniem metody. Za każdym razem, gdy <xref:System.Drawing.Graphics.BeginContainer%2A> wywoływana jest metoda, blok informacji jest umieszczany na stosie i otrzymujesz dla bloku informacji. <xref:System.Drawing.Drawing2D.GraphicsContainer> Po przejściu jednego <xref:System.Drawing.Graphics.EndContainer%2A> z tych obiektów do metody <xref:System.Drawing.Graphics> jest on zwracany do stanu, w którym był w czasie <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody, które zwróciło określone <xref:System.Drawing.Drawing2D.GraphicsContainer>. Blok informacji umieszczony na stosie przez to <xref:System.Drawing.Graphics.BeginContainer%2A> wywołanie metody jest usuwany ze stosu, a wszystkie bloki informacji umieszczane na stosie po tym <xref:System.Drawing.Graphics.BeginContainer%2A> wywołaniu metody również zostaną usunięte.  
  
 Wywołania metody umieszczają bloki informacji w tym samym stosie co wywołania <xref:System.Drawing.Graphics.BeginContainer%2A> metody. <xref:System.Drawing.Graphics.Save%2A> Podobnie jak <xref:System.Drawing.Graphics.EndContainer%2A> wywołanie metody jest sparowane <xref:System.Drawing.Graphics.BeginContainer%2A> z wywołaniem metody, <xref:System.Drawing.Graphics.Restore%2A> wywołanie metody jest sparowane z <xref:System.Drawing.Graphics.Save%2A> wywołaniem metody.  
  
 Po wywołaniu <xref:System.Drawing.Graphics.EndContainer%2A> metody wszystkie bloki informacji umieszczane na stosie ( `Save` przez metodę lub przez <xref:System.Drawing.Graphics.BeginContainer%2A> <xref:System.Drawing.Graphics.BeginContainer%2A> metodę) po odpowiednim wywołaniu metody są usuwane ze stosu. Podobnie po wywołaniu <xref:System.Drawing.Graphics.Restore%2A> metody wszystkie bloki informacji umieszczane na stosie ( <xref:System.Drawing.Graphics.Save%2A> przez metodę lub przez <xref:System.Drawing.Graphics.BeginContainer%2A> <xref:System.Drawing.Graphics.Save%2A> metodę) po odpowiednim wywołaniu metody są usuwane ze stosu.  
  
 Ta metoda określa przekształcenie skali dla nowego kontenera grafiki z `dstrect` parametrami i. `srcrect` Skala jest równa transformacji, która w przypadku zastosowania do `srcrect`, powoduje, że w `dstrect`wyniku.  
  
 Stan grafiki ustanowiony przez <xref:System.Drawing.Graphics.BeginContainer%2A> metodę obejmuje jakość renderowania domyślnego stanu grafiki; wszelkie zmiany stanu jakości renderowania istniejące podczas wywoływania metody są resetowane do wartości domyślnych.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy dwa prostokąty, aby określić przekształcenie skali dla nowego kontenera.  
  
-   Otwiera nowy kontener grafiki i zapisuje stary kontener.  
  
-   Wypełnianie czerwonego prostokąta w (skalowane współrzędnej) nowego kontenera.  
  
-   Zamyka nowy kontener i przywraca zapisany kontener.  
  
-   Wypełnia zielony prostokąt (do współrzędnych nieskalowanych) zapisanego kontenera.  
  
 Wynikiem jest zielony prostokąt, który jest zależny od mniejszego czerwonego prostokąta.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear(valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Clear(System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear(System::Drawing::Color color);" />
      <MemberSignature Language="F#" Value="member this.Clear : System.Drawing.Color -&gt; unit" Usage="graphics.Clear color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color"><see cref="T:System.Drawing.Color" />Struktura, która reprezentuje kolor tła powierzchni rysunku.</param>
        <summary>Czyści całą powierzchnię rysowania i wypełnia ją określonym kolorem tła.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.Clear%2A> Metoda czyści stan obiektu graficznego i nie należy go wywoływać, gdy nie można zaktualizować obiektu graficznego. Na przykład jeśli <xref:System.Drawing.Graphics.Clear%2A> Metoda jest wywoływana na bezpiecznym pulpicie w sesji serwera terminali <xref:System.Runtime.InteropServices.ExternalException> , <xref:System.Drawing.Graphics> może wystąpić, pozostawiając obiekt w stanie niespójnym.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod czyści powierzchnię <xref:System.Drawing.Graphics> rysowania i ustawia kolor tła na kolor zielonomodry zdefiniowany przez system.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Drawing.Region Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Region Clip" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Property Clip As Region" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Region ^ Clip { System::Drawing::Region ^ get(); void set(System::Drawing::Region ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Clip : System.Drawing.Region with get, set" Usage="System.Drawing.Graphics.Clip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Region</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ograniczenie <see cref="T:System.Drawing.Region" /> obszaru rysowania tego <see cref="T:System.Drawing.Graphics" />elementu.</summary>
        <value>A <see cref="T:System.Drawing.Region" /> , która ogranicza część tego <see cref="T:System.Drawing.Graphics" /> elementu, która jest obecnie dostępna do rysowania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Modyfikowanie obiektu zwróconego <xref:System.Drawing.Graphics.Clip%2A> przez właściwość nie <xref:System.Drawing.Graphics> ma wpływu na kolejne rysowanie obiektu. <xref:System.Drawing.Region> Aby zmienić region przycinania, Zastąp <xref:System.Drawing.Graphics.Clip%2A> wartość właściwości nowym <xref:System.Drawing.Region> obiektem. Aby określić, czy region wycinka jest nieskończony, Pobierz <xref:System.Drawing.Graphics.Clip%2A> Właściwość i <xref:System.Drawing.Region.IsInfinite%2A> Wywołaj metodę.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Drawing.Graphics.Clip%2A> właściwości. Ten przykład jest przeznaczony do użycia z Windows Forms. Wklej kod do formularza i Wywołaj `SetAndFillClip` metodę podczas obsługi <xref:System.Windows.Forms.Control.Paint> zdarzenia formularza, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.GraphicsProperties#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#4)]
 [!code-vb[System.Drawing.GraphicsProperties#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF ClipBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF ClipBounds" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.ClipBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClipBounds As RectangleF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::RectangleF ClipBounds { System::Drawing::RectangleF get(); };" />
      <MemberSignature Language="F#" Value="member this.ClipBounds : System.Drawing.RectangleF" Usage="System.Drawing.Graphics.ClipBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera strukturę, która wiąże się z regionem <see cref="T:System.Drawing.Graphics" />przycinania. <see cref="T:System.Drawing.RectangleF" /></summary>
        <value>Struktura, która reprezentuje prostokąt ograniczający dla tego <see cref="T:System.Drawing.Graphics" />regionu wycinka. <see cref="T:System.Drawing.RectangleF" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jednostka dla tworzonego prostokąta jest oznaczona przez <xref:System.Drawing.Graphics.PageUnit%2A> właściwość. Jednostka domyślna to piksele. Element <xref:System.Drawing.Graphics> jest zazwyczaj skojarzony z kontrolką, a pochodzenie prostokąta będzie względem obszaru klienta tej kontrolki.  
  
 Jeśli region przycinania jest nieskończony, <xref:System.Drawing.Graphics.ClipBounds%2A> Właściwość zwraca duży prostokąt bez znaczenia. Aby określić, czy region wycinka jest nieskończony, Pobierz <xref:System.Drawing.Graphics.Clip%2A> Właściwość i <xref:System.Drawing.Region.IsInfinite%2A> Wywołaj metodę.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositingMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CompositingMode CompositingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.CompositingMode CompositingMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.CompositingMode" />
      <MemberSignature Language="VB.NET" Value="Public Property CompositingMode As CompositingMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CompositingMode CompositingMode { System::Drawing::Drawing2D::CompositingMode get(); void set(System::Drawing::Drawing2D::CompositingMode value); };" />
      <MemberSignature Language="F#" Value="member this.CompositingMode : System.Drawing.Drawing2D.CompositingMode with get, set" Usage="System.Drawing.Graphics.CompositingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CompositingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość określającą sposób rysowania <see cref="T:System.Drawing.Graphics" />obrazów złożonych.</summary>
        <value>Ta właściwość określa element członkowski <see cref="T:System.Drawing.Drawing2D.CompositingMode" /> wyliczenia. Wartość domyślna to <see cref="F:System.Drawing.Drawing2D.CompositingMode.SourceOver" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tryb składania określa, czy piksele z obrazu źródłowego zastępują lub łączą się z pikselami w tle.  
  
> [!NOTE]
>  Nie <xref:System.Drawing.Graphics.CompositingMode%2A> należy używać <xref:System.Drawing.Drawing2D.CompositingMode.SourceCopy> wartości właściwości, gdy <xref:System.Drawing.Graphics.TextRenderingHint%2A> właściwość jest ustawiona na <xref:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit>. Może wystąpić wyjątek lub obraz może nie być poprawnie renderowany.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositingQuality">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CompositingQuality CompositingQuality { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.CompositingQuality CompositingQuality" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.CompositingQuality" />
      <MemberSignature Language="VB.NET" Value="Public Property CompositingQuality As CompositingQuality" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CompositingQuality CompositingQuality { System::Drawing::Drawing2D::CompositingQuality get(); void set(System::Drawing::Drawing2D::CompositingQuality value); };" />
      <MemberSignature Language="F#" Value="member this.CompositingQuality : System.Drawing.Drawing2D.CompositingQuality with get, set" Usage="System.Drawing.Graphics.CompositingQuality" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CompositingQuality</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia jakość renderowania obrazów złożonych, które są rysowane na tym <see cref="T:System.Drawing.Graphics" />rysunku.</summary>
        <value>Ta właściwość określa element członkowski <see cref="T:System.Drawing.Drawing2D.CompositingQuality" /> wyliczenia. Wartość domyślna to <see cref="F:System.Drawing.Drawing2D.CompositingQuality.Default" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jakość składania określa poziom jakości renderowania obrazów złożonych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyFromScreen">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wykonuje transfer bitów danych koloru z ekranu do powierzchni <see cref="T:System.Drawing.Graphics" />rysowania.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(valuetype System.Drawing.Point upperLeftSource, valuetype System.Drawing.Point upperLeftDestination, valuetype System.Drawing.Size blockRegionSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFromScreen (upperLeftSource As Point, upperLeftDestination As Point, blockRegionSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(System::Drawing::Point upperLeftSource, System::Drawing::Point upperLeftDestination, System::Drawing::Size blockRegionSize);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : System.Drawing.Point * System.Drawing.Point * System.Drawing.Size -&gt; unit" Usage="graphics.CopyFromScreen (upperLeftSource, upperLeftDestination, blockRegionSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upperLeftSource" Type="System.Drawing.Point" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="upperLeftDestination" Type="System.Drawing.Point" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="upperLeftSource">Punkt w lewym górnym rogu prostokąta źródłowego.</param>
        <param name="upperLeftDestination">Punkt w lewym górnym rogu prostokąta docelowego.</param>
        <param name="blockRegionSize">Rozmiar obszaru, który ma zostać przeniesiony.</param>
        <summary>Wykonuje blok bitowego transferu danych koloru, odpowiadający prostokąt pikseli, od ekranu do powierzchni <see cref="T:System.Drawing.Graphics" />rysowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> Metody są przydatne w przypadku warstwowego jednego obrazu na innym. Aby określić sposób mieszania kolorów źródłowych i docelowych, należy użyć jednej z <xref:System.Drawing.Graphics.CopyFromScreen%2A> metod, które <xref:System.Drawing.CopyPixelOperation> pobierają parametr.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób używania <xref:System.Drawing.Graphics.CopyFromScreen%2A> metody. Aby uruchomić ten przykład, wklej go do formularza systemu Windows. Obsługuj <xref:System.Windows.Forms.Control.Paint> zdarzenie formularza i `CopyPixels1` Wywołaj metodę z <xref:System.Windows.Forms.Control.Paint> metody obsługi zdarzeń, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#4)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Operacja nie powiodła się.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">w celu uzyskania dostępu do wszystkich okien. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/c8dff5f8-f56a-4c07-ae31-64643b31f8fc">Instrukcje: Drukowanie formularza systemu Windows</related>
        <related type="Article" href="https://msdn.microsoft.com/library/33b76910-13a3-4521-be98-5c097341ae3b">Instrukcje: Kopiuj piksele w celu zmniejszenia migotania w Windows Forms</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(valuetype System.Drawing.Point upperLeftSource, valuetype System.Drawing.Point upperLeftDestination, valuetype System.Drawing.Size blockRegionSize, valuetype System.Drawing.CopyPixelOperation copyPixelOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size,System.Drawing.CopyPixelOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(System::Drawing::Point upperLeftSource, System::Drawing::Point upperLeftDestination, System::Drawing::Size blockRegionSize, System::Drawing::CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : System.Drawing.Point * System.Drawing.Point * System.Drawing.Size * System.Drawing.CopyPixelOperation -&gt; unit" Usage="graphics.CopyFromScreen (upperLeftSource, upperLeftDestination, blockRegionSize, copyPixelOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upperLeftSource" Type="System.Drawing.Point" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="upperLeftDestination" Type="System.Drawing.Point" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="copyPixelOperation" Type="System.Drawing.CopyPixelOperation" Index="3" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="upperLeftSource">Punkt w lewym górnym rogu prostokąta źródłowego.</param>
        <param name="upperLeftDestination">Punkt w lewym górnym rogu prostokąta docelowego.</param>
        <param name="blockRegionSize">Rozmiar obszaru, który ma zostać przeniesiony.</param>
        <param name="copyPixelOperation">Jedna z <see cref="T:System.Drawing.CopyPixelOperation" /> wartości.</param>
        <summary>Wykonuje blok bitowego transferu danych koloru, odpowiadający prostokąt pikseli, od ekranu do powierzchni <see cref="T:System.Drawing.Graphics" />rysowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> Metody są przydatne w przypadku warstwowego jednego obrazu na innym. `copyPixelOperation` Parametr pozwala określić, czy i w jaki sposób kolory źródłowe mają być mieszane z kolorami w obszarze docelowym.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób używania <xref:System.Drawing.Graphics.CopyFromScreen%2A> metody. Aby uruchomić ten przykład, wklej go do formularza systemu Windows. Obsługuj <xref:System.Windows.Forms.Control.Paint> zdarzenie formularza i `CopyPixels2` Wywołaj metodę z <xref:System.Windows.Forms.Control.Paint> metody obsługi zdarzeń, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#5)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="copyPixelOperation" />nie jest członkiem <see cref="T:System.Drawing.CopyPixelOperation" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Operacja nie powiodła się.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">w celu uzyskania dostępu do wszystkich okien. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/c8dff5f8-f56a-4c07-ae31-64643b31f8fc">Instrukcje: Drukowanie formularza systemu Windows</related>
        <related type="Article" href="https://msdn.microsoft.com/library/33b76910-13a3-4521-be98-5c097341ae3b">Instrukcje: Kopiuj piksele w celu zmniejszenia migotania w Windows Forms</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(int32 sourceX, int32 sourceY, int32 destinationX, int32 destinationY, valuetype System.Drawing.Size blockRegionSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFromScreen (sourceX As Integer, sourceY As Integer, destinationX As Integer, destinationY As Integer, blockRegionSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, System::Drawing::Size blockRegionSize);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : int * int * int * int * System.Drawing.Size -&gt; unit" Usage="graphics.CopyFromScreen (sourceX, sourceY, destinationX, destinationY, blockRegionSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceX" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="sourceY" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="destinationX" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="destinationY" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" Index="4" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceX">Współrzędna x punktu w lewym górnym rogu prostokąta źródłowego.</param>
        <param name="sourceY">Współrzędna y punktu w lewym górnym rogu prostokąta źródłowego.</param>
        <param name="destinationX">Współrzędna x punktu w lewym górnym rogu prostokąta docelowego.</param>
        <param name="destinationY">Współrzędna y punktu w lewym górnym rogu prostokąta docelowego.</param>
        <param name="blockRegionSize">Rozmiar obszaru, który ma zostać przeniesiony.</param>
        <summary>Wykonuje blok bitowego transferu danych koloru, odpowiadający prostokąt pikseli, od ekranu do powierzchni <see cref="T:System.Drawing.Graphics" />rysowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> Metody są przydatne w przypadku warstwowego jednego obrazu na innym. Aby określić sposób mieszania kolorów źródłowych i docelowych, należy użyć jednej z <xref:System.Drawing.Graphics.CopyFromScreen%2A> metod, które <xref:System.Drawing.CopyPixelOperation> pobierają parametr.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Drawing.Graphics.CopyFromScreen%2A> jak używać do drukowania kopii bieżącego formularza.  
  
 [!code-csharp[System.Drawing.Graphics.CopyFromScreen#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Graphics.CopyFromScreen/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Graphics.CopyFromScreen#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Graphics.CopyFromScreen/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Operacja nie powiodła się.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">w celu uzyskania dostępu do wszystkich okien. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/c8dff5f8-f56a-4c07-ae31-64643b31f8fc">Instrukcje: Drukowanie formularza systemu Windows</related>
        <related type="Article" href="https://msdn.microsoft.com/library/33b76910-13a3-4521-be98-5c097341ae3b">Instrukcje: Kopiuj piksele w celu zmniejszenia migotania w Windows Forms</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(int32 sourceX, int32 sourceY, int32 destinationX, int32 destinationY, valuetype System.Drawing.Size blockRegionSize, valuetype System.Drawing.CopyPixelOperation copyPixelOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size,System.Drawing.CopyPixelOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, System::Drawing::Size blockRegionSize, System::Drawing::CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : int * int * int * int * System.Drawing.Size * System.Drawing.CopyPixelOperation -&gt; unit" Usage="graphics.CopyFromScreen (sourceX, sourceY, destinationX, destinationY, blockRegionSize, copyPixelOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceX" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="sourceY" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="destinationX" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="destinationY" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" Index="4" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="copyPixelOperation" Type="System.Drawing.CopyPixelOperation" Index="5" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceX">Współrzędna x punktu w lewym górnym rogu prostokąta źródłowego.</param>
        <param name="sourceY">Współrzędna y punktu w lewym górnym rogu prostokąta źródłowego.</param>
        <param name="destinationX">Współrzędna x punktu w lewym górnym rogu prostokąta docelowego.</param>
        <param name="destinationY">Współrzędna y punktu w lewym górnym rogu prostokąta docelowego.</param>
        <param name="blockRegionSize">Rozmiar obszaru, który ma zostać przeniesiony.</param>
        <param name="copyPixelOperation">Jedna z <see cref="T:System.Drawing.CopyPixelOperation" /> wartości.</param>
        <summary>Wykonuje blok bitowego transferu danych koloru, odpowiadający prostokąt pikseli, od ekranu do powierzchni <see cref="T:System.Drawing.Graphics" />rysowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> Metody są przydatne w przypadku warstwowego jednego obrazu na innym. `copyPixelOperation` Parametr pozwala określić, czy i w jaki sposób kolory źródłowe mają być mieszane z kolorami w obszarze docelowym.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób używania <xref:System.Drawing.Graphics.CopyFromScreen%2A> metody. Aby uruchomić ten przykład, wklej go do formularza systemu Windows. Obsługuj <xref:System.Windows.Forms.Control.Paint> zdarzenie formularza i `CopyPixels4` Wywołaj metodę z <xref:System.Windows.Forms.Control.Paint> metody obsługi zdarzeń, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#7)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="copyPixelOperation" />nie jest członkiem <see cref="T:System.Drawing.CopyPixelOperation" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Operacja nie powiodła się.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">w celu uzyskania dostępu do wszystkich okien. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/c8dff5f8-f56a-4c07-ae31-64643b31f8fc">Instrukcje: Drukowanie formularza systemu Windows</related>
        <related type="Article" href="https://msdn.microsoft.com/library/33b76910-13a3-4521-be98-5c097341ae3b">Instrukcje: Kopiuj piksele w celu zmniejszenia migotania w Windows Forms</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="graphics.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszystkie zasoby używane przez ten <see cref="T:System.Drawing.Graphics" />program.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie <xref:System.Drawing.Graphics.Dispose%2A> zezwala na przydzielenie zasobów używanych <xref:System.Drawing.Graphics> przez ten program do innych celów.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   <xref:System.Drawing.Image> Tworzy z pliku graficznego SampImag. jpg w przykładowym katalogu.  
  
-   <xref:System.Drawing.Graphics> Tworzy<xref:System.Drawing.Image>z.  
  
-   Zmienia obraz, wypełniając prostokąt wewnątrz niego.  
  
-   Rysuje <xref:System.Drawing.Image> na ekranie.  
  
-   Zwalnia utworzony <xref:System.Drawing.Graphics>.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#6)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiX">
      <MemberSignature Language="C#" Value="public float DpiX { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DpiX" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.DpiX" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DpiX As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float DpiX { float get(); };" />
      <MemberSignature Language="F#" Value="member this.DpiX : single" Usage="System.Drawing.Graphics.DpiX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera rozdzielczość <see cref="T:System.Drawing.Graphics" />w poziomie.</summary>
        <value>Wartość w punktach na cal dla rozdzielczości poziomej obsługiwanej przez ten <see cref="T:System.Drawing.Graphics" />program.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat tworzenia aplikacji o wysokiej rozdzielczości, zobacz  
  
 [Wysoka wartość DPI](https://go.microsoft.com/fwlink/?LinkId=159804).  
  
   
  
## Examples  
 Poniższa metoda pokazuje użycie <xref:System.Drawing.Graphics.DpiX%2A> właściwości i. <xref:System.Drawing.Graphics.DpiY%2A> Ten przykład został zaprojektowany do użycia z formularzem systemu Windows. Aby uruchomić ten przykład, wklej go w postaci <xref:System.Windows.Forms.ListBox> zawierającej nazwę ListBox1 i Wywołaj tę metodę z konstruktora formularza.  
  
 [!code-cpp[System.Drawing.MiscExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.MiscExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.MiscExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=159804">Wysoka wartość DPI</related>
      </Docs>
    </Member>
    <Member MemberName="DpiY">
      <MemberSignature Language="C#" Value="public float DpiY { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DpiY" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.DpiY" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DpiY As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float DpiY { float get(); };" />
      <MemberSignature Language="F#" Value="member this.DpiY : single" Usage="System.Drawing.Graphics.DpiY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera rozdzielczość <see cref="T:System.Drawing.Graphics" />w pionie.</summary>
        <value>Wartość w punktach na cal dla rozdzielczości w pionie obsługiwanej przez ten <see cref="T:System.Drawing.Graphics" />program.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat tworzenia aplikacji o wysokiej rozdzielczości, zobacz  
  
 [Wysoka wartość DPI](https://go.microsoft.com/fwlink/?LinkId=159804).  
  
   
  
## Examples  
 Poniższa metoda pokazuje użycie <xref:System.Drawing.Graphics.DpiX%2A> właściwości i. <xref:System.Drawing.Graphics.DpiY%2A> Ten przykład został zaprojektowany do użycia z formularzem systemu Windows. Aby uruchomić ten przykład, wklej go w postaci <xref:System.Windows.Forms.ListBox> zawierającej nazwę ListBox1 i Wywołaj tę metodę z konstruktora formularza.  
  
 [!code-cpp[System.Drawing.MiscExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.MiscExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.MiscExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=159804">Wysoka wartość DPI</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawArc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje łuk reprezentujący część wielokropka określoną przez parę współrzędnych, Szerokość i wysokość.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * System.Drawing.Rectangle * single * single -&gt; unit" Usage="graphics.DrawArc (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl łuku.</param>
        <param name="rect"><see cref="T:System.Drawing.RectangleF" />Struktura, która definiuje granice wielokropka.</param>
        <param name="startAngle">Kąt w stopniach mierzony w prawo od osi x do punktu początkowego łuku.</param>
        <param name="sweepAngle">Kąt w stopniach mierzony w prawo <paramref name="startAngle" /> od parametru do punktu końcowego łuku.</param>
        <summary>Rysuje łuk reprezentujący fragment elipsy określony przez <see cref="T:System.Drawing.Rectangle" /> strukturę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do rysowania łuku, który jest częścią obwodu elipsy. Elipsa jest definiowana przez granice prostokąta. Łuk jest częścią obwodu elipsy `startAngle` między parametrem `startAngle`  +  `sweepAngle` i parametrami.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy prostokąt, który jest powiązany z elipsą.  
  
-   Definiuje kąt rozpoczęcia (45 stopni) i odchylenia (270 stopni).  
  
-   Rysuje Łuk eliptyczny do ekranu.  
  
 Wynikiem jest wielokropek wielokropka, który nie zawiera segmentu między + a-45 stopni osi x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * System.Drawing.RectangleF * single * single -&gt; unit" Usage="graphics.DrawArc (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl łuku.</param>
        <param name="rect"><see cref="T:System.Drawing.RectangleF" />Struktura, która definiuje granice wielokropka.</param>
        <param name="startAngle">Kąt w stopniach mierzony w prawo od osi x do punktu początkowego łuku.</param>
        <param name="sweepAngle">Kąt w stopniach mierzony w prawo <paramref name="startAngle" /> od parametru do punktu końcowego łuku.</param>
        <summary>Rysuje łuk reprezentujący fragment elipsy określony przez <see cref="T:System.Drawing.RectangleF" /> strukturę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do rysowania łuku, który jest częścią obwodu elipsy. Elipsa jest definiowana przez granice prostokąta. Łuk jest częścią obwodu elipsy `startAngle` między parametrem `startAngle`  +  `sweepAngle` i parametrami.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy prostokąt, który jest powiązany z elipsą.  
  
-   Definiuje kąt rozpoczęcia (45 stopni) i odchylenia (270 stopni).  
  
-   Rysuje Łuk eliptyczny do ekranu.  
  
 Wynikiem jest wielokropek wielokropka, który nie zawiera segmentu między + a-45 stopni osi x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#8)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />była<see langword="null" /></exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * int * int * int * int * int * int -&gt; unit" Usage="graphics.DrawArc (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl łuku.</param>
        <param name="x">Współrzędna x lewego górnego rogu prostokąta, który definiuje elipsę.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąta, który definiuje elipsę.</param>
        <param name="width">Szerokość prostokąta, który definiuje elipsę.</param>
        <param name="height">Wysokość prostokąta, który definiuje elipsę.</param>
        <param name="startAngle">Kąt w stopniach mierzony w prawo od osi x do punktu początkowego łuku.</param>
        <param name="sweepAngle">Kąt w stopniach mierzony w prawo <paramref name="startAngle" /> od parametru do punktu końcowego łuku.</param>
        <summary>Rysuje łuk reprezentujący część wielokropka określoną przez parę współrzędnych, Szerokość i wysokość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do rysowania łuku, który jest częścią obwodu elipsy. Elipsa jest definiowana przez granice prostokąta. Łuk jest częścią obwodu elipsy `startAngle` między parametrem `startAngle`  +  `sweepAngle` i parametrami.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy położenie i rozmiar prostokąta pod kątem elipsy.  
  
-   Definiuje kąt rozpoczęcia (45 stopni) i odchylenia (270 stopni).  
  
-   Rysuje Łuk eliptyczny do ekranu.  
  
 Wynikiem jest wielokropek wielokropka, który nie zawiera segmentu między + a-45 stopni osi x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#9)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#9)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * single * single * single * single * single * single -&gt; unit" Usage="graphics.DrawArc (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl łuku.</param>
        <param name="x">Współrzędna x lewego górnego rogu prostokąta, który definiuje elipsę.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąta, który definiuje elipsę.</param>
        <param name="width">Szerokość prostokąta, który definiuje elipsę.</param>
        <param name="height">Wysokość prostokąta, który definiuje elipsę.</param>
        <param name="startAngle">Kąt w stopniach mierzony w prawo od osi x do punktu początkowego łuku.</param>
        <param name="sweepAngle">Kąt w stopniach mierzony w prawo <paramref name="startAngle" /> od parametru do punktu końcowego łuku.</param>
        <summary>Rysuje łuk reprezentujący część wielokropka określoną przez parę współrzędnych, Szerokość i wysokość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do rysowania łuku, który jest częścią obwodu elipsy. Elipsa jest definiowana przez granice prostokąta. Łuk jest częścią obwodu elipsy `startAngle` między parametrem `startAngle`  +  `sweepAngle` i parametrami.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy położenie i rozmiar prostokąta pod kątem elipsy.  
  
-   Definiuje kąt rozpoczęcia (45 stopni) i odchylenia (270 stopni).  
  
-   Rysuje Łuk eliptyczny do ekranu.  
  
 Wynikiem jest wielokropek wielokropka, który nie zawiera segmentu między + a-45 stopni osi x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#10)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#10)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawBezier">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje krzywą Beziera zdefiniowaną <see cref="T:System.Drawing.Point" /> przez cztery struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2, System.Drawing.Point pt3, System.Drawing.Point pt4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, valuetype System.Drawing.Point pt1, valuetype System.Drawing.Point pt2, valuetype System.Drawing.Point pt3, valuetype System.Drawing.Point pt4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, System::Drawing::Point pt1, System::Drawing::Point pt2, System::Drawing::Point pt3, System::Drawing::Point pt4);" />
      <MemberSignature Language="F#" Value="member this.DrawBezier : System.Drawing.Pen * System.Drawing.Point * System.Drawing.Point * System.Drawing.Point * System.Drawing.Point -&gt; unit" Usage="graphics.DrawBezier (pen, pt1, pt2, pt3, pt4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.Point" />
        <Parameter Name="pt2" Type="System.Drawing.Point" />
        <Parameter Name="pt3" Type="System.Drawing.Point" />
        <Parameter Name="pt4" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Struktura, która określa kolor, Szerokość i styl krzywej.</param>
        <param name="pt1"><see cref="T:System.Drawing.Point" />Struktura, która reprezentuje punkt początkowy krzywej.</param>
        <param name="pt2"><see cref="T:System.Drawing.Point" />Struktura reprezentująca pierwszy punkt kontrolny krzywej.</param>
        <param name="pt3"><see cref="T:System.Drawing.Point" />Struktura, która reprezentuje drugi punkt kontroli dla krzywej.</param>
        <param name="pt4"><see cref="T:System.Drawing.Point" />Struktura, która reprezentuje punkt końcowy krzywej.</param>
        <summary>Rysuje krzywą Beziera zdefiniowaną <see cref="T:System.Drawing.Point" /> przez cztery struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Krzywa Beziera jest rysowana od pierwszego punktu do czwartego punktu. Drugi i trzeci punkty są punktami kontrolnymi, które określają kształt krzywej.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy początkową, końcową i dwa punkty kontroli dla krzywej.  
  
-   Rysuje krzywą Beziera na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#11)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#11)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2, System.Drawing.PointF pt3, System.Drawing.PointF pt4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, valuetype System.Drawing.PointF pt1, valuetype System.Drawing.PointF pt2, valuetype System.Drawing.PointF pt3, valuetype System.Drawing.PointF pt4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, System::Drawing::PointF pt1, System::Drawing::PointF pt2, System::Drawing::PointF pt3, System::Drawing::PointF pt4);" />
      <MemberSignature Language="F#" Value="member this.DrawBezier : System.Drawing.Pen * System.Drawing.PointF * System.Drawing.PointF * System.Drawing.PointF * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawBezier (pen, pt1, pt2, pt3, pt4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.PointF" />
        <Parameter Name="pt2" Type="System.Drawing.PointF" />
        <Parameter Name="pt3" Type="System.Drawing.PointF" />
        <Parameter Name="pt4" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl krzywej.</param>
        <param name="pt1"><see cref="T:System.Drawing.PointF" />Struktura, która reprezentuje punkt początkowy krzywej.</param>
        <param name="pt2"><see cref="T:System.Drawing.PointF" />Struktura reprezentująca pierwszy punkt kontrolny krzywej.</param>
        <param name="pt3"><see cref="T:System.Drawing.PointF" />Struktura, która reprezentuje drugi punkt kontroli dla krzywej.</param>
        <param name="pt4"><see cref="T:System.Drawing.PointF" />Struktura, która reprezentuje punkt końcowy krzywej.</param>
        <summary>Rysuje krzywą Beziera zdefiniowaną <see cref="T:System.Drawing.PointF" /> przez cztery struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Krzywa Beziera jest rysowana od pierwszego punktu do czwartego punktu. Drugi i trzeci punkty są punktami kontrolnymi, które określają kształt krzywej.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy początkową, końcową i dwa punkty kontroli dla krzywej.  
  
-   Rysuje krzywą Beziera na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#12)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#12)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, float32 x1, float32 y1, float32 x2, float32 y2, float32 x3, float32 y3, float32 x4, float32 y4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);" />
      <MemberSignature Language="F#" Value="member this.DrawBezier : System.Drawing.Pen * single * single * single * single * single * single * single * single -&gt; unit" Usage="graphics.DrawBezier (pen, x1, y1, x2, y2, x3, y3, x4, y4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="x2" Type="System.Single" />
        <Parameter Name="y2" Type="System.Single" />
        <Parameter Name="x3" Type="System.Single" />
        <Parameter Name="y3" Type="System.Single" />
        <Parameter Name="x4" Type="System.Single" />
        <Parameter Name="y4" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl krzywej.</param>
        <param name="x1">Współrzędna x punktu początkowego krzywej.</param>
        <param name="y1">Współrzędna y punktu początkowego krzywej.</param>
        <param name="x2">Współrzędna x pierwszego punktu kontrolnego krzywej.</param>
        <param name="y2">Współrzędna y pierwszego punktu kontrolnego krzywej.</param>
        <param name="x3">Współrzędna x drugiego punktu sterującego krzywej.</param>
        <param name="y3">Współrzędna y drugiego punktu sterującego krzywej.</param>
        <param name="x4">Współrzędna x punktu końcowego krzywej.</param>
        <param name="y4">Współrzędna y punktu końcowego krzywej.</param>
        <summary>Rysuje krzywą Beziera zdefiniowaną przez cztery uporządkowane pary współrzędnych, które reprezentują punkty.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Krzywa Beziera jest rysowana od pierwszego punktu do czwartego punktu. Drugi i trzeci punkty są punktami kontrolnymi, które określają kształt krzywej.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy współrzędne początkowy, końcowy i dwa punkty kontroli dla krzywej.  
  
-   Rysuje krzywą Beziera na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#13)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#13)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawBeziers">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje serię krzywych Beziera z tablicy <see cref="T:System.Drawing.Point" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawBeziers">
      <MemberSignature Language="C#" Value="public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBeziers(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBeziers(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawBeziers : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawBeziers (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl krzywej.</param>
        <param name="points"><see cref="T:System.Drawing.Point" /> Tablica struktur reprezentujących punkty, które określają krzywą. Liczba punktów w tablicy powinna być wielokrotnością liczby 3 Plus 1, na przykład 4, 7 lub 10.</param>
        <summary>Rysuje serię krzywych Beziera z tablicy <see cref="T:System.Drawing.Point" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Liczba punktów w tablicy powinna być wielokrotnością liczby 3 i 1, ponieważ pierwsza krzywa składana wymaga 4 punktów, a wszystkie inne krzywe muszą zawierać 3 punkty każdego z nich. Pierwsza krzywa Beziera jest rysowana od pierwszego punktu do czwartego punktu w tablicy punktów. Drugi i trzeci punkty są punktami kontrolnymi, które określają kształt krzywej. Każda kolejna krzywa potrzebuje dokładnie trzech więcej punktów: dwa punkty kontroli i punkt końcowy. Punkt końcowy poprzedniej krzywej jest używany jako punkt początkowy dla każdej dodatkowej krzywej.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy początkową, końcową i dwa punkty kontrolne dla pierwszej krzywej i punktu końcowego oraz dwa punkty kontrolne dla drugiej krzywej.  
  
-   Rysuje kolejne krzywe Beziera na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#14)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#14)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBeziers">
      <MemberSignature Language="C#" Value="public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBeziers(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBeziers(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawBeziers : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawBeziers (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl krzywej.</param>
        <param name="points"><see cref="T:System.Drawing.PointF" /> Tablica struktur reprezentujących punkty, które określają krzywą. Liczba punktów w tablicy powinna być wielokrotnością liczby 3 Plus 1, na przykład 4, 7 lub 10.</param>
        <summary>Rysuje serię krzywych Beziera z tablicy <see cref="T:System.Drawing.PointF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Liczba punktów w tablicy powinna być wielokrotnością liczby 3 i 1, ponieważ pierwsza krzywa składana wymaga 4 punktów, a wszystkie inne krzywe muszą zawierać 3 punkty każdego z nich. Pierwsza krzywa Beziera jest rysowana od pierwszego punktu do czwartego punktu w tablicy punktów. Drugi i trzeci punkty są punktami kontrolnymi, które określają kształt krzywej. Każda kolejna krzywa potrzebuje dokładnie trzech więcej punktów: dwa punkty kontroli i punkt końcowy. Punkt końcowy poprzedniej krzywej jest używany jako punkt początkowy dla każdej dodatkowej krzywej.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy początkową, końcową i dwa punkty kontrolne dla pierwszej krzywej i punktu końcowego oraz dwa punkty kontrolne dla drugiej krzywej.  
  
-   Rysuje kolejne krzywe Beziera na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#15)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#15)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawClosedCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje zamkniętą krzywą kardynalną zdefiniowaną <see cref="T:System.Drawing.Point" /> przez tablicę struktur.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i wysokość krzywej.</param>
        <param name="points"><see cref="T:System.Drawing.Point" /> Tablica struktur, które definiują krzywą składaną.</param>
        <summary>Rysuje zamkniętą krzywą kardynalną zdefiniowaną <see cref="T:System.Drawing.Point" /> przez tablicę struktur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do rysowania zamkniętej krzywej łamanej, która przechodzi przez każdy punkt w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszym punktem, dodatkowy segment krzywej zostanie dodany od ostatniego punktu do pierwszego punktu, aby zamknąć rysunek.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.Point> struktury.  
  
 Ta metoda używa domyślnego napięcia 0,5.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwone i zielone pióra.  
  
-   Tworzy siedem punktów, aby zdefiniować krzywą.  
  
-   Rysuje siedem czerwonych linii prostych między siedem punktów, aby utworzyć zamknięty wielokąt.  
  
-   Rysuje zieloną krzywą zamkniętą przez siedem punktów.  
  
 Metoda używa domyślnego napięcia 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#16)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#16)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i wysokość krzywej.</param>
        <param name="points"><see cref="T:System.Drawing.PointF" /> Tablica struktur, które definiują krzywą składaną.</param>
        <summary>Rysuje zamkniętą krzywą kardynalną zdefiniowaną <see cref="T:System.Drawing.PointF" /> przez tablicę struktur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do rysowania zamkniętej krzywej łamanej, która przechodzi przez każdy punkt w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszym punktem, zostanie dodany dodatkowy segment krzywej od ostatniego punktu do pierwszego punktu, aby go zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.PointF> struktury.  
  
 Ta metoda używa domyślnego napięcia 0,5.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwone i zielone pióra.  
  
-   Tworzy siedem punktów, aby zdefiniować krzywą.  
  
-   Rysuje siedem czerwonych linii prostych między siedem punktów, aby utworzyć zamknięty wielokąt.  
  
-   Rysuje zieloną krzywą zamkniętą przez siedem punktów.  
  
 Metoda używa domyślnego napięcia 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#18)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#18)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, float32 tension, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single,System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, float tension, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.Point[] * single * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points, tension, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="tension" Type="System.Single" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i wysokość krzywej.</param>
        <param name="points"><see cref="T:System.Drawing.Point" /> Tablica struktur, które definiują krzywą składaną.</param>
        <param name="tension">Wartość większa lub równa 0.0 F, która określa naciągnięcie krzywej.</param>
        <param name="fillmode">Element członkowski wyliczenia, który określa sposób wypełnienia krzywej. <see cref="T:System.Drawing.Drawing2D.FillMode" /> Ten parametr jest wymagany, ale ignorowany.</param>
        <summary>Rysuje zamkniętą krzywą kardynalną zdefiniowaną <see cref="T:System.Drawing.Point" /> przez tablicę struktur przy użyciu podanego napięcia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do rysowania zamkniętej krzywej łamanej, która przechodzi przez każdy punkt w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszym punktem, zostanie dodany dodatkowy segment krzywej od ostatniego punktu do pierwszego punktu, aby go zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.Point> struktury.  
  
 `tension` Parametr określa kształt krzywej łamanej. Jeśli wartość `tension` parametru to 0.0 f, ta metoda rysuje proste segmenty linii, aby połączyć punkty. `tension` Zazwyczaj parametr jest mniejszy niż lub równy 1.0 f. Wartości przekraczające 1,0 F generują nietypowe wyniki.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwone i zielone pióra.  
  
-   Tworzy siedem punktów, aby zdefiniować krzywą.  
  
-   Rysuje siedem czerwonych linii prostych między siedem punktów, aby utworzyć wielokąt.  
  
-   Tworzy ustawienia dotyczące napięcia i trybu wypełnienia.  
  
-   Rysuje zieloną krzywą zamkniętą przez siedem punktów.  
  
 Metoda używa napięcia 1,0 i ustawia tryb wypełnienia na `FillMode.Alternate`.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#17)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#17)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, float32 tension, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single,System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, float tension, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.PointF[] * single * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points, tension, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="tension" Type="System.Single" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i wysokość krzywej.</param>
        <param name="points"><see cref="T:System.Drawing.PointF" /> Tablica struktur, które definiują krzywą składaną.</param>
        <param name="tension">Wartość większa lub równa 0.0 F, która określa naciągnięcie krzywej.</param>
        <param name="fillmode">Element członkowski wyliczenia, który określa sposób wypełnienia krzywej. <see cref="T:System.Drawing.Drawing2D.FillMode" /> Ten parametr jest wymagany, ale jest ignorowany.</param>
        <summary>Rysuje zamkniętą krzywą kardynalną zdefiniowaną <see cref="T:System.Drawing.PointF" /> przez tablicę struktur przy użyciu podanego napięcia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do rysowania zamkniętej krzywej łamanej, która przechodzi przez każdy punkt w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszym punktem, zostanie dodany dodatkowy segment krzywej od ostatniego punktu do pierwszego punktu, aby go zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.PointF> struktury.  
  
 `tension` Parametr określa kształt krzywej łamanej. Jeśli wartość `tension` parametru to 0.0 f, ta metoda rysuje proste segmenty linii, aby połączyć punkty. `tension` Zazwyczaj parametr jest mniejszy niż lub równy 1.0 f. Wartości przekraczające 1,0 F generują nietypowe wyniki.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwone i zielone pióra.  
  
-   Tworzy siedem punktów, aby zdefiniować krzywą.  
  
-   Rysuje siedem czerwonych linii prostych między siedem punktów, aby utworzyć wielokąt.  
  
-   Tworzy ustawienia dotyczące napięcia i trybu wypełnienia.  
  
-   Rysuje zieloną krzywą zamkniętą przez siedem punktów.  
  
 Metoda używa napięcia 1,0 i ustawia tryb wypełnienia na `FillMode.Alternate`.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#19)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#19)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje krzywą kardynalną przez określoną tablicę <see cref="T:System.Drawing.Point" /> struktur.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i wysokość krzywej.</param>
        <param name="points"><see cref="T:System.Drawing.Point" /> Tablica struktur, które definiują krzywą składaną.</param>
        <summary>Rysuje krzywą kardynalną przez określoną tablicę <see cref="T:System.Drawing.Point" /> struktur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do rysowania krzywej łamanej, która przechodzi przez każdy punkt w tablicy.  
  
 Tablica punktów musi zawierać co najmniej trzy <xref:System.Drawing.Point> struktury, aby można było narysować krzywą.  
  
 Ta metoda używa domyślnego napięcia 0,5.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwone i zielone pióra.  
  
-   Tworzy siedem punktów, aby zdefiniować krzywą.  
  
-   Rysuje sześć czerwonych linii prostych między siedem punktów w celu utworzenia niekompletnego wielokąta.  
  
-   Rysuje otwartą zieloną krzywą przez siedem punktów.  
  
 Metoda używa domyślnego napięcia 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#20)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#20)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl krzywej.</param>
        <param name="points"><see cref="T:System.Drawing.PointF" /> Tablica struktur, które definiują krzywą składaną.</param>
        <summary>Rysuje krzywą kardynalną przez określoną tablicę <see cref="T:System.Drawing.PointF" /> struktur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do rysowania krzywej łamanej, która przechodzi przez każdy punkt w tablicy.  
  
 Tablica punktów musi zawierać co najmniej trzy <xref:System.Drawing.PointF> struktury, aby można było narysować krzywą.  
  
 Ta metoda używa domyślnego napięcia 0,5.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwone i zielone pióra.  
  
-   Tworzy siedem punktów, aby zdefiniować krzywą.  
  
-   Rysuje sześć czerwonych linii prostych między siedem punktów w celu utworzenia niekompletnego wielokąta.  
  
-   Rysuje otwartą zieloną krzywą przez siedem punktów.  
  
 Metoda używa domyślnego napięcia 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#23)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#23)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.Point[] * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl krzywej.</param>
        <param name="points"><see cref="T:System.Drawing.Point" /> Tablica struktur, które definiują krzywą składaną.</param>
        <param name="tension">Wartość większa lub równa 0.0 F, która określa naciągnięcie krzywej.</param>
        <summary>Rysuje krzywą kardynalną przez określoną tablicę <see cref="T:System.Drawing.Point" /> struktur przy użyciu podanego napięcia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do rysowania krzywej łamanej, która przechodzi przez każdy punkt w tablicy.  
  
 Tablica punktów musi zawierać co najmniej trzy <xref:System.Drawing.Point> struktury, aby można było narysować krzywą.  
  
 `tension` Parametr określa kształt krzywej łamanej. Jeśli wartość `tension` parametru to 0.0 f, ta metoda rysuje proste segmenty linii, aby połączyć punkty. `tension` Zazwyczaj parametr jest mniejszy niż lub równy 1.0 f. Wartości przekraczające 1,0 F generują nietypowe wyniki.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwone i zielone pióra.  
  
-   Tworzy siedem punktów, aby zdefiniować krzywą.  
  
-   Rysuje sześć czerwonych linii prostych między siedem punktów w celu utworzenia niekompletnego wielokąta.  
  
-   Tworzy ustawienie napięcia.  
  
-   Rysuje otwartą zieloną krzywą w ramach siedmiu punktów.  
  
 Metoda używa napięcia 1,0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#22)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#22)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl krzywej.</param>
        <param name="points"><see cref="T:System.Drawing.PointF" /> Tablica struktur reprezentujących punkty definiujące krzywą.</param>
        <param name="tension">Wartość większa lub równa 0.0 F, która określa naciągnięcie krzywej.</param>
        <summary>Rysuje krzywą kardynalną przez określoną tablicę <see cref="T:System.Drawing.PointF" /> struktur przy użyciu podanego napięcia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do rysowania krzywej łamanej, która przechodzi przez każdy punkt w tablicy.  
  
 Tablica punktów musi zawierać co najmniej trzy <xref:System.Drawing.PointF> struktury, aby można było narysować krzywą.  
  
 `tension` Parametr określa kształt krzywej łamanej. Jeśli wartość `tension` parametru to 0.0 f, ta metoda rysuje proste segmenty linii, aby połączyć punkty. `tension` Zazwyczaj parametr jest mniejszy niż lub równy 1.0 f. Wartości przekraczające 1,0 F generują nietypowe wyniki.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwone i zielone pióra.  
  
-   Tworzy siedem punktów, aby zdefiniować krzywą.  
  
-   Rysuje sześć czerwonych linii prostych między siedem punktów w celu utworzenia niekompletnego wielokąta.  
  
-   Tworzy ustawienie napięcia.  
  
-   Rysuje otwartą zieloną krzywą w ramach siedmiu punktów.  
  
 Metoda używa napięcia 1,0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#26)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#26)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, int32 offset, int32 numberOfSegments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, int offset, int numberOfSegments);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] * int * int -&gt; unit" Usage="graphics.DrawCurve (pen, points, offset, numberOfSegments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl krzywej.</param>
        <param name="points"><see cref="T:System.Drawing.PointF" /> Tablica struktur, które definiują krzywą składaną.</param>
        <param name="offset">Przesunięcie od pierwszego elementu w tablicy <paramref name="points" /> parametru do punktu początkowego w krzywej.</param>
        <param name="numberOfSegments">Liczba segmentów po punkcie początkowym do dołączenia do krzywej.</param>
        <summary>Rysuje krzywą kardynalną przez określoną tablicę <see cref="T:System.Drawing.PointF" /> struktur. Rysowanie rozpocznie się przesunięcie od początku tablicy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do rysowania krzywej łamanej, która przechodzi przez każdy punkt w tablicy.  
  
 Tablica punktów musi zawierać co najmniej trzy <xref:System.Drawing.PointF> struktury, aby można było narysować krzywą.  
  
 Wartość `offset` parametru określa liczbę elementów do pominięcia w tablicy. Pierwszy element po pominiętych elementach reprezentuje punkt początkowy krzywej.  
  
 Wartość `numberOfSegments` parametru określa liczbę segmentów po punkcie początkowym do rysowania na krzywej. Wartość `numberOfSegments` parametru musi być równa co najmniej 1. Wartość `offset` parametru i wartość `numberOfSegments` parametru musi być mniejsza niż liczba elementów `points` w tablicy parametru...  
  
 Ta metoda używa domyślnego napięcia 0,5.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwone i zielone pióra.  
  
-   Tworzy siedem punktów, aby zdefiniować krzywą.  
  
-   Rysuje sześć czerwonych linii prostych między siedem punktów w celu utworzenia niekompletnego wielokąta.  
  
-   Definiuje przesunięcie punktu początkowego i liczbę segmentów.  
  
-   Rysuje otwartą zieloną krzywą (rozpoczynając od trzeciego punktu) za pomocą ostatnich pięciu punktów.  
  
 Metoda używa domyślnego napięcia 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#24)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#24)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, int32 offset, int32 numberOfSegments, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Int32,System.Int32,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.Point[] * int * int * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, offset, numberOfSegments, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl krzywej.</param>
        <param name="points"><see cref="T:System.Drawing.Point" /> Tablica struktur, które definiują krzywą składaną.</param>
        <param name="offset">Przesunięcie od pierwszego elementu w tablicy <paramref name="points" /> parametru do punktu początkowego w krzywej.</param>
        <param name="numberOfSegments">Liczba segmentów po punkcie początkowym do dołączenia do krzywej.</param>
        <param name="tension">Wartość większa lub równa 0.0 F, która określa naciągnięcie krzywej.</param>
        <summary>Rysuje krzywą kardynalną przez określoną tablicę <see cref="T:System.Drawing.Point" /> struktur przy użyciu podanego napięcia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do rysowania krzywej łamanej, która przechodzi przez każdy punkt w tablicy.  
  
 Tablica punktów musi zawierać co najmniej trzy <xref:System.Drawing.Point> struktury, aby można było narysować krzywą.  
  
 Wartość `offset` parametru określa liczbę elementów do pominięcia w tablicy. Pierwszy element po pominiętych elementach reprezentuje punkt początkowy krzywej.  
  
 Wartość `numberOfSegments` parametru określa liczbę segmentów po punkcie początkowym do rysowania na krzywej. Wartość `numberOfSegments` parametru musi być równa co najmniej 1. Wartość `offset` parametru i wartość `numberOfSegments` parametru musi być mniejsza niż liczba elementów `points` w tablicy parametru...  
  
 `tension` Parametr określa kształt krzywej łamanej. Jeśli wartość `tension` parametru to 0.0 f, ta metoda rysuje proste segmenty linii, aby połączyć punkty. `tension` Zazwyczaj parametr jest mniejszy niż lub równy 1.0 f. Wartości przekraczające 1,0 F generują nietypowe wyniki.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwone i zielone pióra.  
  
-   Tworzy siedem punktów, aby zdefiniować krzywą.  
  
-   Rysuje sześć czerwonych linii prostych między siedem punktów w celu utworzenia niekompletnego wielokąta.  
  
-   Definiuje przesunięcie punktu początkowego i liczbę segmentów.  
  
-   Definiuje naciągnięcie.  
  
-   Rysuje otwartą zieloną krzywą (rozpoczynając od trzeciego punktu) za pomocą ostatnich pięciu punktów.  
  
 Metoda ustawia naciągnięcie na 1,0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#21)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#21)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, int32 offset, int32 numberOfSegments, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] * int * int * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, offset, numberOfSegments, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl krzywej.</param>
        <param name="points"><see cref="T:System.Drawing.PointF" /> Tablica struktur, które definiują krzywą składaną.</param>
        <param name="offset">Przesunięcie od pierwszego elementu w tablicy <paramref name="points" /> parametru do punktu początkowego w krzywej.</param>
        <param name="numberOfSegments">Liczba segmentów po punkcie początkowym do dołączenia do krzywej.</param>
        <param name="tension">Wartość większa lub równa 0.0 F, która określa naciągnięcie krzywej.</param>
        <summary>Rysuje krzywą kardynalną przez określoną tablicę <see cref="T:System.Drawing.PointF" /> struktur przy użyciu podanego napięcia. Rysowanie rozpocznie się przesunięcie od początku tablicy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do rysowania krzywej łamanej, która przechodzi przez każdy punkt w tablicy.  
  
 Tablica punktów musi zawierać co najmniej trzy <xref:System.Drawing.PointF> struktury, aby można było narysować krzywą.  
  
 Wartość `offset` parametru określa liczbę elementów do pominięcia w tablicy. Pierwszy element po pominiętych elementach reprezentuje punkt początkowy krzywej.  
  
 Wartość `numberOfSegments` parametru określa liczbę segmentów po punkcie początkowym do rysowania na krzywej. Wartość `numberOfSegments` parametru musi być równa co najmniej 1. Wartość `offset` parametru i wartość `numberOfSegments` parametru musi być mniejsza niż liczba elementów `points` w tablicy parametru...  
  
 `tension` Parametr określa kształt krzywej łamanej. Jeśli wartość `tension` parametru to 0.0 f, ta metoda rysuje proste segmenty linii, aby połączyć punkty. `tension` Zazwyczaj parametr jest mniejszy niż lub równy 1.0 f. Wartości przekraczające 1,0 F generują nietypowe wyniki.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czerwone i zielone pióra.  
  
-   Tworzy siedem punktów, aby zdefiniować krzywą.  
  
-   Rysuje sześć czerwonych linii prostych między siedem punktów w celu utworzenia niekompletnego wielokąta.  
  
-   Definiuje przesunięcie punktu początkowego i liczbę segmentów.  
  
-   Definiuje naciągnięcie.  
  
-   Rysuje otwartą zieloną krzywą (rozpoczynając od trzeciego punktu) za pomocą ostatnich pięciu punktów.  
  
 Metoda ustawia naciągnięcie na 1,0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#25)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#25)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawEllipse">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje elipsę zdefiniowaną przez prostokąt ograniczający określony przez parę współrzędnych, Wysokość i szerokość.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawEllipse (pen, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl elipsy.</param>
        <param name="rect"><see cref="T:System.Drawing.Rectangle" />Struktura, która definiuje granice wielokropka.</param>
        <summary>Rysuje elipsę określoną przez <see cref="T:System.Drawing.Rectangle" /> strukturę powiązaną.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda Rysuje elipsę, która jest definiowana przez prostokąt ograniczający określony przez `rect` parametr.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy prostokąt, który jest powiązany z elipsą.  
  
-   Rysuje elipsę do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#27)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#27)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * System.Drawing.RectangleF -&gt; unit" Usage="graphics.DrawEllipse (pen, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl elipsy.</param>
        <param name="rect"><see cref="T:System.Drawing.RectangleF" />Struktura, która definiuje granice wielokropka.</param>
        <summary>Rysuje elipsę zdefiniowaną przez granicę <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda Rysuje elipsę, która jest definiowana przez prostokąt ograniczający określony przez `rect` parametr.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy prostokąt, który jest powiązany z elipsą.  
  
-   Rysuje elipsę do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#28)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#28)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * int * int * int * int -&gt; unit" Usage="graphics.DrawEllipse (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl elipsy.</param>
        <param name="x">Współrzędna x lewego górnego rogu prostokąta granicznego, który definiuje elipsę.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąta granicznego, który definiuje elipsę.</param>
        <param name="width">Szerokość prostokąta obwiedni, który definiuje elipsę.</param>
        <param name="height">Wysokość prostokąta obwiedni, który definiuje elipsę.</param>
        <summary>Rysuje elipsę zdefiniowaną przez prostokąt ograniczający określony przez współrzędne dla lewego górnego rogu prostokąta, Wysokość i szerokość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda Rysuje elipsę, która jest definiowana przez prostokąt ograniczający opisany przez `x`parametry `y`, `width`, i `height` .  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy położenie i rozmiar prostokąta pod kątem elipsy.  
  
-   Rysuje elipsę do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#29)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#29)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * single * single * single * single -&gt; unit" Usage="graphics.DrawEllipse (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl elipsy.</param>
        <param name="x">Współrzędna x lewego górnego rogu prostokąta granicznego, który definiuje elipsę.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąta granicznego, który definiuje elipsę.</param>
        <param name="width">Szerokość prostokąta obwiedni, który definiuje elipsę.</param>
        <param name="height">Wysokość prostokąta obwiedni, który definiuje elipsę.</param>
        <summary>Rysuje elipsę zdefiniowaną przez prostokąt ograniczający określony przez parę współrzędnych, Wysokość i szerokość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda Rysuje elipsę, która jest definiowana przez prostokąt ograniczający opisany przez `x`parametry `y`, `width`, i `height` .  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy położenie i rozmiar prostokąta pod kątem elipsy.  
  
-   Rysuje elipsę do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#30)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#30)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawIcon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje obraz reprezentowany przez określony <see cref="T:System.Drawing.Icon" /> na określonych współrzędnych.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawIcon">
      <MemberSignature Language="C#" Value="public void DrawIcon (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIcon(class System.Drawing.Icon icon, valuetype System.Drawing.Rectangle targetRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIcon(System::Drawing::Icon ^ icon, System::Drawing::Rectangle targetRect);" />
      <MemberSignature Language="F#" Value="member this.DrawIcon : System.Drawing.Icon * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawIcon (icon, targetRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="icon"><see cref="T:System.Drawing.Icon" />do rysowania.</param>
        <param name="targetRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa lokalizację i rozmiar obrazu na ekranie wyświetlania. Obraz zawarty w <paramref name="icon" /> parametrze jest skalowany na wymiary tego prostokątnego obszaru.</param>
        <summary>Rysuje obraz reprezentowany przez określony <see cref="T:System.Drawing.Icon" /> w obszarze określonym <see cref="T:System.Drawing.Rectangle" /> przez strukturę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ikonę ze standardowego pliku ikony systemu Windows SampIcon. ico w przykładowym folderze.  
  
-   Tworzy prostokąt, w którym ma zostać narysowana ikona.  
  
-   Rysuje ikonę na ekranie.  
  
 Pozycja prostokąta lokalizuje ikonę na ekranie, a rozmiar prostokąta określa skalowanie rysowanej ikony.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#31)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#31)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="icon" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawIcon">
      <MemberSignature Language="C#" Value="public void DrawIcon (System.Drawing.Icon icon, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIcon(class System.Drawing.Icon icon, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIcon(System::Drawing::Icon ^ icon, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.DrawIcon : System.Drawing.Icon * int * int -&gt; unit" Usage="graphics.DrawIcon (icon, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="icon"><see cref="T:System.Drawing.Icon" />do rysowania.</param>
        <param name="x">Współrzędna x lewego górnego rogu rysowanego obrazu.</param>
        <param name="y">Współrzędna y lewego górnego rogu rysowanego obrazu.</param>
        <summary>Rysuje obraz reprezentowany przez określony <see cref="T:System.Drawing.Icon" /> na określonych współrzędnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ikonę ze standardowego pliku ikony systemu Windows SampIcon. ico w przykładowym folderze.  
  
-   Tworzy współrzędne lewego górnego rogu, w którym ma zostać narysowana ikona.  
  
-   Rysuje ikonę na ekranie.  
  
 Ikona rysowania jest nieskalowana.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#32)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#32)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="icon" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawIconUnstretched">
      <MemberSignature Language="C#" Value="public void DrawIconUnstretched (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIconUnstretched(class System.Drawing.Icon icon, valuetype System.Drawing.Rectangle targetRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIconUnstretched(System.Drawing.Icon,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIconUnstretched(System::Drawing::Icon ^ icon, System::Drawing::Rectangle targetRect);" />
      <MemberSignature Language="F#" Value="member this.DrawIconUnstretched : System.Drawing.Icon * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawIconUnstretched (icon, targetRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="icon"><see cref="T:System.Drawing.Icon" />do rysowania.</param>
        <param name="targetRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa lokalizację i rozmiar obrazu wyników. Obraz nie jest skalowany w celu dopasowania go do tego prostokąta, ale zachowuje swój oryginalny rozmiar. Jeśli obraz jest większy niż prostokąt, zostanie obcięty w celu dopasowania go do niego.</param>
        <summary>Rysuje obraz reprezentowany przez określony <see cref="T:System.Drawing.Icon" /> bez skalowania obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ikonę ze standardowego pliku ikony systemu Windows SampIcon. ico w przykładowym folderze.  
  
-   Tworzy prostokąt, w którym ma zostać narysowana ikona.  
  
-   Rysuje ikonę na ekranie.  
  
 Pozycja prostokąta lokalizuje ikonę na ekranie, a narysowana ikona jest nieskalowana i odcięta.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#33)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#33)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="icon" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawImage">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje określony <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i z oryginalnym rozmiarem.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point -&gt; unit" Usage="graphics.DrawImage (image, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="point"><see cref="T:System.Drawing.Point" />Struktura, która reprezentuje lokalizację lewego górnego rogu rysowanego obrazu.</param>
        <summary>Rysuje określony <see cref="T:System.Drawing.Image" />, używając oryginalnego rozmiaru fizycznego w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość szerokości pikseli i wartość dla rozdzielczości poziomej (punkty na cal). Szerokość fizyczna (w calach) obrazu jest szerokością pikseli podzieloną przez rozdzielczość w poziomie. Na przykład obraz z szerokością pikseli 216 i rozdzielczość pozioma 72 kropek na cal ma szerokość fizyczną 3 cala. Podobne uwagi dotyczą wysokości pikseli i wysokości fizycznej.  
  
 Ta metoda służy do rysowania obrazu przy użyciu jego rozmiaru fizycznego, dzięki czemu obraz będzie miał prawidłowy rozmiar w calach niezależnie od rozdzielczości (punkty na cal) urządzenia wyświetlającego. Załóżmy na przykład, że obraz ma szerokość pikseli wynoszącą 216 i rozdzielczość poziomą 72 punktów na cal. Jeśli ta metoda zostanie wywołana w celu narysowania obrazu na urządzeniu z rozdzielczością 96 punktów na cal, Szerokość pikseli renderowanego obrazu będzie równa (216/72) * 96 = 288.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy punkt, w którym ma zostać narysowany lewy górny róg obrazu.  
  
-   Rysuje obraz nieskalowanego na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#34)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#34)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawImage (image, destPoints)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok.</param>
        <summary>Rysuje określony <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i o określonym kształcie i rozmiarze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty przerównoległobok. Trzy <xref:System.Drawing.Point> struktury reprezentują górne lewe, górne i dolne rogi równoległobok. Czwarty punkt jest ekstrapolacji z pierwszych trzech, aby utworzyć równoległobok.  
  
 Obraz reprezentowany przez `image` parametr jest skalowany i ścinaniy w celu dopasowania go do kształtu równoległobok określonego `destPoints` przez parametry.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok do rysowania obrazu.  
  
-   Rysuje obraz na ekranie.  
  
 Pozycja równoległobok lokalizuje obraz na ekranie, a rozmiar oryginalnego obrazu oraz rozmiar i kształt równoległobok określają skalowanie i ścinanie rysowanego obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#35)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#35)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::PointF point);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawImage (image, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="point"><see cref="T:System.Drawing.PointF" />Struktura, która reprezentuje lewy górny róg rysowanego obrazu.</param>
        <summary>Rysuje określony <see cref="T:System.Drawing.Image" />, używając oryginalnego rozmiaru fizycznego w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość szerokości pikseli i wartość dla rozdzielczości poziomej (punkty na cal). Szerokość fizyczna (w calach) obrazu jest szerokością pikseli podzieloną przez rozdzielczość w poziomie. Na przykład obraz z szerokością pikseli 216 i rozdzielczość pozioma 72 kropek na cal ma szerokość fizyczną 3 cala. Podobne uwagi dotyczą wysokości pikseli i wysokości fizycznej.  
  
 Ta metoda służy do rysowania obrazu przy użyciu jego rozmiaru fizycznego, dzięki czemu obraz będzie miał prawidłowy rozmiar w calach niezależnie od rozdzielczości (punkty na cal) urządzenia wyświetlającego. Załóżmy na przykład, że obraz ma szerokość pikseli wynoszącą 216 i rozdzielczość poziomą 72 punktów na cal. Jeśli ta metoda zostanie wywołana w celu narysowania obrazu na urządzeniu z rozdzielczością 96 punktów na cal, Szerokość pikseli renderowanego obrazu będzie równa (216/72) * 96 = 288.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy punkt, w którym ma zostać narysowany lewy górny róg obrazu.  
  
-   Rysuje obraz nieskalowanego na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#40)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#40)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawImage (image, destPoints)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok.</param>
        <summary>Rysuje określony <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i o określonym kształcie i rozmiarze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty przerównoległobok. Trzy <xref:System.Drawing.PointF> struktury reprezentują górne lewe, górne i dolne rogi równoległobok. Czwarty punkt jest ekstrapolacji z pierwszych trzech, aby utworzyć równoległobok.  
  
 Obraz reprezentowany przez `image` obiekt jest skalowany i ścinaniy w celu dopasowania go do kształtu równoległobok określonego `destPoints` przez parametr.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok do rysowania obrazu.  
  
-   Rysuje obraz na ekranie.  
  
 Pozycja równoległobok lokalizuje obraz na ekranie, a rozmiar oryginalnego obrazu oraz rozmiar i kształt równoległobok określają skalowanie i ścinanie rysowanego obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#41)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#41)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawImage (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="rect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa lokalizację i rozmiar rysowanego obrazu.</param>
        <summary>Rysuje określony <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i o określonym rozmiarze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obraz reprezentowany przez `image` obiekt jest skalowany na wymiary `rect` prostokąta.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy prostokąt, w którym ma zostać narysowany obraz.  
  
-   Rysuje obraz na ekranie.  
  
 Pozycja prostokąta lokalizuje obraz na ekranie, a rozmiar oryginalnego obrazu i rozmiar prostokąta określa skalowanie rysowanego obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#46)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#46)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#46)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.RectangleF -&gt; unit" Usage="graphics.DrawImage (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="rect"><see cref="T:System.Drawing.RectangleF" />Struktura, która określa lokalizację i rozmiar rysowanego obrazu.</param>
        <summary>Rysuje określony <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i o określonym rozmiarze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obraz reprezentowany przez `image` obiekt jest skalowany na wymiary `rect` prostokąta.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy prostokąt, w którym ma zostać narysowany obraz.  
  
-   Rysuje obraz na ekranie.  
  
 Pozycja prostokąta lokalizuje obraz na ekranie, a oryginalny rozmiar obrazu i rozmiar prostokąta określa skalowanie rysowanego obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#56)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#56)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#56)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * int * int -&gt; unit" Usage="graphics.DrawImage (image, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="x">Współrzędna x lewego górnego rogu rysowanego obrazu.</param>
        <param name="y">Współrzędna y lewego górnego rogu rysowanego obrazu.</param>
        <summary>Rysuje określony obraz przy użyciu oryginalnego rozmiaru fizycznego w lokalizacji określonej przez parę współrzędnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość szerokości pikseli i wartość dla rozdzielczości poziomej (punkty na cal). Szerokość fizyczna (w calach) obrazu jest szerokością pikseli podzieloną przez rozdzielczość w poziomie. Na przykład obraz z szerokością pikseli 216 i rozdzielczość pozioma 72 kropek na cal ma szerokość fizyczną 3 cala. Podobne uwagi dotyczą wysokości pikseli i wysokości fizycznej.  
  
 <xref:System.Drawing.Graphics.DrawImage%2A> Metoda rysuje obraz przy użyciu rozmiaru fizycznego, więc obraz będzie miał prawidłowy rozmiar w calach niezależnie od rozdzielczości (punkty na cal) urządzenia wyświetlającego. Załóżmy na przykład, że obraz ma szerokość pikseli wynoszącą 216 i rozdzielczość poziomą 72 punktów na cal. Jeśli wywołasz <xref:System.Drawing.Graphics.DrawImage%2A> , aby narysować ten obraz na urządzeniu z rozdzielczością 96 punktów na cal, Szerokość pikseli renderowanego obrazu będzie równa (216/72) * 96 = 288.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykład SampImag. jpg w folderze przykładu.  
  
-   Tworzy współrzędne punktu, w którym ma zostać narysowany górny lewy róg obrazu.  
  
-   Rysuje obraz nieskalowanego.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#58)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#58)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * single * single -&gt; unit" Usage="graphics.DrawImage (image, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="x">Współrzędna x lewego górnego rogu rysowanego obrazu.</param>
        <param name="y">Współrzędna y lewego górnego rogu rysowanego obrazu.</param>
        <summary>Rysuje określony <see cref="T:System.Drawing.Image" />, używając oryginalnego rozmiaru fizycznego w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość szerokości pikseli i wartość dla rozdzielczości poziomej (punkty na cal). Szerokość fizyczna (w calach) obrazu jest szerokością pikseli podzieloną przez rozdzielczość w poziomie. Na przykład obraz z szerokością pikseli 216 i rozdzielczość pozioma 72 kropek na cal ma szerokość fizyczną 3 cala. Podobne uwagi dotyczą wysokości pikseli i wysokości fizycznej.  
  
 Ta metoda służy do rysowania obrazu przy użyciu jego rozmiaru fizycznego, dzięki czemu obraz będzie miał prawidłowy rozmiar w calach niezależnie od rozdzielczości (punkty na cal) urządzenia wyświetlającego. Załóżmy na przykład, że obraz ma szerokość pikseli wynoszącą 216 i rozdzielczość poziomą 72 punktów na cal. Jeśli ta metoda zostanie wywołana w celu narysowania obrazu na urządzeniu z rozdzielczością 96 punktów na cal, Szerokość pikseli renderowanego obrazu będzie równa (216/72) * 96 = 288.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy współrzędne punktu, w którym ma zostać narysowany górny lewy róg obrazu.  
  
-   Rysuje obraz nieskalowanego na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#61)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#61)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#61)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok.</param>
        <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa część <paramref name="image" /> obiektu do rysowania.</param>
        <param name="srcUnit">Składowa wyliczenia, która określa jednostki miary używane <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <summary>Rysuje określoną część określoną <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i o określonym rozmiarze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty przerównoległobok. Trzy <xref:System.Drawing.Point> struktury reprezentują górne lewe, górne i dolne rogi równoległobok. Czwarty punkt jest ekstrapolacji z pierwszych trzech, aby utworzyć równoległobok.  
  
 Parametr określa prostokątną część `image` obiektu do rysowania. `srcRect` Ta część jest skalowana i ścinania w celu dopasowania do okna równoległobok określonego przez `destPoints` parametr.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok do rysowania obrazu.  
  
-   Tworzy prostokąt, aby wybrać część obrazu do rysowania.  
  
-   Ustawia jednostkę rysowania grafiki na piksel.  
  
-   Rysuje obraz na ekranie.  
  
 Pozycja równoległobok lokalizuje obraz na ekranie, a rozmiar prostokąta oraz rozmiar i kształt równoległobok określają skalowanie i ścinanie rysowanego obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#36)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#36)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#36)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok.</param>
        <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />Struktura, która określa część <paramref name="image" /> obiektu do rysowania.</param>
        <param name="srcUnit">Składowa wyliczenia, która określa jednostki miary używane <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <summary>Rysuje określoną część określoną <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i o określonym rozmiarze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty przerównoległobok. Trzy <xref:System.Drawing.PointF> struktury reprezentują górne lewe, górne i dolne rogi równoległobok. Czwarty punkt jest ekstrapolacji z pierwszych trzech, aby utworzyć równoległobok.  
  
 Parametr określa prostokątną część `image` obiektu do rysowania. `srcRect` Ta część jest skalowana i ścinania w celu dopasowania do okna równoległobok określonego przez `destPoints` parametr.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy Punkty definiujące równoległobok docelowy, w którym ma zostać narysowany obraz.  
  
-   Tworzy prostokąt źródłowy, z którego ma zostać wyodrębniona część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego na piksele.  
  
-   Rysuje obraz na ekranie.  
  
 Położenie przeszukiwanej lokalizacji docelowej lokalizuje obraz na ekranie, rozmiar prostokąta źródłowego oraz rozmiar i kształt równoległobok docelowego określa skalowanie i ścinanie rysowanego obrazu, a rozmiar prostokąta określa jaka część oryginalnego obrazu jest rysowana na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#42)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#42)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="destRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa lokalizację i rozmiar rysowanego obrazu. Obraz jest skalowany w celu dopasowania do prostokąta.</param>
        <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa część <paramref name="image" /> obiektu do rysowania.</param>
        <param name="srcUnit">Składowa wyliczenia, która określa jednostki miary używane <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <summary>Rysuje określoną część określoną <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i o określonym rozmiarze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametr określa prostokątną część `image` obiektu do rysowania. `srcRect` Ta część jest skalowana w celu dopasowania do prostokąta określonego przez `destRect` parametr.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy prostokąt docelowy, w którym ma zostać narysowany obraz.  
  
-   Tworzy prostokąt źródłowy, z którego ma zostać wyodrębniona część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego na piksele.  
  
-   Rysuje obraz na ekranie.  
  
 Pozycja prostokąta docelowego lokalizuje obraz na ekranie, rozmiary prostokątów źródłowych i docelowych określają skalowanie rysowanego obrazu, a rozmiar prostokąta źródłowego określa, jaka część oryginalnego obrazu jest rysowana w Wyświetla.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#47)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#47)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#47)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="destRect"><see cref="T:System.Drawing.RectangleF" />Struktura, która określa lokalizację i rozmiar rysowanego obrazu. Obraz jest skalowany w celu dopasowania do prostokąta.</param>
        <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />Struktura, która określa część <paramref name="image" /> obiektu do rysowania.</param>
        <param name="srcUnit">Składowa wyliczenia, która określa jednostki miary używane <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <summary>Rysuje określoną część określoną <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i o określonym rozmiarze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametr określa prostokątną część `image` obiektu do rysowania. `srcRect` Ta część jest skalowana w celu dopasowania do prostokąta określonego przez `destRect` parametr.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy prostokąt docelowy, w którym ma zostać narysowany obraz.  
  
-   Tworzy prostokąt źródłowy, z którego ma zostać wyodrębniona część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego na piksele.  
  
-   Rysuje obraz na ekranie.  
  
 Pozycja prostokąta docelowego lokalizuje obraz na ekranie, rozmiary prostokątów źródłowych i docelowych określają skalowanie rysowanego obrazu, a rozmiar prostokąta źródłowego określa, jaka część oryginalnego obrazu jest rysowana w Wyświetla.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#57)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#57)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok.</param>
        <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa część <paramref name="image" /> obiektu do rysowania.</param>
        <param name="srcUnit">Składowa wyliczenia, która określa jednostki miary używane <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />określające kolorowanie i informacje o gamma dla <paramref name="image" /> obiektu.</param>
        <summary>Rysuje określoną część określoną <see cref="T:System.Drawing.Image" /> w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty przerównoległobok. Trzy <xref:System.Drawing.Point> struktury reprezentują górne lewe, górne i dolne rogi równoległobok. Czwarty punkt jest ekstrapolacji z pierwszych trzech, aby utworzyć równoległobok.  
  
 Parametr określa prostokątną część`image` obiektu do rysowania. `srcRect` Ta część jest skalowana i ścinania w celu dopasowania do okna równoległobok określonego przez `destPoints` parametr.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok do rysowania obrazu.  
  
-   Tworzy prostokąt, aby wybrać część obrazu do rysowania.  
  
-   Ustawia jednostkę rysowania grafiki na piksel.  
  
-   Rysuje oryginalny obraz na ekranie.  
  
-   Tworzy dodatkowe równoległobok do rysowania dopasowanego obrazu.  
  
-   Tworzy i ustawia atrybuty dopasowanego obrazu w taki sposób, aby miała większą wartość gamma.  
  
-   Rysuje dostosowany obraz do ekranu.  
  
 Dla oryginalnego, niedopasowanego równoległobok, pozycja lokalizuje obraz na ekranie, a rozmiar prostokąta oraz rozmiar i kształt równoległobok określa skalowanie i ścinanie rysowanego obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#37)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#37)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#37)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok.</param>
        <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />Struktura, która określa część <paramref name="image" /> obiektu do rysowania.</param>
        <param name="srcUnit">Składowa wyliczenia, która określa jednostki miary używane <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />określające kolorowanie i informacje o gamma dla <paramref name="image" /> obiektu.</param>
        <summary>Rysuje określoną część określoną <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i o określonym rozmiarze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty przerównoległobok. Trzy <xref:System.Drawing.PointF> struktury reprezentują górne lewe, górne i dolne rogi równoległobok. Czwarty punkt jest ekstrapolacji z pierwszych trzech, aby utworzyć równoległobok.  
  
 Parametr określa prostokątną część `image` obiektu do rysowania. `srcRect` Ta część jest skalowana i ścinania w celu dopasowania do okna równoległobok określonego przez `destPoints` parametr.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy Punkty definiujące równoległobok docelowy, w którym ma zostać narysowany obraz.  
  
-   Tworzy prostokąt źródłowy, z którego ma zostać wyodrębniona część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego na piksele.  
  
-   Rysuje oryginalny obraz na ekranie.  
  
-   Tworzy dodatkowe równoległobok do rysowania dopasowanego obrazu.  
  
-   Tworzy i ustawia atrybuty dopasowanego obrazu w taki sposób, aby miała większą wartość gamma.  
  
-   Rysuje dostosowany obraz do ekranu.  
  
 W przypadku oryginalnego, niedopasowanego równoległobok do miejsca docelowego, pozycja lokalizuje obraz na ekranie, rozmiar prostokąta źródłowego oraz rozmiar i kształt równoległobok docelowego określa skalowanie i ścinanie rysowanego obrazu oraz rozmiar prostokąt określa, jaka część oryginalnego obrazu jest rysowana na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#43)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#43)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#43)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * int * int * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, x, y, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="x">Współrzędna x lewego górnego rogu rysowanego obrazu.</param>
        <param name="y">Współrzędna y lewego górnego rogu rysowanego obrazu.</param>
        <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa część <paramref name="image" /> obiektu do rysowania.</param>
        <param name="srcUnit">Składowa wyliczenia, która określa jednostki miary używane <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <summary>Rysuje część obrazu w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość szerokości pikseli i wartość dla rozdzielczości poziomej (punkty na cal). Szerokość fizyczna (w calach) obrazu jest szerokością pikseli podzieloną przez rozdzielczość w poziomie. Na przykład obraz z szerokością pikseli 360 i rozdzielczość pozioma 72 kropek na cal ma szerokość fizyczną 5 cali. Podobne uwagi dotyczą wysokości pikseli i wysokości fizycznej.  
  
 Ta metoda służy do rysowania części obrazu przy użyciu rozmiaru fizycznego, więc część obrazu będzie miała prawidłowy rozmiar w calach niezależnie od rozdzielczości (punkty na cal) urządzenia wyświetlającego. Załóżmy na przykład, że część obrazu ma szerokość pikseli wynoszącą 216 i rozdzielczość poziomą 72 punktów na cal. W przypadku wywołania tej metody w celu narysowania tej części obrazu na urządzeniu z rozdzielczością 96 punktów na cal, Szerokość pikseli renderowanej części obrazu będzie równa (216/72) * 96 = 288.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy współrzędne, w których ma zostać narysowany górny lewy róg obrazu.  
  
-   Tworzy prostokąt źródłowy, z którego ma zostać wyodrębniona część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego na piksele.  
  
-   Rysuje obraz na ekranie.  
  
 Rozmiar prostokąta źródłowego określa część nieskalowanego obrazu oryginalnego na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#59)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#59)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * int * int * int * int -&gt; unit" Usage="graphics.DrawImage (image, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="x">Współrzędna x lewego górnego rogu rysowanego obrazu.</param>
        <param name="y">Współrzędna y lewego górnego rogu rysowanego obrazu.</param>
        <param name="width">Szerokość rysowanego obrazu.</param>
        <param name="height">Wysokość rysowanego obrazu.</param>
        <summary>Rysuje określony <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i o określonym rozmiarze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prostokąt zdefiniowany przez `x`parametry, `y`, `width`, i `height` określa położenie i rozmiar rysowanego obrazu.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy położenie i rozmiar prostokąta, w którym ma zostać narysowany obraz.  
  
-   Rysuje obraz na ekranie.  
  
 Pozycja prostokąta lokalizuje obraz na ekranie, a rozmiar oryginalnego obrazu i rozmiar prostokąta określa skalowanie rysowanego obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#60)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#60)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * single * single * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, x, y, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="x">Współrzędna x lewego górnego rogu rysowanego obrazu.</param>
        <param name="y">Współrzędna y lewego górnego rogu rysowanego obrazu.</param>
        <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />Struktura, która określa część <see cref="T:System.Drawing.Image" /> do rysowania.</param>
        <param name="srcUnit">Składowa wyliczenia, która określa jednostki miary używane <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <summary>Rysuje część obrazu w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość szerokości pikseli i wartość dla rozdzielczości poziomej (punkty na cal). Szerokość fizyczna (w calach) obrazu jest szerokością pikseli podzieloną przez rozdzielczość w poziomie. Na przykład obraz z szerokością pikseli 360 i rozdzielczość pozioma 72 kropek na cal ma szerokość fizyczną 5 cali. Podobne uwagi dotyczą wysokości pikseli i wysokości fizycznej.  
  
 Ta metoda służy do rysowania części obrazu przy użyciu rozmiaru fizycznego, więc część obrazu będzie miała prawidłowy rozmiar w calach niezależnie od rozdzielczości (punkty na cal) urządzenia wyświetlającego. Załóżmy na przykład, że część obrazu ma szerokość pikseli wynoszącą 216 i rozdzielczość poziomą 72 punktów na cal. W przypadku wywołania tej metody w celu narysowania tej części obrazu na urządzeniu z rozdzielczością 96 punktów na cal, Szerokość pikseli renderowanej części obrazu będzie równa (216/72) * 96 = 288.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy współrzędne, w których ma zostać narysowany górny lewy róg obrazu.  
  
-   Tworzy prostokąt źródłowy, z którego ma zostać wyodrębniona część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego na piksele.  
  
-   Rysuje obraz na ekranie.  
  
 Rozmiar prostokąta źródłowego określa część nieskalowanego obrazu oryginalnego na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#62)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#62)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * single * single * single * single -&gt; unit" Usage="graphics.DrawImage (image, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="x">Współrzędna x lewego górnego rogu rysowanego obrazu.</param>
        <param name="y">Współrzędna y lewego górnego rogu rysowanego obrazu.</param>
        <param name="width">Szerokość rysowanego obrazu.</param>
        <param name="height">Wysokość rysowanego obrazu.</param>
        <summary>Rysuje określony <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i o określonym rozmiarze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prostokąt zdefiniowany przez `x`parametry, `y`, `width`, i `height` określa położenie i rozmiar rysowanego obrazu.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy położenie i rozmiar prostokąta, w którym ma zostać narysowany obraz.  
  
-   Rysuje obraz na ekranie.  
  
 Pozycja prostokąta lokalizuje obraz na ekranie, a rozmiar oryginalnego obrazu i rozmiar prostokąta określa skalowanie rysowanego obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#63)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#63)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok.</param>
        <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa część <paramref name="image" /> obiektu do rysowania.</param>
        <param name="srcUnit">Składowa wyliczenia, która określa jednostki miary używane <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />określające kolorowanie i informacje o gamma dla <paramref name="image" /> obiektu.</param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />Delegat, który określa metodę do wywołania podczas rysowania obrazu. Ta metoda jest często wywoływana w celu sprawdzenia, czy należy zatrzymać wykonywanie <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> metody zgodnie z kryteriami ustalonymi przez aplikację.</param>
        <summary>Rysuje określoną część określoną <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i o określonym rozmiarze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty przerównoległobok. Trzy <xref:System.Drawing.PointF> struktury reprezentują górne lewe, górne i dolne rogi równoległobok. Czwarty punkt jest ekstrapolacji z pierwszych trzech, aby utworzyć równoległobok.  
  
 Parametr określa prostokątną część `image` obiektu do rysowania. `srcRect` Ta część jest skalowana i ścinania w celu dopasowania do okna równoległobok określonego przez `destPoints` parametr.  
  
 To Przeciążenie z `callback` parametrem zapewnia środki do zatrzymania rysowania obrazu po jego uruchomieniu zgodnie z kryteriami ustalonymi przez aplikację. Na przykład aplikacja może rozpocząć rysowanie dużego obrazu, a użytkownik może przewinąć obraz z ekranu, w którym to przypadku aplikacja może zatrzymać Rysowanie.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod najpierw definiuje metodę wywołania zwrotnego dla <xref:System.Drawing.Graphics.DrawImageAbort> delegata; definicja jest uproszczony i jedynie testów, aby sprawdzić, <xref:System.Drawing.Graphics.DrawImage%2A> czy metoda wywołuje ją z parametrem `callBackData` null. Główna treść przykładu wykonuje następujące czynności:  
  
-   Tworzy wystąpienie <xref:System.Drawing.Graphics.DrawImageAbort> metody wywołania zwrotnego:  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok do rysowania obrazu.  
  
-   Tworzy prostokąt, aby wybrać część obrazu do rysowania.  
  
-   Ustawia jednostkę rysowania grafiki na piksel.  
  
-   Rysuje oryginalny obraz na ekranie.  
  
-   Tworzy dodatkowe równoległobok do rysowania dopasowanego obrazu.  
  
-   Tworzy i ustawia atrybuty dopasowanego obrazu w taki sposób, aby miała większą wartość gamma.  
  
-   Rysuje dostosowany obraz do ekranu.  
  
 Dla oryginalnego, niedopasowanego równoległobok, pozycja lokalizuje obraz na ekranie, a rozmiar prostokąta oraz rozmiar i kształt równoległobok określa skalowanie i ścinanie rysowanego obrazu.  
  
 `callBackData` Ponieważ w <xref:System.Drawing.Graphics.DrawImageAbort> tym przykładzie używa przeciążenia, które nie przekazuje parametru, wywołanie zwrotne <xref:System.Drawing.Graphics.DrawImage%2A> zwraca `true`, które powoduje zakończenie metody, a kod obsługi wyjątków zawarty w przykładzie drukuje tekst wyjątku zamiast rysowania obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#38)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#38)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok.</param>
        <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />Struktura, która określa część <paramref name="image" /> obiektu do rysowania.</param>
        <param name="srcUnit">Składowa wyliczenia, która określa jednostki miary używane <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />określające kolorowanie i informacje o gamma dla <paramref name="image" /> obiektu.</param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />Delegat, który określa metodę do wywołania podczas rysowania obrazu. Ta metoda jest często wywoływana w celu sprawdzenia, czy należy zatrzymać wykonywanie <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> metody zgodnie z kryteriami ustalonymi przez aplikację.</param>
        <summary>Rysuje określoną część określoną <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i o określonym rozmiarze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty przerównoległobok. Trzy <xref:System.Drawing.PointF> struktury reprezentują górne lewe, górne i dolne rogi równoległobok. Czwarty punkt jest ekstrapolacji z pierwszych trzech, aby utworzyć równoległobok.  
  
 Parametr określa prostokątną część `image` obiektu do rysowania. `srcRect` Ta część jest skalowana i ścinania w celu dopasowania do okna równoległobok określonego przez `destPoints` parametr.  
  
 To Przeciążenie z `callback` parametrem zapewnia środki do zatrzymania rysowania obrazu po jego uruchomieniu zgodnie z kryteriami ustalonymi przez aplikację. Na przykład aplikacja może rozpocząć rysowanie dużego obrazu, a użytkownik może przewinąć obraz z ekranu, w którym to przypadku aplikacja może zatrzymać Rysowanie.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod najpierw definiuje metodę wywołania zwrotnego dla <xref:System.Drawing.Graphics.DrawImageAbort> delegata; definicja jest uproszczony i jedynie testów, aby sprawdzić, <xref:System.Drawing.Graphics.DrawImage%2A> czy metoda wywołuje ją z parametrem `callBackData` null. Główna treść przykładu wykonuje następujące czynności:  
  
-   Tworzy wystąpienie <xref:System.Drawing.Graphics.DrawImageAbort> metody wywołania zwrotnego.  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok do rysowania obrazu.  
  
-   Tworzy prostokąt, aby wybrać część obrazu do rysowania.  
  
-   Ustawia jednostkę rysowania grafiki na piksel.  
  
-   Rysuje oryginalny obraz na ekranie.  
  
-   Tworzy dodatkowe równoległobok do rysowania dopasowanego obrazu.  
  
-   Tworzy i ustawia atrybuty dopasowanego obrazu w taki sposób, aby miała większą wartość gamma.  
  
-   Rysuje dostosowany obraz do ekranu.  
  
 Dla oryginalnego, niedopasowanego równoległobok, pozycja lokalizuje obraz na ekranie, a rozmiar prostokąta oraz rozmiar i kształt równoległobok określa skalowanie i ścinanie rysowanego obrazu.  
  
 `callBackData` Ponieważ w <xref:System.Drawing.Graphics.DrawImageAbort> tym przykładzie używa przeciążenia, które nie przekazuje parametru, wywołanie zwrotne <xref:System.Drawing.Graphics.DrawImage%2A> zwraca `true`, które powoduje zakończenie metody, a kod obsługi wyjątków zawarty w przykładzie drukuje tekst wyjątku zamiast rysowania obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#44)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#44)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback, int32 callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback, int callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * int -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok.</param>
        <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa część <paramref name="image" /> obiektu do rysowania.</param>
        <param name="srcUnit">Składowa wyliczenia, która określa jednostki miary używane <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />określające kolorowanie i informacje o gamma dla <paramref name="image" /> obiektu.</param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />Delegat, który określa metodę do wywołania podczas rysowania obrazu. Ta metoda jest często wywoływana w celu sprawdzenia, czy należy zatrzymać wykonywanie <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> metody zgodnie z kryteriami ustalonymi przez aplikację.</param>
        <param name="callbackData">Wartość określająca dodatkowe dane dla <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> delegata do użycia podczas sprawdzania, czy zatrzymać wykonywanie <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> metody.</param>
        <summary>Rysuje określoną część określoną <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i o określonym rozmiarze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty przerównoległobok. Trzy <xref:System.Drawing.PointF> struktury reprezentują górne lewe, górne i dolne rogi równoległobok. Czwarty punkt jest ekstrapolacji z pierwszych trzech, aby utworzyć równoległobok.  
  
 Parametr określa prostokątną część `image` obiektu do rysowania. `srcRect` Ta część jest skalowana i ścinania w celu dopasowania do okna równoległobok określonego przez `destPoints` parametr.  
  
 To Przeciążenie z `callback` parametrami `callbackData` i zapewnia środki do zatrzymania rysowania obrazu po jego uruchomieniu zgodnie z kryteriami i danymi określonymi przez aplikację. Na przykład aplikacja może rozpocząć rysowanie dużego obrazu, a użytkownik może przewinąć obraz z ekranu, w którym to przypadku aplikacja może zatrzymać Rysowanie.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod najpierw definiuje metodę wywołania zwrotnego dla <xref:System.Drawing.Graphics.DrawImageAbort> delegata; definicja jest uproszczony i jedynie testów, aby sprawdzić, <xref:System.Drawing.Graphics.DrawImage%2A> czy metoda wywołuje ją z parametrem `callBackData` null. Główna treść przykładu wykonuje następujące czynności:  
  
-   Tworzy wystąpienie <xref:System.Drawing.Graphics.DrawImageAbort> metody wywołania zwrotnego.  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok do rysowania obrazu.  
  
-   Tworzy prostokąt, aby wybrać część obrazu do rysowania.  
  
-   Ustawia jednostkę rysowania grafiki na piksel.  
  
-   Rysuje oryginalny obraz na ekranie.  
  
-   Tworzy dodatkowe równoległobok do rysowania dopasowanego obrazu.  
  
-   Tworzy i ustawia atrybuty dopasowanego obrazu w taki sposób, aby miała większą wartość gamma.  
  
-   Rysuje dostosowany obraz do ekranu.  
  
 Dla oryginalnego, niedopasowanego równoległobok, pozycja lokalizuje obraz na ekranie, a rozmiar prostokąta oraz rozmiar i kształt równoległobok określa skalowanie i ścinanie rysowanego obrazu.  
  
 Ponieważ w tym przykładzie używane jest Przeciążenie, które `callBackData` przekazuje parametr <xref:System.Drawing.Graphics.DrawImageAbort> , wywołanie zwrotne <xref:System.Drawing.Graphics.DrawImage%2A> zwraca `false`, które powoduje kontynuowanie metody, a przykład rysuje dostosowany obraz do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#39)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#39)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#39)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback, int32 callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback, int callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * int -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok.</param>
        <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />Struktura, która określa część <paramref name="image" /> obiektu do rysowania.</param>
        <param name="srcUnit">Składowa wyliczenia, która określa jednostki miary używane <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />określające kolorowanie i informacje o gamma dla <paramref name="image" /> obiektu.</param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />Delegat, który określa metodę do wywołania podczas rysowania obrazu. Ta metoda jest często wywoływana w celu sprawdzenia, czy należy zatrzymać wykonywanie <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> metody zgodnie z kryteriami ustalonymi przez aplikację.</param>
        <param name="callbackData">Wartość określająca dodatkowe dane dla <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> delegata do użycia podczas sprawdzania, czy zatrzymać wykonywanie <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> metody.</param>
        <summary>Rysuje określoną część określoną <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i o określonym rozmiarze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Parametr określa trzy punkty przerównoległobok. Trzy <xref:System.Drawing.PointF> struktury reprezentują górne lewe, górne i dolne rogi równoległobok. Czwarty punkt jest ekstrapolacji z pierwszych trzech, aby utworzyć równoległobok.  
  
 Parametr określa prostokątną część `image` obiektu do rysowania. `srcRect` Ta część jest skalowana i ścinania w celu dopasowania do okna równoległobok określonego przez `destPoints` parametr.  
  
 To Przeciążenie z `callback` parametrami `callbackData` i zapewnia środki do zatrzymania rysowania obrazu po jego uruchomieniu zgodnie z kryteriami i danymi określonymi przez aplikację. Na przykład aplikacja może rozpocząć rysowanie dużego obrazu, a użytkownik może przewinąć obraz z ekranu, w którym to przypadku aplikacja może zatrzymać Rysowanie.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku <xref:System.Windows.Forms.PaintEventArgs>z Windows Forms i wymaga `e`, który `Pa` <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod najpierw definiuje metodę wywołania zwrotnego dla <xref:System.Drawing.Graphics.DrawImageAbort> delegata; definicja jest uproszczony i jedynie testów, aby sprawdzić, <xref:System.Drawing.Graphics.DrawImage%2A> czy metoda wywołuje ją z parametrem `callBackData` null. Główna treść przykładu wykonuje następujące czynności:  
  
-   Tworzy wystąpienie <xref:System.Drawing.Graphics.DrawImageAbort> metody wywołania zwrotnego.  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy punkty, które definiują równoległobok do rysowania obrazu.  
  
-   Tworzy prostokąt, aby wybrać część obrazu do rysowania.  
  
-   Ustawia jednostkę rysowania grafiki na piksel.  
  
-   Rysuje oryginalny obraz na ekranie.  
  
-   Tworzy dodatkowe równoległobok do rysowania dopasowanego obrazu.  
  
-   Tworzy i ustawia atrybuty dopasowanego obrazu w taki sposób, aby miała większą wartość gamma.  
  
-   Rysuje dostosowany obraz do ekranu.  
  
 Dla oryginalnego, niedopasowanego równoległobok, pozycja lokalizuje obraz na ekranie, a rozmiar prostokąta oraz rozmiar i kształt równoległobok określa skalowanie i ścinanie rysowanego obrazu.  
  
 Ponieważ w tym przykładzie używane jest Przeciążenie, które `callBackData` przekazuje parametr <xref:System.Drawing.Graphics.DrawImageAbort> , wywołanie zwrotne <xref:System.Drawing.Graphics.DrawImage%2A> zwraca `false`, które powoduje kontynuowanie metody, a przykład rysuje dostosowany obraz do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#45)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#45)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="destRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa lokalizację i rozmiar rysowanego obrazu. Obraz jest skalowany w celu dopasowania do prostokąta.</param>
        <param name="srcX">Współrzędna x lewego górnego rogu części obrazu źródłowego do rysowania.</param>
        <param name="srcY">Współrzędna y lewego górnego rogu części obrazu źródłowego do rysowania.</param>
        <param name="srcWidth">Szerokość części obrazu źródłowego do rysowania.</param>
        <param name="srcHeight">Wysokość części obrazu źródłowego do rysowania.</param>
        <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" /> Składowa wyliczenia, która określa jednostki miary używane do określania prostokąta źródłowego.</param>
        <summary>Rysuje określoną część określoną <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i o określonym rozmiarze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`Parametry, `srcY`, i`srcWidth` `image` określają prostokątnączęśćobiektudorysowania`srcHeight` . Prostokąt jest względem lewego górnego rogu obrazu źródłowego. Ta część jest skalowana w celu dopasowania do prostokąta określonego przez `destRect` parametr.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy prostokąt docelowy, w którym ma zostać narysowany obraz.  
  
-   Tworzy współrzędne prostokąta źródłowego, z którego ma zostać wyodrębniona część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego na piksele.  
  
-   Rysuje obraz na ekranie.  
  
 Pozycja prostokąta docelowego lokalizuje obraz na ekranie, a rozmiary prostokątów źródłowych i docelowych określają skalowanie rysowanego obrazu, a rozmiar prostokąta źródłowego określa, jaka część oryginalnego obrazu jest rysowana w Wyświetla.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#48)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#48)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#48)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="destRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa lokalizację i rozmiar rysowanego obrazu. Obraz jest skalowany w celu dopasowania do prostokąta.</param>
        <param name="srcX">Współrzędna x lewego górnego rogu części obrazu źródłowego do rysowania.</param>
        <param name="srcY">Współrzędna y lewego górnego rogu części obrazu źródłowego do rysowania.</param>
        <param name="srcWidth">Szerokość części obrazu źródłowego do rysowania.</param>
        <param name="srcHeight">Wysokość części obrazu źródłowego do rysowania.</param>
        <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" /> Składowa wyliczenia, która określa jednostki miary używane do określania prostokąta źródłowego.</param>
        <summary>Rysuje określoną część określoną <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i o określonym rozmiarze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`Parametry, `srcY`, i`srcWidth` `image` określają prostokątnączęśćobiektudorysowania`srcHeight` . Prostokąt jest względem lewego górnego rogu obrazu źródłowego. Ta część jest skalowana w celu dopasowania do prostokąta określonego przez `destRect` parametr.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy współrzędne prostokąta docelowego, w którym ma zostać narysowany obraz.  
  
-   Tworzy prostokąt źródłowy, z którego ma zostać wyodrębniona część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego na piksele.  
  
-   Rysuje obraz na ekranie.  
  
 Pozycja prostokąta docelowego lokalizuje obraz na ekranie, rozmiary prostokątów źródłowych i docelowych określają skalowanie rysowanego obrazu, a rozmiar prostokąta źródłowego określa, jaka część oryginalnego obrazu jest rysowana w Wyświetla.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#52)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#52)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="destRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa lokalizację i rozmiar rysowanego obrazu. Obraz jest skalowany w celu dopasowania do prostokąta.</param>
        <param name="srcX">Współrzędna x lewego górnego rogu części obrazu źródłowego do rysowania.</param>
        <param name="srcY">Współrzędna y lewego górnego rogu części obrazu źródłowego do rysowania.</param>
        <param name="srcWidth">Szerokość części obrazu źródłowego do rysowania.</param>
        <param name="srcHeight">Wysokość części obrazu źródłowego do rysowania.</param>
        <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" /> Składowa wyliczenia, która określa jednostki miary używane do określania prostokąta źródłowego.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />określające kolorowanie i informacje o gamma dla <paramref name="image" /> obiektu.</param>
        <summary>Rysuje określoną część określoną <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i o określonym rozmiarze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`Parametry, `srcY`, i`srcWidth` `image` określają prostokątnączęśćobiektudorysowania`srcHeight` . Prostokąt jest względem lewego górnego rogu obrazu źródłowego. Ta część jest skalowana w celu dopasowania do prostokąta określonego przez `destRect` parametr.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy prostokąt docelowy, w którym ma zostać narysowany obraz.  
  
-   Tworzy współrzędne prostokąta źródłowego, z którego ma zostać wyodrębniona część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego na piksele.  
  
-   Rysuje oryginalny obraz na ekranie.  
  
-   Tworzy dodatkowy prostokąt do rysowania dopasowanego obrazu.  
  
-   Tworzy i ustawia atrybuty dopasowanego obrazu w taki sposób, aby miała większą wartość gamma.  
  
-   Rysuje dostosowany obraz do ekranu.  
  
 W przypadku oryginalnego, niedopasowanego prostokąta docelowego pozycja lokalizuje obraz na ekranie, a rozmiary prostokątów źródłowych i docelowych określają skalowanie rysowanego obrazu, a rozmiar prostokąta źródłowego określa część obraz oryginalny jest rysowany na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#49)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#49)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#49)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="destRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa lokalizację i rozmiar rysowanego obrazu. Obraz jest skalowany w celu dopasowania do prostokąta.</param>
        <param name="srcX">Współrzędna x lewego górnego rogu części obrazu źródłowego do rysowania.</param>
        <param name="srcY">Współrzędna y lewego górnego rogu części obrazu źródłowego do rysowania.</param>
        <param name="srcWidth">Szerokość części obrazu źródłowego do rysowania.</param>
        <param name="srcHeight">Wysokość części obrazu źródłowego do rysowania.</param>
        <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" /> Składowa wyliczenia, która określa jednostki miary używane do określania prostokąta źródłowego.</param>
        <param name="imageAttrs"><see cref="T:System.Drawing.Imaging.ImageAttributes" />określające kolorowanie i informacje o gamma dla <paramref name="image" /> obiektu.</param>
        <summary>Rysuje określoną część określoną <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i o określonym rozmiarze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`Parametry, `srcY`, i`srcWidth` `image` określają prostokątnączęśćobiektudorysowania`srcHeight` . Prostokąt jest względem lewego górnego rogu obrazu źródłowego. Ta część jest skalowana w celu dopasowania do prostokąta określonego przez `destRect` parametr.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy prostokąt docelowy, w którym ma zostać narysowany obraz.  
  
-   Tworzy współrzędne prostokąta źródłowego, z którego ma zostać wyodrębniona część obrazu.  
  
-   Ustawia jednostkę miary prostokąta źródłowego na piksele.  
  
-   Rysuje oryginalny obraz na ekranie.  
  
-   Tworzy dodatkowy prostokąt do rysowania dopasowanego obrazu.  
  
-   Tworzy i ustawia atrybuty dopasowanego obrazu w taki sposób, aby miała większą wartość gamma.  
  
-   Rysuje dostosowany obraz do ekranu.  
  
 W przypadku oryginalnego, niedopasowanego prostokąta docelowego pozycja lokalizuje obraz na ekranie, a rozmiary prostokątów źródłowych i docelowych określają skalowanie rysowanego obrazu, a rozmiar prostokąta źródłowego określa część obraz oryginalny jest rysowany na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#53)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#53)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttr, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="destRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa lokalizację i rozmiar rysowanego obrazu. Obraz jest skalowany w celu dopasowania do prostokąta.</param>
        <param name="srcX">Współrzędna x lewego górnego rogu części obrazu źródłowego do rysowania.</param>
        <param name="srcY">Współrzędna y lewego górnego rogu części obrazu źródłowego do rysowania.</param>
        <param name="srcWidth">Szerokość części obrazu źródłowego do rysowania.</param>
        <param name="srcHeight">Wysokość części obrazu źródłowego do rysowania.</param>
        <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" /> Składowa wyliczenia, która określa jednostki miary używane do określania prostokąta źródłowego.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />określające kolorowanie i informacje o gamma dla <paramref name="image" />.</param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />Delegat, który określa metodę do wywołania podczas rysowania obrazu. Ta metoda jest często wywoływana w celu sprawdzenia, czy należy zatrzymać wykonywanie <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> metody zgodnie z kryteriami ustalonymi przez aplikację.</param>
        <summary>Rysuje określoną część określoną <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i o określonym rozmiarze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`Parametry, `srcY`, i`srcWidth` `image` określają prostokątnączęśćobiektudorysowania`srcHeight` . Prostokąt jest względem lewego górnego rogu obrazu źródłowego. Ta część jest skalowana w celu dopasowania do prostokąta określonego przez `destRect` obiekt.  
  
 To Przeciążenie z `callback` parametrem zapewnia środki do zatrzymania rysowania obrazu po jego uruchomieniu zgodnie z kryteriami ustalonymi przez aplikację. Na przykład aplikacja może rozpocząć rysowanie dużego obrazu, a użytkownik może przewinąć obraz z ekranu, w którym to przypadku aplikacja może zatrzymać Rysowanie.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod najpierw definiuje metodę wywołania zwrotnego dla <xref:System.Drawing.Graphics.DrawImageAbort> delegata; definicja jest uproszczony i jedynie testów, aby sprawdzić, <xref:System.Drawing.Graphics.DrawImage%2A> czy metoda wywołuje ją z parametrem `callBackData` null. Główna treść przykładu wykonuje następujące czynności:  
  
-   Tworzy wystąpienie <xref:System.Drawing.Graphics.DrawImageAbort> metody wywołania zwrotnego.  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy Punkty definiujące prostokąt docelowy, w którym ma zostać narysowany obraz.  
  
-   Tworzy prostokąt źródłowy, aby wybrać część obrazu do rysowania.  
  
-   Ustawia jednostkę rysowania grafiki na piksel.  
  
-   Rysuje oryginalny obraz na ekranie.  
  
-   Tworzy dodatkowy prostokąt docelowy, w którym ma zostać narysowany dostosowany obraz.  
  
-   Tworzy i ustawia atrybuty dopasowanego obrazu w taki sposób, aby miała większą wartość gamma.  
  
-   Rysuje dostosowany obraz do ekranu.  
  
 W przypadku oryginalnego, niedopasowanego prostokąta docelowego pozycja lokalizuje obraz na ekranie, a rozmiar prostokąta źródłowego oraz rozmiar i kształt prostokąta docelowego określa skalowanie rysowanego obrazu.  
  
 `callBackData` Ponieważ w <xref:System.Drawing.Graphics.DrawImageAbort> tym przykładzie używa przeciążenia, które nie przekazuje parametru, wywołanie zwrotne <xref:System.Drawing.Graphics.DrawImage%2A> zwraca `true`, które powoduje zakończenie metody, a kod obsługi wyjątków zawarty w przykładzie drukuje tekst wyjątku zamiast rysowania obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#50)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#50)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="destRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa lokalizację i rozmiar rysowanego obrazu. Obraz jest skalowany w celu dopasowania do prostokąta.</param>
        <param name="srcX">Współrzędna x lewego górnego rogu części obrazu źródłowego do rysowania.</param>
        <param name="srcY">Współrzędna y lewego górnego rogu części obrazu źródłowego do rysowania.</param>
        <param name="srcWidth">Szerokość części obrazu źródłowego do rysowania.</param>
        <param name="srcHeight">Wysokość części obrazu źródłowego do rysowania.</param>
        <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" /> Składowa wyliczenia, która określa jednostki miary używane do określania prostokąta źródłowego.</param>
        <param name="imageAttrs"><see cref="T:System.Drawing.Imaging.ImageAttributes" />określające kolorowanie i informacje o gamma dla <paramref name="image" /> obiektu.</param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />Delegat, który określa metodę do wywołania podczas rysowania obrazu. Ta metoda jest często wywoływana w celu sprawdzenia, czy należy zatrzymać wykonywanie <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> metody zgodnie z kryteriami ustalonymi przez aplikację.</param>
        <summary>Rysuje określoną część określoną <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i o określonym rozmiarze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`Parametry, `srcY`, i`srcWidth` `image` określają prostokątnączęśćobiektudorysowania`srcHeight` . Prostokąt jest względem lewego górnego rogu obrazu źródłowego. Ta część jest skalowana w celu dopasowania do prostokąta określonego przez `destRect` parametr.  
  
 To Przeciążenie z `callback` parametrem zapewnia środki do zatrzymania rysowania obrazu po jego uruchomieniu zgodnie z kryteriami ustalonymi przez aplikację. Na przykład aplikacja może rozpocząć rysowanie dużego obrazu, a użytkownik może przewinąć obraz z ekranu, w którym to przypadku aplikacja może zatrzymać Rysowanie.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod najpierw definiuje metodę wywołania zwrotnego dla <xref:System.Drawing.Graphics.DrawImageAbort> delegata; definicja jest uproszczony i jedynie testów, aby sprawdzić, <xref:System.Drawing.Graphics.DrawImage%2A> czy metoda wywołuje ją z parametrem `callBackData` null. Główna treść przykładu wykonuje następujące czynności:  
  
-   Tworzy wystąpienie <xref:System.Drawing.Graphics.DrawImageAbort> metody wywołania zwrotnego.  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy Punkty definiujące prostokąt docelowy, w którym ma zostać narysowany obraz.  
  
-   Tworzy prostokąt źródłowy, aby wybrać część obrazu do rysowania.  
  
-   Ustawia jednostkę rysowania grafiki na piksel.  
  
-   Rysuje oryginalny obraz na ekranie.  
  
-   Tworzy dodatkowy prostokąt docelowy, w którym ma zostać narysowany dostosowany obraz.  
  
-   Tworzy i ustawia atrybuty dopasowanego obrazu w taki sposób, aby miała większą wartość gamma.  
  
-   Rysuje dostosowany obraz do ekranu.  
  
 W przypadku oryginalnego, niedopasowanego prostokąta docelowego pozycja lokalizuje obraz na ekranie, a rozmiar prostokąta źródłowego oraz rozmiar i kształt prostokąta docelowego określa skalowanie rysowanego obrazu.  
  
 `callBackData` Ponieważ w <xref:System.Drawing.Graphics.DrawImageAbort> tym przykładzie używa przeciążenia, które nie przekazuje parametru, wywołanie zwrotne <xref:System.Drawing.Graphics.DrawImage%2A> zwraca `true`, które powoduje zakończenie metody, a kod obsługi wyjątków zawarty w przykładzie drukuje tekst wyjątku zamiast rysowania obrazu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#54)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#54)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * nativeint -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="destRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa lokalizację i rozmiar rysowanego obrazu. Obraz jest skalowany w celu dopasowania do prostokąta.</param>
        <param name="srcX">Współrzędna x lewego górnego rogu części obrazu źródłowego do rysowania.</param>
        <param name="srcY">Współrzędna y lewego górnego rogu części obrazu źródłowego do rysowania.</param>
        <param name="srcWidth">Szerokość części obrazu źródłowego do rysowania.</param>
        <param name="srcHeight">Wysokość części obrazu źródłowego do rysowania.</param>
        <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" /> Składowa wyliczenia, która określa jednostki miary używane do określania prostokąta źródłowego.</param>
        <param name="imageAttrs"><see cref="T:System.Drawing.Imaging.ImageAttributes" />określające kolorowanie i informacje o gamma dla <paramref name="image" /> obiektu.</param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />Delegat, który określa metodę do wywołania podczas rysowania obrazu. Ta metoda jest często wywoływana w celu sprawdzenia, czy należy zatrzymać wykonywanie <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" /> metody zgodnie z kryteriami ustalonymi przez aplikację.</param>
        <param name="callbackData">Wartość określająca dodatkowe dane dla <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> delegata do użycia podczas sprawdzania, czy zatrzymać wykonywanie <see langword="DrawImage" /> metody.</param>
        <summary>Rysuje określoną część określoną <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i o określonym rozmiarze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`Parametry, `srcY`, i`srcWidth` `image` określają prostokątnączęśćobiektudorysowania`srcHeight` . Prostokąt jest względem lewego górnego rogu obrazu źródłowego. Ta część jest skalowana w celu dopasowania do prostokąta określonego przez `destRect` parametr.  
  
 To Przeciążenie z `callback` parametrami `callbackData` i zapewnia środki do zatrzymania rysowania obrazu po jego uruchomieniu zgodnie z kryteriami i danymi określonymi przez aplikację. Na przykład aplikacja może rozpocząć rysowanie dużego obrazu, a użytkownik może przewinąć obraz z ekranu, w którym to przypadku aplikacja może zatrzymać Rysowanie.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod najpierw definiuje metodę wywołania zwrotnego dla <xref:System.Drawing.Graphics.DrawImageAbort> delegata; definicja jest uproszczony i jedynie testów, aby sprawdzić, <xref:System.Drawing.Graphics.DrawImage%2A> czy metoda wywołuje ją z parametrem `callBackData` null. Główna treść przykładu wykonuje następujące czynności:  
  
-   Tworzy wystąpienie <xref:System.Drawing.Graphics.DrawImageAbort> metody wywołania zwrotnego.  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy Punkty definiujące prostokąt docelowy, w którym ma zostać narysowany obraz.  
  
-   Tworzy prostokąt źródłowy, aby wybrać część obrazu do rysowania.  
  
-   Ustawia jednostkę rysowania grafiki na piksel.  
  
-   Rysuje oryginalny obraz na ekranie.  
  
-   Tworzy dodatkowy prostokąt docelowy, w którym ma zostać narysowany dostosowany obraz.  
  
-   Tworzy i ustawia atrybuty dopasowanego obrazu w taki sposób, aby miała większą wartość gamma.  
  
-   Rysuje dostosowany obraz do ekranu.  
  
 W przypadku oryginalnego, niedopasowanego prostokąta docelowego pozycja lokalizuje obraz na ekranie, a rozmiar prostokąta źródłowego oraz rozmiar i kształt prostokąta docelowego określa skalowanie rysowanego obrazu.  
  
 Ponieważ w tym przykładzie używane jest Przeciążenie, które `callBackData` przekazuje parametr <xref:System.Drawing.Graphics.DrawImageAbort> , wywołanie zwrotne <xref:System.Drawing.Graphics.DrawImage%2A> zwraca `false`, które powoduje kontynuowanie metody, a przykład rysuje dostosowany obraz do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#51)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#51)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * nativeint -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="destRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa lokalizację i rozmiar rysowanego obrazu. Obraz jest skalowany w celu dopasowania do prostokąta.</param>
        <param name="srcX">Współrzędna x lewego górnego rogu części obrazu źródłowego do rysowania.</param>
        <param name="srcY">Współrzędna y lewego górnego rogu części obrazu źródłowego do rysowania.</param>
        <param name="srcWidth">Szerokość części obrazu źródłowego do rysowania.</param>
        <param name="srcHeight">Wysokość części obrazu źródłowego do rysowania.</param>
        <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" /> Składowa wyliczenia, która określa jednostki miary używane do określania prostokąta źródłowego.</param>
        <param name="imageAttrs"><see cref="T:System.Drawing.Imaging.ImageAttributes" />określające kolorowanie i informacje o gamma dla <paramref name="image" /> obiektu.</param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />Delegat, który określa metodę do wywołania podczas rysowania obrazu. Ta metoda jest często wywoływana w celu sprawdzenia, czy należy zatrzymać wykonywanie <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" /> metody zgodnie z kryteriami ustalonymi przez aplikację.</param>
        <param name="callbackData">Wartość określająca dodatkowe dane dla <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> delegata do użycia podczas sprawdzania, czy zatrzymać wykonywanie <see langword="DrawImage" /> metody.</param>
        <summary>Rysuje określoną część określoną <see cref="T:System.Drawing.Image" /> w określonej lokalizacji i o określonym rozmiarze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`Parametry, `srcY`, i`srcWidth` `image` określają prostokątnączęśćobiektudorysowania`srcHeight` . Prostokąt jest względem lewego górnego rogu obrazu źródłowego. Ta część jest skalowana w celu dopasowania do prostokąta określonego przez `destRect` parametr.  
  
 To Przeciążenie z `callback` parametrami `callbackData` i zapewnia środki do zatrzymania rysowania obrazu po jego uruchomieniu zgodnie z kryteriami i danymi określonymi przez aplikację. Na przykład aplikacja może rozpocząć rysowanie dużego obrazu, a użytkownik może przewinąć obraz z ekranu, w którym to przypadku aplikacja może zatrzymać Rysowanie.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod najpierw definiuje metodę wywołania zwrotnego dla <xref:System.Drawing.Graphics.DrawImageAbort> delegata; definicja jest uproszczony i jedynie testów, aby sprawdzić, <xref:System.Drawing.Graphics.DrawImage%2A> czy metoda wywołuje ją z parametrem `callBackData` null. Główna treść przykładu wykonuje następujące czynności:  
  
-   Tworzy wystąpienie <xref:System.Drawing.Graphics.DrawImageAbort> metody wywołania zwrotnego.  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy Punkty definiujące prostokąt docelowy, w którym ma zostać narysowany obraz.  
  
-   Tworzy prostokąt źródłowy, aby wybrać część obrazu do rysowania.  
  
-   Ustawia jednostkę rysowania grafiki na piksel.  
  
-   Rysuje oryginalny obraz na ekranie.  
  
-   Tworzy dodatkowy prostokąt docelowy, w którym ma zostać narysowany dostosowany obraz.  
  
-   Tworzy i ustawia atrybuty dopasowanego obrazu w taki sposób, aby miała większą wartość gamma.  
  
-   Rysuje dostosowany obraz do ekranu.  
  
 W przypadku oryginalnego, niedopasowanego prostokąta docelowego pozycja lokalizuje obraz na ekranie, a rozmiar prostokąta źródłowego oraz rozmiar i kształt prostokąta docelowego określa skalowanie rysowanego obrazu.  
  
 Ponieważ w tym przykładzie używane jest Przeciążenie, które `callBackData` przekazuje parametr <xref:System.Drawing.Graphics.DrawImageAbort> , wywołanie zwrotne <xref:System.Drawing.Graphics.DrawImage%2A> zwraca `false`, które powoduje kontynuowanie metody, a przykład rysuje dostosowany obraz do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#55)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#55)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawImageUnscaled">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje określony obraz przy użyciu jego oryginalnego rozmiaru fizycznego w lokalizacji określonej przez parę współrzędnych.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * System.Drawing.Point -&gt; unit" Usage="graphics.DrawImageUnscaled (image, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="point"><see cref="T:System.Drawing.Point" />Struktura, która określa górny lewy róg rysowanego obrazu.</param>
        <summary>Rysuje określony obraz przy użyciu oryginalnego rozmiaru fizycznego w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość szerokości pikseli i wartość dla rozdzielczości poziomej (punkty na cal). Szerokość fizyczna (w calach) obrazu jest szerokością pikseli podzieloną przez rozdzielczość w poziomie. Na przykład obraz z szerokością pikseli 216 i rozdzielczość pozioma 72 kropek na cal ma szerokość fizyczną 3 cala. Podobne uwagi dotyczą wysokości pikseli i wysokości fizycznej.  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> Metoda rysuje obraz przy użyciu rozmiaru fizycznego, więc obraz będzie miał prawidłowy rozmiar w calach niezależnie od rozdzielczości (punkty na cal) urządzenia wyświetlającego. Załóżmy na przykład, że obraz ma szerokość pikseli wynoszącą 216 i rozdzielczość poziomą 72 punktów na cal. Jeśli wywołasz <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> , aby narysować ten obraz na urządzeniu z rozdzielczością 96 punktów na cal, Szerokość pikseli renderowanego obrazu będzie równa (216/72) * 96 = 288.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG SampImag. jpg w folderze przykładu.  
  
-   Tworzy punkt, w którym ma zostać narysowany lewy górny róg obrazu.  
  
-   Rysuje cały obraz przy użyciu jego rozmiaru fizycznego.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#64)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#64)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawImageUnscaled (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="rect"><see cref="T:System.Drawing.Rectangle" />Określa górny lewy róg rysowanego obrazu. Właściwości X i Y prostokąta określają lewy górny róg. Właściwości width i Height są ignorowane.</param>
        <summary>Rysuje określony obraz przy użyciu oryginalnego rozmiaru fizycznego w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość szerokości pikseli i wartość dla rozdzielczości poziomej (punkty na cal). Szerokość fizyczna (w calach) obrazu jest szerokością pikseli podzieloną przez rozdzielczość w poziomie. Na przykład obraz z szerokością pikseli 216 i rozdzielczość pozioma 72 kropek na cal ma szerokość fizyczną 3 cala. Podobne uwagi dotyczą wysokości pikseli i wysokości fizycznej.  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> Metoda rysuje obraz przy użyciu rozmiaru fizycznego, więc obraz będzie miał prawidłowy rozmiar w calach niezależnie od rozdzielczości (punkty na cal) urządzenia wyświetlającego. Załóżmy na przykład, że obraz ma szerokość pikseli wynoszącą 216 i rozdzielczość poziomą 72 punktów na cal. Jeśli wywołasz <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> , aby narysować ten obraz na urządzeniu z rozdzielczością 96 punktów na cal, Szerokość pikseli renderowanego obrazu będzie równa (216/72) * 96 = 288.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * int * int -&gt; unit" Usage="graphics.DrawImageUnscaled (image, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="x">Współrzędna x lewego górnego rogu rysowanego obrazu.</param>
        <param name="y">Współrzędna y lewego górnego rogu rysowanego obrazu.</param>
        <summary>Rysuje określony obraz przy użyciu jego oryginalnego rozmiaru fizycznego w lokalizacji określonej przez parę współrzędnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość szerokości pikseli i wartość dla rozdzielczości poziomej (punkty na cal). Szerokość fizyczna (w calach) obrazu jest szerokością pikseli podzieloną przez rozdzielczość w poziomie. Na przykład obraz z szerokością pikseli 216 i rozdzielczość pozioma 72 kropek na cal ma szerokość fizyczną 3 cala. Podobne uwagi dotyczą wysokości pikseli i wysokości fizycznej.  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> Metoda rysuje obraz przy użyciu rozmiaru fizycznego, więc obraz będzie miał prawidłowy rozmiar w calach niezależnie od rozdzielczości (punkty na cal) urządzenia wyświetlającego. Załóżmy na przykład, że obraz ma szerokość pikseli wynoszącą 216 i rozdzielczość poziomą 72 punktów na cal. Jeśli wywołasz <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> , aby narysować ten obraz na urządzeniu z rozdzielczością 96 punktów na cal, Szerokość pikseli renderowanego obrazu będzie równa (216/72) * 96 = 288.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obraz z pliku JPEG, SampImag. jpg, w folderze przykładu.  
  
-   Tworzy punkt, w którym ma zostać narysowany lewy górny róg obrazu.  
  
-   Rysuje cały obraz przy użyciu jego rozmiaru fizycznego.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#65)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#65)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#65)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * int * int * int * int -&gt; unit" Usage="graphics.DrawImageUnscaled (image, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />do rysowania.</param>
        <param name="x">Współrzędna x lewego górnego rogu rysowanego obrazu.</param>
        <param name="y">Współrzędna y lewego górnego rogu rysowanego obrazu.</param>
        <param name="width">Nie używany.</param>
        <param name="height">Nie używany.</param>
        <summary>Rysuje określony obraz przy użyciu oryginalnego rozmiaru fizycznego w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Przechowuje wartość szerokości pikseli i wartość dla rozdzielczości poziomej (punkty na cal). Szerokość fizyczna (w calach) obrazu jest szerokością pikseli podzieloną przez rozdzielczość w poziomie. Na przykład obraz z szerokością pikseli 216 i rozdzielczość pozioma 72 kropek na cal ma szerokość fizyczną 3 cala. Podobne uwagi dotyczą wysokości pikseli i wysokości fizycznej.  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> Metoda rysuje obraz przy użyciu rozmiaru fizycznego, więc obraz będzie miał prawidłowy rozmiar w calach niezależnie od rozdzielczości (punkty na cal) urządzenia wyświetlającego. Załóżmy na przykład, że obraz ma szerokość pikseli wynoszącą 216 i rozdzielczość poziomą 72 punktów na cal. Jeśli wywołasz <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> , aby narysować ten obraz na urządzeniu z rozdzielczością 96 punktów na cal, Szerokość pikseli renderowanego obrazu będzie równa (216/72) * 96 = 288.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaledAndClipped">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaledAndClipped (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaledAndClipped(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaledAndClipped(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaledAndClipped(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaledAndClipped : System.Drawing.Image * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawImageUnscaledAndClipped (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" /> Do rysowania.</param>
        <param name="rect">, <see cref="T:System.Drawing.Rectangle" /> W którym ma zostać narysowany obraz.</param>
        <summary>Rysuje określony obraz bez skalowania i wystawiania go w razie potrzeby w celu dopasowania go do określonego prostokąta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład ilustruje sposób używania <xref:System.Drawing.Graphics.DrawImageUnscaledAndClipped%2A> metody. Aby uruchomić ten przykład, wklej go do formularza systemu Windows. Obsługuj <xref:System.Windows.Forms.Control.Paint> zdarzenie formularza i `DrawImageUnscaled` Wywołaj metodę z <xref:System.Windows.Forms.Control.Paint> metody obsługi zdarzeń, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#8)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawLine">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje linię łączącą dwa punkty określone przez pary współrzędnych.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, valuetype System.Drawing.Point pt1, valuetype System.Drawing.Point pt2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, System::Drawing::Point pt1, System::Drawing::Point pt2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * System.Drawing.Point * System.Drawing.Point -&gt; unit" Usage="graphics.DrawLine (pen, pt1, pt2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.Point" />
        <Parameter Name="pt2" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl linii.</param>
        <param name="pt1"><see cref="T:System.Drawing.Point" />Struktura, która reprezentuje pierwszy punkt połączenia.</param>
        <param name="pt2"><see cref="T:System.Drawing.Point" />Struktura, która reprezentuje drugi punkt do połączenia.</param>
        <summary>Rysuje linię łączącą <see cref="T:System.Drawing.Point" /> dwie struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy punkty dla punktów końcowych wiersza.  
  
-   Rysuje linię na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#66)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#66)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#66)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md">Rysowanie linii i kształtów za pomocą pióra</related>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, valuetype System.Drawing.PointF pt1, valuetype System.Drawing.PointF pt2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, System::Drawing::PointF pt1, System::Drawing::PointF pt2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * System.Drawing.PointF * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawLine (pen, pt1, pt2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.PointF" />
        <Parameter Name="pt2" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl linii.</param>
        <param name="pt1"><see cref="T:System.Drawing.PointF" />Struktura, która reprezentuje pierwszy punkt połączenia.</param>
        <param name="pt2"><see cref="T:System.Drawing.PointF" />Struktura, która reprezentuje drugi punkt do połączenia.</param>
        <summary>Rysuje linię łączącą <see cref="T:System.Drawing.PointF" /> dwie struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje linię łączącą dwa punkty określone przez `pt1` parametry i p.`2`  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy punkty dla punktów końcowych wiersza.  
  
-   Rysuje linię na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#67)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#67)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#67)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md">Rysowanie linii i kształtów za pomocą pióra</related>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, int x1, int y1, int x2, int y2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, int32 x1, int32 y1, int32 x2, int32 y2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, int x1, int y1, int x2, int y2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * int * int * int * int -&gt; unit" Usage="graphics.DrawLine (pen, x1, y1, x2, y2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Int32" />
        <Parameter Name="y1" Type="System.Int32" />
        <Parameter Name="x2" Type="System.Int32" />
        <Parameter Name="y2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl linii.</param>
        <param name="x1">Współrzędna x pierwszego punktu.</param>
        <param name="y1">Współrzędna y pierwszego punktu.</param>
        <param name="x2">Współrzędna x drugiego punktu.</param>
        <param name="y2">Współrzędna y drugiego punktu.</param>
        <summary>Rysuje linię łączącą dwa punkty określone przez pary współrzędnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do rysowania linii łączącej dwa punkty określone przez `x1`parametry `y1`, `x2`,, `y2` i.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy współrzędne punktów końcowych wiersza.  
  
-   Rysuje linię na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#68)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#68)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md">Rysowanie linii i kształtów za pomocą pióra</related>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, float x1, float y1, float x2, float y2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, float32 x1, float32 y1, float32 x2, float32 y2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, float x1, float y1, float x2, float y2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * single * single * single * single -&gt; unit" Usage="graphics.DrawLine (pen, x1, y1, x2, y2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="x2" Type="System.Single" />
        <Parameter Name="y2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl linii.</param>
        <param name="x1">Współrzędna x pierwszego punktu.</param>
        <param name="y1">Współrzędna y pierwszego punktu.</param>
        <param name="x2">Współrzędna x drugiego punktu.</param>
        <param name="y2">Współrzędna y drugiego punktu.</param>
        <summary>Rysuje linię łączącą dwa punkty określone przez pary współrzędnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do rysowania linii łączącej dwa punkty określone przez `x1`parametry `y1`, `x2`,, `y2` i.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy współrzędne punktów końcowych wiersza.  
  
-   Rysuje linię na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#69)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#69)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md">Rysowanie linii i kształtów za pomocą pióra</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawLines">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje serię segmentów linii łączących tablicę <see cref="T:System.Drawing.Point" /> struktur.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawLines">
      <MemberSignature Language="C#" Value="public void DrawLines (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLines(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLines(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawLines : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawLines (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl segmentów linii.</param>
        <param name="points"><see cref="T:System.Drawing.Point" /> Tablica struktur, które reprezentują punkty do połączenia.</param>
        <summary>Rysuje serię segmentów linii łączących tablicę <see cref="T:System.Drawing.Point" /> struktur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do rysowania serii linii łączących tablicę punktów końcowych. Pierwsze dwa punkty w tablicy określają pierwszy wiersz. Każdy dodatkowy punkt określa koniec segmentu linii, którego punkt początkowy jest punktem końcowym poprzedniego segmentu wiersza.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy tablicę punktów segmentów wiersza.  
  
-   Rysuje segmenty połączonej linii na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#70)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#70)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#70)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLines">
      <MemberSignature Language="C#" Value="public void DrawLines (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLines(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLines(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawLines : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawLines (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl segmentów linii.</param>
        <param name="points"><see cref="T:System.Drawing.PointF" /> Tablica struktur, które reprezentują punkty do połączenia.</param>
        <summary>Rysuje serię segmentów linii łączących tablicę <see cref="T:System.Drawing.PointF" /> struktur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do rysowania serii linii łączących tablicę punktów końcowych. Pierwsze dwa punkty w tablicy określają pierwszy wiersz. Każdy dodatkowy punkt określa koniec segmentu linii, którego punkt początkowy jest punktem końcowym poprzedniego segmentu wiersza.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Kod tworzy czarne pióro.  
  
-   Tworzy tablicę punktów segmentów wiersza.  
  
-   Rysuje segmenty połączonej linii na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#71)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#71)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#71)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPath">
      <MemberSignature Language="C#" Value="public void DrawPath (System.Drawing.Pen pen, System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPath(class System.Drawing.Pen pen, class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPath(System::Drawing::Pen ^ pen, System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.DrawPath : System.Drawing.Pen * System.Drawing.Drawing2D.GraphicsPath -&gt; unit" Usage="graphics.DrawPath (pen, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl ścieżki.</param>
        <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />do rysowania.</param>
        <summary>Rysuje <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bieżące przekształcenie w kontekście graficznym jest stosowane do <xref:System.Drawing.Drawing2D.GraphicsPath> przed jego narysowaniem.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy obiekt ścieżki grafiki i dodaje do niego wielokropek.  
  
-   Tworzy czarne pióro.  
  
-   Rysuje ścieżkę graficzną do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#72)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#72)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#72)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="path" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawPie">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje kształt koła zdefiniowany przez parę współrzędnych, Szerokość, Wysokość i dwie linie promieniowe.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * System.Drawing.Rectangle * single * single -&gt; unit" Usage="graphics.DrawPie (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl kształtu koła.</param>
        <param name="rect"><see cref="T:System.Drawing.Rectangle" />Struktura, która reprezentuje prostokąt ograniczający, który definiuje wielokropek, z którego pochodzi kształt koła.</param>
        <param name="startAngle">Kąt mierzony w stopniach w prawo od osi x do pierwszej strony kształtu koła.</param>
        <param name="sweepAngle">Kąt mierzony w stopniach w prawo <paramref name="startAngle" /> od parametru do drugiej strony kształtu koła.</param>
        <summary>Rysuje kształt koła zdefiniowany przez wielokropek określony przez <see cref="T:System.Drawing.Rectangle" /> strukturę i dwie linie promieniowe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje kształt koła zdefiniowany przez łuk wielokropka oraz dwie linie promieniowe, które przecinają punkty końcowe łuku. Elipsa jest definiowana przez prostokąt ograniczający. Kształt koła składa się z dwóch linii promieniowych zdefiniowanych przez `startAngle` parametry `sweepAngle` i i łuku między przecięciami tych linii promieniowych z elipsą.  
  
 `sweepAngle` Jeśli parametr jest większy niż 360 stopni lub mniejszy niż-360 stopni, jest traktowany tak, jakby miał odpowiednio 360 stopnie lub-360 stopnie.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy prostokąt, który jest powiązany z pełnym elipsą.  
  
-   Definiuje kąty, w których ma zostać rozpoczęty rysowanie (względem osi x) oraz do rysowania (zarówno w kierunku zgodnym z ruchem wskazówek zegara).  
  
-   Rysuje segment koła na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#73)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#73)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#73)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * System.Drawing.RectangleF * single * single -&gt; unit" Usage="graphics.DrawPie (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl kształtu koła.</param>
        <param name="rect"><see cref="T:System.Drawing.RectangleF" />Struktura, która reprezentuje prostokąt ograniczający, który definiuje wielokropek, z którego pochodzi kształt koła.</param>
        <param name="startAngle">Kąt mierzony w stopniach w prawo od osi x do pierwszej strony kształtu koła.</param>
        <param name="sweepAngle">Kąt mierzony w stopniach w prawo <paramref name="startAngle" /> od parametru do drugiej strony kształtu koła.</param>
        <summary>Rysuje kształt koła zdefiniowany przez wielokropek określony przez <see cref="T:System.Drawing.RectangleF" /> strukturę i dwie linie promieniowe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje kształt koła zdefiniowany przez łuk wielokropka oraz dwie linie promieniowe, które przecinają punkty końcowe łuku. Elipsa jest definiowana przez prostokąt ograniczający. Kształt koła składa się z dwóch linii promieniowych zdefiniowanych przez `startAngle` parametry `sweepAngle` i i łuku między przecięciami tych linii promieniowych z elipsą.  
  
 `sweepAngle` Jeśli parametr jest większy niż 360 stopni lub mniejszy niż-360 stopni, jest traktowany tak, jakby miał odpowiednio 360 stopnie lub-360 stopnie.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy prostokąt, który jest powiązany z pełnym elipsą.  
  
-   Definiuje kąty, w których ma zostać rozpoczęty rysowanie (względem osi x) oraz do rysowania (zarówno w kierunku zgodnym z ruchem wskazówek zegara).  
  
-   Rysuje segment koła na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#74)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#74)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#74)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * int * int * int * int * int * int -&gt; unit" Usage="graphics.DrawPie (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl kształtu koła.</param>
        <param name="x">Współrzędna x lewego górnego rogu prostokąta granicznego, który definiuje wielokropek, z którego pochodzi kształt koła.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąta granicznego, który definiuje wielokropek, z którego pochodzi kształt koła.</param>
        <param name="width">Szerokość prostokąta ograniczenia, która definiuje wielokropek, z którego pochodzi kształt koła.</param>
        <param name="height">Wysokość prostokąta obwiedni, który definiuje wielokropek, z którego pochodzi kształt koła.</param>
        <param name="startAngle">Kąt mierzony w stopniach w prawo od osi x do pierwszej strony kształtu koła.</param>
        <param name="sweepAngle">Kąt mierzony w stopniach w prawo <paramref name="startAngle" /> od parametru do drugiej strony kształtu koła.</param>
        <summary>Rysuje kształt koła zdefiniowany przez parę współrzędnych, Szerokość, Wysokość i dwie linie promieniowe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje kształt koła zdefiniowany przez łuk wielokropka oraz dwie linie promieniowe, które przecinają punkty końcowe łuku. Elipsa jest definiowana `x`przez prostokąt ograniczający opisany przez parametry, `y`, `width`i `height` . Kształt koła składa się z dwóch linii promieniowych zdefiniowanych przez `startAngle` parametry `sweepAngle` i i łuku między przecięciami tych linii promieniowych z elipsą.  
  
 `sweepAngle` Jeśli parametr jest większy niż 360 stopni lub mniejszy niż-360 stopni, jest traktowany tak, jakby miał odpowiednio 360 stopnie lub-360 stopnie.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy położenie i rozmiar prostokąta, który jest powiązany z pełnym elipsą.  
  
-   Definiuje kąty, w których ma zostać rozpoczęty rysowanie (względem osi x) oraz do rysowania (zarówno w kierunku zgodnym z ruchem wskazówek zegara).  
  
-   Rysuje kształt koła na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#75)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#75)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#75)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * single * single * single * single * single * single -&gt; unit" Usage="graphics.DrawPie (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl kształtu koła.</param>
        <param name="x">Współrzędna x lewego górnego rogu prostokąta granicznego, który definiuje wielokropek, z którego pochodzi kształt koła.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąta granicznego, który definiuje wielokropek, z którego pochodzi kształt koła.</param>
        <param name="width">Szerokość prostokąta ograniczenia, która definiuje wielokropek, z którego pochodzi kształt koła.</param>
        <param name="height">Wysokość prostokąta obwiedni, który definiuje wielokropek, z którego pochodzi kształt koła.</param>
        <param name="startAngle">Kąt mierzony w stopniach w prawo od osi x do pierwszej strony kształtu koła.</param>
        <param name="sweepAngle">Kąt mierzony w stopniach w prawo <paramref name="startAngle" /> od parametru do drugiej strony kształtu koła.</param>
        <summary>Rysuje kształt koła zdefiniowany przez parę współrzędnych, Szerokość, Wysokość i dwie linie promieniowe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda rysuje kształt koła zdefiniowany przez łuk wielokropka oraz dwie linie promieniowe, które przecinają punkty końcowe łuku. Elipsa jest definiowana `x`przez prostokąt ograniczający opisany przez parametry, `y`, `width`i `height` . Kształt koła składa się z dwóch linii promieniowych zdefiniowanych przez `startAngle` parametry `sweepAngle` i i łuku między przecięciami tych linii promieniowych z elipsą.  
  
 `sweepAngle` Jeśli parametr jest większy niż 360 stopni lub mniejszy niż-360 stopni, jest traktowany tak, jakby miał odpowiednio 360 stopnie lub-360 stopnie.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy położenie i rozmiar prostokąta, który jest powiązany z pełnym elipsą.  
  
-   Definiuje kąty, w których ma zostać rozpoczęty rysowanie (względem osi x) oraz do rysowania (zarówno w kierunku zgodnym z ruchem wskazówek zegara).  
  
-   Rysuje segment koła na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#76)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#76)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#76)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawPolygon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje Wielokąt zdefiniowany przez tablicę <see cref="T:System.Drawing.Point" /> struktur.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawPolygon">
      <MemberSignature Language="C#" Value="public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPolygon(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPolygon(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawPolygon : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawPolygon (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl wielokątu.</param>
        <param name="points"><see cref="T:System.Drawing.Point" /> Tablica struktur, które reprezentują wierzchołki wielokąta.</param>
        <summary>Rysuje Wielokąt zdefiniowany przez tablicę <see cref="T:System.Drawing.Point" /> struktur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każda para dwóch kolejnych punktów w tablicy określa bok wielokąta. Ponadto, jeśli ostatni punkt i pierwszy punkt tablicy nie zbiega się, określa ostatni bok wielokąta.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy tablicę siedmiu punktów dla wierzchołków wielokąta.  
  
-   Rysuje wielokąt do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#78)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#78)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#78)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPolygon">
      <MemberSignature Language="C#" Value="public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPolygon(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPolygon(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawPolygon : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawPolygon (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl wielokątu.</param>
        <param name="points"><see cref="T:System.Drawing.PointF" /> Tablica struktur, które reprezentują wierzchołki wielokąta.</param>
        <summary>Rysuje Wielokąt zdefiniowany przez tablicę <see cref="T:System.Drawing.PointF" /> struktur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każda para dwóch kolejnych punktów w tablicy określa bok wielokąta. Ponadto, jeśli ostatni punkt i pierwszy z punktów tablicy nie zbiega się, określa ostatni bok wielokąta.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy tablicę siedmiu punktów dla wierzchołków wielokąta.  
  
-   Rysuje wielokąt do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#77)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#77)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#77)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawRectangle">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje prostokąt określony przez parę współrzędnych, Szerokość i wysokość.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangle : System.Drawing.Pen * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawRectangle (pen, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> Określa kolor, Szerokość i styl prostokąta.</param>
        <param name="rect"><see cref="T:System.Drawing.Rectangle" /> Struktura, która reprezentuje prostokąt do rysowania.</param>
        <summary>Rysuje prostokąt określony przez <see cref="T:System.Drawing.Rectangle" /> strukturę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać informacje o sposobie rysowania <xref:System.Drawing.RectangleF>, zobacz. <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy prostokąt.  
  
-   Rysuje prostokąt do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#79)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#79)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#79)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangle : System.Drawing.Pen * int * int * int * int -&gt; unit" Usage="graphics.DrawRectangle (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl prostokąta.</param>
        <param name="x">Współrzędna x lewego górnego rogu prostokąta do rysowania.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąta do rysowania.</param>
        <param name="width">Szerokość prostokąta do narysowania.</param>
        <param name="height">Wysokość prostokąta do narysowania.</param>
        <summary>Rysuje prostokąt określony przez parę współrzędnych, Szerokość i wysokość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać informacje o sposobie rysowania <xref:System.Drawing.RectangleF>, zobacz. <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy położenie i rozmiar prostokąta.  
  
-   Rysuje prostokąt do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#80)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#80)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#80)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangle : System.Drawing.Pen * single * single * single * single -&gt; unit" Usage="graphics.DrawRectangle (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" /> Określa kolor, Szerokość i styl prostokąta.</param>
        <param name="x">Współrzędna x lewego górnego rogu prostokąta do rysowania.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąta do rysowania.</param>
        <param name="width">Szerokość prostokąta do narysowania.</param>
        <param name="height">Wysokość prostokąta do narysowania.</param>
        <summary>Rysuje prostokąt określony przez parę współrzędnych, Szerokość i wysokość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać informacje o sposobie rysowania <xref:System.Drawing.RectangleF>, zobacz. <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy położenie i rozmiar prostokąta.  
  
-   Rysuje prostokąt do ekranu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#81)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#81)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#81)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawRectangles">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje serie prostokątów określone przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawRectangles">
      <MemberSignature Language="C#" Value="public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.Rectangle[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangles(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.Rectangle[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangles(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Rectangle&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangles : System.Drawing.Pen * System.Drawing.Rectangle[] -&gt; unit" Usage="graphics.DrawRectangles (pen, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rects" Type="System.Drawing.Rectangle[]" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl konturów prostokątów.</param>
        <param name="rects"><see cref="T:System.Drawing.Rectangle" /> Tablica struktur, które reprezentują prostokąty do narysowania.</param>
        <summary>Rysuje serie prostokątów określone przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy tablicę z trzema prostokątami.  
  
-   Rysuje prostokąty na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#82)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#82)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="rects" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="rects" />jest tablicą o zerowej długości.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangles">
      <MemberSignature Language="C#" Value="public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.RectangleF[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangles(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangles(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::RectangleF&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangles : System.Drawing.Pen * System.Drawing.RectangleF[] -&gt; unit" Usage="graphics.DrawRectangles (pen, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rects" Type="System.Drawing.RectangleF[]" />
      </Parameters>
      <Docs>
        <param name="pen"><see cref="T:System.Drawing.Pen" />Określa kolor, Szerokość i styl konturów prostokątów.</param>
        <param name="rects"><see cref="T:System.Drawing.RectangleF" /> Tablica struktur, które reprezentują prostokąty do narysowania.</param>
        <summary>Rysuje serie prostokątów określone przez <see cref="T:System.Drawing.RectangleF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy czarne pióro.  
  
-   Tworzy tablicę z trzema prostokątami.  
  
-   Rysuje prostokąty na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#83)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#83)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#83)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="rects" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="rects" />jest tablicą o zerowej długości.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawString">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rysuje określony ciąg tekstowy w określonej lokalizacji przy użyciu określonych <see cref="T:System.Drawing.Brush" /> obiektów i. <see cref="T:System.Drawing.Font" /></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::PointF point);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawString (s, font, brush, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg do narysowania.</param>
        <param name="font"><see cref="T:System.Drawing.Font" />definiuje format tekstu ciągu.</param>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa kolor i teksturę rysowanego tekstu.</param>
        <param name="point"><see cref="T:System.Drawing.PointF" />Struktura, która określa górny lewy róg rysowanego tekstu.</param>
        <summary>Rysuje określony ciąg tekstowy w określonej lokalizacji przy użyciu określonych <see cref="T:System.Drawing.Brush" /> obiektów i. <see cref="T:System.Drawing.Font" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg tekstowy do rysowania.  
  
-   Definiuje czcionkę jako Arial (16pt).  
  
-   Tworzy pełny, czarny Pędzel do narysowania.  
  
-   Tworzy punkt dla lewego górnego rogu, w którym ma zostać narysowany tekst.  
  
-   Rysuje ciąg na ekranie przy użyciu czcionki, pędzla i punktu docelowego.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#84)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#84)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#84)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="s" />jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Używanie czcionek i tekstu</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF layoutRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::RectangleF layoutRectangle);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.RectangleF -&gt; unit" Usage="graphics.DrawString (s, font, brush, layoutRectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="layoutRectangle" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg do narysowania.</param>
        <param name="font"><see cref="T:System.Drawing.Font" />definiuje format tekstu ciągu.</param>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa kolor i teksturę rysowanego tekstu.</param>
        <param name="layoutRectangle"><see cref="T:System.Drawing.RectangleF" />Struktura, która określa lokalizację rysowanego tekstu.</param>
        <summary>Rysuje określony ciąg tekstowy w określonym prostokącie przy użyciu określonych <see cref="T:System.Drawing.Brush" /> obiektów i. <see cref="T:System.Drawing.Font" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tekst reprezentowany przez `s` parametr jest rysowany wewnątrz prostokąta reprezentowanego `layoutRectangle` przez parametr. Jeśli tekst nie mieści się wewnątrz prostokąta, zostanie obcięty w najbliższym wyrazie. Aby bardziej manipulować sposobem rysowania ciągu wewnątrz prostokąta, użyj <xref:System.Drawing.Graphics.DrawString%2A> przeciążenia, które <xref:System.Drawing.StringFormat>przyjmuje.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg tekstowy do rysowania.  
  
-   Definiuje czcionkę jako Arial (16pt).  
  
-   Tworzy pełny, czarny Pędzel do narysowania.  
  
-   Tworzy prostokąt, w którym ma zostać narysowany tekst.  
  
-   Rysuje prostokąt do ekranu.  
  
-   Rysuje ciąg na ekranie przy użyciu czcionki, pędzla i prostokąta docelowego.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#86)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#86)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#86)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="s" />jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Używanie czcionek i tekstu</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.PointF point, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::PointF point, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.PointF * System.Drawing.StringFormat -&gt; unit" Usage="graphics.DrawString (s, font, brush, point, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg do narysowania.</param>
        <param name="font"><see cref="T:System.Drawing.Font" />definiuje format tekstu ciągu.</param>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa kolor i teksturę rysowanego tekstu.</param>
        <param name="point"><see cref="T:System.Drawing.PointF" />Struktura, która określa górny lewy róg rysowanego tekstu.</param>
        <param name="format"><see cref="T:System.Drawing.StringFormat" />Określa atrybuty formatowania, takie jak odstępy między wierszami i wyrównanie, które są stosowane do rysowanego tekstu.</param>
        <summary>Rysuje określony ciąg tekstowy w określonej lokalizacji przy użyciu określonych <see cref="T:System.Drawing.Brush" /> obiektów i <see cref="T:System.Drawing.Font" /> atrybutów formatowania określonego. <see cref="T:System.Drawing.StringFormat" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg tekstowy do rysowania.  
  
-   Definiuje czcionkę jako Arial (16pt).  
  
-   Tworzy pełny, czarny Pędzel do narysowania.  
  
-   Tworzy punkt dla lewego górnego rogu, w którym ma zostać narysowany tekst.  
  
-   Ustawia format ciągu, który ma być rysowany pionowo.  
  
-   Rysuje ciąg na ekranie przy użyciu czcionki, pędzla, punktu docelowego i formatu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#85)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#85)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#85)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="s" />jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Używanie czcionek i tekstu</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF layoutRectangle, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::RectangleF layoutRectangle, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.RectangleF * System.Drawing.StringFormat -&gt; unit" Usage="graphics.DrawString (s, font, brush, layoutRectangle, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="layoutRectangle" Type="System.Drawing.RectangleF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg do narysowania.</param>
        <param name="font"><see cref="T:System.Drawing.Font" />definiuje format tekstu ciągu.</param>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa kolor i teksturę rysowanego tekstu.</param>
        <param name="layoutRectangle"><see cref="T:System.Drawing.RectangleF" />Struktura, która określa lokalizację rysowanego tekstu.</param>
        <param name="format"><see cref="T:System.Drawing.StringFormat" />Określa atrybuty formatowania, takie jak odstępy między wierszami i wyrównanie, które są stosowane do rysowanego tekstu.</param>
        <summary>Rysuje określony ciąg tekstowy w określonym prostokącie przy użyciu określonych <see cref="T:System.Drawing.Brush" /> obiektów i <see cref="T:System.Drawing.Font" /> atrybutów formatowania określonego. <see cref="T:System.Drawing.StringFormat" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tekst reprezentowany przez `s` parametr jest rysowany wewnątrz prostokąta reprezentowanego `layoutRectangle` przez parametr. Jeśli tekst nie mieści się wewnątrz prostokąta, zostanie obcięty w najbliższym wyrazie, chyba że określono inaczej przy `format` użyciu parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg tekstowy do rysowania.  
  
-   Definiuje czcionkę jako Arial (16pt).  
  
-   Tworzy pełny, czarny Pędzel do narysowania.  
  
-   Tworzy prostokąt, w którym ma zostać narysowany tekst.  
  
-   Rysuje prostokąt do ekranu.  
  
-   Ustawia format ciągu, aby wyśrodkować go w obrębie prostokąta.  
  
-   Rysuje ciąg na ekranie przy użyciu czcionki, pędzla i prostokąta docelowego.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#87)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#87)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="s" />jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Używanie czcionek i tekstu</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, float x, float y);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * single * single -&gt; unit" Usage="graphics.DrawString (s, font, brush, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg do narysowania.</param>
        <param name="font"><see cref="T:System.Drawing.Font" />definiuje format tekstu ciągu.</param>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa kolor i teksturę rysowanego tekstu.</param>
        <param name="x">Współrzędna x lewego górnego rogu rysowanego tekstu.</param>
        <param name="y">Współrzędna y lewego górnego rogu rysowanego tekstu.</param>
        <summary>Rysuje określony ciąg tekstowy w określonej lokalizacji przy użyciu określonych <see cref="T:System.Drawing.Brush" /> obiektów i. <see cref="T:System.Drawing.Font" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg tekstowy do rysowania.  
  
-   Definiuje czcionkę jako Arial (16pt).  
  
-   Tworzy pełny czarny Pędzel do rysowania.  
  
-   Tworzy punkt dla lewego górnego rogu, w którym ma zostać narysowany tekst.  
  
-   Rysuje ciąg na ekranie przy użyciu czcionki, pędzla i punktu docelowego.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#88)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#88)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#88)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="s" />jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Używanie czcionek i tekstu</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, float32 x, float32 y, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, float x, float y, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * single * single * System.Drawing.StringFormat -&gt; unit" Usage="graphics.DrawString (s, font, brush, x, y, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg do narysowania.</param>
        <param name="font"><see cref="T:System.Drawing.Font" />definiuje format tekstu ciągu.</param>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa kolor i teksturę rysowanego tekstu.</param>
        <param name="x">Współrzędna x lewego górnego rogu rysowanego tekstu.</param>
        <param name="y">Współrzędna y lewego górnego rogu rysowanego tekstu.</param>
        <param name="format"><see cref="T:System.Drawing.StringFormat" />Określa atrybuty formatowania, takie jak odstępy między wierszami i wyrównanie, które są stosowane do rysowanego tekstu.</param>
        <summary>Rysuje określony ciąg tekstowy w określonej lokalizacji przy użyciu określonych <see cref="T:System.Drawing.Brush" /> obiektów i <see cref="T:System.Drawing.Font" /> atrybutów formatowania określonego. <see cref="T:System.Drawing.StringFormat" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg tekstowy do rysowania.  
  
-   Definiuje czcionkę jako Arial (16pt).  
  
-   Tworzy pełny, czarny Pędzel do narysowania.  
  
-   Tworzy współrzędne punktu w lewym górnym rogu, w którym ma zostać narysowany tekst.  
  
-   Ustawia format ciągu do rysowania w pionie  
  
-   Rysuje ciąg na ekranie przy użyciu czcionki, pędzla, punktu docelowego i formatu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#89)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#89)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#89)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="s" />jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Używanie czcionek i tekstu</related>
      </Docs>
    </Member>
    <Member MemberName="EndContainer">
      <MemberSignature Language="C#" Value="public void EndContainer (System.Drawing.Drawing2D.GraphicsContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndContainer(class System.Drawing.Drawing2D.GraphicsContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndContainer (container As GraphicsContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndContainer(System::Drawing::Drawing2D::GraphicsContainer ^ container);" />
      <MemberSignature Language="F#" Value="member this.EndContainer : System.Drawing.Drawing2D.GraphicsContainer -&gt; unit" Usage="graphics.EndContainer container" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.Drawing.Drawing2D.GraphicsContainer" />
      </Parameters>
      <Docs>
        <param name="container"><see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />reprezentuje kontener, który jest przywracany przez tę metodę.</param>
        <summary>Zamyka bieżący kontener grafiki i przywraca stan tego <see cref="T:System.Drawing.Graphics" /> elementu do stanu zapisanego przez wywołanie <see cref="M:System.Drawing.Graphics.BeginContainer" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej metody z <xref:System.Drawing.Graphics.BeginContainer%2A> metodą tworzenia zagnieżdżonych kontenerów grafiki. Kontenery grafiki zachowują stan grafiki, takich jak przekształcenia, region przycinania i właściwości renderowania.  
  
 Po wywołaniu <xref:System.Drawing.Graphics.BeginContainer%2A> metody <xref:System.Drawing.Graphics>obiektu, blok informacji, który <xref:System.Drawing.Graphics> posiada stan jest umieszczony na stosie. <xref:System.Drawing.Graphics.BeginContainer%2A> Metoda zwracametodę,<xref:System.Drawing.Drawing2D.GraphicsContainer> która identyfikuje blok informacji. Gdy przekazujesz obiekt identyfikujący do <xref:System.Drawing.Graphics.EndContainer%2A> metody, blok informacji jest usuwany ze stosu i jest używany do <xref:System.Drawing.Graphics> przywracania stanu w momencie <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody.  
  
 Kontenery mogą być zagnieżdżane; oznacza to, że można wywołać <xref:System.Drawing.Graphics.BeginContainer%2A> metodę kilka razy przed <xref:System.Drawing.Graphics.EndContainer%2A> wywołaniem metody. Za każdym razem, gdy <xref:System.Drawing.Graphics.BeginContainer%2A> wywoływana jest metoda, blok informacji jest umieszczany na stosie i otrzymujesz dla bloku informacji. <xref:System.Drawing.Drawing2D.GraphicsContainer> Po przejściu jednego <xref:System.Drawing.Graphics.EndContainer%2A> z tych obiektów do metody <xref:System.Drawing.Graphics> jest on zwracany do stanu, w którym był w czasie <xref:System.Drawing.Graphics.BeginContainer%2A> wywołania metody, które zwróciło określone <xref:System.Drawing.Drawing2D.GraphicsContainer>. Blok informacji umieszczony na stosie przez to <xref:System.Drawing.Graphics.BeginContainer%2A> wywołanie metody jest usuwany ze stosu, a wszystkie bloki informacji umieszczane na stosie po tym <xref:System.Drawing.Graphics.BeginContainer%2A> wywołaniu metody również zostaną usunięte.  
  
 Wywołania metody umieszczają bloki informacji w tym samym stosie co wywołania <xref:System.Drawing.Graphics.BeginContainer%2A> metody. <xref:System.Drawing.Graphics.Save%2A> Podobnie jak <xref:System.Drawing.Graphics.EndContainer%2A> wywołanie metody jest sparowane <xref:System.Drawing.Graphics.BeginContainer%2A> z wywołaniem metody, <xref:System.Drawing.Graphics.Restore%2A> wywołanie metody jest sparowane z <xref:System.Drawing.Graphics.Save%2A> wywołaniem metody.  
  
 Po wywołaniu <xref:System.Drawing.Graphics.EndContainer%2A> metody wszystkie bloki informacji umieszczane na stosie ( <xref:System.Drawing.Graphics.Save%2A> przez metodę lub przez <xref:System.Drawing.Graphics.BeginContainer%2A> <xref:System.Drawing.Graphics.BeginContainer%2A> metodę) po odpowiednim wywołaniu metody są usuwane ze stosu. Podobnie po wywołaniu <xref:System.Drawing.Graphics.Restore%2A> metody wszystkie bloki informacji umieszczane na stosie ( <xref:System.Drawing.Graphics.Save%2A> przez metodę lub przez <xref:System.Drawing.Graphics.BeginContainer%2A> <xref:System.Drawing.Graphics.Save%2A> metodę) po odpowiednim wywołaniu metody są usuwane ze stosu.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Otwiera nowy kontener grafiki i zapisuje stary kontener.  
  
-   Tłumaczy współrzędne świata w kontenerze.  
  
-   Wypełnia czerwony prostokąt w (tłumaczone współrzędne) nowego kontenera.  
  
-   Zamyka nowy kontener i przywraca zapisany kontener.  
  
-   Wypełnia zielony prostokąt (do nieprzetłumaczonych współrzędnych) zapisanego kontenera.  
  
 Wynikiem jest zielony prostokąt, który opiera się na czerwonym prostokącie o tym samym rozmiarze.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#90)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#90)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#90)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnumerateMetafile">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlania w określonym punkcie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destPoint"><see cref="T:System.Drawing.Point" />Struktura, która określa lokalizację lewego górnego rogu rysowanego metapliku.</param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlania w określonym punkcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy formularz, który ma <xref:System.Drawing.Imaging.Metafile> jeden z jego prywatnych elementów członkowskich. Wywołuje <xref:System.Windows.Forms.Control.OnPaint%2A> metodę<xref:System.Drawing.Graphics.EnumerateMetafile%2A> ,`MetafileCallback` która wywołuje metodę formularza dla każdego rekordu w metapliku. `MetafileCallback` Metoda<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę. Zwróć uwagę, `MetafileCallback` że metoda otrzymuje dane rekordu <xref:System.IntPtr>jako, ale <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> Metoda oczekuje, że dane rekordu mają być tablicą bajtów. Wywołanie <xref:System.Runtime.InteropServices.Marshal.Copy%2A> kopiowania danych rekordu do tablicy typu Byte, aby można było przekazywać je do <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>.  
  
 [!code-csharp[System.Drawing.Graphics.EnumerateMetafile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Graphics.EnumerateMetafile/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Graphics.EnumerateMetafile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Graphics.EnumerateMetafile/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok, który określa rozmiar i lokalizację rysowany metaplik.</param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlania w określonym równoległobok.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destPoint"><see cref="T:System.Drawing.PointF" />Struktura, która określa lokalizację lewego górnego rogu rysowanego metapliku.</param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlania w określonym punkcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok, który określa rozmiar i lokalizację rysowany metaplik.</param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlania w określonym równoległobok.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
 `destPoints` Parametr określa trzy punkty przerównoległobok. Trzy <xref:System.Drawing.PointF> struktury reprezentują górne lewe, górne i dolne rogi równoległobok. Czwarty punkt jest ekstrapolacji z pierwszych trzech, aby utworzyć równoległobok. Rysowany metaplik jest skalowany i ścinanie w celu dopasowania do przerównoległobok.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa lokalizację i rozmiar rysowanego metapliku.</param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <summary>Wysyła rekordy określonego <see cref="T:System.Drawing.Imaging.Metafile" />, po jednym naraz, do metody wywołania zwrotnego do wyświetlania w określonym prostokącie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destRect"><see cref="T:System.Drawing.RectangleF" />Struktura, która określa lokalizację i rozmiar rysowanego metapliku.</param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <summary>Wysyła rekordy określonego <see cref="T:System.Drawing.Imaging.Metafile" />, po jednym naraz, do metody wywołania zwrotnego do wyświetlania w określonym prostokącie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destPoint"><see cref="T:System.Drawing.Point" />Struktura, która określa lokalizację lewego górnego rogu rysowanego metapliku.</param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagany, ale został zignorowany. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlania w określonym punkcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%2A>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok, który określa rozmiar i lokalizację rysowany metaplik.</param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagany, ale został zignorowany. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlania w określonym równoległobok.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destPoint"><see cref="T:System.Drawing.PointF" />Struktura, która określa lokalizację lewego górnego rogu rysowanego metapliku.</param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagany, ale został zignorowany. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlania w określonym punkcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok, który określa rozmiar i lokalizację rysowany metaplik.</param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagany, ale został zignorowany. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />, pojedynczo, do metody wywołania zwrotnego do wyświetlania w określonym równoległobok.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
 `destPoints` Parametr określa trzy punkty przerównoległobok. Trzy <xref:System.Drawing.PointF> struktury reprezentują górne lewe, górne i dolne rogi równoległobok. Czwarty punkt jest ekstrapolacji z pierwszych trzech, aby utworzyć równoległobok. Rysowany metaplik jest skalowany i ścinanie w celu dopasowania do przerównoległobok.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa lokalizację i rozmiar rysowanego metapliku.</param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagany, ale został zignorowany. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy określonego <see cref="T:System.Drawing.Imaging.Metafile" />, po jednym naraz, do metody wywołania zwrotnego do wyświetlania w określonym prostokącie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destRect"><see cref="T:System.Drawing.RectangleF" />Struktura, która określa lokalizację i rozmiar rysowanego metapliku.</param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagany, ale został zignorowany. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy określonego <see cref="T:System.Drawing.Imaging.Metafile" />, po jednym naraz, do metody wywołania zwrotnego do wyświetlania w określonym prostokącie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destPoint"><see cref="T:System.Drawing.Point" />Struktura, która określa lokalizację lewego górnego rogu rysowanego metapliku.</param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagany, ale został zignorowany. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />Określa informacje o atrybutach obrazu dla rysowanego obrazu.</param>
        <summary>Program wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />czasie, do metody wywołania zwrotnego w celu wyświetlenia w określonym punkcie przy użyciu określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destPoint"><see cref="T:System.Drawing.Point" />Struktura, która określa lokalizację lewego górnego rogu rysowanego metapliku.</param>
        <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa część metapliku względem górnego lewego rogu, do rysowania.</param>
        <param name="srcUnit">Składowa wyliczenia, która określa jednostkę miary używaną do określenia części metapliku, która zawiera prostokąt określony <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <summary>Wysyła rekordy w wybranym prostokącie z <see cref="T:System.Drawing.Imaging.Metafile" />, po jednym naraz, do metody wywołania zwrotnego do wyświetlania w określonym punkcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok, który określa rozmiar i lokalizację rysowany metaplik.</param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagany, ale został zignorowany. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />Określa informacje o atrybutach obrazu dla rysowanego obrazu.</param>
        <summary>Program wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />czasie, do metody wywołania zwrotnego do wyświetlania w określonym przeszukiwaniu przy użyciu określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
 `destPoints` Parametr określa trzy punkty przerównoległobok. Trzy <xref:System.Drawing.Point> struktury reprezentują górne lewe, górne i dolne rogi równoległobok. Czwarty punkt jest ekstrapolacji z pierwszych trzech, aby utworzyć równoległobok. Rysowany metaplik jest skalowany i ścinanie w celu dopasowania do przerównoległobok.  
  
 Atrybuty obrazu określone przez `imageAttr` parametr zastępują te określone podczas pisania metapliku.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok, który określa rozmiar i lokalizację rysowany metaplik.</param>
        <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa część metapliku względem górnego lewego rogu, do rysowania.</param>
        <param name="srcUnit">Składowa wyliczenia, która określa jednostkę miary używaną do określenia części metapliku, która zawiera prostokąt określony <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <summary>Wysyła rekordy w wybranym prostokącie z <see cref="T:System.Drawing.Imaging.Metafile" />, po jednym naraz, do metody wywołania zwrotnego do wyświetlania w określonym równoległobok.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
 `destPoints` Parametr określa trzy punkty przerównoległobok. Trzy <xref:System.Drawing.Point> struktury reprezentują górne lewe, górne i dolne rogi równoległobok. Czwarty punkt jest ekstrapolacji z pierwszych trzech, aby utworzyć równoległobok. Rysowany metaplik jest skalowany i ścinanie w celu dopasowania do przerównoległobok.  
  
 Dowolny rysunek, który ma miejsce poza prostokątem określonym przez `srcRect` parametr, jest ignorowany.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destPoint"><see cref="T:System.Drawing.PointF" />Struktura, która określa lokalizację lewego górnego rogu rysowanego metapliku.</param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagany, ale został zignorowany. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />Określa informacje o atrybutach obrazu dla rysowanego obrazu.</param>
        <summary>Program wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />czasie, do metody wywołania zwrotnego w celu wyświetlenia w określonym punkcie przy użyciu określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
 Atrybuty obrazu określone przez `imageAttr` parametr zastępują te określone podczas pisania metapliku.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destPoint"><see cref="T:System.Drawing.PointF" />Struktura, która określa lokalizację lewego górnego rogu rysowanego metapliku.</param>
        <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />Struktura, która określa część metapliku względem górnego lewego rogu, do rysowania.</param>
        <param name="srcUnit">Składowa wyliczenia, która określa jednostkę miary używaną do określenia części metapliku, która zawiera prostokąt określony <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <summary>Wysyła rekordy w wybranym prostokącie z <see cref="T:System.Drawing.Imaging.Metafile" />, po jednym naraz, do metody wywołania zwrotnego do wyświetlania w określonym punkcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
 Dowolny rysunek, który ma miejsce poza prostokątem określonym przez `srcRect` parametr, jest ignorowany.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok, który określa rozmiar i lokalizację rysowany metaplik.</param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagany, ale został zignorowany. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />Określa informacje o atrybutach obrazu dla rysowanego obrazu.</param>
        <summary>Program wysyła rekordy w określonym <see cref="T:System.Drawing.Imaging.Metafile" />czasie, do metody wywołania zwrotnego do wyświetlania w określonym przeszukiwaniu przy użyciu określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
 `destPoints` Parametr określa trzy punkty przerównoległobok. Trzy <xref:System.Drawing.PointF> struktury reprezentują górne lewe, górne i dolne rogi równoległobok. Czwarty punkt jest ekstrapolacji z pierwszych trzech, aby utworzyć równoległobok. Rysowany metaplik jest skalowany i ścinanie w celu dopasowania do przerównoległobok.  
  
 Atrybuty obrazu określone przez `imageAttr` parametr zastępują te określone podczas pisania metapliku.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok, który określa rozmiar i lokalizację rysowany metaplik.</param>
        <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />struktury, które określają część metapliku względem lewego górnego rogu, do rysowania.</param>
        <param name="srcUnit">Składowa wyliczenia, która określa jednostkę miary używaną do określenia części metapliku, która zawiera prostokąt określony <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <summary>Wysyła rekordy w wybranym prostokącie z <see cref="T:System.Drawing.Imaging.Metafile" />, po jednym naraz, do metody wywołania zwrotnego do wyświetlania w określonym równoległobok.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
 `destPoints` Parametr określa trzy punkty przerównoległobok. Trzy <xref:System.Drawing.Point> struktury reprezentują górne lewe, górne i dolne rogi równoległobok. Czwarty punkt jest ekstrapolacji z pierwszych trzech, aby utworzyć równoległobok. Rysowany metaplik jest skalowany i ścinanie w celu dopasowania do przerównoległobok.  
  
 Dowolny rysunek, który ma miejsce poza prostokątem określonym przez `srcRect` parametr, jest ignorowany.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa lokalizację i rozmiar rysowanego metapliku.</param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagany, ale został zignorowany. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />Określa informacje o atrybutach obrazu dla rysowanego obrazu.</param>
        <summary>Wysyła rekordy określonego <see cref="T:System.Drawing.Imaging.Metafile" />, po jednym naraz, do metody wywołania zwrotnego do wyświetlania w określonym prostokącie przy użyciu określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
 Atrybuty obrazu określone przez `imageAttr` parametr zastępują te określone podczas pisania metapliku.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa lokalizację i rozmiar rysowanego metapliku.</param>
        <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa część metapliku względem górnego lewego rogu, do rysowania.</param>
        <param name="srcUnit">Składowa wyliczenia, która określa jednostkę miary używaną do określenia części metapliku, która zawiera prostokąt określony <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <summary>Wysyła rekordy zaznaczonego prostokąta z <see cref="T:System.Drawing.Imaging.Metafile" />, po jednym naraz, do metody wywołania zwrotnego do wyświetlania w określonym prostokącie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
 Dowolny rysunek, który ma miejsce poza prostokątem określonym przez `srcRect` parametr, jest ignorowany.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destRect"><see cref="T:System.Drawing.RectangleF" />Struktura, która określa lokalizację i rozmiar rysowanego metapliku.</param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagany, ale został zignorowany. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />Określa informacje o atrybutach obrazu dla rysowanego obrazu.</param>
        <summary>Wysyła rekordy określonego <see cref="T:System.Drawing.Imaging.Metafile" />, po jednym naraz, do metody wywołania zwrotnego do wyświetlania w określonym prostokącie przy użyciu określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
 Atrybuty obrazu określone przez `imageAttr` parametr zastępują te określone podczas pisania metapliku.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destRect"><see cref="T:System.Drawing.RectangleF" />Struktura, która określa lokalizację i rozmiar rysowanego metapliku.</param>
        <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />Struktura, która określa część metapliku względem górnego lewego rogu, do rysowania.</param>
        <param name="srcUnit">Składowa wyliczenia, która określa jednostkę miary używaną do określenia części metapliku, która zawiera prostokąt określony <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <summary>Wysyła rekordy zaznaczonego prostokąta z <see cref="T:System.Drawing.Imaging.Metafile" />, po jednym naraz, do metody wywołania zwrotnego do wyświetlania w określonym prostokącie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
 Dowolny rysunek, który ma miejsce poza prostokątem określonym przez `srcRect` parametr, jest ignorowany.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destPoint"><see cref="T:System.Drawing.Point" />Struktura, która określa lokalizację lewego górnego rogu rysowanego metapliku.</param>
        <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa część metapliku względem górnego lewego rogu, do rysowania.</param>
        <param name="srcUnit">Składowa wyliczenia, która określa jednostkę miary używaną do określenia części metapliku, która zawiera prostokąt określony <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagany, ale został zignorowany. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy w wybranym prostokącie z <see cref="T:System.Drawing.Imaging.Metafile" />, po jednym naraz, do metody wywołania zwrotnego do wyświetlania w określonym punkcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok, który określa rozmiar i lokalizację rysowany metaplik.</param>
        <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa część metapliku względem górnego lewego rogu, do rysowania.</param>
        <param name="srcUnit">Składowa wyliczenia, która określa jednostkę miary używaną do określenia części metapliku, która zawiera prostokąt określony <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagany, ale został zignorowany. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy w wybranym prostokącie z <see cref="T:System.Drawing.Imaging.Metafile" />, po jednym naraz, do metody wywołania zwrotnego do wyświetlania w określonym równoległobok.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
 `destPoints` Parametr określa trzy punkty przerównoległobok. Trzy <xref:System.Drawing.Point> struktury reprezentują górne lewe, górne i dolne rogi równoległobok. Czwarty punkt jest ekstrapolacji z pierwszych trzech, aby utworzyć równoległobok. Rysowany metaplik jest skalowany i ścinanie w celu dopasowania do przerównoległobok.  
  
 Dowolny rysunek, który ma miejsce poza prostokątem określonym przez `srcRect` parametr, jest ignorowany.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destPoint"><see cref="T:System.Drawing.PointF" />Struktura, która określa lokalizację lewego górnego rogu rysowanego metapliku.</param>
        <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />Struktura, która określa część metapliku względem górnego lewego rogu, do rysowania.</param>
        <param name="srcUnit">Składowa wyliczenia, która określa jednostkę miary używaną do określenia części metapliku, która zawiera prostokąt określony <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagany, ale został zignorowany. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy w wybranym prostokącie z <see cref="T:System.Drawing.Imaging.Metafile" />, po jednym naraz, do metody wywołania zwrotnego do wyświetlania w określonym punkcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
 Dowolny rysunek, który ma miejsce poza prostokątem określonym przez `srcRect` parametr, jest ignorowany.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok, który określa rozmiar i lokalizację rysowany metaplik.</param>
        <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />Struktura, która określa część metapliku względem górnego lewego rogu, do rysowania.</param>
        <param name="srcUnit">Składowa wyliczenia, która określa jednostkę miary używaną do określenia części metapliku, która zawiera prostokąt określony <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagany, ale został zignorowany. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy w wybranym prostokącie z <see cref="T:System.Drawing.Imaging.Metafile" />, po jednym naraz, do metody wywołania zwrotnego do wyświetlania w określonym równoległobok.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
 `destPoints` Parametr określa trzy punkty przerównoległobok. Trzy <xref:System.Drawing.PointF> struktury reprezentują górne lewe, górne i dolne rogi równoległobok. Czwarty punkt jest ekstrapolacji z pierwszych trzech, aby utworzyć równoległobok. Rysowany metaplik jest skalowany i ścinanie w celu dopasowania do przerównoległobok.  
  
 Dowolny rysunek, który ma miejsce poza prostokątem określonym przez `srcRect` parametr, jest ignorowany.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa lokalizację i rozmiar rysowanego metapliku.</param>
        <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa część metapliku względem górnego lewego rogu, do rysowania.</param>
        <param name="srcUnit">Składowa wyliczenia, która określa jednostkę miary używaną do określenia części metapliku, która zawiera prostokąt określony <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagany, ale został zignorowany. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy zaznaczonego prostokąta z <see cref="T:System.Drawing.Imaging.Metafile" />, po jednym naraz, do metody wywołania zwrotnego do wyświetlania w określonym prostokącie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
 Dowolny rysunek, który ma miejsce poza prostokątem określonym przez `srcRect` parametr, jest ignorowany.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destRect"><see cref="T:System.Drawing.RectangleF" />Struktura, która określa lokalizację i rozmiar rysowanego metapliku.</param>
        <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />Struktura, która określa część metapliku względem górnego lewego rogu, do rysowania.</param>
        <param name="srcUnit">Składowa wyliczenia, która określa jednostkę miary używaną do określenia części metapliku, która zawiera prostokąt określony <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagany, ale został zignorowany. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <summary>Wysyła rekordy zaznaczonego prostokąta z <see cref="T:System.Drawing.Imaging.Metafile" />, po jednym naraz, do metody wywołania zwrotnego do wyświetlania w określonym prostokącie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego`callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
 Dowolny rysunek, który ma miejsce poza prostokątem określonym przez `srcRect` parametr, jest ignorowany.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destPoint"><see cref="T:System.Drawing.Point" />Struktura, która określa lokalizację lewego górnego rogu rysowanego metapliku.</param>
        <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa część metapliku względem górnego lewego rogu, do rysowania.</param>
        <param name="unit">Składowa wyliczenia, która określa jednostkę miary używaną do określenia części metapliku, która zawiera prostokąt określony <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagany, ale został zignorowany. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />Określa informacje o atrybutach obrazu dla rysowanego obrazu.</param>
        <summary>Wysyła rekordy w wybranym prostokącie z <see cref="T:System.Drawing.Imaging.Metafile" />, po jednym naraz, do metody wywołania zwrotnego do wyświetlania w określonym punkcie przy użyciu określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.Point" /> struktur, które definiują równoległobok, który określa rozmiar i lokalizację rysowany metaplik.</param>
        <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa część metapliku względem górnego lewego rogu, do rysowania.</param>
        <param name="unit">Składowa wyliczenia, która określa jednostkę miary używaną do określenia części metapliku, która zawiera prostokąt określony <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagany, ale został zignorowany. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />Określa informacje o atrybutach obrazu dla rysowanego obrazu.</param>
        <summary>Wysyła rekordy w wybranym prostokącie z <see cref="T:System.Drawing.Imaging.Metafile" />, po jednym naraz, do metody wywołania zwrotnego do wyświetlania w określonym przeszukiwaniu przy użyciu określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
 `destPoints` Parametr określa trzy punkty przerównoległobok. Trzy <xref:System.Drawing.Point> struktury reprezentują górne lewe, górne i dolne rogi równoległobok. Czwarty punkt jest ekstrapolacji z pierwszych trzech, aby utworzyć równoległobok. Rysowany metaplik jest skalowany i ścinanie w celu dopasowania do przerównoległobok.  
  
 Dowolny rysunek, który ma miejsce poza prostokątem określonym przez `srcRect` parametr, jest ignorowany.  
  
 Atrybuty obrazu określone przez `imageAttr` parametr zastępują te określone podczas pisania metapliku.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destPoint"><see cref="T:System.Drawing.PointF" />Struktura, która określa lokalizację lewego górnego rogu rysowanego metapliku.</param>
        <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />Struktura, która określa część metapliku względem górnego lewego rogu, do rysowania.</param>
        <param name="unit">Składowa wyliczenia, która określa jednostkę miary używaną do określenia części metapliku, która zawiera prostokąt określony <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagany, ale został zignorowany. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />Określa informacje o atrybutach obrazu dla rysowanego obrazu.</param>
        <summary>Wysyła rekordy w wybranym prostokącie z <see cref="T:System.Drawing.Imaging.Metafile" />, po jednym naraz, do metody wywołania zwrotnego do wyświetlania w określonym punkcie przy użyciu określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
 Dowolny rysunek, który ma miejsce poza prostokątem określonym przez `srcRect` parametr, jest ignorowany.  
  
 Atrybuty obrazu określone przez `imageAttr` parametr zastępują te określone podczas pisania metapliku.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destPoints">Tablica trzech <see cref="T:System.Drawing.PointF" /> struktur, które definiują równoległobok, który określa rozmiar i lokalizację rysowany metaplik.</param>
        <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />Struktura, która określa część metapliku względem górnego lewego rogu, do rysowania.</param>
        <param name="unit">Składowa wyliczenia, która określa jednostkę miary używaną do określenia części metapliku, która zawiera prostokąt określony <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagany, ale został zignorowany. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />Określa informacje o atrybutach obrazu dla rysowanego obrazu.</param>
        <summary>Wysyła rekordy w wybranym prostokącie z <see cref="T:System.Drawing.Imaging.Metafile" />, po jednym naraz, do metody wywołania zwrotnego do wyświetlania w określonym przeszukiwaniu przy użyciu określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
 `destPoints` Parametr określa trzy punkty przerównoległobok. Trzy <xref:System.Drawing.PointF> struktury reprezentują górne lewe, górne i dolne rogi równoległobok. Czwarty punkt jest ekstrapolacji z pierwszych trzech, aby utworzyć równoległobok. Rysowany metaplik jest skalowany i ścinanie w celu dopasowania do przerównoległobok.  
  
 Dowolny rysunek, który ma miejsce poza prostokątem określonym przez `srcRect` parametr, jest ignorowany.  
  
 Atrybuty obrazu określone przez `imageAttr` parametr zastępują te określone podczas pisania metapliku.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa lokalizację i rozmiar rysowanego metapliku.</param>
        <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa część metapliku względem górnego lewego rogu, do rysowania.</param>
        <param name="unit">Składowa wyliczenia, która określa jednostkę miary używaną do określenia części metapliku, która zawiera prostokąt określony <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagany, ale został zignorowany. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />Określa informacje o atrybutach obrazu dla rysowanego obrazu.</param>
        <summary>Wysyła rekordy zaznaczonego prostokąta z <see cref="T:System.Drawing.Imaging.Metafile" />, po jednym naraz, do metody wywołania zwrotnego do wyświetlania w określonym prostokącie przy użyciu określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
 Dowolny rysunek, który ma miejsce poza prostokątem określonym przez `srcRect` parametr, jest ignorowany.  
  
 Atrybuty obrazu określone przez `imageAttr` parametr zastępują te określone podczas pisania metapliku.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />do wyliczenia.</param>
        <param name="destRect"><see cref="T:System.Drawing.RectangleF" />Struktura, która określa lokalizację i rozmiar rysowanego metapliku.</param>
        <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />Struktura, która określa część metapliku względem górnego lewego rogu, do rysowania.</param>
        <param name="unit">Składowa wyliczenia, która określa jednostkę miary używaną do określenia części metapliku, która zawiera prostokąt określony <paramref name="srcRect" /> przez parametr. <see cref="T:System.Drawing.GraphicsUnit" /></param>
        <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />Delegat, który określa metodę, do której są wysyłane rekordy metaplików.</param>
        <param name="callbackData">Wewnętrzny wskaźnik, który jest wymagany, ale został zignorowany. Można przekazać <see cref="F:System.IntPtr.Zero" /> dla tego parametru.</param>
        <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />Określa informacje o atrybutach obrazu dla rysowanego obrazu.</param>
        <summary>Wysyła rekordy zaznaczonego prostokąta z <see cref="T:System.Drawing.Imaging.Metafile" />, po jednym naraz, do metody wywołania zwrotnego do wyświetlania w określonym prostokącie przy użyciu określonych atrybutów obrazu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wylicza rekordy zawarte w określonym metapliku. Każdy rekord jest wysyłany indywidualnie do metody wywołania zwrotnego określonego `callback` przez parametr. Typowo, metoda wywołania zwrotnego <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołuje metodę w celu "odtwarzania wstecz" lub rysowania rekordu.  
  
 W przypadku wywołania <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>metody wywołania zwrotnego należy to zrobić, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> wywołując metodę <xref:System.Drawing.Imaging.Metafile> wyliczania.  
  
 Dowolny rysunek, który ma miejsce poza prostokątem określonym przez `srcRect` parametr, jest ignorowany.  
  
 Atrybuty obrazu określone przez `imageAttr` parametr zastępują te określone podczas pisania metapliku.  
  
   
  
## Examples  
 Aby zapoznać się z przykładowym <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>kodem, zobacz.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Obrazy, mapy bitowe i metapliki</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExcludeClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aktualizuje region <see cref="T:System.Drawing.Graphics" /> klipu w celu wykluczenia obszaru określonego <see cref="T:System.Drawing.Rectangle" /> przez strukturę.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExcludeClip">
      <MemberSignature Language="C#" Value="public void ExcludeClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExcludeClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ExcludeClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExcludeClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExcludeClip(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.ExcludeClip : System.Drawing.Rectangle -&gt; unit" Usage="graphics.ExcludeClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect"><see cref="T:System.Drawing.Rectangle" />Struktura, która określa prostokąt do wykluczenia z regionu klipu.</param>
        <summary>Aktualizuje region <see cref="T:System.Drawing.Graphics" /> klipu w celu wykluczenia obszaru określonego <see cref="T:System.Drawing.Rectangle" /> przez strukturę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wyklucza obszar określony przez `rect` parametr z bieżącego regionu klipu i przypisuje obszar wynikający <xref:System.Drawing.Graphics.Clip%2A> do właściwości tego <xref:System.Drawing.Graphics>elementu.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokąt 100 pikseli o 100 pikseli, którego lewy górny róg znajduje się na współrzędnych (100, 100).  
  
-   Tworzy region zdefiniowany przez prostokąt.  
  
-   Ustawia region przycinania, aby wykluczyć region prostokątny.  
  
-   Wypełnia prostokąt 300 pikseli o 300 pikseli, którego lewy górny róg znajduje się na współrzędnych (0, 0) przy użyciu pełnego niebieskiego pędzla.  
  
 Wynikiem jest niebieski prostokąt z kwadratowym regionem w kierunku jego braku prawego dolnego rogu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#92)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#92)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#92)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExcludeClip">
      <MemberSignature Language="C#" Value="public void ExcludeClip (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExcludeClip(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ExcludeClip(System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExcludeClip(System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.ExcludeClip : System.Drawing.Region -&gt; unit" Usage="graphics.ExcludeClip region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region"><see cref="T:System.Drawing.Region" />określa region, który ma zostać wykluczony z regionu klipu.</param>
        <summary>Aktualizuje region <see cref="T:System.Drawing.Graphics" /> klipu w celu wykluczenia obszaru określonego <see cref="T:System.Drawing.Region" />przez.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wyklucza obszar określony przez `region` parametr z bieżącego regionu klipu i przypisuje obszar wynikający <xref:System.Drawing.Graphics.Clip%2A> do właściwości tego <xref:System.Drawing.Graphics>elementu.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokąt 100 pikseli o 100 pikseli, którego lewy górny róg znajduje się na współrzędnych (100, 100).  
  
-   Ustawia region przycinania do wykluczenia prostokąta.  
  
-   Wypełnia prostokąt 300 pikseli o 300 pikseli, którego lewy górny róg znajduje się na współrzędnych (0, 0) przy użyciu pełnego niebieskiego pędzla.  
  
 Wynikiem jest niebieski prostokąt z kwadratowym obszarem w kierunku jego brakującego dolnego rogu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#91)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#91)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#91)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillClosedCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wypełnia wnętrze zamkniętej krzywej łamanej kardynalnej zdefiniowanej przez tablicę <see cref="T:System.Drawing.Point" /> struktur.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.Point[] -&gt; unit" Usage="graphics.FillClosedCurve (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa charakterystykę wypełnienia.</param>
        <param name="points"><see cref="T:System.Drawing.Point" /> Tablica struktur, które definiują krzywą składaną.</param>
        <summary>Wypełnia wnętrze zamkniętej krzywej łamanej kardynalnej zdefiniowanej przez tablicę <see cref="T:System.Drawing.Point" /> struktur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wnętrze zamkniętej krzywej łamanej, która przechodzi przez każdy punkt w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszym punktem, zostanie dodany dodatkowy segment krzywej od ostatniego punktu do pierwszego punktu, aby go zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.Point> struktury.  
  
 Ta metoda używa domyślnego napięcia 0,5.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny czerwony pędzel.  
  
-   Tworzy tablicę czterech punktów do zdefiniowania krzywej łamanej.  
  
-   Wypełnia krzywą na ekranie.  
  
 Krzywa ma domyślne napięcie 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#93)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#93)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#93)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.PointF[] -&gt; unit" Usage="graphics.FillClosedCurve (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa charakterystykę wypełnienia.</param>
        <param name="points"><see cref="T:System.Drawing.PointF" /> Tablica struktur, które definiują krzywą składaną.</param>
        <summary>Wypełnia wnętrze zamkniętej krzywej łamanej kardynalnej zdefiniowanej przez tablicę <see cref="T:System.Drawing.PointF" /> struktur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wnętrze zamkniętej krzywej łamanej, która przechodzi przez każdy punkt w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszym punktem, zostanie dodany dodatkowy segment krzywej od ostatniego punktu do pierwszego punktu, aby go zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.PointF> struktury.  
  
 Ta metoda używa domyślnego napięcia 0,5.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny czerwony pędzel.  
  
-   Tworzy tablicę czterech punktów do zdefiniowania krzywej łamanej.  
  
-   Wypełnia krzywą na ekranie.  
  
 Krzywa ma domyślne napięcie 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#96)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#96)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#96)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.Point[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa charakterystykę wypełnienia.</param>
        <param name="points"><see cref="T:System.Drawing.Point" /> Tablica struktur, które definiują krzywą składaną.</param>
        <param name="fillmode">Element członkowski wyliczenia, który określa sposób wypełnienia krzywej. <see cref="T:System.Drawing.Drawing2D.FillMode" /></param>
        <summary>Wypełnia wnętrze zamkniętej krzywej łamanej kardynalnej zdefiniowanej przez tablicę <see cref="T:System.Drawing.Point" /> struktur przy użyciu określonego trybu wypełnienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wnętrze zamkniętej krzywej łamanej, która przechodzi przez każdy punkt w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszym punktem, zostanie dodany dodatkowy segment krzywej od ostatniego punktu do pierwszego punktu, aby go zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.Point> struktury.  
  
 Ta metoda używa domyślnego napięcia 0,5.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny czerwony pędzel.  
  
-   Tworzy tablicę czterech punktów do zdefiniowania krzywej łamanej.  
  
-   Ustawia tryb wypełniania <xref:System.Drawing.Drawing2D.FillMode.Winding>na.  
  
-   Wypełnia krzywą na ekranie.  
  
 Krzywa ma domyślne napięcie 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#94)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#94)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#94)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.PointF[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa charakterystykę wypełnienia.</param>
        <param name="points"><see cref="T:System.Drawing.PointF" /> Tablica struktur, które definiują krzywą składaną.</param>
        <param name="fillmode">Element członkowski wyliczenia, który określa sposób wypełnienia krzywej. <see cref="T:System.Drawing.Drawing2D.FillMode" /></param>
        <summary>Wypełnia wnętrze zamkniętej krzywej łamanej kardynalnej zdefiniowanej przez tablicę <see cref="T:System.Drawing.PointF" /> struktur przy użyciu określonego trybu wypełnienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wnętrze zamkniętej krzywej łamanej, która przechodzi przez każdy punkt w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszym punktem, zostanie dodany dodatkowy segment krzywej od ostatniego punktu do pierwszego punktu, aby go zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.Point> struktury.  
  
 Ta metoda używa domyślnego napięcia 0,5.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny czerwony pędzel.  
  
-   Tworzy tablicę czterech punktów do zdefiniowania krzywej łamanej.  
  
-   Ustawia tryb wypełniania <xref:System.Drawing.Drawing2D.FillMode.Winding>na.  
  
-   Wypełnia krzywą na ekranie.  
  
 Krzywa ma domyślne napięcie 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#97)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#97)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#97)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode, float tension);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.Point[] * System.Drawing.Drawing2D.FillMode * single -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa charakterystykę wypełnienia.</param>
        <param name="points"><see cref="T:System.Drawing.Point" /> Tablica struktur, które definiują krzywą składaną.</param>
        <param name="fillmode">Element członkowski wyliczenia, który określa sposób wypełnienia krzywej. <see cref="T:System.Drawing.Drawing2D.FillMode" /></param>
        <param name="tension">Wartość większa lub równa 0.0 F, która określa naciągnięcie krzywej.</param>
        <summary>Wypełnia wnętrze zamkniętej krzywej łamanej kardynalnej zdefiniowanej przez tablicę <see cref="T:System.Drawing.Point" /> struktur przy użyciu określonego trybu wypełnienia i naciągnięcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wnętrze zamkniętej krzywej łamanej, która przechodzi przez każdy punkt w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszym punktem, zostanie dodany dodatkowy segment krzywej od ostatniego punktu do pierwszego punktu, aby go zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.Point> struktury.  
  
 `tension` Parametr określa kształt krzywej łamanej. Jeśli wartość `tension` parametru to 0.0 f, ta metoda rysuje proste segmenty linii, aby połączyć punkty. `tension` Zazwyczaj parametr jest mniejszy niż lub równy 1.0 f. Wartości przekraczające 1,0 F generują nietypowe wyniki.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny czerwony pędzel.  
  
-   Tworzy tablicę czterech punktów do zdefiniowania krzywej łamanej.  
  
-   Ustawia tryb wypełniania <xref:System.Drawing.Drawing2D.FillMode.Winding>na.  
  
-   Ustawia naciągnięcie na 1,0.  
  
-   Wypełnia krzywą na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#95)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#95)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#95)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode, float tension);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.PointF[] * System.Drawing.Drawing2D.FillMode * single -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">A <see cref="T:System.Drawing.Brush" /> , który określa charakterystykę wypełnienia.</param>
        <param name="points"><see cref="T:System.Drawing.PointF" /> Tablica struktur, które definiują krzywą składaną.</param>
        <param name="fillmode">Element członkowski wyliczenia, który określa sposób wypełnienia krzywej. <see cref="T:System.Drawing.Drawing2D.FillMode" /></param>
        <param name="tension">Wartość większa lub równa 0.0 F, która określa naciągnięcie krzywej.</param>
        <summary>Wypełnia wnętrze zamkniętej krzywej łamanej kardynalnej zdefiniowanej przez tablicę <see cref="T:System.Drawing.PointF" /> struktur przy użyciu określonego trybu wypełnienia i naciągnięcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wnętrze zamkniętej krzywej łamanej, która przechodzi przez każdy punkt w tablicy. Jeśli ostatni punkt nie jest zgodny z pierwszym punktem, zostanie dodany dodatkowy segment krzywej od ostatniego punktu do pierwszego punktu, aby go zamknąć.  
  
 Tablica punktów musi zawierać co najmniej cztery <xref:System.Drawing.Point> struktury.  
  
 `tension` Parametr określa kształt krzywej łamanej. Jeśli wartość `tension` parametru to 0.0 f, ta metoda rysuje proste segmenty linii, aby połączyć punkty. `tension` Zazwyczaj parametr jest mniejszy niż lub równy 1.0 f. Wartości przekraczające 1,0 F generują nietypowe wyniki.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny czerwony pędzel.  
  
-   Tworzy tablicę czterech punktów do zdefiniowania krzywej łamanej.  
  
-   Ustawia tryb wypełniania <xref:System.Drawing.Drawing2D.FillMode.Winding>na.  
  
-   Ustawia naciągnięcie na 1,0.  
  
-   Wypełnia krzywą na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#98)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#98)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillEllipse">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wypełnia wnętrze elipsy zdefiniowanej przez prostokąt ograniczenia określony przez parę współrzędnych, Szerokość i wysokość.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * System.Drawing.Rectangle -&gt; unit" Usage="graphics.FillEllipse (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa charakterystykę wypełnienia.</param>
        <param name="rect"><see cref="T:System.Drawing.Rectangle" />Struktura, która reprezentuje prostokąt ograniczający, który definiuje elipsę.</param>
        <summary>Wypełnia wnętrze elipsy zdefiniowanej przez prostokąt powiązany określony przez <see cref="T:System.Drawing.Rectangle" /> strukturę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wnętrze wielokropka <xref:System.Drawing.Brush>znakiem. Elipsa jest definiowana przez prostokąt ograniczający reprezentowane przez `rect` parametr.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny czerwony pędzel.  
  
-   Tworzy prostokąt, który jest powiązany z elipsą.  
  
-   Wypełnia elipsę na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#99)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#99)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#99)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * System.Drawing.RectangleF -&gt; unit" Usage="graphics.FillEllipse (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa charakterystykę wypełnienia.</param>
        <param name="rect"><see cref="T:System.Drawing.RectangleF" />Struktura, która reprezentuje prostokąt ograniczający, który definiuje elipsę.</param>
        <summary>Wypełnia wnętrze elipsy zdefiniowanej przez prostokąt powiązany określony przez <see cref="T:System.Drawing.RectangleF" /> strukturę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wnętrze wielokropka <xref:System.Drawing.Brush>znakiem. Elipsa jest definiowana przez prostokąt ograniczający reprezentowane przez `rect` parametr.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny czerwony pędzel.  
  
-   Tworzy prostokąt, który jest powiązany z elipsą.  
  
-   Wypełnia elipsę na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#100)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#100)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#100)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * int * int * int * int -&gt; unit" Usage="graphics.FillEllipse (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa charakterystykę wypełnienia.</param>
        <param name="x">Współrzędna x lewego górnego rogu prostokąta granicznego, który definiuje elipsę.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąta granicznego, który definiuje elipsę.</param>
        <param name="width">Szerokość prostokąta obwiedni, który definiuje elipsę.</param>
        <param name="height">Wysokość prostokąta obwiedni, który definiuje elipsę.</param>
        <summary>Wypełnia wnętrze elipsy zdefiniowanej przez prostokąt ograniczenia określony przez parę współrzędnych, Szerokość i wysokość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wnętrze wielokropka <xref:System.Drawing.Brush>znakiem. Elipsa jest definiowana `x`przez prostokąt ograniczający reprezentowane przez parametry, `y`, `width`, i `height` .  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny czerwony pędzel.  
  
-   Tworzy lokalizację i rozmiar prostokąta, który jest powiązany z elipsą.  
  
-   Wypełnia elipsę na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#101)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#101)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#101)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * single * single * single * single -&gt; unit" Usage="graphics.FillEllipse (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa charakterystykę wypełnienia.</param>
        <param name="x">Współrzędna x lewego górnego rogu prostokąta granicznego, który definiuje elipsę.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąta granicznego, który definiuje elipsę.</param>
        <param name="width">Szerokość prostokąta obwiedni, który definiuje elipsę.</param>
        <param name="height">Wysokość prostokąta obwiedni, który definiuje elipsę.</param>
        <summary>Wypełnia wnętrze elipsy zdefiniowanej przez prostokąt ograniczenia określony przez parę współrzędnych, Szerokość i wysokość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wnętrze wielokropka <xref:System.Drawing.Brush>znakiem. Elipsa jest definiowana `x`przez prostokąt ograniczający reprezentowane przez parametry, `y`, `width`, i `height` .  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny czerwony pędzel.  
  
-   Tworzy lokalizację i rozmiar prostokąta, który jest powiązany z elipsą.  
  
-   Wypełnia elipsę na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#102)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#102)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#102)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPath">
      <MemberSignature Language="C#" Value="public void FillPath (System.Drawing.Brush brush, System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPath(class System.Drawing.Brush brush, class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPath(System::Drawing::Brush ^ brush, System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.FillPath : System.Drawing.Brush * System.Drawing.Drawing2D.GraphicsPath -&gt; unit" Usage="graphics.FillPath (brush, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa charakterystykę wypełnienia.</param>
        <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />reprezentuje ścieżkę do wypełnienia.</param>
        <summary>Wypełnia wnętrze <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Drawing2D.GraphicsPath> Składa się z serii linii i segmentów krzywej. Jeśli ścieżka reprezentowana przez `path` parametr nie jest ZAMKNIĘTA, dodatkowy segment jest dodawany od ostatniego punktu do pierwszego punktu, aby zamknąć ścieżkę.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny czerwony pędzel.  
  
-   Tworzy obiekt ścieżki grafiki.  
  
-   Dodaje wielokropek do ścieżki graficznej.  
  
-   Wypełnia ścieżkę na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#103)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#103)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#103)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="path" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillPie">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wypełnia wnętrze sekcji koła zdefiniowanej przez wielokropek określony przez parę współrzędnych, Szerokość, Wysokość i dwie linie promieniowe.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.FillPie : System.Drawing.Brush * System.Drawing.Rectangle * single * single -&gt; unit" Usage="graphics.FillPie (brush, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa charakterystykę wypełnienia.</param>
        <param name="rect"><see cref="T:System.Drawing.Rectangle" />Struktura, która reprezentuje prostokąt ograniczający, który definiuje wielokropek, z którego pochodzi sekcja koła.</param>
        <param name="startAngle">Kąt w stopniach mierzony w prawo od osi x do pierwszej strony sekcji koła.</param>
        <param name="sweepAngle">Kąt w stopniach mierzony w prawo <paramref name="startAngle" /> od parametru do drugiej strony sekcji koła.</param>
        <summary>Wypełnia wnętrze sekcji koła zdefiniowanej przez wielokropek określony przez <see cref="T:System.Drawing.RectangleF" /> strukturę i dwie linie promieniowe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wnętrze sekcji koła zdefiniowanej przez łuk wielokropka i dwie linie promieniowe, które przecinają punkty końcowe łuku. Elipsa jest definiowana przez prostokąt ograniczający. Sekcja kołowa składa się z dwóch linii promieniowych zdefiniowanych `startAngle` przez `sweepAngle` parametry i i łuku między przecięciami tych linii promieniowych z elipsą.  
  
 `sweepAngle` Jeśli parametr jest większy niż 360 stopni lub mniejszy niż-360 stopni, jest traktowany tak, jakby miał odpowiednio 360 stopnie lub-360 stopnie.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny czerwony pędzel.  
  
-   Tworzy prostokąt, który jest powiązany z elipsą.  
  
-   Definiuje kąt początkowy (względem osi x) i kąt odchylenia (zarówno w kierunku zgodnym z ruchem wskazówek zegara).  
  
-   Wypełnia obszar o kształcie koła wielokropka na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#104)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#104)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#104)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.FillPie : System.Drawing.Brush * int * int * int * int * int * int -&gt; unit" Usage="graphics.FillPie (brush, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa charakterystykę wypełnienia.</param>
        <param name="x">Współrzędna x lewego górnego rogu prostokąta granicznego, który definiuje wielokropek, z którego pochodzi sekcja koła.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąta granicznego, który definiuje wielokropek, z którego pochodzi sekcja koła.</param>
        <param name="width">Szerokość prostokąta obwiedni, który definiuje wielokropek, z którego pochodzi sekcja koła.</param>
        <param name="height">Wysokość prostokąta obwiedni, który definiuje wielokropek, z którego pochodzi sekcja koła.</param>
        <param name="startAngle">Kąt w stopniach mierzony w prawo od osi x do pierwszej strony sekcji koła.</param>
        <param name="sweepAngle">Kąt w stopniach mierzony w prawo <paramref name="startAngle" /> od parametru do drugiej strony sekcji koła.</param>
        <summary>Wypełnia wnętrze sekcji koła zdefiniowanej przez wielokropek określony przez parę współrzędnych, Szerokość, Wysokość i dwie linie promieniowe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wnętrze sekcji koła zdefiniowanej przez łuk wielokropka i dwie linie promieniowe, które przecinają punkty końcowe łuku. Elipsa jest definiowana przez prostokąt ograniczający. Sekcja kołowa składa się z dwóch linii promieniowych zdefiniowanych `startAngle` przez `sweepAngle` parametry i i łuku między przecięciami tych linii promieniowych z elipsą.  
  
 `sweepAngle` Jeśli parametr jest większy niż 360 stopni lub mniejszy niż-360 stopni, jest traktowany tak, jakby miał odpowiednio 360 stopnie lub-360 stopnie.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny czerwony pędzel.  
  
-   Tworzy lokalizację i rozmiar prostokąta, który jest powiązany z elipsą.  
  
-   Definiuje kąt początkowy (względem osi x) i kąt odchylenia (zarówno w kierunku zgodnym z ruchem wskazówek zegara).  
  
-   Wypełnia obszar o kształcie koła wielokropka na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#105)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#105)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#105)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.FillPie : System.Drawing.Brush * single * single * single * single * single * single -&gt; unit" Usage="graphics.FillPie (brush, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa charakterystykę wypełnienia.</param>
        <param name="x">Współrzędna x lewego górnego rogu prostokąta granicznego, który definiuje wielokropek, z którego pochodzi sekcja koła.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąta granicznego, który definiuje wielokropek, z którego pochodzi sekcja koła.</param>
        <param name="width">Szerokość prostokąta obwiedni, który definiuje wielokropek, z którego pochodzi sekcja koła.</param>
        <param name="height">Wysokość prostokąta obwiedni, który definiuje wielokropek, z którego pochodzi sekcja koła.</param>
        <param name="startAngle">Kąt w stopniach mierzony w prawo od osi x do pierwszej strony sekcji koła.</param>
        <param name="sweepAngle">Kąt w stopniach mierzony w prawo <paramref name="startAngle" /> od parametru do drugiej strony sekcji koła.</param>
        <summary>Wypełnia wnętrze sekcji koła zdefiniowanej przez wielokropek określony przez parę współrzędnych, Szerokość, Wysokość i dwie linie promieniowe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wnętrze sekcji koła zdefiniowanej przez łuk wielokropka i dwie linie promieniowe, które przecinają punkty końcowe łuku. Elipsa jest definiowana przez prostokąt ograniczający. Sekcja kołowa składa się z dwóch linii promieniowych zdefiniowanych `startAngle` przez `sweepAngle` parametry i i łuku między przecięciami tych linii promieniowych z elipsą.  
  
 `sweepAngle` Jeśli parametr jest większy niż 360 stopni lub mniejszy niż-360 stopni, jest traktowany tak, jakby miał odpowiednio 360 stopnie lub-360 stopnie.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny czerwony pędzel.  
  
-   Tworzy lokalizację i rozmiar prostokąta, który jest powiązany z elipsą.  
  
-   Definiuje kąt początkowy (względem osi x) i kąt odchylenia (zarówno w kierunku zgodnym z ruchem wskazówek zegara).  
  
-   Wypełnia obszar o kształcie koła wielokropka na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#106)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#106)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#106)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillPolygon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wypełnia wnętrze wielokąta zdefiniowanego za pomocą tablicy punktów określonych przez <see cref="T:System.Drawing.Point" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.Point[] -&gt; unit" Usage="graphics.FillPolygon (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa charakterystykę wypełnienia.</param>
        <param name="points"><see cref="T:System.Drawing.Point" /> Tablica struktur reprezentujących wierzchołki wielokąta do wypełnienia.</param>
        <summary>Wypełnia wnętrze wielokąta zdefiniowanego za pomocą tablicy punktów określonych przez <see cref="T:System.Drawing.Point" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każde dwa kolejne punkty w tablicy określają bok wielokąta. Ponadto, jeśli ostatni punkt i pierwszy punkt nie zbieg się, określają, że strona jest zamykana.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny niebieski pędzel.  
  
-   Tworzy tablicę siedmiu punktów, aby zdefiniować wielokąt.  
  
-   Wypełnia obszar wielokąta na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#107)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#107)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#107)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.PointF[] -&gt; unit" Usage="graphics.FillPolygon (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa charakterystykę wypełnienia.</param>
        <param name="points"><see cref="T:System.Drawing.PointF" /> Tablica struktur reprezentujących wierzchołki wielokąta do wypełnienia.</param>
        <summary>Wypełnia wnętrze wielokąta zdefiniowanego za pomocą tablicy punktów określonych przez <see cref="T:System.Drawing.PointF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każde dwa kolejne punkty w tablicy określają bok wielokąta. Ponadto, jeśli ostatni punkt i pierwszy punkt nie zbieg się, określają, że strona jest zamykana.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny niebieski pędzel.  
  
-   Tworzy tablicę siedmiu punktów, aby zdefiniować wielokąt.  
  
-   Wypełnia obszar wielokąta na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#109)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#109)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#109)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillMode);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.Point[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillPolygon (brush, points, fillMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa charakterystykę wypełnienia.</param>
        <param name="points"><see cref="T:System.Drawing.Point" /> Tablica struktur reprezentujących wierzchołki wielokąta do wypełnienia.</param>
        <param name="fillMode"><see cref="T:System.Drawing.Drawing2D.FillMode" /> Składowa wyliczenia, która określa styl wypełnienia.</param>
        <summary>Wypełnia wnętrze wielokąta zdefiniowanego przez tablicę punktów określonych przez <see cref="T:System.Drawing.Point" /> struktury przy użyciu określonego trybu wypełniania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każde dwa kolejne punkty w tablicy określają bok wielokąta. Ponadto, jeśli ostatni punkt i pierwszy punkt nie zbieg się, określają, że strona jest zamykana.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny niebieski pędzel.  
  
-   Tworzy tablicę siedmiu punktów, aby zdefiniować wielokąt.  
  
-   Ustawia tryb wypełniania <xref:System.Drawing.Drawing2D.FillMode.Winding>na.  
  
-   Wypełnia obszar wielokąta na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#108)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#108)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#108)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillMode);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.PointF[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillPolygon (brush, points, fillMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa charakterystykę wypełnienia.</param>
        <param name="points"><see cref="T:System.Drawing.PointF" /> Tablica struktur reprezentujących wierzchołki wielokąta do wypełnienia.</param>
        <param name="fillMode"><see cref="T:System.Drawing.Drawing2D.FillMode" /> Składowa wyliczenia, która określa styl wypełnienia.</param>
        <summary>Wypełnia wnętrze wielokąta zdefiniowanego przez tablicę punktów określonych przez <see cref="T:System.Drawing.PointF" /> struktury przy użyciu określonego trybu wypełniania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każde dwa kolejne punkty w tablicy określają bok wielokąta. Ponadto, jeśli ostatni punkt i pierwszy punkt nie zbieg się, określają, że strona jest zamykana.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny niebieski pędzel.  
  
-   Tworzy tablicę siedmiu punktów, aby zdefiniować wielokąt.  
  
-   Ustawia tryb wypełniania <xref:System.Drawing.Drawing2D.FillMode.Winding>na.  
  
-   Wypełnia obszar wielokąta na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#110)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#110)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#110)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="points" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillRectangle">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wypełnia wnętrze prostokąta określonego przez parę współrzędnych, Szerokość i wysokość.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * System.Drawing.Rectangle -&gt; unit" Usage="graphics.FillRectangle (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa charakterystykę wypełnienia.</param>
        <param name="rect"><see cref="T:System.Drawing.Rectangle" />Struktura, która reprezentuje prostokąt do wypełnienia.</param>
        <summary>Wypełnia wnętrze prostokąta określonego przez <see cref="T:System.Drawing.Rectangle" /> strukturę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wnętrze prostokąta `rect` , w tym określony górny róg i do obliczonych dolnych i dolnych krawędzi.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny niebieski pędzel.  
  
-   Tworzy prostokąt.  
  
-   Wypełnia prostokątny obszar na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#111)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#111)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#111)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * System.Drawing.RectangleF -&gt; unit" Usage="graphics.FillRectangle (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa charakterystykę wypełnienia.</param>
        <param name="rect"><see cref="T:System.Drawing.RectangleF" />Struktura, która reprezentuje prostokąt do wypełnienia.</param>
        <summary>Wypełnia wnętrze prostokąta określonego przez <see cref="T:System.Drawing.RectangleF" /> strukturę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia wnętrze prostokąta `rect` , w tym określony górny róg i do obliczonych dolnych i dolnych krawędzi.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny niebieski pędzel.  
  
-   Tworzy prostokąt.  
  
-   Wypełnia prostokątny obszar na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#112)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#112)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#112)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * int * int * int * int -&gt; unit" Usage="graphics.FillRectangle (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa charakterystykę wypełnienia.</param>
        <param name="x">Współrzędna x lewego górnego rogu prostokąta do wypełnienia.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąta do wypełnienia.</param>
        <param name="width">Szerokość prostokąta do wypełnienia.</param>
        <param name="height">Wysokość prostokąta do wypełnienia.</param>
        <summary>Wypełnia wnętrze prostokąta określonego przez parę współrzędnych, Szerokość i wysokość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia`x`wnętrze prostokąta zdefiniowanego przez parametry, `y`, `width`, i `height` , w tym określony górny róg i do obliczonych dolnych i dolnych krawędzi.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny niebieski pędzel.  
  
-   Tworzy lokalizację i rozmiar prostokąta.  
  
-   Wypełnia prostokątny obszar na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#113)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#113)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#113)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * single * single * single * single -&gt; unit" Usage="graphics.FillRectangle (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa charakterystykę wypełnienia.</param>
        <param name="x">Współrzędna x lewego górnego rogu prostokąta do wypełnienia.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąta do wypełnienia.</param>
        <param name="width">Szerokość prostokąta do wypełnienia.</param>
        <param name="height">Wysokość prostokąta do wypełnienia.</param>
        <summary>Wypełnia wnętrze prostokąta określonego przez parę współrzędnych, Szerokość i wysokość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia `x`wnętrze prostokąta zdefiniowanego przez parametry, `y`, `width`, i `height` , w tym określony górny róg i do obliczonych dolnych i dolnych krawędzi.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny niebieski pędzel.  
  
-   Tworzy lokalizację i rozmiar prostokąta.  
  
-   Wypełnia prostokątny obszar na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#114)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#114)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#114)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillRectangles">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wypełnia wnętrze serii prostokątów określonych przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillRectangles">
      <MemberSignature Language="C#" Value="public void FillRectangles (System.Drawing.Brush brush, System.Drawing.Rectangle[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangles(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.Rectangle[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangles(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Rectangle&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.FillRectangles : System.Drawing.Brush * System.Drawing.Rectangle[] -&gt; unit" Usage="graphics.FillRectangles (brush, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rects" Type="System.Drawing.Rectangle[]" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa charakterystykę wypełnienia.</param>
        <param name="rects"><see cref="T:System.Drawing.Rectangle" /> Tablica struktur, które reprezentują prostokąty do wypełnienia.</param>
        <summary>Wypełnia wnętrze serii prostokątów określonych przez <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny niebieski pędzel.  
  
-   Tworzy tablicę z trzema prostokątami.  
  
-   Wypełnia trzy prostokątne obszary na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#115)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#115)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#115)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="rects" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="rects" />jest tablicą o zerowej długości.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangles">
      <MemberSignature Language="C#" Value="public void FillRectangles (System.Drawing.Brush brush, System.Drawing.RectangleF[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangles(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.RectangleF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangles(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::RectangleF&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.FillRectangles : System.Drawing.Brush * System.Drawing.RectangleF[] -&gt; unit" Usage="graphics.FillRectangles (brush, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rects" Type="System.Drawing.RectangleF[]" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa charakterystykę wypełnienia.</param>
        <param name="rects"><see cref="T:System.Drawing.RectangleF" /> Tablica struktur, które reprezentują prostokąty do wypełnienia.</param>
        <summary>Wypełnia wnętrze serii prostokątów określonych przez <see cref="T:System.Drawing.RectangleF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny niebieski pędzel.  
  
-   Tworzy tablicę z trzema prostokątami.  
  
-   Wypełnia trzy prostokątne obszary na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#116)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#116)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#116)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="rects" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Rects" />jest tablicą o zerowej długości.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRegion">
      <MemberSignature Language="C#" Value="public void FillRegion (System.Drawing.Brush brush, System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRegion(class System.Drawing.Brush brush, class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRegion(System.Drawing.Brush,System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRegion(System::Drawing::Brush ^ brush, System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.FillRegion : System.Drawing.Brush * System.Drawing.Region -&gt; unit" Usage="graphics.FillRegion (brush, region)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" />Określa charakterystykę wypełnienia.</param>
        <param name="region"><see cref="T:System.Drawing.Region" />reprezentuje obszar do wypełnienia.</param>
        <summary>Wypełnia wnętrze <see cref="T:System.Drawing.Region" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Drawing.Region> składa się z prostokątów i ścieżek. Jeśli region nie jest zamknięty, dodatkowy segment zostanie dodany od ostatniego punktu do pierwszego punktu, aby go zamknąć.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy pełny niebieski pędzel.  
  
-   Tworzy prostokąt.  
  
-   Tworzy region prostokątny.  
  
-   Wypełnia prostokątny region na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#117)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#117)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#117)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="region" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Graphics ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Graphics ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="graphics.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Umożliwia obiektowi podjęcie próby zwolnienia zasobów i wykonywanie innych operacji czyszczenia przed odinstalowaniem ich przez wyrzucanie elementów bezużytecznych.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Flush">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wymusza wykonywanie wszystkich oczekujących operacji graficznych i zwraca natychmiast bez oczekiwania na zakończenie operacji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="graphics.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wymusza wykonywanie wszystkich oczekujących operacji graficznych i zwraca natychmiast bez oczekiwania na zakończenie operacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda uruchamia opróżnianie i zwraca natychmiast bez oczekiwania na zakończenie wykonywania operacji graficznych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush (System.Drawing.Drawing2D.FlushIntention intention);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush(valuetype System.Drawing.Drawing2D.FlushIntention intention) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Flush(System.Drawing.Drawing2D.FlushIntention)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush (intention As FlushIntention)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush(System::Drawing::Drawing2D::FlushIntention intention);" />
      <MemberSignature Language="F#" Value="member this.Flush : System.Drawing.Drawing2D.FlushIntention -&gt; unit" Usage="graphics.Flush intention" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intention" Type="System.Drawing.Drawing2D.FlushIntention" />
      </Parameters>
      <Docs>
        <param name="intention"><see cref="T:System.Drawing.Drawing2D.FlushIntention" /> Składowa wyliczenia, która określa, czy metoda zwraca natychmiast lub czeka na zakończenie wszelkich istniejących operacji.</param>
        <summary>Wymusza wykonywanie wszystkich oczekujących operacji graficznych przy użyciu metody, która oczekuje lub nie oczekuje, jak określono, aby powrócić przed zakończeniem operacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Drawing.Drawing2D.FlushIntention.Flush> <xref:System.Drawing.Drawing2D.FlushIntention.Sync> parametru określa, że metoda zwraca natychmiast po rozpoczęciu opróżniania, podczas gdy wartość określa, że metoda czeka przed powrotem do momentu zakończenia wszelkich istniejących operacji. `intention`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromHdc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy nowy <see cref="T:System.Drawing.Graphics" /> z określonego dojścia do kontekstu urządzenia.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdc(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdc (hdc As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdc(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="static member FromHdc : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHdc hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Dojście do kontekstu urządzenia.</param>
        <summary>Tworzy nowy <see cref="T:System.Drawing.Graphics" /> z określonego dojścia do kontekstu urządzenia.</summary>
        <returns>Ta metoda zwraca nowy <see cref="T:System.Drawing.Graphics" /> dla określonego kontekstu urządzenia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy zawsze wywołać <xref:System.Drawing.Graphics.Dispose%2A> metodę, aby <xref:System.Drawing.Graphics> zwolnić i <xref:System.Drawing.Graphics.FromHdc%2A> powiązane zasoby utworzone przez metodę.  
  
 Nawet jeśli urządzenie wyświetlane ma skojarzony profil kolorów ICM, [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] program nie będzie domyślnie używał tego profilu. Aby włączyć ICM dla a <xref:System.Drawing.Graphics>, <xref:System.Drawing.Graphics> konstrukcja z używający HDC po przejściu używający HDC ( `SetICMMode` i ICM_ON) do funkcji. Następnie każde rysowanie wykonane przez <xref:System.Drawing.Graphics> program zostanie dostosowane zgodnie z profilem ICM skojarzonym z urządzeniem wyświetlającym. Włączenie funkcji ICM spowoduje wolniejszą wydajność.  
  
 Stan kontekstu urządzenia (tryb mapowania, jednostka logiczna i podobne) w czasie wywołania <xref:System.Drawing.Graphics.FromHdc%2A> może wpływać na renderowanie wykonywane <xref:System.Drawing.Graphics>przez.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy zmienną `hdc` typu wskaźnika wewnętrznego i ustawia ją na uchwyt do kontekstu urządzenia obiektu graficznego formularza.  
  
-   Tworzy nowy obiekt graficzny przy użyciu `hdc`.  
  
-   Rysuje prostokąt z nowym obiektem graficznym (na ekranie).  
  
-   Zwalnia nowy obiekt graficzny przy użyciu `hdc`.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#118)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#118)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#118)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdc (IntPtr hdc, IntPtr hdevice);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdc(native int hdc, native int hdevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdc(System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdc (hdc As IntPtr, hdevice As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdc(IntPtr hdc, IntPtr hdevice);" />
      <MemberSignature Language="F#" Value="static member FromHdc : nativeint * nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHdc (hdc, hdevice)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
        <Parameter Name="hdevice" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Dojście do kontekstu urządzenia.</param>
        <param name="hdevice">Dojście do urządzenia.</param>
        <summary>Tworzy nowy <see cref="T:System.Drawing.Graphics" /> z określonego dojścia do kontekstu urządzenia i dojścia do urządzenia.</summary>
        <returns>Ta metoda zwraca nowy <see cref="T:System.Drawing.Graphics" /> dla określonego kontekstu urządzenia i urządzenia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy zawsze wywołać <xref:System.Drawing.Graphics.Dispose%2A> metodę, aby <xref:System.Drawing.Graphics> zwolnić i <xref:System.Drawing.Graphics.FromHdc%2A> powiązane zasoby utworzone przez metodę.  
  
 Nawet jeśli urządzenie wyświetlane ma skojarzony profil kolorów ICM, [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] program nie będzie domyślnie używał tego profilu. Aby włączyć ICM dla a <xref:System.Drawing.Graphics>, <xref:System.Drawing.Graphics> konstrukcja z używający HDC po przejściu używający HDC ( `SetICMMode` i ICM_ON) do funkcji. Następnie każde rysowanie wykonane przez <xref:System.Drawing.Graphics> program zostanie dostosowane zgodnie z profilem ICM skojarzonym z urządzeniem wyświetlającym. Włączenie funkcji ICM spowoduje wolniejszą wydajność.  
  
 Stan kontekstu urządzenia (tryb mapowania, jednostka logiczna i podobne) w czasie wywołania <xref:System.Drawing.Graphics.FromHdc%2A> może wpływać na renderowanie wykonywane <xref:System.Drawing.Graphics>przez.  
  
 Dojście urządzenia jest zwykle używane do badania określonych możliwości drukarki.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">w celu uzyskania dostępu do kodu niezarządzanego. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="FromHdcInternal">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdcInternal (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdcInternal(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdcInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdcInternal (hdc As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdcInternal(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="static member FromHdcInternal : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHdcInternal hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Dojście do kontekstu urządzenia.</param>
        <summary><see cref="T:System.Drawing.Graphics" /> Zwraca dla określonego kontekstu urządzenia.</summary>
        <returns>A <see cref="T:System.Drawing.Graphics" /> dla określonego kontekstu urządzenia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie powinna być używana.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHwnd">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHwnd (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHwnd(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHwnd(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHwnd (hwnd As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHwnd(IntPtr hwnd);" />
      <MemberSignature Language="F#" Value="static member FromHwnd : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHwnd hwnd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">Dojście do okna.</param>
        <summary>Tworzy nowy <see cref="T:System.Drawing.Graphics" /> z określonego uchwytu do okna.</summary>
        <returns>Ta metoda zwraca nowy <see cref="T:System.Drawing.Graphics" /> dla określonego uchwytu okna.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy zawsze wywołać <xref:System.Drawing.Graphics.Dispose%2A> metodę, aby <xref:System.Drawing.Graphics> zwolnić i <xref:System.Drawing.Graphics.FromHwnd%2A> powiązane zasoby utworzone przez metodę.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms <xref:System.Windows.Forms.PaintEventArgs>i wymaga `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi <xref:System.Windows.Forms.Form> zdarzeń, a także `thisForm`dla przykładu. Kod wykonuje następujące czynności:  
  
-   Tworzy nową zmienną `hwnd` wskaźnika wewnętrznego i ustawia ją na uchwyt formularza przykładu.  
  
-   Tworzy nową <xref:System.Drawing.Graphics> z dojścia.  
  
-   Rysuje prostokąt do nowego <xref:System.Drawing.Graphics> przy użyciu czerwonego pióra.  
  
-   Usuwa nowy <xref:System.Drawing.Graphics>.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#119)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#119)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#119)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">w celu uzyskania dostępu do kodu niezarządzanego. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="FromHwndInternal">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHwndInternal (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHwndInternal(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHwndInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHwndInternal (hwnd As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHwndInternal(IntPtr hwnd);" />
      <MemberSignature Language="F#" Value="static member FromHwndInternal : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHwndInternal hwnd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">Dojście do okna.</param>
        <summary>Tworzy nowy <see cref="T:System.Drawing.Graphics" /> dla określonego uchwytu systemu Windows.</summary>
        <returns>A <see cref="T:System.Drawing.Graphics" /> dla określonego uchwytu okna.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie powinna być używana.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromImage">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromImage (System.Drawing.Image image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromImage(class System.Drawing.Image image) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromImage(System.Drawing.Image)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromImage(System::Drawing::Image ^ image);" />
      <MemberSignature Language="F#" Value="static member FromImage : System.Drawing.Image -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromImage image" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
      </Parameters>
      <Docs>
        <param name="image"><see cref="T:System.Drawing.Image" />z którego ma zostać utworzony nowy <see cref="T:System.Drawing.Graphics" />.</param>
        <summary>Tworzy nowy <see cref="T:System.Drawing.Graphics" /> z określonego <see cref="T:System.Drawing.Image" />elementu.</summary>
        <returns>Ta metoda zwraca nowy <see cref="T:System.Drawing.Graphics" /> dla określonego. <see cref="T:System.Drawing.Image" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli obraz ma format indeksowanego piksela, ta metoda zgłasza wyjątek z komunikatem "nie można utworzyć obiektu graficznego na podstawie obrazu z indeksowanym formatem pikseli". Na poniższej liście przedstawiono formaty indeksowanych pikseli.  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format1bppIndexed>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format4bppIndexed>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format8bppIndexed>  
  
 Indeksowany obraz można zapisać jako inny format przy użyciu <xref:System.Drawing.Image.Save%28System.String%2CSystem.Drawing.Imaging.ImageFormat%29> metody, a następnie <xref:System.Drawing.Graphics> pobrać obiekt dla nowego obrazu.  
  
 Ta metoda zgłasza również wyjątek, jeśli obraz ma jeden z następujących formatów pikseli.  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Undefined>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.DontCare>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format16bppArgb1555>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale>  
  
 Należy zawsze wywołać <xref:System.Drawing.Graphics.Dispose%2A> metodę, aby <xref:System.Drawing.Graphics> zwolnić i <xref:System.Drawing.Graphics.FromImage%2A> powiązane zasoby utworzone przez metodę.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   <xref:System.Drawing.Image> Tworzy z pliku graficznego SampImag. jpg w przykładowym folderze.  
  
-   <xref:System.Drawing.Graphics> Tworzy<xref:System.Drawing.Image>z.  
  
-   Zmienia obraz, wypełniając prostokąt wewnątrz niego.  
  
-   Rysuje <xref:System.Drawing.Image> na ekranie.  
  
-   Zwalnia utworzony <xref:System.Drawing.Graphics>.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#120)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#120)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />jest <see langword="null" />.</exception>
        <exception cref="T:System.Exception"><paramref name="image" />ma format indeksowanego piksela lub jego format jest niezdefiniowany.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/737bae30-e599-4e1d-bf30-bab8280b32be">Instrukcje: Tworzenie mapy bitowej w czasie wykonywania</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a626d701-bd99-4fd8-b92f-7b8f794e042b">Praca z obrazami, mapami bitowymi, ikonami i metaplikami</related>
        <related type="Article" href="https://msdn.microsoft.com/library/162861f9-f050-445e-8abb-b2c43a918b8b">Instrukcje: Tworzenie obiektów graficznych do rysowania</related>
      </Docs>
    </Member>
    <Member MemberName="GetContextInfo">
      <MemberSignature Language="C#" Value="public object GetContextInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetContextInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetContextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContextInfo () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetContextInfo();" />
      <MemberSignature Language="F#" Value="member this.GetContextInfo : unit -&gt; obj" Usage="graphics.GetContextInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera kontekst grafiki skumulowanej.</summary>
        <returns><see cref="T:System.Object" /> Reprezentujący kontekst grafiki skumulowanej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest tablicą obiektów, w której pierwszy element zawiera skumulowany region klipu, a drugi element zawiera macierz tłumaczenia skumulowanego/przekształcania.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHalftonePalette">
      <MemberSignature Language="C#" Value="public static IntPtr GetHalftonePalette ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetHalftonePalette() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetHalftonePalette" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHalftonePalette () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetHalftonePalette();" />
      <MemberSignature Language="F#" Value="static member GetHalftonePalette : unit -&gt; nativeint" Usage="System.Drawing.Graphics.GetHalftonePalette " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera dojście do bieżącej palety półtonów systemu Windows.</summary>
        <returns>Wewnętrzny wskaźnik określający dojście do palety.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Celem <xref:System.Drawing.Graphics.GetHalftonePalette%2A> metody jest umożliwienie [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] tworzenia lepszej jakości półtonów, gdy wyświetlacz używa 8 bitów na piksel. Aby wyświetlić obraz przy użyciu palety półtonów, należy wykonać poniższą procedurę.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Definiuje atrybuty <xref:System.Runtime.InteropServices.DllImportAttribute> współdziałania dla pliku DLL systemu Windows GDI32. dll, który zawiera [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] niezbędne funkcje.  
  
-   Definiuje funkcje `RealizePalette` i w tej bibliotece DLL jako zewnętrzne. `SelectPalette`  
  
-   Tworzy obraz z istniejącego pliku obrazu SampImag. jpg (który musi znajdować się w tym samym folderze co przykładowy plik Code) i rysuje obraz na ekranie.  
  
-   Tworzy zmienne wewnętrznego typu wskaźnika i ustawia ich wartości na uchwyt do obiektu Graphics i bieżącej palety półtonów systemu Windows.  
  
-   Wybiera i realizuje paletę półtonów.  
  
-   Tworzy nowy obiekt graficzny przy użyciu `hdc` parametru.  
  
-   Ponownie rysuje obraz.  
  
-   Zwalnia dojście do kontekstu urządzenia.  
  
 Wynikiem są dwa renderingi przykładowego obrazu: jeden z paletą 16-bitową i jedną z paletą 8-bitową.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#121)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#121)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#121)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHdc">
      <MemberSignature Language="C#" Value="public IntPtr GetHdc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetHdc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetHdc" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHdc () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IntPtr GetHdc();" />
      <MemberSignature Language="F#" Value="abstract member GetHdc : unit -&gt; nativeint&#xA;override this.GetHdc : unit -&gt; nativeint" Usage="graphics.GetHdc " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Drawing.IDeviceContext.GetHdc</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera dojście do kontekstu urządzenia skojarzonego z tym <see cref="T:System.Drawing.Graphics" />elementem.</summary>
        <returns>Dojście do kontekstu urządzenia skojarzonego z tym <see cref="T:System.Drawing.Graphics" />elementem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kontekst urządzenia to struktura systemu Windows oparta na [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] , która definiuje zestaw obiektów graficznych i skojarzonych z nimi atrybutów, a także tryby graficzne, które mają wpływ na dane wyjściowe. Ta metoda zwraca ten kontekst urządzenia z wyjątkiem czcionki. Ponieważ czcionka nie jest zaznaczona, wywołania <xref:System.Drawing.Font.FromHdc%2A> metody przy użyciu dojścia zwróconego <xref:System.Drawing.Graphics.GetHdc%2A> przez metodę zakończą się niepowodzeniem.  
  
 Wywołania metod <xref:System.Drawing.Graphics.ReleaseHdc%2A> i muszą występować w parach. <xref:System.Drawing.Graphics.GetHdc%2A> W zakresie <xref:System.Drawing.Graphics.GetHdc%2A> pary metod i <xref:System.Drawing.Graphics.ReleaseHdc%2A> , [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] zazwyczaj są tylko wywołania funkcji. Wywołania w tym zakresie wykonane do [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] metod <xref:System.Drawing.Graphics> , które wygenerowały `hdc` parametr, kończą się `ObjectBusy` niepowodzeniem z powodu błędu. Ponadto program [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] ignoruje wszelkie zmiany stanu wprowadzone <xref:System.Drawing.Graphics> do `hdc` parametru w kolejnych operacjach.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Przykład ilustruje wywołanie funkcji systemu Windows [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] w celu wykonania tego samego zadania [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> jako metody. Kod wykonuje następujące czynności:  
  
-   Definiuje atrybut współdziałania <xref:System.Runtime.InteropServices.DllImportAttribute> dla pliku DLL systemu Windows GDI32. dll. Ta biblioteka DLL zawiera żądaną [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] funkcję.  
  
-   <xref:System.Drawing.Rectangle> Definiuje funkcję w tej bibliotece DLL jako zewnętrzną.  
  
-   Tworzy czerwone pióro.  
  
-   Za pomocą pióra rysuje prostokąt na ekranie przy użyciu [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics.DrawRectangle%2A> metody.  
  
-   Definiuje wewnętrzną zmienną `hdc` typu wskaźnika i ustawia jej wartość na dojście do kontekstu urządzenia w formularzu.  
  
-   Rysuje prostokąt na ekranie przy użyciu [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <xref:System.Drawing.Rectangle> funkcji.  
  
-   Zwalnia kontekst urządzenia reprezentowanego przez `hdc` parametr.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#122)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#122)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#122)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">w celu uzyskania dostępu do kodu niezarządzanego. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetNearestColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color GetNearestColor (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Color GetNearestColor(valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetNearestColor(System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Color GetNearestColor(System::Drawing::Color color);" />
      <MemberSignature Language="F#" Value="member this.GetNearestColor : System.Drawing.Color -&gt; System.Drawing.Color" Usage="graphics.GetNearestColor color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color"><see cref="T:System.Drawing.Color" />Struktura, dla której ma zostać odnalezione dopasowanie.</param>
        <summary>Pobiera najbliższy kolor do określonej <see cref="T:System.Drawing.Color" /> struktury.</summary>
        <returns>Struktura, która reprezentuje najbliższy kolor do określonego <paramref name="color" /> za pomocą parametru. <see cref="T:System.Drawing.Color" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy dowolny kolor ze współrzędnymi ARGB (255, 165, 63, 136).  
  
-   Tworzy pełny pędzel i ustawia jego kolor na określony kolor.  
  
-   Wypełnia elipsę przy użyciu dowolnego koloru.  
  
-   Tworzy drugi kolor i ustawia jego wartość na najbliższy systemowy Kolor ARGB.  
  
-   Wypełnia drugi wielokropek z tym kolorem.  
  
 Wynik ma dwie wielokropek: pierwszy rysowany z dowolnym określonym kolorem i drugi rysowany z kolorem systemu zbliżonym do określonego koloru.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#123)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#123)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#123)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolationMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.InterpolationMode InterpolationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.InterpolationMode InterpolationMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.InterpolationMode" />
      <MemberSignature Language="VB.NET" Value="Public Property InterpolationMode As InterpolationMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::InterpolationMode InterpolationMode { System::Drawing::Drawing2D::InterpolationMode get(); void set(System::Drawing::Drawing2D::InterpolationMode value); };" />
      <MemberSignature Language="F#" Value="member this.InterpolationMode : System.Drawing.Drawing2D.InterpolationMode with get, set" Usage="System.Drawing.Graphics.InterpolationMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.InterpolationMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tryb interpolacji skojarzony z tym <see cref="T:System.Drawing.Graphics" />elementem.</summary>
        <value>Jedna z <see cref="T:System.Drawing.Drawing2D.InterpolationMode" /> wartości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tryb interpolacji określa sposób obliczania pośrednich wartości między dwoma punktami końcowymi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IntersectClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aktualizuje region <see cref="T:System.Drawing.Graphics" /> klipu do przecięcia bieżącego regionu klipu i określonej <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub IntersectClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.IntersectClip : System.Drawing.Rectangle -&gt; unit" Usage="graphics.IntersectClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect"><see cref="T:System.Drawing.Rectangle" />Struktura do przecięcia z bieżącym regionem klipu.</param>
        <summary>Aktualizuje region <see cref="T:System.Drawing.Graphics" /> klipu do przecięcia bieżącego regionu klipu i określonej <see cref="T:System.Drawing.Rectangle" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda przypisuje do <xref:System.Drawing.Graphics.Clip%2A> właściwości <xref:System.Drawing.Graphics> obszaru reprezentowanego przez przecięcie bieżącego regionu klipu i prostokąta określonego przez `rect` parametr.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokąt z górnym lewym górnym rogu w (0, 0) i ustawia region przycinania do tego prostokąta.  
  
-   Tworzy drugi prostokąt z górnym lewym górnym rogu w (100, 100) i ustawia region przycinania na część wspólną tego prostokąta i bieżący region przycinania (pierwszy prostokąt).  
  
-   Wypełnia duży prostokąt obejmujący poprzednie prostokąty z wypełnionym niebieskim pędzeliem.  
  
-   Resetuje region przycinania do nieskończoności.  
  
-   Rysuje prostokąty wokół dwóch regionów przycinających. Używa czarnego pióra dla pierwszego prostokąta wycinka i czerwonego pióra dla drugiego regionu wycinka.  
  
 Wynikiem jest to, że tylko przecięcie z dwóch prostokątów jest wypełnione niebieską.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#124)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#124)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#124)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub IntersectClip (rect As RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.IntersectClip : System.Drawing.RectangleF -&gt; unit" Usage="graphics.IntersectClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect"><see cref="T:System.Drawing.RectangleF" />Struktura do przecięcia z bieżącym regionem klipu.</param>
        <summary>Aktualizuje region <see cref="T:System.Drawing.Graphics" /> klipu do przecięcia bieżącego regionu klipu i określonej <see cref="T:System.Drawing.RectangleF" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda przypisuje do <xref:System.Drawing.Graphics.Clip%2A> właściwości <xref:System.Drawing.Graphics> obszaru reprezentowanego przez przecięcie bieżącego regionu klipu i prostokąta określonego przez `rect` parametr.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokąt z górnym lewym górnym rogu w (0, 0) i ustawia region przycinania do tego prostokąta.  
  
-   Tworzy drugi prostokąt z górnym lewym górnym rogu w (100, 100) i ustawia region przycinania na część wspólną tego prostokąta i bieżący region przycinania (pierwszy prostokąt).  
  
-   Wypełnia duży prostokąt obejmujący poprzednie prostokąty z wypełnionym niebieskim pędzeliem.  
  
-   Resetuje region przycinania do nieskończoności.  
  
-   Rysuje prostokąty wokół dwóch regionów przycinających. Używa czarnego pióra dla pierwszego prostokąta wycinka i czerwonego pióra dla drugiego regionu wycinka.  
  
 Wynikiem jest to, że tylko przecięcie z dwóch prostokątów jest wypełnione niebieską.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#125)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#125)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#125)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.IntersectClip : System.Drawing.Region -&gt; unit" Usage="graphics.IntersectClip region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region"><see cref="T:System.Drawing.Region" />do przecięcia z bieżącym regionem.</param>
        <summary>Aktualizuje region <see cref="T:System.Drawing.Graphics" /> klipu do przecięcia bieżącego regionu klipu i określonego <see cref="T:System.Drawing.Region" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda przypisuje do <xref:System.Drawing.Graphics.Clip%2A> właściwości <xref:System.Drawing.Graphics> obszaru reprezentowanego przez przecięcie bieżącego regionu klipu i regionu określonego przez `region` parametr.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokąt z górnym lewym górnym rogu w (0, 0).  
  
-   Tworzy region i ustawia go na prostokąt i ustawia region przycinania na ten region.  
  
-   Tworzy drugi prostokąt z górnym lewym górnym rogu w (100, 100).  
  
-   Tworzy region i ustawia go na drugi prostokąt i ustawia region przycinania na część wspólną tego regionu i bieżący region wycinka (pierwszy prostokąt) przy użyciu trybu <xref:System.Drawing.Drawing2D.CombineMode.Replace>łączenia.  
  
-   Wypełnia duży prostokąt obejmujący poprzednie regiony z pełnym niebieskim pędzeliem.  
  
-   Resetuje region przycinania do nieskończoności.  
  
-   Rysuje prostokąty wokół dwóch regionów przycinających. Używa czarnego pióra dla pierwszego regionu przycinania i czerwonego pióra dla drugiego regionu wycinka.  
  
 Wynikiem tego jest to, że tylko część wspólną dwóch regionów jest wypełniana niebieską.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#126)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#126)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#126)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClipEmpty">
      <MemberSignature Language="C#" Value="public bool IsClipEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClipEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.IsClipEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClipEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClipEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClipEmpty : bool" Usage="System.Drawing.Graphics.IsClipEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy region <see cref="T:System.Drawing.Graphics" /> wycinka jest pusty.</summary>
        <value><see langword="true" />Jeśli region <see cref="T:System.Drawing.Graphics" /> wycinka jest pusty; <see langword="false" />w przeciwnym razie.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsVisible">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wskazuje, czy punkt określony przez parę współrzędnych jest zawarty w widocznym regionie przycinania tego <see cref="T:System.Drawing.Graphics" />elementu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.Point -&gt; bool" Usage="graphics.IsVisible point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point"><see cref="T:System.Drawing.Point" />Struktura do testowania widoczności.</param>
        <summary>Wskazuje, czy określona <see cref="T:System.Drawing.Point" /> struktura jest zawarta w widocznym regionie klipu tego <see cref="T:System.Drawing.Graphics" />elementu.</summary>
        <returns><see langword="true" />Jeśli punkt określony przez <paramref name="point" /> parametr jest zawarty w widocznym regionie <see cref="T:System.Drawing.Graphics" />przycinania; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokątny region wycinka i ustawia go jako region przycinania dla obiektu graficznego formularza przy użyciu <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Tworzy dwa punkty, jeden wewnątrz obszaru przycinania i jeden zewnętrzny.  
  
-   Testuje każdy z punktów pod kątem widoczności i rysuje tylko widoczne.  
  
 Wynikiem jest jedno małe czerwone koło, które znajduje się w regionie klipu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#127)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#127)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#127)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.PointF)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (point As PointF) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::PointF point);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.PointF -&gt; bool" Usage="graphics.IsVisible point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="point"><see cref="T:System.Drawing.PointF" />Struktura do testowania widoczności.</param>
        <summary>Wskazuje, czy określona <see cref="T:System.Drawing.PointF" /> struktura jest zawarta w widocznym regionie klipu tego <see cref="T:System.Drawing.Graphics" />elementu.</summary>
        <returns><see langword="true" />Jeśli punkt określony przez <paramref name="point" /> parametr jest zawarty w widocznym regionie <see cref="T:System.Drawing.Graphics" />przycinania; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokątny region wycinka i ustawia go jako region przycinania dla grafiki formularza przy użyciu <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Tworzy dwa punkty, jeden wewnątrz obszaru przycinania i jeden zewnętrzny.  
  
-   Testuje każdy z punktów pod kątem widoczności i rysuje tylko widoczne.  
  
 Wynikiem jest jedno małe czerwone koło, które znajduje się w regionie klipu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#128)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#128)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#128)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (rect As Rectangle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.Rectangle -&gt; bool" Usage="graphics.IsVisible rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect"><see cref="T:System.Drawing.Rectangle" />Struktura do testowania widoczności.</param>
        <summary>Wskazuje, czy prostokąt określony przez <see cref="T:System.Drawing.Rectangle" /> strukturę jest zawarty w widocznym regionie <see cref="T:System.Drawing.Graphics" />klipu.</summary>
        <returns><see langword="true" />Jeśli prostokąt określony przez <paramref name="rect" /> parametr jest zawarty w widocznym regionie <see cref="T:System.Drawing.Graphics" />przycinania, <see langword="false" />w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokątny region wycinka i ustawia go jako region przycinania dla obiektu graficznego formularza przy użyciu <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Tworzy lokalizację i rozmiar dwóch prostokątów, jeden w obrębie obszaru przycinania i jeden poza.  
  
-   Testuje każdy prostokąt pod kątem widoczności i rysuje tylko widoczny.  
  
 Wynikiem jest jeden niewielki czerwony prostokąt, który znajduje się w regionie klipu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#129)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#129)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#129)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (rect As RectangleF) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.RectangleF -&gt; bool" Usage="graphics.IsVisible rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect"><see cref="T:System.Drawing.RectangleF" />Struktura do testowania widoczności.</param>
        <summary>Wskazuje, czy prostokąt określony przez <see cref="T:System.Drawing.RectangleF" /> strukturę jest zawarty w widocznym regionie <see cref="T:System.Drawing.Graphics" />klipu.</summary>
        <returns><see langword="true" />Jeśli prostokąt określony przez <paramref name="rect" /> parametr jest zawarty w widocznym regionie <see cref="T:System.Drawing.Graphics" />przycinania, <see langword="false" />w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokątny region wycinka i ustawia go jako region przycinania dla obiektu graficznego formularza przy użyciu <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Tworzy dwa prostokąty, jeden wewnątrz obszaru przycinania i jeden zewnętrzny.  
  
-   Testuje każdy prostokąt pod kątem widoczności i rysuje tylko widoczny.  
  
 Wynikiem jest jeden niewielki czerwony prostokąt, który znajduje się w regionie klipu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#130)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#130)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#130)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Integer, y As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : int * int -&gt; bool" Usage="graphics.IsVisible (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Współrzędna x punktu do przetestowania pod kątem widoczności.</param>
        <param name="y">Współrzędna y punktu do testowania widoczności.</param>
        <summary>Wskazuje, czy punkt określony przez parę współrzędnych jest zawarty w widocznym regionie przycinania tego <see cref="T:System.Drawing.Graphics" />elementu.</summary>
        <returns><see langword="true" />Jeśli <paramref name="x" /> punkt zdefiniowany przez parametry i <paramref name="y" /> jest zawarty w <see cref="T:System.Drawing.Graphics" />widocznym regionie przycinania, <see langword="false" />w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokątny region wycinka i ustawia go jako region przycinania dla obiektu graficznego formularza przy użyciu <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Tworzy dwa punkty, jeden wewnątrz obszaru przycinania i jeden zewnętrzny.  
  
-   Testuje każdy z punktów pod kątem widoczności i rysuje tylko widoczne.  
  
 Wynikiem jest jedno małe czerwone koło, które znajduje się w regionie klipu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#131)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#131)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Single, y As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(float x, float y);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : single * single -&gt; bool" Usage="graphics.IsVisible (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Współrzędna x punktu do przetestowania pod kątem widoczności.</param>
        <param name="y">Współrzędna y punktu do testowania widoczności.</param>
        <summary>Wskazuje, czy punkt określony przez parę współrzędnych jest zawarty w widocznym regionie przycinania tego <see cref="T:System.Drawing.Graphics" />elementu.</summary>
        <returns><see langword="true" />Jeśli <paramref name="x" /> punkt zdefiniowany przez parametry i <paramref name="y" /> jest zawarty w <see cref="T:System.Drawing.Graphics" />widocznym regionie przycinania, <see langword="false" />w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokątny region wycinka i ustawia go jako region przycinania dla obiektu graficznego formularza przy użyciu <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Tworzy dwa punkty, jeden wewnątrz obszaru przycinania i jeden zewnętrzny.  
  
-   Testuje każdy z punktów pod kątem widoczności i rysuje tylko widoczne.  
  
 Wynikiem jest jedno małe czerwone koło, które znajduje się w regionie klipu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#133)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#133)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#133)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Integer, y As Integer, width As Integer, height As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : int * int * int * int -&gt; bool" Usage="graphics.IsVisible (x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Współrzędna x lewego górnego rogu prostokąta, w której ma zostać przetestowana widoczność.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąta, w której ma zostać przetestowana widoczność.</param>
        <param name="width">Szerokość prostokąta, która ma zostać przetestowana pod kątem widoczności.</param>
        <param name="height">Wysokość prostokąta, która ma zostać przetestowana pod kątem widoczności.</param>
        <summary>Wskazuje, czy prostokąt określony przez parę współrzędnych, Szerokość i wysokość są zawarte w widocznym regionie <see cref="T:System.Drawing.Graphics" />klipu.</summary>
        <returns><see langword="true" />Jeśli prostokąt zdefiniowany przez <paramref name="x" />, <paramref name="y" />, <paramref name="width" />, i <paramref name="height" /> parametry <see cref="T:System.Drawing.Graphics" /> są<see langword="false" />zawarte w widocznym regionie przycinania, w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokątny region wycinka i ustawia go jako region przycinania dla obiektu graficznego formularza przy użyciu <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Tworzy lokalizację i rozmiar dwóch prostokątów, jeden w obrębie obszaru przycinania i jeden poza.  
  
-   Testuje każdy prostokąt pod kątem widoczności i rysuje tylko widoczny.  
  
 Wynikiem jest jeden niewielki czerwony prostokąt, który znajduje się w regionie klipu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#132)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#132)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#132)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Single, y As Single, width As Single, height As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : single * single * single * single -&gt; bool" Usage="graphics.IsVisible (x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Współrzędna x lewego górnego rogu prostokąta, w której ma zostać przetestowana widoczność.</param>
        <param name="y">Współrzędna y lewego górnego rogu prostokąta, w której ma zostać przetestowana widoczność.</param>
        <param name="width">Szerokość prostokąta, która ma zostać przetestowana pod kątem widoczności.</param>
        <param name="height">Wysokość prostokąta, która ma zostać przetestowana pod kątem widoczności.</param>
        <summary>Wskazuje, czy prostokąt określony przez parę współrzędnych, Szerokość i wysokość są zawarte w widocznym regionie <see cref="T:System.Drawing.Graphics" />klipu.</summary>
        <returns><see langword="true" />Jeśli prostokąt zdefiniowany przez <paramref name="x" />, <paramref name="y" />, <paramref name="width" />, i <paramref name="height" /> parametry <see cref="T:System.Drawing.Graphics" /> są<see langword="false" />zawarte w widocznym regionie przycinania, w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokątny region wycinka i ustawia go jako region przycinania dla obiektu graficznego formularza przy użyciu <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Tworzy lokalizację i rozmiar dwóch prostokątów, jeden w obrębie obszaru przycinania i jeden poza.  
  
-   Testuje każdy prostokąt pod kątem widoczności i rysuje tylko widoczny.  
  
 Wynikiem jest jeden niewielki czerwony prostokąt, który znajduje się w regionie klipu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#134)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#134)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#134)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleClipEmpty">
      <MemberSignature Language="C#" Value="public bool IsVisibleClipEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisibleClipEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.IsVisibleClipEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisibleClipEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisibleClipEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisibleClipEmpty : bool" Usage="System.Drawing.Graphics.IsVisibleClipEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy widoczny region <see cref="T:System.Drawing.Graphics" /> wycinka jest pusty.</summary>
        <value><see langword="true" />Jeśli widoczna część regionu <see cref="T:System.Drawing.Graphics" /> wycinka jest pusta; <see langword="false" />w przeciwnym razie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Widocznym regionem przycinania jest część wspólna obszaru wycinka tego `Graphics` i obszaru przycinania okna.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCharacterRanges">
      <MemberSignature Language="C#" Value="public System.Drawing.Region[] MeasureCharacterRanges (string text, System.Drawing.Font font, System.Drawing.RectangleF layoutRect, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Region[] MeasureCharacterRanges(string text, class System.Drawing.Font font, valuetype System.Drawing.RectangleF layoutRect, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Drawing::Region ^&gt; ^ MeasureCharacterRanges(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::RectangleF layoutRect, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberSignature Language="F#" Value="member this.MeasureCharacterRanges : string * System.Drawing.Font * System.Drawing.RectangleF * System.Drawing.StringFormat -&gt; System.Drawing.Region[]" Usage="graphics.MeasureCharacterRanges (text, font, layoutRect, stringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Region[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do pomiaru.</param>
        <param name="font"><see cref="T:System.Drawing.Font" />definiuje format tekstu ciągu.</param>
        <param name="layoutRect"><see cref="T:System.Drawing.RectangleF" />Struktura, która określa prostokąt układu dla ciągu.</param>
        <param name="stringFormat"><see cref="T:System.Drawing.StringFormat" />reprezentuje informacje o formatowaniu, takie jak odstępy między wierszami, dla ciągu.</param>
        <summary>Pobiera tablicę <see cref="T:System.Drawing.Region" /> obiektów, z których każdy wiąże zakres pozycji znaku w określonym ciągu.</summary>
        <returns>Ta metoda zwraca tablicę <see cref="T:System.Drawing.Region" /> obiektów, z których każdy jest powiązany z zakresem pozycji znaku w określonym ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Regiony zwrócone przez tę metodę są zależne od rozdzielczości, więc może być niewielka utrata dokładności, jeśli ciągi są zapisywane w metapliku w jednym rozpoznaniu i później odtwarzane w innej rozdzielczości.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Ustawia ciąg "pierwszy i drugi zakres" oraz czcionkę do wyświetlania ciągu ("Times New Roman", 16-punkt).  
  
-   Ustawia dwa zakresy znaków w ciągu (odpowiadające wyrazom "First" i "Second").  
  
-   Tworzy prostokąt, w którym ma być wyświetlany ciąg.  
  
-   Ustawia formatowanie ciągu 3/4, w tym dwa zakresy znaków.  
  
-   Rysuje ciąg na ekranie.  
  
-   Mierzy zakresy znaków, określa prostokąty powiązane z dwoma określonymi zakresami.  
  
-   Rysuje dwa prostokąty na ekranie.  
  
 Wynikiem jest wyświetlany ciąg z pierwszym zakresem ("pierwszy") ograniczonym czerwonym prostokątem i drugim zakresem ("drugim") ograniczonym przez niebieski prostokąt.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#135)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#135)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#135)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)" />
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MeasureString">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Mierzy określony ciąg, gdy jest rysowany z <see cref="T:System.Drawing.Font" />określonym.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do pomiaru.</param>
        <param name="font"><see cref="T:System.Drawing.Font" />definiuje format tekstu ciągu.</param>
        <summary>Mierzy określony ciąg, gdy jest rysowany z <see cref="T:System.Drawing.Font" />określonym.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.SizeF" /> strukturę reprezentującą rozmiar (w jednostkach określonych <see cref="P:System.Drawing.Graphics.PageUnit" /> przez właściwość) ciągu określonego przez <paramref name="text" /> parametr, który jest rysowany z <paramref name="font" /> parametrem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> Metoda jest przeznaczona do użycia z poszczególnymi ciągami i zawiera niewielką ilość dodatkowego miejsca przed i po ciągu, aby umożliwić zawieszanie symboli. Ponadto metoda dostosowuje punkty symboli w celu optymalizacji jakości wyświetlania i może wyświetlać węższe ciągi niż zgłoszone przez <xref:System.Drawing.Graphics.MeasureString%2A>. <xref:System.Drawing.Graphics.DrawString%2A> Aby uzyskać metryki odpowiednie dla sąsiadujących ciągów w układzie (na przykład podczas implementowania tekstu sformatowanego) <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> , użyj metody lub jednej <xref:System.Drawing.Graphics.MeasureString%2A> z metod <xref:System.Drawing.StringFormat>, które pobierają i <xref:System.Drawing.StringFormat.GenericTypographic%2A>przechodzą. Upewnij się również, <xref:System.Drawing.Graphics.TextRenderingHint%2A> że <xref:System.Drawing.Graphics> dla elementu <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>is znajduje się wartość.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg do pomiaru.  
  
-   Tworzy obiekt Font i ustawia go na czcionkę Arial (16 punktów).  
  
-   Tworzy obiekt size i używa go oraz obiekt Font do mierzenia rozmiaru ciągu.  
  
-   Rysuje czerwony prostokąt przy użyciu mierzonego rozmiaru ciągu.  
  
-   Rysuje ciąg wewnątrz rysowanego prostokąta.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#136)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#136)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#136)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" />jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Używanie czcionek i tekstu</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.SizeF -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, layoutArea)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do pomiaru.</param>
        <param name="font"><see cref="T:System.Drawing.Font" />definiuje format tekstu ciągu.</param>
        <param name="layoutArea"><see cref="T:System.Drawing.SizeF" />Struktura, która określa maksymalny obszar układu dla tekstu.</param>
        <summary>Mierzy określony ciąg, gdy jest rysowany <see cref="T:System.Drawing.Font" /> w określonym obszarze układu.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.SizeF" /> strukturę reprezentującą rozmiar (w jednostkach określonych <see cref="P:System.Drawing.Graphics.PageUnit" /> przez właściwość) ciągu określonego przez <paramref name="text" /> parametr, który jest rysowany z <paramref name="font" /> parametrem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> Metoda jest przeznaczona do użycia z poszczególnymi ciągami i zawiera niewielką ilość dodatkowego miejsca przed i po ciągu, aby umożliwić zawieszanie symboli. Ponadto metoda dostosowuje punkty symboli w celu optymalizacji jakości wyświetlania i może wyświetlać węższe ciągi niż zgłoszone przez <xref:System.Drawing.Graphics.MeasureString%2A>. <xref:System.Drawing.Graphics.DrawString%2A> Aby uzyskać metryki odpowiednie dla sąsiadujących ciągów w układzie (na przykład podczas implementowania tekstu sformatowanego) <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> , użyj metody lub jednej <xref:System.Drawing.Graphics.MeasureString%2A> z metod <xref:System.Drawing.StringFormat>, które pobierają i <xref:System.Drawing.StringFormat.GenericTypographic%2A>przechodzą. Upewnij się również, <xref:System.Drawing.Graphics.TextRenderingHint%2A> że <xref:System.Drawing.Graphics> dla elementu <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>is znajduje się wartość.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg do mierzenia i obiekt Font ustawiony na Arial (16 punktów).  
  
-   Ustawia maksymalny rozmiar układu ciągu.  
  
-   Tworzy obiekt size i używa go, obiekt Font oraz maksymalny rozmiar układu do mierzenia rozmiaru ciągu.  
  
-   Rysuje czerwony prostokąt przy użyciu mierzonego rozmiaru ciągu.  
  
-   Rysuje ciąg wewnątrz rysowanego prostokąta.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#138)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#138)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#138)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" />jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Używanie czcionek i tekstu</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, int32 width) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, int width);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * int -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, width)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="width" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do pomiaru.</param>
        <param name="font"><see cref="T:System.Drawing.Font" />definiuje format ciągu.</param>
        <param name="width">Maksymalna szerokość ciągu w pikselach.</param>
        <summary>Mierzy określony ciąg, gdy jest rysowany z <see cref="T:System.Drawing.Font" />określonym.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.SizeF" /> strukturę reprezentującą rozmiar w jednostkach określonych <see cref="P:System.Drawing.Graphics.PageUnit" /> przez właściwość ciągu określonego w <paramref name="text" /> parametrze, jak narysowany <paramref name="font" /> parametr.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametr określa maksymalną wartość składnika szerokości zwracanej <xref:System.Drawing.SizeF> struktury (<xref:System.Drawing.SizeF.Width%2A>). `width` Jeśli parametr jest krótszy niż rzeczywista szerokość ciągu, zwracany <xref:System.Drawing.SizeF.Width%2A> składnik zostanie obcięty do wartości reprezentującej maksymalną liczbę znaków, która będzie mieści się w określonej szerokości. `width` Aby pomieścić cały ciąg, zwracany <xref:System.Drawing.SizeF.Height%2A> składnik jest dostosowywany do wartości, która umożliwia wyświetlanie ciągu z zawijaniem znaków.  
  
 <xref:System.Drawing.Graphics.MeasureString%2A> Metoda jest przeznaczona do użycia z poszczególnymi ciągami i zawiera niewielką ilość dodatkowego miejsca przed i po ciągu, aby umożliwić zawieszanie symboli. Ponadto metoda dostosowuje punkty symboli w celu optymalizacji jakości wyświetlania i może wyświetlać węższe ciągi niż zgłoszone przez <xref:System.Drawing.Graphics.MeasureString%2A>. <xref:System.Drawing.Graphics.DrawString%2A> Aby uzyskać metryki odpowiednie dla sąsiadujących ciągów w układzie (na przykład podczas implementowania tekstu sformatowanego) <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> , użyj metody lub jednej <xref:System.Drawing.Graphics.MeasureString%2A> z metod <xref:System.Drawing.StringFormat>, które pobierają i <xref:System.Drawing.StringFormat.GenericTypographic%2A>przechodzą. Upewnij się również, <xref:System.Drawing.Graphics.TextRenderingHint%2A> że <xref:System.Drawing.Graphics> dla elementu <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>is znajduje się wartość.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg do mierzenia i obiekt Font ustawiony na Arial (16 punktów).  
  
-   Ustawia maksymalną szerokość ciągu.  
  
-   Tworzy obiekt size i używa go, obiektu Font oraz maksymalnej szerokości ciągu do mierzenia rozmiaru ciągu.  
  
-   Rysuje czerwony prostokąt przy użyciu mierzonego rozmiaru ciągu.  
  
-   Rysuje ciąg wewnątrz rysowanego prostokąta.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#141)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#141)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#141)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" />jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Używanie czcionek i tekstu</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.PointF origin, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.PointF origin, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::PointF origin, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.PointF * System.Drawing.StringFormat -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, origin, stringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="origin" Type="System.Drawing.PointF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do pomiaru.</param>
        <param name="font"><see cref="T:System.Drawing.Font" />definiuje format tekstu ciągu.</param>
        <param name="origin"><see cref="T:System.Drawing.PointF" />Struktura, która reprezentuje lewy górny róg ciągu.</param>
        <param name="stringFormat"><see cref="T:System.Drawing.StringFormat" />reprezentuje informacje o formatowaniu, takie jak odstępy między wierszami, dla ciągu.</param>
        <summary>Mierzy określony ciąg, gdy jest rysowany z <see cref="T:System.Drawing.Font" /> określonym i sformatowany przy użyciu <see cref="T:System.Drawing.StringFormat" />określonego.</summary>
        <returns>Ta <see cref="T:System.Drawing.SizeF" /> Metoda zwraca strukturę reprezentującą rozmiar (w jednostkach określonych <paramref name="stringFormat" /> <see cref="P:System.Drawing.Graphics.PageUnit" /> przez właściwość) ciągu określonego przez <paramref name="text" /> parametr jako rysowany <paramref name="font" /> parametrem i parametrem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> Metoda jest przeznaczona do użycia z poszczególnymi ciągami i zawiera niewielką ilość dodatkowego miejsca przed i po ciągu, aby umożliwić zawieszanie symboli. Ponadto metoda dostosowuje punkty symboli w celu optymalizacji jakości wyświetlania i może wyświetlać węższe ciągi niż zgłoszone przez <xref:System.Drawing.Graphics.MeasureString%2A>. <xref:System.Drawing.Graphics.DrawString%2A> Aby uzyskać metryki odpowiednie dla sąsiadujących ciągów w układzie (na przykład podczas implementowania tekstu sformatowanego) <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> , użyj metody lub jednej <xref:System.Drawing.Graphics.MeasureString%2A> z metod <xref:System.Drawing.StringFormat>, które pobierają i <xref:System.Drawing.StringFormat.GenericTypographic%2A>przechodzą. Upewnij się również, <xref:System.Drawing.Graphics.TextRenderingHint%2A> że <xref:System.Drawing.Graphics> dla elementu <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>is znajduje się wartość.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg do zmierzenia i obiekt Font ustawiony na czcionkę Arial (16 punktów)  
  
-   Tworzy punkt do lokalizowania lewego górnego rogu ciągu.  
  
-   Tworzy obiekt formatu ciągu i ustawia jego flagi formatu na <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  
  
-   Tworzy obiekt rozmiaru służący do mierzenia ciągu.  
  
-   Mierzy rozmiar ciągu przy użyciu ciągu, obiektu Font, punktu lokalizowania i formatu ciągu.  
  
-   Rysuje czerwony prostokąt przy użyciu punktu lokalizowania i mierzonego rozmiaru ciągu.  
  
-   Rysuje ciąg wewnątrz rysowanego prostokąta.  
  
 Wynikiem jest pionowy prostokąt obejmujący ciąg pionowy.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#137)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#137)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#137)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" />jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Używanie czcionek i tekstu</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.SizeF * System.Drawing.StringFormat -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, layoutArea, stringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do pomiaru.</param>
        <param name="font"><see cref="T:System.Drawing.Font" />definiuje format tekstu ciągu.</param>
        <param name="layoutArea"><see cref="T:System.Drawing.SizeF" />Struktura, która określa maksymalny obszar układu dla tekstu.</param>
        <param name="stringFormat"><see cref="T:System.Drawing.StringFormat" />reprezentuje informacje o formatowaniu, takie jak odstępy między wierszami, dla ciągu.</param>
        <summary>Mierzy określony ciąg, gdy jest rysowany z <see cref="T:System.Drawing.Font" /> określonym i sformatowany przy użyciu <see cref="T:System.Drawing.StringFormat" />określonego.</summary>
        <returns><see cref="T:System.Drawing.SizeF" /> Ta metoda zwraca strukturę reprezentującą rozmiar w jednostkach określonych <paramref name="stringFormat" /> <see cref="P:System.Drawing.Graphics.PageUnit" /> przez właściwość ciągu określonego w <paramref name="text" /> parametrze, jak narysowany <paramref name="font" /> parametr i parametr.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> Metoda jest przeznaczona do użycia z poszczególnymi ciągami i zawiera niewielką ilość dodatkowego miejsca przed i po ciągu, aby umożliwić zawieszanie symboli. Ponadto metoda dostosowuje punkty symboli w celu optymalizacji jakości wyświetlania i może wyświetlać węższe ciągi niż zgłoszone przez <xref:System.Drawing.Graphics.MeasureString%2A>. <xref:System.Drawing.Graphics.DrawString%2A> Aby uzyskać metryki odpowiednie dla sąsiadujących ciągów w układzie (na przykład podczas implementowania tekstu sformatowanego) <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> , użyj metody lub jednej <xref:System.Drawing.Graphics.MeasureString%2A> z metod <xref:System.Drawing.StringFormat>, które pobierają i <xref:System.Drawing.StringFormat.GenericTypographic%2A>przechodzą. Upewnij się również, <xref:System.Drawing.Graphics.TextRenderingHint%2A> że <xref:System.Drawing.Graphics> dla elementu <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>is znajduje się wartość.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg do mierzenia i obiekt Font ustawiony na Arial (16 punktów).  
  
-   Ustawia maksymalny rozmiar układu ciągu, tworząc obiekt rozmiaru w celu zmierzenia ciągu.  
  
-   Tworzy obiekt formatu ciągu i ustawia jego flagi formatu na <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  
  
-   Mierzy rozmiar ciągu przy użyciu ciągu, obiektu czcionki, maksymalnego rozmiaru układu i formatu ciągu.  
  
-   Rysuje czerwony prostokąt przy użyciu mierzonego rozmiaru ciągu.  
  
-   Rysuje ciąg wewnątrz rysowanego prostokąta.  
  
 Wynikiem jest pionowy prostokąt obejmujący ciąg pionowy.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#139)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#139)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#139)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" />jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Używanie czcionek i tekstu</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, int32 width, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, int width, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * int * System.Drawing.StringFormat -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, width, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do pomiaru.</param>
        <param name="font"><see cref="T:System.Drawing.Font" />definiuje format tekstu ciągu.</param>
        <param name="width">Maksymalna szerokość ciągu.</param>
        <param name="format"><see cref="T:System.Drawing.StringFormat" />reprezentuje informacje o formatowaniu, takie jak odstępy między wierszami, dla ciągu.</param>
        <summary>Mierzy określony ciąg, gdy jest rysowany z <see cref="T:System.Drawing.Font" /> określonym i sformatowany przy użyciu <see cref="T:System.Drawing.StringFormat" />określonego.</summary>
        <returns><see cref="T:System.Drawing.SizeF" /> Ta metoda zwraca strukturę reprezentującą rozmiar w jednostkach określonych <paramref name="stringFormat" /> <see cref="P:System.Drawing.Graphics.PageUnit" /> przez właściwość ciągu określonego w <paramref name="text" /> parametrze, jak narysowany <paramref name="font" /> parametr i parametr.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> Metoda jest przeznaczona do użycia z poszczególnymi ciągami i zawiera niewielką ilość dodatkowego miejsca przed i po ciągu, aby umożliwić zawieszanie symboli. Ponadto metoda dostosowuje punkty symboli w celu optymalizacji jakości wyświetlania i może wyświetlać węższe ciągi niż zgłoszone przez <xref:System.Drawing.Graphics.MeasureString%2A>. <xref:System.Drawing.Graphics.DrawString%2A> Aby uzyskać metryki odpowiednie dla sąsiadujących ciągów w układzie (na przykład podczas implementowania tekstu sformatowanego) <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> , użyj metody lub jednej <xref:System.Drawing.Graphics.MeasureString%2A> z metod <xref:System.Drawing.StringFormat>, które pobierają i <xref:System.Drawing.StringFormat.GenericTypographic%2A>przechodzą. Upewnij się również, <xref:System.Drawing.Graphics.TextRenderingHint%2A> że <xref:System.Drawing.Graphics> dla elementu <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>is znajduje się wartość.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg do zmierzenia i obiekt Font ustawia go na Arial (16 punktów).  
  
-   Ustawia maksymalną szerokość ciągu.  
  
-   Tworzy obiekt formatu ciągu i ustawia jego flagi formatu na <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  
  
-   Tworzy obiekt rozmiaru służący do mierzenia ciągu.  
  
-   Mierzy rozmiar ciągu przy użyciu ciągu, obiektu czcionki, maksymalnej szerokości i formatu ciągu.  
  
-   Rysuje czerwony prostokąt przy użyciu mierzonego rozmiaru ciągu.  
  
-   Rysuje ciąg wewnątrz rysowanego prostokąta.  
  
 Wynikiem jest pionowy prostokąt obejmujący ciąg pionowy.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#142)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#142)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#142)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" />jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Używanie czcionek i tekstu</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat, out int charactersFitted, out int linesFilled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea, class System.Drawing.StringFormat stringFormat, [out] int32&amp; charactersFitted, [out] int32&amp; linesFilled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat,System.Int32@,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea, System::Drawing::StringFormat ^ stringFormat, [Runtime::InteropServices::Out] int % charactersFitted, [Runtime::InteropServices::Out] int % linesFilled);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.SizeF * System.Drawing.StringFormat *  *  -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, layoutArea, stringFormat, charactersFitted, linesFilled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
        <Parameter Name="charactersFitted" Type="System.Int32" RefType="out" />
        <Parameter Name="linesFilled" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do pomiaru.</param>
        <param name="font"><see cref="T:System.Drawing.Font" />definiuje format tekstu ciągu.</param>
        <param name="layoutArea"><see cref="T:System.Drawing.SizeF" />Struktura, która określa maksymalny obszar układu dla tekstu.</param>
        <param name="stringFormat"><see cref="T:System.Drawing.StringFormat" />reprezentuje informacje o formatowaniu, takie jak odstępy między wierszami, dla ciągu.</param>
        <param name="charactersFitted">Liczba znaków w ciągu.</param>
        <param name="linesFilled">Liczba wierszy tekstu w ciągu.</param>
        <summary>Mierzy określony ciąg, gdy jest rysowany z <see cref="T:System.Drawing.Font" /> określonym i sformatowany przy użyciu <see cref="T:System.Drawing.StringFormat" />określonego.</summary>
        <returns>Ta <see cref="T:System.Drawing.SizeF" /> Metoda zwraca strukturę, która reprezentuje rozmiar ciągu, w jednostkach określonych <paramref name="stringFormat" /> <see cref="P:System.Drawing.Graphics.PageUnit" /> przez właściwość <paramref name="text" /> parametru, jak narysowany <paramref name="font" /> parametr i parametr.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> Metoda jest przeznaczona do użycia z poszczególnymi ciągami i zawiera niewielką ilość dodatkowego miejsca przed i po ciągu, aby umożliwić zawieszanie symboli. Ponadto metoda dostosowuje punkty symboli w celu optymalizacji jakości wyświetlania i może wyświetlać węższe ciągi niż zgłoszone przez <xref:System.Drawing.Graphics.MeasureString%2A>. <xref:System.Drawing.Graphics.DrawString%2A> Aby uzyskać metryki odpowiednie dla sąsiadujących ciągów w układzie (na przykład podczas implementowania tekstu sformatowanego) <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> , użyj metody lub jednej <xref:System.Drawing.Graphics.MeasureString%2A> z metod, które <xref:System.Drawing.StringFormat> pobierają <xref:System.Drawing.StringFormat.GenericTypographic%2A>i przechodzą. Upewnij się również <xref:System.Drawing.Graphics.TextRenderingHint%2A> , że <xref:System.Drawing.Graphics> dla <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>elementu is.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ciąg do zmierzenia i obiekt Font ustawiony na czcionkę Arial (16 punktów)  
  
-   Ustawia maksymalny rozmiar układu ciągu.  
  
-   Tworzy obiekt formatu ciągu i ustawia jego flagi formatu na <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  
  
-   Tworzy zmienne `charactersFitted` całkowite i `linesFilled` obiekt size do mierzenia ciągu.  
  
-   Mierzy rozmiar ciągu i określa liczbę znaków zainstalowanych i wypełnionych, przy użyciu ciągu, obiektu czcionki, maksymalnego rozmiaru układu i formatu ciągu.  
  
-   Rysuje czerwony prostokąt przy użyciu mierzonego rozmiaru ciągu.  
  
-   Rysuje ciąg wewnątrz rysowanego prostokąta.  
  
-   Rysuje wartości liczby zainstalowanych znaków i wierszy.  
  
 Wynikiem jest pionowy prostokąt obejmujący ciąg pionowy.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#140)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#140)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#140)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" />jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Używanie czcionek i tekstu</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Mnoży światową transformację <see cref="T:System.Drawing.Graphics" /> i <see cref="T:System.Drawing.Drawing2D.Matrix" />określa.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix);" />
      <MemberSignature Language="F#" Value="member this.MultiplyTransform : System.Drawing.Drawing2D.Matrix -&gt; unit" Usage="graphics.MultiplyTransform matrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">4x4 <see cref="T:System.Drawing.Drawing2D.Matrix" /> , która mnoży transformację światową.</param>
        <summary>Mnoży światową transformację <see cref="T:System.Drawing.Graphics" /> i <see cref="T:System.Drawing.Drawing2D.Matrix" />określa.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda dołącza macierz określoną przez `matrix` parametr, tak aby wynik był `matrix` transformację x świata.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   `transformMatrix` Tworzy macierz (dwie dwa za pomocą macierzy tożsamości oraz wektora translacji zero).  
  
-   Tłumaczy macierz transformacji przez wektor (200, 100).  
  
-   Powoduje obrócenie światowej macierzy transformacji w formularzu systemu Windows o 30 stopni, dołącza macierz rotacji do 30 stopni do macierzy transformacji formularza.  
  
-   Mnoży obróconą światową macierz transformację przez przetłumaczoną `transformMatrix`i dołącza `transformMatrix` do światowej macierzy transformacji.  
  
-   Rysuje obróconą, przetłumaczoną elipsę.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#143)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#143)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#143)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/0659fe00-9e0c-41c4-9118-016f2404c905">Macierzowe przedstawienie transformacji</related>
      </Docs>
    </Member>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.MultiplyTransform : System.Drawing.Drawing2D.Matrix * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.MultiplyTransform (matrix, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="matrix">4x4 <see cref="T:System.Drawing.Drawing2D.Matrix" /> , która mnoży transformację światową.</param>
        <param name="order"><see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> Składowa wyliczenia, która określa kolejność mnożenia.</param>
        <summary>Mnoży światową transformację tego <see cref="T:System.Drawing.Graphics" /> i <see cref="T:System.Drawing.Drawing2D.Matrix" /> określono w określonej kolejności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `matrix` Wartość <xref:System.Drawing.Drawing2D.MatrixOrder.Prepend> parametruokreśla,żekolejnośćmnożeniatox`order` World transformacje. Wartość <xref:System.Drawing.Drawing2D.MatrixOrder.Append> `matrix`parametru `order` określa, że kolejność mnożenia to transformacja na świecie x.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   `transformMatrix` Tworzy macierz (dwie dwa za pomocą macierzy tożsamości oraz wektora translacji zero).  
  
-   Tłumaczy macierz transformacji przez wektor (200, 100).  
  
-   Umożliwia obrócenie światowej macierzy transformacji w formularzu systemu Windows o 30 stopni, w zależności od tego, czy macierz rotacji ma 30 stopni do macierzy transformacji formularza.  
  
-   Mnoży obróconą tablicę transformacji światowej przez przetłumaczoną `transformMatrix`, dołączając `transformMatrix` do światowej macierzy transformacji.  
  
-   Rysuje obróconą, przetłumaczoną elipsę.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#144)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#144)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#144)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/0659fe00-9e0c-41c4-9118-016f2404c905">Macierzowe przedstawienie transformacji</related>
      </Docs>
    </Member>
    <Member MemberName="PageScale">
      <MemberSignature Language="C#" Value="public float PageScale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 PageScale" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PageScale" />
      <MemberSignature Language="VB.NET" Value="Public Property PageScale As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float PageScale { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.PageScale : single with get, set" Usage="System.Drawing.Graphics.PageScale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia skalowanie między jednostkami świata a jednostkami <see cref="T:System.Drawing.Graphics" />strony.</summary>
        <value>Ta właściwość określa wartość skalowania między jednostkami świata a jednostkami <see cref="T:System.Drawing.Graphics" />strony.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje, jak za pomocą <xref:System.Drawing.Graphics.PageScale%2A> elementów i <xref:System.Drawing.Graphics.TranslateTransform%2A> zmienić skalę i początek podczas rysowania prostokąta.  
  
 Ten przykład jest przeznaczony do użycia z Windows Forms. Wklej kod do formularza i Wywołaj `ChangePageScaleAndTranslateTransform` metodę podczas obsługi <xref:System.Windows.Forms.Control.Paint> zdarzenia formularza, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.GraphicsProperties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#2)]
 [!code-vb[System.Drawing.GraphicsProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c61ff50a-eb1d-4e6c-83cd-f7e9764cfa9f">Typy systemów współrzędnych</related>
      </Docs>
    </Member>
    <Member MemberName="PageUnit">
      <MemberSignature Language="C#" Value="public System.Drawing.GraphicsUnit PageUnit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.GraphicsUnit PageUnit" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PageUnit" />
      <MemberSignature Language="VB.NET" Value="Public Property PageUnit As GraphicsUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::GraphicsUnit PageUnit { System::Drawing::GraphicsUnit get(); void set(System::Drawing::GraphicsUnit value); };" />
      <MemberSignature Language="F#" Value="member this.PageUnit : System.Drawing.GraphicsUnit with get, set" Usage="System.Drawing.Graphics.PageUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.GraphicsUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia jednostkę miary używaną dla współrzędnych strony w <see cref="T:System.Drawing.Graphics" />tym elemencie.</summary>
        <value>Jedna z <see cref="T:System.Drawing.GraphicsUnit" /> wartości innych niż <see cref="F:System.Drawing.GraphicsUnit.World" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jednostka grafiki jest jednostką miary używaną dla współrzędnych <xref:System.Drawing.Graphics>strony.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje efekt zmiany <xref:System.Drawing.Graphics.PageUnit%2A> właściwości.  
  
 Ten przykład jest przeznaczony do użycia z Windows Forms. Wklej kod do formularza i Wywołaj `ChangePageUnit` metodę podczas obsługi <xref:System.Windows.Forms.Control.Paint> zdarzenia formularza, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.GraphicsProperties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#3)]
 [!code-vb[System.Drawing.GraphicsProperties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="P:System.Drawing.Graphics.PageUnit" />jest ustawiona na <see cref="F:System.Drawing.GraphicsUnit.World" />, która nie jest jednostką fizyczną.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c61ff50a-eb1d-4e6c-83cd-f7e9764cfa9f">Typy systemów współrzędnych</related>
      </Docs>
    </Member>
    <Member MemberName="PixelOffsetMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PixelOffsetMode" />
      <MemberSignature Language="VB.NET" Value="Public Property PixelOffsetMode As PixelOffsetMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::PixelOffsetMode PixelOffsetMode { System::Drawing::Drawing2D::PixelOffsetMode get(); void set(System::Drawing::Drawing2D::PixelOffsetMode value); };" />
      <MemberSignature Language="F#" Value="member this.PixelOffsetMode : System.Drawing.Drawing2D.PixelOffsetMode with get, set" Usage="System.Drawing.Graphics.PixelOffsetMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.PixelOffsetMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą sposób przesunięcia pikseli podczas renderowania tego <see cref="T:System.Drawing.Graphics" />elementu.</summary>
        <value>Ta właściwość określa element członkowski <see cref="T:System.Drawing.Drawing2D.PixelOffsetMode" /> wyliczenia</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość umożliwia określenie wyższej jakości, wolniejszego renderowania lub niższej jakości i szybsze renderowanie zawartości tego <xref:System.Drawing.Graphics> obiektu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReleaseHdc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwalnia dojście kontekstu urządzenia uzyskane przez poprzednie wywołanie <see cref="M:System.Drawing.Graphics.GetHdc" /> metody. <see cref="T:System.Drawing.Graphics" /></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReleaseHdc">
      <MemberSignature Language="C#" Value="public void ReleaseHdc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHdc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdc" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdc ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHdc();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHdc : unit -&gt; unit&#xA;override this.ReleaseHdc : unit -&gt; unit" Usage="graphics.ReleaseHdc " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Drawing.IDeviceContext.ReleaseHdc</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia dojście kontekstu urządzenia uzyskane przez poprzednie wywołanie <see cref="M:System.Drawing.Graphics.GetHdc" /> metody. <see cref="T:System.Drawing.Graphics" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.GetHdc%2A>i <xref:System.Drawing.Graphics.ReleaseHdc%2A> są dwie metody, które umożliwiają pobieranie i wydawanie uchwytu dla urządzenia z systemem Windows. Zawsze należy śledzić wywołanie <xref:System.Drawing.Graphics.GetHdc%2A> z <xref:System.Drawing.Graphics.ReleaseHdc%2A> wywołaniem po zakończeniu dojścia systemu Windows.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">w celu uzyskania dostępu do kodu niezarządzanego. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <altmember cref="T:System.Drawing.IDeviceContext" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHdc">
      <MemberSignature Language="C#" Value="public void ReleaseHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdc(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdc (hdc As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseHdc(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="member this.ReleaseHdc : nativeint -&gt; unit" Usage="graphics.ReleaseHdc hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Dojście do kontekstu urządzenia uzyskanego przez poprzednie wywołanie <see cref="M:System.Drawing.Graphics.GetHdc" /> metody. <see cref="T:System.Drawing.Graphics" /></param>
        <summary>Zwalnia dojście kontekstu urządzenia uzyskane przez poprzednie wywołanie <see cref="M:System.Drawing.Graphics.GetHdc" /> metody. <see cref="T:System.Drawing.Graphics" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kontekst urządzenia to struktura systemu Windows oparta na [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] , która definiuje zestaw obiektów graficznych i skojarzonych z nimi atrybutów, a także tryby graficzne, które mają wpływ na dane wyjściowe.  
  
 Wywołania metod <xref:System.Drawing.Graphics.ReleaseHdc%2A> i muszą występować w parach. <xref:System.Drawing.Graphics.GetHdc%2A> W zakresie <xref:System.Drawing.Graphics.GetHdc%2A> pary metod i <xref:System.Drawing.Graphics.ReleaseHdc%2A> metoda zazwyczaj wywołuje się tylko do [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] funkcji. Wywołania w tym zakresie wykonane do [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] metod <xref:System.Drawing.Graphics> , które wygenerowały `hdc` parametr, kończą się `ObjectBusy` niepowodzeniem z powodu błędu. Ponadto program [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] ignoruje wszelkie zmiany stanu wprowadzone <xref:System.Drawing.Graphics> do `hdc` parametru w kolejnych operacjach.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Przykład ilustruje wywołanie funkcji systemu Windows [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] w celu wykonania tego samego zadania [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> jako metody. Kod wykonuje następujące czynności:  
  
-   Definiuje atrybut współdziałania <xref:System.Runtime.InteropServices.DllImportAttribute> dla pliku DLL systemu Windows GDI32. dll. Ta biblioteka DLL zawiera żądaną [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] funkcję i <xref:System.Drawing.Rectangle> definiuje funkcję w tej bibliotece DLL jako zewnętrzną.  
  
-   Tworzy czerwone pióro.  
  
-   Za pomocą pióra rysuje prostokąt na ekranie przy użyciu [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics.DrawRectangle%2A> metody.  
  
-   Definiuje wewnętrzną zmienną `hdc` typu wskaźnika i ustawia jej wartość na dojście do kontekstu urządzenia w formularzu.  
  
-   Rysuje prostokąt na ekranie przy użyciu [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <xref:System.Drawing.Rectangle> funkcji.  
  
-   Zwalnia kontekst urządzenia reprezentowanego przez `hdc` parametr.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#145)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#145)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#145)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">w celu uzyskania dostępu do kodu niezarządzanego. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="ReleaseHdcInternal">
      <MemberSignature Language="C#" Value="public void ReleaseHdcInternal (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseHdcInternal(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdcInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdcInternal (hdc As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseHdcInternal(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="member this.ReleaseHdcInternal : nativeint -&gt; unit" Usage="graphics.ReleaseHdcInternal hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Dojście do kontekstu urządzenia.</param>
        <summary>Zwalnia dojście do kontekstu urządzenia.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">w celu uzyskania dostępu do kodu niezarządzanego. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="RenderingOrigin">
      <MemberSignature Language="C#" Value="public System.Drawing.Point RenderingOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point RenderingOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.RenderingOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderingOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point RenderingOrigin { System::Drawing::Point get(); void set(System::Drawing::Point value); };" />
      <MemberSignature Language="F#" Value="member this.RenderingOrigin : System.Drawing.Point with get, set" Usage="System.Drawing.Graphics.RenderingOrigin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia pochodzenie renderowania dla tego <see cref="T:System.Drawing.Graphics" /> ustawienia dla symulowania i pędzli kreskowych.</summary>
        <value><see cref="T:System.Drawing.Point" /> Struktura, która reprezentuje pochodzenie symulacji dla 8-bitów na piksel i 16-bitów na piksel i służy również do ustawiania źródła dla pędzli kreskowego.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetClip">
      <MemberSignature Language="C#" Value="public void ResetClip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetClip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ResetClip" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetClip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetClip();" />
      <MemberSignature Language="F#" Value="member this.ResetClip : unit -&gt; unit" Usage="graphics.ResetClip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resetuje region <see cref="T:System.Drawing.Graphics" /> przycinania do nieskończonego regionu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy region wycinka elementu <xref:System.Drawing.Graphics> jest nieskończony, elementy, które te <xref:System.Drawing.Graphics> rysowania nie są przycinane.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokąt z górnym lewym górnym rogu w (0, 0) i ustawia region przycinania do tego prostokąta.  
  
-   Tworzy drugi prostokąt z górnym lewym górnym rogu w (100, 100) i ustawia region przycinania na część wspólną tego prostokąta i bieżący region przycinania (pierwszy prostokąt).  
  
-   Wypełnia duży prostokąt obejmujący poprzednie prostokąty z wypełnionym niebieskim pędzeliem.  
  
-   Resetuje region przycinania do nieskończoności.  
  
-   Rysuje prostokąty wokół dwóch regionów przycinających; używa czarnego pióra dla pierwszego prostokąta wycinka i czerwonego pióra dla drugiego regionu wycinka.  
  
 Wynikiem jest to, że tylko przecięcie z dwóch prostokątów jest wypełnione niebieską.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#146)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#146)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#146)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetTransform">
      <MemberSignature Language="C#" Value="public void ResetTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetTransform() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ResetTransform" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetTransform ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetTransform();" />
      <MemberSignature Language="F#" Value="member this.ResetTransform : unit -&gt; unit" Usage="graphics.ResetTransform " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resetuje światową macierz <see cref="T:System.Drawing.Graphics" /> transformację do macierzy tożsamości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Macierz tożsamości reprezentuje transformację bez skalowania, obrotu ani tłumaczenia. Zresetowanie światowej transformacji tego <xref:System.Drawing.Graphics> elementu do macierzy tożsamości oznacza, że jej transformacja świata nie zmienia geometrii elementów przekształconych.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tłumaczy światową transformację formularza systemu Windows przy użyciu wektora (100, 0).  
  
-   Zapisuje stan grafiki formularza.  
  
-   Resetuje światową transformację formularza do tożsamości i wypełnia prostokąt przy użyciu pełnego czerwonego pędzla.  
  
-   Przywraca stan przetłumaczonej grafiki i wypełnia prostokąt przy użyciu pełnego niebieskiego pędzla.  
  
 Wynik jest nieprzetłumaczonym prostokątem wypełnionym czerwonym i przetłumaczonym prostokątem wypełnionym niebiesko.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#147)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#147)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#147)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Restore">
      <MemberSignature Language="C#" Value="public void Restore (System.Drawing.Drawing2D.GraphicsState gstate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restore(class System.Drawing.Drawing2D.GraphicsState gstate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Restore (gstate As GraphicsState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Restore(System::Drawing::Drawing2D::GraphicsState ^ gstate);" />
      <MemberSignature Language="F#" Value="member this.Restore : System.Drawing.Drawing2D.GraphicsState -&gt; unit" Usage="graphics.Restore gstate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gstate" Type="System.Drawing.Drawing2D.GraphicsState" />
      </Parameters>
      <Docs>
        <param name="gstate"><see cref="T:System.Drawing.Drawing2D.GraphicsState" />reprezentuje stan, do którego ma zostać przywrócony <see cref="T:System.Drawing.Graphics" />.</param>
        <summary>Przywraca stan tej <see cref="T:System.Drawing.Graphics" /> operacji do stanu reprezentowanego <see cref="T:System.Drawing.Drawing2D.GraphicsState" />przez.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po wywołaniu <xref:System.Drawing.Graphics.Save%2A> metody <xref:System.Drawing.Graphics>obiektu, blok informacji, który <xref:System.Drawing.Graphics> posiada stan jest umieszczony na stosie. <xref:System.Drawing.Graphics.Save%2A> Metoda zwracametodę,<xref:System.Drawing.Drawing2D.GraphicsState> która identyfikuje blok informacji. Gdy przekazujesz identyfikację <xref:System.Drawing.Drawing2D.GraphicsState> <xref:System.Drawing.Graphics.Restore%2A> do metody, blok informacji jest usuwany ze stosu i służy do przywracania <xref:System.Drawing.Graphics> do stanu, w którym był w momencie <xref:System.Drawing.Graphics.Save%2A> wywołania metody. Zwróć uwagę, <xref:System.Drawing.Drawing2D.GraphicsState> że zwrócone przez wywołanie <xref:System.Drawing.Graphics.Save%2A> metody można `Restore` przesłać tylko raz do metody.  
  
 Wywołania metody mogą być zagnieżdżane; oznacza to, że można <xref:System.Drawing.Graphics.Save%2A> wywołać metodę kilka <xref:System.Drawing.Graphics.Restore%2A> razy przed wywołaniem metody. <xref:System.Drawing.Graphics.Save%2A> Za każdym razem, gdy <xref:System.Drawing.Graphics.Save%2A> wywoływana jest metoda, blok informacji jest umieszczany na stosie i otrzymujesz dla bloku informacji. <xref:System.Drawing.Drawing2D.GraphicsState> Po przejściu jednego <xref:System.Drawing.Graphics.Restore%2A> z tych obiektów do metody <xref:System.Drawing.Graphics> jest on zwracany do stanu, w którym był w czasie <xref:System.Drawing.Graphics.Save%2A> wywołania metody, które zwróciło określone <xref:System.Drawing.Drawing2D.GraphicsState>. Blok informacji umieszczony na stosie przez to <xref:System.Drawing.Graphics.Save%2A> wywołanie metody jest usuwany ze stosu, a wszystkie bloki informacji umieszczane na stosie po tym <xref:System.Drawing.Graphics.Save%2A> wywołaniu metody również zostaną usunięte.  
  
 Wywołania metody umieszczają bloki informacji w tym samym stosie co wywołania <xref:System.Drawing.Graphics.Save%2A> metody. <xref:System.Drawing.Graphics.BeginContainer%2A> Podobnie jak <xref:System.Drawing.Graphics.Restore%2A> wywołanie jest sparowane <xref:System.Drawing.Graphics.Save%2A> z wywołaniem, <xref:System.Drawing.Graphics.EndContainer%2A> wywołanie metody jest sparowane z <xref:System.Drawing.Graphics.BeginContainer%2A> wywołaniem metody.  
  
 Po wywołaniu <xref:System.Drawing.Graphics.Restore%2A> metody wszystkie bloki informacji umieszczane na stosie ( <xref:System.Drawing.Graphics.Save%2A> przez metodę lub przez <xref:System.Drawing.Graphics.BeginContainer%2A> <xref:System.Drawing.Graphics.Save%2A> metodę) po odpowiednim wywołaniu metody są usuwane ze stosu. Podobnie po wywołaniu <xref:System.Drawing.Graphics.EndContainer%2A> metody wszystkie bloki informacji umieszczane na stosie ( <xref:System.Drawing.Graphics.Save%2A> przez metodę lub przez <xref:System.Drawing.Graphics.BeginContainer%2A> <xref:System.Drawing.Graphics.BeginContainer%2A> metodę) po odpowiednim wywołaniu metody są usuwane ze stosu.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tłumaczy światową transformację formularza systemu Windows przy użyciu wektora (100, 0).  
  
-   Zapisuje stan grafiki formularza.  
  
-   Resetuje światową transformację formularza do tożsamości i wypełnia prostokąt przy użyciu pełnego czerwonego pędzla.  
  
-   Przywraca stan przetłumaczonej grafiki i wypełnia drugi prostokąt przy użyciu pełnego niebieskiego pędzla.  
  
 Wynik jest nieprzetłumaczonym prostokątem wypełnionym czerwonym i przetłumaczonym prostokątem wypełnionym niebiesko.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#148)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#148)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#148)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RotateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Stosuje określony obrót do macierzy transformacji tego <see cref="T:System.Drawing.Graphics" />elementu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.RotateTransform(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle);" />
      <MemberSignature Language="F#" Value="member this.RotateTransform : single -&gt; unit" Usage="graphics.RotateTransform angle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="angle">Kąt obrotu (w stopniach).</param>
        <summary>Stosuje określony obrót do macierzy transformacji tego <see cref="T:System.Drawing.Graphics" />elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacja obrotu polega na pomnożeniu macierzy transformacji przez macierz, której elementy pochodzą z `angle` parametru. Ta metoda stosuje obrót, w oczekiwany sposób, do macierzy transformacji.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tłumaczy światową macierz transformacji w formularzu systemu Windows przez wektor (100, 0).  
  
-   Obraca transformację światową o kąt 30 stopni, w zależności od macierzy rotacji do światowej macierzy transformacji.  
  
-   Rysuje obróconą, przetłumaczoną elipsę przy użyciu niebieskiego pióra.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#149)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#149)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#149)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.RotateTransform : single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.RotateTransform (angle, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="angle">Kąt obrotu (w stopniach).</param>
        <param name="order"><see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> Składowa wyliczenia, która określa, czy rotacja jest dołączana do przekształcenia macierzy.</param>
        <summary>Stosuje określony obrót do macierzy <see cref="T:System.Drawing.Graphics" /> transformacji w określonej kolejności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacja obrotu polega na pomnożeniu macierzy transformacji przez macierz, której elementy pochodzą z `angle` parametru. Ta metoda dołącza lub dołącza macierz <xref:System.Drawing.Graphics> transformacji przez macierz obrotu zgodnie `order` z parametrem.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tłumaczy światową macierz transformacji w formularzu systemu Windows przez wektor (100, 0).  
  
-   Obraca światową transformację o kąt 30 stopni, dołączając macierz obrotu do światowej macierzy transformacji z <xref:System.Drawing.Drawing2D.MatrixOrder.Append>.  
  
-   Rysuje przetłumaczoną, obróconą elipsę za pomocą niebieskiego pióra.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#150)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#150)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#150)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsState Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsState Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Save" />
      <MemberSignature Language="VB.NET" Value="Public Function Save () As GraphicsState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsState ^ Save();" />
      <MemberSignature Language="F#" Value="member this.Save : unit -&gt; System.Drawing.Drawing2D.GraphicsState" Usage="graphics.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje bieżący stan tego <see cref="T:System.Drawing.Graphics" /> i identyfikuje zapisany stan <see cref="T:System.Drawing.Drawing2D.GraphicsState" />przy użyciu.</summary>
        <returns>Ta metoda zwraca <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> wartość, która reprezentuje zapisany stan <see cref="T:System.Drawing.Graphics" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po wywołaniu <xref:System.Drawing.Graphics.Save%2A> metody <xref:System.Drawing.Graphics>obiektu, blok informacji, który <xref:System.Drawing.Graphics> posiada stan jest umieszczony na stosie. <xref:System.Drawing.Graphics.Save%2A> Metoda zwracametodę,<xref:System.Drawing.Drawing2D.GraphicsState> która identyfikuje blok informacji. Gdy przekazujesz identyfikację <xref:System.Drawing.Drawing2D.GraphicsState> <xref:System.Drawing.Graphics.Restore%2A> do metody, blok informacji jest usuwany ze stosu i służy do przywracania <xref:System.Drawing.Graphics> do stanu, w którym był w momencie <xref:System.Drawing.Graphics.Save%2A> wywołania metody. Zwróć uwagę, <xref:System.Drawing.Drawing2D.GraphicsState> że zwrócone przez wywołanie <xref:System.Drawing.Graphics.Save%2A> metody można <xref:System.Drawing.Graphics.Restore%2A> przesłać tylko raz do metody.  
  
 Wywołania metody mogą być zagnieżdżane; oznacza to, że można <xref:System.Drawing.Graphics.Save%2A> wywołać metodę kilka <xref:System.Drawing.Graphics.Restore%2A> razy przed wywołaniem metody. <xref:System.Drawing.Graphics.Save%2A> Za każdym razem, gdy <xref:System.Drawing.Graphics.Save%2A> wywoływana jest metoda, blok informacji jest umieszczany na stosie i otrzymujesz dla bloku informacji. <xref:System.Drawing.Drawing2D.GraphicsState> Po przejściu jednego <xref:System.Drawing.Graphics.Restore%2A> z tych obiektów do metody <xref:System.Drawing.Graphics> jest on zwracany do stanu, w którym był w czasie <xref:System.Drawing.Graphics.Save%2A> wywołania metody, które zwróciło określone <xref:System.Drawing.Drawing2D.GraphicsState>. Blok informacji umieszczony na stosie przez to <xref:System.Drawing.Graphics.Save%2A> wywołanie metody jest usuwany ze stosu, a wszystkie bloki informacji umieszczane na stosie po tym <xref:System.Drawing.Graphics.Save%2A> wywołaniu metody również zostaną usunięte.  
  
 Wywołania metody umieszczają bloki informacji w tym samym stosie co wywołania <xref:System.Drawing.Graphics.Save%2A> metody. <xref:System.Drawing.Graphics.BeginContainer%2A> Podobnie jak <xref:System.Drawing.Graphics.Restore%2A> wywołanie jest sparowane <xref:System.Drawing.Graphics.Save%2A> z wywołaniem, <xref:System.Drawing.Graphics.EndContainer%2A> wywołanie metody jest sparowane z <xref:System.Drawing.Graphics.BeginContainer%2A> wywołaniem metody.  
  
 Po wywołaniu <xref:System.Drawing.Graphics.Restore%2A> metody wszystkie bloki informacji umieszczane na stosie ( <xref:System.Drawing.Graphics.Save%2A> przez metodę lub przez <xref:System.Drawing.Graphics.BeginContainer%2A> <xref:System.Drawing.Graphics.Save%2A> metodę) po odpowiednim wywołaniu metody są usuwane ze stosu. Podobnie po wywołaniu <xref:System.Drawing.Graphics.EndContainer%2A> metody wszystkie bloki informacji umieszczane na stosie ( <xref:System.Drawing.Graphics.Save%2A> przez metodę lub przez <xref:System.Drawing.Graphics.BeginContainer%2A> <xref:System.Drawing.Graphics.BeginContainer%2A> metodę) po odpowiednim wywołaniu metody są usuwane ze stosu.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tłumaczy światową transformację formularza systemu Windows przy użyciu wektora (100, 0).  
  
-   Zapisuje stan grafiki formularza.  
  
-   Resetuje światową transformację formularza do tożsamości (macierz tożsamości 2x2 oraz tłumaczenie o wartości zero-Vector) i wypełnia prostokąt przy użyciu pełnego czerwonego pędzla.  
  
-   Przywraca stan przetłumaczonej grafiki i wypełnia prostokąt przy użyciu pełnego niebieskiego pędzla.  
  
 Wynikiem jest nieprzetłumaczony czerwony prostokąt z lewej strony i przetłumaczony niebieski prostokąt z prawej strony formularza.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#151)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#151)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#151)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScaleTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Stosuje określoną operację skalowania do macierzy transformacji tego <see cref="T:System.Drawing.Graphics" /> elementu, w zależności od tego do tablicy transformacji obiektu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ScaleTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy);" />
      <MemberSignature Language="F#" Value="member this.ScaleTransform : single * single -&gt; unit" Usage="graphics.ScaleTransform (sx, sy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">Współczynnik skalowania w kierunku x.</param>
        <param name="sy">Współczynnik skalowania w kierunku y.</param>
        <summary>Stosuje określoną operację skalowania do macierzy transformacji tego <see cref="T:System.Drawing.Graphics" /> elementu, w zależności od tego do tablicy transformacji obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacja skalowania składa się z mnożenia macierzy transformacji przez macierz ukośną, której elementy to`sx`( `sy`,, 1). Ta metoda dołącza macierz <xref:System.Drawing.Graphics> transformacji przez macierz skalowania.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Umożliwia obrócenie światowej macierzy transformacji w formularzu systemu Windows o 30 stopni.  
  
-   Skaluje tę macierz według współczynnika 3 w kierunku x i współczynnika 1 w kierunku y, w zależności od przekształceń skalowania.  
  
-   Rysuje prostokąt skalowany, obrócony z niebieskim piórem.  
  
 Wynik jest nadal prostokątny.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#152)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#152)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#152)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.ScaleTransform : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.ScaleTransform (sx, sy, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="sx">Współczynnik skalowania w kierunku x.</param>
        <param name="sy">Współczynnik skalowania w kierunku y.</param>
        <param name="order"><see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> Składowa wyliczenia, która określa, czy operacja skalowania jest dołączana, czy dołączona do macierzy transformacji.</param>
        <summary>Stosuje określoną operację skalowania do macierzy <see cref="T:System.Drawing.Graphics" /> transformacji w określonej kolejności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacja skalowania składa się z mnożenia macierzy transformacji przez macierz ukośną, której elementy to`sx`( `sy`,, 1). Ta metoda dołącza lub dołącza macierz <xref:System.Drawing.Graphics> transformacji przez macierz skalowania zgodnie `order` z parametrem.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Umożliwia obrócenie światowej macierzy transformacji w formularzu systemu Windows o 30 stopni.  
  
-   Skaluje tę macierz według współczynnika 3 w kierunku x i współczynnika 1 w kierunku y, dołączając przekształcenie <xref:System.Drawing.Drawing2D.MatrixOrder.Append> skalowania do elementu członkowskiego.  
  
-   Rysuje obrócony prostokąt skalowany przy użyciu niebieskiego pióra.  
  
 Wynikiem jest równoległobok.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#153)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#153)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#153)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ustawia region przycinania tego <see cref="T:System.Drawing.Graphics" /> elementu <see langword="Clip" /> na właściwość określonego <see cref="T:System.Drawing.Graphics" />elementu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (path As GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Drawing2D.GraphicsPath -&gt; unit" Usage="graphics.SetClip path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />reprezentuje nowy region klipu.</param>
        <summary>Ustawia region przycinania tego <see cref="T:System.Drawing.Graphics" /> elementu na określony. <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ścieżka graficzna reprezentowana przez `path` parametr nie jest ZAMKNIĘTA, dodatkowy segment jest dodawany od ostatniego punktu do pierwszego punktu, aby zamknąć ścieżkę.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ścieżkę grafiki i dodaje elipsę do ścieżki.  
  
-   Ustawia region przycinania do ścieżki eliptycznej.  
  
-   Wypełnia duży prostokąt przy użyciu pełnego czarnego pędzla.  
  
 Wynikiem jest wypełniona, czarna Elipsa.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#154)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#154)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#154)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Graphics g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Graphics g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Graphics)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (g As Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Graphics ^ g);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Graphics -&gt; unit" Usage="graphics.SetClip g" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="g"><see cref="T:System.Drawing.Graphics" />z którego ma zostać prześwietlona Nowa region klipu.</param>
        <summary>Ustawia region przycinania tego <see cref="T:System.Drawing.Graphics" /> elementu <see langword="Clip" /> na właściwość określonego <see cref="T:System.Drawing.Graphics" />elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms <xref:System.Windows.Forms.PaintEventArgs>i wymaga `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi <xref:System.Windows.Forms.Form> zdarzeń, a także `thisForm`dla przykładu. Kod wykonuje następujące czynności:  
  
-   Tworzy tymczasowy <xref:System.Drawing.Graphics> na `thisForm` podstawie zprzykładu.<xref:System.Windows.Forms.Form>  
  
-   Ustawia region przycinania tymczasowego <xref:System.Drawing.Graphics> na mały kwadrat.  
  
-   Aktualizuje region przycinania obiektu graficznego formularza do tego, który jest tymczasowy <xref:System.Drawing.Graphics>.  
  
-   Wypełnia duży prostokąt przy użyciu pełnego czarnego pędzla.  
  
 Wynikiem jest mały, wypełniony, czarny kwadrat.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#156)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#156)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#156)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Rectangle -&gt; unit" Usage="graphics.SetClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect"><see cref="T:System.Drawing.Rectangle" />Struktura, która reprezentuje nowy region klipu.</param>
        <summary>Ustawia region przycinania tego <see cref="T:System.Drawing.Graphics" /> elementu w prostokąt określony <see cref="T:System.Drawing.Rectangle" /> przez strukturę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy mały prostokąt dla regionu przycinania.  
  
-   Ustawia region przycinania do prostokąta.  
  
-   Wypełnia duży prostokąt przy użyciu pełnego czarnego pędzla.  
  
 Wynikiem jest mały, wypełniony, czarny prostokąt.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#158)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#158)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#158)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (rect As RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.RectangleF -&gt; unit" Usage="graphics.SetClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect"><see cref="T:System.Drawing.RectangleF" />Struktura, która reprezentuje nowy region klipu.</param>
        <summary>Ustawia region przycinania tego <see cref="T:System.Drawing.Graphics" /> elementu w prostokąt określony <see cref="T:System.Drawing.RectangleF" /> przez strukturę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy mały prostokąt dla regionu przycinania.  
  
-   Ustawia region przycinania do prostokąta.  
  
-   Wypełnia duży prostokąt przy użyciu pełnego czarnego pędzla.  
  
 Wynikiem jest mały, wypełniony, czarny prostokąt.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#160)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#160)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#160)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Drawing2D.GraphicsPath path, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Drawing2D.GraphicsPath path, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Drawing2D::GraphicsPath ^ path, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Drawing2D.GraphicsPath * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (path, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />do łączenia.</param>
        <param name="combineMode"><see cref="T:System.Drawing.Drawing2D.CombineMode" /> Składowa wyliczenia, która określa operację łączenia do użycia.</param>
        <summary>Ustawia region wycinka tego <see cref="T:System.Drawing.Graphics" /> elementu na wynik określonej operacji łączącej bieżący region klipu i określony. <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ścieżka graficzna reprezentowana przez `path` parametr nie jest ZAMKNIĘTA, dodatkowy segment jest dodawany od ostatniego punktu do pierwszego punktu, aby zamknąć ścieżkę.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy ścieżkę grafiki i dodaje elipsę do ścieżki.  
  
-   Ustawia region przycinania na ścieżkę <xref:System.Drawing.Drawing2D.CombineMode.Replace> eliptycznego elementu członkowskiego.  
  
-   Wypełnia duży prostokąt przy użyciu pełnego czarnego pędzla.  
  
 Wynikiem jest wypełniona, czarna Elipsa.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#155)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#155)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#155)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Graphics g, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Graphics g, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Graphics,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Graphics ^ g, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Graphics * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (g, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="g"><see cref="T:System.Drawing.Graphics" />określa region klipu do połączenia.</param>
        <param name="combineMode"><see cref="T:System.Drawing.Drawing2D.CombineMode" /> Składowa wyliczenia, która określa operację łączenia do użycia.</param>
        <summary>Ustawia region wycinka tego <see cref="T:System.Drawing.Graphics" /> elementu na wynik określonej operacji łączenia bieżącego regionu klipu <see cref="P:System.Drawing.Graphics.Clip" /> i właściwości określonej <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms <xref:System.Windows.Forms.PaintEventArgs>i wymaga `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi <xref:System.Windows.Forms.Form> zdarzeń, a także `thisForm`dla przykładu. Kod wykonuje następujące czynności:  
  
-   Tworzy tymczasowy <xref:System.Drawing.Graphics> na `thisForm` podstawie zprzykładu.<xref:System.Windows.Forms.Form>  
  
-   Ustawia region przycinania tymczasowego <xref:System.Drawing.Graphics> na mały kwadrat.  
  
-   Aktualizuje region wycinka obiektu graficznego formularza do nowego <xref:System.Drawing.Graphics> <xref:System.Drawing.Drawing2D.CombineMode.Replace> elementu członkowskiego.  
  
-   Wypełnia duży prostokąt przy użyciu pełnego czarnego pędzla.  
  
 Wynikiem jest mały, wypełniony, czarny kwadrat.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#157)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#157)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#157)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Rectangle rect, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.Rectangle rect, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Rectangle rect, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Rectangle * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (rect, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="rect"><see cref="T:System.Drawing.Rectangle" />Struktura do połączenia.</param>
        <param name="combineMode"><see cref="T:System.Drawing.Drawing2D.CombineMode" /> Składowa wyliczenia, która określa operację łączenia do użycia.</param>
        <summary>Ustawia region wycinka tego <see cref="T:System.Drawing.Graphics" /> elementu na wynik określonej operacji łączącej bieżący region klipu i prostokąt określony <see cref="T:System.Drawing.Rectangle" /> przez strukturę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy mały prostokąt dla regionu przycinania.  
  
-   Ustawia region przycinania do prostokąta z <xref:System.Drawing.Drawing2D.CombineMode.Replace> elementem członkowskim.  
  
-   Wypełnia duży prostokąt przy użyciu pełnego czarnego pędzla.  
  
 Wynikiem jest mały, wypełniony, czarny prostokąt.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#159)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#159)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#159)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.RectangleF rect, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.RectangleF rect, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.RectangleF,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::RectangleF rect, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.RectangleF * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (rect, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="rect"><see cref="T:System.Drawing.RectangleF" />Struktura do połączenia.</param>
        <param name="combineMode"><see cref="T:System.Drawing.Drawing2D.CombineMode" /> Składowa wyliczenia, która określa operację łączenia do użycia.</param>
        <summary>Ustawia region wycinka tego <see cref="T:System.Drawing.Graphics" /> elementu na wynik określonej operacji łączącej bieżący region klipu i prostokąt określony <see cref="T:System.Drawing.RectangleF" /> przez strukturę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy mały prostokąt dla regionu przycinania.  
  
-   Ustawia region przycinania do prostokąta z <xref:System.Drawing.Drawing2D.CombineMode.Replace> elementem członkowskim.  
  
-   Wypełnia duży prostokąt przy użyciu pełnego czarnego pędzla.  
  
 Wynikiem jest mały, wypełniony, czarny prostokąt.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#161)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#161)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#161)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Region region, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Region region, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Region,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Region ^ region, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Region * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (region, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="region"><see cref="T:System.Drawing.Region" />do łączenia.</param>
        <param name="combineMode">Element członkowski z <see cref="T:System.Drawing.Drawing2D.CombineMode" /> wyliczenia, który określa operację łączenia do użycia.</param>
        <summary>Ustawia region wycinka tego <see cref="T:System.Drawing.Graphics" /> elementu na wynik określonej operacji łączącej bieżący region klipu i określony. <see cref="T:System.Drawing.Region" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy mały prostokąt dla regionu przycinania.  
  
-   Ustawia region przycinania do prostokąta z <xref:System.Drawing.Drawing2D.CombineMode.Replace> elementem członkowskim.  
  
-   Wypełnia duży prostokąt przy użyciu pełnego czarnego pędzla.  
  
 Wynikiem jest mały, wypełniony, czarny prostokąt.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#162)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#162)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#162)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SmoothingMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.SmoothingMode SmoothingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.SmoothingMode SmoothingMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.SmoothingMode" />
      <MemberSignature Language="VB.NET" Value="Public Property SmoothingMode As SmoothingMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::SmoothingMode SmoothingMode { System::Drawing::Drawing2D::SmoothingMode get(); void set(System::Drawing::Drawing2D::SmoothingMode value); };" />
      <MemberSignature Language="F#" Value="member this.SmoothingMode : System.Drawing.Drawing2D.SmoothingMode with get, set" Usage="System.Drawing.Graphics.SmoothingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.SmoothingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia jakość renderowania dla tego <see cref="T:System.Drawing.Graphics" />elementu.</summary>
        <value>Jedna z <see cref="T:System.Drawing.Drawing2D.SmoothingMode" /> wartości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tryb wygładzania określa, czy linie, krzywe i krawędzie wypełnionych obszarów używają wygładzania (nazywanego również wygładzaniem). Jedynym wyjątkiem jest to, że pędzle gradientu ścieżki nie przestrzegają trybu wygładzania. Obszary wypełnione przy użyciu <xref:System.Drawing.Drawing2D.PathGradientBrush> a są renderowane w taki sam sposób (alias), niezależnie <xref:System.Drawing.Graphics.SmoothingMode%2A> od właściwości.  
  
   
  
## Examples  
 Poniższa metoda pokazuje efekty ustawiania <xref:System.Drawing.Pen.DashCap%2A>właściwości, <xref:System.Drawing.Pen.DashPattern%2A>, i <xref:System.Drawing.Graphics.SmoothingMode%2A> . Dane wyjściowe przykładu pokazano na poniższej ilustracji.  
  
 ![Wiersze z zastosowaniem i bez wygładzania.] (~/add/media/gdi-smoothingmode.png "Wiersze z zastosowaniem i bez wygładzania.")  
  
 Ten przykład jest przeznaczony do użycia z Windows Forms. Wklej kod do formularza i Wywołaj `ShowPensAndSmoothingMode` metodę podczas obsługi <xref:System.Windows.Forms.Control.Paint> zdarzenia formularza, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.PensExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.PensExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextContrast">
      <MemberSignature Language="C#" Value="public int TextContrast { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextContrast" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.TextContrast" />
      <MemberSignature Language="VB.NET" Value="Public Property TextContrast As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextContrast { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TextContrast : int with get, set" Usage="System.Drawing.Graphics.TextContrast" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość korekcji gamma dla tekstu renderowania.</summary>
        <value>Wartość korekcji gamma używana do renderowania tekstu antyaliasowego i ClearType.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość korekcji gamma musi zawierać się w przedziale od 0 do 12. Wartość domyślna to 4.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Drawing.Graphics.TextRenderingHint%2A> właściwości i. <xref:System.Drawing.Graphics.TextContrast%2A>  
  
 Ten przykład jest przeznaczony do użycia z Windows Forms. Wklej kod do formularza i Wywołaj `ChangeTextRenderingHintAndTextContrast` metodę podczas obsługi <xref:System.Windows.Forms.Control.Paint> zdarzenia formularza, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.GraphicsProperties#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#5)]
 [!code-vb[System.Drawing.GraphicsProperties#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextRenderingHint">
      <MemberSignature Language="C#" Value="public System.Drawing.Text.TextRenderingHint TextRenderingHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Text.TextRenderingHint TextRenderingHint" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.TextRenderingHint" />
      <MemberSignature Language="VB.NET" Value="Public Property TextRenderingHint As TextRenderingHint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Text::TextRenderingHint TextRenderingHint { System::Drawing::Text::TextRenderingHint get(); void set(System::Drawing::Text::TextRenderingHint value); };" />
      <MemberSignature Language="F#" Value="member this.TextRenderingHint : System.Drawing.Text.TextRenderingHint with get, set" Usage="System.Drawing.Graphics.TextRenderingHint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Text.TextRenderingHint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tryb renderowania dla tekstu skojarzonego z tym <see cref="T:System.Drawing.Graphics" />elementem.</summary>
        <value>Jedna z <see cref="T:System.Drawing.Text.TextRenderingHint" /> wartości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wskazówka renderowania tekstu określa, czy renderowanie tekstu z wygładzaniem.  
  
> [!NOTE]
>  Nie <xref:System.Drawing.Graphics.CompositingMode%2A> należy używać <xref:System.Drawing.Drawing2D.CompositingMode.SourceCopy> wartości właściwości, gdy <xref:System.Drawing.Graphics.TextRenderingHint%2A> właściwość jest ustawiona na <xref:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit>. Może wystąpić wyjątek lub obraz może nie być poprawnie renderowany.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Drawing.Graphics.TextRenderingHint%2A> właściwości i. <xref:System.Drawing.Graphics.TextContrast%2A>  
  
 Ten przykład jest przeznaczony do użycia z Windows Forms. Wklej kod do formularza i Wywołaj `ChangeTextRenderingHintAndTextContrast` metodę podczas obsługi <xref:System.Windows.Forms.Control.Paint> zdarzenia formularza, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.GraphicsProperties#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#5)]
 [!code-vb[System.Drawing.GraphicsProperties#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.Matrix Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.Matrix Transform" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Property Transform As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::Matrix ^ Transform { System::Drawing::Drawing2D::Matrix ^ get(); void set(System::Drawing::Drawing2D::Matrix ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Drawing.Drawing2D.Matrix with get, set" Usage="System.Drawing.Graphics.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia kopię światowej transformacji <see cref="T:System.Drawing.Graphics" />geometrycznej.</summary>
        <value>Kopia <see cref="T:System.Drawing.Drawing2D.Matrix" /> , która reprezentuje transformację geometryczną dla tego <see cref="T:System.Drawing.Graphics" />elementu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Interfejs GDI+ używa trzech przestrzeni współrzędnych: świecie, strony i urządzenia. Współrzędne świata są współrzędnymi używanymi do modelowania określonego świata grafiki i są współrzędnymi przekazywanymi do metod w .NET Framework. Współrzędne strony odwołują się do układu współrzędnych używanego przez powierzchnię rysowania, taką jak formularz lub kontrolka. Współrzędne urządzenia są współrzędnymi używanymi przez urządzenie fizyczne, na przykład ekranem lub drukarką. <xref:System.Drawing.Graphics.Transform%2A> Właściwość reprezentuje transformację światową, która mapuje współrzędne świata na współrzędne strony.  
  
 Ponieważ macierz zwracana i według <xref:System.Drawing.Graphics.Transform%2A> właściwości jest kopią przekształcenia geometrycznego, należy usunąć macierz, gdy nie jest już potrzebna.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c61ff50a-eb1d-4e6c-83cd-f7e9764cfa9f">Typy systemów współrzędnych</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TransformPoints">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Przekształca tablicę punktów z jednego obszaru współrzędnych na inny przy użyciu bieżących i przekształceń <see cref="T:System.Drawing.Graphics" />strony.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.Point[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformPoints(valuetype System.Drawing.Drawing2D.CoordinateSpace destSpace, valuetype System.Drawing.Drawing2D.CoordinateSpace srcSpace, valuetype System.Drawing.Point[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Point[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransformPoints (destSpace As CoordinateSpace, srcSpace As CoordinateSpace, pts As Point())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransformPoints(System::Drawing::Drawing2D::CoordinateSpace destSpace, System::Drawing::Drawing2D::CoordinateSpace srcSpace, cli::array &lt;System::Drawing::Point&gt; ^ pts);" />
      <MemberSignature Language="F#" Value="member this.TransformPoints : System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.Point[] -&gt; unit" Usage="graphics.TransformPoints (destSpace, srcSpace, pts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="srcSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="pts" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="destSpace"><see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> Składowa wyliczenia, która określa docelowy obszar współrzędnych.</param>
        <param name="srcSpace"><see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> Składowa wyliczenia, która określa źródłową przestrzeń współrzędnych.</param>
        <param name="pts"><see cref="T:System.Drawing.Point" /> Tablica struktur reprezentujących punkty do przekształcenia.</param>
        <summary>Przekształca tablicę punktów z jednego obszaru współrzędnych na inny przy użyciu bieżących i przekształceń <see cref="T:System.Drawing.Graphics" />strony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy dwa punkty i rysuje niebieską linię między nimi.  
  
-   Ustawia światową transformację do przetłumaczenia przez kwoty 40 w kierunku x i 30 w kierunku y.  
  
-   Przekształca punkty ze współrzędnych świata (<xref:System.Drawing.Drawing2D.CoordinateSpace.World>) na współrzędne strony (<xref:System.Drawing.Drawing2D.CoordinateSpace.Page>).  
  
-   Resetuje światową transformację do tożsamości.  
  
-   Rysuje czerwoną linię między przekształconymi punktami.  
  
 Wynikiem jest niebieska linia i przetłumaczona czerwona linia poniżej.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#163)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#163)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#163)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.PointF[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformPoints(valuetype System.Drawing.Drawing2D.CoordinateSpace destSpace, valuetype System.Drawing.Drawing2D.CoordinateSpace srcSpace, valuetype System.Drawing.PointF[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.PointF[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransformPoints (destSpace As CoordinateSpace, srcSpace As CoordinateSpace, pts As PointF())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransformPoints(System::Drawing::Drawing2D::CoordinateSpace destSpace, System::Drawing::Drawing2D::CoordinateSpace srcSpace, cli::array &lt;System::Drawing::PointF&gt; ^ pts);" />
      <MemberSignature Language="F#" Value="member this.TransformPoints : System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.PointF[] -&gt; unit" Usage="graphics.TransformPoints (destSpace, srcSpace, pts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="srcSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="pts" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="destSpace"><see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> Składowa wyliczenia, która określa docelowy obszar współrzędnych.</param>
        <param name="srcSpace"><see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> Składowa wyliczenia, która określa źródłową przestrzeń współrzędnych.</param>
        <param name="pts"><see cref="T:System.Drawing.PointF" /> Tablica struktur reprezentujących punkty do przekształcenia.</param>
        <summary>Przekształca tablicę punktów z jednego obszaru współrzędnych na inny przy użyciu bieżących i przekształceń <see cref="T:System.Drawing.Graphics" />strony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy dwa punkty i rysuje niebieską linię między nimi.  
  
-   Ustawia światową transformację do przetłumaczenia przez kwoty 40 w kierunku x i 30 w kierunku y.  
  
-   Przekształca punkty ze współrzędnych świata (<xref:System.Drawing.Drawing2D.CoordinateSpace.World>) na współrzędne strony (<xref:System.Drawing.Drawing2D.CoordinateSpace.Page>).  
  
-   Resetuje światową transformację do tożsamości i rysuje czerwoną linię między przekształconymi punktami.  
  
 Wynikiem jest niebieska linia i przetłumaczona czerwona linia poniżej.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#164)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#164)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#164)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tłumaczy region wycinka tego <see cref="T:System.Drawing.Graphics" /> elementu o określone wartości w kierunkach poziomych i pionowych.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateClip">
      <MemberSignature Language="C#" Value="public void TranslateClip (int dx, int dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateClip(int32 dx, int32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateClip(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateClip (dx As Integer, dy As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateClip(int dx, int dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateClip : int * int -&gt; unit" Usage="graphics.TranslateClip (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Int32" />
        <Parameter Name="dy" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dx">Współrzędna x tłumaczenia.</param>
        <param name="dy">Współrzędna y tłumaczenia.</param>
        <summary>Tłumaczy region wycinka tego <see cref="T:System.Drawing.Graphics" /> elementu o określone wartości w kierunkach poziomych i pionowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokąt dla regionu przycinania.  
  
-   Ustawia region przycinania do prostokąta.  
  
-   Tłumaczy region przycinania za pomocą wektora (50, 50).  
  
-   Wypełnia duży prostokąt przy użyciu pełnego czarnego pędzla.  
  
 Wynikiem jest przetłumaczony, mały prostokąt, czarny.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#165)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#165)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#165)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateClip">
      <MemberSignature Language="C#" Value="public void TranslateClip (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateClip(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateClip(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateClip (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateClip(float dx, float dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateClip : single * single -&gt; unit" Usage="graphics.TranslateClip (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">Współrzędna x tłumaczenia.</param>
        <param name="dy">Współrzędna y tłumaczenia.</param>
        <summary>Tłumaczy region wycinka tego <see cref="T:System.Drawing.Graphics" /> elementu o określone wartości w kierunkach poziomych i pionowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy prostokąt dla regionu przycinania.  
  
-   Ustawia region przycinania do prostokąta.  
  
-   Tłumaczy region przycinania za pomocą wektora (50,0 F, 50,0 F).  
  
-   Wypełnia duży prostokąt przy użyciu pełnego czarnego pędzla.  
  
 Wynikiem jest przetłumaczony, mały prostokąt, czarny.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#166)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#166)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#166)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zmienia pochodzenie układu współrzędnych przez zaczekanie na określone tłumaczenie na macierz <see cref="T:System.Drawing.Graphics" />transformacji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateTransform : single * single -&gt; unit" Usage="graphics.TranslateTransform (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">Współrzędna x tłumaczenia.</param>
        <param name="dy">Współrzędna y tłumaczenia.</param>
        <summary>Zmienia pochodzenie układu współrzędnych przez zaczekanie na określone tłumaczenie na macierz <see cref="T:System.Drawing.Graphics" />transformacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Początek jest zwykle górnym lewym rogu powierzchni rysunku.  Operacja tłumaczenia polega na pomnożeniu macierzy transformacji przez macierz, której częścią tłumaczenia są `dx` parametry i. `dy` Ta metoda stosuje tłumaczenie, w zależności od tego, czy macierz tłumaczenia została zastosowana do macierzy transformacji.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Umożliwia obrócenie światowej macierzy transformacji w formularzu systemu Windows przez 30.0 F stopni.  
  
-   Przenosi pochodzenie obiektu graficznego, wywołując <xref:System.Drawing.Graphics.TranslateTransform%2A>oczekujące tłumaczenie na macierz transformacji.  
  
-   Rysuje przetłumaczoną, obróconą elipsę za pomocą niebieskiego pióra.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#167)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#167)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#167)]  
  
 Na poniższej ilustracji przedstawiono dane wyjściowe uruchamiania poprzedniego przykładu kodu.  
  
 ![Przetłumaczone i przekształcone elipsy] (~/add/media/ndp-tranlatetransform.png "Przetłumaczone i przekształcone elipsy")  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/9fef7451-bddf-4c68-9350-400d1f1f25a3">Systemy i przekształcenia współrzędnych</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f8e18d3-d2f5-460e-a8e3-2da891c301de">Używanie przekształceń w zarządzanym GDI+</related>
      </Docs>
    </Member>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.TranslateTransform : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.TranslateTransform (dx, dy, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="dx">Współrzędna x tłumaczenia.</param>
        <param name="dy">Współrzędna y tłumaczenia.</param>
        <param name="order">Element członkowski wyliczenia, który określa, czy tłumaczenie jest dołączane, czy dołączone do macierzy transformacji. <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /></param>
        <summary>Zmienia pochodzenie układu współrzędnych przez zastosowanie określonego tłumaczenia do macierzy <see cref="T:System.Drawing.Graphics" /> transformacji w określonej kolejności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacja tłumaczenia polega na pomnożeniu macierzy transformacji przez macierz, której częścią tłumaczenia są `dx` parametry i. `dy` Ta metoda dołącza lub dołącza macierz <xref:System.Drawing.Graphics> transformacji przez macierz tłumaczenia zgodnie `order` z parametrem.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, który <xref:System.Windows.Forms.Control.Paint> jest parametrem programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Umożliwia obrócenie światowej macierzy transformacji w formularzu systemu Windows przez 30.0 F stopni.  
  
-   Przenosi źródło obiektu graficznego, wywołując <xref:System.Drawing.Graphics.TranslateTransform%2A>, dołączając tłumaczenie do macierzy transformacji światowej.  
  
-   Rysuje obróconą, przetłumaczoną elipsę przy użyciu niebieskiego pióra.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#168)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#168)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#168)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/9fef7451-bddf-4c68-9350-400d1f1f25a3">Systemy i przekształcenia współrzędnych</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f8e18d3-d2f5-460e-a8e3-2da891c301de">Używanie przekształceń w zarządzanym GDI+</related>
      </Docs>
    </Member>
    <Member MemberName="VisibleClipBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF VisibleClipBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF VisibleClipBounds" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.VisibleClipBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VisibleClipBounds As RectangleF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::RectangleF VisibleClipBounds { System::Drawing::RectangleF get(); };" />
      <MemberSignature Language="F#" Value="member this.VisibleClipBounds : System.Drawing.RectangleF" Usage="System.Drawing.Graphics.VisibleClipBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera prostokąt związany z widocznym regionem <see cref="T:System.Drawing.Graphics" />przycinania.</summary>
        <value>Struktura, która reprezentuje prostokąt ograniczenia dla widocznego regionu <see cref="T:System.Drawing.Graphics" />przycinania. <see cref="T:System.Drawing.RectangleF" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jednostka dla tworzonego prostokąta jest oznaczona przez <xref:System.Drawing.Graphics.PageUnit%2A> właściwość. Jednostka domyślna to piksele. Element <xref:System.Drawing.Graphics> jest zazwyczaj skojarzony z kontrolką, a pochodzenie prostokąta będzie względem obszaru klienta tej kontrolki.  
  
 Widocznym regionem przycinania jest część wspólna obszaru wycinka tego <xref:System.Drawing.Graphics> i obszaru przycinania okna.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
