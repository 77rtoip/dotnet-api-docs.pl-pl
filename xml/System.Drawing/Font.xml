<Type Name="Font" FullName="System.Drawing.Font">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c41d221e11b0c2b981fed0c711b012091479216f" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37761801" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Font : MarshalByRefObject, ICloneable, IDisposable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit Font extends System.MarshalByRefObject implements class System.ICloneable, class System.IDisposable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Font" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Font&#xA;Inherits MarshalByRefObject&#xA;Implements ICloneable, IDisposable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Font sealed : MarshalByRefObject, ICloneable, IDisposable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Font = class&#xA;    inherit MarshalByRefObject&#xA;    interface ICloneable&#xA;    interface ISerializable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("System.Drawing.Design.FontEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.FontConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiuje format określonego tekstu, w tym krój czcionki, rozmiaru i atrybuty stylu. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji o sposobie konstruowania czcionek, zobacz [jak: utworzyć rodzin czcionek i czcionek](~/docs/framework/winforms/advanced/how-to-construct-font-families-and-fonts.md). Aplikacje Windows Forms obsługują czcionki TrueType i ma ograniczoną obsługę czcionek OpenType. Jeśli próba użycia czcionkę, która nie jest obsługiwana lub czcionki nie jest zainstalowany na komputerze, na którym działa aplikacja, Czcionka Microsoft Sans Serif zostaną zastąpione.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Drawing.Font.%23ctor%2A> Konstruktor i <xref:System.Drawing.Font.Size%2A>, <xref:System.Drawing.Font.SizeInPoints%2A>, i <xref:System.Drawing.Font.Unit%2A> właściwości. W tym przykładzie jest przeznaczony do użycia z formularzem Windows, który zawiera <xref:System.Windows.Forms.ComboBox> o nazwie `ComboBox1` , jest wypełniana przy użyciu ciągi "Większy zakres" i "Mniejsze" i <xref:System.Windows.Forms.Label> o nazwie `Label1`. Wklej następujący kod do formularza i skojarz `ComboBox1_SelectedIndexChanged` metody z <xref:System.Windows.Forms.ComboBox.SelectedIndexChanged> zdarzenia <xref:System.Windows.Forms.ComboBox> kontroli.  
  
 [!code-cpp[System.Drawing.FontsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.FontsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.FontsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Drawing.Font" /> , który używa określonego istniejącego <see cref="T:System.Drawing.Font" /> i <see cref="T:System.Drawing.FontStyle" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.Font prototype, System.Drawing.FontStyle newStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Font prototype, valuetype System.Drawing.FontStyle newStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.Font,System.Drawing.FontStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (prototype As Font, newStyle As FontStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::Font ^ prototype, System::Drawing::FontStyle newStyle);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Font : System.Drawing.Font * System.Drawing.FontStyle -&gt; System.Drawing.Font" Usage="new System.Drawing.Font (prototype, newStyle)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="prototype" Type="System.Drawing.Font" />
        <Parameter Name="newStyle" Type="System.Drawing.FontStyle" />
      </Parameters>
      <Docs>
        <param name="prototype">Istniejące <see cref="T:System.Drawing.Font" /> służący do utworzenia nowego <see cref="T:System.Drawing.Font" />.</param>
        <param name="newStyle">
          <see cref="T:System.Drawing.FontStyle" /> Do zastosowania do nowego <see cref="T:System.Drawing.Font" />. Wiele wartości <see cref="T:System.Drawing.FontStyle" /> wyliczenia można łączyć z <see langword="OR" /> operatora.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Drawing.Font" /> , który używa określonego istniejącego <see cref="T:System.Drawing.Font" /> i <see cref="T:System.Drawing.FontStyle" /> wyliczenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku zlokalizowanych aplikacji, które są oparte na [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] i jego starszych wersji, określając czcionkę dla `prototype` po czcionki nie został zainstalowany na komputerze, który jest używany do tworzenia aplikacji spowoduje, że użycie czcionki Microsoft Serif sieci SAN Zamiast tego. Jeśli Twoja aplikacja jest zależna od tego zachowania, należy ponownie skompilować aplikacji dla programu .NET Framework 3.0 należy określić czcionkę Microsoft Sans Serif `prototype`.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje <xref:System.Drawing.Color.op_Inequality%2A> operatora <xref:System.Drawing.Font.%23ctor%2A> konstruktora, a <xref:System.Drawing.Font.Bold%2A> właściwości. W tym przykładzie jest przeznaczony do użycia z formularzem Windows, która zawiera przycisk o nazwie `Button2`. Wklej następujący kod do formularza i skojarz `Button2_Click` metody przy użyciu przycisku <xref:System.Windows.Forms.Control.Click> zdarzeń.  
  
 [!code-cpp[System.Drawing.CharacterRangeExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.CharacterRangeExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.CharacterRangeExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As FontFamily, emSize As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::FontFamily ^ family, float emSize);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Font : System.Drawing.FontFamily * single -&gt; System.Drawing.Font" Usage="new System.Drawing.Font (family, emSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="family">
          <see cref="T:System.Drawing.FontFamily" /> Nowej <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">Em — rozmiar, w punktach, nowe czcionki.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Drawing.Font" /> przy użyciu określonego rozmiaru.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czcionka wynikowy ma jego <xref:System.Drawing.Font.Style%2A> właściwością <xref:System.Drawing.FontStyle.Regular> i jego <xref:System.Drawing.Font.Unit%2A> właściwością <xref:System.Drawing.GraphicsUnit.Point>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> jest mniejsze niż lub równa 0, daje w wyniku nieskończoności lub nie jest prawidłową liczbą.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (familyName As String, emSize As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::String ^ familyName, float emSize);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Font : string * single -&gt; System.Drawing.Font" Usage="new System.Drawing.Font (familyName, emSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="familyName">Reprezentacja ciągu <see cref="T:System.Drawing.FontFamily" /> dla nowego <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">Em — rozmiar, w punktach, nowe czcionki.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Drawing.Font" /> przy użyciu określonego rozmiaru.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czcionka wynikowy ma jego <xref:System.Drawing.Font.Style%2A> właściwością <xref:System.Drawing.FontStyle.Regular?displayProperty=nameWithType> i jego <xref:System.Drawing.Font.Unit%2A> właściwością <xref:System.Drawing.GraphicsUnit.Point?displayProperty=nameWithType>. Aplikacje Windows Forms obsługują czcionki TrueType i ma ograniczoną obsługę czcionek OpenType. Jeśli `familyName` parametr określa czcionkę, która nie jest zainstalowany na komputerze, na którym uruchomiona jest aplikacja lub nie jest obsługiwana, firmy Microsoft w sieci SAN Serif zostaną zastąpione.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Drawing.Font.%23ctor%2A> konstruktora. W tym przykładzie jest przeznaczony do użycia z formularzem Windows i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> zdarzeń.  
  
 [!code-csharp[System.Drawing.Misc3#ConstructFontWithString](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Misc3/CS/Form1.cs#constructfontwithstring)]
 [!code-vb[System.Drawing.Misc3#ConstructFontWithString](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Misc3/VB/Form1.vb#constructfontwithstring)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> jest mniejsze niż lub równa 0, daje w wyniku nieskończonością lub nie jest prawidłową liczbą.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize, System.Drawing.FontStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize, valuetype System.Drawing.FontStyle style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.FontStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As FontFamily, emSize As Single, style As FontStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::FontFamily ^ family, float emSize, System::Drawing::FontStyle style);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Font : System.Drawing.FontFamily * single * System.Drawing.FontStyle -&gt; System.Drawing.Font" Usage="new System.Drawing.Font (family, emSize, style)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
      </Parameters>
      <Docs>
        <param name="family">
          <see cref="T:System.Drawing.FontFamily" /> Nowej <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">Em — rozmiar, w punktach, nowe czcionki.</param>
        <param name="style">
          <see cref="T:System.Drawing.FontStyle" /> Nowe czcionki.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Drawing.Font" /> przy użyciu określonego rozmiaru i stylu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czcionka wynikowy ma jego <xref:System.Drawing.Font.Unit%2A> właściwością <xref:System.Drawing.GraphicsUnit.Point>.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób ustawiania <xref:System.Drawing.Font> właściwości przycisku Nowy, bold — styl <xref:System.Drawing.Font>. W tym przykładzie jest przeznaczony do użycia z formularzem Windows, która zawiera przycisk o nazwie `Button1`. Wklej następujący kod do formularza i skojarz `Button1_Click` metody przy użyciu przycisku <xref:System.Windows.Forms.Control.Click> zdarzeń.  
  
 [!code-cpp[System.Drawing.MiscExamples#11](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#11)]
 [!code-csharp[System.Drawing.MiscExamples#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#11)]
 [!code-vb[System.Drawing.MiscExamples#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> jest mniejsze niż lub równa 0, daje w wyniku nieskończoności lub nie jest prawidłową liczbą.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="family" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As FontFamily, emSize As Single, unit As GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::FontFamily ^ family, float emSize, System::Drawing::GraphicsUnit unit);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Font : System.Drawing.FontFamily * single * System.Drawing.GraphicsUnit -&gt; System.Drawing.Font" Usage="new System.Drawing.Font (family, emSize, unit)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="family">
          <see cref="T:System.Drawing.FontFamily" /> Nowej <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">Rozmiar em nową czcionkę w jednostkach określonych <c>jednostki</c> parametru.</param>
        <param name="unit">
          <see cref="T:System.Drawing.GraphicsUnit" /> Nowe czcionki.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Drawing.Font" /> przy użyciu określony rozmiar i jednostka. Ustawia styl <see cref="F:System.Drawing.FontStyle.Regular" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czcionka wynikowy ma jego <xref:System.Drawing.Font.Style%2A> właściwością <xref:System.Drawing.FontStyle.Regular?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="family" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> jest mniejsze niż lub równa 0, daje w wyniku nieskończoności lub nie jest prawidłową liczbą.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize, System.Drawing.FontStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize, valuetype System.Drawing.FontStyle style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.FontStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (familyName As String, emSize As Single, style As FontStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::String ^ familyName, float emSize, System::Drawing::FontStyle style);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Font : string * single * System.Drawing.FontStyle -&gt; System.Drawing.Font" Usage="new System.Drawing.Font (familyName, emSize, style)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
      </Parameters>
      <Docs>
        <param name="familyName">Reprezentacja ciągu <see cref="T:System.Drawing.FontFamily" /> dla nowego <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">Em — rozmiar, w punktach, nowe czcionki.</param>
        <param name="style">
          <see cref="T:System.Drawing.FontStyle" /> Nowe czcionki.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Drawing.Font" /> przy użyciu określonego rozmiaru i stylu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czcionka wynikowy ma jego <xref:System.Drawing.Font.Unit%2A> właściwością <xref:System.Drawing.GraphicsUnit.Point>. Aplikacje Windows Forms obsługują czcionki TrueType i ma ograniczoną obsługę czcionek OpenType. Jeśli `familyName` parametr określa czcionkę, która nie jest zainstalowany na komputerze, na którym uruchomiona jest aplikacja lub nie jest obsługiwana, firmy Microsoft w sieci SAN Serif zostaną zastąpione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> jest mniejsze niż lub równa 0, daje w wyniku nieskończoności lub nie jest prawidłową liczbą.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (familyName As String, emSize As Single, unit As GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::String ^ familyName, float emSize, System::Drawing::GraphicsUnit unit);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Font : string * single * System.Drawing.GraphicsUnit -&gt; System.Drawing.Font" Usage="new System.Drawing.Font (familyName, emSize, unit)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="familyName">Reprezentacja ciągu <see cref="T:System.Drawing.FontFamily" /> dla nowego <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">Rozmiar em nową czcionkę w jednostkach określonych <c>jednostki</c> parametru.</param>
        <param name="unit">
          <see cref="T:System.Drawing.GraphicsUnit" /> Nowe czcionki.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Drawing.Font" /> przy użyciu określony rozmiar i jednostka. Styl jest ustawiona na <see cref="F:System.Drawing.FontStyle.Regular" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czcionka wynikowy ma jego <xref:System.Drawing.Font.Style%2A> właściwością <xref:System.Drawing.FontStyle.Regular?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> jest mniejsze niż lub równa 0, daje w wyniku nieskończoności lub nie jest prawidłową liczbą.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As FontFamily, emSize As Single, style As FontStyle, unit As GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::FontFamily ^ family, float emSize, System::Drawing::FontStyle style, System::Drawing::GraphicsUnit unit);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Font : System.Drawing.FontFamily * single * System.Drawing.FontStyle * System.Drawing.GraphicsUnit -&gt; System.Drawing.Font" Usage="new System.Drawing.Font (family, emSize, style, unit)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="family">
          <see cref="T:System.Drawing.FontFamily" /> Nowej <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">Rozmiar em nową czcionkę w jednostkach określonych <c>jednostki</c> parametru.</param>
        <param name="style">
          <see cref="T:System.Drawing.FontStyle" /> Nowe czcionki.</param>
        <param name="unit">
          <see cref="T:System.Drawing.GraphicsUnit" /> Nowe czcionki.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Drawing.Font" /> przy użyciu określonego rozmiaru, stylu i jednostki.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> jest mniejsze niż lub równa 0, daje w wyniku nieskończoności lub nie jest prawidłową liczbą.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="family" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (familyName As String, emSize As Single, style As FontStyle, unit As GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::String ^ familyName, float emSize, System::Drawing::FontStyle style, System::Drawing::GraphicsUnit unit);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Font : string * single * System.Drawing.FontStyle * System.Drawing.GraphicsUnit -&gt; System.Drawing.Font" Usage="new System.Drawing.Font (familyName, emSize, style, unit)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="familyName">Reprezentacja ciągu <see cref="T:System.Drawing.FontFamily" /> dla nowego <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">Rozmiar em nową czcionkę w jednostkach określonych <c>jednostki</c> parametru.</param>
        <param name="style">
          <see cref="T:System.Drawing.FontStyle" /> Nowe czcionki.</param>
        <param name="unit">
          <see cref="T:System.Drawing.GraphicsUnit" /> Nowe czcionki.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Drawing.Font" /> przy użyciu określonego rozmiaru, stylu i jednostki.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aplikacje Windows Forms obsługują czcionki TrueType i ma ograniczoną obsługę czcionek OpenType. Jeśli `familyName` parametr określa czcionkę, która nie jest zainstalowany na komputerze, na którym uruchomiona jest aplikacja lub nie jest obsługiwana, firmy Microsoft w sieci SAN Serif zostaną zastąpione.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Drawing.Font.%23ctor%2A> konstruktora. W tym przykładzie jest przeznaczona do użycia za pomocą interfejsu Windows Forms. Aby uruchomić ten przykład, wklej ten kod do formularza, która zawiera przycisk o nazwie `Button2`i skojarz `Button2_Click` metody z <xref:System.Windows.Forms.Control.Click> zdarzenia przycisku.  
  
 [!code-cpp[System.Drawing.FontsExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#3)]
 [!code-csharp[System.Drawing.FontsExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.FontsExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> jest mniejsze niż lub równa 0, daje w wyniku nieskończonością lub nie jest prawidłową liczbą.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit, byte gdiCharSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit, unsigned int8 gdiCharSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As FontFamily, emSize As Single, style As FontStyle, unit As GraphicsUnit, gdiCharSet As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::FontFamily ^ family, float emSize, System::Drawing::FontStyle style, System::Drawing::GraphicsUnit unit, System::Byte gdiCharSet);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Font : System.Drawing.FontFamily * single * System.Drawing.FontStyle * System.Drawing.GraphicsUnit * byte -&gt; System.Drawing.Font" Usage="new System.Drawing.Font (family, emSize, style, unit, gdiCharSet)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="gdiCharSet" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="family">
          <see cref="T:System.Drawing.FontFamily" /> Nowej <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">Rozmiar em nową czcionkę w jednostkach określonych <c>jednostki</c> parametru.</param>
        <param name="style">
          <see cref="T:System.Drawing.FontStyle" /> Nowe czcionki.</param>
        <param name="unit">
          <see cref="T:System.Drawing.GraphicsUnit" /> Nowe czcionki.</param>
        <param name="gdiCharSet">A <see cref="T:System.Byte" /> określający [! INCLUDE[ndptecgdi](~/includes/ndptecgdi-MD.MD)] zestaw znaków używany dla nowych czcionki.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Drawing.Font" /> przy użyciu określonego rozmiaru, style, jednostki i zestawu znaków.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `gdiCharSet` Parametr przyjmuje wartość z listy, zdefiniowana w pliku nagłówkowym Windows SDK WinGDI.h.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> jest mniejsze niż lub równa 0, daje w wyniku nieskończoności lub nie jest prawidłową liczbą.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="family" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit, byte gdiCharSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit, unsigned int8 gdiCharSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (familyName As String, emSize As Single, style As FontStyle, unit As GraphicsUnit, gdiCharSet As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::String ^ familyName, float emSize, System::Drawing::FontStyle style, System::Drawing::GraphicsUnit unit, System::Byte gdiCharSet);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Font : string * single * System.Drawing.FontStyle * System.Drawing.GraphicsUnit * byte -&gt; System.Drawing.Font" Usage="new System.Drawing.Font (familyName, emSize, style, unit, gdiCharSet)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="gdiCharSet" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="familyName">Reprezentacja ciągu <see cref="T:System.Drawing.FontFamily" /> dla nowego <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">Rozmiar em nową czcionkę w jednostkach określonych <c>jednostki</c> parametru.</param>
        <param name="style">
          <see cref="T:System.Drawing.FontStyle" /> Nowe czcionki.</param>
        <param name="unit">
          <see cref="T:System.Drawing.GraphicsUnit" /> Nowe czcionki.</param>
        <param name="gdiCharSet">A <see cref="T:System.Byte" /> określający [! INCLUDE[ndptecgdi](~/includes/ndptecgdi-MD.MD)] zestaw znaków na użytek tę czcionkę.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Drawing.Font" /> przy użyciu określonego rozmiaru, style, jednostki i zestawu znaków.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `gdiCharSet` Parametr przyjmuje wartość z listy, zdefiniowana w pliku nagłówkowym Windows SDK WinGDI.h. Aplikacje Windows Forms obsługują czcionki TrueType i ma ograniczoną obsługę czcionek OpenType. Jeśli `familyName` parametr określa czcionkę, która nie jest zainstalowany na komputerze, na którym uruchomiona jest aplikacja lub nie jest obsługiwana, firmy Microsoft w sieci SAN Serif zostaną zastąpione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> jest mniejsze niż lub równa 0, daje w wyniku nieskończoności lub nie jest prawidłową liczbą.</exception>
        <altmember cref="P:System.Drawing.Font.GdiCharSet" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit, byte gdiCharSet, bool gdiVerticalFont);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit, unsigned int8 gdiCharSet, bool gdiVerticalFont) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit,System.Byte,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As FontFamily, emSize As Single, style As FontStyle, unit As GraphicsUnit, gdiCharSet As Byte, gdiVerticalFont As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::FontFamily ^ family, float emSize, System::Drawing::FontStyle style, System::Drawing::GraphicsUnit unit, System::Byte gdiCharSet, bool gdiVerticalFont);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Font : System.Drawing.FontFamily * single * System.Drawing.FontStyle * System.Drawing.GraphicsUnit * byte * bool -&gt; System.Drawing.Font" Usage="new System.Drawing.Font (family, emSize, style, unit, gdiCharSet, gdiVerticalFont)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="gdiCharSet" Type="System.Byte" />
        <Parameter Name="gdiVerticalFont" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="family">
          <see cref="T:System.Drawing.FontFamily" /> Nowej <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">Rozmiar em nową czcionkę w jednostkach określonych <c>jednostki</c> parametru.</param>
        <param name="style">
          <see cref="T:System.Drawing.FontStyle" /> Nowe czcionki.</param>
        <param name="unit">
          <see cref="T:System.Drawing.GraphicsUnit" /> Nowe czcionki.</param>
        <param name="gdiCharSet">A <see cref="T:System.Byte" /> określający [! INCLUDE[ndptecgdi](~/includes/ndptecgdi-MD.MD)] zestaw znaków na użytek tę czcionkę.</param>
        <param name="gdiVerticalFont">Wartość logiczna wskazująca, czy nowa czcionka jest tworzony na podstawie [! Czcionka pionowy include[ndptecgdi](~/includes/ndptecgdi-MD.MD)].</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Drawing.Font" /> przy użyciu określonego rozmiaru, style, jednostki i zestawu znaków.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `gdiCharSet` Parametr przyjmuje wartość z listy, zdefiniowana w pliku nagłówkowym Windows SDK WinGDI.h.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> jest mniejsze niż lub równa 0, daje w wyniku nieskończoności lub nie jest prawidłową liczbą.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="family" /> jest <see langword="null" /></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit, byte gdiCharSet, bool gdiVerticalFont);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit, unsigned int8 gdiCharSet, bool gdiVerticalFont) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit,System.Byte,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (familyName As String, emSize As Single, style As FontStyle, unit As GraphicsUnit, gdiCharSet As Byte, gdiVerticalFont As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::String ^ familyName, float emSize, System::Drawing::FontStyle style, System::Drawing::GraphicsUnit unit, System::Byte gdiCharSet, bool gdiVerticalFont);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Font : string * single * System.Drawing.FontStyle * System.Drawing.GraphicsUnit * byte * bool -&gt; System.Drawing.Font" Usage="new System.Drawing.Font (familyName, emSize, style, unit, gdiCharSet, gdiVerticalFont)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="gdiCharSet" Type="System.Byte" />
        <Parameter Name="gdiVerticalFont" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="familyName">Reprezentacja ciągu <see cref="T:System.Drawing.FontFamily" /> dla nowego <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">Rozmiar em nową czcionkę w jednostkach określonych <c>jednostki</c> parametru.</param>
        <param name="style">
          <see cref="T:System.Drawing.FontStyle" /> Nowe czcionki.</param>
        <param name="unit">
          <see cref="T:System.Drawing.GraphicsUnit" /> Nowe czcionki.</param>
        <param name="gdiCharSet">A <see cref="T:System.Byte" /> określający [! INCLUDE[ndptecgdi](~/includes/ndptecgdi-MD.MD)] zestaw znaków na użytek tę czcionkę.</param>
        <param name="gdiVerticalFont">Wartość logiczna wskazującą czy nowy <see cref="T:System.Drawing.Font" /> pochodzi od klasy [! Czcionka pionowy include[ndptecgdi](~/includes/ndptecgdi-MD.MD)].</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Drawing.Font" /> przy użyciu określonego rozmiaru, style, jednostki i zestawu znaków.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `gdiCharSet` Parametr przyjmuje wartość z listy, zdefiniowana w pliku nagłówkowym Windows SDK WinGDI.h. Jeśli `familyName` parametr określa czcionkę, która nie jest zainstalowany na komputerze, na którym uruchomiona jest aplikacja lub nie jest obsługiwana, firmy Microsoft w sieci SAN Serif zostaną zastąpione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> jest mniejsze niż lub równa 0, daje w wyniku nieskończoności lub nie jest prawidłową liczbą.</exception>
        <altmember cref="P:System.Drawing.Font.GdiCharSet" />
      </Docs>
    </Member>
    <Member MemberName="Bold">
      <MemberSignature Language="C#" Value="public bool Bold { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Bold" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Bold" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Bold As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Bold { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Bold : bool" Usage="System.Drawing.Font.Bold" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy to <see cref="T:System.Drawing.Font" /> jest pogrubiony.</summary>
        <value>
          <see langword="true" /> Jeśli ten <see cref="T:System.Drawing.Font" /> jest pogrubiony a w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje <xref:System.Drawing.Color.op_Inequality%2A> operatora <xref:System.Drawing.Font.%23ctor%2A> konstruktora, a <xref:System.Drawing.Font.Bold%2A> właściwości. W tym przykładzie jest przeznaczony do użycia z formularzem Windows, która zawiera przycisk o nazwie `Button2`. Wklej następujący kod do formularza i skojarz `Button2_Click` metody przy użyciu przycisku <xref:System.Windows.Forms.Control.Click> zdarzeń.  
  
 [!code-cpp[System.Drawing.CharacterRangeExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.CharacterRangeExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.CharacterRangeExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="font.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy dokładną kopię tego <see cref="T:System.Drawing.Font" />.</summary>
        <returns>
          <see cref="T:System.Drawing.Font" /> Ta metoda tworzy, rzutowany jako <see cref="T:System.Object" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Klony kodu <xref:System.Drawing.Font> i rysuje tekst przy użyciu tego czcionki.  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicFontsExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="font.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszelkie zasoby używane przez to <see cref="T:System.Drawing.Font" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywoływanie <xref:System.Drawing.Font.Dispose%2A> umożliwia zasoby używane przez to <xref:System.Drawing.Font> zostają przeniesione do innych celów.  
  
 Wywołaj <xref:System.Drawing.Font.Dispose%2A> po zakończeniu przy użyciu <xref:System.Drawing.Font>. <xref:System.Drawing.Font.Dispose%2A> Pozostawia metoda <xref:System.Drawing.Font> w stanie uniemożliwiającym jego używanie. Po wywołaniu <xref:System.Drawing.Font.Dispose%2A>, trzeba zwolnić wszystkie odwołania do <xref:System.Drawing.Font> , moduł zbierający elementy bezużyteczne mógł odzyskać pamięć, <xref:System.Drawing.Font> zajmowaną przez wystąpienie. Aby uzyskać więcej informacji, zobacz [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) i [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Zawsze wywołuj <xref:System.Drawing.Font.Dispose%2A> przed publikacją swoje ostatnie odwołanie do <xref:System.Drawing.Font>. W przeciwnym razie zasobów jest przy użyciu nie zostanie zwolniona, dopóki moduł odśmiecania pamięci wywołuje <xref:System.Drawing.Font> obiektu `Finalize` metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="font.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt do przetestowania.</param>
        <summary>Wskazuje, czy określony obiekt jest <see cref="T:System.Drawing.Font" /> i ma taką samą <see cref="P:System.Drawing.Font.FontFamily" />, <see cref="P:System.Drawing.Font.GdiVerticalFont" />, <see cref="P:System.Drawing.Font.GdiCharSet" />, <see cref="P:System.Drawing.Font.Style" />, <see cref="P:System.Drawing.Font.Size" />, i <see cref="P:System.Drawing.Font.Unit" /> wartości właściwości, ponieważ <see cref="T:System.Drawing.Font" />.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="obj" /> parametr jest <see cref="T:System.Drawing.Font" /> i ma taką samą <see cref="P:System.Drawing.Font.FontFamily" />, <see cref="P:System.Drawing.Font.GdiVerticalFont" />, <see cref="P:System.Drawing.Font.GdiCharSet" />, <see cref="P:System.Drawing.Font.Style" />, <see cref="P:System.Drawing.Font.Size" />, i <see cref="P:System.Drawing.Font.Unit" /> wartości właściwości, ponieważ <see cref="T:System.Drawing.Font" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Ten kod tworzy dwa <xref:System.Drawing.Font> obiektów, a następnie sprawdza, czy są one równoważne.  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicFontsExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Font ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Font ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="font.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Umożliwia obiektu spróbuj zwolnić zasoby i wykonywać inne operacje oczyszczania, zanim go jest odzyskiwane przez wyrzucanie elementów bezużytecznych.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FontFamily">
      <MemberSignature Language="C#" Value="public System.Drawing.FontFamily FontFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.FontFamily FontFamily" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.FontFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FontFamily As FontFamily" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::FontFamily ^ FontFamily { System::Drawing::FontFamily ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FontFamily : System.Drawing.FontFamily" Usage="System.Drawing.Font.FontFamily" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.FontFamily</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Drawing.FontFamily" /> skojarzony z tym <see cref="T:System.Drawing.Font" />.</summary>
        <value>
          <see cref="T:System.Drawing.FontFamily" /> Skojarzony z tym <see cref="T:System.Drawing.Font" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Drawing.FontFamily> reprezentuje grupę czcionek, które mają podobne krój czcionki, ale mogą mieć różne rozmiary i style (na przykład Arial podzbiory i Verdana).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FromHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Font FromHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.FromHdc(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdc (hdc As IntPtr) As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Font ^ FromHdc(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="static member FromHdc : nativeint -&gt; System.Drawing.Font" Usage="System.Drawing.Font.FromHdc hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Dojście do kontekstu urządzenia.</param>
        <summary>Tworzy <see cref="T:System.Drawing.Font" /> określonego dojścia Windows do kontekstu urządzenia.</summary>
        <returns>
          <see cref="T:System.Drawing.Font" /> Ta metoda tworzy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dla tej metody do pracy `hdc` parametr musi zawierać dojścia do kontekstu urządzenia, w której wybrano czcionki. Ta metoda nie będzie działać z `hdc` uchwyt uzyskanych z [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> obiektu, ponieważ `hdc` dojścia nie ma wybrana czcionka.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Czcionki dla kontekstu określonego urządzenia nie jest czcionki TrueType.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać dostęp do kodu niezarządzanego. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="FromHfont">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FromHfont (IntPtr hfont);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Font FromHfont(native int hfont) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.FromHfont(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHfont (hfont As IntPtr) As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Font ^ FromHfont(IntPtr hfont);" />
      <MemberSignature Language="F#" Value="static member FromHfont : nativeint -&gt; System.Drawing.Font" Usage="System.Drawing.Font.FromHfont hfont" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hfont" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hfont">Dojście do Windows [! Czcionka include[ndptecgdi](~/includes/ndptecgdi-MD.MD)].</param>
        <summary>Tworzy <see cref="T:System.Drawing.Font" /> z określonego dojścia Windows.</summary>
        <returns>
          <see cref="T:System.Drawing.Font" /> Ta metoda tworzy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Pobiera uchwyt do [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] czcionki.  
  
-   Tworzy <xref:System.Drawing.Font> tego dojścia.  
  
-   Rysuje tekst na ekranie za pomocą nowego <xref:System.Drawing.Font>.  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicFontsExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="hfont" /> wskazuje obiekt, który nie jest czcionki TrueType.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać dostęp do kodu niezarządzanego. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromLogFont">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy <see cref="T:System.Drawing.Font" /> z określonej czcionki logiczne GDI (<c>LOGFONT</c>) struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromLogFont">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FromLogFont (object lf);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Font FromLogFont(object lf) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.FromLogFont(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromLogFont (lf As Object) As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Font ^ FromLogFont(System::Object ^ lf);" />
      <MemberSignature Language="F#" Value="static member FromLogFont : obj -&gt; System.Drawing.Font" Usage="System.Drawing.Font.FromLogFont lf" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lf" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="lf">
          <see cref="T:System.Object" /> Reprezentujący [! INCLUDE[ndptecgdi](~/includes/ndptecgdi-MD.MD)] <see langword="LOGFONT" /> struktury, od której ma zostać utworzona <see cref="T:System.Drawing.Font" />.</param>
        <summary>Tworzy <see cref="T:System.Drawing.Font" /> z określonej czcionki logiczne GDI (<c>LOGFONT</c>) struktury.</summary>
        <returns>
          <see cref="T:System.Drawing.Font" /> Tworzącą tę metodę.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] `LOGFONT`, lub logicznej czcionki to struktura, która zawiera 14 właściwości, które opisują określonej czcionki. Aby uzyskać więcej informacji, zobacz "czcionki logicznych" w dokumentacji dla deweloperów Windows u [ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library).  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać dostęp do kodu niezarządzanego. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="FromLogFont">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FromLogFont (object lf, IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Font FromLogFont(object lf, native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.FromLogFont(System.Object,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromLogFont (lf As Object, hdc As IntPtr) As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Font ^ FromLogFont(System::Object ^ lf, IntPtr hdc);" />
      <MemberSignature Language="F#" Value="static member FromLogFont : obj * nativeint -&gt; System.Drawing.Font" Usage="System.Drawing.Font.FromLogFont (lf, hdc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lf" Type="System.Object" />
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="lf">
          <see cref="T:System.Object" /> Reprezentujący [! INCLUDE[ndptecgdi](~/includes/ndptecgdi-MD.MD)] <see langword="LOGFONT" /> struktury, od której ma zostać utworzona <see cref="T:System.Drawing.Font" />.</param>
        <param name="hdc">Dojście do kontekstu urządzenia, który zawiera dodatkowe informacje o <c>lf</c> struktury.</param>
        <summary>Tworzy <see cref="T:System.Drawing.Font" /> z określonej czcionki logiczne GDI (<c>LOGFONT</c>) struktury.</summary>
        <returns>
          <see cref="T:System.Drawing.Font" /> Tworzącą tę metodę.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] `LOGFONT`, lub logicznej czcionki to struktura, która zawiera 14 właściwości, które opisują określonej czcionki. Aby uzyskać więcej informacji, zobacz "czcionki logicznych" w dokumentacji dla deweloperów Windows u [ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Czcionka nie jest czcionki TrueType.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać dostęp do kodu niezarządzanego. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GdiCharSet">
      <MemberSignature Language="C#" Value="public byte GdiCharSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8 GdiCharSet" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.GdiCharSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GdiCharSet As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Byte GdiCharSet { System::Byte get(); };" />
      <MemberSignature Language="F#" Value="member this.GdiCharSet : byte" Usage="System.Drawing.Font.GdiCharSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość bajtu, który określa interfejs GDI zestawu znaków, to <see cref="T:System.Drawing.Font" /> używa.</summary>
        <value>Wartość bajtu, który określa [! INCLUDE[ndptecgdi](~/includes/ndptecgdi-MD.MD)] zestaw znaków, to <see cref="T:System.Drawing.Font" /> używa. Domyślnym ustawieniem jest 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwraca wartość 1, chyba że na inny zestaw znaków jest określona w <xref:System.Drawing.Font.%23ctor%28System.String%2CSystem.Single%2CSystem.Drawing.FontStyle%2CSystem.Drawing.GraphicsUnit%2CSystem.Byte%29> konstruktora. Ta właściwość ma wartość z listy, zdefiniowana w pliku nagłówkowym Windows SDK WinGDI.h. Zestawy znaków i wartości bajt są wymienione w poniższej tabeli.  
  
|Zestaw znaków|Wartość|  
|-------------------|-----------|  
|ANSI|0|  
|DOMYŚLNE|1|  
|SYMBOL|2|  
|SHIFTJIS|128|  
|HANGEUL|129|  
|HANGUL|129|  
|GB2312|134|  
|CHINESEBIG5|136|  
|OEM|255|  
|JOHAB|130|  
|HEBRAJSKI|177|  
|ARABIC|178|  
|GRECKI|161|  
|TURKISH|162|  
|VIETNAMESE|163|  
|TAJSKI|222|  
|EASTEUROPE|238|  
|RUSSIAN|204|  
|MAC|77|  
|BALTIC|186|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GdiVerticalFont">
      <MemberSignature Language="C#" Value="public bool GdiVerticalFont { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GdiVerticalFont" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.GdiVerticalFont" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GdiVerticalFont As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool GdiVerticalFont { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.GdiVerticalFont : bool" Usage="System.Drawing.Font.GdiVerticalFont" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość logiczną, wskazującą, czy to <see cref="T:System.Drawing.Font" /> jest tworzony na podstawie czcionki pionowe GDI.</summary>
        <value>
          <see langword="true" /> Jeśli ten <see cref="T:System.Drawing.Font" /> pochodzi od klasy [! Czcionki pionowej include[ndptecgdi](~/includes/ndptecgdi-MD.MD)]; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość służy do określenia, czy czcionka jest zgodny z natywne kontrolki Win32 na platformach innych niż Unicode.  
  
 <xref:System.Drawing.Font.GdiVerticalFont%2A> Zwraca tylko `true` Jeśli ta czcionka została utworzona z klasycznego interfejsu GDI  
  
 Definicja czcionki LOGFONT lub HFONT.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="font.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera wartość skrótu dla tego <see cref="T:System.Drawing.Font" />.</summary>
        <returns>Wartość skrótu dla tego <see cref="T:System.Drawing.Font" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy <xref:System.Drawing.Font>.  
  
-   Pobiera wartość skrótu dla wybranej czcionki.  
  
-   Wyświetla okno komunikatu z wartością skrótu.  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicFontsExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHeight">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca wierszami tę czcionkę.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetHeight">
      <MemberSignature Language="C#" Value="public float GetHeight ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetHeight() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.GetHeight" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHeight () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float GetHeight();" />
      <MemberSignature Language="F#" Value="member this.GetHeight : unit -&gt; single" Usage="font.GetHeight " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca wierszami, w pikselach tę czcionkę.</summary>
        <returns>Wierszami, w pikselach tę czcionkę.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Interlinia <xref:System.Drawing.Font> jest pionową odległość między wierszami base dwóch następujących po sobie wierszy tekstu. W związku między wierszami zawiera puste miejsce między wierszami wraz z wysokość sam znak.  
  
 Jeśli <xref:System.Drawing.Font.Unit%2A> czcionki zostaje ustalona nic innego niż <xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=nameWithType>, wysokość (w pikselach) jest obliczany przy użyciu rozdzielczość ekranu w pionie. Na przykład załóżmy, że jednostka czcionki cala i rozmiar czcionki jest 0.3. Również Załóżmy, że dla odpowiedniej rodziny czcionek, wysokość em to 2048, a wierszami jest 2355. Do wyświetlania ekranu, który ma rozdzielczość w pionie 96 punktów na cal można obliczyć wysokość w następujący sposób:  
  
 2355*(0.3/2048)\*96 = 33.11719  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHeight">
      <MemberSignature Language="C#" Value="public float GetHeight (System.Drawing.Graphics graphics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetHeight(class System.Drawing.Graphics graphics) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.GetHeight(System.Drawing.Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float GetHeight(System::Drawing::Graphics ^ graphics);" />
      <MemberSignature Language="F#" Value="member this.GetHeight : System.Drawing.Graphics -&gt; single" Usage="font.GetHeight graphics" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="graphics">A <see cref="T:System.Drawing.Graphics" /> rozdzielczość w pionie, który przechowuje w punktach na cal, urządzenia, a także ustawienia jednostki strony i skala strony.</param>
        <summary>Zwraca odstępów między wierszami w bieżącej jednostce określonego <see cref="T:System.Drawing.Graphics" />, to czcionki.</summary>
        <returns>Wierszami, w pikselach tę czcionkę.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Interlinia <xref:System.Drawing.Font> jest pionową odległość między wierszami base dwóch następujących po sobie wierszy tekstu. W związku między wierszami zawiera puste miejsce między wierszami wraz z wysokość sam znak.  
  
 Jeśli <xref:System.Drawing.Font.Unit%2A> czcionki zostaje ustalona nic innego niż <xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=nameWithType>, wysokość w pikselach, jest obliczana przy użyciu określonego rozdzielczość w pionie <xref:System.Drawing.Graphics> obiektu. Na przykład załóżmy, że jednostka czcionki cala i rozmiar czcionki jest 0.3. Również Załóżmy, że dla odpowiedniej rodziny czcionek, wysokość em to 2048, a wierszami jest 2355. Jeśli <xref:System.Drawing.Graphics> obiekt ma <xref:System.Drawing.Font.Unit%2A> wartość właściwości <xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=nameWithType> i <xref:System.Drawing.Graphics.DpiY%2A> wartość właściwości 96 punktów na cal, wysokość jest obliczana w następujący sposób:  
  
 2355*(0.3/2048)\*96 = 33.1171875  
  
 Tym samym przykładzie załóżmy, że <xref:System.Drawing.Font.Unit%2A> właściwość <xref:System.Drawing.Graphics> obiekt jest ustawiony na <xref:System.Drawing.GraphicsUnit.Millimeter?displayProperty=nameWithType> zamiast <xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=nameWithType>. (Przy użyciu 1 cal = 25,4 milimetry), a następnie wysokość w milimetrach, jest obliczana w następujący sposób:  
  
 2355 *(0.3/2048) 25,4 = 8.762256  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy <xref:System.Drawing.Font>.  
  
-   Rysuje tekst na ekranie za pomocą nowego <xref:System.Drawing.Font>.  
  
-   Pobiera wysokość czcionki.  
  
-   Rysuje drugi wiersz tekstu bezpośrednio poniżej pierwszego wiersza.  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicFontsExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="graphics" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHeight">
      <MemberSignature Language="C#" Value="public float GetHeight (float dpi);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetHeight(float32 dpi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.GetHeight(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHeight (dpi As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float GetHeight(float dpi);" />
      <MemberSignature Language="F#" Value="member this.GetHeight : single -&gt; single" Usage="font.GetHeight dpi" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dpi" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dpi">Rozdzielczość w pionie, w punktach na cal, używane do obliczania wysokość czcionki.</param>
        <summary>Zwraca wysokość w pikselach to <see cref="T:System.Drawing.Font" /> podczas rysowania na urządzeniu z określona rozdzielczość w pionie.</summary>
        <returns>Wysokość w pikselach to <see cref="T:System.Drawing.Font" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Drawing.Font.Unit%2A> czcionki zostaje ustalona nic innego niż <xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=nameWithType>, wysokość (w pikselach) jest obliczany przy użyciu rozdzielczość ekranu w pionie. Na przykład załóżmy, że jednostka czcionki cala i rozmiar czcionki jest 0.3. Również Załóżmy, że dla odpowiedniej rodziny czcionek, wysokość em to 2048, a wierszami jest 2355. Jeśli określona rozdzielczość w pionie jest 96 punktów na cal, wysokość jest obliczana w następujący sposób:  
  
 2355*(0.3/2048)\*96 = 33.1171875  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public int Height { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Height" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Height" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Height As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Height { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Height : int" Usage="System.Drawing.Font.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wierszami tę czcionkę.</summary>
        <value>Wierszami, w pikselach tę czcionkę.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Odstępy jest pionową odległość między wierszami base dwóch następujących po sobie wierszy tekstu. W związku między wierszami zawiera puste miejsce między wierszami wraz z wysokość sam znak.  
  
 Jeśli <xref:System.Drawing.Font.Unit%2A> czcionki zostaje ustalona nic innego niż <xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=nameWithType>, wysokość (w pikselach) jest obliczany przy użyciu rozdzielczość ekranu w pionie. Na przykład załóżmy, że jednostka czcionki cala i rozmiar czcionki jest 0.3. Również Załóżmy, że dla odpowiedniej rodziny czcionek, wysokość em to 2048, a wierszami jest 2355. Do wyświetlania ekranu, który ma rozdzielczość w pionie 96 punktów na cal można obliczyć wysokość w następujący sposób:  
  
 2355*(0.3/2048)\*96 = 33.11719  
  
 Wartość zwrócona przez obiekt <xref:System.Drawing.Font.GetHeight%2A> metoda byłaby 33.11719 i wartość zwracana przez <xref:System.Drawing.Font.Height%2A> właściwość będzie 34. <xref:System.Drawing.Font.Height%2A> Właściwość ma wartość zwrócona przez obiekt <xref:System.Drawing.Font.GetHeight%2A>zaokrągloną do najbliższej liczby całkowitej.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSystemFont">
      <MemberSignature Language="C#" Value="public bool IsSystemFont { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSystemFont" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.IsSystemFont" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSystemFont As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSystemFont { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSystemFont : bool" Usage="System.Drawing.Font.IsSystemFont" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy czcionka jest elementem członkowskim <see cref="T:System.Drawing.SystemFonts" />.</summary>
        <value>
          <see langword="true" /> w przypadku czcionek członkiem <see cref="T:System.Drawing.SystemFonts" />; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy użytkownik zmieni czcionki systemowej <xref:System.Drawing.Font.IsSystemFont%2A> właściwość może zwrócić `true`nawet wtedy, gdy czcionka nie jest faktycznie czcionki systemowej. Aby uniknąć tej sytuacji, jeśli używasz czcionki systemowe w aplikacji, należy śledzić zmiany preferencji użytkownika obsługi <xref:Microsoft.Win32.SystemEvents.UserPreferenceChanging> lub <xref:Microsoft.Win32.SystemEvents.UserPreferenceChanged> zdarzeń.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Italic">
      <MemberSignature Language="C#" Value="public bool Italic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Italic" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Italic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Italic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Italic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Italic : bool" Usage="System.Drawing.Font.Italic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy czcionka ma italic zastosowanego stylu.</summary>
        <value>
          <see langword="true" /> Aby wskazać, że ta czcionka jest italic styl stosowany; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Drawing.Font.Style" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Drawing.Font.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Drawing.Design.FontNameEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.FontConverter/FontNameConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę twarzy <see cref="T:System.Drawing.Font" />.</summary>
        <value>Ciąg reprezentujący nazwę twarzy <see cref="T:System.Drawing.Font" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Drawing.Font.%23ctor%2A> Konstruktor i <xref:System.Drawing.Font.Size%2A>, <xref:System.Drawing.Font.SizeInPoints%2A>, <xref:System.Drawing.Font.Name%2A>, <xref:System.Drawing.Font.Style%2A>, i <xref:System.Drawing.Font.Unit%2A> właściwości. W tym przykładzie jest przeznaczony do użycia z formularzem Windows, który zawiera <xref:System.Windows.Forms.ComboBox> o nazwie `ComboBox1` , jest wypełniana przy użyciu ciągi "Większy zakres" i "Mniejsze". Wklej następujący kod do formularza i skojarz `ComboBox1_SelectedIndexChanged` metody z <xref:System.Windows.Forms.ComboBox.SelectedIndexChanged> zdarzenia <xref:System.Windows.Forms.ComboBox> kontroli.  
  
 [!code-cpp[System.Drawing.FontsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.FontsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.FontsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalFontName">
      <MemberSignature Language="C#" Value="public string OriginalFontName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OriginalFontName" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.OriginalFontName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OriginalFontName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OriginalFontName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OriginalFontName : string" Usage="System.Drawing.Font.OriginalFontName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę czcionki oryginalnie określony.</summary>
        <value>Ciąg reprezentujący nazwę czcionki oryginalnie określony.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa czcionki rzeczywiste i oryginalna nazwa czcionki mogą być różne. Wymagania systemowe, może spowodować użycie czcionki niż czcionki oryginalnie określony.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public float Size { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Size" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Size" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Size As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Size { float get(); };" />
      <MemberSignature Language="F#" Value="member this.Size : single" Usage="System.Drawing.Font.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera rozmiar em to <see cref="T:System.Drawing.Font" /> mierzoną w jednostkach określonych <see cref="P:System.Drawing.Font.Unit" /> właściwości.</summary>
        <value>Rozmiar em to <see cref="T:System.Drawing.Font" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Drawing.Font.%23ctor%2A> Konstruktor i <xref:System.Drawing.Font.Size%2A>, <xref:System.Drawing.Font.SizeInPoints%2A>, i <xref:System.Drawing.Font.Unit%2A> właściwości. W tym przykładzie jest przeznaczony do użycia z formularzem Windows, który zawiera <xref:System.Windows.Forms.ComboBox> o nazwie `ComboBox1` , jest wypełniana przy użyciu ciągi "Większy zakres" i "Mniejsze". Wklej następujący kod do formularza i skojarz `ComboBox1_SelectedIndexChanged` metody z <xref:System.Windows.Forms.ComboBox.SelectedIndexChanged> zdarzenia <xref:System.Windows.Forms.ComboBox> kontroli.  
  
 [!code-cpp[System.Drawing.FontsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.FontsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.FontsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeInPoints">
      <MemberSignature Language="C#" Value="public float SizeInPoints { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 SizeInPoints" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.SizeInPoints" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SizeInPoints As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float SizeInPoints { float get(); };" />
      <MemberSignature Language="F#" Value="member this.SizeInPoints : single" Usage="System.Drawing.Font.SizeInPoints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera rozmiar em punktów, to <see cref="T:System.Drawing.Font" />.</summary>
        <value>Em wielkości punktów, to <see cref="T:System.Drawing.Font" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Drawing.Font.%23ctor%2A> Konstruktor i <xref:System.Drawing.Font.Size%2A>, <xref:System.Drawing.Font.SizeInPoints%2A>, i <xref:System.Drawing.Font.Unit%2A> właściwości. W tym przykładzie jest przeznaczony do użycia z formularzem Windows, który zawiera <xref:System.Windows.Forms.ComboBox> o nazwie `ComboBox1` , jest wypełniana przy użyciu ciągi "Większy zakres" i "Mniejsze". Wklej następujący kod do formularza i skojarz `ComboBox1_SelectedIndexChanged` metody z <xref:System.Windows.Forms.ComboBox.SelectedIndexChanged> zdarzenia <xref:System.Windows.Forms.ComboBox> kontroli.  
  
 [!code-cpp[System.Drawing.FontsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.FontsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.FontsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Strikeout">
      <MemberSignature Language="C#" Value="public bool Strikeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Strikeout" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Strikeout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Strikeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Strikeout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Strikeout : bool" Usage="System.Drawing.Font.Strikeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy to <see cref="T:System.Drawing.Font" /> określa linii poziomej za pośrednictwem czcionki.</summary>
        <value>
          <see langword="true" /> Jeśli ten <see cref="T:System.Drawing.Font" /> ma linii poziomej przez nią; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public System.Drawing.FontStyle Style { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.FontStyle Style" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Style" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Style As FontStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::FontStyle Style { System::Drawing::FontStyle get(); };" />
      <MemberSignature Language="F#" Value="member this.Style : System.Drawing.FontStyle" Usage="System.Drawing.Font.Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.FontStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera styl informacje na temat tego <see cref="T:System.Drawing.Font" />.</summary>
        <value>A <see cref="T:System.Drawing.FontStyle" /> wyliczenie, które zawiera informacje dotyczące stylu w tym <see cref="T:System.Drawing.Font" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje sposób ustawiania <xref:System.Drawing.Font> właściwość przycisk Nowa pogrubioną czcionką za pomocą <xref:System.Drawing.FontStyle> wyliczenia. W tym przykładzie jest przeznaczona do użycia za pomocą interfejsu Windows Forms. Tworzenie formularza zawierającego przycisk o nazwie `Button1` i wklej następujący kod. Skojarz `Button1_Click` metody przy użyciu przycisku <xref:System.Windows.Forms.Control.Click> zdarzeń.  
  
 [!code-cpp[System.Drawing.MiscExamples#11](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#11)]
 [!code-csharp[System.Drawing.MiscExamples#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#11)]
 [!code-vb[System.Drawing.MiscExamples#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo si, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (si As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ si, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="si" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="si">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> Do wypełniania danymi.</param>
        <param name="context">Miejsce docelowe (zobacz <see cref="T:System.Runtime.Serialization.StreamingContext" />) tej serializacji.</param>
        <summary>Wypełnia <see cref="T:System.Runtime.Serialization.SerializationInfo" /> z dane potrzebne do zserializowania obiektu docelowego.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SystemFontName">
      <MemberSignature Language="C#" Value="public string SystemFontName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SystemFontName" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.SystemFontName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SystemFontName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SystemFontName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SystemFontName : string" Usage="System.Drawing.Font.SystemFontName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę czcionki systemowej, jeśli <see cref="P:System.Drawing.Font.IsSystemFont" /> właściwość zwraca <see langword="true" />.</summary>
        <value>Nazwa czcionki systemowej, jeśli <see cref="P:System.Drawing.Font.IsSystemFont" /> zwraca <see langword="true" />; w przeciwnym razie pusty ciąg ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwę zwróconą przez <xref:System.Drawing.Font.SystemFontName%2A> właściwość będzie miała jeden z elementów członkowskich <xref:System.Drawing.SystemFonts>, przekonwertowany na ciąg.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToHfont">
      <MemberSignature Language="C#" Value="public IntPtr ToHfont ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int ToHfont() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.ToHfont" />
      <MemberSignature Language="VB.NET" Value="Public Function ToHfont () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr ToHfont();" />
      <MemberSignature Language="F#" Value="member this.ToHfont : unit -&gt; nativeint" Usage="font.ToHfont " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca uchwyt do tego <see cref="T:System.Drawing.Font" />.</summary>
        <returns>Uchwyt Windows to <see cref="T:System.Drawing.Font" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przy użyciu tej metody, użytkownik musi dysponować wynikowy `Hfont` przy użyciu [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] `DeleteObject` metodę, aby zapewnić zasoby są zwalniane.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Drawing.Font> , a następnie pobiera uchwyt do tego <xref:System.Drawing.Font>. Przykład jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń.  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#6)]
 [!code-vb[System.Drawing.ClassicFontsExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Operacja nie powiodła się.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać dostęp do kodu niezarządzanego. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToLogFont">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy czcionkę logiczne GDI (<c>LOGFONT</c>) to struktura <see cref="T:System.Drawing.Font" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToLogFont">
      <MemberSignature Language="C#" Value="public void ToLogFont (object logFont);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ToLogFont(object logFont) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.ToLogFont(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ToLogFont (logFont As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ToLogFont(System::Object ^ logFont);" />
      <MemberSignature Language="F#" Value="member this.ToLogFont : obj -&gt; unit" Usage="font.ToLogFont logFont" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logFont" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="logFont">
          <see cref="T:System.Object" /> Do reprezentowania <see langword="LOGFONT" /> strukturę, która tworzy tę metodę.</param>
        <summary>Tworzy czcionkę logiczne GDI (<c>LOGFONT</c>) to struktura <see cref="T:System.Drawing.Font" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ustawia `logFont` parametru, aby wyniki konwersji czcionek. Aby uzyskać więcej informacji na temat logiczne czcionek, zobacz [struktury LOGFONT](http://msdn.microsoft.com/library/dd145037.aspx).  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać dostęp do kodu niezarządzanego. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ToLogFont">
      <MemberSignature Language="C#" Value="public void ToLogFont (object logFont, System.Drawing.Graphics graphics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ToLogFont(object logFont, class System.Drawing.Graphics graphics) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.ToLogFont(System.Object,System.Drawing.Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ToLogFont(System::Object ^ logFont, System::Drawing::Graphics ^ graphics);" />
      <MemberSignature Language="F#" Value="member this.ToLogFont : obj * System.Drawing.Graphics -&gt; unit" Usage="font.ToLogFont (logFont, graphics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logFont" Type="System.Object" />
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="logFont">
          <see cref="T:System.Object" /> Do reprezentowania <see langword="LOGFONT" /> strukturę, która tworzy tę metodę.</param>
        <param name="graphics">A <see cref="T:System.Drawing.Graphics" /> zapewniający dodatkowe informacje dotyczące <see langword="LOGFONT" /> struktury.</param>
        <summary>Tworzy czcionkę logiczne GDI (<c>LOGFONT</c>) to struktura <see cref="T:System.Drawing.Font" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ustawia `logFont` parametru, aby wyniki konwersji czcionek. Aby uzyskać więcej informacji na temat logiczne czcionek, zobacz [struktury LOGFONT](http://msdn.microsoft.com/library/dd145037.aspx).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="graphics" /> jest <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać dostęp do kodu niezarządzanego. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="font.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca ciąg czytelny dla człowieka reprezentację to <see cref="T:System.Drawing.Font" />.</summary>
        <returns>Ciąg, który przedstawia to <see cref="T:System.Drawing.Font" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwracany ciąg ma następujący format:  
  
 [Czcionki: nazwa =*fontName*, rozmiar =*rozmiar*, jednostki =*jednostek*, GDiCharSet =*gdiCharSet*, GdiVerticalFont =*logiczna *]  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy <xref:System.Drawing.Font>.  
  
-   Pobiera ciąg, który reprezentuje czcionkę.  
  
-   Wyświetla ciąg w oknie komunikatu.  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ClassicFontsExamples#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Underline">
      <MemberSignature Language="C#" Value="public bool Underline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Underline" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Underline" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Underline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Underline { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Underline : bool" Usage="System.Drawing.Font.Underline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy to <see cref="T:System.Drawing.Font" /> jest podkreślony.</summary>
        <value>
          <see langword="true" /> Jeśli ten <see cref="T:System.Drawing.Font" /> jest podkreślony; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unit">
      <MemberSignature Language="C#" Value="public System.Drawing.GraphicsUnit Unit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.GraphicsUnit Unit" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Unit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Unit As GraphicsUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::GraphicsUnit Unit { System::Drawing::GraphicsUnit get(); };" />
      <MemberSignature Language="F#" Value="member this.Unit : System.Drawing.GraphicsUnit" Usage="System.Drawing.Font.Unit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.FontConverter/FontUnitConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.GraphicsUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera jednostkę miary dla tego <see cref="T:System.Drawing.Font" />.</summary>
        <value>A <see cref="T:System.Drawing.GraphicsUnit" /> reprezentujący jednostkę miary dla tego <see cref="T:System.Drawing.Font" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Drawing.Font.%23ctor%2A> Konstruktor i <xref:System.Drawing.Font.Size%2A>, <xref:System.Drawing.Font.SizeInPoints%2A>, i <xref:System.Drawing.Font.Unit%2A> właściwości. W tym przykładzie jest przeznaczony do użycia z formularzem Windows, który zawiera <xref:System.Windows.Forms.ComboBox> o nazwie `ComboBox1` , jest wypełniana przy użyciu ciągi "Większy zakres" i "Mniejsze". Wklej następujący kod do formularza i skojarz `ComboBox1_SelectedIndexChanged` metody z <xref:System.Windows.Forms.ComboBox.SelectedIndexChanged> zdarzenia <xref:System.Windows.Forms.ComboBox> kontroli.  
  
 [!code-cpp[System.Drawing.FontsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.FontsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.FontsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>