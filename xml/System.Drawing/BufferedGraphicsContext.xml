<Type Name="BufferedGraphicsContext" FullName="System.Drawing.BufferedGraphicsContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6cebe4384e5215400e3718cf0dc794274c63580a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30452535" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class BufferedGraphicsContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BufferedGraphicsContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.BufferedGraphicsContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BufferedGraphicsContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class BufferedGraphicsContext sealed : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Udostępnia metody do tworzenia grafiki buforów, które mogą być używane dla podwójnego buforowania.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.BufferedGraphicsContext> Klasa umożliwia Implementowanie niestandardowych podwójnego buforowania grafiki. Użyj podwójnego buforowania grafiki można ograniczenie lub wyeliminowanie migotania powodowany przez ponownego narysowania powierzchni ekranu.  
  
> [!NOTE]
>  Najprostszym sposobem, aby użyć podwójnego buforowania jest skonfigurowanie <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> kontrolować Flaga stylu w kontroli przy użyciu <xref:System.Windows.Forms.Control.SetStyle%2A> metody. Ustawienie <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> flagi kontroli style kontrolki przekierowuje wszystkie malowanie formantu za pomocą domyślnego buforu grafiki, bez wymagania jakiegokolwiek dodatkowego kodu. Ta flaga jest ustawiona na `true` domyślnie.  
  
 <xref:System.Drawing.BufferedGraphicsContext> Klasa dostarcza metody do tworzenia i konfigurowania buforu grafiki. <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> Metoda tworzy <xref:System.Drawing.BufferedGraphics>, która jest otoki dla buforu grafiki, który udostępnia metody, można zapisać w buforze i renderowania jego zawartości na urządzeniach.  
  
 Możesz pobrać <xref:System.Drawing.BufferedGraphicsContext> bieżącej domeny aplikacji z statycznych <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType> właściwości. Uruchomione aplikacje intensywnie takich jak animacji, możesz utworzyć dedykowana <xref:System.Drawing.BufferedGraphicsContext> za pomocą konstruktora, ale dla większości aplikacji <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType> właściwości będą wystarczające.  
  
 Aby uzyskać więcej informacji na rysunku buforowanej grafiki i buforowania implementacji niestandardowych, zobacz [podwójne buforowana grafika](~/docs/framework/winforms/advanced/double-buffered-graphics.md) i [porady: ręczne zarządzanie buforowana grafika](~/docs/framework/winforms/advanced/how-to-manually-manage-buffered-graphics.md).  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak uzyskać <xref:System.Drawing.BufferedGraphicsContext> bieżącej domeny aplikacji. Ten kod jest częścią większego przykładu udostępnionego dla <xref:System.Drawing.BufferedGraphics> klasy.  
  
 [!code-cpp[BufferingExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#1)]
 [!code-csharp[BufferingExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#1)]
 [!code-vb[BufferingExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Drawing.BufferedGraphics" />
    <altmember cref="T:System.Drawing.BufferedGraphicsManager" />
    <altmember cref="F:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BufferedGraphicsContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BufferedGraphicsContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Drawing.BufferedGraphicsContext" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Graficznie znacznym aplikacji takich jak animacji, może czasem poprawić wydajność przy użyciu dedykowana <xref:System.Drawing.BufferedGraphicsContext> zamiast domyślnego wystąpienia pochodzącymi <xref:System.Drawing.BufferedGraphicsManager>. Umożliwia tworzenie i zarządzanie nimi buforów grafiki pojedynczo.  
  
> [!NOTE]
>  Zawsze należy wywołać <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> po zakończeniu przy użyciu dedykowana <xref:System.Drawing.BufferedGraphicsContext>.  
  
 Aby uzyskać więcej informacji na temat buforów dedykowanych grafiki zobacz [porady: ręczne zarządzanie buforowana grafika](~/docs/framework/winforms/advanced/how-to-manually-manage-buffered-graphics.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Allocate">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy buforu grafiki.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Allocate">
      <MemberSignature Language="C#" Value="public System.Drawing.BufferedGraphics Allocate (System.Drawing.Graphics targetGraphics, System.Drawing.Rectangle targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.BufferedGraphics Allocate(class System.Drawing.Graphics targetGraphics, valuetype System.Drawing.Rectangle targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Allocate(System.Drawing.Graphics,System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Allocate (targetGraphics As Graphics, targetRectangle As Rectangle) As BufferedGraphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::BufferedGraphics ^ Allocate(System::Drawing::Graphics ^ targetGraphics, System::Drawing::Rectangle targetRectangle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.BufferedGraphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetGraphics" Type="System.Drawing.Graphics" />
        <Parameter Name="targetRectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="targetGraphics">
          <see cref="T:System.Drawing.Graphics" /> Zgodnie z formatem pikseli dla nowego buforu.</param>
        <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle" /> wskazujący rozmiar buforu do utworzenia.</param>
        <summary>Tworzy buforu grafiki o określonym rozmiarze w formacie piksela określony <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>A <see cref="T:System.Drawing.BufferedGraphics" /> można narysować wymiarów określony w buforze.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wywoływania <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> metody z prostokąta, którego rozmiar przekracza wartość z <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> właściwości, tymczasowej <xref:System.Drawing.BufferedGraphicsContext> utworzone alokacji buforu i podaj tymczasowego kontekst dla buforu. Nowy <xref:System.Drawing.BufferedGraphicsContext> różni się od <xref:System.Drawing.BufferedGraphicsContext> dla aplikacji domeny i usunięciu automatycznie po <xref:System.Drawing.BufferedGraphics> zwrócony przez <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> usunięciu — metoda.  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano tworzenie buforu grafiki przy użyciu <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> metody. Ten kod jest częścią większego przykładu udostępnionego dla <xref:System.Drawing.BufferedGraphics> klasy.  
  
 [!code-cpp[BufferingExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#3)]
 [!code-csharp[BufferingExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#3)]
 [!code-vb[BufferingExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.BufferedGraphics" />
        <altmember cref="T:System.Drawing.Graphics" />
        <altmember cref="T:System.Drawing.Rectangle" />
      </Docs>
    </Member>
    <Member MemberName="Allocate">
      <MemberSignature Language="C#" Value="public System.Drawing.BufferedGraphics Allocate (IntPtr targetDC, System.Drawing.Rectangle targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.BufferedGraphics Allocate(native int targetDC, valuetype System.Drawing.Rectangle targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Allocate(System.IntPtr,System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Allocate (targetDC As IntPtr, targetRectangle As Rectangle) As BufferedGraphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::BufferedGraphics ^ Allocate(IntPtr targetDC, System::Drawing::Rectangle targetRectangle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.BufferedGraphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDC" Type="System.IntPtr" />
        <Parameter Name="targetRectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="targetDC">
          <see cref="T:System.IntPtr" /> Do kontekstu urządzenia zgodnie z formatem pikseli nowe buforu do.</param>
        <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle" /> wskazujący rozmiar buforu do utworzenia.</param>
        <summary>Tworzy buforu grafiki o określonym rozmiarze w formacie piksela określony <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>A <see cref="T:System.Drawing.BufferedGraphics" /> można narysować wymiarów określony w buforze.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wywoływania <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> metody z prostokąta, którego rozmiar przekracza wartość z <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> właściwości, tymczasowej <xref:System.Drawing.BufferedGraphicsContext> utworzone alokacji buforu i podaj tymczasowego kontekst dla buforu. Nowy <xref:System.Drawing.BufferedGraphicsContext> różni się od <xref:System.Drawing.BufferedGraphicsContext> dla aplikacji domeny i usunięciu automatycznie po <xref:System.Drawing.BufferedGraphics> zwrócony przez <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> usunięciu — metoda.  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano tworzenie buforu grafiki przy użyciu <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> metody. Ten kod jest częścią większego przykładu udostępnionego dla <xref:System.Drawing.BufferedGraphics> klasy.  
  
 [!code-cpp[BufferingExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#4)]
 [!code-csharp[BufferingExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#4)]
 [!code-vb[BufferingExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#4)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać dostęp do kodu niezarządzanego. Wyliczenie pokrewne: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.Drawing.BufferedGraphics" />
        <altmember cref="T:System.IntPtr" />
        <altmember cref="T:System.Drawing.Rectangle" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszelkie zasoby używane przez <see cref="T:System.Drawing.BufferedGraphicsContext" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> po zakończeniu przy użyciu <xref:System.Drawing.BufferedGraphicsContext>. <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> Pozostawia metody <xref:System.Drawing.BufferedGraphicsContext> w stanie uniemożliwiającym jego używanie. Po wywołaniu <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A>, konieczne jest zwolnienie wszystkich odwołań do <xref:System.Drawing.BufferedGraphicsContext> , moduł zbierający elementy bezużyteczne mógł odzyskać pamięć który <xref:System.Drawing.BufferedGraphicsContext> klasy. Aby uzyskać więcej informacji, zobacz [czyszczenie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md) i [implementacja metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Wywoływanie zawsze <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> przed zwolnieniem ostatniego odwołania do <xref:System.Drawing.BufferedGraphicsContext>. W przeciwnym razie używa zasobów nie zostanie zwolniona do wywołania modułu zbierającego elementy bezużyteczne <xref:System.Object.Finalize%2A> metody <xref:System.Drawing.BufferedGraphicsContext>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~BufferedGraphicsContext ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!BufferedGraphicsContext ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Umożliwia obiektu, próby zwolnienia zasobów i wykonywać inne operacje oczyszczania, przed jego jest odzyskana przez wyrzucanie elementów bezużytecznych.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Invalidate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa bieżący bufor grafiki, jeśli bufor przydzielone i jeszcze nie została usunięta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli buforu grafiki jest w użyciu, zostanie ona oznaczona do usunięcia jak bezpłatnie; w przeciwnym razie go zostaną usunięte natychmiast.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumBuffer">
      <MemberSignature Language="C#" Value="public System.Drawing.Size MaximumBuffer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size MaximumBuffer" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.BufferedGraphicsContext.MaximumBuffer" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumBuffer As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size MaximumBuffer { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia maksymalny rozmiar buforu do użycia.</summary>
        <value>A <see cref="T:System.Drawing.Size" /> wskazująca maksymalny rozmiar buforu wymiarów.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość służy do pobierania lub ustawiania maksymalne rozmiary buforu, który ma być przechowywana w pamięci. Może alokować buforu o dowolnej wielkości, jednak żadnego buforu o wymiarach większa niż <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> rozmiar będzie tymczasowo używany, a następnie zostaje odrzucone podczas <xref:System.Drawing.BufferedGraphics> obiektu zostanie zwolniony.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, ustawienie maksymalnego rozmiaru buforu dla <xref:System.Drawing.BufferedGraphicsContext>. Ten kod jest częścią większego przykładu udostępnionego dla <xref:System.Drawing.BufferedGraphics> klasy.  
  
 [!code-cpp[BufferingExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#2)]
 [!code-csharp[BufferingExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#2)]
 [!code-vb[BufferingExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Wysokość lub szerokość rozmiaru jest mniejsza lub równa zero.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">do zezwalania na dostęp użytkownika do wszystkich okien. Wyliczenie pokrewne: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>