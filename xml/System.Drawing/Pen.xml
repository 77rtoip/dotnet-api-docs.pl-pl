<Type Name="Pen" FullName="System.Drawing.Pen">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="67192e54cf1817645dcc389faea85254def778b7" />
    <Meta Name="ms.sourcegitcommit" Value="d40b35262cbc997b79bf76da3a39ccf59b738efc" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="12/05/2018" />
    <Meta Name="ms.locfileid" Value="52917918" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Pen : MarshalByRefObject, ICloneable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Pen extends System.MarshalByRefObject implements class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Pen" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Pen&#xA;Inherits MarshalByRefObject&#xA;Implements ICloneable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Pen sealed : MarshalByRefObject, ICloneable, IDisposable" />
  <TypeSignature Language="F#" Value="type Pen = class&#xA;    inherit MarshalByRefObject&#xA;    interface ICloneable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.1</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Definiuje obiekt używany do rysowania linii i krzywych. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Drawing.Pen> rysuje określona szerokość i stylu. Użyj <xref:System.Drawing.Drawing2D.DashStyle> właściwości, aby narysować kilka odmian linii kreskowanej. Wiersz narysowanymi przez <xref:System.Drawing.Pen> można wypełnić różne style wypełnienia, w tym jednolitymi kolorami i tekstury. Styl wypełnienia zależy od pędzla lub teksturę, która jest używana jako obiekt wypełnienia.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, konstruowanie <xref:System.Drawing.Pen> z <xref:System.Drawing.Pen.Brush%2A> i efekty ustawienia <xref:System.Drawing.Pen.LineJoin%2A> właściwość <xref:System.Drawing.Pen>.  
  
 W tym przykładzie jest przeznaczona do użycia za pomocą interfejsu Windows Forms. Wklej kod do formularza i wywołania `ShowLineJoin` metody obsługi danych formularza <xref:System.Windows.Forms.Control.Paint> zdarzenie, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.PensExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.PensExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Drawing.Pen" /> klasy przy użyciu określonego koloru.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Pen (System.Drawing.Brush brush);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Brush brush) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.#ctor(System.Drawing.Brush)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Pen(System::Drawing::Brush ^ brush);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Pen : System.Drawing.Brush -&gt; System.Drawing.Pen" Usage="new System.Drawing.Pen brush" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
      </Parameters>
      <Docs>
        <param name="brush">A <see cref="T:System.Drawing.Brush" /> określający właściwości wypełnienia <see cref="T:System.Drawing.Pen" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Drawing.Pen" /> klasy z określonym <see cref="T:System.Drawing.Brush" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Pen.Brush%2A> Właściwość określa sposób, w jaki <xref:System.Drawing.Pen> Rysuje linie. Wiersze są rysowane tak, jakby są wypełnione prostokątów, w których cech określonych <xref:System.Drawing.Brush>.  
  
 <xref:System.Drawing.Pen.Width%2A> Właściwości nowej <xref:System.Drawing.Pen> jest ustawiona na 1 (opcja domyślna).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, konstruowanie <xref:System.Drawing.Pen> z <xref:System.Drawing.Pen.Brush%2A> i efekty ustawienia <xref:System.Drawing.Pen.LineJoin%2A> właściwość <xref:System.Drawing.Pen>.  
  
 W tym przykładzie jest przeznaczona do użycia za pomocą interfejsu Windows Forms. Wklej kod do formularza i wywołania `ShowLineJoin` metody obsługi danych formularza <xref:System.Windows.Forms.Control.Paint> zdarzenie, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.PensExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.PensExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Pen (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.#ctor(System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Pen(System::Drawing::Color color);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Pen : System.Drawing.Color -&gt; System.Drawing.Pen" Usage="new System.Drawing.Pen color" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color">A <see cref="T:System.Drawing.Color" /> strukturę, która określa kolor tego <see cref="T:System.Drawing.Pen" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Drawing.Pen" /> klasy przy użyciu określonego koloru.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Color> Właściwość jest ustawiona na kolor określony przy użyciu `color` parametru. <xref:System.Drawing.Pen.Width%2A> Właściwość jest ustawiona na 1 (opcja domyślna).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Pen (System.Drawing.Brush brush, float width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Brush brush, float32 width) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.#ctor(System.Drawing.Brush,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Pen(System::Drawing::Brush ^ brush, float width);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Pen : System.Drawing.Brush * single -&gt; System.Drawing.Pen" Usage="new System.Drawing.Pen (brush, width)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="width" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">A <see cref="T:System.Drawing.Brush" /> który określa właściwości to <see cref="T:System.Drawing.Pen" />.</param>
        <param name="width">Szerokość nowej <see cref="T:System.Drawing.Pen" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Drawing.Pen" /> klasy z określonym <see cref="T:System.Drawing.Brush" /> i <see cref="P:System.Drawing.Pen.Width" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Brush> Jest ustawiona na kolor określone we `brush` parametru <xref:System.Drawing.Pen.Width%2A> właściwość jest ustawiona na wartość określoną w `width` parametru i jednostki są ustawione na <xref:System.Drawing.GraphicsUnit.World>.  
  
 Należy pamiętać, że `brush` parametr określa również <xref:System.Drawing.Color> właściwość to <xref:System.Drawing.Pen>.  
  
 A `width` 0 spowoduje <xref:System.Drawing.Pen> rysowania tak, jakby szerokość zostały 1.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Drawing.Pen> i pokazuje wpływ ustawienia <xref:System.Drawing.Pen.StartCap%2A> i <xref:System.Drawing.Pen.EndCap%2A> właściwości <xref:System.Drawing.Pen>.  
  
 W tym przykładzie jest przeznaczona do użycia za pomocą interfejsu Windows Forms. Wklej kod do formularza i wywołania `ShowStartAndEndCaps` metody obsługi danych formularza <xref:System.Windows.Forms.Control.Paint> zdarzenie, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.ImageExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ImageExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ImageExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ImageExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ImageExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ImageExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Pen (System.Drawing.Color color, float width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Color color, float32 width) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.#ctor(System.Drawing.Color,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Pen(System::Drawing::Color color, float width);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Pen : System.Drawing.Color * single -&gt; System.Drawing.Pen" Usage="new System.Drawing.Pen (color, width)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
        <Parameter Name="width" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="color">A <see cref="T:System.Drawing.Color" /> strukturę, która określa kolor tego <see cref="T:System.Drawing.Pen" />.</param>
        <param name="width">Wartość wskazującą szerokość to <see cref="T:System.Drawing.Pen" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Drawing.Pen" /> klasy z określonym <see cref="T:System.Drawing.Color" /> i <see cref="P:System.Drawing.Pen.Width" /> właściwości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Color> Właściwość jest ustawiona na kolor określony przy użyciu `color` parametru. <xref:System.Drawing.Pen.Width%2A> Właściwość jest ustawiona na wartość określoną w `width` parametru. A `width` 0 spowoduje <xref:System.Drawing.Pen> rysowania tak, jakby szerokość zostały 1.  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano tworzenie <xref:System.Drawing.Pen> i efekty ustawienia <xref:System.Drawing.Pen.DashCap%2A>, <xref:System.Drawing.Pen.DashPattern%2A>, i <xref:System.Drawing.Graphics.SmoothingMode%2A> właściwości.  
  
 W tym przykładzie jest przeznaczona do użycia za pomocą interfejsu Windows Forms. Wklej kod do formularza i wywołania `ShowPensAndSmoothingMode` metody obsługi danych formularza <xref:System.Windows.Forms.Control.Paint> zdarzenie, przekazując e jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.PensExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.PensExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Alignment">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.PenAlignment Alignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.PenAlignment Alignment" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.Alignment" />
      <MemberSignature Language="VB.NET" Value="Public Property Alignment As PenAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::PenAlignment Alignment { System::Drawing::Drawing2D::PenAlignment get(); void set(System::Drawing::Drawing2D::PenAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.Alignment : System.Drawing.Drawing2D.PenAlignment with get, set" Usage="System.Drawing.Pen.Alignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.PenAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub Ustawia wyrównanie dla tego <see cref="T:System.Drawing.Pen" />.</summary>
        <value>A <see cref="T:System.Drawing.Drawing2D.PenAlignment" /> reprezentujący wyrównania tego <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość określa sposób, w jaki <xref:System.Drawing.Pen> rysuje krzywych zamknięte i wielokątów. <xref:System.Drawing.Drawing2D.PenAlignment> Wyliczenie określa pięciu wartości; jednak tylko dwie wartości —<xref:System.Drawing.Drawing2D.PenAlignment.Center> i <xref:System.Drawing.Drawing2D.PenAlignment.Inset>— zmieni się wygląd rysowane linii. <xref:System.Drawing.Drawing2D.PenAlignment.Center> jest to wartość domyślna tej właściwości i określa, że grubość pióra skupia się na kontur krzywej lub wielokąta. Wartość <xref:System.Drawing.Drawing2D.PenAlignment.Inset> dla tej właściwości określa, że grubość pióra, znajduje się wewnątrz kontur krzywej lub wielokąta. Pozostałe trzy wartości <xref:System.Drawing.Drawing2D.PenAlignment.Right>, <xref:System.Drawing.Drawing2D.PenAlignment.Left>, i <xref:System.Drawing.Drawing2D.PenAlignment.Outset>, wynikiem będzie pióra, który skupia się.  
  
 A <xref:System.Drawing.Pen> zawierający jego wyrównania równa <xref:System.Drawing.Drawing2D.PenAlignment.Inset> umożliwia uzyskanie wyniki nie są wiarygodne, czasami rysowania w położeniu wstawki, a czasami wyśrodkowany pozycji. Ponadto pióro wstawki nie może być używany do rysowania linii złożone i nie jest możliwe rysowanie linii kreskowanej za <xref:System.Drawing.Drawing2D.DashCap.Triangle> kreski limity.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Określona wartość nie jest członkiem <see cref="T:System.Drawing.Drawing2D.PenAlignment" />.</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Drawing.Pen.Alignment" /> Właściwość jest ustawiona na niezmienne <see cref="T:System.Drawing.Pen" />, takich jak zwracany przez <see cref="T:System.Drawing.Pens" /> klasy.</exception>
      </Docs>
    </Member>
    <Member MemberName="Brush">
      <MemberSignature Language="C#" Value="public System.Drawing.Brush Brush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Brush Brush" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.Brush" />
      <MemberSignature Language="VB.NET" Value="Public Property Brush As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Brush ^ Brush { System::Drawing::Brush ^ get(); void set(System::Drawing::Brush ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Brush : System.Drawing.Brush with get, set" Usage="System.Drawing.Pen.Brush" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Drawing.Brush" /> określający atrybutów tego <see cref="T:System.Drawing.Pen" />.</summary>
        <value>A <see cref="T:System.Drawing.Brush" /> określający atrybutów tego <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przypisanie tej właściwości powoduje, że pióro Rysowanie wypełnionego linii i krzywych. Zastępuje ona <xref:System.Drawing.Color> właściwość <xref:System.Drawing.Pen>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Drawing.Pen.Brush" /> Właściwość jest ustawiona na niezmienne <see cref="T:System.Drawing.Pen" />, takich jak zwracany przez <see cref="T:System.Drawing.Pens" /> klasy.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="pen.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy dokładną kopię tego <see cref="T:System.Drawing.Pen" />.</summary>
        <returns>
          <see cref="T:System.Object" /> Mogą być rzutowane na <see cref="T:System.Drawing.Pen" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy <xref:System.Drawing.Pen>.  
  
-   Tworzy kopię tego pióra.  
  
-   Rysuje linię z ekranem przy jej użyciu pióra.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicPenExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicPenExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Color">
      <MemberSignature Language="C#" Value="public System.Drawing.Color Color { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color Color" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.Color" />
      <MemberSignature Language="VB.NET" Value="Public Property Color As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color Color { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.Color : System.Drawing.Color with get, set" Usage="System.Drawing.Pen.Color" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia kolor tego <see cref="T:System.Drawing.Pen" />.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> strukturę, która reprezentuje kolor tego <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Drawing.Pen.Color" /> Właściwość jest ustawiona na niezmienne <see cref="T:System.Drawing.Pen" />, takich jak zwracany przez <see cref="T:System.Drawing.Pens" /> klasy.</exception>
      </Docs>
    </Member>
    <Member MemberName="CompoundArray">
      <MemberSignature Language="C#" Value="public float[] CompoundArray { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32[] CompoundArray" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.CompoundArray" />
      <MemberSignature Language="VB.NET" Value="Public Property CompoundArray As Single()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;float&gt; ^ CompoundArray { cli::array &lt;float&gt; ^ get(); void set(cli::array &lt;float&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CompoundArray : single[] with get, set" Usage="System.Drawing.Pen.CompoundArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tablicę wartości, określający złożone pióra. Złożone Pióro rysuje złożonego składa się z równoległych i miejsca do magazynowania.</summary>
        <value>Tablica liczb rzeczywistych, określający złożone tablicy. Elementy w tablicy musi być w rosnącej kolejności, nie jest mniejszy niż 0 i nie większa niż 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wiersz złożonego składa się z alternatywnych, równoległe linie i miejsca do magazynowania o różnych szerokościach. Wartości w tablicy Określ punktów początkowych każdego składnika złożone wiersza względem szerokości pióra. Pierwsza wartość w tablicy Określa, gdzie pierwszy składnik (wiersz), rozpoczyna się jako ułamek odległość między grubość pióra. Druga wartość w tablicy Określa początek następny składnik (spację) jako ułamek odległość między grubość pióra. Końcowa wartość w tablicy Określa, gdzie kończy się ostatnim składnikiem.  
  
 Załóżmy, że chcesz Pióro narysuj dwie linie, gdzie szerokość pierwszy wiersz jest 20 procent szerokość pióra, szerokość obszaru, który oddziela dwa wiersze wynosi 50 procent pióra "s szerokości i szerokość drugi wiersz jest 30 procent pióra Szerokość. Rozpocznij od utworzenia <xref:System.Drawing.Pen> oraz tablicę liczb rzeczywistych. Ustaw złożone macierz, przekazując tablicę z wartościami 0.0, 0.2 i 0,7 oraz 1.0 do tej właściwości.  
  
 Nie używaj tej właściwości, jeśli <xref:System.Drawing.Pen> ma jego <xref:System.Drawing.Pen.Alignment%2A> właściwością <xref:System.Drawing.Drawing2D.PenAlignment.Inset>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Drawing.Pen.CompoundArray" /> Właściwość jest ustawiona na niezmienne <see cref="T:System.Drawing.Pen" />, takich jak zwracany przez <see cref="T:System.Drawing.Pens" /> klasy.</exception>
      </Docs>
    </Member>
    <Member MemberName="CustomEndCap">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CustomLineCap CustomEndCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.CustomLineCap CustomEndCap" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.CustomEndCap" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomEndCap As CustomLineCap" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CustomLineCap ^ CustomEndCap { System::Drawing::Drawing2D::CustomLineCap ^ get(); void set(System::Drawing::Drawing2D::CustomLineCap ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CustomEndCap : System.Drawing.Drawing2D.CustomLineCap with get, set" Usage="System.Drawing.Pen.CustomEndCap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CustomLineCap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia limit niestandardowy do użycia na koniec linii z tym <see cref="T:System.Drawing.Pen" />.</summary>
        <value>A <see cref="T:System.Drawing.Drawing2D.CustomLineCap" /> reprezentujący zakończenie używany na końcu linii z tym <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Drawing.Pen.CustomEndCap" /> Właściwość jest ustawiona na niezmienne <see cref="T:System.Drawing.Pen" />, takich jak zwracany przez <see cref="T:System.Drawing.Pens" /> klasy.</exception>
      </Docs>
    </Member>
    <Member MemberName="CustomStartCap">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CustomLineCap CustomStartCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.CustomLineCap CustomStartCap" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.CustomStartCap" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomStartCap As CustomLineCap" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CustomLineCap ^ CustomStartCap { System::Drawing::Drawing2D::CustomLineCap ^ get(); void set(System::Drawing::Drawing2D::CustomLineCap ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CustomStartCap : System.Drawing.Drawing2D.CustomLineCap with get, set" Usage="System.Drawing.Pen.CustomStartCap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CustomLineCap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia limit niestandardowy do użycia na początku linii z tym <see cref="T:System.Drawing.Pen" />.</summary>
        <value>A <see cref="T:System.Drawing.Drawing2D.CustomLineCap" /> reprezentujący zakończenie na początku linii z tym <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Drawing.Pen.CustomStartCap" /> Właściwość jest ustawiona na niezmienne <see cref="T:System.Drawing.Pen" />, takich jak zwracany przez <see cref="T:System.Drawing.Pens" /> klasy.</exception>
      </Docs>
    </Member>
    <Member MemberName="DashCap">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.DashCap DashCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.DashCap DashCap" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.DashCap" />
      <MemberSignature Language="VB.NET" Value="Public Property DashCap As DashCap" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::DashCap DashCap { System::Drawing::Drawing2D::DashCap get(); void set(System::Drawing::Drawing2D::DashCap value); };" />
      <MemberSignature Language="F#" Value="member this.DashCap : System.Drawing.Drawing2D.DashCap with get, set" Usage="System.Drawing.Pen.DashCap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.DashCap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia styl zakończenia, używane na końcu kresek, które tworzą linii kreskowanej z tym <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Jedną z <see cref="T:System.Drawing.Drawing2D.DashCap" /> wartości, które reprezentuje styl zakończenia, używane na początku i na końcu kresek, które tworzą linii kreskowanej z tym <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość nie jest ustawiona <xref:System.Drawing.Drawing2D.DashCap.Triangle> Jeśli <xref:System.Drawing.Pen> ma jego <xref:System.Drawing.Pen.Alignment%2A> właściwością <xref:System.Drawing.Drawing2D.PenAlignment.Inset>.  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano tworzenie <xref:System.Drawing.Pen> i efekty ustawienia <xref:System.Drawing.Pen.DashCap%2A>, <xref:System.Drawing.Pen.DashPattern%2A>, i <xref:System.Drawing.Graphics.SmoothingMode%2A> właściwości.  
  
 W tym przykładzie jest przeznaczona do użycia za pomocą interfejsu Windows Forms. Wklej kod do formularza i wywołania `ShowPensAndSmoothingMode` metody obsługi danych formularza <xref:System.Windows.Forms.Control.Paint> zdarzenie, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.PensExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.PensExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Określona wartość nie jest członkiem <see cref="T:System.Drawing.Drawing2D.DashCap" />.</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Drawing.Pen.DashCap" /> Właściwość jest ustawiona na niezmienne <see cref="T:System.Drawing.Pen" />, takich jak zwracany przez <see cref="T:System.Drawing.Pens" /> klasy.</exception>
      </Docs>
    </Member>
    <Member MemberName="DashOffset">
      <MemberSignature Language="C#" Value="public float DashOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DashOffset" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.DashOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property DashOffset As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float DashOffset { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.DashOffset : single with get, set" Usage="System.Drawing.Pen.DashOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub Ustawia odległość od samego początku linii na początku wzorzec dash.</summary>
        <value>Odległość od samego początku linii na początku wzorzec dash.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Drawing.Pen.DashOffset" /> Właściwość jest ustawiona na niezmienne <see cref="T:System.Drawing.Pen" />, takich jak zwracany przez <see cref="T:System.Drawing.Pens" /> klasy.</exception>
      </Docs>
    </Member>
    <Member MemberName="DashPattern">
      <MemberSignature Language="C#" Value="public float[] DashPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32[] DashPattern" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.DashPattern" />
      <MemberSignature Language="VB.NET" Value="Public Property DashPattern As Single()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;float&gt; ^ DashPattern { cli::array &lt;float&gt; ^ get(); void set(cli::array &lt;float&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DashPattern : single[] with get, set" Usage="System.Drawing.Pen.DashPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tablicę niestandardowe łączniki i spacje.</summary>
        <value>Tablica liczb rzeczywistych określa długości systemu przemiennej kresek i spacji w linii kreskowanej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przypisywanie wartości innych niż `null` do tej właściwości spowoduje ustawienie <xref:System.Drawing.Drawing2D.DashStyle> właściwości dla tego <xref:System.Drawing.Pen> do <xref:System.Drawing.Drawing2D.DashStyle.Custom>.  
  
 Elementy w `dashArray` tablicy Ustaw długość każdego dash i miejsca we wzorcu dash. Pierwszy element określa długość kreski, drugi element ustawia długość przestrzeni, trzeci element ustawia długość kreski i tak dalej. W związku z tym każdy element powinien być liczbą dodatnią różna od zera.  
  
 Długość każdego dash i miejsca we wzorcu dash jest iloczyn wartości elementu w tablicy i szerokość <xref:System.Drawing.Pen>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje skutki ustawienie <xref:System.Drawing.Pen.DashCap%2A>, <xref:System.Drawing.Pen.DashPattern%2A>, i <xref:System.Drawing.Graphics.SmoothingMode%2A> właściwości.  
  
 W tym przykładzie jest przeznaczona do użycia za pomocą interfejsu Windows Forms. Wklej kod do formularza i wywołania `ShowPensAndSmoothingMode` metody obsługi danych formularza <xref:System.Windows.Forms.Control.Paint> zdarzenie, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.PensExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.PensExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Drawing.Pen.DashPattern" /> Właściwość jest ustawiona na niezmienne <see cref="T:System.Drawing.Pen" />, takich jak zwracany przez <see cref="T:System.Drawing.Pens" /> klasy.</exception>
      </Docs>
    </Member>
    <Member MemberName="DashStyle">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.DashStyle DashStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.DashStyle DashStyle" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.DashStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property DashStyle As DashStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::DashStyle DashStyle { System::Drawing::Drawing2D::DashStyle get(); void set(System::Drawing::Drawing2D::DashStyle value); };" />
      <MemberSignature Language="F#" Value="member this.DashStyle : System.Drawing.Drawing2D.DashStyle with get, set" Usage="System.Drawing.Pen.DashStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.DashStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia styl używany dla linii kreskowanej z tym <see cref="T:System.Drawing.Pen" />.</summary>
        <value>A <see cref="T:System.Drawing.Drawing2D.DashStyle" /> reprezentujący styl linii kreskowanej z tym <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Drawing.Drawing2D.DashStyle.Custom> dla tej właściwości określa, że niestandardowe wzór z kresek i spacji, zdefiniowane przez <xref:System.Drawing.Pen.DashPattern%2A> właściwości do wypełnienia środkowego linii z tym <xref:System.Drawing.Pen>. Jeśli wartość tej właściwości jest <xref:System.Drawing.Drawing2D.DashStyle.Custom> i wartość <xref:System.Drawing.Pen.DashPattern%2A> właściwość `null`, Pióro rysuje linie ciągłe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Drawing.Pen.DashStyle" /> Właściwość jest ustawiona na niezmienne <see cref="T:System.Drawing.Pen" />, takich jak zwracany przez <see cref="T:System.Drawing.Pens" /> klasy.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="pen.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszelkie zasoby używane przez to <see cref="T:System.Drawing.Pen" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywoływanie <xref:System.Drawing.Pen.Dispose%2A> umożliwia zasoby używane przez to <xref:System.Drawing.Brush> zostają przeniesione do innych celów.  
  
 Wywołaj <xref:System.Drawing.Pen.Dispose%2A> po zakończeniu przy użyciu <xref:System.Drawing.Pen>. <xref:System.Drawing.Pen.Dispose%2A> Pozostawia metoda <xref:System.Drawing.Pen> w stanie uniemożliwiającym jego używanie. Po wywołaniu <xref:System.Drawing.Pen.Dispose%2A>, trzeba zwolnić wszystkie odwołania do <xref:System.Drawing.Pen> , moduł zbierający elementy bezużyteczne mógł odzyskać pamięć, <xref:System.Drawing.Pen> zajmowaną przez wystąpienie. Aby uzyskać więcej informacji, zobacz [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) i [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Zawsze wywołuj <xref:System.Drawing.Pen.Dispose%2A> przed publikacją swoje ostatnie odwołanie do <xref:System.Drawing.Pen>. W przeciwnym razie zasobów jest przy użyciu nie zostanie zwolniona, dopóki moduł odśmiecania pamięci wywołuje <xref:System.Drawing.Pen> obiektu `Finalize` metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje skutki ustawienie <xref:System.Drawing.Pen.Width%2A> i <xref:System.Drawing.Pen.LineJoin%2A> właściwości i przedstawiono sposób wywoływania <xref:System.Drawing.Pen.Dispose%2A> metodę <xref:System.Drawing.Pen>.  
  
 W tym przykładzie jest przeznaczona do użycia za pomocą interfejsu Windows Forms. Wklej kod do formularza i wywołania `ShowLineJoin` metody obsługi danych formularza <xref:System.Windows.Forms.Control.Paint> zdarzenie, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.PensExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.PensExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndCap">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.LineCap EndCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.LineCap EndCap" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.EndCap" />
      <MemberSignature Language="VB.NET" Value="Public Property EndCap As LineCap" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::LineCap EndCap { System::Drawing::Drawing2D::LineCap get(); void set(System::Drawing::Drawing2D::LineCap value); };" />
      <MemberSignature Language="F#" Value="member this.EndCap : System.Drawing.Drawing2D.LineCap with get, set" Usage="System.Drawing.Pen.EndCap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.LineCap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia styl zakończenia, używane na końcu linii z tym <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Jedną z <see cref="T:System.Drawing.Drawing2D.LineCap" /> wartości, które reprezentuje styl zakończenia, używane na końcu linii z tym <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje skutki ustawienie <xref:System.Drawing.Pen.StartCap%2A> i <xref:System.Drawing.Pen.EndCap%2A> właściwości <xref:System.Drawing.Pen>.  
  
 W tym przykładzie jest przeznaczona do użycia za pomocą interfejsu Windows Forms. Wklej kod do formularza i wywołania `ShowStartAndEndCaps` metody obsługi danych formularza <xref:System.Windows.Forms.Control.Paint> zdarzenie, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.PensExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#2)]
 [!code-vb[System.Drawing.PensExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Określona wartość nie jest członkiem <see cref="T:System.Drawing.Drawing2D.LineCap" />.</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Drawing.Pen.EndCap" /> Właściwość jest ustawiona na niezmienne <see cref="T:System.Drawing.Pen" />, takich jak zwracany przez <see cref="T:System.Drawing.Pens" /> klasy.</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Pen ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Pen ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="pen.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Umożliwia obiektu spróbuj zwolnić zasoby i wykonywać inne operacje oczyszczania, zanim go jest odzyskiwane przez wyrzucanie elementów bezużytecznych.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineJoin">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.LineJoin LineJoin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.LineJoin LineJoin" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.LineJoin" />
      <MemberSignature Language="VB.NET" Value="Public Property LineJoin As LineJoin" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::LineJoin LineJoin { System::Drawing::Drawing2D::LineJoin get(); void set(System::Drawing::Drawing2D::LineJoin value); };" />
      <MemberSignature Language="F#" Value="member this.LineJoin : System.Drawing.Drawing2D.LineJoin with get, set" Usage="System.Drawing.Pen.LineJoin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.LineJoin</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia styl sprzężenia for the ends of dwóch kolejnych wierszy z tym <see cref="T:System.Drawing.Pen" />.</summary>
        <value>A <see cref="T:System.Drawing.Drawing2D.LineJoin" /> reprezentujący styl sprzężenia for the ends of dwóch kolejnych wierszy z tym <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Połączenie linii jest wspólne obszar, który jest tworzony przez dwa wiersze, w której kończy się spełniają lub nakładają się na siebie. Istnieją trzy style sprzężenia linii: ostre, faza i zaokrąglenia.  Po określeniu styl łączenia linii <xref:System.Drawing.Pen> obiektu, że zostanie zastosowany styl sprzężenia na połączone linie w dowolnym <xref:System.Drawing.Drawing2D.GraphicsPath> obiektu przy użyciu tego pióra. Poniższa ilustracja przedstawia wyniki przykład sprzężenia skośny wiersza.  
  
 ![Pióra](~/add/media/pens5.gif "pióra")  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje skutki ustawienie <xref:System.Drawing.Pen.Width%2A> i <xref:System.Drawing.Pen.LineJoin%2A> właściwości <xref:System.Drawing.Pen>.  
  
 W tym przykładzie jest przeznaczona do użycia za pomocą interfejsu Windows Forms. Wklej kod do formularza i wywołania `ShowLineJoin` metody obsługi danych formularza <xref:System.Windows.Forms.Control.Paint> zdarzenie, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs> .  
  
 [!code-cpp[System.Drawing.PensExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.PensExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.PensExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Drawing.Pen.LineJoin" /> Właściwość jest ustawiona na niezmienne <see cref="T:System.Drawing.Pen" />, takich jak zwracany przez <see cref="T:System.Drawing.Pens" /> klasy.</exception>
      </Docs>
    </Member>
    <Member MemberName="MiterLimit">
      <MemberSignature Language="C#" Value="public float MiterLimit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 MiterLimit" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.MiterLimit" />
      <MemberSignature Language="VB.NET" Value="Public Property MiterLimit As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float MiterLimit { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.MiterLimit : single with get, set" Usage="System.Drawing.Pen.MiterLimit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia limit grubość sprzężenia w rogu połączenia.</summary>
        <value>Limit grubość przyłączenia rogu połączenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Długości skosu jest odległość między przecięcia ściany wiersza wewnątrz sprzężenia przecięcia ściany wiersza spoza sprzężenia. Długość właściwości mogą być duże, gdy kąta między dwoma wierszami jest mała. Limit ukośnych jest dozwolony maksymalny stosunek długości skosu do szerokość pociągnięcia. Wartość domyślna to 10.0f.  
  
 Jeśli długości skosu sprzężenia wspólną przekracza limit wynoszący sprzężenia, aby utrzymać ją w ramach limitu sprzężenia wspólną ukośne jest sprzężenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Drawing.Pen.MiterLimit" /> Właściwość jest ustawiona na niezmienne <see cref="T:System.Drawing.Pen" />, takich jak zwracany przez <see cref="T:System.Drawing.Pens" /> klasy.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Mnoży macierzy transformacji dla tego <see cref="T:System.Drawing.Pen" /> przez określony <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.MultiplyTransform(System.Drawing.Drawing2D.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix);" />
      <MemberSignature Language="F#" Value="member this.MultiplyTransform : System.Drawing.Drawing2D.Matrix -&gt; unit" Usage="pen.MultiplyTransform matrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">
          <see cref="T:System.Drawing.Drawing2D.Matrix" /> Obiektu, przez którą chcesz pomnożyć macierzy transformacji.</param>
        <summary>Mnoży macierzy transformacji dla tego <see cref="T:System.Drawing.Pen" /> przez określony <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda dołącza mnożenie macierzy, określone w `matrix` parametr macierzy transformacji dla operacji mnożenia.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy <xref:System.Drawing.Pen>.  
  
-   Rysuje linię do ekranu.  
  
-   Mnoży macierzy transformacji pióra przez określony macierzy.  
  
-   Rysuje linię piórem przekształcone.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicPenExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicPenExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.MultiplyTransform : System.Drawing.Drawing2D.Matrix * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="pen.MultiplyTransform (matrix, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="matrix">
          <see cref="T:System.Drawing.Drawing2D.Matrix" /> Mnożenia macierzy transformacji.</param>
        <param name="order">Kolejność, w którym można wykonać operacji mnożenia.</param>
        <summary>Mnoży macierzy transformacji dla tego <see cref="T:System.Drawing.Pen" /> przez określony <see cref="T:System.Drawing.Drawing2D.Matrix" /> w określonej kolejności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda używa <xref:System.Drawing.Drawing2D.MatrixOrder> element wyliczenia (albo poprzedzić lub dołączyć) określony przez `order` parametru do przeprowadzania operacji mnożenia.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy <xref:System.Drawing.Pen>.  
  
-   Rysuje linię do ekranu.  
  
-   Mnoży macierzy transformacji pióra przez określony macierzy.  
  
-   Rysuje linię piórem przekształcone.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicPenExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicPenExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PenType">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.PenType PenType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.PenType PenType" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.PenType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PenType As PenType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::PenType PenType { System::Drawing::Drawing2D::PenType get(); };" />
      <MemberSignature Language="F#" Value="member this.PenType : System.Drawing.Drawing2D.PenType" Usage="System.Drawing.Pen.PenType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.PenType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera styl linii z tym <see cref="T:System.Drawing.Pen" />.</summary>
        <value>A <see cref="T:System.Drawing.Drawing2D.PenType" /> wyliczenie, które określa styl linii z tym <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Drawing.Pen> można narysować linie ciągłe, wypełnione wiersze lub teksturą wiersze, w zależności od stylu określonego parametrem członkiem <xref:System.Drawing.Drawing2D.PenType> wyliczenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetTransform">
      <MemberSignature Language="C#" Value="public void ResetTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetTransform() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.ResetTransform" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetTransform ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetTransform();" />
      <MemberSignature Language="F#" Value="member this.ResetTransform : unit -&gt; unit" Usage="pen.ResetTransform " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resetuje macierzy transformacji geometryczne, w tym <see cref="T:System.Drawing.Pen" /> tożsamości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy <xref:System.Drawing.Pen>.  
  
-   Ustawia macierzy transformacji pióra skalowania 2 razy w kierunku osi x.  
  
-   Rysuje linię do ekranu.  
  
-   Resetuje macierzy transformacji tożsamości.  
  
-   Rysuje drugi wiersz na ekranie.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicPenExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicPenExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RotateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obraca lokalne przekształcenia geometrycznych o określony kąt. Ta metoda dołącza obrót do przekształcenia.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.RotateTransform(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle);" />
      <MemberSignature Language="F#" Value="member this.RotateTransform : single -&gt; unit" Usage="pen.RotateTransform angle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="angle">Kąt obrotu.</param>
        <summary>Obraca lokalne przekształcenia geometrycznych o określony kąt. Ta metoda dołącza obrót do przekształcenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ kształt pióra jest cykliczna, rotację nie ma żadnego efektu widoczne, chyba że pióra jest skalowany w kierunku osi x i y.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy <xref:System.Drawing.Pen>.  
  
-   Rysuje prostokąt przy użyciu pióra.  
  
-   Skaluje pióra przez 2 godziny, w kierunku osi x.  
  
-   Obraca pióra 90 stopni w prawo.  
  
-   Rysuje prostokąt, drugi pokazują różnicę.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicPenExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicPenExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.RotateTransform : single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="pen.RotateTransform (angle, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="angle">Kąt obrotu.</param>
        <param name="order">A <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> , określa, czy dołączyć lub Dodaj macierz obrotu.</param>
        <summary>Obraca lokalne przekształcenia geometrycznych według określonego kąta podany w określonej kolejności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ kształt pióra jest cykliczna, rotację nie ma żadnego efektu widoczne, chyba że pióra jest skalowany w kierunku osi x i y.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy <xref:System.Drawing.Pen>.  
  
-   Skaluje pióra przez 2 godziny, w kierunku osi x.  
  
-   Rysuje prostokąt przy użyciu pióra.  
  
-   Obraca pióra 90 stopni w prawo.  
  
-   Rysuje prostokąt, drugi pokazują różnicę.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.ClassicPenExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#6)]
 [!code-vb[System.Drawing.ClassicPenExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScaleTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Skaluje lokalne przekształcenia geometrycznych przez określony czynniki. Ta metoda dołącza skalowania macierzy transformacji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.ScaleTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy);" />
      <MemberSignature Language="F#" Value="member this.ScaleTransform : single * single -&gt; unit" Usage="pen.ScaleTransform (sx, sy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">Współczynnik za pomocą którego skalowanie przekształcenie w kierunku osi x.</param>
        <param name="sy">Współczynnik za pomocą którego skalowanie przekształcenie w kierunku y.</param>
        <summary>Skaluje lokalne przekształcenia geometrycznych przez określony czynniki. Ta metoda dołącza skalowania macierzy transformacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
 Tworzy <xref:System.Drawing.Pen>.  
  
 Rysuje prostokąt przy użyciu pióra.  
  
 Skaluje pióra przez 2 godziny, w kierunku osi x.  
  
 Rysuje prostokąt, drugi pokazują różnicę.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ClassicPenExamples#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ClassicPenExamples#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.ScaleTransform : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="pen.ScaleTransform (sx, sy, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="sx">Współczynnik za pomocą którego skalowanie przekształcenie w kierunku osi x.</param>
        <param name="sy">Współczynnik za pomocą którego skalowanie przekształcenie w kierunku y.</param>
        <param name="order">A <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> , określa, czy dołączyć lub Dodaj macierz skalowania.</param>
        <summary>Skaluje lokalne przekształcenia geometrycznych przez określony czynniki w określonej kolejności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Kod wykonuje następujące czynności:  
  
-   Tworzy <xref:System.Drawing.Pen>.  
  
-   Rysuje prostokąt przy użyciu pióra.  
  
-   Skaluje pióra przez 2 godziny, w kierunku osi x.  
  
-   Rysuje prostokąt, drugi pokazują różnicę.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.ClassicPenExamples#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#8)]
 [!code-vb[System.Drawing.ClassicPenExamples#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLineCap">
      <MemberSignature Language="C#" Value="public void SetLineCap (System.Drawing.Drawing2D.LineCap startCap, System.Drawing.Drawing2D.LineCap endCap, System.Drawing.Drawing2D.DashCap dashCap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLineCap(valuetype System.Drawing.Drawing2D.LineCap startCap, valuetype System.Drawing.Drawing2D.LineCap endCap, valuetype System.Drawing.Drawing2D.DashCap dashCap) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.SetLineCap(System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.DashCap)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetLineCap(System::Drawing::Drawing2D::LineCap startCap, System::Drawing::Drawing2D::LineCap endCap, System::Drawing::Drawing2D::DashCap dashCap);" />
      <MemberSignature Language="F#" Value="member this.SetLineCap : System.Drawing.Drawing2D.LineCap * System.Drawing.Drawing2D.LineCap * System.Drawing.Drawing2D.DashCap -&gt; unit" Usage="pen.SetLineCap (startCap, endCap, dashCap)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startCap" Type="System.Drawing.Drawing2D.LineCap" />
        <Parameter Name="endCap" Type="System.Drawing.Drawing2D.LineCap" />
        <Parameter Name="dashCap" Type="System.Drawing.Drawing2D.DashCap" />
      </Parameters>
      <Docs>
        <param name="startCap">A <see cref="T:System.Drawing.Drawing2D.LineCap" /> który reprezentuje styl zakończenia, do użycia na początku linii z tym <see cref="T:System.Drawing.Pen" />.</param>
        <param name="endCap">A <see cref="T:System.Drawing.Drawing2D.LineCap" /> który reprezentuje styl zakończenia, do użycia na koniec linii z tym <see cref="T:System.Drawing.Pen" />.</param>
        <param name="dashCap">A <see cref="T:System.Drawing.Drawing2D.LineCap" /> który reprezentuje styl zakończenia, do użycia na początku lub na końcu linii kreskowanej z tym <see cref="T:System.Drawing.Pen" />.</param>
        <summary>Ustawia wartości, które określają styl zakończenia, używany do zakończenia linii to <see cref="T:System.Drawing.Pen" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, czyli parametrem <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń. Ten kod tworzy <xref:System.Drawing.Pen> i ustawia go, aby narysować caps zakotwiczenia strzałkę na początku linii:  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#9)]
 [!code-csharp[System.Drawing.ClassicPenExamples#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#9)]
 [!code-vb[System.Drawing.ClassicPenExamples#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartCap">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.LineCap StartCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.LineCap StartCap" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.StartCap" />
      <MemberSignature Language="VB.NET" Value="Public Property StartCap As LineCap" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::LineCap StartCap { System::Drawing::Drawing2D::LineCap get(); void set(System::Drawing::Drawing2D::LineCap value); };" />
      <MemberSignature Language="F#" Value="member this.StartCap : System.Drawing.Drawing2D.LineCap with get, set" Usage="System.Drawing.Pen.StartCap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.LineCap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia styl zakończenia, na początku linii z tym <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Jedną z <see cref="T:System.Drawing.Drawing2D.LineCap" /> wartości, które reprezentuje styl zakończenia, na początku linii z tym <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje skutki ustawienie <xref:System.Drawing.Pen.StartCap%2A> i <xref:System.Drawing.Pen.EndCap%2A> właściwości <xref:System.Drawing.Pen>.  
  
 W tym przykładzie jest przeznaczona do użycia za pomocą interfejsu Windows Forms. Wklej kod do formularza i wywołania `ShowStartAndEndCaps` metody obsługi danych formularza <xref:System.Windows.Forms.Control.Paint> zdarzenie, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.PensExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#2)]
 [!code-vb[System.Drawing.PensExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Określona wartość nie jest członkiem <see cref="T:System.Drawing.Drawing2D.LineCap" />.</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Drawing.Pen.StartCap" /> Właściwość jest ustawiona na niezmienne <see cref="T:System.Drawing.Pen" />, takich jak zwracany przez <see cref="T:System.Drawing.Pens" /> klasy.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.Matrix Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.Matrix Transform" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Property Transform As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::Matrix ^ Transform { System::Drawing::Drawing2D::Matrix ^ get(); void set(System::Drawing::Drawing2D::Matrix ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Drawing.Drawing2D.Matrix with get, set" Usage="System.Drawing.Pen.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia kopię geometrycznych transformacji, w tym <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Kopię <see cref="T:System.Drawing.Drawing2D.Matrix" /> reprezentujący geometrycznych transformacji, w tym <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość określa kształcie elipsy dla ołówka. Ten elipsy są uzyskiwane z domyślną okrągłego kształtu w dzięki zastosowaniu macierzy transformacji. Należy pamiętać, że tłumaczenia część macierzy jest ignorowana. Ponieważ zwracany macierzy, jak również <xref:System.Drawing.Pen.Transform%2A> właściwość kopię przekształcenia geometrycznych pióra, należy usunąć macierzy, gdy nie są już potrzebne.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Drawing.Pen.Transform" /> Właściwość jest ustawiona na niezmienne <see cref="T:System.Drawing.Pen" />, takich jak zwracany przez <see cref="T:System.Drawing.Pens" /> klasy.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tłumaczy lokalne przekształcenia geometrycznych przez podany rozmiar. Ta metoda dołącza tłumaczenia do przekształcenia.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.TranslateTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateTransform : single * single -&gt; unit" Usage="pen.TranslateTransform (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">Wartość tłumaczenia w x.</param>
        <param name="dy">Wartość tłumaczenia y.</param>
        <summary>Tłumaczy lokalne przekształcenia geometrycznych przez podany rozmiar. Ta metoda dołącza tłumaczenia do przekształcenia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.TranslateTransform : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="pen.TranslateTransform (dx, dy, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="dx">Wartość tłumaczenia w x.</param>
        <param name="dy">Wartość tłumaczenia y.</param>
        <param name="order">Kolejność (dołączana lub dołączyć) w których mają zostać zastosowane tłumaczenia.</param>
        <summary>Tłumaczy lokalne przekształcenia geometrycznych wielowymiarowej określona w określonej kolejności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public float Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Width" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Width { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.Width : single with get, set" Usage="System.Drawing.Pen.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia szerokość tego <see cref="T:System.Drawing.Pen" />, w jednostkach <see cref="T:System.Drawing.Graphics" /> obiekt używany do rysowania.</summary>
        <value>Szerokość to <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz uzyskać dostęp jednostką miary <xref:System.Drawing.Graphics> przy użyciu jego <xref:System.Drawing.Graphics.PageUnit%2A> właściwości. Jednostka miary jest zazwyczaj pikseli. A <xref:System.Drawing.Pen.Width%2A> 0 spowoduje <xref:System.Drawing.Pen> rysowania tak, jakby <xref:System.Drawing.Pen.Width%2A> zostały 1.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje skutki ustawienie <xref:System.Drawing.Pen.Width%2A> i <xref:System.Drawing.Pen.LineJoin%2A> właściwości <xref:System.Drawing.Pen>.  
  
 W tym przykładzie jest przeznaczona do użycia za pomocą interfejsu Windows Forms. Wklej kod do formularza i wywołania `ShowLineJoin` metody obsługi danych formularza <xref:System.Windows.Forms.Control.Paint> zdarzenie, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.PensExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.PensExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Drawing.Pen.Width" /> Właściwość jest ustawiona na niezmienne <see cref="T:System.Drawing.Pen" />, takich jak zwracany przez <see cref="T:System.Drawing.Pens" /> klasy.</exception>
      </Docs>
    </Member>
  </Members>
</Type>