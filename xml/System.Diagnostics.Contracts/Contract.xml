<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Contract.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac518ccddeb7c646934cfcc1b40673135a0998cbc53.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">18ccddeb7c646934cfcc1b40673135a0998cbc53</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.Contracts.Contract">
          <source>Contains static methods for representing program contracts such as preconditions, postconditions, and object invariants.</source>
          <target state="translated">Zawiera metody statyczne reprezentujący program kontrakty, takie jak warunki wstępne, postconditions i invariants obiektu.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.Contract">
          <source>Code contract classes let you specify preconditions, postconditions, and object invariants in your code.</source>
          <target state="translated">Klasy kontraktu kodu pozwalają określić warunki wstępne, postconditions i invariants obiektu w kodzie.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.Contract">
          <source>Preconditions are requirements that must be met when entering a method or property.</source>
          <target state="translated">Warunki wstępne są wymagania, które muszą zostać spełnione, wprowadzając metody lub właściwości.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.Contract">
          <source>Postconditions describe expectations at the time the method or property code exits.</source>
          <target state="translated">Postconditions opisano oczekiwań w czasie, który zamyka kodu metody lub właściwości.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.Contract">
          <source>Object invariants describe the expected state for a class that has no condition problems.</source>
          <target state="translated">Obiekt invariants opisano oczekiwanym stanem dla klasy, która nie ma warunku problemów.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.Contract">
          <source>For more information about preconditions, postconditions, and object invariants, see <bpt id="p1">[</bpt>Code Contracts<ept id="p1">](~/docs/framework/debug-trace-profile/code-contracts.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji o warunkach wstępnych, postconditions i invariants obiektu, zobacz <bpt id="p1">[</bpt>kontraktów kodu<ept id="p1">](~/docs/framework/debug-trace-profile/code-contracts.md)</ept>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.Contract">
          <source>For tools and detailed instructions for using code contracts, see <bpt id="p1">[</bpt>Code Contracts<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept> on the MSDN DevLabs Web site.</source>
          <target state="translated">Narzędzia i szczegółowe instrukcje dotyczące używania kontraktów kodu, zobacz <bpt id="p1">[</bpt>kontraktów kodu<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept> w witrynie MSDN DevLabs.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.Contract">
          <source>You must use a binary rewriter to insert run-time enforcement of contracts.</source>
          <target state="translated">Należy użyć binarne funkcji ponownego zapisu do wstawienia środowiska wykonawczego egzekwowania umów.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.Contract">
          <source>Otherwise, contracts such as the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=nameWithType&gt;</ph> method can only be tested statically and will not throw exceptions during run time if a contract is violated.</source>
          <target state="translated">W przeciwnym razie umów takich jak <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=nameWithType&gt;</ph> metody tylko można przetestować statycznie i nie zgłosi wyjątków w czasie wykonywania w przypadku naruszenia Umowy.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.Contract">
          <source>You can download the binary rewriter CCRewrite from <bpt id="p1">[</bpt>Code Contracts<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept> on the MSDN DevLabs Web site.</source>
          <target state="translated">Binarny funkcji ponownego zapisu CCRewrite można pobrać z <bpt id="p1">[</bpt>kontraktów kodu<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept> w witrynie MSDN DevLabs.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.Contract">
          <source>CCRewrite comes with a Visual Studio add-in that enables you to activate run-time contract enforcement from the project <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> page.</source>
          <target state="translated">CCRewrite pochodzi z dodatek Visual Studio, który umożliwia aktywowanie wymuszania kontraktu czasu wykonywania w projekcie <bpt id="p1">**</bpt>właściwości<ept id="p1">**</ept> strony.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.Contract">
          <source>The binary rewriter and the Visual Studio add-in do not ship with <ph id="ph1">[!INCLUDE[vs_dev10_long](~/includes/vs-dev10-long-md.md)]</ph> or the Windows SDK.</source>
          <target state="translated">Binarny funkcji ponownego zapisu i dodatek Visual Studio nie są dostarczane z <ph id="ph1">[!INCLUDE[vs_dev10_long](~/includes/vs-dev10-long-md.md)]</ph> lub zestawu Windows SDK.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.Contracts.Contract">
          <source>In debug builds, performs a run-time test for a specified condition.</source>
          <target state="translated">W kompilacjach do debugowania wykonuje test czasu wykonywania dla określonego warunku.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
          <source>The conditional expression to test.</source>
          <target state="translated">Wyrażenie warunkowe do testowania.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
          <source>Checks for a condition; if the condition is <ph id="ph1">&lt;see langword="false" /&gt;</ph>, follows the escalation policy set for the analyzer.</source>
          <target state="translated">Sprawdza, czy warunek; Jeśli warunek nie jest <ph id="ph1">&lt;see langword="false" /&gt;</ph>, następuje zasady eskalacji dla analizatora.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
          <source>The default escalation policy is to notify the attached debugger about a contract failure or to display an <bpt id="p1">**</bpt>Assert<ept id="p1">**</ept> dialog box if a debugger is not attached.</source>
          <target state="translated">Domyślne zasady eskalacji to Powiadom dołączony debuger o niepowodzeniu kontraktu lub wyświetlić <bpt id="p1">**</bpt>Assert<ept id="p1">**</ept> okno dialogowe, jeśli nie jest dołączony debuger.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
          <source>Optionally, the analyzer can be instructed to throw an exception.</source>
          <target state="translated">Opcjonalnie analizatora należy poinstruować, aby zgłosić wyjątek.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
          <source>The conditional expression to test.</source>
          <target state="translated">Wyrażenie warunkowe do testowania.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
          <source>A message to display if the condition is not met.</source>
          <target state="translated">Komunikat do wyświetlenia, jeśli nie jest spełniony warunek.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
          <source>Checks for a condition; if the condition is <ph id="ph1">&lt;see langword="false" /&gt;</ph>, follows the escalation policy set by the analyzer and displays the specified message.</source>
          <target state="translated">Sprawdza, czy warunek; Jeśli warunek nie jest <ph id="ph1">&lt;see langword="false" /&gt;</ph>, następuje zasady eskalacji ustawione przez analizatora i wyświetla określony komunikat.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
          <source>The default escalation policy is to notify the attached debugger about a contract failure or to display an <bpt id="p1">**</bpt>Assert<ept id="p1">**</ept> dialog box if a debugger is not attached.</source>
          <target state="translated">Domyślne zasady eskalacji to Powiadom dołączony debuger o niepowodzeniu kontraktu lub wyświetlić <bpt id="p1">**</bpt>Assert<ept id="p1">**</ept> okno dialogowe, jeśli nie jest dołączony debuger.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
          <source>Optionally, the analyzer can be instructed to throw an exception.</source>
          <target state="translated">Opcjonalnie analizatora należy poinstruować, aby zgłosić wyjątek.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
          <source>The <ph id="ph1">`userMessage`</ph> parameter is passed to the debugger output.</source>
          <target state="translated"><ph id="ph1">`userMessage`</ph> Parametr jest przekazywany do danych wyjściowych debugera.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
          <source>If <ph id="ph1">`userMessage`</ph> is not a constant string literal, tools may not be able to read it.</source>
          <target state="translated">Jeśli <ph id="ph1">`userMessage`</ph> nie jest ciągiem stałym literału, narzędzia nie można go odczytać.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.Contracts.Contract">
          <source>Instructs code analysis tools to assume that a condition is <ph id="ph1">&lt;see langword="true" /&gt;</ph>, even if it cannot be statically proven to always be <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Powoduje, że narzędzi analizy kodu do wniosku, że warunek jest <ph id="ph1">&lt;see langword="true" /&gt;</ph>, nawet jeśli nie statycznie sprawdzone zawsze być <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
          <source>The conditional expression to assume <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Wyrażenie warunkowe do wniosku <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
          <source>Instructs code analysis tools to assume that the specified condition is <ph id="ph1">&lt;see langword="true" /&gt;</ph>, even if it cannot be statically proven to always be <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Powoduje, że narzędzi analizy kodu do wniosku, że jest określony warunek <ph id="ph1">&lt;see langword="true" /&gt;</ph>, nawet jeśli nie statycznie sprawdzone zawsze być <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
          <source>At run time, using this method is equivalent to using the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Assert%28System.Boolean%29&gt;</ph> method.</source>
          <target state="translated">W czasie wykonywania, za pomocą tej metody jest odpowiednikiem przy użyciu <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Assert%28System.Boolean%29&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
          <source>The conditional expression to assume <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Wyrażenie warunkowe do wniosku <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
          <source>The message to post if the assumption fails.</source>
          <target state="translated">Komunikat do opublikowania Jeśli założeniu nie powiedzie się.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
          <source>Instructs code analysis tools to assume that a condition is <ph id="ph1">&lt;see langword="true" /&gt;</ph>, even if it cannot be statically proven to always be <ph id="ph2">&lt;see langword="true" /&gt;</ph>, and displays a message if the assumption fails.</source>
          <target state="translated">Nakazuje narzędzi analizy kodu do wniosku, że warunek jest <ph id="ph1">&lt;see langword="true" /&gt;</ph>, nawet jeśli nie statycznie sprawdzone zawsze być <ph id="ph2">&lt;see langword="true" /&gt;</ph>i wyświetla komunikat, jeśli założeniu nie powiedzie się.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
          <source>If <ph id="ph1">`userMessage`</ph> is not a constant string literal, the contract may not be understood by tools.</source>
          <target state="translated">Jeśli <ph id="ph1">`userMessage`</ph> nie jest ciągiem stałym literału, kontrakt nie może być rozpoznawany przez narzędzia.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
          <source>At run time, using this method is equivalent to using the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Assert%28System.Boolean%2CSystem.String%29&gt;</ph> method.</source>
          <target state="translated">W czasie wykonywania, za pomocą tej metody jest odpowiednikiem przy użyciu <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Assert%28System.Boolean%2CSystem.String%29&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="E:System.Diagnostics.Contracts.Contract.ContractFailed">
          <source>Occurs when a contract fails.</source>
          <target state="translated">Występuje, gdy kontrakt nie powiedzie się.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Contracts.Contract.ContractFailed">
          <source>The event information for this event is supplied by the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.ContractFailedEventArgs?displayProperty=nameWithType&gt;</ph> object that is passed to the event handler.</source>
          <target state="translated">Informacje dotyczące zdarzenia dla tego zdarzenia jest dostarczana przez <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.ContractFailedEventArgs?displayProperty=nameWithType&gt;</ph> obiekt, który zostanie przekazany do obsługi zdarzeń.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Contracts.Contract.ContractFailed">
          <source>This event notifies a managed application environment such as an interactive interpreter or a Web browser host that a contract has failed.</source>
          <target state="translated">To zdarzenie powiadamia środowisku zarządzanej aplikacji, takich jak interakcyjne interpreter lub hosta przeglądarki sieci Web, który kontrakt nie powiodło się.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Contracts.Contract.ContractFailed">
          <source>Before doing so, it will raise an event that an application can handle as it sees fit.</source>
          <target state="translated">Przed dokonaniem, zgłosi zdarzenie, które może obsłużyć aplikacja, jak za stosowny.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Contracts.Contract.ContractFailed">
          <source>For example, if code is being run in a testing framework, you can log a test failure and then end the test.</source>
          <target state="translated">Na przykład jeśli kod jest uruchamiana w ramach testowania, możesz zalogować niepowodzenia testu i następnie zakończyć test.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Contracts.Contract.ContractFailed">
          <source>The default implementation of the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Internal.ContractHelper.RaiseContractFailedEvent%2A&gt;</ph> method in the .NET Framework class library is to call each handler that is registered with the <ph id="ph2">&lt;xref:System.Diagnostics.Contracts.Contract.ContractFailed&gt;</ph> event.</source>
          <target state="translated">Domyślna implementacja <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Internal.ContractHelper.RaiseContractFailedEvent%2A&gt;</ph> metody w bibliotece klas programu .NET Framework jest wywołanie każdy program obsługi, która jest zarejestrowana <ph id="ph2">&lt;xref:System.Diagnostics.Contracts.Contract.ContractFailed&gt;</ph> zdarzeń.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Contracts.Contract.ContractFailed">
          <source>Exceptions thrown by handlers are ignored, but each handler can indicate whether the failure is handled by calling the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled%2A&gt;</ph> method for the event arguments.</source>
          <target state="translated">Wyjątki generowane przez programy obsługi są ignorowane, ale każdy program obsługi może wskazać, czy błąd jest obsługiwana przez wywołanie metody <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled%2A&gt;</ph> metody dla argumentów zdarzenia.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Contracts.Contract.ContractFailed">
          <source>If any handler sets the failure as handled, the method returns <ph id="ph1">`null`</ph> and no further action is taken.</source>
          <target state="translated">Jeśli wszystkie obsługi ustawia niepowodzenia obsługi, metoda zwraca <ph id="ph1">`null`</ph> i są wykonywane nie dalsze działania.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Contracts.Contract.ContractFailed">
          <source>Alternatively, handlers can call the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind%2A&gt;</ph> method to instruct the code to unwind.</source>
          <target state="translated">Alternatywnie można wywołać procedury obsługi <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind%2A&gt;</ph> metody nakazać kod operacji unwind.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Contracts.Contract.ContractFailed">
          <source>In that case, an exception is thrown after all handlers have executed.</source>
          <target state="translated">W takim przypadku jest zwracany wyjątek, po wykonaniu wszystkich programów obsługi.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Contracts.Contract.ContractFailed">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Contracts.Contract.ContractFailed">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
          <source>Marks the end of the contract section when a method's contracts contain only preconditions in the <ph id="ph1">&lt;see langword="if" /&gt;</ph><ph id="ph2">-</ph><ph id="ph3">&lt;see langword="then" /&gt;</ph><ph id="ph4">-</ph><ph id="ph5">&lt;see langword="throw" /&gt;</ph> form.</source>
          <target state="translated">Oznacza koniec sekcji kontraktu, gdy metoda kontraktów zawiera tylko warunki wstępne w <ph id="ph1">&lt;see langword="if" /&gt;</ph> <ph id="ph2">-</ph> <ph id="ph3">&lt;see langword="then" /&gt;</ph> <ph id="ph4">-</ph> <ph id="ph5">&lt;see langword="throw" /&gt;</ph> formularza.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
          <source>Most code already contains some parameter validation in the form of <ph id="ph1">`if`</ph><ph id="ph2">-</ph><ph id="ph3">`then`</ph><ph id="ph4">-</ph><ph id="ph5">`throw`</ph> code.</source>
          <target state="translated">Większość kodu zawiera już niektóre sprawdzanie poprawności parametru w postaci <ph id="ph1">`if`</ph> <ph id="ph2">-</ph> <ph id="ph3">`then`</ph> <ph id="ph4">-</ph> <ph id="ph5">`throw`</ph> kodu.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
          <source>The contract tools recognize <ph id="ph1">`if`</ph><ph id="ph2">-</ph><ph id="ph3">`then`</ph><ph id="ph4">-</ph><ph id="ph5">`throw`</ph> statements as preconditions when the statements appear first inside a method, and the entire set of such statements is followed by an explicit <ph id="ph6">&lt;xref:System.Diagnostics.Contracts.Contract&gt;</ph> method call, such as a <ph id="ph7">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Diagnostics.Contracts.Contract.EnsuresOnThrow%2A&gt;</ph>, or <ph id="ph10">&lt;xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A&gt;</ph>.</source>
          <target state="translated">Rozpoznaje narzędzia kontraktu <ph id="ph1">`if`</ph> <ph id="ph2">-</ph> <ph id="ph3">`then`</ph> <ph id="ph4">-</ph> <ph id="ph5">`throw`</ph> instrukcje jako warunki wstępne, gdy instrukcje występować jako pierwszy wewnątrz metody, a cały zestaw takich instrukcji następuje jawne<ph id="ph6">&lt;xref:System.Diagnostics.Contracts.Contract&gt;</ph> wywołanie metody, takie jak <ph id="ph7">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Diagnostics.Contracts.Contract.EnsuresOnThrow%2A&gt;</ph>, lub <ph id="ph10">&lt;xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
          <source>When <ph id="ph1">`if`</ph><ph id="ph2">-</ph><ph id="ph3">`then`</ph><ph id="ph4">-</ph><ph id="ph5">`throw`</ph> statements appear in this form, the contract tools recognize them as legacy-require statements.</source>
          <target state="translated">Gdy <ph id="ph1">`if`</ph> <ph id="ph2">-</ph> <ph id="ph3">`then`</ph> <ph id="ph4">-</ph> <ph id="ph5">`throw`</ph> instrukcje pojawiają się w tym formularzu narzędzia kontraktu rozpoznaje je jako starszych-wymagają instrukcje.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A&gt;</ph> form is used only if no other contracts follow the <ph id="ph2">`if`</ph><ph id="ph3">-</ph><ph id="ph4">`then`</ph><ph id="ph5">-</ph><ph id="ph6">`throw`</ph> sequences, but they should still be tagged as legacy-requires.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A&gt;</ph> Formularz jest używany tylko wtedy, gdy nie ma innych umów wykonaj <ph id="ph2">`if`</ph> <ph id="ph3">-</ph> <ph id="ph4">`then`</ph> <ph id="ph5">-</ph> <ph id="ph6">`throw`</ph> sekwencji, ale nadal powinien oznaczone jako starszych-wymaga.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.Contracts.Contract">
          <source>Specifies a postcondition contract for the enclosing method or property.</source>
          <target state="translated">Określa kontrakt postcondition otaczającego metody lub właściwości.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
          <source>The conditional expression to test.</source>
          <target state="translated">Wyrażenie warunkowe do testowania.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
          <source>The expression may include <ph id="ph1">&lt;see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)" /&gt;</ph>, and <ph id="ph3">&lt;see cref="M:System.Diagnostics.Contracts.Contract.Result``1" /&gt;</ph> values.</source>
          <target state="translated">Wyrażenie, które mogą obejmować <ph id="ph1">&lt;see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)" /&gt;</ph>, i <ph id="ph3">&lt;see cref="M:System.Diagnostics.Contracts.Contract.Result``1" /&gt;</ph> wartości.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
          <source>Specifies a postcondition contract for the enclosing method or property.</source>
          <target state="translated">Określa kontrakt postcondition otaczającego metody lub właściwości.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
          <source>The <ph id="ph1">`condition`</ph> parameter specifies a postcondition that is expected to be <ph id="ph2">`true`</ph> when the enclosing method or property returns normally.</source>
          <target state="translated"><ph id="ph1">`condition`</ph> Parametr określa warunku końcowego, który ma być <ph id="ph2">`true`</ph> po otaczającego metody lub właściwości zwraca normalnie.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
          <source>This method call must be at the beginning of a method or property, before any other code.</source>
          <target state="translated">Wywołanie tej metody należy na początku metody lub właściwości przed innymi kodu.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
          <source>You must use the binary rewriter (available at <bpt id="p1">[</bpt>Code Contracts<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept> on the MSDN DevLabs Web site) for run-time enforcement of this postcondition.</source>
          <target state="translated">Należy użyć binarne funkcji ponownego zapisu (dostępne pod adresem <bpt id="p1">[</bpt>kontraktów kodu<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept> w witrynie MSDN DevLabs) do środowiska wykonawczego stosowania tego warunku końcowego.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A&gt;</ph> method to ensure that an expected value is returned.</source>
          <target state="translated">Poniższy przykład przedstawia użycie <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A&gt;</ph> metody, aby upewnić się, że jest zwracana wartość oczekiwana.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.ContractClassAttribute&gt;</ph> class.</source>
          <target state="translated">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.ContractClassAttribute&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
          <source>The conditional expression to test.</source>
          <target state="translated">Wyrażenie warunkowe do testowania.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
          <source>The expression may include <ph id="ph1">&lt;see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Diagnostics.Contracts.Contract.Result``1" /&gt;</ph> values.</source>
          <target state="translated">Wyrażenie, które mogą obejmować <ph id="ph1">&lt;see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" /&gt;</ph> i <ph id="ph2">&lt;see cref="M:System.Diagnostics.Contracts.Contract.Result``1" /&gt;</ph> wartości.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
          <source>The message to display if the expression is not <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Komunikat wyświetlany, jeśli wyrażenie nie jest <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
          <source>Specifies a postcondition contract for a provided exit condition and a message to display if the condition is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Określa kontrakt postcondition warunku exit podana i komunikat do wyświetlenia, jeśli wynikiem warunku jest <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
          <source>The <ph id="ph1">`condition`</ph> parameter specifies a postcondition that is expected to be <ph id="ph2">`true`</ph> when the enclosing method or property returns normally.</source>
          <target state="translated"><ph id="ph1">`condition`</ph> Parametr określa warunku końcowego, który ma być <ph id="ph2">`true`</ph> po otaczającego metody lub właściwości zwraca normalnie.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
          <source>This method call must be at the beginning of a method or property, before any other code.</source>
          <target state="translated">Wywołanie tej metody należy na początku metody lub właściwości przed innymi kodu.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
          <source>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.</source>
          <target state="translated">Niniejsza Umowa jest widoczne dla klientów; w związku z tym musi tylko odwołanie do elementów członkowskich, które są co najmniej jako widoczna jako metody otaczającej.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
          <source>You must use the binary rewriter (available at <bpt id="p1">[</bpt>Code Contracts<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept> on the MSDN DevLabs Web site) for run-time enforcement of this postcondition.</source>
          <target state="translated">Należy użyć binarne funkcji ponownego zapisu (dostępne pod adresem <bpt id="p1">[</bpt>kontraktów kodu<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept> w witrynie MSDN DevLabs) do środowiska wykonawczego stosowania tego warunku końcowego.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
          <source>If <ph id="ph1">`userMessage`</ph> is not a constant string literal, the contract may not be understood by tools.</source>
          <target state="translated">Jeśli <ph id="ph1">`userMessage`</ph> nie jest ciągiem stałym literału, kontrakt nie może być rozpoznawany przez narzędzia.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.Contracts.Contract">
          <source>Specifies a postcondition contract for the enclosing method or property based on the provided exception and condition.</source>
          <target state="translated">Określa kontrakt postcondition dla otaczającego metody lub właściwości na podstawie podanych wyjątku i warunku.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
          <source>The type of exception that invokes the postcondition check.</source>
          <target state="translated">Typ wyjątku, który wywołuje postcondition wyboru.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
          <source>The conditional expression to test.</source>
          <target state="translated">Wyrażenie warunkowe do testowania.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
          <source>Specifies a postcondition contract for the enclosing method or property, based on the provided exception and condition.</source>
          <target state="translated">Określa kontrakt postcondition dla otaczającego metody lub właściwości, na podstawie podanych wyjątku i warunek.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
          <source>The <ph id="ph1">`condition`</ph> parameter specifies a postcondition that is expected to be <ph id="ph2">`true`</ph> when the enclosing method or property terminates abnormally and an exception of type <ph id="ph3">`TException`</ph> is thrown.</source>
          <target state="translated"><ph id="ph1">`condition`</ph> Parametr określa warunku końcowego, który ma być <ph id="ph2">`true`</ph> po otaczającego metody lub właściwości nieprawidłowo kończy działanie i wystąpił wyjątek typu <ph id="ph3">`TException`</ph> jest generowany.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
          <source>This method call must be at the beginning of a method or property, before any other code.</source>
          <target state="translated">Wywołanie tej metody należy na początku metody lub właściwości przed innymi kodu.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
          <source>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.</source>
          <target state="translated">Niniejsza Umowa jest widoczne dla klientów; w związku z tym musi tylko odwołanie do elementów członkowskich, które są co najmniej jako widoczna jako metody otaczającej.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
          <source>You must use the binary rewriter for run-time enforcement of this postcondition.</source>
          <target state="translated">Dla środowiska wykonawczego stosowania tego warunku końcowego, należy użyć binarne funkcji ponownego zapisu.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
          <source>The type of exception that invokes the postcondition check.</source>
          <target state="translated">Typ wyjątku, który wywołuje postcondition wyboru.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
          <source>The conditional expression to test.</source>
          <target state="translated">Wyrażenie warunkowe do testowania.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
          <source>The message to display if the expression is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Komunikat wyświetlany, jeśli wyrażenie jest <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
          <source>Specifies a postcondition contract and a message to display if the condition is <ph id="ph1">&lt;see langword="false" /&gt;</ph> for the enclosing method or property, based on the provided exception and condition.</source>
          <target state="translated">Określa kontrakt postcondition i komunikat do wyświetlenia, jeśli wynikiem warunku jest <ph id="ph1">&lt;see langword="false" /&gt;</ph> otaczającego metody lub właściwości, na podstawie podanych wyjątku i warunek.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
          <source>The <ph id="ph1">`condition`</ph> parameter specifies a postcondition that is expected to be <ph id="ph2">`true`</ph> when the enclosing method or property terminates abnormally and an exception of type <ph id="ph3">`TException`</ph> is thrown.</source>
          <target state="translated"><ph id="ph1">`condition`</ph> Parametr określa warunku końcowego, który ma być <ph id="ph2">`true`</ph> po otaczającego metody lub właściwości nieprawidłowo kończy działanie i wystąpił wyjątek typu <ph id="ph3">`TException`</ph> jest generowany.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
          <source>The <ph id="ph1">`message`</ph> parameter specifies a message to display if the condition is <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">`message`</ph> Parametr określa komunikat wyświetlany, jeśli wynikiem warunku jest <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
          <source>This method call must be at the beginning of a method or property, before any other code.</source>
          <target state="translated">Wywołanie tej metody należy na początku metody lub właściwości przed innymi kodu.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
          <source>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.</source>
          <target state="translated">Niniejsza Umowa jest widoczne dla klientów; w związku z tym musi tylko odwołanie do elementów członkowskich, które są co najmniej jako widoczna jako metody otaczającej.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
          <source>You must use the binary rewriter for run-time enforcement of this postcondition.</source>
          <target state="translated">Dla środowiska wykonawczego stosowania tego warunku końcowego, należy użyć binarne funkcji ponownego zapisu.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
          <source>If <ph id="ph1">`userMessage`</ph> is not a constant string literal, the contract may not be understood by tools.</source>
          <target state="translated">Jeśli <ph id="ph1">`userMessage`</ph> nie jest ciągiem stałym literału, kontrakt nie może być rozpoznawany przez narzędzia.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source>The first integer to pass to <bpt id="p1">&lt;c&gt;</bpt>predicate<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Pierwszej liczby całkowitej do przekazania do <bpt id="p1">&lt;c&gt;</bpt>predykatu<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source>One more than the last integer to pass to <bpt id="p1">&lt;c&gt;</bpt>predicate<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Co więcej niż ostatni liczby całkowitej w celu przekazania do <bpt id="p1">&lt;c&gt;</bpt>predykatu<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source>The function to evaluate for any value of the integer in the specified range.</source>
          <target state="translated">Funkcja, która ma zostać obliczone dla wartości liczb całkowitych w określonym zakresie.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source>Determines whether a specified test is true for any integer within a range of integers.</source>
          <target state="translated">Określa, czy określony test jest wartość true dla dowolnej liczby całkowitej zakresu liczb całkowitych.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> returns <ph id="ph3">&lt;see langword="true" /&gt;</ph> for any integer starting from <ph id="ph4">&lt;paramref name="fromInclusive" /&gt;</ph> to <ph id="ph5">&lt;paramref name="toExclusive" /&gt;</ph> - 1.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> zwraca <ph id="ph3">&lt;see langword="true" /&gt;</ph> dla dowolnej liczby całkowite począwszy od <ph id="ph4">&lt;paramref name="fromInclusive" /&gt;</ph> do <ph id="ph5">&lt;paramref name="toExclusive" /&gt;</ph> - 1.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source>The <ph id="ph1">`toExclusive`</ph> parameter is one more than the last integer to facilitate using the length of a range of integers starting at 0.</source>
          <target state="translated"><ph id="ph1">`toExclusive`</ph> Parametr jest jednym więcej niż ostatni liczby całkowitej w celu ułatwienia przy użyciu długości zakresu liczb całkowitych, zaczynając od 0.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source>For example, it would be set to 5 for integers 0 through 4.</source>
          <target state="translated">Na przykład czy można ustawić na wartość 5 liczb całkowitych od 0 do 4.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="predicate" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="toExclusive" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="fromInclusive" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="toExclusive" /&gt;</ph> jest mniejsza niż <ph id="ph2">&lt;paramref name="fromInclusive" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
          <source>The type that is contained in <bpt id="p1">&lt;c&gt;</bpt>collection<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Typ, który jest zawarty w <bpt id="p1">&lt;c&gt;</bpt>kolekcji<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
          <source>The collection from which elements of type <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> will be drawn to pass to <bpt id="p2">&lt;c&gt;</bpt>predicate<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated">Do kolekcji elementów typu <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> będzie rysowany do przekazania do <bpt id="p2">&lt;c&gt;</bpt>predykatu<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
          <source>The function to evaluate for an element in <bpt id="p1">&lt;c&gt;</bpt>collection<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Funkcja, która ma zostać obliczone dla elementu w <bpt id="p1">&lt;c&gt;</bpt>kolekcji<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
          <source>Determines whether an element within a collection of elements exists within a function.</source>
          <target state="translated">Określa, czy element w kolekcji elementów istnieje w funkcji.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if and only if <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> returns <ph id="ph3">&lt;see langword="true" /&gt;</ph> for any element of type <ph id="ph4">&lt;paramref name="T" /&gt;</ph> in <ph id="ph5">&lt;paramref name="collection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> tylko wtedy, gdy <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> zwraca <ph id="ph3">&lt;see langword="true" /&gt;</ph> dla każdego elementu typu <ph id="ph4">&lt;paramref name="T" /&gt;</ph> w <ph id="ph5">&lt;paramref name="collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
          <source><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source>The first integer to pass to <bpt id="p1">&lt;c&gt;</bpt>predicate<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Pierwszej liczby całkowitej do przekazania do <bpt id="p1">&lt;c&gt;</bpt>predykatu<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source>One more than the last integer to pass to <bpt id="p1">&lt;c&gt;</bpt>predicate<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Co więcej niż ostatni liczby całkowitej w celu przekazania do <bpt id="p1">&lt;c&gt;</bpt>predykatu<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source>The function to evaluate for the existence of the integers in the specified range.</source>
          <target state="translated">Funkcja do oceny istnienie liczb całkowitych w określonym zakresie.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source>Determines whether a particular condition is valid for all integers in a specified range.</source>
          <target state="translated">Określa, czy określony warunek jest nieprawidłowy dla wszystkich liczb całkowitych w określonym zakresie.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> returns <ph id="ph3">&lt;see langword="true" /&gt;</ph> for all integers starting from <ph id="ph4">&lt;paramref name="fromInclusive" /&gt;</ph> to <ph id="ph5">&lt;paramref name="toExclusive" /&gt;</ph> - 1.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> zwraca <ph id="ph3">&lt;see langword="true" /&gt;</ph> dla wszystkich liczby całkowite począwszy od <ph id="ph4">&lt;paramref name="fromInclusive" /&gt;</ph> do <ph id="ph5">&lt;paramref name="toExclusive" /&gt;</ph> - 1.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source>The <ph id="ph1">`toExclusive`</ph> parameter is one more than the last integer to facilitate using the length of a range of integers starting at 0.</source>
          <target state="translated"><ph id="ph1">`toExclusive`</ph> Parametr jest jednym więcej niż ostatni liczby całkowitej w celu ułatwienia przy użyciu długości zakresu liczb całkowitych, zaczynając od 0.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source>For example, it would be set to 5 for integers 0 through 4.</source>
          <target state="translated">Na przykład czy można ustawić na wartość 5 liczb całkowitych od 0 do 4.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.ForAll%2A&gt;</ph> method to determine whether an array has a null element.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób użycia <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.ForAll%2A&gt;</ph> metodę, aby określić, czy tablica zawiera element o wartości null.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="predicate" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="toExclusive" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="fromInclusive" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="toExclusive" /&gt;</ph> jest mniejsza niż <ph id="ph2">&lt;paramref name="fromInclusive" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
          <source>The type that is contained in <bpt id="p1">&lt;c&gt;</bpt>collection<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Typ, który jest zawarty w <bpt id="p1">&lt;c&gt;</bpt>kolekcji<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
          <source>The collection from which elements of type <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> will be drawn to pass to <bpt id="p2">&lt;c&gt;</bpt>predicate<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated">Do kolekcji elementów typu <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> będzie rysowany do przekazania do <bpt id="p2">&lt;c&gt;</bpt>predykatu<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
          <source>The function to evaluate for the existence of all the elements in <bpt id="p1">&lt;c&gt;</bpt>collection<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Funkcja do oceny istnienie wszystkie elementy w <bpt id="p1">&lt;c&gt;</bpt>kolekcji<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
          <source>Determines whether all the elements in a collection exist within a function.</source>
          <target state="translated">Określa, czy wszystkie elementy w kolekcji istnieje w funkcji.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if and only if <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> returns <ph id="ph3">&lt;see langword="true" /&gt;</ph> for all elements of type <ph id="ph4">&lt;paramref name="T" /&gt;</ph> in <ph id="ph5">&lt;paramref name="collection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> tylko wtedy, gdy <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> zwraca <ph id="ph3">&lt;see langword="true" /&gt;</ph> dla wszystkich elementów tego typu <ph id="ph4">&lt;paramref name="T" /&gt;</ph> w <ph id="ph5">&lt;paramref name="collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.ForAll%2A&gt;</ph> method to determine whether a collection has a null element.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób użycia <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.ForAll%2A&gt;</ph> metodę, aby określić, czy kolekcja zawiera element o wartości null.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
          <source><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.Contracts.Contract">
          <source>Specifies a contract for an enclosing method or property.</source>
          <target state="translated">Określa kontrakt dla otaczającego metody lub właściwości.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
          <source>The conditional expression to test.</source>
          <target state="translated">Wyrażenie warunkowe do testowania.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
          <source>Specifies an invariant contract for the enclosing method or property.</source>
          <target state="translated">Określa niezmienną kontraktu dla otaczającego metody lub właściwości.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Invariant%2A&gt;</ph> contracts are contained within a method that is identified by the <ph id="ph2">&lt;xref:System.Diagnostics.Contracts.ContractInvariantMethodAttribute&gt;</ph> attribute; typically, the method is named <ph id="ph3">`ObjectInvariant`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Invariant%2A&gt;</ph> Kontrakty są zawarte w metodę, która jest określana przez <ph id="ph2">&lt;xref:System.Diagnostics.Contracts.ContractInvariantMethodAttribute&gt;</ph> atrybutu; zazwyczaj nosi nazwę metody <ph id="ph3">`ObjectInvariant`</ph>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
          <source>This contract can be specified only in a dedicated invariant method that is declared on a class.</source>
          <target state="translated">Ten kontrakt można określić tylko w dedykowanym niezmiennej metodę, która jest zadeklarowana w klasie.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
          <source>If the method is not sealed, it should refer only to protected members, not private members, so that subclasses can be sure to maintain the invariants.</source>
          <target state="translated">Jeśli metoda nie jest zapieczętowany, tak aby podklasy mogą Pamiętaj zachować invariants powinni zapoznać tylko do chronionych elementów członkowskich nie prywatne elementy członkowskie.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
          <source>This contract is not exposed to clients; therefore, it may reference members that are less visible than the enclosing method.</source>
          <target state="translated">Niniejsza Umowa nie jest widoczne dla klientów; w związku z tym go może odwoływać się elementy członkowskie, które są widoczne mniej niż metoda otaczającej.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
          <source>You must use the binary rewriter for run-time enforcement of this invariant.</source>
          <target state="translated">Należy użyć binarne funkcji ponownego zapisu tym niezmiennej wykonania czasu wykonywania.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
          <source>Invariants are conditionally defined based on the presence of the <ph id="ph1">`CONTRACTS FULL`</ph> symbol.</source>
          <target state="translated">Warunkowo invariants są zdefiniowane w zależności od obecności <ph id="ph1">`CONTRACTS FULL`</ph> symbolu.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
          <source>During run-time checking, invariants are checked at the end of each public method.</source>
          <target state="translated">Podczas sprawdzania czasu wykonywania, invariants są sprawdzane na końcu każdej metody publicznej.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
          <source>If an invariant mentions a public method in the same class, the invariant check that would normally happen at the end of that public method is disabled and checked only at the end of the outermost method call to that class.</source>
          <target state="translated">Jeśli niezmiennej nazwa publiczną metodę w tej samej klasie, niezmiennej Sprawdź, czy czy zwykle odbywa się na końcu metody publicznej jest wyłączona, zaznaczone tylko na końcu wywołania metody zewnętrznych do tej klasy.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
          <source>This also happens if the class is re-entered because of a call to a method on another class.</source>
          <target state="translated">Dzieje się również, jeśli klasa jest wprowadzono ponownie z powodu wywołanie do metody w klasie innej.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
          <source>The conditional expression to test.</source>
          <target state="translated">Wyrażenie warunkowe do testowania.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
          <source>The message to display if the condition is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Komunikat wyświetlany, jeśli wynikiem warunku jest <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
          <source>Specifies an invariant contract for the enclosing method or property, and displays a message if the condition for the contract fails.</source>
          <target state="translated">Określa niezmienną kontraktu dla otaczającego metody lub właściwości, a następnie wyświetla komunikat, jeśli warunek dla kontraktu nie powiedzie się.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Invariant%2A&gt;</ph> contracts are contained within a method that is identified by the <ph id="ph2">&lt;xref:System.Diagnostics.Contracts.ContractInvariantMethodAttribute&gt;</ph> attribute; typically, the method is named <ph id="ph3">`ObjectInvariant`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Invariant%2A&gt;</ph> Kontrakty są zawarte w metodę, która jest określana przez <ph id="ph2">&lt;xref:System.Diagnostics.Contracts.ContractInvariantMethodAttribute&gt;</ph> atrybutu; zazwyczaj nosi nazwę metody <ph id="ph3">`ObjectInvariant`</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
          <source>This contract can be specified only in a dedicated invariant method that is declared on a class.</source>
          <target state="translated">Ten kontrakt można określić tylko w dedykowanym niezmiennej metodę, która jest zadeklarowana w klasie.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
          <source>This contract is not exposed to clients; therefore, it may reference members that are less visible than the enclosing method.</source>
          <target state="translated">Niniejsza Umowa nie jest widoczne dla klientów; w związku z tym go może odwoływać się elementy członkowskie, które są widoczne mniej niż metoda otaczającej.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
          <source>You must use the binary rewriter for run-time enforcement of this invariant.</source>
          <target state="translated">Należy użyć binarne funkcji ponownego zapisu tym niezmiennej wykonania czasu wykonywania.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
          <source>Invariants are conditionally defined on the <ph id="ph1">`CONTRACTS FULL`</ph> symbol.</source>
          <target state="translated">Invariants warunkowo są zdefiniowane w <ph id="ph1">`CONTRACTS FULL`</ph> symbolu.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
          <source>During run-time checking, invariants are checked at the end of each public method.</source>
          <target state="translated">Podczas sprawdzania czasu wykonywania, invariants są sprawdzane na końcu każdej metody publicznej.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
          <source>If an invariant mentions a public method in the same class, the invariant check that would normally happen at the end of that public method is disabled and checked only at the end of the outermost method call to that class.</source>
          <target state="translated">Jeśli niezmiennej nazwa publiczną metodę w tej samej klasie, niezmiennej Sprawdź, czy czy zwykle odbywa się na końcu metody publicznej jest wyłączona, zaznaczone tylko na końcu wywołania metody zewnętrznych do tej klasy.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
          <source>This also happens if the class is re-entered because of a call to a method on another class.</source>
          <target state="translated">Dzieje się również, jeśli klasa jest wprowadzono ponownie z powodu wywołanie do metody w klasie innej.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
          <source>The type of value.</source>
          <target state="translated">Typ wartości.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
          <source>The value to represent (field or parameter).</source>
          <target state="translated">Wartość do reprezentowania (pola lub parametru).</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
          <source>Represents values as they were at the start of a method or property.</source>
          <target state="translated">Reprezentuje wartości, jakie były na początku metody lub właściwości.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
          <source>The value of the parameter or field at the start of a method or property.</source>
          <target state="translated">Wartość parametru lub pola na początku metody lub właściwości.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
          <source>This method can be used only in the conditional expression for the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A&gt;</ph> contract.</source>
          <target state="translated">Tej metody można użyć tylko w wyrażeniu warunkowym dla <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A&gt;</ph> kontraktu.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
          <source>The following example shows the use of the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.OldValue%2A&gt;</ph> method to ensure that a count has been updated.</source>
          <target state="translated">W poniższym przykładzie przedstawiono użycie <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.OldValue%2A&gt;</ph> metodę, aby upewnić się czy liczba został zaktualizowany.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.ContractClassAttribute&gt;</ph> class.</source>
          <target state="translated">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.ContractClassAttribute&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.Contracts.Contract">
          <source>Specifies a precondition contract for an enclosing method or property.</source>
          <target state="translated">Określa kontrakt warunek wstępny dla otaczającego metody lub właściwości.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
          <source>The conditional expression to test.</source>
          <target state="translated">Wyrażenie warunkowe do testowania.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
          <source>Specifies a precondition contract for the enclosing method or property.</source>
          <target state="translated">Określa kontrakt warunek wstępny dla otaczającego metody lub właściwości.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
          <source>This method call must be at the beginning of a method or property, before any other code.</source>
          <target state="translated">Wywołanie tej metody należy na początku metody lub właściwości przed innymi kodu.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
          <source>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.</source>
          <target state="translated">Niniejsza Umowa jest widoczne dla klientów; w związku z tym musi tylko odwołanie do elementów członkowskich, które są co najmniej jako widoczna jako metody otaczającej.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
          <source>Use this method instead of the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%60%601%28System.Boolean%29?displayProperty=nameWithType&gt;</ph> method when backward compatibility does not force you to throw a particular exception.</source>
          <target state="translated">Użyj tej metody zamiast <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%60%601%28System.Boolean%29?displayProperty=nameWithType&gt;</ph> metodą podczas zgodności z poprzednimi wersjami nie wymusza throw określonego wyjątku.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
          <source>The conditional expression to test.</source>
          <target state="translated">Wyrażenie warunkowe do testowania.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
          <source>The message to display if the condition is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Komunikat wyświetlany, jeśli wynikiem warunku jest <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
          <source>Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.</source>
          <target state="translated">Określa kontrakt warunek wstępny dla otaczającego metody lub właściwości, a następnie wyświetla komunikat, jeśli warunek dla kontraktu nie powiedzie się.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
          <source>This method call must be at the beginning of a method or property, before any other code.</source>
          <target state="translated">Wywołanie tej metody należy na początku metody lub właściwości przed innymi kodu.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
          <source>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.</source>
          <target state="translated">Niniejsza Umowa jest widoczne dla klientów; w związku z tym musi tylko odwołanie do elementów członkowskich, które są co najmniej jako widoczna jako metody otaczającej.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
          <source>Use this method instead of the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%60%601%28System.Boolean%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> method when backward compatibility does not force you to throw a particular exception.</source>
          <target state="translated">Użyj tej metody zamiast <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%60%601%28System.Boolean%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> metodą podczas zgodności z poprzednimi wersjami nie wymusza throw określonego wyjątku.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
          <source>The exception to throw if the condition is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Wyjątek do zgłoszenia, jeśli wynikiem warunku jest <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
          <source>The conditional expression to test.</source>
          <target state="translated">Wyrażenie warunkowe do testowania.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
          <source>Specifies a precondition contract for the enclosing method or property, and throws an exception if the condition for the contract fails.</source>
          <target state="translated">Określa kontrakt warunek wstępny dla otaczającego metody lub właściwości i zgłasza wyjątek, jeśli warunek dla kontraktu nie powiedzie się.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
          <source>You must turn on run-time checking to use the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%2A&gt;</ph> method.</source>
          <target state="translated">Należy włączyć czasu wykonywania sprawdzania <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
          <source>If run-time checking is turned off, the process will be terminated.</source>
          <target state="translated">Jeśli sprawdzanie czasu wykonywania jest wyłączone, proces zostanie zakończony.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
          <source>To obtain the tools for runtime checking, see <bpt id="p1">[</bpt>Code Contracts<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept> on the MSDN DevLabs Web site.</source>
          <target state="translated">Aby uzyskać narzędzia do sprawdzania środowiska uruchomieniowego, zobacz <bpt id="p1">[</bpt>kontraktów kodu<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept> w witrynie MSDN DevLabs.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
          <source>This method call must be at the beginning of a method or property, before any other code.</source>
          <target state="translated">Wywołanie tej metody należy na początku metody lub właściwości przed innymi kodu.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
          <source>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.</source>
          <target state="translated">Niniejsza Umowa jest widoczne dla klientów; w związku z tym musi tylko odwołanie do elementów członkowskich, które są co najmniej jako widoczna jako metody otaczającej.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
          <source>Use this method instead of the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%28System.Boolean%29?displayProperty=nameWithType&gt;</ph> method when you want to throw an exception if the precondition fails.</source>
          <target state="translated">Użyj tej metody zamiast <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%28System.Boolean%29?displayProperty=nameWithType&gt;</ph> metody, jeśli chcesz zgłosić wyjątek, jeśli warunki wstępne nie powiedzie się.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
          <source>The exception to throw if the condition is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Wyjątek do zgłoszenia, jeśli wynikiem warunku jest <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
          <source>The conditional expression to test.</source>
          <target state="translated">Wyrażenie warunkowe do testowania.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
          <source>The message to display if the condition is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Komunikat wyświetlany, jeśli wynikiem warunku jest <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
          <source>Specifies a precondition contract for the enclosing method or property, and throws an exception with the provided message if the condition for the contract fails.</source>
          <target state="translated">Określa kontrakt warunek wstępny dla otaczającego metody lub właściwości i zgłasza wyjątek z komunikatem podany, jeśli warunek dla kontraktu nie powiedzie się.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
          <source>You must turn on run-time checking to use the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%2A&gt;</ph> method.</source>
          <target state="translated">Należy włączyć czasu wykonywania sprawdzania <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
          <source>If run-time checking is turned off, the process will be terminated.</source>
          <target state="translated">Jeśli sprawdzanie czasu wykonywania jest wyłączone, proces zostanie zakończony.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
          <source>To obtain the tools for runtime checking, see <bpt id="p1">[</bpt>Code Contracts<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept> on the MSDN DevLabs Web site.</source>
          <target state="translated">Aby uzyskać narzędzia do sprawdzania środowiska uruchomieniowego, zobacz <bpt id="p1">[</bpt>kontraktów kodu<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept> w witrynie MSDN DevLabs.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
          <source>This method call must be at the beginning of a method or property, before any other code.</source>
          <target state="translated">Wywołanie tej metody należy na początku metody lub właściwości przed innymi kodu.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
          <source>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.</source>
          <target state="translated">Niniejsza Umowa jest widoczne dla klientów; w związku z tym musi tylko odwołanie do elementów członkowskich, które są co najmniej jako widoczna jako metody otaczającej.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
          <source>Use this method instead of the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%28System.Boolean%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> method when you want to throw an exception if the precondition fails.</source>
          <target state="translated">Użyj tej metody zamiast <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%28System.Boolean%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> metody, jeśli chcesz zgłosić wyjątek, jeśli warunki wstępne nie powiedzie się.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Result``1">
          <source>Type of return value of the enclosing method or property.</source>
          <target state="translated">Typ zwracanej wartości otaczającego metody lub właściwości.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Result``1">
          <source>Represents the return value of a method or property.</source>
          <target state="translated">Reprezentuje wartość zwracana metody lub właściwości.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Result``1">
          <source>Return value of the enclosing method or property.</source>
          <target state="translated">Wartość zwracana otaczającego metody lub właściwości.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Result``1">
          <source>This method can be used only in the conditional expression for the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A&gt;</ph> contract.</source>
          <target state="translated">Tej metody można użyć tylko w wyrażeniu warunkowym dla <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A&gt;</ph> kontraktu.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Result``1">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Result%2A&gt;</ph> method to specify an expected return value.</source>
          <target state="translated">Poniższy przykład przedstawia użycie <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Result%2A&gt;</ph> metodę, aby określić oczekiwanej wartości zwracanej.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Result``1">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.ContractClassAttribute&gt;</ph> class.</source>
          <target state="translated">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.ContractClassAttribute&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
          <source>The type of the <ph id="ph1">&lt;see langword="out" /&gt;</ph> parameter.</source>
          <target state="translated">Typ <ph id="ph1">&lt;see langword="out" /&gt;</ph> parametru.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
          <source>The <ph id="ph1">&lt;see langword="out" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="out" /&gt;</ph> Parametru.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
          <source>Represents the final (output) value of an <ph id="ph1">&lt;see langword="out" /&gt;</ph> parameter when returning from a method.</source>
          <target state="translated">Reprezentuje wartość końcowa (dane wyjściowe) <ph id="ph1">&lt;see langword="out" /&gt;</ph> parametru, gdy zwracany z metody.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
          <source>The output value of the <ph id="ph1">&lt;see langword="out" /&gt;</ph> parameter.</source>
          <target state="translated">Wartość danych wyjściowych <ph id="ph1">&lt;see langword="out" /&gt;</ph> parametru.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
          <source>This method can be used only in the conditional expression for the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A&gt;</ph> contract.</source>
          <target state="translated">Tej metody można użyć tylko w wyrażeniu warunkowym dla <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A&gt;</ph> kontraktu.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
          <source>As with the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.OldValue%2A&gt;</ph> method, you can omit the generic type parameter whenever the compiler is able to infer its type.</source>
          <target state="translated">Jak <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.OldValue%2A&gt;</ph> metody, można pominąć parametr typu ogólnego zawsze, gdy kompilator jest w stanie wywnioskować jej typu.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
          <source>The contract rewriter replaces the method call with the value of the <ph id="ph1">`out`</ph> parameter.</source>
          <target state="translated">Kontrakt funkcji ponownego zapisu zastępuje wywołanie metody wartość <ph id="ph1">`out`</ph> parametru.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.ValueAtReturn%2A&gt;</ph> method may appear only in postconditions.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.ValueAtReturn%2A&gt;</ph> Metody może występować tylko w postconditions.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
          <source>The argument to the method must be an <ph id="ph1">`out`</ph> parameter or a field of a structure <ph id="ph2">`out`</ph> parameter.</source>
          <target state="translated">Argument do metody musi być <ph id="ph1">`out`</ph> pola struktury lub parametr <ph id="ph2">`out`</ph> parametru.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
          <source>The latter is also useful when referring to fields in the postcondition of a structure constructor.</source>
          <target state="translated">Drugie polecenie jest również przydatne podczas odwoływania się do pól w warunku końcowego konstruktora struktury.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>