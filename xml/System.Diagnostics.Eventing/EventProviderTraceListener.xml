<Type Name="EventProviderTraceListener" FullName="System.Diagnostics.Eventing.EventProviderTraceListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bc8711f50989e145ce20c419447d37c2c3145e5b" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37665893" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventProviderTraceListener : System.Diagnostics.TraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventProviderTraceListener extends System.Diagnostics.TraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Eventing.EventProviderTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class EventProviderTraceListener&#xA;Inherits TraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventProviderTraceListener : System::Diagnostics::TraceListener" />
  <TypeSignature Language="F#" Value="type EventProviderTraceListener = class&#xA;    inherit TraceListener" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Odbiornika dla <see cref="T:System.Diagnostics.TraceSource" /> który zapisuje zdarzenia do podsystem ETW.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie dane zdarzeń (śledzenia lub debugowania) ze źródła zdarzenia są zapisywane do podsystemu ETW jako ciąg. Elementy danych są rozdzielane przecinkami. Aby określić inną ogranicznik, użyj <xref:System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter%2A> właściwości.  
  
 Dodanie detektora do <xref:System.Diagnostics.TraceSource?displayProperty=nameWithType> rejestruje dostawcę podsystemu ETW. Należy utworzyć sesję śledzenia ETW za pomocą programu wykonywalnego Logman.exe (lub podobny) można zapisać zdarzeń do pliku dziennika.  
  
 Manifest można korzystać ze odbiornika zdarzeń, ponieważ dane zdarzenia jest pojedynczy ciąg nie jest konieczne.  
  
 Gdy wywołujesz <xref:System.Diagnostics.TraceSource?displayProperty=nameWithType> metod można zapisać zdarzenia, należy przekazać <xref:System.Diagnostics.TraceEventType?displayProperty=nameWithType> wartość wyliczenia. Wyliczenie zawiera zarówno w poziomie, jak i słowo kluczowe wartości. Po włączeniu dostawcy odbiornika śledzenia sesji funkcji ETW, wartość poziomu, który określisz może być wartość skojarzoną z jedną z następujących <xref:System.Diagnostics.TraceEventType?displayProperty=nameWithType> wartości wyliczenia:  
  
-   Krytyczne (wartość wynosi 1)  
  
-   Błąd (wartość jest równa 2)  
  
-   Informacje o (wartość to 8)  
  
-   Pełne (wartość jest 16)  
  
-   Ostrzeżenie (wartość to 4)  
  
 Określanie dla sesji może być wartość skojarzoną z jedną z następujących wartości — słowo kluczowe <xref:System.Diagnostics.TraceEventType?displayProperty=nameWithType> wartości wyliczenia:  
  
-   Wznów (wartość to 2048)  
  
-   Uruchom (wartość to 256)  
  
-   Zatrzymaj (wartość to 512)  
  
-   Wstrzymywanie (wartość to 1024)  
  
-   Transfer (wartość wynosi 4096)  
  
   
  
## Examples  
  
```  
private static Guid providerId = new Guid("{B3F0C8FC-E8A8-4868-8901-1465E8A2F41B}");  
  
    EventProviderTraceListener listener = new EventProviderTraceListener(providerId.ToString(), "Test Listener", "::");  
  
    // You should use the All default level and control the level using the  
    // ETW session; otherwise, you may not log all the events requested by the  
    // session.  
    TraceSource source = new TraceSource("MyProvider", SourceLevels.All);  
  
    source.Listeners.Add(listener);  
  
    source.TraceData(TraceEventType.Warning | TraceEventType.Start, 2, new object[] { "abc", "def", true, 123 });  
  
    source.TraceEvent(TraceEventType.Warning, 12, "Provider guid: {0}", new object[] { providerId });  
  
    source.TraceInformation("string {0}, bool {1}, int {2}, ushort {3}", new object[] { "abc", false, 123, (UInt32)5 });  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.TraceListener" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.Eventing.EventProviderTraceListener" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventProviderTraceListener (string providerId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string providerId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (providerId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventProviderTraceListener(System::String ^ providerId);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.Eventing.EventProviderTraceListener : string -&gt; System.Diagnostics.Eventing.EventProviderTraceListener" Usage="new System.Diagnostics.Eventing.EventProviderTraceListener providerId" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="providerId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="providerId">Unikatowy ciąg <see cref="T:System.Guid" /> określający dostawcy.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.Eventing.EventProviderTraceListener" /> klasy przy użyciu identyfikatora określonego dostawcy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventProviderTraceListener (string providerId, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string providerId, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (providerId As String, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventProviderTraceListener(System::String ^ providerId, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.Eventing.EventProviderTraceListener : string * string -&gt; System.Diagnostics.Eventing.EventProviderTraceListener" Usage="new System.Diagnostics.Eventing.EventProviderTraceListener (providerId, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="providerId" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="providerId">Unikatowy ciąg <see cref="T:System.Guid" /> określający dostawcy.</param>
        <param name="name">Nazwa odbiornika.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.Eventing.EventProviderTraceListener" /> klasy przy użyciu określonego dostawcy identyfikator i nazwę odbiornika.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventProviderTraceListener (string providerId, string name, string delimiter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string providerId, string name, string delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (providerId As String, name As String, delimiter As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventProviderTraceListener(System::String ^ providerId, System::String ^ name, System::String ^ delimiter);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.Eventing.EventProviderTraceListener : string * string * string -&gt; System.Diagnostics.Eventing.EventProviderTraceListener" Usage="new System.Diagnostics.Eventing.EventProviderTraceListener (providerId, name, delimiter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="providerId" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="providerId">Unikatowy ciąg <see cref="T:System.Guid" /> określający dostawcy.</param>
        <param name="name">Nazwa odbiornika.</param>
        <param name="delimiter">Ogranicznik używany do ograniczania dane zdarzenia. (Aby uzyskać więcej informacji, zobacz <see cref="P:System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter" /> właściwości.)</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.Eventing.EventProviderTraceListener" /> klasy przy użyciu identyfikatora określonego dostawcy, nazwa i ogranicznik odbiornika.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProviderTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="eventProviderTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka strumienia wyjściowego, dzięki czemu nie będzie już otrzymywać dane wyjściowe śledzenia i debugowania.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delimiter">
      <MemberSignature Language="C#" Value="public string Delimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Delimiter" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Delimiter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Delimiter : string with get, set" Usage="System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera i ustawia Separator używany do ograniczania dane zdarzenia, które są zapisywane do podsystemu ETW.</summary>
        <value>Separator używany do ograniczania dane zdarzenia. Domyślnym ogranicznikiem jest przecinek.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Odbiornik elementów danych jest konwertowany na ciągi, a następnie łączy ciągi ze sobą przy użyciu określonego ogranicznika do ograniczania każdy element danych w ciągu. Ten ciąg jest następnie zapisywane w postaci dane dotyczące zdarzeń w podsystemu ETW.  
  
 Aby pomyślnie przeanalizować składni ciągu, konsumenta musi znać ogranicznik, który został użyty.  
  
 Jeśli dane zawierają ciąg, który może zawierać przecinka, określ odpowiedni ogranicznik, aby dane zdarzeń może zostać poprawnie zanalizowana.  
  
 Manifest można korzystać ze odbiornika zdarzeń, ponieważ dane zdarzenia jest pojedynczy ciąg nie jest konieczne.  
  
 Ogranicznik dotyczy dane zdarzenia zapisywane z użyciem <xref:System.Diagnostics.TraceSource.TraceData%2A?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProviderTraceListener.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberSignature Language="F#" Value="abstract member Fail : string * string -&gt; unit&#xA;override this.Fail : string * string -&gt; unit" Usage="eventProviderTraceListener.Fail (message, detailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat do emitowania.</param>
        <param name="detailMessage">Szczegółowy komunikat do emitowania.</param>
        <summary>Błąd emituje komunikat szczegółowy komunikat o błędzie, połączenia z odbiornikiem i utworzyć podczas implementowania <see cref="T:System.Diagnostics.TraceListener" /> klasy.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Diagnostics.TraceListener.Fail(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override sealed void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProviderTraceListener.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="abstract member Flush : unit -&gt; unit&#xA;override this.Flush : unit -&gt; unit" Usage="eventProviderTraceListener.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Opróżnia bufor wyjściowy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSupportedAttributes">
      <MemberSignature Language="C#" Value="protected override string[] GetSupportedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string[] GetSupportedAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProviderTraceListener.GetSupportedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetSupportedAttributes () As String()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override cli::array &lt;System::String ^&gt; ^ GetSupportedAttributes();" />
      <MemberSignature Language="F#" Value="abstract member GetSupportedAttributes : unit -&gt; string[]&#xA;override this.GetSupportedAttributes : unit -&gt; string[]" Usage="eventProviderTraceListener.GetSupportedAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera atrybuty niestandardowe, obsługiwane przez odbiornik śledzenia.</summary>
        <returns>Tablica ciągów nazw atrybutów niestandardowych, obsługiwane przez odbiornik śledzenia lub <see langword="null" /> Jeśli istnieją żadne atrybuty niestandardowe.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Diagnostics.TraceListener.GetSupportedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsThreadSafe">
      <MemberSignature Language="C#" Value="public override sealed bool IsThreadSafe { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsThreadSafe" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Eventing.EventProviderTraceListener.IsThreadSafe" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable ReadOnly Property IsThreadSafe As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsThreadSafe { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsThreadSafe : bool" Usage="System.Diagnostics.Eventing.EventProviderTraceListener.IsThreadSafe" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy odbiornik śledzenia jest wątek jest bezpieczne.</summary>
        <value>
          <see langword="true" /> Jeśli odbiornik śledzenia jest bezpieczny wątkowo; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Diagnostics.TraceListener.IsThreadSafe" />
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override sealed void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit&#xA;override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="eventProviderTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śladzie stosu.</param>
        <param name="source">Nazwa używana do identyfikowania danych wyjściowych, zazwyczaj jest to nazwa aplikacji, która wygenerowała zdarzenie śledzenia.</param>
        <param name="eventType">Jedną z <see cref="T:System.Diagnostics.TraceEventType" /> wartości, określając typ zdarzenia, który spowodował śledzenia.</param>
        <param name="id">Numeryczny identyfikator zdarzenia.</param>
        <param name="data">Dane śledzenia do emitowania.</param>
        <summary>Zapisuje śledzenia informacji, dane obiektu i informacje o zdarzeniach w danych wyjściowych do określonego odbiornika.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override sealed void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="abstract member TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit&#xA;override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="eventProviderTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śladzie stosu.</param>
        <param name="source">Nazwa używana do identyfikowania danych wyjściowych, zazwyczaj jest to nazwa aplikacji, która wygenerowała zdarzenie śledzenia.</param>
        <param name="eventType">Jedną z <see cref="T:System.Diagnostics.TraceEventType" /> wartości, określając typ zdarzenia, który spowodował śledzenia.</param>
        <param name="id">Numeryczny identyfikator zdarzenia.</param>
        <param name="data">Tablica obiektów do emitowania jako dane.</param>
        <summary>Zapisuje śledzenia informacji, dane obiektu i informacje o zdarzeniach w danych wyjściowych do określonego odbiornika.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override sealed void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id);" />
      <MemberSignature Language="F#" Value="abstract member TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int -&gt; unit&#xA;override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int -&gt; unit" Usage="eventProviderTraceListener.TraceEvent (eventCache, source, eventType, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śladzie stosu.</param>
        <param name="source">Nazwa używana do identyfikowania danych wyjściowych, zazwyczaj jest to nazwa aplikacji, która wygenerowała zdarzenie śledzenia.</param>
        <param name="eventType">Jedną z <see cref="T:System.Diagnostics.TraceEventType" /> wartości, określając typ zdarzenia, który spowodował śledzenia.</param>
        <param name="id">Numeryczny identyfikator zdarzenia.</param>
        <summary>Zapisy śledzenia i informacje o zdarzeniach w danych wyjściowych do określonego odbiornika.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override sealed void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit&#xA;override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="eventProviderTraceListener.TraceEvent (eventCache, source, eventType, id, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śladzie stosu.</param>
        <param name="source">Nazwa używana do identyfikowania danych wyjściowych, zazwyczaj jest to nazwa aplikacji, która wygenerowała zdarzenie śledzenia.</param>
        <param name="eventType">Jedną z <see cref="T:System.Diagnostics.TraceEventType" /> wartości, określając typ zdarzenia, który spowodował śledzenia.</param>
        <param name="id">Numeryczny identyfikator zdarzenia.</param>
        <param name="message">Komunikat do zapisu.</param>
        <summary>Zapisuje śledzenia informacji, wiadomości i informacje o zdarzeniach do wyjścia określonego odbiornika.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override sealed void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit&#xA;override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="eventProviderTraceListener.TraceEvent (eventCache, source, eventType, id, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śladzie stosu.</param>
        <param name="source">Nazwa używana do identyfikowania danych wyjściowych, zazwyczaj jest to nazwa aplikacji, która wygenerowała zdarzenie śledzenia.</param>
        <param name="eventType">Jedną z <see cref="T:System.Diagnostics.TraceEventType" /> wartości, określając typ zdarzenia, który spowodował śledzenia.</param>
        <param name="id">Numeryczny identyfikator zdarzenia.</param>
        <param name="format">Ciąg formatu, który zawiera zero lub więcej elementów formatu, które odnoszą się do obiektów w <c>args</c> tablicy.</param>
        <param name="args">
          <see langword="object" /> Tablica zawierająca zero lub więcej obiektów do sformatowania.</param>
        <summary>Zapisuje śledzenia informacji, sformatowane tablicę obiektów i informacji o zdarzeniu do wyjścia określonego odbiornika.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="TraceTransfer">
      <MemberSignature Language="C#" Value="public override sealed void TraceTransfer (System.Diagnostics.TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceTransfer(class System.Diagnostics.TraceEventCache eventCache, string source, int32 id, string message, valuetype System.Guid relatedActivityId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Sub TraceTransfer (eventCache As TraceEventCache, source As String, id As Integer, message As String, relatedActivityId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceTransfer(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, int id, System::String ^ message, Guid relatedActivityId);" />
      <MemberSignature Language="F#" Value="abstract member TraceTransfer : System.Diagnostics.TraceEventCache * string * int * string * Guid -&gt; unit&#xA;override this.TraceTransfer : System.Diagnostics.TraceEventCache * string * int * string * Guid -&gt; unit" Usage="eventProviderTraceListener.TraceTransfer (eventCache, source, id, message, relatedActivityId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="relatedActivityId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śladzie stosu.</param>
        <param name="source">Nazwa używana do identyfikowania danych wyjściowych, zazwyczaj jest to nazwa aplikacji, która wygenerowała zdarzenie śledzenia.</param>
        <param name="id">Numeryczny identyfikator zdarzenia.</param>
        <param name="message">Komunikat do zapisu.</param>
        <param name="relatedActivityId">Element <see cref="T:System.Guid" /> obiektu identyfikowanie powiązane działania.</param>
        <summary>Zapisuje informacje śledzenia, wiadomości, powiązana aktywność tożsamości i informacje o zdarzeniach w danych wyjściowych do określonego odbiornika.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override sealed void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProviderTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Write : string -&gt; unit&#xA;override this.Write : string -&gt; unit" Usage="eventProviderTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat do zapisu.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, zapisuje określony komunikat do odbiornika tworzenia klasy pochodnej.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Diagnostics.TraceListener.Write(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override sealed void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProviderTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : string -&gt; unit&#xA;override this.WriteLine : string -&gt; unit" Usage="eventProviderTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat do zapisu.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, zapisuje komunikat do odbiornika utworzysz w klasie pochodnej, a następnie terminator wiersza.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Diagnostics.TraceListener.WriteLine(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>