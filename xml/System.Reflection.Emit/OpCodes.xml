<Type Name="OpCodes" FullName="System.Reflection.Emit.OpCodes">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d6d2cd6f31cc97089037cf8c47853b3dd6d37d7e" /><Meta Name="ms.sourcegitcommit" Value="3efce15f3841385ee3ba24bd71ff0c0cf9a47815" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="04/03/2019" /><Meta Name="ms.locfileid" Value="58875583" /></Metadata><TypeSignature Language="C#" Value="public class OpCodes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OpCodes extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.OpCodes" />
  <TypeSignature Language="VB.NET" Value="Public Class OpCodes" />
  <TypeSignature Language="C++ CLI" Value="public ref class OpCodes" />
  <TypeSignature Language="F#" Value="type OpCodes = class" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="68c9f-101">Udostępnia reprezentujących pola instrukcji Microsoft Intermediate Language (MSIL) emisji przez <see cref="T:System.Reflection.Emit.ILGenerator" /> elementy członkowskie klasy (taki jak <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />).</span><span class="sxs-lookup"><span data-stu-id="68c9f-101">Provides field representations of the Microsoft Intermediate Language (MSIL) instructions for emission by the <see cref="T:System.Reflection.Emit.ILGenerator" /> class members (such as <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-102">Aby uzyskać szczegółowy opis rozkazów elementu członkowskiego, zobacz dokumentację Common Language Infrastructure (CLI), szczególnie "partycji III: Ustaw CIL instrukcji"oraz" Partition II: Definicja metadanych i semantyka".</span><span class="sxs-lookup"><span data-stu-id="68c9f-102">For a detailed description of the member opcodes, see the Common Language Infrastructure (CLI) documentation, especially "Partition III: CIL Instruction Set" and "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="68c9f-103">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) w witrynie Ecma International w sieci Web.</span><span class="sxs-lookup"><span data-stu-id="68c9f-103">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c9f-104">W poniższym przykładzie pokazano metodę dynamiczną za pomocą konstrukcji <xref:System.Reflection.Emit.ILGenerator> do emitowania `OpCodes` do <xref:System.Reflection.Emit.MethodBuilder>.</span><span class="sxs-lookup"><span data-stu-id="68c9f-104">The following example demonstrates the construction of a dynamic method using <xref:System.Reflection.Emit.ILGenerator> to emit `OpCodes` into a <xref:System.Reflection.Emit.MethodBuilder>.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-105">Dodaje dwie wartości, a następnie wypycha wynik na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-105">Adds two values and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-106">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-106">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-107">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-107">Format</span></span>|<span data-ttu-id="68c9f-108">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-108">Assembly Format</span></span>|<span data-ttu-id="68c9f-109">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-109">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-110">58</span><span class="sxs-lookup"><span data-stu-id="68c9f-110">58</span></span>|<span data-ttu-id="68c9f-111">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-111">add</span></span>|<span data-ttu-id="68c9f-112">Dodaje dwóch wartości liczbowych, zwracając wartość liczbową.</span><span class="sxs-lookup"><span data-stu-id="68c9f-112">Adds two numeric values, returning a new numeric value.</span></span>|  
  
 <span data-ttu-id="68c9f-113">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-113">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-114">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-114">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-115">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-115">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-116">i `value1` są zdjęte ze stosu ze stosu; `value1` jest dodawany do `value2`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-116">and `value1` are popped from the stack; `value1` is added to `value2`.</span></span>  
  
4.  <span data-ttu-id="68c9f-117">Wyniki są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-117">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-118">Nie wykryto przepełnienia liczby całkowitej operacji (do obsługi właściwego przepełnienie zobacz <xref:System.Reflection.Emit.OpCodes.Add_Ovf>).</span><span class="sxs-lookup"><span data-stu-id="68c9f-118">Overflow is not detected for integer operations (for proper overflow handling, see <xref:System.Reflection.Emit.OpCodes.Add_Ovf>).</span></span>  
  
 <span data-ttu-id="68c9f-119">Dodanie liczby całkowitej opakowuje, a nie zmienia nasycenie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-119">Integer addition wraps, rather than saturates.</span></span> <span data-ttu-id="68c9f-120">Na przykład przy założeniu 8-bitowych liczb całkowitych gdzie `value1` jest ustawiona na wartość 255 i `value2` jest ustawiona na 1, opakowaną wynikiem jest 0, a nie na 256.</span><span class="sxs-lookup"><span data-stu-id="68c9f-120">For example, assuming 8-bit integers where `value1` is set to 255 and `value2` is set to 1, the wrapped result is 0 rather than 256.</span></span>  
  
 <span data-ttu-id="68c9f-121">Przepełnienie zmiennoprzecinkowej zwraca `+inf` (`PositiveInfinity`) lub `-inf` (`NegativeInfinity`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-121">Floating-point overflow returns `+inf` (`PositiveInfinity`) or `-inf` (`NegativeInfinity`).</span></span>  
  
 <span data-ttu-id="68c9f-122">W poniższej tabeli wymieniono typy operand dopuszczalne i ich odpowiedni typ danych wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-122">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="68c9f-123">Jeśli brak wpisu dla kombinacji określonego typu (na przykład `int32` i `float`; `int32` i `int64`), jest nieprawidłowy Microsoft Intermediate Language (MSIL) i generuje błąd.</span><span class="sxs-lookup"><span data-stu-id="68c9f-123">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) and generates an error.</span></span>  
  
|<span data-ttu-id="68c9f-124">argument operacji</span><span class="sxs-lookup"><span data-stu-id="68c9f-124">operand</span></span>|<span data-ttu-id="68c9f-125">Typ wartość1</span><span class="sxs-lookup"><span data-stu-id="68c9f-125">value1 type</span></span>|<span data-ttu-id="68c9f-126">Typ wartość2</span><span class="sxs-lookup"><span data-stu-id="68c9f-126">value2 type</span></span>|<span data-ttu-id="68c9f-127">Typ wyniku</span><span class="sxs-lookup"><span data-stu-id="68c9f-127">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="68c9f-128">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-128">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="68c9f-129">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-129">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="68c9f-130">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-130">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="68c9f-131">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-131">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="68c9f-132">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-132">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="68c9f-133">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-133">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="68c9f-134">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-134">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="68c9f-135">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-135">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="68c9f-136">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-136">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="68c9f-137">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-137">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="68c9f-138">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-138">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="68c9f-139">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-139">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="68c9f-140">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-140">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="68c9f-141">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-141">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="68c9f-142">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `add` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-142">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-143">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-143">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-144">Dodanie dwóch liczb całkowitych, przeprowadza sprawdzanie przepełnienia i umieszcza wynik na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-144">Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-145">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-145">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-146">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-146">Format</span></span>|<span data-ttu-id="68c9f-147">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-147">Assembly Format</span></span>|<span data-ttu-id="68c9f-148">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-148">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-149">D6</span><span class="sxs-lookup"><span data-stu-id="68c9f-149">D6</span></span>|<span data-ttu-id="68c9f-150">add.ovf</span><span class="sxs-lookup"><span data-stu-id="68c9f-150">add.ovf</span></span>|<span data-ttu-id="68c9f-151">Dodaje dwie wartości liczby całkowitej ze znakiem ze sprawdzeniem przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="68c9f-151">Adds two signed integer values with an overflow check.</span></span>|  
  
 <span data-ttu-id="68c9f-152">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-152">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-153">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-153">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-154">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-154">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-155">i `value1` są zdjęte ze stosu ze stosu; `value1` jest dodawany do `value2` ze sprawdzaniem dla przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="68c9f-155">and `value1` are popped from the stack; `value1` is added to `value2` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="68c9f-156">Wyniki są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-156">The result is pushed onto the stack.</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-157">jest generowany, jeśli wynik nie jest reprezentowana w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-157">is thrown if the result is not represented in the result type.</span></span>  
  
 <span data-ttu-id="68c9f-158">Można wykonać tej operacji na liczby całkowite ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-158">You can perform this operation on signed integers.</span></span> <span data-ttu-id="68c9f-159">W przypadku wartości zmiennoprzecinkowe, użyj <xref:System.Reflection.Emit.OpCodes.Add>.</span><span class="sxs-lookup"><span data-stu-id="68c9f-159">For floating-point values, use <xref:System.Reflection.Emit.OpCodes.Add>.</span></span>  
  
 <span data-ttu-id="68c9f-160">W poniższej tabeli wymieniono typy operand dopuszczalne i ich odpowiedni typ danych wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-160">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="68c9f-161">Jeśli brak wpisu dla kombinacji określonego typu (na przykład `int32` i `float`; `int32` i `int64`), jest nieprawidłowy instrukcji Microsoft Intermediate Language (MSIL) i generuje błąd.</span><span class="sxs-lookup"><span data-stu-id="68c9f-161">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) instruction and generates an error.</span></span>  
  
|<span data-ttu-id="68c9f-162">argument operacji</span><span class="sxs-lookup"><span data-stu-id="68c9f-162">operand</span></span>|<span data-ttu-id="68c9f-163">Typ wartość1</span><span class="sxs-lookup"><span data-stu-id="68c9f-163">value1 type</span></span>|<span data-ttu-id="68c9f-164">Typ wartość2</span><span class="sxs-lookup"><span data-stu-id="68c9f-164">value2 type</span></span>|<span data-ttu-id="68c9f-165">Typ wyniku</span><span class="sxs-lookup"><span data-stu-id="68c9f-165">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="68c9f-166">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-166">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="68c9f-167">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-167">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="68c9f-168">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-168">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="68c9f-169">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-169">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="68c9f-170">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-170">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="68c9f-171">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-171">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="68c9f-172">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-172">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="68c9f-173">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-173">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="68c9f-174">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-174">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="68c9f-175">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-175">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="68c9f-176">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-176">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="68c9f-177">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-177">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="68c9f-178">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-178">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="68c9f-179">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-179">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="68c9f-180">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `add.ovf` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-180">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-181">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-181">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-182">Dodaje dwie wartości liczb całkowitych bez znaku, przeprowadza sprawdzanie przepełnienia i umieszcza wynik na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-182">Adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-183">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-183">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-184">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-184">Format</span></span>|<span data-ttu-id="68c9f-185">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-185">Assembly Format</span></span>|<span data-ttu-id="68c9f-186">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-186">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-187">D7</span><span class="sxs-lookup"><span data-stu-id="68c9f-187">D7</span></span>|<span data-ttu-id="68c9f-188">add.ovf.un</span><span class="sxs-lookup"><span data-stu-id="68c9f-188">add.ovf.un</span></span>|<span data-ttu-id="68c9f-189">Dodaje dwie wartości liczb całkowitych bez znaku ze sprawdzeniem przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="68c9f-189">Adds two unsigned integer values with an overflow check.</span></span>|  
  
 <span data-ttu-id="68c9f-190">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-190">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-191">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-191">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-192">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-192">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-193">i `value1` są zdjęte ze stosu ze stosu; `value1` jest dodawany do `value2` ze sprawdzaniem dla przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="68c9f-193">and `value1` are popped from the stack; `value1` is added to `value2` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="68c9f-194">Wyniki są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-194">The result is pushed onto the stack.</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-195">jest generowany, jeśli wynik nie jest reprezentowana w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-195">is thrown if the result is not represented in the result type.</span></span>  
  
 <span data-ttu-id="68c9f-196">Można wykonać tej operacji na liczby całkowite ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-196">You can perform this operation on signed integers.</span></span> <span data-ttu-id="68c9f-197">W przypadku wartości zmiennoprzecinkowe, użyj <xref:System.Reflection.Emit.OpCodes.Add>.</span><span class="sxs-lookup"><span data-stu-id="68c9f-197">For floating-point values, use <xref:System.Reflection.Emit.OpCodes.Add>.</span></span>  
  
 <span data-ttu-id="68c9f-198">W poniższej tabeli wymieniono typy operand dopuszczalne i ich odpowiedni typ danych wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-198">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="68c9f-199">Jeśli brak wpisu dla kombinacji określonego typu (na przykład `int32` i `float`; `int32` i `int64`), jest nieprawidłowy instrukcji Microsoft Intermediate Language (MSIL) i generuje błąd.</span><span class="sxs-lookup"><span data-stu-id="68c9f-199">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) instruction and generates an error.</span></span>  
  
|<span data-ttu-id="68c9f-200">argument operacji</span><span class="sxs-lookup"><span data-stu-id="68c9f-200">operand</span></span>|<span data-ttu-id="68c9f-201">Typ wartość1</span><span class="sxs-lookup"><span data-stu-id="68c9f-201">value1 type</span></span>|<span data-ttu-id="68c9f-202">Typ wartość2</span><span class="sxs-lookup"><span data-stu-id="68c9f-202">value2 type</span></span>|<span data-ttu-id="68c9f-203">Typ wyniku</span><span class="sxs-lookup"><span data-stu-id="68c9f-203">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="68c9f-204">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-204">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="68c9f-205">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-205">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="68c9f-206">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-206">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="68c9f-207">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-207">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="68c9f-208">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-208">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="68c9f-209">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-209">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="68c9f-210">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-210">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="68c9f-211">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-211">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="68c9f-212">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-212">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="68c9f-213">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-213">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="68c9f-214">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-214">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="68c9f-215">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-215">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="68c9f-216">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-216">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="68c9f-217">add</span><span class="sxs-lookup"><span data-stu-id="68c9f-217">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="68c9f-218">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `add.ovf.un` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-218">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-219">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-219">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode And;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode And" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.And" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly And As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode And;" />
      <MemberSignature Language="F#" Value=" staticval mutable And : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.And" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-220">Oblicza dwie wartości bitowe AND i umieszcza wynik na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-220">Computes the bitwise AND of two values and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-221">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-221">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-222">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-222">Format</span></span>|<span data-ttu-id="68c9f-223">Instrukcja</span><span class="sxs-lookup"><span data-stu-id="68c9f-223">Instruction</span></span>|<span data-ttu-id="68c9f-224">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-224">Description</span></span>|  
|------------|-----------------|-----------------|  
|<span data-ttu-id="68c9f-225">5F</span><span class="sxs-lookup"><span data-stu-id="68c9f-225">5F</span></span>|<span data-ttu-id="68c9f-226">and</span><span class="sxs-lookup"><span data-stu-id="68c9f-226">and</span></span>|<span data-ttu-id="68c9f-227">Określa bitowe AND dwóch wartości całkowitych.</span><span class="sxs-lookup"><span data-stu-id="68c9f-227">Determines the bitwise AND of two integer values.</span></span>|  
  
 <span data-ttu-id="68c9f-228">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-228">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-229">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-229">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-230">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-230">is pushed onto the stack.</span></span>  
  
3.  `value1` <span data-ttu-id="68c9f-231">i `value2` są zdjęte ze stosu ze stosu; dwie wartości bitowe AND jest obliczany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-231">and `value2` are popped from the stack; the bitwise AND of the two values is computed.</span></span>  
  
4.  <span data-ttu-id="68c9f-232">Wyniki są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-232">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-233">`and` Instrukcja oblicza iloczynu bitowego AND wartości dwóch pierwszych na stosie i pozostawia wynik na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-233">The `and` instruction computes the bitwise AND of the top two values on the stack and leaves the result on the stack.</span></span>  
  
 `And` <span data-ttu-id="68c9f-234">jest operacją specyficzne dla liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-234">is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="68c9f-235">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `and` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-235">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `and` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-236">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-236">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Arglist">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Arglist;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Arglist" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Arglist" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Arglist As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Arglist;" />
      <MemberSignature Language="F#" Value=" staticval mutable Arglist : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Arglist" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-237">Zwraca niezarządzany wskaźnik do listy argumentów bieżącej metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-237">Returns an unmanaged pointer to the argument list of the current method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-238">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-238">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-239">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-239">Format</span></span>|<span data-ttu-id="68c9f-240">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-240">Assembly Format</span></span>|<span data-ttu-id="68c9f-241">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-241">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-242">FE 00</span><span class="sxs-lookup"><span data-stu-id="68c9f-242">FE 00</span></span>|<span data-ttu-id="68c9f-243">lista_argumentów</span><span class="sxs-lookup"><span data-stu-id="68c9f-243">arglist</span></span>|<span data-ttu-id="68c9f-244">Zwraca uchwyt listy argumentów dla bieżącej metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-244">Returns an argument list handle for the current method.</span></span>|  
  
 <span data-ttu-id="68c9f-245">Nie zachowania stosu oceny są wykonywane przez tę operację.</span><span class="sxs-lookup"><span data-stu-id="68c9f-245">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="68c9f-246">`arglist` Instrukcja zwraca uchwyt nieprzezroczyste (niezarządzany wskaźnik typu `native int`) reprezentujący listy argumentów bieżącej metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-246">The `arglist` instruction returns an opaque handle (an unmanaged pointer, of type `native int`) that represents the argument list of the current method.</span></span> <span data-ttu-id="68c9f-247">Tego dojścia jest prawidłowy tylko w trakcie okresu istnienia bieżącej metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-247">This handle is valid only during the lifetime of the current method.</span></span> <span data-ttu-id="68c9f-248">Można jednak przekazać dojście do innych metod, tak długo, jak bieżąca metoda znajduje się na wątek kontroli.</span><span class="sxs-lookup"><span data-stu-id="68c9f-248">You can, however, pass the handle to other methods as long as the current method is on the thread of control.</span></span> <span data-ttu-id="68c9f-249">Można wykonać tylko `arglist` instrukcji w metodzie, która przyjmuje zmienną liczbę argumentów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-249">You can only execute the `arglist` instruction within a method that takes a variable number of arguments.</span></span>  
  
 <span data-ttu-id="68c9f-250">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `arglist` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-250">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `arglist` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-251">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-251">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beq">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Beq;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Beq" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Beq" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Beq As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Beq;" />
      <MemberSignature Language="F#" Value=" staticval mutable Beq : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Beq" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-252">Transfer kontroli do instrukcji docelowej, jeśli dwie wartości są równe.</span><span class="sxs-lookup"><span data-stu-id="68c9f-252">Transfers control to a target instruction if two values are equal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-253">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-253">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-254">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-254">Format</span></span>|<span data-ttu-id="68c9f-255">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-255">Assembly Format</span></span>|<span data-ttu-id="68c9f-256">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-256">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-257">3B < `int32` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-257">3B < `int32` ></span></span>|<span data-ttu-id="68c9f-258">beq</span><span class="sxs-lookup"><span data-stu-id="68c9f-258">beq</span></span> `target`|<span data-ttu-id="68c9f-259">Gałąź do instrukcji docelowej przesunięciem `target` Jeśli dwie wartości są równe.</span><span class="sxs-lookup"><span data-stu-id="68c9f-259">Branch to the target instruction at offset `target` if the two values are equal.</span></span>|  
  
 <span data-ttu-id="68c9f-260">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-260">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-261">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-261">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-262">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-262">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-263">i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest równa `value2`, gałąź jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-263">and `value1` are popped from the stack; if `value1` is equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="68c9f-264">`beq` Instrukcji przekazuje sterowanie do instrukcji określonego obiektu docelowego, jeśli `value1` jest równa `value2`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-264">The `beq` instruction transfers control to the specified target instruction if `value1` is equal to `value2`.</span></span> <span data-ttu-id="68c9f-265">Efekt jest taki sam jak wykonywanie `ceq` instrukcji, następuje `brtrue` gałąź do instrukcji określony element docelowy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-265">The effect is the same as performing a `ceq` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="68c9f-266">Instrukcji docelowej jest reprezentowany jako 4-bajtowych oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-266">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-267">Typy operand dopuszczalne są hermetyzowane poniżej:</span><span class="sxs-lookup"><span data-stu-id="68c9f-267">The acceptable operand types are encapsulated below:</span></span>  
  
 <span data-ttu-id="68c9f-268">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-268">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="68c9f-269">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji (Przeniesienie takie są znacznie ograniczone i musi być <xref:System.Reflection.Emit.OpCodes.Leave> instrukcji zamiast tego).</span><span class="sxs-lookup"><span data-stu-id="68c9f-269">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction (such transfers are severely restricted and must use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction instead).</span></span>  
  
 <span data-ttu-id="68c9f-270">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `beq` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-270">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `beq` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-271">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-271">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beq_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Beq_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Beq_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Beq_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Beq_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Beq_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Beq_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Beq_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-272">Transfery kontrolę instrukcję target (krótka), jeśli dwie wartości są równe.</span><span class="sxs-lookup"><span data-stu-id="68c9f-272">Transfers control to a target instruction (short form) if two values are equal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-273">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-273">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-274">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-274">Format</span></span>|<span data-ttu-id="68c9f-275">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-275">Assembly Format</span></span>|<span data-ttu-id="68c9f-276">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-276">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-277">2E < `int8` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-277">2E < `int8` ></span></span>|<span data-ttu-id="68c9f-278">beq.s</span><span class="sxs-lookup"><span data-stu-id="68c9f-278">beq.s</span></span> `target`|<span data-ttu-id="68c9f-279">Gałąź do instrukcji docelowej przesunięciem `target` przypadku równości, krótka</span><span class="sxs-lookup"><span data-stu-id="68c9f-279">Branch to the target instruction at offset `target` if equal, short form</span></span>|  
  
 <span data-ttu-id="68c9f-280">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-280">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-281">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-281">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-282">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-282">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-283">i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest równa `value2`, gałąź jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-283">and `value1` are popped from the stack; if `value1` is equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="68c9f-284">`beq.s` Instrukcji przekazuje sterowanie do instrukcji określonego obiektu docelowego, jeśli `value1` jest równa `value2`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-284">The `beq.s` instruction transfers control to the specified target instruction if `value1` is equal to `value2`.</span></span> <span data-ttu-id="68c9f-285">Efekt jest taki sam jak wykonywanie `ceq` instrukcji, następuje `brtrue` gałąź do instrukcji określony element docelowy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-285">The effect is the same as performing a `ceq` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="68c9f-286">Instrukcji docelowej jest reprezentowany jako 1-bajtowe oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-286">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-287">Typy operand dopuszczalne są hermetyzowane poniżej:</span><span class="sxs-lookup"><span data-stu-id="68c9f-287">The acceptable operand types are encapsulated below:</span></span>  
  
 <span data-ttu-id="68c9f-288">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-288">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="68c9f-289">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji (Przeniesienie takie są znacznie ograniczone i musi być <xref:System.Reflection.Emit.OpCodes.Leave> instrukcji zamiast tego).</span><span class="sxs-lookup"><span data-stu-id="68c9f-289">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction (such transfers are severely restricted and must use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction instead).</span></span>  
  
 <span data-ttu-id="68c9f-290">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `beq.s` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-290">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `beq.s` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-291">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-291">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-292">Transfer kontroli do instrukcji docelowej, jeśli pierwsza wartość jest większa lub równa wartości drugiego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-292">Transfers control to a target instruction if the first value is greater than or equal to the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-293">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-293">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-294">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-294">Format</span></span>|<span data-ttu-id="68c9f-295">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-295">Assembly Format</span></span>|<span data-ttu-id="68c9f-296">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-296">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-297">3C</span><span class="sxs-lookup"><span data-stu-id="68c9f-297">3C</span></span> `<int32>`|<span data-ttu-id="68c9f-298">bge</span><span class="sxs-lookup"><span data-stu-id="68c9f-298">bge</span></span> `target`|<span data-ttu-id="68c9f-299">Gałąź do instrukcji docelowej od określonego przesunięcia, jeśli pierwsza wartość jest większa lub równa wartości drugiego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-299">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value.</span></span>|  
  
 <span data-ttu-id="68c9f-300">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-300">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-301">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-301">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-302">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-302">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-303">i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest większa niż lub równa `value2`, gałąź jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-303">and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="68c9f-304">`bge` Instrukcji przekazuje sterowanie do instrukcji określonego obiektu docelowego, jeśli `value1` jest większa niż lub równa `value2`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-304">The `bge` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`.</span></span> <span data-ttu-id="68c9f-305">Efekt jest taka sama jak wykonywanie `clt.un` instrukcji, następuje `brfalse` gałąź do instrukcji określony element docelowy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-305">The effect is identical to performing a `clt.un` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="68c9f-306">Instrukcji docelowej jest reprezentowany jako 4-bajtowych oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-306">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-307">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-307">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="68c9f-308">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-308">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-309">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `bge` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-309">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-310">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-310">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-311">Transfery kontrolę instrukcję target (krótka), jeśli pierwsza wartość jest większa lub równa wartości drugiego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-311">Transfers control to a target instruction (short form) if the first value is greater than or equal to the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-312">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-312">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-313">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-313">Format</span></span>|<span data-ttu-id="68c9f-314">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-314">Assembly Format</span></span>|<span data-ttu-id="68c9f-315">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-315">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-316">2F</span><span class="sxs-lookup"><span data-stu-id="68c9f-316">2F</span></span> `<int8>`|<span data-ttu-id="68c9f-317">bge.s</span><span class="sxs-lookup"><span data-stu-id="68c9f-317">bge.s</span></span> `target`|<span data-ttu-id="68c9f-318">Gałąź do instrukcji docelowej od określonego przesunięcia, jeśli pierwsza wartość jest większa lub równa wartości drugiego, krótka.</span><span class="sxs-lookup"><span data-stu-id="68c9f-318">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value, short form.</span></span>|  
  
 <span data-ttu-id="68c9f-319">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-319">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-320">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-320">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-321">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-321">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-322">i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest większa niż lub równa `value2`, gałąź jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-322">and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="68c9f-323">`bge.s` Instrukcji przekazuje sterowanie do instrukcji określonego obiektu docelowego, jeśli `value1` jest większa niż lub równa `value2`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-323">The `bge.s` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`.</span></span> <span data-ttu-id="68c9f-324">Efekt jest taka sama jak wykonywanie `clt.un` instrukcji, następuje `brfalse` gałąź do instrukcji określony element docelowy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-324">The effect is identical to performing a `clt.un` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="68c9f-325">Instrukcji docelowej jest reprezentowany jako 1-bajtowe oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-325">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-326">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-326">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="68c9f-327">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-327">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-328">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `bge.s` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-328">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.s` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-329">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-329">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-330">Transfer kontroli do instrukcji docelowej, jeśli pierwsza wartość jest większa niż wartość drugiego podczas porównywania wartości liczb całkowitych bez znaku lub wartości zmiennoprzecinkowych nieuporządkowane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-330">Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-331">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-331">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-332">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-332">Format</span></span>|<span data-ttu-id="68c9f-333">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-333">Assembly Format</span></span>|<span data-ttu-id="68c9f-334">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-334">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-335">41</span><span class="sxs-lookup"><span data-stu-id="68c9f-335">41</span></span> `<int32>`|<span data-ttu-id="68c9f-336">bge.UN</span><span class="sxs-lookup"><span data-stu-id="68c9f-336">bge.un</span></span> `target`|<span data-ttu-id="68c9f-337">Gałąź do instrukcji docelowej od określonego przesunięcia, jeśli pierwsza wartość jest większa lub równa wartości drugiego (wartości bez znaku).</span><span class="sxs-lookup"><span data-stu-id="68c9f-337">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="68c9f-338">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-338">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-339">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-339">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-340">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-340">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-341">i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest większa niż lub równa `value2`, gałąź jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-341">and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="68c9f-342">`bge.un` Instrukcji przekazuje sterowanie do instrukcji określonego obiektu docelowego, jeśli `value1` jest większa niż lub równa `value2`, w porównaniu z przy użyciu liczb całkowitych bez znaku lub wartości zmiennoprzecinkowych nieuporządkowane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-342">The `bge.un` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="68c9f-343">Efekt jest taka sama jak wykonywanie `clt` instrukcji, następuje `brfalse` gałąź do instrukcji określony element docelowy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-343">The effect is identical to performing a `clt` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="68c9f-344">Instrukcji docelowej jest reprezentowany jako 4-bajtowych oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-344">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-345">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-345">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="68c9f-346">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-346">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-347">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `bge.un` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-347">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.un` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-348">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-348">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-349">Transfery kontrolę instrukcję target (krótka), jeśli pierwsza wartość jest większa niż wartość drugiego podczas porównywania wartości liczb całkowitych bez znaku lub wartości zmiennoprzecinkowych nieuporządkowane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-349">Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-350">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-350">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-351">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-351">Format</span></span>|<span data-ttu-id="68c9f-352">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-352">Assembly Format</span></span>|<span data-ttu-id="68c9f-353">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-353">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-354">34 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-354">34 < `int8` ></span></span>|<span data-ttu-id="68c9f-355">bge.un.s</span><span class="sxs-lookup"><span data-stu-id="68c9f-355">bge.un.s</span></span> `target`|<span data-ttu-id="68c9f-356">Gałąź do instrukcji docelowej od określonego przesunięcia, jeśli pierwsza wartość jest większa lub równa wartości (wartości bez znaku), drugi krótka.</span><span class="sxs-lookup"><span data-stu-id="68c9f-356">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="68c9f-357">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-357">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-358">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-358">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-359">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-359">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-360">i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest większa niż lub równa `value2`, gałąź jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-360">and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="68c9f-361">`bge.un.s` Instrukcji przekazuje sterowanie do instrukcji określonego obiektu docelowego, jeśli `value1` jest większa niż lub równa `value2`, w porównaniu z przy użyciu liczb całkowitych bez znaku lub wartości zmiennoprzecinkowych nieuporządkowane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-361">The `bge.un.s` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="68c9f-362">Efekt jest taka sama jak wykonywanie `clt` instrukcji, następuje `brfalse` gałąź do instrukcji określony element docelowy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-362">The effect is identical to performing a `clt` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="68c9f-363">Instrukcji docelowej jest reprezentowany jako 1-bajtowe oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-363">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-364">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-364">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="68c9f-365">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-365">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-366">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `bge.un.s` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-366">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-367">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-367">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-368">Transfer kontroli do instrukcji docelowej, jeśli pierwsza wartość jest większa niż wartość drugiego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-368">Transfers control to a target instruction if the first value is greater than the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-369">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-369">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-370">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-370">Format</span></span>|<span data-ttu-id="68c9f-371">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-371">Assembly Format</span></span>|<span data-ttu-id="68c9f-372">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-372">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-373">3D < `int32` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-373">3D < `int32` ></span></span>|<span data-ttu-id="68c9f-374">BGT</span><span class="sxs-lookup"><span data-stu-id="68c9f-374">bgt</span></span> `target`|<span data-ttu-id="68c9f-375">Gałąź do instrukcji docelowej od określonego przesunięcia, jeśli pierwsza wartość jest większa niż wartość drugiego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-375">Branch to the target instruction at the specified offset if the first value is greater than the second value.</span></span>|  
  
 <span data-ttu-id="68c9f-376">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-376">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-377">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-377">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-378">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-378">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-379">i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest większa niż `value2`, gałąź jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-379">and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="68c9f-380">`bgt` Instrukcji przekazuje sterowanie do instrukcji określonego obiektu docelowego, jeśli `value1` jest większa niż `value2`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-380">The `bgt` instruction transfers control to the specified target instruction if `value1` is greater than `value2`.</span></span> <span data-ttu-id="68c9f-381">Efekt jest taka sama jak wykonywanie `cgt` instrukcji, następuje `brtrue` gałąź do instrukcji określony element docelowy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-381">The effect is identical to performing a `cgt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="68c9f-382">Instrukcji docelowej jest reprezentowany jako 4-bajtowych oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-382">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-383">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-383">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="68c9f-384">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-384">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-385">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `bgt` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-385">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-386">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-386">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-387">Transfery kontrolę instrukcję target (krótka), jeśli pierwsza wartość jest większa niż wartość drugiego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-387">Transfers control to a target instruction (short form) if the first value is greater than the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-388">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-388">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-389">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-389">Format</span></span>|<span data-ttu-id="68c9f-390">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-390">Assembly Format</span></span>|<span data-ttu-id="68c9f-391">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-391">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-392">30 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-392">30 < `int8` ></span></span>|<span data-ttu-id="68c9f-393">BGT.s</span><span class="sxs-lookup"><span data-stu-id="68c9f-393">bgt.s</span></span> `target`|<span data-ttu-id="68c9f-394">Gałąź do instrukcji docelowej od określonego przesunięcia, jeśli pierwsza wartość jest większa niż wartość drugiego krótka.</span><span class="sxs-lookup"><span data-stu-id="68c9f-394">Branch to the target instruction at the specified offset if the first value is greater than the second value, short form.</span></span>|  
  
 <span data-ttu-id="68c9f-395">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-395">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-396">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-396">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-397">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-397">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-398">i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest większa niż `value2`, gałąź jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-398">and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="68c9f-399">`bgt.s` Instrukcji przekazuje sterowanie do instrukcji określonego obiektu docelowego, jeśli `value1` jest większa niż `value2`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-399">The `bgt.s` instruction transfers control to the specified target instruction if `value1` is greater than `value2`.</span></span> <span data-ttu-id="68c9f-400">Efekt jest taka sama jak wykonywanie `cgt` instrukcji, następuje `brtrue` gałąź do instrukcji określony element docelowy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-400">The effect is identical to performing a `cgt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="68c9f-401">Instrukcji docelowej jest reprezentowany jako 1-bajtowe oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-401">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-402">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-402">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="68c9f-403">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-403">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-404">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `bgt.s` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-404">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.s` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-405">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-405">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-406">Transfer kontroli do instrukcji docelowej, jeśli pierwsza wartość jest większa niż wartość drugiego podczas porównywania wartości liczb całkowitych bez znaku lub wartości zmiennoprzecinkowych nieuporządkowane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-406">Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-407">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-407">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-408">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-408">Format</span></span>|<span data-ttu-id="68c9f-409">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-409">Assembly Format</span></span>|<span data-ttu-id="68c9f-410">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-410">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-411">42 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-411">42 < `int32` ></span></span>|<span data-ttu-id="68c9f-412">BGT.UN</span><span class="sxs-lookup"><span data-stu-id="68c9f-412">bgt.un</span></span> `target`|<span data-ttu-id="68c9f-413">Gałąź do instrukcji docelowej od określonego przesunięcia, jeśli pierwsza wartość jest większa od drugiej wartości (wartości bez znaku).</span><span class="sxs-lookup"><span data-stu-id="68c9f-413">Branch to the target instruction at the specified offset if the first value is greater than the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="68c9f-414">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-414">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-415">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-415">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-416">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-416">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-417">i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest większa niż `value2`, gałąź jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-417">and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="68c9f-418">`bgt.un` Instrukcji przekazuje sterowanie do instrukcji określonego obiektu docelowego, jeśli `value1` jest większa niż `value2`, w porównaniu z przy użyciu liczb całkowitych bez znaku lub wartości zmiennoprzecinkowych nieuporządkowane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-418">The `bgt.un` instruction transfers control to the specified target instruction if `value1` is greater than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="68c9f-419">Efekt jest taka sama jak wykonywanie `cgt.un` instrukcji, następuje `brtrue` gałąź do instrukcji określony element docelowy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-419">The effect is identical to performing a `cgt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="68c9f-420">Instrukcji docelowej jest reprezentowany jako 4-bajtowych oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-420">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-421">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-421">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="68c9f-422">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-422">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-423">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `bgt.un` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-423">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.un` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-424">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-424">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-425">Transfery kontrolę instrukcję target (krótka), jeśli pierwsza wartość jest większa niż wartość drugiego podczas porównywania wartości liczb całkowitych bez znaku lub wartości zmiennoprzecinkowych nieuporządkowane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-425">Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-426">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-426">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-427">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-427">Format</span></span>|<span data-ttu-id="68c9f-428">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-428">Assembly Format</span></span>|<span data-ttu-id="68c9f-429">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-429">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-430">35 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-430">35 < `int8` ></span></span>|<span data-ttu-id="68c9f-431">bgt.un.s</span><span class="sxs-lookup"><span data-stu-id="68c9f-431">bgt.un.s</span></span> `target`|<span data-ttu-id="68c9f-432">Gałąź do instrukcji docelowej od określonego przesunięcia, jeśli pierwsza wartość jest większa od drugiej wartości (wartości bez znaku), krótka.</span><span class="sxs-lookup"><span data-stu-id="68c9f-432">Branch to the target instruction at the specified offset if the first value is greater than the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="68c9f-433">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-433">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-434">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-434">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-435">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-435">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-436">i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest większa niż `value2`, gałąź jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-436">and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="68c9f-437">`bgt.un.s` Instrukcji przekazuje sterowanie do instrukcji określonego obiektu docelowego, jeśli `value1` jest większa niż `value2`, w porównaniu z przy użyciu liczb całkowitych bez znaku lub wartości zmiennoprzecinkowych nieuporządkowane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-437">The `bgt.un.s` instruction transfers control to the specified target instruction if `value1` is greater than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="68c9f-438">Efekt jest taka sama jak wykonywanie `cgt.un` instrukcji, następuje `brtrue` gałąź do instrukcji określony element docelowy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-438">The effect is identical to performing a `cgt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="68c9f-439">Instrukcji docelowej jest reprezentowany jako 1-bajtowe oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-439">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-440">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-440">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="68c9f-441">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-441">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-442">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `bgt.un.s` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-442">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-443">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-443">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-444">Transfery kontrolki do instrukcji docelowej Jeżeli pierwsza wartość jest mniejsza lub równa wartości drugiego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-444">Transfers control to a target instruction if the first value is less than or equal to the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-445">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-445">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-446">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-446">Format</span></span>|<span data-ttu-id="68c9f-447">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-447">Assembly Format</span></span>|<span data-ttu-id="68c9f-448">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-448">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-449">3E</span><span class="sxs-lookup"><span data-stu-id="68c9f-449">3E</span></span> `<int32>`|<span data-ttu-id="68c9f-450">Włącz</span><span class="sxs-lookup"><span data-stu-id="68c9f-450">ble</span></span> `target`|<span data-ttu-id="68c9f-451">Gałąź do instrukcji docelowej od określonego przesunięcia, jeśli pierwsza wartość jest mniejsza lub równa wartości drugiego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-451">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value.</span></span>|  
  
 <span data-ttu-id="68c9f-452">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-452">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-453">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-453">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-454">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-454">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-455">i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest mniejsza niż lub równa `value2`, gałąź jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-455">and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="68c9f-456">`ble` Instrukcji przekazuje sterowanie do instrukcji określonego obiektu docelowego, jeśli `value1` jest mniejsza niż lub równa `value2`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-456">The `ble` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="68c9f-457">Efekt jest taka sama jak wykonywanie `cgt` instrukcji (`cgt.un` dla wartości zmiennoprzecinkowe) następuje `brfalse` gałąź do instrukcji określony element docelowy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-457">The effect is identical to performing a `cgt` instruction (`cgt.un` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="68c9f-458">Instrukcji docelowej jest reprezentowany jako 4-bajtowych oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-458">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-459">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-459">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="68c9f-460">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-460">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-461">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ble` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-461">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-462">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-462">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-463">Transfery kontrolę instrukcję target (krótka), jeśli pierwsza wartość jest mniejsza niż wartość drugiego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-463">Transfers control to a target instruction (short form) if the first value is less than or equal to the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-464">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-464">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-465">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-465">Format</span></span>|<span data-ttu-id="68c9f-466">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-466">Assembly Format</span></span>|<span data-ttu-id="68c9f-467">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-467">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-468">31</span><span class="sxs-lookup"><span data-stu-id="68c9f-468">31</span></span> `<int8>`|<span data-ttu-id="68c9f-469">BLE.s</span><span class="sxs-lookup"><span data-stu-id="68c9f-469">ble.s</span></span> `target`|<span data-ttu-id="68c9f-470">Gałąź do instrukcji docelowej od określonego przesunięcia, jeśli pierwsza wartość jest mniejsza lub równa wartości drugiego, krótka.</span><span class="sxs-lookup"><span data-stu-id="68c9f-470">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value, short form.</span></span>|  
  
 <span data-ttu-id="68c9f-471">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-471">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-472">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-472">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-473">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-473">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-474">i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest mniejsza niż lub równa `value2`, gałąź jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-474">and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="68c9f-475">`ble.s` Instrukcji przekazuje sterowanie do instrukcji określonego obiektu docelowego, jeśli `value1` jest mniejsza niż lub równa `value2`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-475">The `ble.s` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="68c9f-476">Efekt jest taka sama jak wykonywanie `cgt` instrukcji (`cgt.un` dla wartości zmiennoprzecinkowe) instrukcji, następuje`brfalse` gałąź do instrukcji określony element docelowy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-476">The effect is identical to performing a `cgt` instruction (`cgt.un` for floats) instruction followed by a`brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="68c9f-477">Instrukcji docelowej jest reprezentowany jako 1-bajtowe oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-477">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-478">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-478">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="68c9f-479">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-479">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-480">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ble.s` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-480">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.s` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-481">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-481">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-482">Transfer kontroli do instrukcji docelowej, jeśli pierwsza wartość jest mniejsza lub równa wartości drugiego podczas porównywania niepodpisanych liczb całkowitych lub wartości zmiennoprzecinkowych nieuporządkowane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-482">Transfers control to a target instruction if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-483">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-483">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-484">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-484">Format</span></span>|<span data-ttu-id="68c9f-485">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-485">Assembly Format</span></span>|<span data-ttu-id="68c9f-486">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-486">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-487">43</span><span class="sxs-lookup"><span data-stu-id="68c9f-487">43</span></span> `<int32>`|<span data-ttu-id="68c9f-488">BLE.UN</span><span class="sxs-lookup"><span data-stu-id="68c9f-488">ble.un</span></span> `target`|<span data-ttu-id="68c9f-489">Gałąź do instrukcji docelowej od określonego przesunięcia, jeśli pierwsza wartość jest mniejsza niż lub równa wartości drugiego (wartości bez znaku).</span><span class="sxs-lookup"><span data-stu-id="68c9f-489">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="68c9f-490">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-490">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-491">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-491">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-492">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-492">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-493">i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest mniejsza niż lub równa `value2`, gałąź jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-493">and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="68c9f-494">`ble.un` Instrukcji przekazuje sterowanie do instrukcji określonego obiektu docelowego, jeśli `value1` jest mniejsza niż lub równa `value2`, w porównaniu z przy użyciu liczb całkowitych bez znaku lub wartości zmiennoprzecinkowych nieuporządkowane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-494">The `ble.un` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="68c9f-495">Efekt jest taka sama jak wykonywanie `cgt.un` instrukcji (`cgt` dla wartości zmiennoprzecinkowe) następuje `brfalse` gałąź do instrukcji określony element docelowy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-495">The effect is identical to performing a `cgt.un` instruction (`cgt` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="68c9f-496">Instrukcji docelowej jest reprezentowany jako 4-bajtowych oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-496">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-497">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-497">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="68c9f-498">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-498">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-499">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ble.un` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-499">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.un` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-500">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-500">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-501">Transfery kontrolę instrukcję target (krótka), jeśli pierwsza wartość jest mniejsza lub równa wartości drugiego podczas porównywania niepodpisanych liczb całkowitych lub wartości zmiennoprzecinkowych nieuporządkowane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-501">Transfers control to a target instruction (short form) if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-502">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-502">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-503">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-503">Format</span></span>|<span data-ttu-id="68c9f-504">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-504">Assembly Format</span></span>|<span data-ttu-id="68c9f-505">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-505">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-506">36</span><span class="sxs-lookup"><span data-stu-id="68c9f-506">36</span></span> `<int8>`|<span data-ttu-id="68c9f-507">ble.un.s</span><span class="sxs-lookup"><span data-stu-id="68c9f-507">ble.un.s</span></span> `target`|<span data-ttu-id="68c9f-508">Gałąź do instrukcji docelowej od określonego przesunięcia, jeśli pierwsza wartość jest mniejsza lub równa wartości (wartości bez znaku), drugi krótka.</span><span class="sxs-lookup"><span data-stu-id="68c9f-508">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="68c9f-509">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-509">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-510">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-510">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-511">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-511">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-512">i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest mniejsza niż lub równa `value2`, gałąź jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-512">and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="68c9f-513">`ble.un.s` Instrukcji przekazuje sterowanie do instrukcji określonego obiektu docelowego, jeśli `value1` jest mniejsza niż lub równa `value2`, w porównaniu z przy użyciu liczb całkowitych bez znaku lub wartości zmiennoprzecinkowych nieuporządkowane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-513">The `ble.un.s` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="68c9f-514">Efekt jest taka sama jak wykonywanie `cgt.un` instrukcji (`cgt` dla wartości zmiennoprzecinkowe) następuje `brfalse` gałąź do instrukcji określony element docelowy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-514">The effect is identical to performing a `cgt.un` instruction (`cgt` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="68c9f-515">Instrukcji docelowej jest reprezentowany jako 1-bajtowe oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-515">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-516">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-516">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="68c9f-517">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-517">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-518">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ble.un.s` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-518">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-519">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-519">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-520">Kontrolka transferu do instrukcji docelowej, jeśli pierwsza wartość jest mniejsza od drugiej wartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-520">Transfers control to a target instruction if the first value is less than the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-521">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-521">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-522">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-522">Format</span></span>|<span data-ttu-id="68c9f-523">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-523">Assembly Format</span></span>|<span data-ttu-id="68c9f-524">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-524">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-525">3F < `int32` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-525">3F < `int32` ></span></span>|<span data-ttu-id="68c9f-526">Blt</span><span class="sxs-lookup"><span data-stu-id="68c9f-526">blt</span></span> `target`|<span data-ttu-id="68c9f-527">Gałąź do instrukcji docelowej w określone przesunięcie, jeśli pierwsza wartość jest mniejsza od drugiej wartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-527">Branch to the target instruction at the specified offset if the first value is less than the second value.</span></span>|  
  
 <span data-ttu-id="68c9f-528">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-528">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-529">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-529">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-530">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-530">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-531">i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest mniejsza niż `value2`, gałąź jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-531">and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="68c9f-532">`blt` Instrukcji przekazuje sterowanie do instrukcji określonego obiektu docelowego, jeśli `value1` jest mniejsza niż lub równa `value2`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-532">The `blt` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="68c9f-533">Efekt jest taka sama jak wykonywanie `clt` instrukcji, następuje `brtrue` gałąź do instrukcji określony element docelowy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-533">The effect is identical to performing a `clt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="68c9f-534">Instrukcji docelowej jest reprezentowany jako 4-bajtowych oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-534">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-535">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-535">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="68c9f-536">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-536">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-537">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `blt` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-537">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-538">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-538">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-539">Przekazuje sterowanie do instrukcji docelowej (krótka), jeśli pierwsza wartość jest mniejsza niż wartość drugiego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-539">Transfers control to a target instruction (short form) if the first value is less than the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-540">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-540">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-541">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-541">Format</span></span>|<span data-ttu-id="68c9f-542">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-542">Assembly Format</span></span>|<span data-ttu-id="68c9f-543">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-543">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-544">32 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-544">32 < `int8` ></span></span>|<span data-ttu-id="68c9f-545">Blt.s</span><span class="sxs-lookup"><span data-stu-id="68c9f-545">blt.s</span></span> `target`|<span data-ttu-id="68c9f-546">Gałąź do instrukcji docelowej w określone przesunięcie, jeśli pierwsza wartość jest mniejsza niż wartość drugiego krótka.</span><span class="sxs-lookup"><span data-stu-id="68c9f-546">Branch to the target instruction at the specified offset if the first value is less than the second value, short form.</span></span>|  
  
 <span data-ttu-id="68c9f-547">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-547">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-548">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-548">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-549">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-549">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-550">i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest mniejsza niż `value2`, gałąź jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-550">and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="68c9f-551">`blt.s` Instrukcji przekazuje sterowanie do instrukcji określonego obiektu docelowego, jeśli `value1` jest mniejsza niż `value2`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-551">The `blt.s` instruction transfers control to the specified target instruction if `value1` is less than `value2`.</span></span> <span data-ttu-id="68c9f-552">Efekt jest taka sama jak wykonywanie `clt` instrukcji, następuje `brtrue` gałąź do instrukcji określony element docelowy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-552">The effect is identical to performing a `clt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="68c9f-553">Instrukcji docelowej jest reprezentowany jako 1-bajtowe oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-553">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-554">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-554">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="68c9f-555">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-555">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-556">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `blt.s` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-556">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.s` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-557">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-557">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-558">Kontrolka transferu do instrukcji docelowej, jeśli pierwsza wartość jest mniejsza od drugiej wartości podczas porównywania wartości liczb całkowitych bez znaku lub wartości zmiennoprzecinkowych nieuporządkowane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-558">Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-559">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-559">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-560">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-560">Format</span></span>|<span data-ttu-id="68c9f-561">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-561">Assembly Format</span></span>|<span data-ttu-id="68c9f-562">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-562">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-563">44 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-563">44 < `int32` ></span></span>|<span data-ttu-id="68c9f-564">Blt.UN</span><span class="sxs-lookup"><span data-stu-id="68c9f-564">blt.un</span></span> `target`|<span data-ttu-id="68c9f-565">Gałąź do instrukcji docelowej w określone przesunięcie, jeśli pierwsza wartość jest mniejsza od drugiej wartości (wartości bez znaku).</span><span class="sxs-lookup"><span data-stu-id="68c9f-565">Branch to the target instruction at the specified offset if the first value is less than the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="68c9f-566">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-566">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-567">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-567">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-568">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-568">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-569">i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest mniejsza niż `value2`, gałąź jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-569">and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="68c9f-570">`blt.un` Instrukcji przekazuje sterowanie do instrukcji określonego obiektu docelowego, jeśli `value1` jest mniejsza niż `value2`, w porównaniu z przy użyciu liczb całkowitych bez znaku lub wartości zmiennoprzecinkowych nieuporządkowane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-570">The `blt.un` instruction transfers control to the specified target instruction if `value1` is less than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="68c9f-571">Efekt jest taka sama jak wykonywanie `clt.un` instrukcji, następuje `brtrue` gałąź do instrukcji określony element docelowy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-571">The effect is identical to performing a `clt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="68c9f-572">Instrukcji docelowej jest reprezentowany jako 4-bajtowych oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-572">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-573">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-573">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="68c9f-574">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-574">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-575">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `blt.un` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-575">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.un` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-576">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-576">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-577">Transfer kontroli instrukcję target (krótka), jeśli pierwsza wartość jest mniejszy od drugiego wartości podczas porównywania niepodpisanych liczb całkowitych lub wartości zmiennoprzecinkowych nieuporządkowaną.</span><span class="sxs-lookup"><span data-stu-id="68c9f-577">Transfers control to a target instruction (short form) if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-578">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-578">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-579">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-579">Format</span></span>|<span data-ttu-id="68c9f-580">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-580">Assembly Format</span></span>|<span data-ttu-id="68c9f-581">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-581">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-582">37 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-582">37 < `int8` ></span></span>|<span data-ttu-id="68c9f-583">blt.un.s</span><span class="sxs-lookup"><span data-stu-id="68c9f-583">blt.un.s</span></span> `target`|<span data-ttu-id="68c9f-584">Gałąź do instrukcji docelowej w określone przesunięcie, jeśli pierwsza wartość jest mniejsza od drugiej wartości (wartości bez znaku), krótka.</span><span class="sxs-lookup"><span data-stu-id="68c9f-584">Branch to the target instruction at the specified offset if the first value is less than the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="68c9f-585">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-585">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-586">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-586">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-587">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-587">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-588">i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest mniejsza niż `value2`, gałąź jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-588">and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="68c9f-589">`blt.un` Instrukcji przekazuje sterowanie do instrukcji określonego obiektu docelowego, jeśli `value1` jest mniejsza niż `value2`, w porównaniu z przy użyciu liczb całkowitych bez znaku lub wartości zmiennoprzecinkowych nieuporządkowane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-589">The `blt.un` instruction transfers control to the specified target instruction if `value1` is less than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="68c9f-590">Efekt jest taka sama jak wykonywanie `clt.un` instrukcji, następuje `brtrue` gałąź do instrukcji określony element docelowy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-590">The effect is identical to performing a `clt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="68c9f-591">Instrukcji docelowej jest reprezentowany jako 4-bajtowych oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-591">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-592">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-592">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="68c9f-593">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-593">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-594">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `blt.un.s` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-594">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-595">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-595">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bne_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bne_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bne_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bne_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bne_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bne_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bne_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bne_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-596">Transfery sterowania instrukcji docelowej w przypadku dwóch wartości całkowitych bez znaku lub wartości zmiennoprzecinkowych nieuporządkowaną nie są takie same.</span><span class="sxs-lookup"><span data-stu-id="68c9f-596">Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-597">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-597">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-598">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-598">Format</span></span>|<span data-ttu-id="68c9f-599">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-599">Assembly Format</span></span>|<span data-ttu-id="68c9f-600">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-600">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-601">40 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-601">40 < `int32` ></span></span>|<span data-ttu-id="68c9f-602">BNE.UN</span><span class="sxs-lookup"><span data-stu-id="68c9f-602">bne.un</span></span> `target`|<span data-ttu-id="68c9f-603">Gałąź z obiektem docelowym instrukcji od określonego przesunięcia, jeśli dwa niepodpisanych liczb całkowitych są nierówne (wartości bez znaku).</span><span class="sxs-lookup"><span data-stu-id="68c9f-603">Branch to the target instruction at the specified offset if two unsigned integer values are not equal (unsigned values).</span></span>|  
  
 <span data-ttu-id="68c9f-604">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-604">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-605">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-605">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-606">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-606">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-607">i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` nie jest równa `value2`, gałąź jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-607">and `value1` are popped from the stack; if `value1` is not equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="68c9f-608">`bne.un` Instrukcji przekazuje sterowanie do instrukcji określonego obiektu docelowego, jeśli `value1` nie jest równa `value2`, w porównaniu z przy użyciu liczb całkowitych bez znaku lub wartości zmiennoprzecinkowych nieuporządkowane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-608">The `bne.un` instruction transfers control to the specified target instruction if `value1` is not equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="68c9f-609">Efekt jest taka sama jak wykonywanie `ceq` instrukcji, następuje `brfalse` gałąź do instrukcji określony element docelowy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-609">The effect is identical to performing a `ceq` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="68c9f-610">Instrukcji docelowej jest reprezentowany jako 4-bajtowych oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-610">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-611">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-611">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="68c9f-612">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-612">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-613">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `bne.un` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-613">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bne.un` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-614">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-614">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bne_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bne_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bne_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bne_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bne_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bne_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bne_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bne_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-615">Przekazuje sterowanie do instrukcji docelowej (krótka) po dwóch niepodpisanych liczb całkowitych lub wartości zmiennoprzecinkowych nieuporządkowaną nie są takie same.</span><span class="sxs-lookup"><span data-stu-id="68c9f-615">Transfers control to a target instruction (short form) when two unsigned integer values or unordered float values are not equal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-616">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-616">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-617">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-617">Format</span></span>|<span data-ttu-id="68c9f-618">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-618">Assembly Format</span></span>|<span data-ttu-id="68c9f-619">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-619">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-620">33 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-620">33 < `int8` ></span></span>|<span data-ttu-id="68c9f-621">bne.un.s</span><span class="sxs-lookup"><span data-stu-id="68c9f-621">bne.un.s</span></span> `target`|<span data-ttu-id="68c9f-622">Gałąź z obiektem docelowym instrukcji od określonego przesunięcia, jeśli dwa niepodpisanych liczb całkowitych są nie równa się (wartości bez znaku), krótka.</span><span class="sxs-lookup"><span data-stu-id="68c9f-622">Branch to the target instruction at the specified offset if two unsigned integer values are not equal (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="68c9f-623">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-623">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-624">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-624">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-625">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-625">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-626">i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` nie jest równa `value2`, gałąź jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-626">and `value1` are popped from the stack; if `value1` is not equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="68c9f-627">`bne.un` Instrukcji przekazuje sterowanie do instrukcji określonego obiektu docelowego, jeśli `value1` nie jest równa `value2`, w porównaniu z przy użyciu liczb całkowitych bez znaku lub wartości zmiennoprzecinkowych nieuporządkowane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-627">The `bne.un` instruction transfers control to the specified target instruction if `value1` is not equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="68c9f-628">Efekt jest taka sama jak wykonywanie `ceq` instrukcji, następuje `brfalse` gałąź do instrukcji określony element docelowy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-628">The effect is identical to performing a `ceq` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="68c9f-629">Instrukcji docelowej jest reprezentowany jako 4-bajtowych oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-629">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-630">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-630">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="68c9f-631">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-631">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-632">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `bne.un.s` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-632">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bne.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-633">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-633">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Box">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Box;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Box" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Box" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Box As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Box;" />
      <MemberSignature Language="F#" Value=" staticval mutable Box : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Box" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-634">Konwertuje typ wartości na odwołanie do obiektu (typ <see langword="O" />).</span><span class="sxs-lookup"><span data-stu-id="68c9f-634">Converts a value type to an object reference (type <see langword="O" />).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-635">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-635">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-636">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-636">Format</span></span>|<span data-ttu-id="68c9f-637">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-637">Assembly Format</span></span>|<span data-ttu-id="68c9f-638">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-638">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-639">8C < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-639">8C < `T` ></span></span>|<span data-ttu-id="68c9f-640">box</span><span class="sxs-lookup"><span data-stu-id="68c9f-640">box</span></span> `valTypeToken`|<span data-ttu-id="68c9f-641">Konwertuj typ wartości (typu określonego w `valTypeToken`) na odwołanie do obiektu wartość true.</span><span class="sxs-lookup"><span data-stu-id="68c9f-641">Convert a value type (of the type specified in `valTypeToken`) to a true object reference.</span></span>|  
  
 <span data-ttu-id="68c9f-642">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-642">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-643">Typ wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-643">A value type is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-644">Typ wartości zostanie zdjęte ze stosu; `box` operacja została wykonana.</span><span class="sxs-lookup"><span data-stu-id="68c9f-644">The value type is popped from the stack; the `box` operation is performed.</span></span>  
  
3.  <span data-ttu-id="68c9f-645">Odwołanie do obiektu na wynikowy typ wartości "spakowane" są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-645">An object reference to the resulting "boxed" value type is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-646">Typ wartości ma dwa oddzielne reprezentacje w ramach Common Language Infrastructure (CLI):</span><span class="sxs-lookup"><span data-stu-id="68c9f-646">A value type has two separate representations within the Common Language Infrastructure (CLI):</span></span>  
  
-   <span data-ttu-id="68c9f-647">Formularz "raw" używany, gdy typ wartości jest osadzony w innym obiekcie lub na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-647">A 'raw' form used when a value type is embedded within another object or on the stack.</span></span>  
  
-   <span data-ttu-id="68c9f-648">Formularz "spakowane", gdzie dane w typ wartości opakowany jest (opakowany) obiektu, dzięki czemu może istnieć jako niezależne jednostki.</span><span class="sxs-lookup"><span data-stu-id="68c9f-648">A 'boxed' form, where the data in the value type is wrapped (boxed) into an object so it can exist as an independent entity.</span></span>  
  
 <span data-ttu-id="68c9f-649">`box` Instrukcji konwertuje typ wartości (rozpakowany) "raw" na odwołanie do obiektu (typ `O`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-649">The `box` instruction converts the 'raw' (unboxed) value type into an object reference (type `O`).</span></span> <span data-ttu-id="68c9f-650">Jest to realizowane przez utworzenie nowego obiektu i kopiowanie danych z typu wartości do nowo przydzielonego obiektu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-650">This is accomplished by creating a new object and copying the data from the value type into the newly allocated object.</span></span> `valTypeToken` <span data-ttu-id="68c9f-651">jest token metadanych wskazującą rodzaj typu wartości na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-651">is a metadata token indicating the type of the value type on the stack.</span></span>  
  
 <xref:System.OutOfMemoryException> <span data-ttu-id="68c9f-652">jest generowany, jeśli pamięć jest niewystarczająca do spełnienia żądania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-652">is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <xref:System.TypeLoadException> <span data-ttu-id="68c9f-653">jest generowany, jeśli nie można odnaleźć klasy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-653">is thrown if the class cannot be found.</span></span> <span data-ttu-id="68c9f-654">To jest zwykle wykrycie Microsoft Intermediate Language (MSIL) jest konwertowana do kodu natywnego, a nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-654">This is typically detected when Microsoft Intermediate Language (MSIL) is converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="68c9f-655">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `box` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-655">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `box` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-656">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="68c9f-656">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Br">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Br;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Br" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Br" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Br As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Br;" />
      <MemberSignature Language="F#" Value=" staticval mutable Br : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Br" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-657">Bezwarunkowo przekazuje sterowanie do instrukcji docelowej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-657">Unconditionally transfers control to a target instruction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-658">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-658">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-659">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-659">Format</span></span>|<span data-ttu-id="68c9f-660">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-660">Assembly Format</span></span>|<span data-ttu-id="68c9f-661">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-661">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-662">38 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-662">38 < `int32` ></span></span>|<span data-ttu-id="68c9f-663">Brazylia</span><span class="sxs-lookup"><span data-stu-id="68c9f-663">br</span></span> `target`|<span data-ttu-id="68c9f-664">Gałęzie, które mają instrukcję docelowy od określonego przesunięcia.</span><span class="sxs-lookup"><span data-stu-id="68c9f-664">Branches to a target instruction at the specified offset.</span></span>|  
  
 <span data-ttu-id="68c9f-665">Nie zachowania stosu oceny są wykonywane przez tę operację.</span><span class="sxs-lookup"><span data-stu-id="68c9f-665">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="68c9f-666">`br` Instrukcji bezwarunkowo przekazuje sterowanie do instrukcji docelowej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-666">The `br` instruction unconditionally transfers control to a target instruction.</span></span> <span data-ttu-id="68c9f-667">Instrukcji docelowej jest reprezentowany jako 4-bajtowych oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-667">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-668">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-668">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="68c9f-669">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-669">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-670">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `br` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-670">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `br` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-671">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-671">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Br_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Br_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Br_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Br_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Br_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Br_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Br_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Br_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-672">Bezwarunkowo przekazuje sterowanie do instrukcji docelowej (krótka).</span><span class="sxs-lookup"><span data-stu-id="68c9f-672">Unconditionally transfers control to a target instruction (short form).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-673">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-673">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-674">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-674">Format</span></span>|<span data-ttu-id="68c9f-675">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-675">Assembly Format</span></span>|<span data-ttu-id="68c9f-676">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-676">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-677">2B < `int8` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-677">2B < `int8` ></span></span>|<span data-ttu-id="68c9f-678">br.s</span><span class="sxs-lookup"><span data-stu-id="68c9f-678">br.s</span></span> `target`|<span data-ttu-id="68c9f-679">Gałęzie, które mają instrukcję docelowy od określonego przesunięcia krótka.</span><span class="sxs-lookup"><span data-stu-id="68c9f-679">Branches to a target instruction at the specified offset, short form.</span></span>|  
  
 <span data-ttu-id="68c9f-680">Nie zachowania stosu oceny są wykonywane przez tę operację.</span><span class="sxs-lookup"><span data-stu-id="68c9f-680">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="68c9f-681">`br.s` Instrukcji bezwarunkowo przekazuje sterowanie do instrukcji docelowej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-681">The `br.s` instruction unconditionally transfers control to a target instruction.</span></span> <span data-ttu-id="68c9f-682">Instrukcji docelowej jest reprezentowany jako 1-bajtowe oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-682">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-683">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-683">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="68c9f-684">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-684">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-685">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `br.s` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-685">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `br.s` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-686">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-686">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Break;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Break" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Break" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Break As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Break;" />
      <MemberSignature Language="F#" Value=" staticval mutable Break : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Break" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-687">Sygnały Common Language Infrastructure (CLI) informuje debuger, że punkt przerwania został uruchomiony.</span><span class="sxs-lookup"><span data-stu-id="68c9f-687">Signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-688">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-688">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-689">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-689">Format</span></span>|<span data-ttu-id="68c9f-690">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-690">Assembly Format</span></span>|<span data-ttu-id="68c9f-691">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-691">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-692">01</span><span class="sxs-lookup"><span data-stu-id="68c9f-692">01</span></span>|<span data-ttu-id="68c9f-693">break</span><span class="sxs-lookup"><span data-stu-id="68c9f-693">break</span></span>|<span data-ttu-id="68c9f-694">informuje debuger został osiągnięty punkt przerwania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-694">inform a debugger that a breakpoint has been reached.</span></span>|  
  
 <span data-ttu-id="68c9f-695">Nie zachowania stosu oceny są wykonywane przez tę operację.</span><span class="sxs-lookup"><span data-stu-id="68c9f-695">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="68c9f-696">`break` Instrukcja to do obsługi debugowania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-696">The `break` instruction is for debugging support.</span></span> <span data-ttu-id="68c9f-697">Sygnały go interfejs wiersza polecenia i informuje debuger, że punkt przerwania został uruchomiony.</span><span class="sxs-lookup"><span data-stu-id="68c9f-697">It signals the CLI to inform the debugger that a break point has been tripped.</span></span> <span data-ttu-id="68c9f-698">Go nie ma innych wpływu na stan interpretera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-698">It has no other effect on the interpreter state.</span></span>  
  
 <span data-ttu-id="68c9f-699">`break` Instrukcji ma taki najmniejsza możliwa instrukcji rozmiar Włączanie kod stosowanie poprawek do punktu przerwania i generuje minimalne zakłóceń w otaczającym kodem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-699">The `break` instruction has the smallest possible instruction size enabling code patching with a break point and generating minimal disturbance to the surrounding code.</span></span>  
  
 <span data-ttu-id="68c9f-700">`break` Instrukcji może pułapek do debugera, nic nie rób lub zgłosić wyjątek zabezpieczeń.</span><span class="sxs-lookup"><span data-stu-id="68c9f-700">The `break` instruction can trap to a debugger, do nothing, or raise a security exception.</span></span> <span data-ttu-id="68c9f-701">Dokładne zachowanie zależy od implementacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-701">The exact behavior is implementation-defined.</span></span>  
  
 <span data-ttu-id="68c9f-702">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `break` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-702">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `break` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-703">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-703">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brfalse">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brfalse;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brfalse" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brfalse" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brfalse As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brfalse;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brfalse : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brfalse" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-704">Przekazuje sterowanie do instrukcji docelowej, jeśli <paramref name="value" /> jest <see langword="false" />, odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic), lub wartość zero.</span><span class="sxs-lookup"><span data-stu-id="68c9f-704">Transfers control to a target instruction if <paramref name="value" /> is <see langword="false" />, a null reference (<see langword="Nothing" /> in Visual Basic), or zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-705">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-705">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-706">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-706">Format</span></span>|<span data-ttu-id="68c9f-707">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-707">Assembly Format</span></span>|<span data-ttu-id="68c9f-708">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-708">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-709">39 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-709">39 < `int32` ></span></span>|<span data-ttu-id="68c9f-710">brfalse</span><span class="sxs-lookup"><span data-stu-id="68c9f-710">brfalse</span></span> `target`<br /><br /> <span data-ttu-id="68c9f-711">brnull</span><span class="sxs-lookup"><span data-stu-id="68c9f-711">brnull</span></span> `target`<br /><br /> <span data-ttu-id="68c9f-712">brzero</span><span class="sxs-lookup"><span data-stu-id="68c9f-712">brzero</span></span> `target`|<span data-ttu-id="68c9f-713">Gałęzie, które mają instrukcji docelowej, w określonym przesunięciu if `false`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-713">Branches to a target instruction at the specified offset if `false`.</span></span>|  
  
 <span data-ttu-id="68c9f-714">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-714">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-715">są wypychane na stosie przez poprzednią operację.</span><span class="sxs-lookup"><span data-stu-id="68c9f-715">is pushed onto the stack by a previous operation.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-716">zostanie zdjęte ze stosu; Jeśli `value` jest `false`, rozgałęzić `target`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-716">is popped from the stack; if `value` is `false`, branch to `target`.</span></span>  
  
 <span data-ttu-id="68c9f-717">`brfalse` Instrukcji (i jego aliasy `brnull` i `brzero`) przekazuje sterowanie do instrukcji określonego obiektu docelowego, jeśli `value` (typu `int32`, `int64`, odwołanie do obiektu `O`, zarządzana wskaźnika `&`, przejściowe wskaźnika `*`, `native int`) ma wartość zero (`false`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-717">The `brfalse` instruction (and its aliases `brnull` and `brzero`) transfers control to the specified target instruction if `value` (of type `int32`, `int64`, object reference `O`, managed pointer `&`, transient pointer `*`, `native int`) is zero (`false`).</span></span> <span data-ttu-id="68c9f-718">Jeśli `value` jest różna od zera (`true`) program kontynuuje wykonywanie następnej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-718">If `value` is non-zero (`true`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="68c9f-719">Instrukcji docelowej jest reprezentowany jako 4-bajtowych oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-719">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-720">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-720">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="68c9f-721">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-721">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-722">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `brfalse` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-722">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brfalse` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-723">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-723">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brfalse_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brfalse_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brfalse_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brfalse_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brfalse_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brfalse_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brfalse_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brfalse_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-724">Przekazuje sterowanie do instrukcji docelowej, jeśli <paramref name="value" /> jest <see langword="false" />, odwołanie o wartości null lub wartość zero.</span><span class="sxs-lookup"><span data-stu-id="68c9f-724">Transfers control to a target instruction if <paramref name="value" /> is <see langword="false" />, a null reference, or zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-725">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-725">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-726">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-726">Format</span></span>|<span data-ttu-id="68c9f-727">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-727">Assembly Format</span></span>|<span data-ttu-id="68c9f-728">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-728">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-729">2C <`int8` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-729">2C <`int8` ></span></span>|<span data-ttu-id="68c9f-730">brfalse.s</span><span class="sxs-lookup"><span data-stu-id="68c9f-730">brfalse.s</span></span> `target`<br /><br /> <span data-ttu-id="68c9f-731">brnull.s</span><span class="sxs-lookup"><span data-stu-id="68c9f-731">brnull.s</span></span> `target`<br /><br /> <span data-ttu-id="68c9f-732">brzero.s</span><span class="sxs-lookup"><span data-stu-id="68c9f-732">brzero.s</span></span> `target`|<span data-ttu-id="68c9f-733">Gałęzie, które mają instrukcji docelowej, w określonym przesunięciu if `false`, krótka.</span><span class="sxs-lookup"><span data-stu-id="68c9f-733">Branches to a target instruction at the specified offset if `false`, short form.</span></span>|  
  
 <span data-ttu-id="68c9f-734">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-734">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-735">są wypychane na stosie przez poprzednią operację.</span><span class="sxs-lookup"><span data-stu-id="68c9f-735">is pushed onto the stack by a previous operation.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-736">zostanie zdjęte ze stosu; Jeśli `value` jest `false`, rozgałęzić `target`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-736">is popped from the stack; if `value` is `false`, branch to `target`.</span></span>  
  
 <span data-ttu-id="68c9f-737">`brfalse.s` Instrukcji (i jego aliasy `brnull` i `brzero`) przekazuje sterowanie do instrukcji określonego obiektu docelowego, jeśli `value` (typu `int32`, `int64`, odwołanie do obiektu `O`, zarządzana wskaźnika `&`, przejściowe wskaźnika `*`, `native int`) ma wartość zero (`false`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-737">The `brfalse.s` instruction (and its aliases `brnull` and `brzero`) transfers control to the specified target instruction if `value` (of type `int32`, `int64`, object reference `O`, managed pointer `&`, transient pointer `*`, `native int`) is zero (`false`).</span></span> <span data-ttu-id="68c9f-738">Jeśli `value` jest różna od zera (`true`) program kontynuuje wykonywanie następnej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-738">If `value` is non-zero (`true`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="68c9f-739">Instrukcji docelowej jest reprezentowany jako 1-bajtowe oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-739">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-740">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-740">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="68c9f-741">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-741">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-742">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `brfalse.s` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-742">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brfalse.s` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-743">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-743">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brtrue">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brtrue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brtrue" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brtrue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brtrue As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brtrue;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brtrue : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brtrue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-744">Przekazuje sterowanie do instrukcji docelowej, jeśli <paramref name="value" /> jest <see langword="true" />, nie ma wartości null lub różna od zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-744">Transfers control to a target instruction if <paramref name="value" /> is <see langword="true" />, not null, or non-zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-745">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-745">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-746">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-746">Format</span></span>|<span data-ttu-id="68c9f-747">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-747">Assembly Format</span></span>|<span data-ttu-id="68c9f-748">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-748">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-749">3A < `int32` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-749">3A < `int32` ></span></span>|<span data-ttu-id="68c9f-750">brtrue</span><span class="sxs-lookup"><span data-stu-id="68c9f-750">brtrue</span></span> `target`<br /><br /> <span data-ttu-id="68c9f-751">brinst</span><span class="sxs-lookup"><span data-stu-id="68c9f-751">brinst</span></span> `target`|<span data-ttu-id="68c9f-752">Rozgałęzić do instrukcji docelowej, od określonego przesunięcia, jeśli różna od zera (`true`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-752">Branch to a target instruction at the specified offset if non-zero (`true`).</span></span>|  
  
 <span data-ttu-id="68c9f-753">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-753">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-754">są wypychane na stosie przez poprzednią operację.</span><span class="sxs-lookup"><span data-stu-id="68c9f-754">is pushed onto the stack by a previous operation.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-755">zostanie zdjęte ze stosu; Jeśli `value` jest `true`, rozgałęzić `target`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-755">is popped from the stack; if `value` is `true`, branch to `target`.</span></span>  
  
 <span data-ttu-id="68c9f-756">`brtrue` Instrukcji przekazuje sterowanie do instrukcji określonego obiektu docelowego, jeśli `value` (typ `native int`) jest różna od zera (`true`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-756">The `brtrue` instruction transfers control to the specified target instruction if `value` (type `native int`) is nonzero (`true`).</span></span> <span data-ttu-id="68c9f-757">Jeśli `value` wynosi zero (`false`) program kontynuuje wykonywanie następnej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-757">If `value` is zero (`false`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="68c9f-758">Jeśli `value` jest odwołanie do obiektu (typ `O`) następnie `brinst` (alias `brtrue`) przekazuje sterowanie, jeśli termin reprezentuje wystąpienie obiektu (na przykład, jeśli nie jest odwołanie do obiektu o wartości null; zobacz <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span><span class="sxs-lookup"><span data-stu-id="68c9f-758">If `value` is an object reference (type `O`) then `brinst` (an alias for `brtrue`) transfers control if it represents an instance of an object (for example, if it is not the null object reference; see <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span></span>  
  
 <span data-ttu-id="68c9f-759">Instrukcji docelowej jest reprezentowany jako 4-bajtowych oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-759">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-760">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-760">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="68c9f-761">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-761">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-762">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `brtrue` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-762">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brtrue` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-763">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-763">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brtrue_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brtrue_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brtrue_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brtrue_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brtrue_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brtrue_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brtrue_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brtrue_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-764">Przekazuje sterowanie do instrukcji docelowej (krótka), jeśli <paramref name="value" /> jest <see langword="true" />, nie ma wartości null lub różna od zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-764">Transfers control to a target instruction (short form) if <paramref name="value" /> is <see langword="true" />, not null, or non-zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-765">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-765">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-766">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-766">Format</span></span>|<span data-ttu-id="68c9f-767">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-767">Assembly Format</span></span>|<span data-ttu-id="68c9f-768">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-768">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-769">2D < `int8` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-769">2D < `int8` ></span></span>|<span data-ttu-id="68c9f-770">brtrue.s</span><span class="sxs-lookup"><span data-stu-id="68c9f-770">brtrue.s</span></span> `target`<br /><br /> <span data-ttu-id="68c9f-771">brinst.s</span><span class="sxs-lookup"><span data-stu-id="68c9f-771">brinst.s</span></span> `target`|<span data-ttu-id="68c9f-772">Rozgałęzić do instrukcji docelowej, od określonego przesunięcia, jeśli różna od zera (`true`), krótka.</span><span class="sxs-lookup"><span data-stu-id="68c9f-772">Branch to a target instruction at the specified offset if non-zero (`true`), short form.</span></span>|  
  
 <span data-ttu-id="68c9f-773">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-773">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-774">są wypychane na stosie przez poprzednią operację.</span><span class="sxs-lookup"><span data-stu-id="68c9f-774">is pushed onto the stack by a previous operation.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-775">zostanie zdjęte ze stosu; Jeśli `value` jest `true`, rozgałęzić `target`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-775">is popped from the stack; if `value` is `true`, branch to `target`.</span></span>  
  
 <span data-ttu-id="68c9f-776">`brtrue.s` Instrukcji przekazuje sterowanie do instrukcji określonego obiektu docelowego, jeśli `value` (typ `native int`) jest różna od zera (`true`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-776">The `brtrue.s` instruction transfers control to the specified target instruction if `value` (type `native int`) is nonzero (`true`).</span></span> <span data-ttu-id="68c9f-777">Jeśli `value` wynosi zero (`false`) program kontynuuje wykonywanie następnej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-777">If `value` is zero (`false`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="68c9f-778">Jeśli `value` jest odwołanie do obiektu (typ `O`) następnie `brinst` (alias `brtrue`) przekazuje sterowanie, jeśli termin reprezentuje wystąpienie obiektu (na przykład, jeśli nie jest odwołanie do obiektu o wartości null; zobacz <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span><span class="sxs-lookup"><span data-stu-id="68c9f-778">If `value` is an object reference (type `O`) then `brinst` (an alias for `brtrue`) transfers control if it represents an instance of an object (for example, if it is not the null object reference; see <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span></span>  
  
 <span data-ttu-id="68c9f-779">Instrukcji docelowej jest reprezentowany jako 1-bajtowe oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-779">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-780">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-780">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="68c9f-781">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-781">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-782">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `brtrue.s` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-782">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brtrue.s` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-783">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-783">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Call;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Call" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Call" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Call As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Call;" />
      <MemberSignature Language="F#" Value=" staticval mutable Call : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Call" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-784">Wywołuje metodę wskazywanym przez deskryptor metody sukces.</span><span class="sxs-lookup"><span data-stu-id="68c9f-784">Calls the method indicated by the passed method descriptor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-785">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-785">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-786">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-786">Format</span></span>|<span data-ttu-id="68c9f-787">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-787">Assembly Format</span></span>|<span data-ttu-id="68c9f-788">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-788">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-789">28 < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-789">28 < `T` ></span></span>|<span data-ttu-id="68c9f-790"> — wywołanie</span><span class="sxs-lookup"><span data-stu-id="68c9f-790">call</span></span> `methodDesc`|<span data-ttu-id="68c9f-791">Wywołaj metodę opisanego przez `methodDesc`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-791">Call the method described by `methodDesc`.</span></span>|  
  
 <span data-ttu-id="68c9f-792">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-792">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-793">Argumenty metody `arg1` za pośrednictwem `argN` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-793">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-794">Argumenty metody `arg1` za pośrednictwem `argN` są zdjęte ze stosu ze stosu; wywołania metody które odbywa się z tymi argumentami i kontrola jest przekazywana do metody odwołuje się deskryptor metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-794">Method arguments `arg1` through `argN` are popped from the stack; the method call is performed with these arguments and control is transferred to the method referred to by the method descriptor.</span></span> <span data-ttu-id="68c9f-795">Po zakończeniu wartość zwracana jest generowany przez metodę obiekt wywoływany i wysłane do obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-795">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
3.  <span data-ttu-id="68c9f-796">Wartość zwracana jest wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-796">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-797">`call` Instrukcja wywołuje metodę, wskazywanym przez deskryptor metody przekazaną za pomocą instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-797">The `call` instruction calls the method indicated by the method descriptor passed with the instruction.</span></span> <span data-ttu-id="68c9f-798">Deskryptor metody jest token metadanych, który wskazuje metodę do wywołania i liczbę, typ i kolejność argumentów, które zostały umieszczone w stosie, które mają być przekazane do tej metody, a także konwencja wywołania, które ma być używany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-798">The method descriptor is a metadata token that indicates the method to call and the number, type, and order of the arguments that have been placed on the stack to be passed to that method as well as the calling convention to be used.</span></span> <span data-ttu-id="68c9f-799">`call` Instrukcji może być od razu poprzedzona przez `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) prefiks instrukcji, aby określić, że bieżący stan metody powinny zostać opublikowane przed przeniesieniem kontroli.</span><span class="sxs-lookup"><span data-stu-id="68c9f-799">The `call` instruction can be immediately preceded by a `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) prefix instruction to specify that the current method state should be released before transferring control.</span></span> <span data-ttu-id="68c9f-800">Jeśli wywołanie przekazuje sterowanie do metody zaufania wyższe niż metoda pochodzenia, ramka stosu nie jest zwalniana.</span><span class="sxs-lookup"><span data-stu-id="68c9f-800">If the call transfers control to a method of higher trust than the origin method, the stack frame is not released.</span></span> <span data-ttu-id="68c9f-801">Zamiast tego kontynuuje wykonywanie dyskretnie tak, jakby `tail` nie został podany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-801">Instead, the execution continues silently as if the `tail` had not been supplied.</span></span> <span data-ttu-id="68c9f-802">Token metadanych niesie ze sobą wystarczających informacji do ustalenia, czy połączenie ma metodę statyczną, metoda wystąpienia, metody wirtualnej lub funkcją globalną.</span><span class="sxs-lookup"><span data-stu-id="68c9f-802">The metadata token carries sufficient information to determine whether the call is to a static method, an instance method, a virtual method, or a global function.</span></span> <span data-ttu-id="68c9f-803">We wszystkich tych przypadkach adres docelowy jest określana wyłącznie z deskryptor metody (natomiast to za pomocą <xref:System.Reflection.Emit.OpCodes.Callvirt> instrukcji wywoływania metod wirtualnych, gdzie adres docelowy również zależy od środowiska uruchomieniowego typu wystąpienia Odwołanie do wypychania przed <xref:System.Reflection.Emit.OpCodes.Callvirt>).</span><span class="sxs-lookup"><span data-stu-id="68c9f-803">In all of these cases the destination address is determined entirely from the method descriptor (contrast this with the <xref:System.Reflection.Emit.OpCodes.Callvirt> instruction for calling virtual methods, where the destination address also depends upon the runtime type of the instance reference pushed before the <xref:System.Reflection.Emit.OpCodes.Callvirt>).</span></span>  
  
 <span data-ttu-id="68c9f-804">Argumenty są umieszczane na stosie, w kolejności od lewej do prawej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-804">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="68c9f-805">Oznacza to, że pierwszy argument jest obliczane i umieszczone na stosie, drugi argument, a następnie trzeci, dopóki wszystkie wymagane argumenty nie zostaną na jego podstawie stosu w kolejności malejącej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-805">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="68c9f-806">Istnieją trzy ważne przypadki specjalne:</span><span class="sxs-lookup"><span data-stu-id="68c9f-806">There are three important special cases:</span></span>  
  
 1. <span data-ttu-id="68c9f-807">Wywołania na wystąpienie (lub wirtualny) — metoda wypchnąć tego odwołania do wystąpienia przed którykolwiek z argumentów widoczny dla użytkownika.</span><span class="sxs-lookup"><span data-stu-id="68c9f-807">Calls to an instance (or virtual) method must push that instance reference before any of the user-visible arguments.</span></span> <span data-ttu-id="68c9f-808">Odwołania do wystąpienia nie może być odwołaniem do wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-808">The instance reference must not be a null reference.</span></span> <span data-ttu-id="68c9f-809">Podpis w metadanych nie zawiera wpisu na liście parametrów dla `this` wskaźnika; zamiast tego używa bitu do wskazania, czy metoda, która wymaga przekazywanie `this` wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="68c9f-809">The signature carried in the metadata does not contain an entry in the parameter list for the `this` pointer; instead, it uses a bit to indicate whether the method requires passing the `this` pointer.</span></span>  
  
 2. <span data-ttu-id="68c9f-810">Jest on prawidłowy, aby wywołać metodę wirtualną za pomocą `call` (zamiast `callvirt`); oznacza to, że metoda jest rozwiązany, za pomocą klasy określonej przez metodę, a nie jako określony dynamicznie z wywoływanego obiektu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-810">It is valid to call a virtual method using `call` (rather than `callvirt`); this indicates that the method is to be resolved using the class specified by method rather than as specified dynamically from the object being invoked.</span></span>  
  
 3. <span data-ttu-id="68c9f-811">Należy pamiętać, że obiekt delegowany `Invoke` metoda może być wywoływana z oboma `call` lub `callvirt` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-811">Note that a delegate's `Invoke` method can be called with either the `call` or `callvirt` instruction.</span></span>  
  
 <xref:System.Security.SecurityException> <span data-ttu-id="68c9f-812">może zostać wygenerowany, jeśli zabezpieczenia systemu nie powoduje przyznania dostępu do obiektu wywołującego wywoływanej metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-812">may be thrown if system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="68c9f-813">Kontrola zabezpieczeń może wystąpić, gdy instrukcji Microsoft Intermediate Language (MSIL) są konwertowane do kodu natywnego, a nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-813">The security check may occur when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="68c9f-814">Podczas wywoływania metody System.Object w przypadku typów wartości, należy wziąć pod uwagę przy użyciu `constrained` prefiks z `callvirt` instrukcji zamiast emitowania `call` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-814">When calling methods of System.Object on value types, consider using the `constrained` prefix with the `callvirt` instruction instead of emitting a `call` instruction.</span></span> <span data-ttu-id="68c9f-815">Eliminuje to konieczność, aby emitować IL różne w zależności od tego, czy typ wartości zastępuje metodę unikanie potencjalny problem przechowywania wersji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-815">This removes the need to emit different IL depending on whether or not the value type overrides the method, avoiding a potential versioning problem.</span></span> <span data-ttu-id="68c9f-816">Należy rozważyć użycie `constrained` prefiksu podczas wywoływania metody interfejsu dla typów wartości, ponieważ metody typu wartości implementacja metody interfejsu można zmienić za pomocą `MethodImpl`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-816">Consider using the `constrained` prefix when invoking interface methods on value types, since the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="68c9f-817">Te problemy są opisane bardziej szczegółowo w <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span><span class="sxs-lookup"><span data-stu-id="68c9f-817">These issues are described in more detail in the <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span></span>  
  
 <span data-ttu-id="68c9f-818">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenia metody można użyć `call` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-818">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `call` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-819">ILGenerator.Emit(OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="68c9f-819">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="68c9f-820">ILGenerator.EmitCall (OpCode, MethodInfo, Type[])</span><span class="sxs-lookup"><span data-stu-id="68c9f-820">ILGenerator.EmitCall(OpCode, MethodInfo, Type[])</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="68c9f-821"><xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> Metoda jest przewidziana `varargs` wywołania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-821">The <xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> method is provided for `varargs` calls.</span></span> <span data-ttu-id="68c9f-822">Użyj <xref:System.Reflection.Emit.ILGenerator.Emit%2A> normalne wywołanie metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-822">Use the <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method for normal calls.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Calli">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Calli;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Calli" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Calli" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Calli As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Calli;" />
      <MemberSignature Language="F#" Value=" staticval mutable Calli : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Calli" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-823">Wywołuje metodę wskazane w stosie oceny (jako wskaźnik do punktu wejścia) z argumentami opisanego przez Konwencję wywoływania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-823">Calls the method indicated on the evaluation stack (as a pointer to an entry point) with arguments described by a calling convention.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-824">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-824">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-825">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-825">Format</span></span>|<span data-ttu-id="68c9f-826">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-826">Assembly Format</span></span>|<span data-ttu-id="68c9f-827">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-827">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-828">29 < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-828">29 < `T` ></span></span>|<span data-ttu-id="68c9f-829">calli</span><span class="sxs-lookup"><span data-stu-id="68c9f-829">calli</span></span> `callSiteDescr`|<span data-ttu-id="68c9f-830">Wywołuje metodę wskazywał z argumentami opisanego przez Konwencję wywołania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-830">Calls the method pointed to with arguments described by the calling convention.</span></span>|  
  
 <span data-ttu-id="68c9f-831">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-831">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-832">Argumenty metody `arg1` za pośrednictwem `argN` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-832">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-833">Wskaźnik wejścia metody są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-833">The method entry pointer is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-834">Argumenty metody `arg1` za pośrednictwem `argN` i wskaźnik wejścia metody są zdjęte ze stosu ze stosu, wywołanie do metody jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-834">Method arguments `arg1` through `argN` and the method entry pointer are popped from the stack; the call to the method is performed.</span></span> <span data-ttu-id="68c9f-835">Po zakończeniu wartość zwracana jest generowany przez metodę obiekt wywoływany i wysłane do obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-835">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
4.  <span data-ttu-id="68c9f-836">Wartość zwracana jest wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-836">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-837">`calli` Instrukcja wywołuje wskaźnik wejścia metody z argumentami `arg1` za pośrednictwem `argN`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-837">The `calli` instruction calls the method entry pointer with the arguments `arg1` through `argN`.</span></span> <span data-ttu-id="68c9f-838">Typy tych argumentów są opisane przez określonych konwencji wywoływania (`callSiteDesc`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-838">The types of these arguments are described by the specific calling convention (`callSiteDesc`).</span></span> <span data-ttu-id="68c9f-839">`calli` Instrukcji może być od razu poprzedzony `tail` prefiksu (<xref:System.Reflection.Emit.OpCodes.Tailcall>) do określenia, czy bieżący stan metody powinny zostać opublikowane przed przeniesieniem kontroli.</span><span class="sxs-lookup"><span data-stu-id="68c9f-839">The `calli` instruction may be immediately preceded by a `tail` prefix (<xref:System.Reflection.Emit.OpCodes.Tailcall>) to specify that the current method state should be released before transferring control.</span></span> <span data-ttu-id="68c9f-840">Wywołanie może przenieść formant do metody zaufania wyższe niż metoda źródła ramek stosu nie zostanie zwolnione; Zamiast tego, wykonywanie będzie kontynuowane dyskretnie tak, jakby `tail` nie został podany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-840">If the call would transfer control to a method of higher trust than the origin method the stack frame will not be released; instead, the execution will continue silently as if the `tail` had not been supplied.</span></span>  
  
 <span data-ttu-id="68c9f-841">Wskaźnik wejścia metoda zakłada się, że określone wskaźnik do kodu natywnego (komputera docelowego), który rzeczywiście można wywołać z argumentami opisanego przez Konwencja wywoływania (token metadanych dla podpisu autonomicznej).</span><span class="sxs-lookup"><span data-stu-id="68c9f-841">The method entry pointer is assumed to be a specific pointer to native code (of the target machine) that can be legitimately called with the arguments described by the calling convention (a metadata token for a stand-alone signature).</span></span> <span data-ttu-id="68c9f-842">Taki wskaźnik mogą być tworzone za pomocą <xref:System.Reflection.Emit.OpCodes.Ldftn> lub <xref:System.Reflection.Emit.OpCodes.Ldvirtftn> instrukcje lub przekazaną z kodu natywnego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-842">Such a pointer can be created using the <xref:System.Reflection.Emit.OpCodes.Ldftn> or <xref:System.Reflection.Emit.OpCodes.Ldvirtftn> instructions, or passed in from native code.</span></span>  
  
 <span data-ttu-id="68c9f-843">Konwencja wywoływania nie jest zaznaczone pole dynamicznie, więc kod używającego `calli` instrukcji nie działa prawidłowo, jeśli miejsce docelowe nie faktycznie używa określonej konwencji wywoływania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-843">The calling convention is not checked dynamically, so code that uses a `calli` instruction does not work correctly if the destination does not actually use the specified calling convention.</span></span>  
  
 <span data-ttu-id="68c9f-844">Argumenty są umieszczane na stosie, w kolejności od lewej do prawej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-844">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="68c9f-845">Oznacza to, że pierwszy argument jest obliczane i umieszczone na stosie, drugi argument, a następnie trzeci, dopóki wszystkie wymagane argumenty nie zostaną na jego podstawie stosu w kolejności malejącej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-845">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="68c9f-846">Sekwencję kodu budynku argument dla wystąpienia lub metodę wirtualną wypchnąć odwołania do tego wystąpienia (który nie może być odwołaniem do wartości null) przed którykolwiek z argumentów widoczny dla użytkownika.</span><span class="sxs-lookup"><span data-stu-id="68c9f-846">The argument-building code sequence for an instance or virtual method must push that instance reference (which must not be a null reference) before any of the user-visible arguments.</span></span>  
  
 <xref:System.Security.SecurityException> <span data-ttu-id="68c9f-847">może zostać wygenerowany, jeśli zabezpieczenia systemu nie powoduje przyznania dostępu do obiektu wywołującego wywoływanej metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-847">may be thrown if the system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="68c9f-848">Kontrola zabezpieczeń może wystąpić, gdy instrukcji Microsoft Intermediate Language (MSIL) są konwertowane do kodu natywnego, a nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-848">The security check can occur when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="68c9f-849">Następujące <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> metody może służyć do wykonywania `calli` instrukcji na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-849">The following <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> methods can be used to perform a `calli` instruction on the stack.</span></span> <span data-ttu-id="68c9f-850">Należy pamiętać, że `calli` powinna być wywoływana przy użyciu poniższych metod, a nie przy użyciu <xref:System.Reflection.Emit.ILGenerator.Emit%2A> klasy, aby umieścić instrukcję bezpośrednio na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-850">Note that `calli` should be called through the below methods rather than using the <xref:System.Reflection.Emit.ILGenerator.Emit%2A> class to place the instruction directly on the stack.</span></span>  
  
-   <span data-ttu-id="68c9f-851">ILGenerator.EmitCalli (Opcode, CallingConventions, typ, typ [], Type[]) dla wywołań przy użyciu Konwencją zarządzanego wywoływania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-851">ILGenerator.EmitCalli(Opcode, CallingConventions, Type, Type[], Type[]) for calls using a managed calling convention.</span></span>  
  
-   <span data-ttu-id="68c9f-852">ILGenerator.EmitCalli (Opcode Type[]) CallingConvention, typ, dla wywołań przy użyciu konwencji wywoływania niezarządzanego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-852">ILGenerator.EmitCalli(Opcode, CallingConvention, Type, Type[]) for calls using an unmanaged calling convention.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Callvirt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Callvirt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Callvirt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Callvirt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Callvirt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Callvirt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Callvirt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Callvirt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-853">Wywołuje metodę z późnym wiązaniem do obiektu, wypychanie wartość zwracaną na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-853">Calls a late-bound method on an object, pushing the return value onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-854">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-854">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-855">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-855">Format</span></span>|<span data-ttu-id="68c9f-856">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-856">Assembly Format</span></span>|<span data-ttu-id="68c9f-857">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-857">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-858">6F < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-858">6F < `T` ></span></span>|<span data-ttu-id="68c9f-859">callvirt</span><span class="sxs-lookup"><span data-stu-id="68c9f-859">callvirt</span></span> `method`|<span data-ttu-id="68c9f-860">Wywołuje metodę określonej skojarzone z `obj`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-860">Calls a specific method associated with `obj`.</span></span>|  
  
 <span data-ttu-id="68c9f-861">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-861">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-862">Odwołanie do obiektu `obj` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-862">An object reference `obj` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-863">Argumenty metody `arg1` za pośrednictwem `argN` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-863">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-864">Argumenty metody `arg1` za pośrednictwem `argN` i odwołanie do obiektu `obj` są zdjęte ze stosu ze stosu; wywołania metody które odbywa się z tymi argumentami i kontrola jest przekazywana do metody w `obj` określonych przez metodę token metadanych.</span><span class="sxs-lookup"><span data-stu-id="68c9f-864">Method arguments `arg1` through `argN` and the object reference `obj` are popped from the stack; the method call is performed with these arguments and control is transferred to the method in `obj` referred to by the method metadata token.</span></span> <span data-ttu-id="68c9f-865">Po zakończeniu wartość zwracana jest generowany przez metodę obiekt wywoływany i wysłane do obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-865">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
4.  <span data-ttu-id="68c9f-866">Wartość zwracana jest wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-866">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-867">`callvirt` Instrukcja wywołuje metody z późnym wiązaniem do obiektu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-867">The `callvirt` instruction calls a late-bound method on an object.</span></span> <span data-ttu-id="68c9f-868">Oznacza to, że metoda jest wybierany zależnie od typu środowiska uruchomieniowego `obj` zamiast widoczne we wskaźniku metody klasy kompilacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-868">That is, the method is chosen based on the runtime type of `obj` rather than the compile-time class visible in the method pointer.</span></span> `Callvirt` <span data-ttu-id="68c9f-869">można wywołać wirtualne i wystąpienia metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-869">can be used to call both virtual and instance methods.</span></span> <span data-ttu-id="68c9f-870">`callvirt` Instrukcji może być od razu poprzedzony `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) prefiks, aby określić, że bieżącej ramki stosu, powinny zostać opublikowane przed przeniesieniem kontroli.</span><span class="sxs-lookup"><span data-stu-id="68c9f-870">The `callvirt` instruction may be immediately preceded by a `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) prefix to specify that the current stack frame should be released before transferring control.</span></span> <span data-ttu-id="68c9f-871">Jeśli wywołania będą transfer kontroli do metody zaufania wyższe niż pierwotną metodą ramki stosu nie zostaną wydane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-871">If the call would transfer control to a method of higher trust than the original method the stack frame will not be released.</span></span>  
  
 <span data-ttu-id="68c9f-872">Token metadanych metody zawiera nazwę, klasy i podpis metody do wywołania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-872">The method metadata token provides the name, class and signature of the method to call.</span></span> <span data-ttu-id="68c9f-873">Klasy skojarzonej z `obj` jest klasą, który jest wystąpieniem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-873">The class associated with `obj` is the class of which it is an instance.</span></span> <span data-ttu-id="68c9f-874">Jeśli klasa definiuje metodę niestatyczna, która pasuje do nazwy metody wskazanej i podpis, ta metoda jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="68c9f-874">If the class defines a non-static method that matches the indicated method name and signature, this method is called.</span></span> <span data-ttu-id="68c9f-875">W przeciwnym razie wszystkie klasy w łańcuchu klasa bazowa tej klasy są sprawdzane w kolejności.</span><span class="sxs-lookup"><span data-stu-id="68c9f-875">Otherwise all classes in the base class chain of this class are checked in order.</span></span> <span data-ttu-id="68c9f-876">Jeśli metoda nie zostanie znaleziony, występuje błąd.</span><span class="sxs-lookup"><span data-stu-id="68c9f-876">It is an error if no method is found.</span></span>  
  
 `Callvirt` <span data-ttu-id="68c9f-877">pobiera obiekt i argumenty skojarzone z poszczególnymi stosu oceny przed wywołaniem metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-877">pops the object and the associated arguments off the evaluation stack before calling the method.</span></span> <span data-ttu-id="68c9f-878">Jeśli metoda nie zwraca wartości, spoczywa na stosie po zakończeniu metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-878">If the method has a return value, it is pushed on the stack upon method completion.</span></span> <span data-ttu-id="68c9f-879">Na stronie / / wywoływany `obj` parametr jest dostępny jako argument 0, `arg1` jako argumentu 1 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-879">On the callee side, the `obj` parameter is accessed as argument 0, `arg1` as argument 1, and so on.</span></span>  
  
 <span data-ttu-id="68c9f-880">Argumenty są umieszczane na stosie, w kolejności od lewej do prawej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-880">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="68c9f-881">Oznacza to, że pierwszy argument jest obliczane i umieszczone na stosie, drugi argument, a następnie trzeci, dopóki wszystkie wymagane argumenty nie zostaną na jego podstawie stosu w kolejności malejącej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-881">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="68c9f-882">Odwołania do wystąpienia `obj` (zawsze wymagane dla `callvirt`) musi zostać wypchnięty przed którykolwiek z argumentów widoczny dla użytkownika.</span><span class="sxs-lookup"><span data-stu-id="68c9f-882">The instance reference `obj` (always required for `callvirt`) must be pushed before any of the user-visible arguments.</span></span> <span data-ttu-id="68c9f-883">Podpis (przenoszone w tokenie metadanych) nie muszą zawierać wpis na liście parametrów dla tego wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="68c9f-883">The signature (carried in the metadata token) need not contain an entry in the parameter list for the this pointer.</span></span>  
  
 <span data-ttu-id="68c9f-884">Należy pamiętać, że metoda wirtualna mogą być również wywoływane przy użyciu <xref:System.Reflection.Emit.OpCodes.Call> instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-884">Note that a virtual method can also be called using the <xref:System.Reflection.Emit.OpCodes.Call> instruction.</span></span>  
  
 <xref:System.MissingMethodException> <span data-ttu-id="68c9f-885">jest generowany, jeśli nie można odnaleźć metody niestatycznej o wskazanym nazwę i podpis w klasy skojarzonej z `obj` lub dowolny z jej klas podstawowych.</span><span class="sxs-lookup"><span data-stu-id="68c9f-885">is thrown if a non-static method with the indicated name and signature could not be found in the class associated with `obj` or any of its base classes.</span></span> <span data-ttu-id="68c9f-886">Jest to zazwyczaj wykrywany, po instrukcji Microsoft Intermediate Language (MSIL) są konwertowane do kodu natywnego, a nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-886">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-887">jest generowany, jeśli obiekt ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-887">is thrown if obj is null.</span></span>  
  
 <xref:System.Security.SecurityException> <span data-ttu-id="68c9f-888">jest generowany, jeśli zabezpieczenia systemu nie powoduje przyznania dostępu do obiektu wywołującego wywoływanej metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-888">is thrown if system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="68c9f-889">Kontrola zabezpieczeń może wystąpić po przekonwertowaniu CIL do kodu natywnego, a nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-889">The security check may occur when the CIL is converted to native code rather than at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="68c9f-890">Podczas wywoływania metody System.Object w przypadku typów wartości, należy wziąć pod uwagę przy użyciu `constrained` prefiks z `callvirt` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-890">When calling methods of System.Object on value types, consider using the `constrained` prefix with the `callvirt` instruction.</span></span> <span data-ttu-id="68c9f-891">Eliminuje to konieczność, aby emitować IL różne w zależności od tego, czy typ wartości zastępuje metodę unikanie potencjalny problem przechowywania wersji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-891">This removes the need to emit different IL depending on whether or not the value type overrides the method, avoiding a potential versioning problem.</span></span> <span data-ttu-id="68c9f-892">Należy rozważyć użycie `constrained` prefiksu podczas wywoływania metody interfejsu dla typów wartości, ponieważ metody typu wartości implementacja metody interfejsu można zmienić za pomocą `MethodImpl`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-892">Consider using the `constrained` prefix when invoking interface methods on value types, since the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="68c9f-893">Te problemy są opisane bardziej szczegółowo w <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span><span class="sxs-lookup"><span data-stu-id="68c9f-893">These issues are described in more detail in the <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span></span>  
  
 <span data-ttu-id="68c9f-894">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `callvirt` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-894">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `callvirt` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-895">ILGenerator.Emit(OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="68c9f-895">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="68c9f-896">ILGenerator.EmitCall (OpCode, MethodInfo, Type[])</span><span class="sxs-lookup"><span data-stu-id="68c9f-896">ILGenerator.EmitCall(OpCode, MethodInfo, Type[])</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Castclass">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Castclass;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Castclass" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Castclass" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Castclass As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Castclass;" />
      <MemberSignature Language="F#" Value=" staticval mutable Castclass : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Castclass" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-897">Próbuje rzutować obiekt przekazywany przez odwołanie do określonej klasy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-897">Attempts to cast an object passed by reference to the specified class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-898">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-898">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-899">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-899">Format</span></span>|<span data-ttu-id="68c9f-900">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-900">Assembly Format</span></span>|<span data-ttu-id="68c9f-901">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-901">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-902">74 < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-902">74 < `T` ></span></span>|<span data-ttu-id="68c9f-903">castclass</span><span class="sxs-lookup"><span data-stu-id="68c9f-903">castclass</span></span> `class`|<span data-ttu-id="68c9f-904">Obiekt, do nowego obiektu typu rzutuje `class`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-904">Casts an object to a new object of type `class`.</span></span>|  
  
 <span data-ttu-id="68c9f-905">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-905">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-906">Odwołanie do obiektu są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-906">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-907">Odwołanie do obiektu zostanie zdjęte ze stosu; przywoływanego obiektu jest rzutowany jako określony `class`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-907">The object reference is popped from the stack; the referenced object is cast as the specified `class`.</span></span>  
  
3.  <span data-ttu-id="68c9f-908">Jeśli to się powiedzie, nowe odwołanie do obiektu są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-908">If successful, a new object reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-909">`castclass` Instrukcji podejmuje próbę rzutowania odwołanie do obiektu (typ `O`) na jego podstawie stosu do określonej klasy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-909">The `castclass` instruction attempts to cast the object reference (type `O`) atop the stack to a specified class.</span></span> <span data-ttu-id="68c9f-910">Nowa klasa jest określony za pomocą tokenu metadanych wskazujący odpowiednią klasę.</span><span class="sxs-lookup"><span data-stu-id="68c9f-910">The new class is specified by a metadata token indicating the desired class.</span></span> <span data-ttu-id="68c9f-911">Jeśli klasa obiektu górze stosu nie implementuje nową klasę (zakładając, że nowa klasa jest interfejsem) i nie jest klasę pochodną nowej klasy, a następnie <xref:System.InvalidCastException> zgłaszany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-911">If the class of the object on the top of the stack does not implement the new class (assuming the new class is an interface) and is not a derived class of the new class then an <xref:System.InvalidCastException> is thrown.</span></span> <span data-ttu-id="68c9f-912">Jeśli odwołanie do obiektu jest odwołanie o wartości null, `castclass` zakończy się pomyślnie i zwraca nowy obiekt jako odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-912">If the object reference is a null reference, `castclass` succeeds and returns the new object as a null reference.</span></span>  
  
 <xref:System.InvalidCastException> <span data-ttu-id="68c9f-913">jest generowany, jeśli obj nie można rzutować klasy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-913">is thrown if obj cannot be cast to class.</span></span>  
  
 <xref:System.TypeLoadException> <span data-ttu-id="68c9f-914">jest generowany, jeśli nie można odnaleźć klasy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-914">is thrown if class cannot be found.</span></span> <span data-ttu-id="68c9f-915">Jest to zazwyczaj wykrywany, po instrukcji Microsoft Intermediate Language (MSIL) jest konwertowana do kodu natywnego, a nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-915">This is typically detected when a Microsoft Intermediate Language (MSIL) instruction is converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="68c9f-916">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `castclass` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-916">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `castclass` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-917">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="68c9f-917">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceq">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ceq;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ceq" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ceq" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ceq As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ceq;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ceq : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ceq" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-918">Porównuje dwie wartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-918">Compares two values.</span></span> <span data-ttu-id="68c9f-919">Czy są równe, liczbę całkowitą wartość 1 <see langword="(int32" />) są wypychane na stosie oceny; w przeciwnym razie 0 (<see langword="int32" />) są wypychane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-919">If they are equal, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-920">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-920">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-921">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-921">Format</span></span>|<span data-ttu-id="68c9f-922">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-922">Assembly Format</span></span>|<span data-ttu-id="68c9f-923">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-923">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-924">FE 01</span><span class="sxs-lookup"><span data-stu-id="68c9f-924">FE 01</span></span>|<span data-ttu-id="68c9f-925">ceq</span><span class="sxs-lookup"><span data-stu-id="68c9f-925">ceq</span></span>|<span data-ttu-id="68c9f-926">Wypychanie 1, jeśli `value1` jest równa `value2`; w przeciwnym razie wypycha 0.</span><span class="sxs-lookup"><span data-stu-id="68c9f-926">Pushes 1 if `value1` equals `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="68c9f-927">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-927">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-928">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-928">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-929">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-929">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-930">i `value1` są zdjęte ze stosu ze stosu; `value1` jest porównywany z `value2`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-930">and `value1` are popped from the stack; `value1` is compared to `value2`.</span></span>  
  
4.  <span data-ttu-id="68c9f-931">Jeśli `value1` jest równa `value2`, 1 są wypychane na stosie; w przeciwnym razie 0 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-931">If `value1` is equal to `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-932">`ceq` Porównuje instrukcji `value1` i `value2`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-932">The `ceq` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="68c9f-933">Jeśli `value1` jest równa `value2`, następnie 1 (typu `int32`) są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-933">If `value1` is equal to `value2`, then 1 (of type `int32`) is pushed on the stack.</span></span> <span data-ttu-id="68c9f-934">W przeciwnym razie 0 (typu `int32`) są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-934">Otherwise 0 (of type `int32`) is pushed on the stack.</span></span>  
  
 <span data-ttu-id="68c9f-935">Zmiennoprzecinkowa numer `ceq` zwróci wartość 0 w przypadku liczb nieuporządkowaną (jeden lub oba są NaN).</span><span class="sxs-lookup"><span data-stu-id="68c9f-935">For floating-point number, `ceq` will return 0 if the numbers are unordered (either or both are NaN).</span></span> <span data-ttu-id="68c9f-936">Nieskończona wartości są równe do siebie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-936">The infinite values are equal to themselves.</span></span>  
  
 <span data-ttu-id="68c9f-937">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ceq` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-937">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ceq` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-938">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-938">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cgt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cgt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cgt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cgt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cgt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cgt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cgt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cgt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-939">Porównuje dwie wartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-939">Compares two values.</span></span> <span data-ttu-id="68c9f-940">Jeśli pierwsza wartość jest większa od drugiej, liczbę całkowitą wartość 1 <see langword="(int32" />) są wypychane na stosie oceny; w przeciwnym razie 0 (<see langword="int32" />) są wypychane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-940">If the first value is greater than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-941">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-941">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-942">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-942">Format</span></span>|<span data-ttu-id="68c9f-943">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-943">Assembly Format</span></span>|<span data-ttu-id="68c9f-944">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-944">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-945">FE 02</span><span class="sxs-lookup"><span data-stu-id="68c9f-945">FE 02</span></span>|<span data-ttu-id="68c9f-946">cgt</span><span class="sxs-lookup"><span data-stu-id="68c9f-946">cgt</span></span>|<span data-ttu-id="68c9f-947">Wypychanie 1, jeśli `value1` jest większa niż `value2`; w przeciwnym razie wypycha 0.</span><span class="sxs-lookup"><span data-stu-id="68c9f-947">Pushes 1 if `value1` is greater than `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="68c9f-948">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-948">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-949">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-949">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-950">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-950">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-951">i `value1` są zdjęte ze stosu ze stosu; `cgt` sprawdza, czy `value1` jest większa niż `value2`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-951">and `value1` are popped from the stack; `cgt` tests if `value1` is greater than `value2`.</span></span>  
  
4.  <span data-ttu-id="68c9f-952">Jeśli `value1` jest większa niż `value2`, 1 są wypychane na stosie; w przeciwnym razie 0 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-952">If `value1` is greater than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-953">`cgt` Porównuje instrukcji `value1` i `value2`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-953">The `cgt` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="68c9f-954">Jeśli `value1` jest większa niż `value2`, a następnie `int32` wartość 1 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-954">If `value1` is strictly greater than `value2`, then an `int32` value of 1 is pushed on the stack.</span></span> <span data-ttu-id="68c9f-955">W przeciwnym razie `int32` wartość 0 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-955">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
-   <span data-ttu-id="68c9f-956">W przypadku liczb zmiennoprzecinkowych `cgt` zwraca wartość 0, jeśli liczby są nieuporządkowane (to znaczy, jeśli co najmniej jeden argument jest NaN).</span><span class="sxs-lookup"><span data-stu-id="68c9f-956">For floating-point numbers, `cgt` returns 0 if the numbers are unordered (that is, if one or both of the arguments are NaN).</span></span>  
  
 <span data-ttu-id="68c9f-957">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `cgt` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-957">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cgt` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-958">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-958">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cgt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cgt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cgt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cgt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cgt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cgt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cgt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cgt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-959">Porównuje dwie wartości bez znaku lub nieuporządkowane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-959">Compares two unsigned or unordered values.</span></span> <span data-ttu-id="68c9f-960">Jeśli pierwsza wartość jest większa od drugiej, liczbę całkowitą wartość 1 <see langword="(int32" />) są wypychane na stosie oceny; w przeciwnym razie 0 (<see langword="int32" />) są wypychane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-960">If the first value is greater than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-961">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-961">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-962">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-962">Format</span></span>|<span data-ttu-id="68c9f-963">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-963">Assembly Format</span></span>|<span data-ttu-id="68c9f-964">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-964">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-965">FE 03</span><span class="sxs-lookup"><span data-stu-id="68c9f-965">FE 03</span></span>|<span data-ttu-id="68c9f-966">cgt.un</span><span class="sxs-lookup"><span data-stu-id="68c9f-966">cgt.un</span></span>|<span data-ttu-id="68c9f-967">Wypychanie 1, jeśli `value1` jest większa niż `value2`; w przeciwnym razie wypycha 0 (wartości bez znaku).</span><span class="sxs-lookup"><span data-stu-id="68c9f-967">Pushes 1 if `value1` is greater than `value2`; else pushes 0 (unsigned values).</span></span>|  
  
 <span data-ttu-id="68c9f-968">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-968">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-969">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-969">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-970">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-970">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-971">i `value1` są zdjęte ze stosu ze stosu; `cgt.un` sprawdza, czy `value1` jest większa niż `value2`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-971">and `value1` are popped from the stack; `cgt.un` tests if `value1` is greater than `value2`.</span></span>  
  
4.  <span data-ttu-id="68c9f-972">Jeśli `value1` jest większa niż `value2`, 1 są wypychane na stosie; w przeciwnym razie 0 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-972">If `value1` is greater than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-973">`int32` Wartość 1 są wypychane na stosie, jeśli dowolny z następujących `true` :</span><span class="sxs-lookup"><span data-stu-id="68c9f-973">An `int32` value of 1 is pushed on the stack if any of the following is `true` :</span></span>  
  
 <span data-ttu-id="68c9f-974">W przypadku liczb zmiennoprzecinkowych `value1` nie są porządkowane w odniesieniu do `value2`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-974">For floating-point numbers, `value1` is not ordered with respect to `value2`.</span></span>  
  
 <span data-ttu-id="68c9f-975">Dla wartości całkowitych `value1` jest większa niż `value2` podczas traktowane jako liczb bez znaku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-975">For integer values, `value1` is strictly greater than `value2` when considered as unsigned numbers.</span></span>  
  
 <span data-ttu-id="68c9f-976">W przeciwnym razie `int32` wartość 0 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-976">Otherwise an `int32` value of 0 is pushed on the stack.</span></span>  
  
 <span data-ttu-id="68c9f-977">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `cgt.un` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-977">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cgt.un` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-978">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-978">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ckfinite">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ckfinite;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ckfinite" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ckfinite" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ckfinite As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ckfinite;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ckfinite : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ckfinite" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-979">Zgłasza <see cref="T:System.ArithmeticException" /> Jeśli wartość nie jest liczbą skończoną.</span><span class="sxs-lookup"><span data-stu-id="68c9f-979">Throws <see cref="T:System.ArithmeticException" /> if value is not a finite number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-980">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-980">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-981">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-981">Format</span></span>|<span data-ttu-id="68c9f-982">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-982">Assembly Format</span></span>|<span data-ttu-id="68c9f-983">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-983">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-984">C3</span><span class="sxs-lookup"><span data-stu-id="68c9f-984">C3</span></span>|<span data-ttu-id="68c9f-985">ckfinite</span><span class="sxs-lookup"><span data-stu-id="68c9f-985">ckfinite</span></span>|<span data-ttu-id="68c9f-986">throw <xref:System.ArithmeticException> Jeśli wartość nie jest liczbą skończoną.</span><span class="sxs-lookup"><span data-stu-id="68c9f-986">throw <xref:System.ArithmeticException> if value is not a finite number.</span></span>|  
  
 <span data-ttu-id="68c9f-987">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-987">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-988">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-988">is pushed onto the stack.</span></span> 
  
2.  `value` <span data-ttu-id="68c9f-989">zostanie zdjęte ze stosu i `ckfinite` instrukcji odbywa się na nim.</span><span class="sxs-lookup"><span data-stu-id="68c9f-989">is popped from the stack and the `ckfinite` instruction is performed on it.</span></span>  
  
3.  `value` <span data-ttu-id="68c9f-990">jest przesunięty na stosie, jeśli jest zgłaszany żaden wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-990">is pushed back onto the stack if no exception is thrown.</span></span>  
  
 <span data-ttu-id="68c9f-991">`ckfinite instruction` Zgłasza <xref:System.ArithmeticException> Jeśli `value` (liczba zmiennoprzecinkowa) ma wartość "nie jest liczbą" wartości (NaN) lub `+-` wartości nieskończonej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-991">The `ckfinite instruction` throws <xref:System.ArithmeticException> if `value` (a floating-point number) is either a "not a number" value (NaN) or a `+-` infinity value.</span></span> `Ckfinite` <span data-ttu-id="68c9f-992">pozostawia wartość na stosie, jeśli jest zgłaszany żaden wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-992">leaves the value on the stack if no exception is thrown.</span></span> <span data-ttu-id="68c9f-993">Wykonanie jest nieokreślony, jeżeli `value` nie jest liczbą zmiennoprzecinkową.</span><span class="sxs-lookup"><span data-stu-id="68c9f-993">Execution is unspecified if `value` is not a floating-point number.</span></span>  
  
 <xref:System.ArithmeticException> <span data-ttu-id="68c9f-994">jest generowany, jeśli `value` nie jest liczbą "normal".</span><span class="sxs-lookup"><span data-stu-id="68c9f-994">is thrown if `value` is not a 'normal' number.</span></span>  
  
 <span data-ttu-id="68c9f-995">Należy pamiętać, że specjalny wyjątek lub klasy pochodnej <xref:System.ArithmeticException> może być bardziej odpowiednie, przekazując niepoprawną wartość do obsługi wyjątków.</span><span class="sxs-lookup"><span data-stu-id="68c9f-995">Note that a special exception or a derived class of <xref:System.ArithmeticException> may be more appropriate, passing the incorrect value to the exception handler.</span></span>  
  
 <span data-ttu-id="68c9f-996">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ckfinite` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-996">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ckfinite` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-997">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-997">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Clt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Clt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Clt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Clt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Clt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Clt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Clt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-998">Porównuje dwie wartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-998">Compares two values.</span></span> <span data-ttu-id="68c9f-999">Jeśli pierwsza wartość jest mniejsza od drugiej, liczbę całkowitą wartość 1 <see langword="(int32" />) są wypychane na stosie oceny; w przeciwnym razie 0 (<see langword="int32" />) są wypychane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-999">If the first value is less than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1000">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1000">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1001">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1001">Format</span></span>|<span data-ttu-id="68c9f-1002">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1002">Assembly Format</span></span>|<span data-ttu-id="68c9f-1003">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1003">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1004">FE 04</span><span class="sxs-lookup"><span data-stu-id="68c9f-1004">FE 04</span></span>|<span data-ttu-id="68c9f-1005">ClT</span><span class="sxs-lookup"><span data-stu-id="68c9f-1005">clt</span></span>|<span data-ttu-id="68c9f-1006">Wypychanie 1, jeśli `value1` jest mniejsza niż `value2`; w przeciwnym razie wypycha 0.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1006">Pushes 1 if `value1` is less than `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="68c9f-1007">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1007">The stack transitional behavior, in sequential order, is:</span></span> 

1.  `value1` <span data-ttu-id="68c9f-1008">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1008">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-1009">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1009">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-1010">i `value1` są zdjęte ze stosu ze stosu; `clt` sprawdza, czy `value1` jest mniejsza niż `value2`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1010">and `value1` are popped from the stack; `clt` tests if `value1` is less than `value2`.</span></span>  
  
4.  <span data-ttu-id="68c9f-1011">Jeśli `value1` jest mniejsza niż `value2`, 1 są wypychane na stosie; w przeciwnym razie 0 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1011">If `value1` is less than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1012">`clt` Porównuje instrukcji `value1` i `value2`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1012">The `clt` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="68c9f-1013">Jeśli `value1` jest mniejsza niż `value2`, a następnie `int32` wartość 1 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1013">If `value1` is strictly less than `value2`, then an `int32` value of 1 is pushed on the stack.</span></span> <span data-ttu-id="68c9f-1014">W przeciwnym razie `int32` wartość 0 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1014">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
-   <span data-ttu-id="68c9f-1015">W przypadku liczb zmiennoprzecinkowych `clt` zwraca wartość 0, jeśli liczby są nieuporządkowane (to znaczy, jeśli co najmniej jeden argument jest NaN).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1015">For floating-point numbers, `clt` returns 0 if the numbers are unordered (that is, if one or both of the arguments are NaN).</span></span>  
  
 <span data-ttu-id="68c9f-1016">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `clt` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1016">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `clt` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1017">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1017">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Clt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Clt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Clt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Clt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Clt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Clt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Clt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1018">Porównuje wartości bez znaku lub nieuporządkowane <paramref name="value1" /> i <paramref name="value2" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1018">Compares the unsigned or unordered values <paramref name="value1" /> and <paramref name="value2" />.</span></span> <span data-ttu-id="68c9f-1019">Jeśli <paramref name="value1" /> jest mniej niż <paramref name="value2" />, następnie wartość całkowita 1 <see langword="(int32" />) są wypychane na ocenę stosu; w przeciwnym razie 0 (<see langword="int32" />) są wypychane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1019">If <paramref name="value1" /> is less than <paramref name="value2" />, then the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1020">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1020">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1021">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1021">Format</span></span>|<span data-ttu-id="68c9f-1022">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1022">Assembly Format</span></span>|<span data-ttu-id="68c9f-1023">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1023">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1024">FE 05</span><span class="sxs-lookup"><span data-stu-id="68c9f-1024">FE 05</span></span>|<span data-ttu-id="68c9f-1025">ClT.UN</span><span class="sxs-lookup"><span data-stu-id="68c9f-1025">clt.un</span></span>|<span data-ttu-id="68c9f-1026">Wypychanie 1, jeśli `value1` jest mniejsza niż `value2`; w przeciwnym razie wypycha 0 (wartości bez znaku).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1026">Pushes 1 if `value1` is less than `value2`; else pushes 0 (unsigned values).</span></span>|  
  
 <span data-ttu-id="68c9f-1027">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1027">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-1028">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1028">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-1029">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1029">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-1030">i `value1` są zdjęte ze stosu ze stosu; `clt.un` sprawdza, czy `value1` jest mniejsza niż `value2`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1030">and `value1` are popped from the stack; `clt.un` tests if `value1` is less than `value2`.</span></span>  
  
4.  <span data-ttu-id="68c9f-1031">Jeśli `value1` jest mniejsza niż `value2`, 1 są wypychane na stosie; w przeciwnym razie 0 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1031">If `value1` is less than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1032">`clt.un` Porównuje instrukcji `value1` i `value2`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1032">The `clt.un` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="68c9f-1033">`int32` Wartość 1 są wypychane na stosie, jeśli spełniony jest dowolny z następujących czynności:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1033">An `int32` value of 1 is pushed on the stack if any of the following is true:</span></span>  
  
-   `value1` <span data-ttu-id="68c9f-1034">jest mniejsza niż `value2` (jak w przypadku `clt`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1034">is strictly less than `value2` (as for `clt`).</span></span>  
  
-   <span data-ttu-id="68c9f-1035">W przypadku liczb zmiennoprzecinkowych `value1` nie są porządkowane w odniesieniu do `value2`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1035">For floating-point numbers, `value1` is not ordered with respect to `value2`.</span></span>  
  
-   <span data-ttu-id="68c9f-1036">Dla wartości całkowitych `value1` jest mniejsza niż `value2` podczas traktowane jako liczb bez znaku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1036">For integer values, `value1` is strictly less than `value2` when considered as unsigned numbers.</span></span>  
  
 <span data-ttu-id="68c9f-1037">W przeciwnym razie `int32` wartość 0 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1037">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1038">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `clt.un` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1038">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `clt.un` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1039">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1039">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Constrained">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Constrained;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Constrained" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Constrained" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Constrained As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Constrained;" />
      <MemberSignature Language="F#" Value=" staticval mutable Constrained : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Constrained" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1040">Ogranicza typu, na którym wykonano wywołanie wirtualnej metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1040">Constrains the type on which a virtual method call is made.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1041">W poniższej tabeli wymieniono szesnastkowym i format programu Microsoft intermediate language (MSIL) zestawu, wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1041">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1042">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1042">Format</span></span>|<span data-ttu-id="68c9f-1043">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1043">Assembly Format</span></span>|<span data-ttu-id="68c9f-1044">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1044">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1045">FE 16 < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-1045">FE 16 < `T` ></span></span>|<span data-ttu-id="68c9f-1046">ograniczone.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1046">constrained.</span></span> `thisType`|<span data-ttu-id="68c9f-1047">Wywołanie wirtualnej metody w typie ograniczonym do typ `T`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1047">Call a virtual method on a type constrained to be type `T`.</span></span>|  
  
 <span data-ttu-id="68c9f-1048">`constrained` Prefiks jest dozwolona tylko w systemach `callvirt` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1048">The `constrained` prefix is permitted only on a `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="68c9f-1049">Stan w tym momencie stos MSIL musi być w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1049">The state of the MSIL stack at this point must be as follows:</span></span>  
  
1.  <span data-ttu-id="68c9f-1050">Wskaźnik zarządzanego `ptr`, są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1050">A managed pointer, `ptr`, is pushed onto the stack.</span></span> <span data-ttu-id="68c9f-1051">Typ `ptr` musi być wskaźnikiem zarządzanych (`&`) do `thisType`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1051">The type of `ptr` must be a managed pointer (`&`) to `thisType`.</span></span> <span data-ttu-id="68c9f-1052">Należy pamiętać, że to różni się od przypadku unprefixed `callvirt` instrukcji, która oczekuje odwołania do elementu `thisType`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1052">Note that this is different from the case of an unprefixed `callvirt` instruction, which expects a reference of `thisType`.</span></span>  
  
2.  <span data-ttu-id="68c9f-1053">Argumenty metody `arg1` za pośrednictwem `argN` są wypychane na stosie, podobnie jak w przypadku unprefixed `callvirt` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1053">Method arguments `arg1` through `argN` are pushed onto the stack, just as with an unprefixed `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="68c9f-1054">`constrained` Prefiks umożliwia `callvirt` instrukcje, które ma zostać wykonane w jednolity sposób niezależny od czy `thisType` jest typem wartości lub typem referencyjnym.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1054">The `constrained` prefix is designed to allow `callvirt` instructions to be made in a uniform way independent of whether `thisType` is a value type or a reference type.</span></span>  
  
 <span data-ttu-id="68c9f-1055">Gdy `callvirt` `method` poprzedzony instrukcji `constrained` `thisType`, instrukcja jest wykonywana w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1055">When a `callvirt` `method` instruction has been prefixed by `constrained` `thisType`, the instruction is executed as follows:</span></span>  
  
-   <span data-ttu-id="68c9f-1056">Jeśli `thisType` jest typem odwołania (w przeciwieństwie do typu wartości) `ptr` jest wyłuskiwany i przekazywane jako wskaźnik "this", aby `callvirt` z `method`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1056">If `thisType` is a reference type (as opposed to a value type) then `ptr` is dereferenced and passed as the 'this' pointer to the `callvirt` of `method`.</span></span>  
  
-   <span data-ttu-id="68c9f-1057">Jeśli `thisType` jest typem wartości i `thisType` implementuje `method` następnie `ptr` jest przekazywany niezmodyfikowanego jako wskaźnik "this", aby `call` `method` instrukcji do wykonania `method` przez `thisType`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1057">If `thisType` is a value type and `thisType` implements `method` then `ptr` is passed unmodified as the 'this' pointer to a `call` `method` instruction, for the implementation of `method` by `thisType`.</span></span>  
  
-   <span data-ttu-id="68c9f-1058">Jeśli `thisType` jest typem wartości i `thisType` nie implementuje `method` następnie `ptr` jest wyłuskiwany opakowany i przekazywane jako wskaźnik "this", aby `callvirt` `method` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1058">If `thisType` is a value type and `thisType` does not implement `method` then `ptr` is dereferenced, boxed, and passed as the 'this' pointer to the `callvirt` `method` instruction.</span></span>  
  
 <span data-ttu-id="68c9f-1059">Ostatnim przypadku może wystąpić tylko wtedy, gdy `method` została zdefiniowana w <xref:System.Object>, <xref:System.ValueType>, lub <xref:System.Enum> i nie jest zastępowana przez `thisType`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1059">This last case can occur only when `method` was defined on <xref:System.Object>, <xref:System.ValueType>, or <xref:System.Enum> and not overridden by `thisType`.</span></span> <span data-ttu-id="68c9f-1060">W tym przypadku pakowania powoduje, że kopia oryginalnego obiektu, który ma zostać wykonane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1060">In this case, the boxing causes a copy of the original object to be made.</span></span> <span data-ttu-id="68c9f-1061">Jednak ponieważ żaden z metody <xref:System.Object>, <xref:System.ValueType>, i <xref:System.Enum> zmiany stanu obiektu, ten fakt nie może zostać wykryty.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1061">However, because none of the methods of <xref:System.Object>, <xref:System.ValueType>, and <xref:System.Enum> modify the state of the object, this fact cannot be detected.</span></span>  
  
 <span data-ttu-id="68c9f-1062">`constrained` Prefiks obsługuje generatorów języka IL, tworzonych w kodzie rodzajowym.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1062">The `constrained` prefix supports IL generators that create generic code.</span></span> <span data-ttu-id="68c9f-1063">Zwykle `callvirt` instrukcja jest nieprawidłowa dla typów wartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1063">Normally the `callvirt` instruction is not valid on value types.</span></span> <span data-ttu-id="68c9f-1064">Zamiast tego jest to wymagane, kompilatory IL skutecznie na przekształcenie "this" opisanych powyżej w czasie kompilacji, w zależności od typu `ptr` i wywołania metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1064">Instead it is required that IL compilers effectively perform the 'this' transformation outlined above at compile time, depending on the type of `ptr` and the method being called.</span></span> <span data-ttu-id="68c9f-1065">Jednak gdy `ptr` jest typ ogólny, który jest nieznany w czasie kompilacji nie jest możliwe zapewnienie tej transformacji, w czasie kompilacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1065">However, when `ptr` is a generic type that is unknown at compile time, it is not possible to make this transformation at compile time.</span></span>  
  
 <span data-ttu-id="68c9f-1066">`constrained` Opcode umożliwia kompilatory IL do wywoływania funkcji wirtualnej w jednolity sposób niezależny od czy `ptr` jest typem wartości lub typem referencyjnym.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1066">The `constrained` opcode allows IL compilers to make a call to a virtual function in a uniform way independent of whether `ptr` is a value type or a reference type.</span></span> <span data-ttu-id="68c9f-1067">Mimo że jest on przeznaczony do przypadku gdzie `thisType` jest zmienną typu rodzajowego `constrained` prefiks również działa w przypadku nierodzajowymi typami i mogą zmniejszyć złożoność generowania wywołania wirtualnej w językach, które ukryć różnicy między typami wartości i Typy odwołań.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1067">Although it is intended for the case where `thisType` is a generic type variable, the `constrained` prefix also works for nongeneric types and can reduce the complexity of generating virtual calls in languages that hide the distinction between value types and reference types.</span></span>  
  
 <span data-ttu-id="68c9f-1068">Za pomocą `constrained` prefiks pozwala uniknąć potencjalne problemy z wersjonowaniem z typami wartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1068">Using the `constrained` prefix also avoids potential versioning problems with value types.</span></span> <span data-ttu-id="68c9f-1069">Jeśli `constrained` prefiks nie jest używany, IL różnych musi być emitowane w zależności od tego, czy typ wartości zastępuje metodę System.Object.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1069">If the `constrained` prefix is not used, different IL must be emitted depending on whether or not a value type overrides a method of System.Object.</span></span> <span data-ttu-id="68c9f-1070">Na przykład, jeśli typ wartości `V` zastępuje metodę Object.ToString() `call` `V.ToString()` instrukcji jest emitowane; Jeśli nie, `box` instrukcji i `callvirt` `Object.ToString()` są emitowane instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1070">For example, if a value type `V` overrides the Object.ToString() method, a `call` `V.ToString()` instruction is emitted; if it does not, a `box` instruction and a `callvirt` `Object.ToString()` instruction are emitted.</span></span> <span data-ttu-id="68c9f-1071">Przechowywanie wersji może wystąpić problem w pierwszym przypadku, jeśli zastąpienie później zostanie usunięty, a w drugim przypadku jeśli zastąpienie później zostanie dodany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1071">A versioning problem can arise in the former case if the override is later removed, and in the latter case if an override is later added.</span></span>  
  
 <span data-ttu-id="68c9f-1072">`constrained` Prefiks można również dla wywołania metody interfejsu dla typów wartości, ponieważ metody typu wartości implementacja metody interfejsu można zmienić za pomocą `MethodImpl`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1072">The `constrained` prefix can also be used for invocation of interface methods on value types, because the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="68c9f-1073">Jeśli `constrained` prefiks nie jest używany, kompilator jest zmuszony do wyboru, którego wartość metody typu, aby powiązać w czasie kompilacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1073">If the `constrained` prefix is not used, the compiler is forced to choose which of the value type's methods to bind to at compile time.</span></span> <span data-ttu-id="68c9f-1074">Za pomocą `constrained` prefiks umożliwia MSIL powiązać metodę, która implementuje metodę interfejsu, w czasie wykonywania, a nie w czasie kompilacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1074">Using the `constrained` prefix allows the MSIL to bind to the method that implements the interface method at run time, rather than at compile time.</span></span>  
  
 <span data-ttu-id="68c9f-1075">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `constrained` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1075">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `constrained` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1076">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1076">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1077">Konwertuje wartość na szczycie stosu oceny do <see langword="native int" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1077">Converts the value on top of the evaluation stack to <see langword="native int" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1078">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1078">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1079">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1079">Format</span></span>|<span data-ttu-id="68c9f-1080">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1080">Assembly Format</span></span>|<span data-ttu-id="68c9f-1081">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1081">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1082">D3</span><span class="sxs-lookup"><span data-stu-id="68c9f-1082">D3</span></span>|<span data-ttu-id="68c9f-1083">conv.i</span><span class="sxs-lookup"><span data-stu-id="68c9f-1083">conv.i</span></span>|<span data-ttu-id="68c9f-1084">Konwertuj na `native int`, wypychania `native int` na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1084">Convert to `native int`, pushing `native int` on stack.</span></span>|  
  
 <span data-ttu-id="68c9f-1085">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1085">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1086">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1086">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1087">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1087">is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="68c9f-1088">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1088">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1089">`conv.i` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i pozostaw, których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1089">The `conv.i` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1090">Wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.i` lub `conv.u` jest używana, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1090">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="68c9f-1091">Wartości zmiennoprzecinkowe są konwertowane na `F` typu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1091">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="68c9f-1092">Konwersja z liczby zmiennoprzecinkowe do całkowitych obcina liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1092">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="68c9f-1093">Podczas konwersji z `float64` do `float32`, dokładności, mogą zostać utracone.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1093">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="68c9f-1094">Jeśli `value` jest zbyt duży, aby zmieścić ją w `float32 (F)`, nieskończoności dodatniej (Jeśli `value` jest dodatni) lub minus nieskończoność (Jeśli `value` ma wartość ujemną) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1094">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="68c9f-1095">Jeśli występuje przepełnienie konwersji typu jeden argument do innej, najbardziej znaczące bity są obcinane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1095">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="68c9f-1096">Jeśli wynik jest mniejszy niż `int32`, wartość jest rozszerzona o znak do wypełnienia gniazda.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1096">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="68c9f-1097">Jeśli występuje przepełnienie konwersja typu zmiennoprzecinkowego na liczbę całkowitą, wartość zwracana jest nieokreślona.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1097">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="68c9f-1098">Nigdy nie są zgłaszane nie wyjątki, korzystając z tego pola.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1098">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="68c9f-1099">Zobacz <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> i <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> równoważne instrukcje, które spowoduje zgłoszenie wyjątku, gdy typ wyniku nie może poprawnie reprezentować wartość wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1099">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="68c9f-1100">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.i` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1100">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1101">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1101">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1102">Konwertuje wartość na szczycie stosu oceny do <see langword="int8" />, następnie rozszerza (okienka) do <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1102">Converts the value on top of the evaluation stack to <see langword="int8" />, then extends (pads) it to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1103">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1103">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1104">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1104">Format</span></span>|<span data-ttu-id="68c9f-1105">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1105">Assembly Format</span></span>|<span data-ttu-id="68c9f-1106">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1106">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1107">67</span><span class="sxs-lookup"><span data-stu-id="68c9f-1107">67</span></span>|<span data-ttu-id="68c9f-1108">conv.i1</span><span class="sxs-lookup"><span data-stu-id="68c9f-1108">conv.i1</span></span>|<span data-ttu-id="68c9f-1109">Konwertuj na `int8`, wypychania `int32` na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1109">Convert to `int8`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="68c9f-1110">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1110">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1111">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1111">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1112">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1112">is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="68c9f-1113">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1113">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1114">`conv.i1` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i pozostaw, których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1114">The `conv.i1` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1115">Wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.i` lub `conv.u` jest używana, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1115">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="68c9f-1116">Wartości zmiennoprzecinkowe są konwertowane na `F` typu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1116">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="68c9f-1117">Konwersja z liczby zmiennoprzecinkowe do całkowitych obcina liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1117">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="68c9f-1118">Podczas konwersji z `float64` do `float32`, dokładności, mogą zostać utracone.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1118">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="68c9f-1119">Jeśli `value` jest zbyt duży, aby zmieścić ją w `float32 (F)`, nieskończoności dodatniej (Jeśli `value` jest dodatni) lub minus nieskończoność (Jeśli `value` ma wartość ujemną) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1119">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="68c9f-1120">Jeśli występuje przepełnienie konwersji typu jeden argument do innej, najbardziej znaczące bity są obcinane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1120">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="68c9f-1121">Jeśli wynik jest mniejszy niż `int32`, wartość jest rozszerzona o znak do wypełnienia gniazda.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1121">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="68c9f-1122">Jeśli występuje przepełnienie konwersja typu zmiennoprzecinkowego na liczbę całkowitą, wartość zwracana jest nieokreślona.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1122">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="68c9f-1123">Nigdy nie są zgłaszane nie wyjątki, korzystając z tego pola.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1123">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="68c9f-1124">Zobacz <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> i <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> równoważne instrukcje, które spowoduje zgłoszenie wyjątku, gdy typ wyniku nie może poprawnie reprezentować wartość wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1124">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="68c9f-1125">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.i1` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1125">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i1` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1126">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1126">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1127">Konwertuje wartość na szczycie stosu oceny do <see langword="int16" />, następnie rozszerza (okienka) do <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1127">Converts the value on top of the evaluation stack to <see langword="int16" />, then extends (pads) it to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1128">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1128">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1129">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1129">Format</span></span>|<span data-ttu-id="68c9f-1130">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1130">Assembly Format</span></span>|<span data-ttu-id="68c9f-1131">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1131">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1132">68</span><span class="sxs-lookup"><span data-stu-id="68c9f-1132">68</span></span>|<span data-ttu-id="68c9f-1133">conv.i2</span><span class="sxs-lookup"><span data-stu-id="68c9f-1133">conv.i2</span></span>|<span data-ttu-id="68c9f-1134">Konwertuj na `int16`, wypychania `int32` na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1134">Convert to `int16`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="68c9f-1135">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1135">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1136">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1136">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1137">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1137">is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="68c9f-1138">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1138">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1139">`conv.i2` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i pozostaw, których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1139">The `conv.i2` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1140">Wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.i` lub `conv.u` jest używana, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1140">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="68c9f-1141">Wartości zmiennoprzecinkowe są konwertowane na `F` typu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1141">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="68c9f-1142">Konwersja z liczby zmiennoprzecinkowe do całkowitych obcina liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1142">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="68c9f-1143">Podczas konwersji z `float64` do `float32`, dokładności, mogą zostać utracone.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1143">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="68c9f-1144">Jeśli `value` jest zbyt duży, aby zmieścić ją w `float32 (F)`, nieskończoności dodatniej (Jeśli `value` jest dodatni) lub minus nieskończoność (Jeśli `value` ma wartość ujemną) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1144">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="68c9f-1145">Jeśli występuje przepełnienie konwersji typu jeden argument do innej, najbardziej znaczące bity są obcinane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1145">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="68c9f-1146">Jeśli wynik jest mniejszy niż `int32`, wartość jest rozszerzona o znak do wypełnienia gniazda.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1146">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="68c9f-1147">Jeśli występuje przepełnienie konwersja typu zmiennoprzecinkowego na liczbę całkowitą, wartość zwracana jest nieokreślona.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1147">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="68c9f-1148">Nigdy nie są zgłaszane nie wyjątki, korzystając z tego pola.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1148">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="68c9f-1149">Zobacz <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> i <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> równoważne instrukcje, które spowoduje zgłoszenie wyjątku, gdy typ wyniku nie może poprawnie reprezentować wartość wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1149">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="68c9f-1150">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.i2` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1150">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i2` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1151">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1151">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1152">Konwertuje wartość na szczycie stosu oceny do <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1152">Converts the value on top of the evaluation stack to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1153">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1153">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1154">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1154">Format</span></span>|<span data-ttu-id="68c9f-1155">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1155">Assembly Format</span></span>|<span data-ttu-id="68c9f-1156">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1156">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1157">69</span><span class="sxs-lookup"><span data-stu-id="68c9f-1157">69</span></span>|<span data-ttu-id="68c9f-1158">conv.i4</span><span class="sxs-lookup"><span data-stu-id="68c9f-1158">conv.i4</span></span>|<span data-ttu-id="68c9f-1159">Konwertuj na `int32`, wypychania `int32` na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1159">Convert to `int32`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="68c9f-1160">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1160">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1161">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1161">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1162">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1162">is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="68c9f-1163">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1163">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1164">`conv.i4` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i pozostaw, których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1164">The `conv.i4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1165">Wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.i` lub `conv.u` jest używana, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1165">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="68c9f-1166">Wartości zmiennoprzecinkowe są konwertowane na `F` typu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1166">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="68c9f-1167">Konwersja z liczby zmiennoprzecinkowe do całkowitych obcina liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1167">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="68c9f-1168">Podczas konwersji z `float64` do `float32`, dokładności, mogą zostać utracone.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1168">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="68c9f-1169">Jeśli `value` jest zbyt duży, aby zmieścić ją w `float32 (F)`, nieskończoności dodatniej (Jeśli `value` jest dodatni) lub minus nieskończoność (Jeśli `value` ma wartość ujemną) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1169">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="68c9f-1170">Jeśli występuje przepełnienie konwersji typu jeden argument do innej, najbardziej znaczące bity są obcinane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1170">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="68c9f-1171">Jeśli wynik jest mniejszy niż `int32`, wartość jest rozszerzona o znak do wypełnienia gniazda.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1171">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="68c9f-1172">Jeśli występuje przepełnienie konwersja typu zmiennoprzecinkowego na liczbę całkowitą, wartość zwracana jest nieokreślona.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1172">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="68c9f-1173">Nigdy nie są zgłaszane nie wyjątki, korzystając z tego pola.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1173">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="68c9f-1174">Zobacz <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> i <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> równoważne instrukcje, które spowoduje zgłoszenie wyjątku, gdy typ wyniku nie może poprawnie reprezentować wartość wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1174">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="68c9f-1175">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.i4` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1175">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i4` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1176">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1176">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1177">Konwertuje wartość na szczycie stosu oceny do <see langword="int64" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1177">Converts the value on top of the evaluation stack to <see langword="int64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1178">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1178">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1179">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1179">Format</span></span>|<span data-ttu-id="68c9f-1180">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1180">Assembly Format</span></span>|<span data-ttu-id="68c9f-1181">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1181">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1182">6A</span><span class="sxs-lookup"><span data-stu-id="68c9f-1182">6A</span></span>|<span data-ttu-id="68c9f-1183">conv.I8</span><span class="sxs-lookup"><span data-stu-id="68c9f-1183">conv.i8</span></span>|<span data-ttu-id="68c9f-1184">Konwertuj na `int64`, wypychania `int64` na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1184">Convert to `int64`, pushing `int64` on stack.</span></span>|  
  
 <span data-ttu-id="68c9f-1185">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1185">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1186">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1186">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1187">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1187">is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="68c9f-1188">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1188">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1189">`conv.i8` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i pozostaw, których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1189">The `conv.i8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1190">Wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.i` lub `conv.u` jest używana, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1190">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="68c9f-1191">Wartości zmiennoprzecinkowe są konwertowane na `F` typu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1191">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="68c9f-1192">Konwersja z liczby zmiennoprzecinkowe do całkowitych obcina liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1192">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="68c9f-1193">Podczas konwersji z `float64` do `float32`, dokładności, mogą zostać utracone.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1193">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="68c9f-1194">Jeśli `value` jest zbyt duży, aby zmieścić ją w `float32 (F)`, nieskończoności dodatniej (Jeśli `value` jest dodatni) lub minus nieskończoność (Jeśli `value` ma wartość ujemną) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1194">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="68c9f-1195">Jeśli występuje przepełnienie konwersji typu jeden argument do innej, najbardziej znaczące bity są obcinane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1195">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="68c9f-1196">Jeśli wynik jest mniejszy niż `int32`, wartość jest rozszerzona o znak do wypełnienia gniazda.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1196">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="68c9f-1197">Jeśli występuje przepełnienie konwersja typu zmiennoprzecinkowego na liczbę całkowitą, wartość zwracana jest nieokreślona.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1197">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="68c9f-1198">Nigdy nie są zgłaszane nie wyjątki, korzystając z tego pola.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1198">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="68c9f-1199">Zobacz <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> i <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> równoważne instrukcje, które spowoduje zgłoszenie wyjątku, gdy typ wyniku nie może poprawnie reprezentować wartość wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1199">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="68c9f-1200">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.i8` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1200">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i8` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1201">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1201">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1202">Konwertuje wartość ze znakiem na szczycie stosu oceny podpisane <see langword="native int" />, zgłaszanie <see cref="T:System.OverflowException" /> przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1202">Converts the signed value on top of the evaluation stack to signed <see langword="native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1203">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1203">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1204">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1204">Format</span></span>|<span data-ttu-id="68c9f-1205">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1205">Assembly Format</span></span>|<span data-ttu-id="68c9f-1206">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1206">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1207">D4</span><span class="sxs-lookup"><span data-stu-id="68c9f-1207">D4</span></span>|<span data-ttu-id="68c9f-1208">conv.ovf.i</span><span class="sxs-lookup"><span data-stu-id="68c9f-1208">conv.ovf.i</span></span>|<span data-ttu-id="68c9f-1209">Konwertuj na `native int` (na stosie jako `native int`) i zgłosić wyjątek przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1209">Convert to a `native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="68c9f-1210">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1210">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1211">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1211">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1212">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1212">is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="68c9f-1213">Jeśli występuje przepełnienie, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1213">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="68c9f-1214">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1214">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1215">`conv.ovf.i` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i miejsc, w których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1215">The `conv.ovf.i` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1216">Jeśli wartość jest zbyt duży lub za mały, aby mogły być reprezentowane przez typ docelowy, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1216">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="68c9f-1217">Konwersje z liczby zmiennoprzecinkowe do całkowitych obciąć liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1217">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="68c9f-1218">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1218">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-1219">jest generowany, jeśli wynik nie może być reprezentowana w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1219">is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="68c9f-1220">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.ovf.i` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1220">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1221">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1221">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1222">Konwertuje wartości bez znaku na szczycie stosu oceny podpisane <see langword="native int" />, zgłaszanie <see cref="T:System.OverflowException" /> przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1222">Converts the unsigned value on top of the evaluation stack to signed <see langword="native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1223">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1223">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1224">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1224">Format</span></span>|<span data-ttu-id="68c9f-1225">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1225">Assembly Format</span></span>|<span data-ttu-id="68c9f-1226">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1226">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1227">8A</span><span class="sxs-lookup"><span data-stu-id="68c9f-1227">8A</span></span>|<span data-ttu-id="68c9f-1228">conv.ovf.i.un</span><span class="sxs-lookup"><span data-stu-id="68c9f-1228">conv.ovf.i.un</span></span>|<span data-ttu-id="68c9f-1229">Konwertuje wartość niepodpisane `native int` (na stosie jako `native int`) i zgłosić wyjątek przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1229">Converts an unsigned value to a `native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="68c9f-1230">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1230">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1231">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1231">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1232">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1232">is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="68c9f-1233">Jeśli występuje przepełnienie, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1233">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="68c9f-1234">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1234">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1235">`conv.ovf.i.un` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i miejsc, w których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1235">The `conv.ovf.i.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1236">Jeśli wartość jest zbyt duży lub za mały, aby mogły być reprezentowane przez typ docelowy, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1236">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="68c9f-1237">Konwersje z liczby zmiennoprzecinkowe do całkowitych obciąć liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1237">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="68c9f-1238">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1238">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-1239">jest generowany, jeśli wynik nie może być reprezentowana w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1239">is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="68c9f-1240">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.ovf.i.un` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1240">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i.un` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1241">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1241">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1242">Konwertuje wartość ze znakiem na szczycie stosu oceny podpisane <see langword="int8" /> i rozszerza je do <see langword="int32" />, zgłaszanie <see cref="T:System.OverflowException" /> przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1242">Converts the signed value on top of the evaluation stack to signed <see langword="int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1243">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1243">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1244">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1244">Format</span></span>|<span data-ttu-id="68c9f-1245">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1245">Assembly Format</span></span>|<span data-ttu-id="68c9f-1246">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1246">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1247">B3</span><span class="sxs-lookup"><span data-stu-id="68c9f-1247">B3</span></span>|<span data-ttu-id="68c9f-1248">conv.ovf.i1</span><span class="sxs-lookup"><span data-stu-id="68c9f-1248">conv.ovf.i1</span></span>|<span data-ttu-id="68c9f-1249">Konwertuj na `int8` (na stosie jako `int32`) i zgłosić wyjątek przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1249">Convert to an `int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="68c9f-1250">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1250">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1251">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1251">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1252">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1252">is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="68c9f-1253">Jeśli występuje przepełnienie, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1253">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="68c9f-1254">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1254">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1255">`conv.ovf.i1` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i miejsc, w których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1255">The `conv.ovf.i1` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1256">Jeśli wartość jest zbyt duży lub za mały, aby mogły być reprezentowane przez typ docelowy, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1256">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="68c9f-1257">Konwersje z liczby zmiennoprzecinkowe do całkowitych obciąć liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1257">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="68c9f-1258">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1258">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-1259">jest generowany, jeśli wynik nie może być reprezentowana w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1259">is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="68c9f-1260">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.ovf.i1` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1260">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i1` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1261">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1261">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I1_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I1_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I1_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I1_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I1_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1262">Konwertuje wartości bez znaku na szczycie stosu oceny podpisane <see langword="int8" /> i rozszerza je do <see langword="int32" />, zgłaszanie <see cref="T:System.OverflowException" /> przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1262">Converts the unsigned value on top of the evaluation stack to signed <see langword="int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1263">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1263">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1264">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1264">Format</span></span>|<span data-ttu-id="68c9f-1265">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1265">Assembly Format</span></span>|<span data-ttu-id="68c9f-1266">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1266">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1267">82</span><span class="sxs-lookup"><span data-stu-id="68c9f-1267">82</span></span>|<span data-ttu-id="68c9f-1268">conv.ovf.i1.un</span><span class="sxs-lookup"><span data-stu-id="68c9f-1268">conv.ovf.i1.un</span></span>|<span data-ttu-id="68c9f-1269">Konwertuje wartość niepodpisane `int8` (na stosie jako `int32`) i zgłosić wyjątek przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1269">Converts an unsigned value to an `int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="68c9f-1270">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1270">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1271">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1271">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1272">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1272">is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="68c9f-1273">Jeśli występuje przepełnienie, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1273">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="68c9f-1274">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1274">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1275">`conv.ovf.i1.un` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i miejsc, w których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1275">The `conv.ovf.i1.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1276">Jeśli wartość jest zbyt duży lub za mały, aby mogły być reprezentowane przez typ docelowy, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1276">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="68c9f-1277">Konwersje z liczby zmiennoprzecinkowe do całkowitych obciąć liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1277">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="68c9f-1278">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1278">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-1279">jest generowany, jeśli wynik nie może być reprezentowana w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1279">is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="68c9f-1280">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.ovf.i1.un` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1280">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i1.un` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1281">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1281">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1282">Konwertuje wartość ze znakiem na szczycie stosu oceny podpisane <see langword="int16" /> i rozszerzania jej do <see langword="int32" />, zgłaszanie <see cref="T:System.OverflowException" /> przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1282">Converts the signed value on top of the evaluation stack to signed <see langword="int16" /> and extending it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1283">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1283">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1284">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1284">Format</span></span>|<span data-ttu-id="68c9f-1285">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1285">Assembly Format</span></span>|<span data-ttu-id="68c9f-1286">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1286">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1287">B5</span><span class="sxs-lookup"><span data-stu-id="68c9f-1287">B5</span></span>|<span data-ttu-id="68c9f-1288">conv.ovf.i2</span><span class="sxs-lookup"><span data-stu-id="68c9f-1288">conv.ovf.i2</span></span>|<span data-ttu-id="68c9f-1289">Konwertuj na `int16` (na stosie jako `int32`) i zgłosić wyjątek przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1289">Convert to an `int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="68c9f-1290">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1290">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1291">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1291">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1292">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1292">is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="68c9f-1293">Jeśli występuje przepełnienie, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1293">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="68c9f-1294">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1294">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1295">`conv.ovf.i2` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i miejsc, w których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1295">The `conv.ovf.i2` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1296">Jeśli wartość jest zbyt duży lub za mały, aby mogły być reprezentowane przez typ docelowy, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1296">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="68c9f-1297">Konwersje z liczby zmiennoprzecinkowe do całkowitych obciąć liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1297">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="68c9f-1298">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1298">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-1299">jest generowany, jeśli wynik nie może być reprezentowana w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1299">is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="68c9f-1300">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.ovf.i2` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1300">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i2` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1301">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1301">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I2_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I2_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I2_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I2_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I2_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1302">Konwertuje wartości bez znaku na szczycie stosu oceny podpisane <see langword="int16" /> i rozszerza je do <see langword="int32" />, zgłaszanie <see cref="T:System.OverflowException" /> przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1302">Converts the unsigned value on top of the evaluation stack to signed <see langword="int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1303">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1303">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1304">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1304">Format</span></span>|<span data-ttu-id="68c9f-1305">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1305">Assembly Format</span></span>|<span data-ttu-id="68c9f-1306">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1306">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1307">83</span><span class="sxs-lookup"><span data-stu-id="68c9f-1307">83</span></span>|<span data-ttu-id="68c9f-1308">conv.ovf.i2.un</span><span class="sxs-lookup"><span data-stu-id="68c9f-1308">conv.ovf.i2.un</span></span>|<span data-ttu-id="68c9f-1309">Konwertuje wartość niepodpisane `int16` (na stosie jako `int32`) i zgłosić wyjątek przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1309">Converts an unsigned value to an `int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="68c9f-1310">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1310">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1311">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1311">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1312">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1312">is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="68c9f-1313">Jeśli występuje przepełnienie, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1313">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="68c9f-1314">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1314">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1315">`conv.ovf.i2.un` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i miejsc, w których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1315">The `conv.ovf.i2.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1316">Jeśli wartość jest zbyt duży lub za mały, aby mogły być reprezentowane przez typ docelowy, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1316">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="68c9f-1317">Konwersje z liczby zmiennoprzecinkowe do całkowitych obciąć liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1317">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="68c9f-1318">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1318">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-1319">jest generowany, jeśli wynik nie może być reprezentowana w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1319">is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="68c9f-1320">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.ovf.i2.un` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1320">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i2.un` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1321">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1321">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1322">Konwertuje wartość ze znakiem na szczycie stosu oceny podpisane <see langword="int32" />, zgłaszanie <see cref="T:System.OverflowException" /> przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1322">Converts the signed value on top of the evaluation stack to signed <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1323">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1323">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1324">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1324">Format</span></span>|<span data-ttu-id="68c9f-1325">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1325">Assembly Format</span></span>|<span data-ttu-id="68c9f-1326">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1326">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1327">B7</span><span class="sxs-lookup"><span data-stu-id="68c9f-1327">B7</span></span>|<span data-ttu-id="68c9f-1328">conv.ovf.i4</span><span class="sxs-lookup"><span data-stu-id="68c9f-1328">conv.ovf.i4</span></span>|<span data-ttu-id="68c9f-1329">Konwertuj na `int32` (na stosie jako `int32`) i zgłosić wyjątek przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1329">Convert to an `int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="68c9f-1330">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1330">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1331">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1331">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1332">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1332">is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="68c9f-1333">Jeśli występuje przepełnienie, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1333">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="68c9f-1334">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1334">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1335">`conv.ovf.i4` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i miejsc, w których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1335">The `conv.ovf.i4` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1336">Jeśli wartość jest zbyt duży lub za mały, aby mogły być reprezentowane przez typ docelowy, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1336">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="68c9f-1337">Konwersje z liczby zmiennoprzecinkowe do całkowitych obciąć liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1337">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="68c9f-1338">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1338">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-1339">jest generowany, jeśli wynik nie może być reprezentowana w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1339">is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="68c9f-1340">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.ovf.i4` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1340">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i4` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1341">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1341">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I4_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I4_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I4_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I4_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I4_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1342">Konwertuje wartości bez znaku na szczycie stosu oceny podpisane <see langword="int32" />, zgłaszanie <see cref="T:System.OverflowException" /> przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1342">Converts the unsigned value on top of the evaluation stack to signed <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1343">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1343">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1344">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1344">Format</span></span>|<span data-ttu-id="68c9f-1345">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1345">Assembly Format</span></span>|<span data-ttu-id="68c9f-1346">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1346">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1347">84</span><span class="sxs-lookup"><span data-stu-id="68c9f-1347">84</span></span>|<span data-ttu-id="68c9f-1348">conv.ovf.i4.un</span><span class="sxs-lookup"><span data-stu-id="68c9f-1348">conv.ovf.i4.un</span></span>|<span data-ttu-id="68c9f-1349">Konwertuje wartość niepodpisane `int32` (na stosie jako `int32`) i zgłosić wyjątek przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1349">Converts an unsigned value to an `int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="68c9f-1350">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1350">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1351">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1351">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1352">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1352">is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="68c9f-1353">Jeśli występuje przepełnienie, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1353">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="68c9f-1354">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1354">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1355">`conv.ovf.i4.un` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i miejsc, w których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1355">The `conv.ovf.i4.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1356">Jeśli wartość jest zbyt duży lub za mały, aby mogły być reprezentowane przez typ docelowy, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1356">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="68c9f-1357">Konwersje z liczby zmiennoprzecinkowe do całkowitych obciąć liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1357">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="68c9f-1358">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1358">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-1359">jest generowany, jeśli wynik nie może być reprezentowana w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1359">is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="68c9f-1360">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.ovf.i4.un` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1360">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i4.un` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1361">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1361">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1362">Konwertuje wartość ze znakiem na szczycie stosu oceny podpisane <see langword="int64" />, zgłaszanie <see cref="T:System.OverflowException" /> przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1362">Converts the signed value on top of the evaluation stack to signed <see langword="int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1363">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1363">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1364">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1364">Format</span></span>|<span data-ttu-id="68c9f-1365">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1365">Assembly Format</span></span>|<span data-ttu-id="68c9f-1366">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1366">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1367">B9</span><span class="sxs-lookup"><span data-stu-id="68c9f-1367">B9</span></span>|<span data-ttu-id="68c9f-1368">conv.ovf.i8</span><span class="sxs-lookup"><span data-stu-id="68c9f-1368">conv.ovf.i8</span></span>|<span data-ttu-id="68c9f-1369">Konwertuj na `int64` (na stosie jako `int64`) i zgłosić wyjątek przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1369">Convert to an `int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="68c9f-1370">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1370">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1371">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1371">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1372">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1372">is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="68c9f-1373">Jeśli występuje przepełnienie, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1373">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="68c9f-1374">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1374">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1375">`conv.ovf.i8` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i miejsc, w których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1375">The `conv.ovf.i8` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1376">Jeśli wartość jest zbyt duży lub za mały, aby mogły być reprezentowane przez typ docelowy, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1376">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="68c9f-1377">Konwersje z liczby zmiennoprzecinkowe do całkowitych obciąć liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1377">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="68c9f-1378">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1378">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-1379">jest generowany, jeśli wynik nie może być reprezentowana w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1379">is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="68c9f-1380">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.ovf.i8` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1380">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i8` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1381">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1381">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I8_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I8_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I8_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I8_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I8_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1382">Konwertuje wartości bez znaku na szczycie stosu oceny podpisane <see langword="int64" />, zgłaszanie <see cref="T:System.OverflowException" /> przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1382">Converts the unsigned value on top of the evaluation stack to signed <see langword="int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1383">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1383">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1384">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1384">Format</span></span>|<span data-ttu-id="68c9f-1385">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1385">Assembly Format</span></span>|<span data-ttu-id="68c9f-1386">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1386">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1387">85</span><span class="sxs-lookup"><span data-stu-id="68c9f-1387">85</span></span>|<span data-ttu-id="68c9f-1388">conv.ovf.i8.un</span><span class="sxs-lookup"><span data-stu-id="68c9f-1388">conv.ovf.i8.un</span></span>|<span data-ttu-id="68c9f-1389">Konwertuje wartość niepodpisane `int64` (na stosie jako `int64`) i zgłosić wyjątek przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1389">Converts an unsigned value to an `int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="68c9f-1390">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1390">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1391">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1391">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1392">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1392">is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="68c9f-1393">Jeśli występuje przepełnienie, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1393">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="68c9f-1394">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1394">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1395">`conv.ovf.i8.un` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i miejsc, w których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1395">The `conv.ovf.i8.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1396">Jeśli wartość jest zbyt duży lub za mały, aby mogły być reprezentowane przez typ docelowy, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1396">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="68c9f-1397">Konwersje z liczby zmiennoprzecinkowe do całkowitych obciąć liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1397">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="68c9f-1398">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1398">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-1399">jest generowany, jeśli wynik nie może być reprezentowana w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1399">is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="68c9f-1400">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.ovf.i8.un` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1400">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i8.un` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1401">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1401">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1402">Konwertuje wartość ze znakiem na szczycie stosu oceny do <see langword="unsigned native int" />, zgłaszanie <see cref="T:System.OverflowException" /> przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1402">Converts the signed value on top of the evaluation stack to <see langword="unsigned native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1403">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1403">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1404">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1404">Format</span></span>|<span data-ttu-id="68c9f-1405">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1405">Assembly Format</span></span>|<span data-ttu-id="68c9f-1406">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1406">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1407">D5</span><span class="sxs-lookup"><span data-stu-id="68c9f-1407">D5</span></span>|<span data-ttu-id="68c9f-1408">conv.ovf.u</span><span class="sxs-lookup"><span data-stu-id="68c9f-1408">conv.ovf.u</span></span>|<span data-ttu-id="68c9f-1409">Konwertuj na `unsigned native int` (na stosie jako `native int`) i zgłosić wyjątek przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1409">Convert to an `unsigned native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="68c9f-1410">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1410">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1411">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1411">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1412">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1412">is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="68c9f-1413">Jeśli występuje przepełnienie, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1413">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="68c9f-1414">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1414">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1415">`conv.ovf.u` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i miejsc, w których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1415">The `conv.ovf.u` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1416">Jeśli wartość jest zbyt duży lub za mały, aby mogły być reprezentowane przez typ docelowy, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1416">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="68c9f-1417">Konwersje z liczby zmiennoprzecinkowe do całkowitych obciąć liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1417">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="68c9f-1418">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1418">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-1419">jest generowany, jeśli wynik nie może być reprezentowana w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1419">is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="68c9f-1420">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.ovf.u` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1420">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1421">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1421">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1422">Konwertuje wartości bez znaku na szczycie stosu oceny do <see langword="unsigned native int" />, zgłaszanie <see cref="T:System.OverflowException" /> przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1422">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1423">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1423">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1424">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1424">Format</span></span>|<span data-ttu-id="68c9f-1425">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1425">Assembly Format</span></span>|<span data-ttu-id="68c9f-1426">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1426">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1427">8B</span><span class="sxs-lookup"><span data-stu-id="68c9f-1427">8B</span></span>|<span data-ttu-id="68c9f-1428">conv.ovf.u.un</span><span class="sxs-lookup"><span data-stu-id="68c9f-1428">conv.ovf.u.un</span></span>|<span data-ttu-id="68c9f-1429">Konwertuje un niepodpisane wartość `unsigned native int` (na stosie jako `native int`) i zgłosić wyjątek przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1429">Converts un unsigned value to an `unsigned native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="68c9f-1430">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1430">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1431">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1431">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1432">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1432">is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="68c9f-1433">Jeśli występuje przepełnienie, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1433">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="68c9f-1434">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1434">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1435">`conv.ovf.u.un` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i miejsc, w których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1435">The `conv.ovf.u.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1436">Jeśli wartość jest zbyt duży lub za mały, aby mogły być reprezentowane przez typ docelowy, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1436">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="68c9f-1437">Konwersje z liczby zmiennoprzecinkowe do całkowitych obciąć liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1437">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="68c9f-1438">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1438">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-1439">jest generowany, jeśli wynik nie może być reprezentowana w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1439">is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="68c9f-1440">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.uvf.u.un` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1440">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.uvf.u.un` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1441">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1441">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1442">Konwertuje wartość ze znakiem na szczycie stosu oceny do <see langword="unsigned int8" /> i rozszerza je do <see langword="int32" />, zgłaszanie <see cref="T:System.OverflowException" /> przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1442">Converts the signed value on top of the evaluation stack to <see langword="unsigned int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1443">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1443">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1444">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1444">Format</span></span>|<span data-ttu-id="68c9f-1445">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1445">Assembly Format</span></span>|<span data-ttu-id="68c9f-1446">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1446">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1447">B4</span><span class="sxs-lookup"><span data-stu-id="68c9f-1447">B4</span></span>|<span data-ttu-id="68c9f-1448">conv.ovf.u1</span><span class="sxs-lookup"><span data-stu-id="68c9f-1448">conv.ovf.u1</span></span>|<span data-ttu-id="68c9f-1449">Konwertuj na `unsigned int8` (na stosie jako `int32`) i zgłosić wyjątek przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1449">Convert to an `unsigned int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="68c9f-1450">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1450">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1451">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1451">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1452">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1452">is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="68c9f-1453">Jeśli występuje przepełnienie, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1453">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="68c9f-1454">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1454">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1455">`conv.ovf.u1` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i miejsc, w których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1455">The `conv.ovf.u1` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1456">Jeśli wartość jest zbyt duży lub za mały, aby mogły być reprezentowane przez typ docelowy, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1456">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="68c9f-1457">Konwersje z liczby zmiennoprzecinkowe do całkowitych obciąć liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1457">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="68c9f-1458">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1458">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-1459">jest generowany, jeśli wynik nie może być reprezentowana w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1459">is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="68c9f-1460">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.ovf.u1` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1460">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u1` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1461">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1461">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U1_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U1_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U1_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U1_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U1_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1462">Konwertuje wartości bez znaku na szczycie stosu oceny do <see langword="unsigned int8" /> i rozszerza je do <see langword="int32" />, zgłaszanie <see cref="T:System.OverflowException" /> przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1462">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1463">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1463">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1464">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1464">Format</span></span>|<span data-ttu-id="68c9f-1465">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1465">Assembly Format</span></span>|<span data-ttu-id="68c9f-1466">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1466">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1467">86</span><span class="sxs-lookup"><span data-stu-id="68c9f-1467">86</span></span>|<span data-ttu-id="68c9f-1468">conv.ovf.u1.un</span><span class="sxs-lookup"><span data-stu-id="68c9f-1468">conv.ovf.u1.un</span></span>|<span data-ttu-id="68c9f-1469">Konwertuje wartość niepodpisane `unsigned int8` (na stosie jako `int32`) i zgłosić wyjątek przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1469">Converts an unsigned value to an `unsigned int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="68c9f-1470">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1470">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1471">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1471">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1472">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1472">is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="68c9f-1473">Jeśli występuje przepełnienie, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1473">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="68c9f-1474">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1474">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1475">`conv.ovf.u1.un` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i miejsc, w których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1475">The `conv.ovf.u1.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1476">Jeśli wartość jest zbyt duży lub za mały, aby mogły być reprezentowane przez typ docelowy, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1476">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="68c9f-1477">Konwersje z liczby zmiennoprzecinkowe do całkowitych obciąć liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1477">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="68c9f-1478">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1478">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-1479">jest generowany, jeśli wynik nie może być reprezentowana w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1479">is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="68c9f-1480">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.ovf.u1.un` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1480">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u1.un` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1481">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1481">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1482">Konwertuje wartość ze znakiem na szczycie stosu oceny do <see langword="unsigned int16" /> i rozszerza je do <see langword="int32" />, zgłaszanie <see cref="T:System.OverflowException" /> przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1482">Converts the signed value on top of the evaluation stack to <see langword="unsigned int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1483">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1483">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1484">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1484">Format</span></span>|<span data-ttu-id="68c9f-1485">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1485">Assembly Format</span></span>|<span data-ttu-id="68c9f-1486">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1486">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1487">B6</span><span class="sxs-lookup"><span data-stu-id="68c9f-1487">B6</span></span>|<span data-ttu-id="68c9f-1488">conv.ovf.u2</span><span class="sxs-lookup"><span data-stu-id="68c9f-1488">conv.ovf.u2</span></span>|<span data-ttu-id="68c9f-1489">Konwertuj na `unsigned int16` (na stosie jako `int32`) i zgłosić wyjątek przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1489">Convert to an `unsigned int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="68c9f-1490">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1490">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1491">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1491">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1492">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1492">is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="68c9f-1493">Jeśli występuje przepełnienie, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1493">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="68c9f-1494">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1494">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1495">`conv.ovf.u2` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i miejsc, w których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1495">The `conv.ovf.u2` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1496">Jeśli wartość jest zbyt duży lub za mały, aby mogły być reprezentowane przez typ docelowy, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1496">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="68c9f-1497">Konwersje z liczby zmiennoprzecinkowe do całkowitych obciąć liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1497">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="68c9f-1498">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1498">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-1499">jest generowany, jeśli wynik nie może być reprezentowana w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1499">is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="68c9f-1500">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.ovf.u2` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1500">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u2` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1501">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1501">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U2_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U2_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U2_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U2_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U2_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1502">Konwertuje wartości bez znaku na szczycie stosu oceny do <see langword="unsigned int16" /> i rozszerza je do <see langword="int32" />, zgłaszanie <see cref="T:System.OverflowException" /> przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1502">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1503">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1503">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1504">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1504">Format</span></span>|<span data-ttu-id="68c9f-1505">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1505">Assembly Format</span></span>|<span data-ttu-id="68c9f-1506">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1506">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1507">87</span><span class="sxs-lookup"><span data-stu-id="68c9f-1507">87</span></span>|<span data-ttu-id="68c9f-1508">conv.ovf.u2.un</span><span class="sxs-lookup"><span data-stu-id="68c9f-1508">conv.ovf.u2.un</span></span>|<span data-ttu-id="68c9f-1509">Konwertuje wartość niepodpisane `unsigned int16` (na stosie jako `int32`) i zgłosić wyjątek przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1509">Converts an unsigned value to an `unsigned int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="68c9f-1510">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1510">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1511">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1511">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1512">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1512">is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="68c9f-1513">Jeśli występuje przepełnienie, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1513">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="68c9f-1514">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1514">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1515">`conv.ovf.u2.un` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i miejsc, w których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1515">The `conv.ovf.u2.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1516">Jeśli wartość jest zbyt duży lub za mały, aby mogły być reprezentowane przez typ docelowy, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1516">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="68c9f-1517">Konwersje z liczby zmiennoprzecinkowe do całkowitych obciąć liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1517">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="68c9f-1518">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1518">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-1519">jest generowany, jeśli wynik nie może być reprezentowana w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1519">is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="68c9f-1520">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.ovf.u2.un` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1520">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u2.un` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1521">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1521">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1522">Konwertuje wartość ze znakiem na szczycie stosu oceny do <see langword="unsigned int32" />, zgłaszanie <see cref="T:System.OverflowException" /> przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1522">Converts the signed value on top of the evaluation stack to <see langword="unsigned int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1523">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1523">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1524">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1524">Format</span></span>|<span data-ttu-id="68c9f-1525">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1525">Assembly Format</span></span>|<span data-ttu-id="68c9f-1526">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1526">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1527">B8</span><span class="sxs-lookup"><span data-stu-id="68c9f-1527">B8</span></span>|<span data-ttu-id="68c9f-1528">conv.ovf.u4</span><span class="sxs-lookup"><span data-stu-id="68c9f-1528">conv.ovf.u4</span></span>|<span data-ttu-id="68c9f-1529">Konwertuj na `unsigned int32` (na stosie jako `int32`) i zgłosić wyjątek przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1529">Convert to an `unsigned int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="68c9f-1530">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1530">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1531">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1531">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1532">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1532">is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="68c9f-1533">Jeśli występuje przepełnienie, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1533">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="68c9f-1534">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1534">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1535">`conv.ovf.u4` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i miejsc, w których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1535">The `conv.ovf.u4` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1536">Jeśli wartość jest zbyt duży lub za mały, aby mogły być reprezentowane przez typ docelowy, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1536">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="68c9f-1537">Konwersje z liczby zmiennoprzecinkowe do całkowitych obciąć liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1537">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="68c9f-1538">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1538">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-1539">jest generowany, jeśli wynik nie może być reprezentowana w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1539">is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="68c9f-1540">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.ovf.u4` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1540">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u4` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1541">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1541">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U4_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U4_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U4_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U4_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U4_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1542">Konwertuje wartości bez znaku na szczycie stosu oceny do <see langword="unsigned int32" />, zgłaszanie <see cref="T:System.OverflowException" /> przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1542">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1543">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1543">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1544">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1544">Format</span></span>|<span data-ttu-id="68c9f-1545">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1545">Assembly Format</span></span>|<span data-ttu-id="68c9f-1546">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1546">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1547">88</span><span class="sxs-lookup"><span data-stu-id="68c9f-1547">88</span></span>|<span data-ttu-id="68c9f-1548">conv.ovf.u4.un</span><span class="sxs-lookup"><span data-stu-id="68c9f-1548">conv.ovf.u4.un</span></span>|<span data-ttu-id="68c9f-1549">Konwertuje wartość niepodpisane `unsigned int32` (na stosie jako `int32`) i zgłosić wyjątek przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1549">Converts an unsigned value to an `unsigned int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="68c9f-1550">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1550">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1551">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1551">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1552">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1552">is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="68c9f-1553">Jeśli występuje przepełnienie, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1553">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="68c9f-1554">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1554">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1555">`conv.ovf.u4.un` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i miejsc, w których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1555">The `conv.ovf.u4.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1556">Jeśli wartość jest zbyt duży lub za mały, aby mogły być reprezentowane przez typ docelowy, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1556">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="68c9f-1557">Konwersje z liczby zmiennoprzecinkowe do całkowitych obciąć liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1557">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="68c9f-1558">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1558">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-1559">jest generowany, jeśli wynik nie może być reprezentowana w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1559">is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="68c9f-1560">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.ovf.u4.un` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1560">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u4.un` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1561">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1561">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1562">Konwertuje wartość ze znakiem na szczycie stosu oceny do <see langword="unsigned int64" />, zgłaszanie <see cref="T:System.OverflowException" /> przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1562">Converts the signed value on top of the evaluation stack to <see langword="unsigned int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1563">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1563">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1564">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1564">Format</span></span>|<span data-ttu-id="68c9f-1565">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1565">Assembly Format</span></span>|<span data-ttu-id="68c9f-1566">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1566">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1567">BA</span><span class="sxs-lookup"><span data-stu-id="68c9f-1567">BA</span></span>|<span data-ttu-id="68c9f-1568">conv.ovf.u8</span><span class="sxs-lookup"><span data-stu-id="68c9f-1568">conv.ovf.u8</span></span>|<span data-ttu-id="68c9f-1569">Konwertuj na `unsigned int64` (na stosie jako `int64`) i zgłosić wyjątek przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1569">Convert to an `unsigned int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="68c9f-1570">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1570">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1571">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1571">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1572">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1572">is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="68c9f-1573">Jeśli występuje przepełnienie, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1573">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="68c9f-1574">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1574">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1575">`conv.ovf.u8` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i miejsc, w których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1575">The `conv.ovf.u8` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1576">Jeśli wartość jest zbyt duży lub za mały, aby mogły być reprezentowane przez typ docelowy, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1576">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="68c9f-1577">Konwersje z liczby zmiennoprzecinkowe do całkowitych obciąć liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1577">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="68c9f-1578">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1578">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-1579">jest generowany, jeśli wynik nie może być reprezentowana w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1579">is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="68c9f-1580">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.ovf.u8` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1580">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u8` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1581">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1581">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U8_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U8_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U8_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U8_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U8_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1582">Konwertuje wartości bez znaku na szczycie stosu oceny do <see langword="unsigned int64" />, zgłaszanie <see cref="T:System.OverflowException" /> przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1582">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1583">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1583">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1584">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1584">Format</span></span>|<span data-ttu-id="68c9f-1585">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1585">Assembly Format</span></span>|<span data-ttu-id="68c9f-1586">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1586">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1587">89</span><span class="sxs-lookup"><span data-stu-id="68c9f-1587">89</span></span>|<span data-ttu-id="68c9f-1588">conv.ovf.u8.un</span><span class="sxs-lookup"><span data-stu-id="68c9f-1588">conv.ovf.u8.un</span></span>|<span data-ttu-id="68c9f-1589">Konwertuje wartość niepodpisane `unsigned int64` (na stosie jako `int64`) i zgłosić wyjątek przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1589">Converts an unsigned value to an `unsigned int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="68c9f-1590">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1590">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1591">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1591">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1592">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1592">is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="68c9f-1593">Jeśli występuje przepełnienie, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1593">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="68c9f-1594">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1594">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1595">`conv.ovf.u8.un` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i miejsc, w których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1595">The `conv.ovf.u8.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1596">Jeśli wartość jest zbyt duży lub za mały, aby mogły być reprezentowane przez typ docelowy, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1596">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="68c9f-1597">Konwersje z liczby zmiennoprzecinkowe do całkowitych obciąć liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1597">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="68c9f-1598">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1598">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-1599">jest generowany, jeśli wynik nie może być reprezentowana w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1599">is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="68c9f-1600">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.ovf.u8.un` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1600">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u8.un` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1601">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1601">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1602">Konwertuje wartość liczby całkowitej bez znaku na szczycie stosu oceny do <see langword="float32" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1602">Converts the unsigned integer value on top of the evaluation stack to <see langword="float32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1603">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1603">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1604">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1604">Format</span></span>|<span data-ttu-id="68c9f-1605">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1605">Assembly Format</span></span>|<span data-ttu-id="68c9f-1606">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1606">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1607">76</span><span class="sxs-lookup"><span data-stu-id="68c9f-1607">76</span></span>|<span data-ttu-id="68c9f-1608">conv.r.un</span><span class="sxs-lookup"><span data-stu-id="68c9f-1608">conv.r.un</span></span>|<span data-ttu-id="68c9f-1609">Konwertuj liczbę całkowitą bez znaku do zmiennoprzecinkowych, wypychanie `F` na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1609">Convert unsigned integer to floating-point, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="68c9f-1610">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1610">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1611">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1611">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1612">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1612">is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="68c9f-1613">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1613">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1614">`conv.r.un` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i pozostaw, których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1614">The `conv.r.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1615">Wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.i` lub `conv.u` jest używana, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1615">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="68c9f-1616">Wartości zmiennoprzecinkowe są konwertowane na `F` typu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1616">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="68c9f-1617">Konwersja z liczby zmiennoprzecinkowe do całkowitych obcina liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1617">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="68c9f-1618">Podczas konwersji z `float64` do `float32`, dokładności, mogą zostać utracone.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1618">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="68c9f-1619">Jeśli `value` jest zbyt duży, aby zmieścić ją w `float32 (F)`, nieskończoności dodatniej (Jeśli `value` jest dodatni) lub minus nieskończoność (Jeśli `value` ma wartość ujemną) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1619">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="68c9f-1620">Jeśli występuje przepełnienie konwersji typu jeden argument do innej, najbardziej znaczące bity są obcinane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1620">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="68c9f-1621">Jeśli wynik jest mniejszy niż `int32`, wartość jest rozszerzona o znak do wypełnienia gniazda.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1621">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="68c9f-1622">Jeśli występuje przepełnienie konwersja typu zmiennoprzecinkowego na liczbę całkowitą `result` zwracany jest nieokreślona.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1622">If overflow occurs converting a floating-point type to an integer the `result` returned is unspecified.</span></span> <span data-ttu-id="68c9f-1623">`conv.r.un` Operacji przyjmuje liczbę całkowitą ze stosu, zinterpretuje ją jako bez znaku i zastępuje go znakiem liczba zmiennoprzecinkowa do przedstawienia wartości całkowitej: albo `float32`, jeżeli jest dostatecznie szerokie, aby reprezentować liczby całkowitej bez utraty precyzji lub innego `float64`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1623">The `conv.r.un` operation takes an integer off the stack, interprets it as unsigned, and replaces it with a floating-point number to represent the integer: either a `float32`, if this is wide enough to represent the integer without loss of precision, or else a `float64`.</span></span>  
  
 <span data-ttu-id="68c9f-1624">Nigdy nie są zgłaszane nie wyjątki, korzystając z tego pola.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1624">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="68c9f-1625">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.r.un` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1625">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r.un` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1626">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1626">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1627">Konwertuje wartość na szczycie stosu oceny do <see langword="float32" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1627">Converts the value on top of the evaluation stack to <see langword="float32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1628">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1628">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1629">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1629">Format</span></span>|<span data-ttu-id="68c9f-1630">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1630">Assembly Format</span></span>|<span data-ttu-id="68c9f-1631">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1631">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1632">6B</span><span class="sxs-lookup"><span data-stu-id="68c9f-1632">6B</span></span>|<span data-ttu-id="68c9f-1633">conv.r4</span><span class="sxs-lookup"><span data-stu-id="68c9f-1633">conv.r4</span></span>|<span data-ttu-id="68c9f-1634">Konwertuj na `float32`, wypychania `F` na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1634">Convert to `float32`, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="68c9f-1635">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1635">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1636">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1636">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1637">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1637">is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="68c9f-1638">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1638">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1639">`conv.r4` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i pozostaw, których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1639">The `conv.r4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1640">Wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.i` lub `conv.u` jest używana, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1640">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="68c9f-1641">Wartości zmiennoprzecinkowe są konwertowane na `F` typu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1641">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="68c9f-1642">Konwersja z liczby zmiennoprzecinkowe do całkowitych obcina liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1642">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="68c9f-1643">Podczas konwersji z `float64` do `float32`, dokładności, mogą zostać utracone.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1643">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="68c9f-1644">Jeśli `value` jest zbyt duży, aby zmieścić ją w `float32 (F)`, nieskończoności dodatniej (Jeśli `value` jest dodatni) lub minus nieskończoność (Jeśli `value` ma wartość ujemną) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1644">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="68c9f-1645">Jeśli występuje przepełnienie konwersji typu jeden argument do innej, najbardziej znaczące bity są obcinane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1645">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="68c9f-1646">Jeśli wynik jest mniejszy niż `int32`, wartość jest rozszerzona o znak do wypełnienia gniazda.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1646">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="68c9f-1647">Jeśli występuje przepełnienie konwersja typu zmiennoprzecinkowego na liczbę całkowitą, wartość zwracana jest nieokreślona.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1647">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="68c9f-1648">Nigdy nie są zgłaszane nie wyjątki, korzystając z tego pola.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1648">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="68c9f-1649">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.r4` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1649">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r4` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1650">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1650">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1651">Konwertuje wartość na szczycie stosu oceny do <see langword="float64" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1651">Converts the value on top of the evaluation stack to <see langword="float64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1652">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1652">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1653">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1653">Format</span></span>|<span data-ttu-id="68c9f-1654">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1654">Assembly Format</span></span>|<span data-ttu-id="68c9f-1655">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1655">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1656">6C</span><span class="sxs-lookup"><span data-stu-id="68c9f-1656">6C</span></span>|<span data-ttu-id="68c9f-1657">conv.r8</span><span class="sxs-lookup"><span data-stu-id="68c9f-1657">conv.r8</span></span>|<span data-ttu-id="68c9f-1658">Konwertuj na `float64`, wypychania `F` na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1658">Convert to `float64`, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="68c9f-1659">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1659">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1660">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1660">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1661">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1661">is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="68c9f-1662">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1662">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1663">`conv.r8` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i pozostaw, których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1663">The `conv.r8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1664">Wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.i` lub `conv.u` jest używana, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1664">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="68c9f-1665">Wartości zmiennoprzecinkowe są konwertowane na `F` typu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1665">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="68c9f-1666">Konwersja z liczby zmiennoprzecinkowe do całkowitych obcina liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1666">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="68c9f-1667">Podczas konwersji z `float64` do `float32`, dokładności, mogą zostać utracone.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1667">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="68c9f-1668">Jeśli `value` jest zbyt duży, aby zmieścić ją w `float32 (F)`, nieskończoności dodatniej (Jeśli `value` jest dodatni) lub minus nieskończoność (Jeśli `value` ma wartość ujemną) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1668">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="68c9f-1669">Jeśli występuje przepełnienie konwersji typu jeden argument do innej, najbardziej znaczące bity są obcinane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1669">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="68c9f-1670">Jeśli wynik jest mniejszy niż `int32`, wartość jest rozszerzona o znak do wypełnienia gniazda.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1670">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="68c9f-1671">Jeśli występuje przepełnienie konwersja typu zmiennoprzecinkowego na liczbę całkowitą, wartość zwracana jest nieokreślona.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1671">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="68c9f-1672">Nigdy nie są zgłaszane nie wyjątki, korzystając z tego pola.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1672">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="68c9f-1673">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.r8` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1673">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r8` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1674">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1674">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1675">Konwertuje wartość na szczycie stosu oceny do <see langword="unsigned native int" />, i rozszerza je do <see langword="native int" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1675">Converts the value on top of the evaluation stack to <see langword="unsigned native int" />, and extends it to <see langword="native int" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1676">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1676">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1677">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1677">Format</span></span>|<span data-ttu-id="68c9f-1678">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1678">Assembly Format</span></span>|<span data-ttu-id="68c9f-1679">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1679">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1680">E0</span><span class="sxs-lookup"><span data-stu-id="68c9f-1680">E0</span></span>|<span data-ttu-id="68c9f-1681">conv.u</span><span class="sxs-lookup"><span data-stu-id="68c9f-1681">conv.u</span></span>|<span data-ttu-id="68c9f-1682">Konwertuj na `unsigned native int`, wypychania `native int` na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1682">Convert to `unsigned native int`, pushing `native int` on stack.</span></span>|  
  
 <span data-ttu-id="68c9f-1683">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1683">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1684">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1684">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1685">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1685">is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="68c9f-1686">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1686">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1687">`conv.u` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i pozostaw, których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1687">The `conv.u` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1688">Wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.i` lub `conv.u` jest używana, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1688">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="68c9f-1689">Wartości zmiennoprzecinkowe są konwertowane na `F` typu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1689">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="68c9f-1690">Konwersja z liczby zmiennoprzecinkowe do całkowitych obcina liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1690">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="68c9f-1691">Podczas konwersji z `float64` do `float32`, dokładności, mogą zostać utracone.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1691">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="68c9f-1692">Jeśli `value` jest zbyt duży, aby zmieścić ją w `float32 (F)`, nieskończoności dodatniej (Jeśli `value` jest dodatni) lub minus nieskończoność (Jeśli `value` ma wartość ujemną) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1692">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="68c9f-1693">Jeśli występuje przepełnienie konwersji typu jeden argument do innej, najbardziej znaczące bity są obcinane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1693">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="68c9f-1694">Jeśli wynik jest mniejszy niż `int32`, wartość jest rozszerzona o znak do wypełnienia gniazda.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1694">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="68c9f-1695">Jeśli występuje przepełnienie konwersja typu zmiennoprzecinkowego na liczbę całkowitą, wartość zwracana jest nieokreślona.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1695">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="68c9f-1696">Nigdy nie są zgłaszane nie wyjątki, korzystając z tego pola.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1696">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="68c9f-1697">Zobacz <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> i <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> równoważne instrukcje, które spowoduje zgłoszenie wyjątku, gdy typ wyniku nie może poprawnie reprezentować wartość wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1697">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="68c9f-1698">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.u` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1698">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1699">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1699">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1700">Konwertuje wartość na szczycie stosu oceny do <see langword="unsigned int8" />, i rozszerza je do <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1700">Converts the value on top of the evaluation stack to <see langword="unsigned int8" />, and extends it to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1701">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1701">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1702">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1702">Format</span></span>|<span data-ttu-id="68c9f-1703">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1703">Assembly Format</span></span>|<span data-ttu-id="68c9f-1704">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1704">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1705">D2</span><span class="sxs-lookup"><span data-stu-id="68c9f-1705">D2</span></span>|<span data-ttu-id="68c9f-1706">conv.U1</span><span class="sxs-lookup"><span data-stu-id="68c9f-1706">conv.u1</span></span>|<span data-ttu-id="68c9f-1707">Konwertuj na `int8`, wypychania `int32` na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1707">Convert to `int8`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="68c9f-1708">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1708">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1709">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1709">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1710">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1710">is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="68c9f-1711">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1711">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1712">`conv.u1` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i pozostaw, których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1712">The `conv.u1` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1713">Wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.i` lub `conv.u` jest używana, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1713">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="68c9f-1714">Wartości zmiennoprzecinkowe są konwertowane na `F` typu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1714">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="68c9f-1715">Konwersja z liczby zmiennoprzecinkowe do całkowitych obcina liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1715">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="68c9f-1716">Podczas konwersji z `float64` do `float32`, dokładności, mogą zostać utracone.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1716">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="68c9f-1717">Jeśli `value` jest zbyt duży, aby zmieścić ją w `float32 (F)`, nieskończoności dodatniej (Jeśli `value` jest dodatni) lub minus nieskończoność (Jeśli `value` ma wartość ujemną) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1717">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="68c9f-1718">Jeśli występuje przepełnienie konwersji typu jeden argument do innej, najbardziej znaczące bity są obcinane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1718">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="68c9f-1719">Jeśli wynik jest mniejszy niż `int32`, wartość jest rozszerzona o znak do wypełnienia gniazda.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1719">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="68c9f-1720">Jeśli występuje przepełnienie konwersja typu zmiennoprzecinkowego na liczbę całkowitą, wartość zwracana jest nieokreślona.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1720">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="68c9f-1721">Nigdy nie są zgłaszane nie wyjątki, korzystając z tego pola.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1721">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="68c9f-1722">Zobacz <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> i <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> równoważne instrukcje, które spowoduje zgłoszenie wyjątku, gdy typ wyniku nie może poprawnie reprezentować wartość wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1722">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="68c9f-1723">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.u1` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1723">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u1` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1724">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1724">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1725">Konwertuje wartość na szczycie stosu oceny do <see langword="unsigned int16" />, i rozszerza je do <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1725">Converts the value on top of the evaluation stack to <see langword="unsigned int16" />, and extends it to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1726">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1726">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1727">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1727">Format</span></span>|<span data-ttu-id="68c9f-1728">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1728">Assembly Format</span></span>|<span data-ttu-id="68c9f-1729">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1729">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1730">D1</span><span class="sxs-lookup"><span data-stu-id="68c9f-1730">D1</span></span>|<span data-ttu-id="68c9f-1731">conv.u2</span><span class="sxs-lookup"><span data-stu-id="68c9f-1731">conv.u2</span></span>|<span data-ttu-id="68c9f-1732">Konwertuj na `int16`, wypychania `int32` na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1732">Convert to `int16`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="68c9f-1733">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1733">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1734">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1734">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1735">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1735">is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="68c9f-1736">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1736">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1737">`conv.u2` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i pozostaw, których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1737">The `conv.u2` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1738">Wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.i` lub `conv.u` jest używana, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1738">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="68c9f-1739">Wartości zmiennoprzecinkowe są konwertowane na `F` typu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1739">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="68c9f-1740">Konwersja z liczby zmiennoprzecinkowe do całkowitych obcina liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1740">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="68c9f-1741">Podczas konwersji z `float64` do `float32`, dokładności, mogą zostać utracone.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1741">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="68c9f-1742">Jeśli `value` jest zbyt duży, aby zmieścić ją w `float32 (F)`, nieskończoności dodatniej (Jeśli `value` jest dodatni) lub minus nieskończoność (Jeśli `value` ma wartość ujemną) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1742">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="68c9f-1743">Jeśli występuje przepełnienie konwersji typu jeden argument do innej, najbardziej znaczące bity są obcinane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1743">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="68c9f-1744">Jeśli wynik jest mniejszy niż `int32`, wartość jest rozszerzona o znak do wypełnienia gniazda.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1744">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="68c9f-1745">Jeśli występuje przepełnienie konwersja typu zmiennoprzecinkowego na liczbę całkowitą, wartość zwracana jest nieokreślona.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1745">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="68c9f-1746">Nigdy nie są zgłaszane nie wyjątki, korzystając z tego pola.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1746">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="68c9f-1747">Zobacz <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> i <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> równoważne instrukcje, które spowoduje zgłoszenie wyjątku, gdy typ wyniku nie może poprawnie reprezentować wartość wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1747">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="68c9f-1748">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.u2` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1748">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u2` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1749">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1749">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1750">Konwertuje wartość na szczycie stosu oceny do <see langword="unsigned int32" />, i rozszerza je do <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1750">Converts the value on top of the evaluation stack to <see langword="unsigned int32" />, and extends it to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1751">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1751">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1752">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1752">Format</span></span>|<span data-ttu-id="68c9f-1753">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1753">Assembly Format</span></span>|<span data-ttu-id="68c9f-1754">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1754">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1755">6D</span><span class="sxs-lookup"><span data-stu-id="68c9f-1755">6D</span></span>|<span data-ttu-id="68c9f-1756">conv.u4</span><span class="sxs-lookup"><span data-stu-id="68c9f-1756">conv.u4</span></span>|<span data-ttu-id="68c9f-1757">Konwertuj na `unsigned int32`, wypychania `int32` na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1757">Convert to `unsigned int32`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="68c9f-1758">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1758">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1759">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1759">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1760">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1760">is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="68c9f-1761">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1761">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1762">`conv.u4` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i pozostaw, których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1762">The `conv.u4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1763">Wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.i` lub `conv.u` jest używana, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1763">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="68c9f-1764">Wartości zmiennoprzecinkowe są konwertowane na `F` typu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1764">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="68c9f-1765">Konwersja z liczby zmiennoprzecinkowe do całkowitych obcina liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1765">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="68c9f-1766">Podczas konwersji z `float64` do `float32`, dokładności, mogą zostać utracone.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1766">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="68c9f-1767">Jeśli `value` jest zbyt duży, aby zmieścić ją w `float32 (F)`, nieskończoności dodatniej (Jeśli `value` jest dodatni) lub minus nieskończoność (Jeśli `value` ma wartość ujemną) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1767">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="68c9f-1768">Jeśli występuje przepełnienie konwersji typu jeden argument do innej, najbardziej znaczące bity są obcinane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1768">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="68c9f-1769">Jeśli wynik jest mniejszy niż `int32`, wartość jest rozszerzona o znak do wypełnienia gniazda.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1769">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="68c9f-1770">Jeśli występuje przepełnienie konwersja typu zmiennoprzecinkowego na liczbę całkowitą, wartość zwracana jest nieokreślona.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1770">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="68c9f-1771">Nigdy nie są zgłaszane nie wyjątki, korzystając z tego pola.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1771">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="68c9f-1772">Zobacz <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> i <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> równoważne instrukcje, które spowoduje zgłoszenie wyjątku, gdy typ wyniku nie może poprawnie reprezentować wartość wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1772">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="68c9f-1773">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.u4` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1773">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u4` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1774">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1774">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1775">Konwertuje wartość na szczycie stosu oceny do <see langword="unsigned int64" />, i rozszerza je do <see langword="int64" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1775">Converts the value on top of the evaluation stack to <see langword="unsigned int64" />, and extends it to <see langword="int64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1776">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1776">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1777">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1777">Format</span></span>|<span data-ttu-id="68c9f-1778">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1778">Assembly Format</span></span>|<span data-ttu-id="68c9f-1779">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1779">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1780">6E</span><span class="sxs-lookup"><span data-stu-id="68c9f-1780">6E</span></span>|<span data-ttu-id="68c9f-1781">conv.u8</span><span class="sxs-lookup"><span data-stu-id="68c9f-1781">conv.u8</span></span>|<span data-ttu-id="68c9f-1782">Konwertuj na `int64`, wypychania `int64` na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1782">Convert to `int64`, pushing `int64` on stack.</span></span>|  
  
 <span data-ttu-id="68c9f-1783">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1783">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1784">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1784">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1785">zostanie zdjęte ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1785">is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="68c9f-1786">Jeśli konwersja się powiedzie, wartość wynikowa są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1786">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1787">`conv.u8` Konwertuje opcode `value` na szczycie stosu do typu określonego w opcode i pozostaw, których przekonwertować wartości na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1787">The `conv.u8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="68c9f-1788">Wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` , gdy są one załadowane na stosie oceny (chyba że `conv.i` lub `conv.u` jest używana, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1788">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="68c9f-1789">Wartości zmiennoprzecinkowe są konwertowane na `F` typu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1789">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="68c9f-1790">Konwersja z liczby zmiennoprzecinkowe do całkowitych obcina liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1790">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="68c9f-1791">Podczas konwersji z `float64` do `float32`, dokładności, mogą zostać utracone.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1791">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="68c9f-1792">Jeśli `value` jest zbyt duży, aby zmieścić ją w `float32 (F)`, nieskończoności dodatniej (Jeśli `value` jest dodatni) lub minus nieskończoność (Jeśli `value` ma wartość ujemną) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1792">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="68c9f-1793">Jeśli występuje przepełnienie konwersji typu jeden argument do innej, najbardziej znaczące bity są obcinane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1793">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="68c9f-1794">Jeśli wynik jest mniejszy niż `int32`, wartość jest rozszerzona o znak do wypełnienia gniazda.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1794">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="68c9f-1795">Jeśli występuje przepełnienie konwersja typu zmiennoprzecinkowego na liczbę całkowitą, wartość zwracana jest nieokreślona.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1795">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="68c9f-1796">Nigdy nie są zgłaszane nie wyjątki, korzystając z tego pola.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1796">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="68c9f-1797">Zobacz <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> i <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> równoważne instrukcje, które spowoduje zgłoszenie wyjątku, gdy typ wyniku nie może poprawnie reprezentować wartość wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1797">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="68c9f-1798">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `conv.u8` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1798">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u8` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1799">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1799">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cpblk">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cpblk;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cpblk" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cpblk" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cpblk As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cpblk;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cpblk : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cpblk" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1800">Kopiuje określony, liczba bajtów z adresu źródłowego do docelowego adresu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1800">Copies a specified number bytes from a source address to a destination address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1801">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1801">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1802">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1802">Format</span></span>|<span data-ttu-id="68c9f-1803">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1803">Assembly Format</span></span>|<span data-ttu-id="68c9f-1804">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1804">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1805">FE 17</span><span class="sxs-lookup"><span data-stu-id="68c9f-1805">FE 17</span></span>|<span data-ttu-id="68c9f-1806">cpblk</span><span class="sxs-lookup"><span data-stu-id="68c9f-1806">cpblk</span></span>|<span data-ttu-id="68c9f-1807">Kopiowanie danych z bloku pamięci z jednego do drugiego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1807">Copy data from one memory block to another.</span></span>|  
  
 <span data-ttu-id="68c9f-1808">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1808">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-1809">Adres docelowy są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1809">The destination address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-1810">Źródłowy adres są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1810">The source address is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-1811">Liczba bajtów do skopiowania są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1811">The number of bytes to copy is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="68c9f-1812">Liczba bajtów, adres źródłowy i docelowy adres są zdjęte ze stosu ze stosu; określoną liczbę bajtów są kopiowane z adresu źródłowego do docelowego adresu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1812">The number of bytes, the source address, and the destination address are popped from the stack; the specified number of bytes are copied from the source address to the destination address.</span></span>  
  
 <span data-ttu-id="68c9f-1813">`cpblk` Instrukcji kopiuje numer (typ `unsigned int32`) bajtów ze źródłowego adresu (typu `*`, `native int`, lub `&`) do docelowego adresu (typu `*`, `native int`, lub `&`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1813">The `cpblk` instruction copies a number (type `unsigned int32`) of bytes from a source address (of type `*`, `native int`, or `&`) to a destination address (of type `*`, `native int`, or `&`).</span></span> <span data-ttu-id="68c9f-1814">Zachowanie `cpblk` jest nieokreślony, jeżeli obszary źródłowe i docelowe nakładają się.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1814">The behavior of `cpblk` is unspecified if the source and destination areas overlap.</span></span>  
  
 `cpblk` <span data-ttu-id="68c9f-1815">przyjęto założenie, że źródłowym i docelowym, które zostały rozwiązane są wyrównane do naturalnym rozmiaru maszyny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1815">assumes that both the source and destination addressed are aligned to the natural size of the machine.</span></span> <span data-ttu-id="68c9f-1816">`cpblk` Instrukcji może być od razu poprzedzona przez `unaligned.<prefix>` instrukcjami, aby wskazać, że źródło lub miejsce docelowe jest niewyrównanych.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1816">The `cpblk` instruction can be immediately preceded by the `unaligned.<prefix>` instruction to indicate that either the source or the destination is unaligned.</span></span>  
  
 <span data-ttu-id="68c9f-1817">Działanie `cpblk` instrukcji może być zmienione przez bezpośrednio poprzedzający <xref:System.Reflection.Emit.OpCodes.Volatile> lub <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1817">The operation of the `cpblk` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-1818">może zostać wygenerowany, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1818">may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="68c9f-1819">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `cpblk` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1819">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cpblk` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1820">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1820">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cpobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cpobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cpobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cpobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cpobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cpobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cpobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cpobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1821">Typ wartości znajdujące się pod adresem obiektu kopii (typ <see langword="&amp;" />, <see langword="*" /> lub <see langword="native int" />) adres obiektu docelowego (typ <see langword="&amp;" />, <see langword="*" /> lub <see langword="native int" />).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1821">Copies the value type located at the address of an object (type <see langword="&amp;" />, <see langword="*" /> or <see langword="native int" />) to the address of the destination object (type <see langword="&amp;" />, <see langword="*" /> or <see langword="native int" />).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1822">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1822">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1823">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1823">Format</span></span>|<span data-ttu-id="68c9f-1824">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1824">Assembly Format</span></span>|<span data-ttu-id="68c9f-1825">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1825">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1826">70 < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-1826">70 < `T` ></span></span>|<span data-ttu-id="68c9f-1827">cpobj</span><span class="sxs-lookup"><span data-stu-id="68c9f-1827">cpobj</span></span> `classTok`|<span data-ttu-id="68c9f-1828">Kopiuje wartość typu z obiektu źródłowego do obiektu docelowego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1828">Copies a value type from a source object to a destination object.</span></span>|  
  
 <span data-ttu-id="68c9f-1829">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1829">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-1830">Odwołanie do obiektu docelowego są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1830">The destination object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-1831">Odwołanie do obiektu źródłowego są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1831">The source object reference is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-1832">Odwołania do dwóch obiektów są zdjęte ze stosu ze stosu; Typ wartości pod adresem obiektu źródłowego jest kopiowany do adresu obiektu docelowego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1832">The two object references are popped from the stack; the value type at the address of the source object is copied to the address of the destination object.</span></span>  
  
 <span data-ttu-id="68c9f-1833">Zachowanie `cpobj` jest nieokreślony, jeśli źródłowy i docelowy obiekt odwołania nie są wskaźnikami do wystąpienia klasy reprezentowane przez token klasy `classTok` ( `typeref` lub `typedef`), lub jeśli `classTok` nie reprezentuje Typ wartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1833">The behavior of `cpobj` is unspecified if the source and destination object references are not pointers to instances of the class represented by the class token `classTok` (a `typeref` or `typedef`), or if `classTok` does not represent a value type.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-1834">może zostać wygenerowany, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1834">may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="68c9f-1835">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `cpobj` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1835">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cpobj` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1836">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1836">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Div">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Div;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Div" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Div" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Div As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Div;" />
      <MemberSignature Language="F#" Value=" staticval mutable Div : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Div" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1837">Dzieli dwie wartości, a następnie wypycha wynik w postaci liczb zmiennoprzecinkowych (typ <see langword="F" />) lub iloraz (typ <see langword="int32" />) na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1837">Divides two values and pushes the result as a floating-point (type <see langword="F" />) or quotient (type <see langword="int32" />) onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1838">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1838">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1839">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1839">Format</span></span>|<span data-ttu-id="68c9f-1840">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1840">Assembly Format</span></span>|<span data-ttu-id="68c9f-1841">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1841">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1842">5B</span><span class="sxs-lookup"><span data-stu-id="68c9f-1842">5B</span></span>|<span data-ttu-id="68c9f-1843">div</span><span class="sxs-lookup"><span data-stu-id="68c9f-1843">div</span></span>|<span data-ttu-id="68c9f-1844">Dzieli dwie wartości do zwrócenia iloraz lub wyników zmiennoprzecinkowych.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1844">Divides two values to return a quotient or floating-point result.</span></span>|  
  
 <span data-ttu-id="68c9f-1845">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1845">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-1846">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1846">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-1847">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1847">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-1848">i `value1` są zdjęte ze stosu ze stosu; `value1` jest dzielona przez `value2`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1848">and `value1` are popped from the stack; `value1` is divided by `value2`.</span></span>  
  
4.  <span data-ttu-id="68c9f-1849">Wyniki są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1849">The result is pushed onto the stack.</span></span>  
  
 `result`<span data-ttu-id="68c9f-1850"> = `value1` DIV wartość2 spełnia następujące warunki:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1850"> = `value1` div value2 satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="68c9f-1851">&#124;`result` &#124; = &#124; `value1` &#124; / &#124; `value2` &#124;, oraz:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1851">&#124; `result` &#124; = &#124; `value1` &#124; / &#124; `value2` &#124;, and:</span></span>  
  
 <span data-ttu-id="68c9f-1852">logowania (`result`) = +, jeśli Zaloguj (`value1`) = logowanie (`value2`), lub-, jeśli znak (`value1`) ~ = logowanie (`value2`)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1852">sign(`result`) = +, if sign(`value1`) = sign(`value2`), or -, if sign(`value1`) ~= sign(`value2`)</span></span>  
  
 <span data-ttu-id="68c9f-1853">`div` Instrukcja oblicza wynik a następnie wypycha go na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1853">The `div` instruction computes the result and pushes it on the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1854">Dzielenie całkowitoliczbowe obcina w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1854">Integer division truncates towards zero.</span></span>  
  
 <span data-ttu-id="68c9f-1855">Dzielenie liczby ograniczone przez zero tworzy poprawnie podpisane wartość nieskończona.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1855">Division of a finite number by zero produces the correctly signed infinite value.</span></span>  
  
 <span data-ttu-id="68c9f-1856">Podzielenie zero przez zero lub tworzy nieskończoność, nieskończoność wartości NaN (nie-A-liczba).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1856">Dividing zero by zero or infinity by infinity produces the NaN (Not-A-Number) value.</span></span> <span data-ttu-id="68c9f-1857">Dowolna liczba podzielona przez nieskończoności generuje wartość zero.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1857">Any number divided by infinity will produce a zero value.</span></span>  
  
 <span data-ttu-id="68c9f-1858">Operacje typu całkowitego throw <xref:System.ArithmeticException> Jeśli wynik nie może być przedstawiony w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1858">Integral operations throw <xref:System.ArithmeticException> if the result cannot be represented in the result type.</span></span> <span data-ttu-id="68c9f-1859">Może się to zdarzyć, jeśli `value1` maksymalna wartość ujemna, i `value2` wynosi -1.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1859">This can happen if `value1` is the maximum negative value, and `value2` is -1.</span></span>  
  
 <span data-ttu-id="68c9f-1860">Operacje typu całkowitego throw <xref:System.DivideByZeroException> Jeśli `value2` wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1860">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="68c9f-1861">Należy pamiętać, że na platformach opartych na Intel <xref:System.OverflowException> jest zgłaszany, gdy obliczeń (minint div -1).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1861">Note that on Intel-based platforms an <xref:System.OverflowException> is thrown when computing (minint div -1).</span></span> <span data-ttu-id="68c9f-1862">Operacji zmiennoprzecinkowych nigdy nie zgłasza wyjątku (produkują NaNs lub nieskończoności zamiast).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1862">Floating-point operations never throw an exception (they produce NaNs or infinities instead).</span></span>  
  
 <span data-ttu-id="68c9f-1863">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `div` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1863">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `div` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1864">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1864">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Div_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Div_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Div_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Div_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Div_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Div_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Div_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Div_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1865">Dzieli dwie wartości liczb całkowitych bez znaku, a następnie wypycha wynik (<see langword="int32" />) na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1865">Divides two unsigned integer values and pushes the result (<see langword="int32" />) onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1866">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1866">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1867">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1867">Format</span></span>|<span data-ttu-id="68c9f-1868">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1868">Assembly Format</span></span>|<span data-ttu-id="68c9f-1869">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1869">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1870">5C</span><span class="sxs-lookup"><span data-stu-id="68c9f-1870">5C</span></span>|<span data-ttu-id="68c9f-1871">div.un</span><span class="sxs-lookup"><span data-stu-id="68c9f-1871">div.un</span></span>|<span data-ttu-id="68c9f-1872">Dzieli dwie wartości, bez znaku, zwracając ilorazu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1872">Divides two values, unsigned, returning a quotient.</span></span>|  
  
 <span data-ttu-id="68c9f-1873">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1873">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-1874">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1874">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-1875">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1875">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-1876">i `value1` są zdjęte ze stosu ze stosu; `value1` jest dzielona przez `value2`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1876">and `value1` are popped from the stack; `value1` is divided by `value2`.</span></span>  
  
4.  <span data-ttu-id="68c9f-1877">Wyniki są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1877">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1878">`div.un` Oblicza instrukcji `value1` podzielona przez `value2`, zarówno jako liczb całkowitych bez znaku i wypchnięć `result` na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1878">The `div.un` instruction computes `value1` divided by `value2`, both taken as unsigned integers, and pushes the `result` on the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1879">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `div.un` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1879">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `div.un` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1880">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1880">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dup">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Dup;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Dup" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Dup" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Dup As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Dup;" />
      <MemberSignature Language="F#" Value=" staticval mutable Dup : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Dup" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1881">Kopiuje bieżącą wartość najwyższego poziomu w stosie oceny, a następnie wypycha kopiowania na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1881">Copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1882">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1882">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1883">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1883">Format</span></span>|<span data-ttu-id="68c9f-1884">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1884">Assembly Format</span></span>|<span data-ttu-id="68c9f-1885">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1885">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1886">25</span><span class="sxs-lookup"><span data-stu-id="68c9f-1886">25</span></span>|<span data-ttu-id="68c9f-1887">dup</span><span class="sxs-lookup"><span data-stu-id="68c9f-1887">dup</span></span>|<span data-ttu-id="68c9f-1888">Duplikuje wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1888">Duplicates the value on the top of the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-1889">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1889">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1890">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1890">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1891">zniżki w stosunku do stosu pod kątem duplikatów, jest zdjęte ze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1891">is popped off of the stack for duplication.</span></span>  
  
3.  `value` <span data-ttu-id="68c9f-1892">jest przesunięty na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1892">is pushed back onto the stack.</span></span>  
  
4.  <span data-ttu-id="68c9f-1893">Zduplikowane wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1893">A duplicate value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-1894">`dup` Instrukcji duplikuje górnego elementu stosu i pozostawia dwie identyczne wartości na jego podstawie go.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1894">The `dup` instruction duplicates the top element of the stack, and leaves two identical values atop it.</span></span>  
  
 <span data-ttu-id="68c9f-1895">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `dup` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1895">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `dup` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1896">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1896">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Endfilter">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Endfilter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Endfilter" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Endfilter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Endfilter As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Endfilter;" />
      <MemberSignature Language="F#" Value=" staticval mutable Endfilter : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Endfilter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1897">Przekazuje sterowanie z <see langword="filter" /> klauzuli wyjątek do obsługi wyjątków Common Language Infrastructure (CLI).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1897">Transfers control from the <see langword="filter" /> clause of an exception back to the Common Language Infrastructure (CLI) exception handler.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1898">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1898">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1899">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1899">Format</span></span>|<span data-ttu-id="68c9f-1900">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1900">Assembly Format</span></span>|<span data-ttu-id="68c9f-1901">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1901">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1902">FE 11</span><span class="sxs-lookup"><span data-stu-id="68c9f-1902">FE 11</span></span>|<span data-ttu-id="68c9f-1903">elementu Endfilter</span><span class="sxs-lookup"><span data-stu-id="68c9f-1903">endfilter</span></span>|<span data-ttu-id="68c9f-1904">Koniec klauzula filtru dla obsługi wyjątków SEH.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1904">End filter clause of SEH exception handling.</span></span>|  
  
 <span data-ttu-id="68c9f-1905">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1905">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-1906">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1906">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-1907">zostanie zdjęte ze stosu; `endfilter` jest wykonywane i kontrola jest przekazywana do obsługi wyjątków.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1907">is popped from the stack; `endfilter` is executed and control is transferred to the exception handler.</span></span>  
  
 `Value` <span data-ttu-id="68c9f-1908">(który musi być typu `int32` i jest jednym z określonych wartości) jest zwracany z klauzuli filtru.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1908">(which must be of type `int32` and is one of a specific set of values) is returned from the filter clause.</span></span> <span data-ttu-id="68c9f-1909">Powinna to być jeden z:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1909">It should be one of:</span></span>  
  
-   `exception_continue_search` <span data-ttu-id="68c9f-1910">(`value` = 0) aby kontynuować wyszukiwanie aparatu obsługi wyjątków</span><span class="sxs-lookup"><span data-stu-id="68c9f-1910">(`value` = 0) to continue searching for an exception handler</span></span>  
  
-   `exception_execute_handler` <span data-ttu-id="68c9f-1911">(`value` = 1) można uruchomić drugi znajduje się faza obsługi wyjątków, w którym na koniec bloki są uruchamiane, dopóki program obsługi skojarzone z tym klauzula filtru.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1911">(`value` = 1) to start the second phase of exception handling where finally blocks are run until the handler associated with this filter clause is located.</span></span> <span data-ttu-id="68c9f-1912">Podczas odnajdywania program obsługi jest wykonywana.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1912">Upon discovery, the handler is executed.</span></span>  
  
 <span data-ttu-id="68c9f-1913">Inne wartości całkowitych generuje nieokreślony wyników.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1913">Other integer values will produce unspecified results.</span></span>  
  
 <span data-ttu-id="68c9f-1914">Punkt wejścia filtru, jak pokazano w tabeli wyjątek metody, musi być pierwsza instrukcja w bloku kodu filtru.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1914">The entry point of a filter, as shown in the method's exception table, must be the first instruction in the filter's code block.</span></span> <span data-ttu-id="68c9f-1915">`endfilter` Instrukcji musi być ostatnim instrukcji w bloku kodu filtru (dlatego może mieć tylko jedną `endfilter` dla bloku jeden filtr).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1915">The `endfilter` instruction must be the last instruction in the filter's code block (hence there can only be one `endfilter` for any single filter block).</span></span> <span data-ttu-id="68c9f-1916">Po wykonaniu `endfilter` instrukcji, kontrola logicznie przepływy do mechanizm obsługi wyjątków interfejsu wiersza polecenia.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1916">After executing the `endfilter` instruction, control logically flows back to the CLI exception handling mechanism.</span></span>  
  
 <span data-ttu-id="68c9f-1917">Kontrolki nie można przenieść do bloku filtru, z wyjątkiem za pośrednictwem mechanizmu wyjątku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1917">Control cannot be transferred into a filter block except through the exception mechanism.</span></span> <span data-ttu-id="68c9f-1918">Kontrolki nie mogą zostać przeniesione z bloku filtru z wyjątkiem za pośrednictwem `throw` instrukcji lub wykonując końcowe `endfilter` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1918">Control cannot be transferred out of a filter block except through the use of a `throw` instruction or by executing the final `endfilter` instruction.</span></span> <span data-ttu-id="68c9f-1919">Nie można osadzić `try` blokowania w ramach `filter` bloku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1919">You cannot embed a `try` block within a `filter` block.</span></span> <span data-ttu-id="68c9f-1920">Jeśli wyjątek jest generowany wewnątrz `filter` bloku, zostanie przechwycona i wartość 0 (`exception_continue_search`) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1920">If an exception is thrown inside the `filter` block, it is intercepted and a value of 0 (`exception_continue_search`) is returned.</span></span>  
  
 <span data-ttu-id="68c9f-1921">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `endfilter` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1921">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `endfilter` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1922">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1922">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Endfinally">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Endfinally;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Endfinally" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Endfinally" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Endfinally As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Endfinally;" />
      <MemberSignature Language="F#" Value=" staticval mutable Endfinally : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Endfinally" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1923">Przekazuje sterowanie z <see langword="fault" /> lub <see langword="finally" /> klauzuli bloku wyjątków do obsługi wyjątków Common Language Infrastructure (CLI).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1923">Transfers control from the <see langword="fault" /> or <see langword="finally" /> clause of an exception block back to the Common Language Infrastructure (CLI) exception handler.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1924">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1924">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1925">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1925">Format</span></span>|<span data-ttu-id="68c9f-1926">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1926">Assembly Format</span></span>|<span data-ttu-id="68c9f-1927">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1927">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1928">DC</span><span class="sxs-lookup"><span data-stu-id="68c9f-1928">DC</span></span>|<span data-ttu-id="68c9f-1929">Endfinally</span><span class="sxs-lookup"><span data-stu-id="68c9f-1929">endfinally</span></span><br /><br /> <span data-ttu-id="68c9f-1930">endfault</span><span class="sxs-lookup"><span data-stu-id="68c9f-1930">endfault</span></span>|<span data-ttu-id="68c9f-1931">Kończy się `finally` lub `fault` klauzuli bloku wyjątków.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1931">Ends the `finally` or `fault` clause of an exception block.</span></span>|  
  
 <span data-ttu-id="68c9f-1932">Nie ma żadnych stosu zachowania w tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1932">There are no stack transition behaviors for this instruction.</span></span>  
  
 `Endfinally` <span data-ttu-id="68c9f-1933">i `endfault` sygnał koniec `finally` lub `fault` klauzuli dzięki odwijanie stosu można kontynuować, dopóki nie zostanie wywołana procedura obsługi wyjątków.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1933">and `endfault` signal the end of the `finally` or `fault` clause so that stack unwinding can continue until the exception handler is invoked.</span></span> <span data-ttu-id="68c9f-1934">`endfinally` Lub `endfault` instrukcji przekazuje sterowanie do mechanizm wyjątków interfejsu wiersza polecenia.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1934">The `endfinally` or `endfault` instruction transfers control back to the CLI exception mechanism.</span></span> <span data-ttu-id="68c9f-1935">Mechanizm, a następnie wyszukuje następne `finally` klauzuli w łańcuchu w przypadku chronionego bloku zakończył się przy użyciu instrukcji pozostaw.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1935">The mechanism then searches for the next `finally` clause in the chain if the protected block was exited with a leave instruction.</span></span> <span data-ttu-id="68c9f-1936">Jeśli chronionego bloku został zakończony z powodu wyjątku, interfejsu wiersza polecenia wyszuka następnego `finally` lub `fault`, lub wprowadź wybrany podczas pierwszego przejścia dla obsługi wyjątków programu obsługi wyjątków.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1936">If the protected block was exited with an exception, the CLI will search for the next `finally` or `fault`, or enter the exception handler chosen during the first pass of exception handling.</span></span>  
  
 <span data-ttu-id="68c9f-1937">`endfinally` Instrukcji mogą się pojawiać jedynie leksykalnie poziomu `finally` bloku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1937">An `endfinally` instruction might only appear lexically within a `finally` block.</span></span> <span data-ttu-id="68c9f-1938">W odróżnieniu od `endfilter` instrukcji, nie jest wymagane, kończyć bloku `endfinally` instrukcji i mogą mieć dowolną liczbę `endfinally` instrukcje w bloku zgodnie z potrzebami.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1938">Unlike the `endfilter` instruction, there is no requirement that the block end with an `endfinally` instruction, and there can be as many `endfinally` instructions within the block as required.</span></span> <span data-ttu-id="68c9f-1939">Te ograniczenia dotyczą `endfault` instrukcji i `fault` bloku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1939">These same restrictions apply to the `endfault` instruction and the `fault` block.</span></span>  
  
 <span data-ttu-id="68c9f-1940">Kontrolki nie mogą zostać przeniesione do `finally` (lub `fault`) blokowania z wyjątkiem za pośrednictwem mechanizmu wyjątku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1940">Control cannot be transferred into a `finally` (or `fault`) block except through the exception mechanism.</span></span> <span data-ttu-id="68c9f-1941">Kontrolki nie mogą zostać przeniesione z `finally` (lub `fault`) blokowania z wyjątkiem za pośrednictwem `throw` instrukcji lub wykonywanie `endfinally` (lub `endfault`) instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1941">Control cannot be transferred out of a `finally` (or `fault`) block except through the use of a `throw` instruction or executing the `endfinally` (or `endfault`) instruction.</span></span> <span data-ttu-id="68c9f-1942">W szczególności należy "nie mogą zostać objęte" z `finally` (lub `fault`) bloku lub wykonać <xref:System.Reflection.Emit.OpCodes.Ret> lub <xref:System.Reflection.Emit.OpCodes.Leave> instrukcji w ramach `finally` (lub `fault`) bloku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1942">In particular, you cannot "fall out" of a `finally` (or `fault`) block or to execute a <xref:System.Reflection.Emit.OpCodes.Ret> or <xref:System.Reflection.Emit.OpCodes.Leave> instruction within a `finally` (or `fault`) block.</span></span>  
  
 <span data-ttu-id="68c9f-1943">Należy pamiętać, że `endfault` i `endfinally` instrukcje są aliasami — odpowiadają one ten sam kod operacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1943">Note that the `endfault` and `endfinally` instructions are aliases - they correspond to the same opcode.</span></span>  
  
 <span data-ttu-id="68c9f-1944">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `endfinally` (`endfault`) opcode, jak również `ILGenerator` metoda <xref:System.Reflection.Emit.ILGenerator.EndExceptionBlock%2A>.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1944">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `endfinally` (`endfault`) opcode, as well as the `ILGenerator` method <xref:System.Reflection.Emit.ILGenerator.EndExceptionBlock%2A>.</span></span>  
  
-   <span data-ttu-id="68c9f-1945">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1945">ILGenerator.Emit(OpCode)</span></span>  
  
-   <span data-ttu-id="68c9f-1946">ILGenerator.EndExceptionBlock()</span><span class="sxs-lookup"><span data-stu-id="68c9f-1946">ILGenerator.EndExceptionBlock()</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initblk">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Initblk;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Initblk" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Initblk" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Initblk As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Initblk;" />
      <MemberSignature Language="F#" Value=" staticval mutable Initblk : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Initblk" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1947">Inicjuje określony blok pamięć pod określonym adresem na dany rozmiar, a wartość początkową.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1947">Initializes a specified block of memory at a specific address to a given size and initial value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1948">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1948">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1949">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1949">Format</span></span>|<span data-ttu-id="68c9f-1950">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1950">Assembly Format</span></span>|<span data-ttu-id="68c9f-1951">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1951">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1952">FE 18</span><span class="sxs-lookup"><span data-stu-id="68c9f-1952">FE 18</span></span>|<span data-ttu-id="68c9f-1953">initblk</span><span class="sxs-lookup"><span data-stu-id="68c9f-1953">initblk</span></span>|<span data-ttu-id="68c9f-1954">W bloku pamięci dla danej wartości, należy ustawić każdej lokalizacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1954">Set each location in a block of memory to a given value.</span></span>|  
  
 <span data-ttu-id="68c9f-1955">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1955">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-1956">Adres początkowy są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1956">A starting address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-1957">Wartość inicjalizacji są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1957">An initialization value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-1958">Liczba bajtów do zainicjowania są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1958">The number of bytes to initialize is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="68c9f-1959">Liczba bajtów, wartość inicjalizacji i adres początkowy są zdjęte ze stosu ze stosu i inicjalizacja jest wykonywana zgodnie z ich wartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1959">The number of bytes, the initialization value, and the starting address are popped from the stack, and the initialization is performed as per their values.</span></span>  
  
 <span data-ttu-id="68c9f-1960">`initblk` Instrukcja Ustawia numer (`unsigned int32`) bajtów, zaczynając od określonego adresu (typu `native int`, `&`, lub `*`) na wartość inicjalizacji (typu `unsigned int8`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-1960">The `initblk` instruction sets the number (`unsigned int32`) of bytes starting at the specified address (of type `native int`, `&`, or `*`) to the initialization value (of type `unsigned int8`).</span></span> `initblk` <span data-ttu-id="68c9f-1961">przyjęto założenie, że adres początkowy jest wyrównany do naturalnym rozmiar maszyny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1961">assumes that the starting address is aligned to the natural size of the machine.</span></span>  
  
 <span data-ttu-id="68c9f-1962">Działanie `initblk` instrukcji może być zmienione przez bezpośrednio poprzedzający <xref:System.Reflection.Emit.OpCodes.Volatile> lub <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1962">The operation of the `initblk` instructions can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-1963">może zostać wygenerowany, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1963">may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="68c9f-1964">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `initblk` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1964">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `initblk` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1965">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1965">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Initobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Initobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Initobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Initobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Initobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Initobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Initobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1966">Inicjuje każdego pola typu wartości pod określonym adresem odwołanie o wartości null lub 0 odpowiedniego typu pierwotnego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1966">Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1967">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1967">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1968">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1968">Format</span></span>|<span data-ttu-id="68c9f-1969">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1969">Assembly Format</span></span>|<span data-ttu-id="68c9f-1970">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1970">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1971">FE 15 < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-1971">FE 15 < `T` ></span></span>|`initobj` `typeTok`|<span data-ttu-id="68c9f-1972">Inicjuje typu wartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1972">Initializes a value type.</span></span>|  
  
 <span data-ttu-id="68c9f-1973">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1973">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-1974">Adres typu wartości do zainicjowania są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1974">The address of the value type to initialize is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-1975">Adres zostanie zdjęte ze stosu; Typ wartości pod podanym adresem jest inicjowany jako typ `typeTok`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1975">The address is popped from the stack; the value type at the specified address is initialized as type `typeTok`.</span></span>  
  
 <span data-ttu-id="68c9f-1976">`initobj` Instrukcji inicjuje każdego pola typu wartości określone przez wypychanie adresu (typu `native int`, `&`, lub `*`) odwołanie o wartości null lub 0 odpowiedniego typu pierwotnego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1976">The `initobj` instruction initializes each field of the value type specified by the pushed address (of type `native int`, `&`, or `*`) to a null reference or a 0 of the appropriate primitive type.</span></span> <span data-ttu-id="68c9f-1977">Po ta metoda jest wywoływana, wystąpienie jest gotowy do wywoływanej metody konstruktora.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1977">After this method is called, the instance is ready for a constructor method to be called.</span></span> <span data-ttu-id="68c9f-1978">Jeśli `typeTok` jest typem referencyjnym tej instrukcji działa tak samo jak `ldnull` następuje `stind.ref`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1978">If `typeTok` is a reference type, this instruction has the same effect as `ldnull` followed by `stind.ref`.</span></span>  
  
 <span data-ttu-id="68c9f-1979">W odróżnieniu od <xref:System.Reflection.Emit.OpCodes.Newobj>, `initobj` nie wywołuje metody konstruktora.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1979">Unlike <xref:System.Reflection.Emit.OpCodes.Newobj>, `initobj` does not call the constructor method.</span></span> `Initobj` <span data-ttu-id="68c9f-1980">jest przeznaczony dla inicjowania typów wartości, podczas gdy `newobj` służy do przydzielania i Inicjowanie obiektów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1980">is intended for initializing value types, while `newobj` is used to allocate and initialize objects.</span></span>  
  
 <span data-ttu-id="68c9f-1981">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `initobj` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1981">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `initobj` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-1982">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="68c9f-1982">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Isinst">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Isinst;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Isinst" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Isinst" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Isinst As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Isinst;" />
      <MemberSignature Language="F#" Value=" staticval mutable Isinst : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Isinst" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-1983">Sprawdza, czy odwołanie do obiektu (typ <see langword="O" />) jest instancją konkretnej klasy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1983">Tests whether an object reference (type <see langword="O" />) is an instance of a particular class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-1984">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1984">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-1985">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-1985">Format</span></span>|<span data-ttu-id="68c9f-1986">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-1986">Assembly Format</span></span>|<span data-ttu-id="68c9f-1987">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-1987">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-1988">75 < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-1988">75 < `T` ></span></span>|<span data-ttu-id="68c9f-1989">isinst</span><span class="sxs-lookup"><span data-stu-id="68c9f-1989">isinst</span></span> `class`|<span data-ttu-id="68c9f-1990">Sprawdza, czy odwołanie do obiektu jest wystąpieniem `class`, zwraca odwołanie o wartości null lub wystąpienie tej klasy lub interfejsu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1990">Tests if an object reference is an instance of `class`, returning either a null reference or an instance of that class or interface.</span></span>|  
  
 <span data-ttu-id="68c9f-1991">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-1991">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-1992">Odwołanie do obiektu są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1992">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-1993">Odwołanie do obiektu jest zdjęte ze stosu ze stosu i przetestowany w celu ustalenia, czy jest wystąpienie klasy przekazanej `class`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1993">The object reference is popped from the stack and tested to see if it is an instance of the class passed in `class`.</span></span>  
  
3.  <span data-ttu-id="68c9f-1994">Wynik (odwołanie do obiektu lub odwołanie o wartości null) są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1994">The result (either an object reference or a null reference) is pushed onto the stack.</span></span>  
  
 `Class` <span data-ttu-id="68c9f-1995">token metadanych wskazuje odpowiednią klasę.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1995">is a metadata token indicating the desired class.</span></span> <span data-ttu-id="68c9f-1996">Jeśli implementuje klasę obiektu, w górnej części stosu `class` (Jeśli `class` jest interfejsem) lub klasę pochodną z `class` (Jeśli `class` jest zwykłej klasy), a następnie jest rzutowany na typ `class` i wyniki są wypychane na stos, dokładnie tak, jakby <xref:System.Reflection.Emit.OpCodes.Castclass> jakby została ona wywołana.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1996">If the class of the object on the top of the stack implements `class` (if `class` is an interface) or is a derived class of `class` (if `class` is a regular class) then it is cast to type `class` and the result is pushed on the stack, exactly as though <xref:System.Reflection.Emit.OpCodes.Castclass> had been called.</span></span> <span data-ttu-id="68c9f-1997">W przeciwnym razie odwołanie o wartości null są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1997">Otherwise, a null reference is pushed on the stack.</span></span> <span data-ttu-id="68c9f-1998">Jeśli odwołanie do obiektu, sama jest odwołanie o wartości null, następnie `isinst` podobnie zwraca odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1998">If the object reference itself is a null reference, then `isinst` likewise returns a null reference.</span></span>  
  
 <xref:System.TypeLoadException> <span data-ttu-id="68c9f-1999">jest generowany, jeśli nie można odnaleźć klasy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-1999">is thrown if class cannot be found.</span></span> <span data-ttu-id="68c9f-2000">Jest to zazwyczaj wykrywany, po instrukcji Microsoft Intermediate Language (MSIL) są konwertowane do kodu natywnego, a nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2000">This is typically detected when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="68c9f-2001">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `isinst` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2001">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `isinst` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2002">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2002">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Jmp">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Jmp;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Jmp" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Jmp" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Jmp As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Jmp;" />
      <MemberSignature Language="F#" Value=" staticval mutable Jmp : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Jmp" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2003">Zamyka bieżącą metodę i przechodzi do określonej metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2003">Exits current method and jumps to specified method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2004">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2004">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2005">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2005">Format</span></span>|<span data-ttu-id="68c9f-2006">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2006">Assembly Format</span></span>|<span data-ttu-id="68c9f-2007">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2007">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2008">27 < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-2008">27 < `T` ></span></span>|<span data-ttu-id="68c9f-2009">Element jmp</span><span class="sxs-lookup"><span data-stu-id="68c9f-2009">jmp</span></span> `method`|<span data-ttu-id="68c9f-2010">Zamknij bieżącą metodę i przeskoczyć do określonej metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2010">Exit current method and jump to specified method.</span></span>|  
  
 <span data-ttu-id="68c9f-2011">Nie ma żadnych stosu zachowania w tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2011">There are no stack transition behaviors for this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-2012">`jmp` (Szybkie) instrukcji przekaże kontrolę metodą określoną przez `method`, który jest token metadanych dla odwołania do metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2012">The `jmp` (jump) instruction transfers control to the method specified by `method`, which is a metadata token for a method reference.</span></span> <span data-ttu-id="68c9f-2013">Bieżące argumenty są przekazywane do metody docelowej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2013">The current arguments are transferred to the destination method.</span></span>  
  
 <span data-ttu-id="68c9f-2014">Stos oceny może być pusty, podczas wykonywania tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2014">The evaluation stack must be empty when this instruction is executed.</span></span> <span data-ttu-id="68c9f-2015">Konwencji wywoływania, liczby i typu argumentów, pod adresem docelowy musi być zgodna z bieżącą metodę.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2015">The calling convention, number and type of arguments at the destination address must match that of the current method.</span></span>  
  
 <span data-ttu-id="68c9f-2016">`jmp` Nie może być używana do przenieść kontroli poza `try`, `filter`, `catch`, lub `finally` bloku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2016">The `jmp` instruction cannot be used to transferred control out of a `try`, `filter`, `catch`, or `finally` block.</span></span>  
  
 <span data-ttu-id="68c9f-2017">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `jmp` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2017">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `jmp` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2018">ILGenerator.Emit(OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2018">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2019">Ładuje argumentu (odwołuje się określona wartość indeksu) na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2019">Loads an argument (referenced by a specified index value) onto the stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2020">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2020">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2021">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2021">Format</span></span>|<span data-ttu-id="68c9f-2022">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2022">Assembly Format</span></span>|<span data-ttu-id="68c9f-2023">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2023">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2024">FE 09 < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-2024">FE 09 < `unsigned int16` ></span></span>|<span data-ttu-id="68c9f-2025">ldarg</span><span class="sxs-lookup"><span data-stu-id="68c9f-2025">ldarg</span></span> `index`|<span data-ttu-id="68c9f-2026">Ładowanie argumentu w `index` na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2026">Load argument at `index` onto stack.</span></span>|  
  
 <span data-ttu-id="68c9f-2027">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2027">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2028">Wartość argumentu w `index` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2028">The argument value at `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2029">`ldarg` Instrukcji wypycha argument w `index`, gdzie argumenty są indeksowane z zakresu od 0 lub nowszy, na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2029">The `ldarg` instruction pushes the argument indexed at `index`, where arguments are indexed from 0 onwards, onto the evaluation stack.</span></span> <span data-ttu-id="68c9f-2030">`ldarg` Instrukcji można załadować typu wartości lub wartością pierwotną na stosie, kopiując je z argumentem przychodzących.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2030">The `ldarg` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="68c9f-2031">Typ wartości argumentu jest taki sam jak typ argumentu, określony przez bieżącą metodę podpisu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2031">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="68c9f-2032">Procedury, które przyjmują listy argumentów o zmiennej długości `ldarg` instrukcji może służyć tylko w przypadku wstępnego stałej argumentów, wyklucza te w zmiennej część podpisu (zobacz <xref:System.Reflection.Emit.OpCodes.Arglist> instrukcji, aby uzyskać więcej informacji).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2032">For procedures that take a variable-length argument list, the `ldarg` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature (see the <xref:System.Reflection.Emit.OpCodes.Arglist> instruction for more details).</span></span>  
  
 <span data-ttu-id="68c9f-2033">Argumenty, zawierających wartość całkowitą mniejszą niż 4 bajty są rozszerzane do typu `int32` , gdy są one załadowane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2033">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="68c9f-2034">Wartości zmiennoprzecinkowe są rozszerzane do ich rozmiaru natywnego (typ `F`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2034">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="68c9f-2035">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldarg` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2035">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2036">ILGenerator.Emit (OpCode, krótki)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2036">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2037">Ładuje argument pod indeksem 0 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2037">Loads the argument at index 0 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2038">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2038">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2039">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2039">Format</span></span>|<span data-ttu-id="68c9f-2040">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2040">Assembly Format</span></span>|<span data-ttu-id="68c9f-2041">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2041">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2042">02</span><span class="sxs-lookup"><span data-stu-id="68c9f-2042">02</span></span>|<span data-ttu-id="68c9f-2043">ldarg.0</span><span class="sxs-lookup"><span data-stu-id="68c9f-2043">ldarg.0</span></span>|<span data-ttu-id="68c9f-2044">Ładowanie argument 0 na stosie</span><span class="sxs-lookup"><span data-stu-id="68c9f-2044">Load argument 0 onto stack</span></span>|  
  
 <span data-ttu-id="68c9f-2045">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2045">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2046">Wartość argumentu pod indeksem 0 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2046">The argument value at index 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2047">`ldarg.0` Instrukcja jest efektywne kodowanie do ładowania wartość argumentu pod indeksem 0.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2047">The `ldarg.0` instruction is an efficient encoding for loading the argument value at index 0.</span></span>  
  
 <span data-ttu-id="68c9f-2048">`ldarg.0` Instrukcji wypycha argument indeksowane w lokalizacji 0 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2048">The `ldarg.0` instruction pushes the argument indexed at 0 onto the evaluation stack.</span></span> <span data-ttu-id="68c9f-2049">`ldarg.0` Instrukcji można załadować typu wartości lub wartością pierwotną na stosie, kopiując je z argumentem przychodzących.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2049">The `ldarg.0` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="68c9f-2050">Typ wartości argumentu jest taki sam jak typ argumentu, określony przez bieżącą metodę podpisu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2050">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="68c9f-2051">Argumenty, zawierających wartość całkowitą mniejszą niż 4 bajty są rozszerzane do typu `int32` , gdy są one załadowane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2051">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="68c9f-2052">Wartości zmiennoprzecinkowe są rozszerzane do ich rozmiaru natywnego (typ `F`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2052">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="68c9f-2053">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldarg.0` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2053">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.0` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2054">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2054">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2055">Ładuje argument pod indeksem 1 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2055">Loads the argument at index 1 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2056">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2056">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2057">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2057">Format</span></span>|<span data-ttu-id="68c9f-2058">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2058">Assembly Format</span></span>|<span data-ttu-id="68c9f-2059">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2059">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2060">03</span><span class="sxs-lookup"><span data-stu-id="68c9f-2060">03</span></span>|<span data-ttu-id="68c9f-2061">ldarg.1</span><span class="sxs-lookup"><span data-stu-id="68c9f-2061">ldarg.1</span></span>|<span data-ttu-id="68c9f-2062">Załaduj argumentu 1 na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2062">Load argument 1 onto stack.</span></span>|  
  
 <span data-ttu-id="68c9f-2063">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2063">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2064">Wartość argumentu pod indeksem 1 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2064">The argument value at index 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2065">`ldarg.1` Instrukcja jest efektywne kodowanie do ładowania wartość argumentu pod indeksem 1.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2065">The `ldarg.1` instruction is an efficient encoding for loading the argument value at index 1.</span></span>  
  
 <span data-ttu-id="68c9f-2066">`ldarg.1` Instrukcji wypycha argument indeksowane 1 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2066">The `ldarg.1` instruction pushes the argument indexed at 1 onto the evaluation stack.</span></span> <span data-ttu-id="68c9f-2067">`ldarg.1` Instrukcji można załadować typu wartości lub wartością pierwotną na stosie, kopiując je z argumentem przychodzących.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2067">The `ldarg.1` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="68c9f-2068">Typ wartości argumentu jest taki sam jak typ argumentu, określony przez bieżącą metodę podpisu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2068">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="68c9f-2069">Argumenty, zawierających wartość całkowitą mniejszą niż 4 bajty są rozszerzane do typu `int32` , gdy są one załadowane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2069">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="68c9f-2070">Wartości zmiennoprzecinkowe są rozszerzane do ich rozmiaru natywnego (typ `F`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2070">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="68c9f-2071">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldarg.1` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2071">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.1` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2072">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2072">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2073">Ładuje argument pod indeksem 2 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2073">Loads the argument at index 2 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2074">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2074">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2075">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2075">Format</span></span>|<span data-ttu-id="68c9f-2076">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2076">Assembly Format</span></span>|<span data-ttu-id="68c9f-2077">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2077">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2078">04</span><span class="sxs-lookup"><span data-stu-id="68c9f-2078">04</span></span>|<span data-ttu-id="68c9f-2079">ldarg.2</span><span class="sxs-lookup"><span data-stu-id="68c9f-2079">ldarg.2</span></span>|<span data-ttu-id="68c9f-2080">Załaduj argumentu 2 na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2080">Load argument 2 onto stack.</span></span>|  
  
 <span data-ttu-id="68c9f-2081">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2081">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2082">Wartość argumentu pod indeksem 2 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2082">The argument value at index 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2083">`ldarg.2` Instrukcja jest efektywne kodowanie do ładowania wartość argumentu pod indeksem 2.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2083">The `ldarg.2` instruction is an efficient encoding for loading the argument value at index 2.</span></span>  
  
 <span data-ttu-id="68c9f-2084">`ldarg.2` Instrukcji wypycha argument indeksowane w 2 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2084">The `ldarg.2` instruction pushes the argument indexed at 2 onto the evaluation stack.</span></span> <span data-ttu-id="68c9f-2085">`ldarg.2` Instrukcji można załadować typu wartości lub wartością pierwotną na stosie, kopiując je z argumentem przychodzących.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2085">The `ldarg.2` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="68c9f-2086">Typ wartości argumentu jest taki sam jak typ argumentu, określony przez bieżącą metodę podpisu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2086">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="68c9f-2087">Argumenty, zawierających wartość całkowitą mniejszą niż 4 bajty są rozszerzane do typu `int32` , gdy są one załadowane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2087">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="68c9f-2088">Wartości zmiennoprzecinkowe są rozszerzane do ich rozmiaru natywnego (typ `F`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2088">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="68c9f-2089">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldarg.2` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2089">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.2` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2090">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2090">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2091">Ładuje argument w indeksie 3 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2091">Loads the argument at index 3 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2092">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2092">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2093">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2093">Format</span></span>|<span data-ttu-id="68c9f-2094">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2094">Assembly Format</span></span>|<span data-ttu-id="68c9f-2095">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2095">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2096">05</span><span class="sxs-lookup"><span data-stu-id="68c9f-2096">05</span></span>|<span data-ttu-id="68c9f-2097">ldarg.3</span><span class="sxs-lookup"><span data-stu-id="68c9f-2097">ldarg.3</span></span>|<span data-ttu-id="68c9f-2098">Załaduj argumentu 3 na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2098">Load argument 3 onto stack.</span></span>|  
  
 <span data-ttu-id="68c9f-2099">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2099">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2100">Wartość argumentu indeksu 3 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2100">The argument value at index 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2101">`ldarg.3` Instrukcja jest efektywne kodowanie do ładowania wartość argumentu pod indeksem 3.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2101">The `ldarg.3` instruction is an efficient encoding for loading the argument value at index 3.</span></span>  
  
 <span data-ttu-id="68c9f-2102">`ldarg.3` Instrukcji wypycha argument w 3 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2102">The `ldarg.3` instruction pushes the argument indexed at 3 onto the evaluation stack.</span></span> <span data-ttu-id="68c9f-2103">`ldarg.3` Instrukcji można załadować typu wartości lub wartością pierwotną na stosie, kopiując je z argumentem przychodzących.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2103">The `ldarg.3` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="68c9f-2104">Typ wartości argumentu jest taki sam jak typ argumentu, określony przez bieżącą metodę podpisu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2104">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="68c9f-2105">Argumenty, zawierających wartość całkowitą mniejszą niż 4 bajty są rozszerzane do typu `int32` , gdy są one załadowane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2105">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="68c9f-2106">Wartości zmiennoprzecinkowe są rozszerzane do ich rozmiaru natywnego (typ `F`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2106">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="68c9f-2107">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldarg.3` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2107">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.3` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2108">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2108">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2109">Ładuje argumentu (do których odwołuje się za pomocą indeksu określonego krótka) na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2109">Loads the argument (referenced by a specified short form index) onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2110">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2110">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2111">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2111">Format</span></span>|<span data-ttu-id="68c9f-2112">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2112">Assembly Format</span></span>|<span data-ttu-id="68c9f-2113">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2113">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2114">0E < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-2114">0E < `unsigned int8` ></span></span>|<span data-ttu-id="68c9f-2115">ldarg.s</span><span class="sxs-lookup"><span data-stu-id="68c9f-2115">ldarg.s</span></span> `index`|<span data-ttu-id="68c9f-2116">Ładowanie argumentu w `index` na stosie, krótka.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2116">Load argument at `index` onto stack, short form.</span></span>|  
  
 <span data-ttu-id="68c9f-2117">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2117">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2118">Wartość argumentu w `index` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2118">The argument value at `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2119">`ldarg.s` Instrukcja jest efektywne kodowanie ładowania argumenty indeksowane od 4 do 255.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2119">The `ldarg.s` instruction is an efficient encoding for loading arguments indexed from 4 through 255.</span></span>  
  
 <span data-ttu-id="68c9f-2120">`ldarg.s` Instrukcji wypycha argument w `index`, gdzie argumenty są indeksowane z zakresu od 0 lub nowszy, na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2120">The `ldarg.s` instruction pushes the argument indexed at `index`, where arguments are indexed from 0 onwards, onto the evaluation stack.</span></span> <span data-ttu-id="68c9f-2121">`ldarg.s` Instrukcji można załadować typu wartości lub wartością pierwotną na stosie, kopiując je z argumentem przychodzących.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2121">The `ldarg.s` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="68c9f-2122">Typ wartości argumentu jest taki sam jak typ argumentu, określony przez bieżącą metodę podpisu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2122">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="68c9f-2123">Procedury, które przyjmują listy argumentów o zmiennej długości `ldarg.s` instrukcji może służyć tylko w przypadku wstępnego stałej argumentów, wyklucza te w zmiennej część podpisu (zobacz <xref:System.Reflection.Emit.OpCodes.Arglist> instrukcji, aby uzyskać więcej informacji).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2123">For procedures that take a variable-length argument list, the `ldarg.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature (see the <xref:System.Reflection.Emit.OpCodes.Arglist> instruction for more details).</span></span>  
  
 <span data-ttu-id="68c9f-2124">Argumenty, zawierających wartość całkowitą mniejszą niż 4 bajty są rozszerzane do typu `int32` , gdy są one załadowane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2124">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="68c9f-2125">Wartości zmiennoprzecinkowe są rozszerzane do ich rozmiaru natywnego (typ `F`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2125">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="68c9f-2126">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldarg.s` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2126">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.s` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2127">ILGenerator.Emit (OpCode, bajtów)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2127">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarga">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarga;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarga" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarga" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarga As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarga;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarga : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarga" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2128">Załaduj adresie argumentu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2128">Load an argument address onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2129">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2129">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2130">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2130">Format</span></span>|<span data-ttu-id="68c9f-2131">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2131">Assembly Format</span></span>|<span data-ttu-id="68c9f-2132">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2132">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2133">FE 0A &LT; `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-2133">FE 0A < `unsigned int16` ></span></span>|<span data-ttu-id="68c9f-2134">ldarga</span><span class="sxs-lookup"><span data-stu-id="68c9f-2134">ldarga</span></span> `index`|<span data-ttu-id="68c9f-2135">Pobrać adres indeksowane przez argument `index`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2135">Fetch the address of argument indexed by `index`.</span></span>|  
  
 <span data-ttu-id="68c9f-2136">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2136">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2137">Adres `addr` argumentu indeksowane przez `index` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2137">The address `addr` of the argument indexed by `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2138">`ldarga` Instrukcji pobiera adres (typu `*`) argumentu indeksowane przez `index`, gdzie argumenty są indeksowane z zakresu od 0 i nowszych wersjach.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2138">The `ldarga` instruction fetches the address (of type `*`) of the argument indexed by `index`, where arguments are indexed from 0 onwards.</span></span> <span data-ttu-id="68c9f-2139">Adres `addr` zawsze będzie wyrównany do naturalnym granic na komputerze docelowym.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2139">The address `addr` is always aligned to a natural boundary on the target machine.</span></span>  
  
 <span data-ttu-id="68c9f-2140">Procedury, które przyjmują listy argumentów o zmiennej długości `ldarga` instrukcji może służyć tylko w przypadku wstępnego stałej argumentów, wyklucza te w zmiennej część podpisu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2140">For procedures that take a variable-length argument list, the `ldarga` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 `ldarga` <span data-ttu-id="68c9f-2141">Służy do przekazywanie parametru przez odwołanie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2141">is used for by-ref parameter passing.</span></span> <span data-ttu-id="68c9f-2142">W pozostałych przypadkach <xref:System.Reflection.Emit.OpCodes.Ldarg> i <xref:System.Reflection.Emit.OpCodes.Starg> powinny być używane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2142">For other cases, <xref:System.Reflection.Emit.OpCodes.Ldarg> and <xref:System.Reflection.Emit.OpCodes.Starg> should be used.</span></span>  
  
 <span data-ttu-id="68c9f-2143">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldarga` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2143">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarga` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2144">ILGenerator.Emit (OpCode, krótki)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2144">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarga_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarga_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarga_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarga_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarga_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarga_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarga_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarga_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2145">Załaduj adresie argumentu w krótkiej formy, na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2145">Load an argument address, in short form, onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2146">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2146">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2147">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2147">Format</span></span>|<span data-ttu-id="68c9f-2148">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2148">Assembly Format</span></span>|<span data-ttu-id="68c9f-2149">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2149">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2150">0F < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-2150">0F < `unsigned int8` ></span></span>|<span data-ttu-id="68c9f-2151">ldarga.s</span><span class="sxs-lookup"><span data-stu-id="68c9f-2151">ldarga.s</span></span> `index`|<span data-ttu-id="68c9f-2152">Pobrać adres indeksowane przez argument `index`, krótka.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2152">Fetch the address of argument indexed by `index`, short form.</span></span>|  
  
 <span data-ttu-id="68c9f-2153">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2153">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2154">Adres `addr` argumentu indeksowane przez `index` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2154">The address `addr` of the argument indexed by `index` is pushed onto the stack.</span></span>  
  
 `ldarga.s` <span data-ttu-id="68c9f-2155">(krótkiej formy `ldarga`) powinna być używana dla argumentu cyfry od 0 do 255 i jest bardziej efektywne kodowanie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2155">(the short form of `ldarga`) should be used for argument numbers 0 through 255, and is a more efficient encoding.</span></span>  
  
 <span data-ttu-id="68c9f-2156">`ldarga.s` Instrukcji pobiera adres (typu`*`) argumentu indeksowane przez `index`, gdzie argumenty są indeksowane z zakresu od 0 i nowszych wersjach.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2156">The `ldarga.s` instruction fetches the address (of type`*`) of the argument indexed by `index`, where arguments are indexed from 0 onwards.</span></span> <span data-ttu-id="68c9f-2157">Adres `addr` zawsze będzie wyrównany do naturalnym granic na komputerze docelowym.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2157">The address `addr` is always aligned to a natural boundary on the target machine.</span></span>  
  
 <span data-ttu-id="68c9f-2158">Procedury, które przyjmują listy argumentów o zmiennej długości `ldarga.s` instrukcji może służyć tylko w przypadku wstępnego stałej argumentów, wyklucza te w zmiennej część podpisu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2158">For procedures that take a variable-length argument list, the `ldarga.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 `ldarga.s` <span data-ttu-id="68c9f-2159">Służy do przekazywanie parametru przez odwołanie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2159">is used for by-ref parameter passing.</span></span> <span data-ttu-id="68c9f-2160">W pozostałych przypadkach <xref:System.Reflection.Emit.OpCodes.Ldarg_S> i <xref:System.Reflection.Emit.OpCodes.Starg_S> powinny być używane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2160">For other cases, <xref:System.Reflection.Emit.OpCodes.Ldarg_S> and <xref:System.Reflection.Emit.OpCodes.Starg_S> should be used.</span></span>  
  
 <span data-ttu-id="68c9f-2161">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldarga.s` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2161">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarga.s` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2162">ILGenerator.Emit (OpCode, bajtów)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2162">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2163">Wypycha podanej wartości typu <see langword="int32" /> na stosie oceny jako <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2163">Pushes a supplied value of type <see langword="int32" /> onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2164">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2164">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2165">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2165">Format</span></span>|<span data-ttu-id="68c9f-2166">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2166">Assembly Format</span></span>|<span data-ttu-id="68c9f-2167">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2167">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2168">20 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-2168">20 < `int32` ></span></span>|<span data-ttu-id="68c9f-2169">ldc.i4</span><span class="sxs-lookup"><span data-stu-id="68c9f-2169">ldc.i4</span></span> `num`|<span data-ttu-id="68c9f-2170">Wypychanie wartości `num` na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2170">Pushes the value `num` onto the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-2171">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2171">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2172">Wartość `num` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2172">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2173">Należy pamiętać, że nie istnieją specjalne kodowania krótki (i dlatego jest bardziej wydajne) liczby całkowite od -128 do 127, a szczególnie krótkie kodowanie scalanych -1 do 8.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2173">Note that there are special short (and hence more efficient) encodings for the integers -128 through 127, and especially short encodings for -1 through 8.</span></span> <span data-ttu-id="68c9f-2174">Wszystkie krótkie kodowanie 4-bajtowych liczb całkowitych są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2174">All short encodings push 4 byte integers on the stack.</span></span> <span data-ttu-id="68c9f-2175">Dłużej kodowania są używane dla 8-bajtowe liczby całkowite i 4 lub 8 bajtów liczb zmiennoprzecinkowych, a także wartości 4-bajtowych, które nie mieszczą się w formularzach krótki.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2175">Longer encodings are used for 8 byte integers and 4 and 8 byte floating-point numbers, as well as 4-byte values that do not fit in the short forms.</span></span> <span data-ttu-id="68c9f-2176">Istnieją trzy sposoby wypychania stała liczba całkowita 8 bajtów na stosie</span><span class="sxs-lookup"><span data-stu-id="68c9f-2176">There are three ways to push an 8 byte integer constant onto the stack</span></span>  
  
 1. <span data-ttu-id="68c9f-2177">Użyj <xref:System.Reflection.Emit.OpCodes.Ldc_I8> instrukcji dla stałych, które muszą być wyrażone w więcej niż 32-bitowy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2177">Use the <xref:System.Reflection.Emit.OpCodes.Ldc_I8> instruction for constants that must be expressed in more than 32 bits.</span></span>  
  
 2. <span data-ttu-id="68c9f-2178">Użyj <xref:System.Reflection.Emit.OpCodes.Ldc_I4> instrukcji, następuje <xref:System.Reflection.Emit.OpCodes.Conv_I8> dla stałych, które wymagają usługi bits 9 do 32.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2178">Use the <xref:System.Reflection.Emit.OpCodes.Ldc_I4> instruction followed by a <xref:System.Reflection.Emit.OpCodes.Conv_I8> for constants that require 9 to 32 bits.</span></span>  
  
 3. <span data-ttu-id="68c9f-2179">Użyj instrukcji krótka, następuje <xref:System.Reflection.Emit.OpCodes.Conv_I8> dla stałych, które mogą być wyrażone w bitach 8 lub mniej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2179">Use a short form instruction followed by a <xref:System.Reflection.Emit.OpCodes.Conv_I8> for constants that can be expressed in 8 or fewer bits.</span></span>  
  
 <span data-ttu-id="68c9f-2180">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldc.i4` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2180">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2181">ILGenerator.Emit (OpCode, int)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2181">ILGenerator.Emit(OpCode, int)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2182">Wypychanie wartości liczby całkowitej 0 na stosie oceny jako <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2182">Pushes the integer value of 0 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2183">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2183">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2184">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2184">Format</span></span>|<span data-ttu-id="68c9f-2185">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2185">Assembly Format</span></span>|<span data-ttu-id="68c9f-2186">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2186">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2187">16</span><span class="sxs-lookup"><span data-stu-id="68c9f-2187">16</span></span>|<span data-ttu-id="68c9f-2188">ldc.i4.0</span><span class="sxs-lookup"><span data-stu-id="68c9f-2188">ldc.i4.0</span></span>|<span data-ttu-id="68c9f-2189">Wypycha 0 na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2189">Pushes 0 onto the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-2190">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2190">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2191">Wartość 0 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2191">The value 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2192">Są to specjalne krótkie kodowanie do wypychania wartości całkowitej 0.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2192">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="68c9f-2193">Wszystkie specjalne krótkie kodowanie Wypchnij 4-bajtowych liczb całkowitych na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2193">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2194">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldc.i4.0` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2194">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.0` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2195">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2195">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2196">Wypychanie 1 na stosie oceny jako wartość całkowitą <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2196">Pushes the integer value of 1 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2197">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2197">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2198">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2198">Format</span></span>|<span data-ttu-id="68c9f-2199">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2199">Assembly Format</span></span>|<span data-ttu-id="68c9f-2200">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2200">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2201">17</span><span class="sxs-lookup"><span data-stu-id="68c9f-2201">17</span></span>|<span data-ttu-id="68c9f-2202">ldc.i4.1</span><span class="sxs-lookup"><span data-stu-id="68c9f-2202">ldc.i4.1</span></span>|<span data-ttu-id="68c9f-2203">Wypychanie 1 na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2203">Pushes 1 onto the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-2204">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2204">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2205">Wartość 1 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2205">The value 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2206">Są to specjalne krótkie kodowanie do wypychania wartości całkowitej 0.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2206">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="68c9f-2207">Wszystkie specjalne krótkie kodowanie Wypchnij 4-bajtowych liczb całkowitych na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2207">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2208">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldc.i4.1` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2208">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.1` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2209">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2209">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2210">Wypycha wartość całkowitą 2 na stosie oceny jako <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2210">Pushes the integer value of 2 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2211">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2211">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2212">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2212">Format</span></span>|<span data-ttu-id="68c9f-2213">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2213">Assembly Format</span></span>|<span data-ttu-id="68c9f-2214">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2214">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2215">18</span><span class="sxs-lookup"><span data-stu-id="68c9f-2215">18</span></span>|<span data-ttu-id="68c9f-2216">ldc.i4.2</span><span class="sxs-lookup"><span data-stu-id="68c9f-2216">ldc.i4.2</span></span>|<span data-ttu-id="68c9f-2217">Wypycha 2 na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2217">Pushes 2 onto the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-2218">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2218">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2219">Wartość 2 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2219">The value 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2220">Są to specjalne krótkie kodowanie do wypychania wartości całkowitej 0.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2220">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="68c9f-2221">Wszystkie specjalne krótkie kodowanie Wypchnij 4-bajtowych liczb całkowitych na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2221">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2222">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldc.i4.2` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2222">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.2` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2223">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2223">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2224">Wypycha wartość całkowitą 3 na stosie oceny jako <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2224">Pushes the integer value of 3 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2225">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2225">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2226">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2226">Format</span></span>|<span data-ttu-id="68c9f-2227">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2227">Assembly Format</span></span>|<span data-ttu-id="68c9f-2228">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2228">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2229">19</span><span class="sxs-lookup"><span data-stu-id="68c9f-2229">19</span></span>|<span data-ttu-id="68c9f-2230">ldc.i4.3</span><span class="sxs-lookup"><span data-stu-id="68c9f-2230">ldc.i4.3</span></span>|<span data-ttu-id="68c9f-2231">Wypycha 3 na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2231">Pushes 3 onto the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-2232">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2232">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2233">Wartość 3 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2233">The value 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2234">Są to specjalne krótkie kodowanie do wypychania wartości całkowitej 0.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2234">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="68c9f-2235">Wszystkie specjalne krótkie kodowanie Wypchnij 4-bajtowych liczb całkowitych na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2235">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2236">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldc.i4.3` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2236">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.3` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2237">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2237">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2238">Wypycha wartość całkowitą 4 na stosie oceny jako <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2238">Pushes the integer value of 4 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2239">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2239">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2240">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2240">Format</span></span>|<span data-ttu-id="68c9f-2241">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2241">Assembly Format</span></span>|<span data-ttu-id="68c9f-2242">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2242">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2243">1A</span><span class="sxs-lookup"><span data-stu-id="68c9f-2243">1A</span></span>|<span data-ttu-id="68c9f-2244">ldc.i4.4</span><span class="sxs-lookup"><span data-stu-id="68c9f-2244">ldc.i4.4</span></span>|<span data-ttu-id="68c9f-2245">Wypycha 4 na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2245">Pushes 4 onto the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-2246">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2246">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2247">Wartość 4 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2247">The value 4 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2248">Są to specjalne krótkie kodowanie do wypychania wartości całkowitej 0.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2248">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="68c9f-2249">Wszystkie specjalne krótkie kodowanie Wypchnij 4-bajtowych liczb całkowitych na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2249">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2250">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldc.i4.4` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2250">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.4` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2251">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2251">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_5">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_5;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_5" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_5" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_5 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_5;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_5 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_5" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2252">Wypycha wartość całkowitą, 5 na stosie oceny jako <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2252">Pushes the integer value of 5 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2253">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2253">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2254">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2254">Format</span></span>|<span data-ttu-id="68c9f-2255">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2255">Assembly Format</span></span>|<span data-ttu-id="68c9f-2256">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2256">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2257">1B</span><span class="sxs-lookup"><span data-stu-id="68c9f-2257">1B</span></span>|<span data-ttu-id="68c9f-2258">ldc.i4.5</span><span class="sxs-lookup"><span data-stu-id="68c9f-2258">ldc.i4.5</span></span>|<span data-ttu-id="68c9f-2259">Wypycha 5 na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2259">Pushes 5 onto the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-2260">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2260">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2261">Wartość 5 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2261">The value 5 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2262">Są to specjalne krótkie kodowanie do wypychania wartości całkowitej 0.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2262">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="68c9f-2263">Wszystkie specjalne krótkie kodowanie Wypchnij 4-bajtowych liczb całkowitych na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2263">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2264">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldc.i4.5` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2264">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.5` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2265">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2265">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_6">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_6;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_6" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_6 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_6;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_6 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_6" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2266">Wypycha wartość całkowitą, 6 na stosie oceny jako <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2266">Pushes the integer value of 6 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2267">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2267">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2268">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2268">Format</span></span>|<span data-ttu-id="68c9f-2269">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2269">Assembly Format</span></span>|<span data-ttu-id="68c9f-2270">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2270">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2271">1C</span><span class="sxs-lookup"><span data-stu-id="68c9f-2271">1C</span></span>|<span data-ttu-id="68c9f-2272">ldc.i4.6</span><span class="sxs-lookup"><span data-stu-id="68c9f-2272">ldc.i4.6</span></span>|<span data-ttu-id="68c9f-2273">Wypycha 6 na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2273">Pushes 6 onto the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-2274">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2274">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2275">Wartość 6 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2275">The value 6 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2276">Są to specjalne krótkie kodowanie do wypychania wartości całkowitej 0.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2276">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="68c9f-2277">Wszystkie specjalne krótkie kodowanie Wypchnij 4-bajtowych liczb całkowitych na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2277">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2278">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldc.i4.6` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2278">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.6` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2279">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2279">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_7">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_7;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_7" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_7 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_7;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_7 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_7" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2280">Wypycha wartość całkowitą 7 na stosie oceny jako <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2280">Pushes the integer value of 7 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2281">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2281">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2282">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2282">Format</span></span>|<span data-ttu-id="68c9f-2283">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2283">Assembly Format</span></span>|<span data-ttu-id="68c9f-2284">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2284">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2285">1D</span><span class="sxs-lookup"><span data-stu-id="68c9f-2285">1D</span></span>|<span data-ttu-id="68c9f-2286">ldc.i4.7</span><span class="sxs-lookup"><span data-stu-id="68c9f-2286">ldc.i4.7</span></span>|<span data-ttu-id="68c9f-2287">Wypycha 7 na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2287">Pushes 7 onto the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-2288">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2288">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2289">Wartość 7 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2289">The value 7 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2290">Są to specjalne krótkie kodowanie do wypychania wartości całkowitej 0.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2290">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="68c9f-2291">Wszystkie specjalne krótkie kodowanie Wypchnij 4-bajtowych liczb całkowitych na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2291">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2292">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldc.i4.7` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2292">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.7` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2293">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2293">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2294">Wypycha wartość całkowita 8 na stosie oceny jako <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2294">Pushes the integer value of 8 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2295">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2295">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2296">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2296">Format</span></span>|<span data-ttu-id="68c9f-2297">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2297">Assembly Format</span></span>|<span data-ttu-id="68c9f-2298">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2298">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2299">1E</span><span class="sxs-lookup"><span data-stu-id="68c9f-2299">1E</span></span>|<span data-ttu-id="68c9f-2300">ldc.i4.8</span><span class="sxs-lookup"><span data-stu-id="68c9f-2300">ldc.i4.8</span></span>|<span data-ttu-id="68c9f-2301">Wypycha 8 na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2301">Pushes 8 onto the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-2302">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2302">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2303">Wartość 8 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2303">The value 8 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2304">Są to specjalne krótkie kodowanie do wypychania wartości całkowitej 0.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2304">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="68c9f-2305">Wszystkie specjalne krótkie kodowanie Wypchnij 4-bajtowych liczb całkowitych na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2305">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2306">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldc.i4.8` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2306">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.8` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2307">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2307">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_M1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_M1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_M1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_M1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_M1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_M1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_M1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2308">Wypycha wartość całkowitą,-1 na stosie oceny jako <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2308">Pushes the integer value of -1 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2309">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2309">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2310">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2310">Format</span></span>|<span data-ttu-id="68c9f-2311">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2311">Assembly Format</span></span>|<span data-ttu-id="68c9f-2312">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2312">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2313">15</span><span class="sxs-lookup"><span data-stu-id="68c9f-2313">15</span></span>|<span data-ttu-id="68c9f-2314">ldc.i4.m1</span><span class="sxs-lookup"><span data-stu-id="68c9f-2314">ldc.i4.m1</span></span>|<span data-ttu-id="68c9f-2315">Wypycha -1 na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2315">Pushes -1 onto the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-2316">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2316">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2317">Wartość -1 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2317">The value -1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2318">Są to specjalne krótkie kodowanie do wypychania wartości całkowitej 0.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2318">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="68c9f-2319">Wszystkie specjalne krótkie kodowanie Wypchnij 4-bajtowych liczb całkowitych na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2319">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2320">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldc.i4.m1` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2320">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.m1` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2321">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2321">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2322">Wypycha podane <see langword="int8" /> wartość na stosie oceny jako <see langword="int32" />, krótka.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2322">Pushes the supplied <see langword="int8" /> value onto the evaluation stack as an <see langword="int32" />, short form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2323">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2323">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2324">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2324">Format</span></span>|<span data-ttu-id="68c9f-2325">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2325">Assembly Format</span></span>|<span data-ttu-id="68c9f-2326">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2326">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2327">1F < `int8` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-2327">1F < `int8` ></span></span>|<span data-ttu-id="68c9f-2328">ldc.i4.s</span><span class="sxs-lookup"><span data-stu-id="68c9f-2328">ldc.i4.s</span></span> `num`|<span data-ttu-id="68c9f-2329">Wypycha `num` na stosie jako `int32`, krótka.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2329">Pushes `num` onto the stack as `int32`, short form.</span></span>|  
  
 <span data-ttu-id="68c9f-2330">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2330">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2331">Wartość `num` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2331">The value `num` is pushed onto the stack.</span></span>  
  
 `ldc.i4.s` <span data-ttu-id="68c9f-2332">jest bardziej efektywne kodowanie wypychania liczby całkowite od -128 do 127 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2332">is a more efficient encoding for pushing the integers from -128 to 127 onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="68c9f-2333">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldc.i4.s` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2333">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.s` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2334">ILGenerator.Emit (OpCode, bajtów)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2334">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2335">Wypycha podanej wartości typu <see langword="int64" /> na stosie oceny jako <see langword="int64" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2335">Pushes a supplied value of type <see langword="int64" /> onto the evaluation stack as an <see langword="int64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2336">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2336">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2337">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2337">Format</span></span>|<span data-ttu-id="68c9f-2338">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2338">Assembly Format</span></span>|<span data-ttu-id="68c9f-2339">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2339">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2340">21 < `int64` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-2340">21 < `int64` ></span></span>|<span data-ttu-id="68c9f-2341">ldc.i8</span><span class="sxs-lookup"><span data-stu-id="68c9f-2341">ldc.i8</span></span> `num`|<span data-ttu-id="68c9f-2342">Wypycha `num` na stosie jako `int64`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2342">Pushes `num` onto the stack as `int64`.</span></span>|  
  
 <span data-ttu-id="68c9f-2343">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2343">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2344">Wartość `num` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2344">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2345">To kodowanie wypycha `int64` wartość na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2345">This encoding pushes an `int64` value onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2346">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldc.i8` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2346">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i8` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2347">ILGenerator.Emit (OpCode, długi)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2347">ILGenerator.Emit(OpCode, long)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2348">Wypycha podanej wartości typu <see langword="float32" /> na stosie oceny jako typ <see langword="F" /> (float).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2348">Pushes a supplied value of type <see langword="float32" /> onto the evaluation stack as type <see langword="F" /> (float).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2349">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2349">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2350">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2350">Format</span></span>|<span data-ttu-id="68c9f-2351">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2351">Assembly Format</span></span>|<span data-ttu-id="68c9f-2352">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2352">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2353">22 < `float32` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-2353">22 < `float32` ></span></span>|<span data-ttu-id="68c9f-2354">ldc.r4</span><span class="sxs-lookup"><span data-stu-id="68c9f-2354">ldc.r4</span></span> `num`|<span data-ttu-id="68c9f-2355">Wypycha `num` na stosie jako `F`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2355">Pushes `num` onto the stack as `F`.</span></span>|  
  
 <span data-ttu-id="68c9f-2356">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2356">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2357">Wartość `num` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2357">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2358">To kodowanie wypycha `float32` wartość na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2358">This encoding pushes a `float32` value onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2359">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldc.r4` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2359">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.r4` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2360">ILGenerator.Emit (OpCode, pojedynczy)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2360">ILGenerator.Emit(OpCode, single)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2361">Wypycha podanej wartości typu <see langword="float64" /> na stosie oceny jako typ <see langword="F" /> (float).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2361">Pushes a supplied value of type <see langword="float64" /> onto the evaluation stack as type <see langword="F" /> (float).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2362">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2362">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2363">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2363">Format</span></span>|<span data-ttu-id="68c9f-2364">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2364">Assembly Format</span></span>|<span data-ttu-id="68c9f-2365">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2365">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2366">23 < `float64` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-2366">23 < `float64` ></span></span>|<span data-ttu-id="68c9f-2367">ldc.r8</span><span class="sxs-lookup"><span data-stu-id="68c9f-2367">ldc.r8</span></span> `num`|<span data-ttu-id="68c9f-2368">Wypycha `num` na stosie jako `F`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2368">Pushes `num` onto the stack as `F`.</span></span>|  
  
 <span data-ttu-id="68c9f-2369">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2369">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2370">Wartość `num` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2370">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2371">To kodowanie wypycha `float64` wartość na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2371">This encoding pushes a `float64` value onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2372">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldc.r8` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2372">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.r8` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2373">ILGenerator.Emit (OpCode, double)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2373">ILGenerator.Emit(OpCode, double)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2374">Ładuje element w indeksie określonej tablicy, na szczycie stosu oceny jako typ określony w instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2374">Loads the element at a specified array index onto the top of the evaluation stack as the type specified in the instruction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2375">W poniższej tabeli wymieniono szesnastkowym i format programu Microsoft intermediate language (MSIL) zestawu, wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2375">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2376">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2376">Format</span></span>|<span data-ttu-id="68c9f-2377">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2377">Assembly Format</span></span>|<span data-ttu-id="68c9f-2378">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2378">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2379">A3 < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-2379">A3 < `T` ></span></span>|<span data-ttu-id="68c9f-2380">ldelem</span><span class="sxs-lookup"><span data-stu-id="68c9f-2380">ldelem</span></span> `typeTok`|<span data-ttu-id="68c9f-2381">Ładuje element przy `index` na górze stosu jako typ `typeTok`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2381">Loads the element at `index` onto the top of the stack as type `typeTok`.</span></span>|  
  
 <span data-ttu-id="68c9f-2382">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2382">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2383">Odwołanie do obiektu `array` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2383">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2384">Wartość indeksu `index` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2384">An index value `index` is pushed onto the stack.</span></span>  
  
3.  `index` <span data-ttu-id="68c9f-2385">i `array` są zdjęte ze stosu ze stosu; wartość przechowywaną w położeniu `index` w `array` będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2385">and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="68c9f-2386">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2386">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2387">`ldelem` Instrukcji ładuje wartość elementu o indeksie `index` (typ `native int`) w tablicy jednowymiarowej liczony od zera `array` i umieszcza je w górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2387">The `ldelem` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="68c9f-2388">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2388">Arrays are objects, and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="68c9f-2389">Typ wartości zwracanej jest określany przez token `typeTok` w instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2389">The type of the return value is specified by the token `typeTok` in the instruction.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-2390">jest generowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2390">is thrown if `array` is a null reference.</span></span>  
  
 <xref:System.IndexOutOfRangeException> <span data-ttu-id="68c9f-2391">jest generowany, jeśli `index` jest ujemny lub większa niż górna granica `array`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2391">is thrown if `index` is negative, or larger than the upper bound of `array`.</span></span>  
  
 <span data-ttu-id="68c9f-2392">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldelem` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2392">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2393">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2393">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2394">Ładuje elementu z typem <see langword="native int" /> indeksem określonej tablicy na górze stosu oceny jako <see langword="native int" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2394">Loads the element with type <see langword="native int" /> at a specified array index onto the top of the evaluation stack as a <see langword="native int" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2395">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2395">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2396">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2396">Format</span></span>|<span data-ttu-id="68c9f-2397">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2397">Assembly Format</span></span>|<span data-ttu-id="68c9f-2398">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2398">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2399">97</span><span class="sxs-lookup"><span data-stu-id="68c9f-2399">97</span></span>|<span data-ttu-id="68c9f-2400">ldelem.i</span><span class="sxs-lookup"><span data-stu-id="68c9f-2400">ldelem.i</span></span>|<span data-ttu-id="68c9f-2401">Ładuje elementu z typem `native int` na `index` na górze stosu jako `native int`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2401">Loads the element with type `native int` at `index` onto the top of the stack as a `native int`.</span></span>|  
  
 <span data-ttu-id="68c9f-2402">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2402">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2403">Odwołanie do obiektu `array` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2403">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2404">Wartość indeksu `index` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2404">An index value `index` is pushed onto the stack.</span></span>  
  
3.  `index` <span data-ttu-id="68c9f-2405">i `array` są zdjęte ze stosu ze stosu; wartość przechowywaną w położeniu `index` w `array` będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2405">and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="68c9f-2406">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2406">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2407">`ldelem.i` Instrukcji ładuje wartość elementu o indeksie `index` (typ `native int`) w tablicy jednowymiarowej liczony od zera `array` i umieszcza je w górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2407">The `ldelem.i` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="68c9f-2408">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2408">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="68c9f-2409">Wartość zwracana dla `ldelem.i` jest `native int`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2409">The return value for `ldelem.i` is `native int`.</span></span>  
  
 <span data-ttu-id="68c9f-2410">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` (nie `native int`), gdy są one załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2410">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-2411">jest generowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2411">is thrown if `array` is a null reference.</span></span>  
  
 <xref:System.ArrayTypeMismatchException> <span data-ttu-id="68c9f-2412">jest generowany, jeśli `array` nie przechowuje elementy typu wymagane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2412">is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <xref:System.IndexOutOfRangeException> <span data-ttu-id="68c9f-2413">jest generowany, jeśli `index` jest ujemny lub większy niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2413">is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="68c9f-2414">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldelem.i` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2414">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2415">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2415">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2416">Ładuje elementu z typem <see langword="int8" /> indeksem określonej tablicy na górze stosu oceny jako <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2416">Loads the element with type <see langword="int8" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2417">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2417">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2418">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2418">Format</span></span>|<span data-ttu-id="68c9f-2419">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2419">Assembly Format</span></span>|<span data-ttu-id="68c9f-2420">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2420">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2421">90</span><span class="sxs-lookup"><span data-stu-id="68c9f-2421">90</span></span>|<span data-ttu-id="68c9f-2422">ldelem.i1</span><span class="sxs-lookup"><span data-stu-id="68c9f-2422">ldelem.i1</span></span>|<span data-ttu-id="68c9f-2423">Ładuje elementu z typem `int8` na `index` na górze stosu jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2423">Loads the element with type `int8` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="68c9f-2424">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2424">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2425">Odwołanie do obiektu `array` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2425">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2426">Wartość indeksu `index` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2426">An index value `index` is pushed onto the stack.</span></span>  
  
3.  `index` <span data-ttu-id="68c9f-2427">i `array` są zdjęte ze stosu ze stosu; wartość przechowywaną w położeniu `index` w `array` będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2427">and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="68c9f-2428">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2428">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2429">`ldelem.i1` Instrukcji ładuje wartość elementu o indeksie `index` (typ `native int`) w tablicy jednowymiarowej liczony od zera `array` i umieszcza je w górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2429">The `ldelem.i1` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="68c9f-2430">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2430">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="68c9f-2431">Wartość zwracana dla `ldelem.i1` jest `int8`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2431">The return value for `ldelem.i1` is `int8`.</span></span>  
  
 <span data-ttu-id="68c9f-2432">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` (nie `native int`), gdy są one załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2432">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-2433">jest generowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2433">is thrown if `array` is a null reference.</span></span>  
  
 <xref:System.ArrayTypeMismatchException> <span data-ttu-id="68c9f-2434">jest generowany, jeśli `array` nie przechowuje elementy typu wymagane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2434">is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <xref:System.IndexOutOfRangeException> <span data-ttu-id="68c9f-2435">jest generowany, jeśli `index` jest ujemny lub większy niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2435">is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="68c9f-2436">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldelem.i1` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2436">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i1` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2437">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2437">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2438">Ładuje elementu z typem <see langword="int16" /> indeksem określonej tablicy na górze stosu oceny jako <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2438">Loads the element with type <see langword="int16" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2439">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2439">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2440">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2440">Format</span></span>|<span data-ttu-id="68c9f-2441">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2441">Assembly Format</span></span>|<span data-ttu-id="68c9f-2442">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2442">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2443">92</span><span class="sxs-lookup"><span data-stu-id="68c9f-2443">92</span></span>|<span data-ttu-id="68c9f-2444">ldelem.i2</span><span class="sxs-lookup"><span data-stu-id="68c9f-2444">ldelem.i2</span></span>|<span data-ttu-id="68c9f-2445">Ładuje elementu z typem `int16` na `index` na górze stosu jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2445">Loads the element with type `int16` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="68c9f-2446">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2446">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2447">Odwołanie do obiektu `array` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2447">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2448">Wartość indeksu `index` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2448">An index value `index` is pushed onto the stack.</span></span>  
  
3.  `index` <span data-ttu-id="68c9f-2449">i `array` są zdjęte ze stosu ze stosu; wartość przechowywaną w położeniu `index` w `array` będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2449">and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="68c9f-2450">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2450">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2451">`ldelem.i2` Instrukcji ładuje wartość elementu o indeksie `index` (typ `native int`) w tablicy jednowymiarowej liczony od zera `array` i umieszcza je w górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2451">The `ldelem.i2` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="68c9f-2452">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2452">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="68c9f-2453">Wartość zwracana dla `ldelem.i2` jest `int16`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2453">The return value for `ldelem.i2` is `int16`.</span></span>  
  
 <span data-ttu-id="68c9f-2454">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` (nie `native int`), gdy są one załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2454">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-2455">jest generowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2455">is thrown if `array` is a null reference.</span></span>  
  
 <xref:System.ArrayTypeMismatchException> <span data-ttu-id="68c9f-2456">jest generowany, jeśli `array` nie przechowuje elementy typu wymagane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2456">is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <xref:System.IndexOutOfRangeException> <span data-ttu-id="68c9f-2457">jest generowany, jeśli `index` jest ujemny lub większy niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2457">is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="68c9f-2458">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldelem.i2` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2458">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i2` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2459">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2459">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2460">Ładuje elementu z typem <see langword="int32" /> indeksem określonej tablicy na górze stosu oceny jako <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2460">Loads the element with type <see langword="int32" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2461">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2461">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2462">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2462">Format</span></span>|<span data-ttu-id="68c9f-2463">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2463">Assembly Format</span></span>|<span data-ttu-id="68c9f-2464">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2464">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2465">94</span><span class="sxs-lookup"><span data-stu-id="68c9f-2465">94</span></span>|<span data-ttu-id="68c9f-2466">ldelem.i4</span><span class="sxs-lookup"><span data-stu-id="68c9f-2466">ldelem.i4</span></span>|<span data-ttu-id="68c9f-2467">Ładuje elementu z typem `int32` na `index` na górze stosu jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2467">Loads the element with type `int32` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="68c9f-2468">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2468">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2469">Odwołanie do obiektu `array` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2469">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2470">Wartość indeksu `index` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2470">An index value `index` is pushed onto the stack.</span></span>  
  
3.  `index` <span data-ttu-id="68c9f-2471">i `array` są zdjęte ze stosu ze stosu; wartość przechowywaną w położeniu `index` w `array` będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2471">and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="68c9f-2472">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2472">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2473">`ldelem.i4` Instrukcji ładuje wartość elementu o indeksie `index` (typ `native int`) w tablicy jednowymiarowej liczony od zera `array` i umieszcza je w górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2473">The `ldelem.i4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="68c9f-2474">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2474">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="68c9f-2475">Wartość zwracana dla `ldelem.i4` jest `int32`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2475">The return value for `ldelem.i4` is `int32`.</span></span>  
  
 <span data-ttu-id="68c9f-2476">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` (nie `native int`), gdy są one załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2476">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-2477">jest generowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2477">is thrown if `array` is a null reference.</span></span>  
  
 <xref:System.ArrayTypeMismatchException> <span data-ttu-id="68c9f-2478">jest generowany, jeśli `array` nie przechowuje elementy typu wymagane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2478">is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <xref:System.IndexOutOfRangeException> <span data-ttu-id="68c9f-2479">jest generowany, jeśli `index` jest ujemny lub większy niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2479">is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="68c9f-2480">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldelem.i4` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2480">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i4` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2481">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2481">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2482">Ładuje elementu z typem <see langword="int64" /> indeksem określonej tablicy na górze stosu oceny jako <see langword="int64" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2482">Loads the element with type <see langword="int64" /> at a specified array index onto the top of the evaluation stack as an <see langword="int64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2483">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2483">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2484">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2484">Format</span></span>|<span data-ttu-id="68c9f-2485">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2485">Assembly Format</span></span>|<span data-ttu-id="68c9f-2486">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2486">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2487">96</span><span class="sxs-lookup"><span data-stu-id="68c9f-2487">96</span></span>|<span data-ttu-id="68c9f-2488">ldelem.i8</span><span class="sxs-lookup"><span data-stu-id="68c9f-2488">ldelem.i8</span></span>|<span data-ttu-id="68c9f-2489">Ładuje elementu z typem `int64` na `index` na górze stosu jako `int64`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2489">Loads the element with type `int64` at `index` onto the top of the stack as an `int64`.</span></span>|  
  
 <span data-ttu-id="68c9f-2490">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2490">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2491">Odwołanie do obiektu `array` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2491">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2492">Wartość indeksu `index` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2492">An index value `index` is pushed onto the stack.</span></span>  
  
3.  `index` <span data-ttu-id="68c9f-2493">i `array` są zdjęte ze stosu ze stosu; wartość przechowywaną w położeniu `index` w `array` będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2493">and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="68c9f-2494">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2494">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2495">`ldelem.i8` Instrukcji ładuje wartość elementu o indeksie `index` (typ `native int`) w tablicy jednowymiarowej liczony od zera `array` i umieszcza je w górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2495">The `ldelem.i8` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="68c9f-2496">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2496">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="68c9f-2497">Wartość zwracana dla `ldelem.i8` jest `int64`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2497">The return value for `ldelem.i8` is `int64`.</span></span>  
  
 <span data-ttu-id="68c9f-2498">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` (nie `native int`), gdy są one załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2498">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-2499">jest generowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2499">is thrown if `array` is a null reference.</span></span>  
  
 <xref:System.ArrayTypeMismatchException> <span data-ttu-id="68c9f-2500">jest generowany, jeśli `array` nie przechowuje elementy typu wymagane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2500">is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <xref:System.IndexOutOfRangeException> <span data-ttu-id="68c9f-2501">jest generowany, jeśli `index` jest ujemny lub większy niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2501">is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="68c9f-2502">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldelem.i8` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2502">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i8` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2503">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2503">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2504">Ładuje elementu z typem <see langword="float32" /> indeksem określonej tablicy na górze stosu oceny jako typ <see langword="F" /> (float).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2504">Loads the element with type <see langword="float32" /> at a specified array index onto the top of the evaluation stack as type <see langword="F" /> (float).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2505">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2505">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2506">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2506">Format</span></span>|<span data-ttu-id="68c9f-2507">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2507">Assembly Format</span></span>|<span data-ttu-id="68c9f-2508">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2508">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2509">98</span><span class="sxs-lookup"><span data-stu-id="68c9f-2509">98</span></span>|<span data-ttu-id="68c9f-2510">ldelem.r4</span><span class="sxs-lookup"><span data-stu-id="68c9f-2510">ldelem.r4</span></span>|<span data-ttu-id="68c9f-2511">Ładuje elementu z typem `float32` na `index` na górze stosu jako typ `F`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2511">Loads the element with type `float32` at `index` onto the top of the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="68c9f-2512">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2512">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2513">Odwołanie do obiektu `array` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2513">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2514">Wartość indeksu `index` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2514">An index value `index` is pushed onto the stack.</span></span>  
  
3.  `index` <span data-ttu-id="68c9f-2515">i `array` są zdjęte ze stosu ze stosu; wartość przechowywaną w położeniu `index` w `array` będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2515">and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="68c9f-2516">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2516">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2517">`ldelem.r4` Instrukcji ładuje wartość elementu o indeksie `index` (typ `native int`) w tablicy jednowymiarowej liczony od zera `array` i umieszcza je w górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2517">The `ldelem.r4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="68c9f-2518">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2518">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="68c9f-2519">Wartość zwracana dla `ldelem.r4` jest `float32`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2519">The return value for `ldelem.r4` is `float32`.</span></span>  
  
 <span data-ttu-id="68c9f-2520">Wartości zmiennoprzecinkowe są konwertowane na typ `F` po załadowaniu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2520">Floating-point values are converted to type `F` when loaded onto the evaluation stack.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-2521">jest generowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2521">is thrown if `array` is a null reference.</span></span>  
  
 <xref:System.ArrayTypeMismatchException> <span data-ttu-id="68c9f-2522">jest generowany, jeśli `array` nie przechowuje elementy typu wymagane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2522">is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <xref:System.IndexOutOfRangeException> <span data-ttu-id="68c9f-2523">jest generowany, jeśli `index` jest ujemny lub większy niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2523">is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="68c9f-2524">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldelem.r4` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2524">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.r4` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2525">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2525">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2526">Ładuje elementu z typem <see langword="float64" /> indeksem określonej tablicy na górze stosu oceny jako typ <see langword="F" /> (float).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2526">Loads the element with type <see langword="float64" /> at a specified array index onto the top of the evaluation stack as type <see langword="F" /> (float).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2527">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2527">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2528">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2528">Format</span></span>|<span data-ttu-id="68c9f-2529">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2529">Assembly Format</span></span>|<span data-ttu-id="68c9f-2530">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2530">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2531">99</span><span class="sxs-lookup"><span data-stu-id="68c9f-2531">99</span></span>|<span data-ttu-id="68c9f-2532">ldelem.r8</span><span class="sxs-lookup"><span data-stu-id="68c9f-2532">ldelem.r8</span></span>|<span data-ttu-id="68c9f-2533">Ładuje elementu z typem `float64` na `index` na górze stosu jako typ `F`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2533">Loads the element with type `float64` at `index` onto the top of the stack as type `F`.</span></span>|  
  
 <span data-ttu-id="68c9f-2534">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2534">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2535">Odwołanie do obiektu `array` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2535">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2536">Wartość indeksu `index` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2536">An index value `index` is pushed onto the stack.</span></span>  
  
3.  `index` <span data-ttu-id="68c9f-2537">i `array` są zdjęte ze stosu ze stosu; wartość przechowywaną w położeniu `index` w `array` będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2537">and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="68c9f-2538">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2538">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2539">`ldelem.r8` Instrukcji ładuje wartość elementu o indeksie `index` (typ `native int`) w tablicy jednowymiarowej liczony od zera `array` i umieszcza je w górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2539">The `ldelem.r8` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="68c9f-2540">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2540">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="68c9f-2541">Wartość zwracana dla `ldelem.r8` jest `float64`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2541">The return value for `ldelem.r8` is `float64`.</span></span>  
  
 <span data-ttu-id="68c9f-2542">Wartości zmiennoprzecinkowe są konwertowane na typ `F` po załadowaniu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2542">Floating-point values are converted to type `F` when loaded onto the evaluation stack.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-2543">jest generowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2543">is thrown if `array` is a null reference.</span></span>  
  
 <xref:System.ArrayTypeMismatchException> <span data-ttu-id="68c9f-2544">jest generowany, jeśli `array` nie przechowuje elementy typu wymagane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2544">is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <xref:System.IndexOutOfRangeException> <span data-ttu-id="68c9f-2545">jest generowany, jeśli `index` jest ujemny lub większy niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2545">is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="68c9f-2546">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldelem.r8` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2546">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.r8` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2547">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2547">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2548">Ładuje elementu zawierający odwołanie do obiektu w określonego indeksu tablicy na górze stosu oceny jako typ <see langword="O" /> (odwołanie do obiektu).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2548">Loads the element containing an object reference at a specified array index onto the top of the evaluation stack as type <see langword="O" /> (object reference).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2549">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2549">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2550">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2550">Format</span></span>|<span data-ttu-id="68c9f-2551">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2551">Assembly Format</span></span>|<span data-ttu-id="68c9f-2552">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2552">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2553">9A</span><span class="sxs-lookup"><span data-stu-id="68c9f-2553">9A</span></span>|<span data-ttu-id="68c9f-2554">ldelem.ref</span><span class="sxs-lookup"><span data-stu-id="68c9f-2554">ldelem.ref</span></span>|<span data-ttu-id="68c9f-2555">Ładuje elementu z odwołania do obiektu w `index` na górze stosu jako typ `O`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2555">Loads the element with an object reference at `index` onto the top of the stack as type `O`.</span></span>|  
  
 <span data-ttu-id="68c9f-2556">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2556">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2557">Odwołanie do obiektu `array` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2557">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2558">Wartość indeksu `index` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2558">An index value `index` is pushed onto the stack.</span></span>  
  
3.  `index` <span data-ttu-id="68c9f-2559">i `array` są zdjęte ze stosu ze stosu; wartość przechowywaną w położeniu `index` w `array` będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2559">and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="68c9f-2560">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2560">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2561">`ldelem.ref` Instrukcji ładuje wartość elementu o indeksie `index` (typ `native int`) w tablicy jednowymiarowej liczony od zera `array` i umieszcza je w górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2561">The `ldelem.ref` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="68c9f-2562">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2562">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="68c9f-2563">Wartość zwracana dla `ldelem.ref` jest typem `O` (odwołanie do obiektu).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2563">The return value for `ldelem.ref` is type `O` (object reference).</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-2564">jest generowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2564">is thrown if `array` is a null reference.</span></span>  
  
 <xref:System.ArrayTypeMismatchException> <span data-ttu-id="68c9f-2565">jest generowany, jeśli `array` nie przechowuje elementy typu wymagane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2565">is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <xref:System.IndexOutOfRangeException> <span data-ttu-id="68c9f-2566">jest generowany, jeśli `index` jest ujemny lub większy niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2566">is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="68c9f-2567">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldelem.ref` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2567">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.ref` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2568">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2568">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2569">Ładuje elementu z typem <see langword="unsigned int8" /> indeksem określonej tablicy na górze stosu oceny jako <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2569">Loads the element with type <see langword="unsigned int8" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2570">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2570">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2571">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2571">Format</span></span>|<span data-ttu-id="68c9f-2572">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2572">Assembly Format</span></span>|<span data-ttu-id="68c9f-2573">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2573">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2574">91</span><span class="sxs-lookup"><span data-stu-id="68c9f-2574">91</span></span>|<span data-ttu-id="68c9f-2575">ldelem.u1</span><span class="sxs-lookup"><span data-stu-id="68c9f-2575">ldelem.u1</span></span>|<span data-ttu-id="68c9f-2576">Ładuje elementu z typem `unsigned int8` na `index` na górze stosu jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2576">Loads the element with type `unsigned int8` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="68c9f-2577">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2577">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2578">Odwołanie do obiektu `array` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2578">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2579">Wartość indeksu `index` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2579">An index value `index` is pushed onto the stack.</span></span>  
  
3.  `index` <span data-ttu-id="68c9f-2580">i `array` są zdjęte ze stosu ze stosu; wartość przechowywaną w położeniu `index` w `array` będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2580">and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="68c9f-2581">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2581">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2582">`ldelem.u1` Instrukcji ładuje wartość elementu o indeksie `index` (typ `native int`) w tablicy jednowymiarowej liczony od zera `array` i umieszcza je w górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2582">The `ldelem.u1` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="68c9f-2583">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2583">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="68c9f-2584">Wartość zwracana dla `ldelem.u1` jest `int8`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2584">The return value for `ldelem.u1` is `int8`.</span></span>  
  
 <span data-ttu-id="68c9f-2585">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` (nie `native int`), gdy są one załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2585">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-2586">jest generowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2586">is thrown if `array` is a null reference.</span></span>  
  
 <xref:System.ArrayTypeMismatchException> <span data-ttu-id="68c9f-2587">jest generowany, jeśli `array` nie przechowuje elementy typu wymagane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2587">is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <xref:System.IndexOutOfRangeException> <span data-ttu-id="68c9f-2588">jest generowany, jeśli `index` jest ujemny lub większy niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2588">is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="68c9f-2589">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldelem.u1` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2589">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u1` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2590">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2590">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2591">Ładuje elementu z typem <see langword="unsigned int16" /> indeksem określonej tablicy na górze stosu oceny jako <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2591">Loads the element with type <see langword="unsigned int16" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2592">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2592">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2593">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2593">Format</span></span>|<span data-ttu-id="68c9f-2594">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2594">Assembly Format</span></span>|<span data-ttu-id="68c9f-2595">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2595">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2596">93</span><span class="sxs-lookup"><span data-stu-id="68c9f-2596">93</span></span>|<span data-ttu-id="68c9f-2597">ldelem.u2</span><span class="sxs-lookup"><span data-stu-id="68c9f-2597">ldelem.u2</span></span>|<span data-ttu-id="68c9f-2598">Ładuje elementu z typem `unsigned int16` pod indeksem na górze stosu jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2598">Loads the element with type `unsigned int16` at index onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="68c9f-2599">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2599">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2600">Odwołanie do obiektu `array` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2600">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2601">Wartość indeksu `index` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2601">An index value `index` is pushed onto the stack.</span></span>  
  
3.  `index` <span data-ttu-id="68c9f-2602">i `array` są zdjęte ze stosu ze stosu; wartość przechowywaną w położeniu `index` w `array` będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2602">and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="68c9f-2603">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2603">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2604">`ldelem.u2` Instrukcji ładuje wartość elementu o indeksie `index` (typ `native int`) w tablicy jednowymiarowej liczony od zera `array` i umieszcza je w górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2604">The `ldelem.u2` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="68c9f-2605">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2605">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="68c9f-2606">Wartość zwracana dla `ldelem.u2` jest `int16`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2606">The return value for `ldelem.u2` is `int16`.</span></span>  
  
 <span data-ttu-id="68c9f-2607">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` (nie `native int`), gdy są one załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2607">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-2608">jest generowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2608">is thrown if `array` is a null reference.</span></span>  
  
 <xref:System.ArrayTypeMismatchException> <span data-ttu-id="68c9f-2609">jest generowany, jeśli `array` nie przechowuje elementy typu wymagane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2609">is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <xref:System.IndexOutOfRangeException> <span data-ttu-id="68c9f-2610">jest generowany, jeśli `index` jest ujemny lub większy niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2610">is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="68c9f-2611">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldelem.u2` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2611">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u2` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2612">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2612">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2613">Ładuje elementu z typem <see langword="unsigned int32" /> indeksem określonej tablicy na górze stosu oceny jako <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2613">Loads the element with type <see langword="unsigned int32" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2614">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2614">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2615">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2615">Format</span></span>|<span data-ttu-id="68c9f-2616">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2616">Assembly Format</span></span>|<span data-ttu-id="68c9f-2617">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2617">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2618">95</span><span class="sxs-lookup"><span data-stu-id="68c9f-2618">95</span></span>|<span data-ttu-id="68c9f-2619">ldelem.u4</span><span class="sxs-lookup"><span data-stu-id="68c9f-2619">ldelem.u4</span></span>|<span data-ttu-id="68c9f-2620">Ładuje elementu z typem `unsigned int32` pod indeksem na górze stosu jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2620">Loads the element with type `unsigned int32` at index onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="68c9f-2621">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2621">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2622">Odwołanie do obiektu `array` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2622">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2623">Wartość indeksu `index` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2623">An index value `index` is pushed onto the stack.</span></span>  
  
3.  `index` <span data-ttu-id="68c9f-2624">i `array` są zdjęte ze stosu ze stosu; wartość przechowywaną w położeniu `index` w `array` będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2624">and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="68c9f-2625">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2625">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2626">`ldelem.u4` Instrukcji ładuje wartość elementu o indeksie `index` (typ `native int`) w tablicy jednowymiarowej liczony od zera `array` i umieszcza je w górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2626">The `ldelem.u4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="68c9f-2627">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2627">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="68c9f-2628">Wartość zwracana dla `ldelem.u4` jest `int32`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2628">The return value for `ldelem.u4` is `int32`.</span></span>  
  
 <span data-ttu-id="68c9f-2629">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` (nie `native int`), gdy są one załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2629">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-2630">jest generowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2630">is thrown if `array` is a null reference.</span></span>  
  
 <xref:System.ArrayTypeMismatchException> <span data-ttu-id="68c9f-2631">jest generowany, jeśli tablica nie zawiera elementów typu wymagane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2631">is thrown if array does not hold elements of the required type.</span></span>  
  
 <xref:System.IndexOutOfRangeException> <span data-ttu-id="68c9f-2632">jest generowany, jeśli `index` jest ujemny lub większy niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2632">is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="68c9f-2633">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldelem.u4` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2633">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u4` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2634">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2634">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelema">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelema;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelema" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelema" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelema As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelema;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelema : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelema" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2635">Ładuje adres elementu tablicy indeksem określonej tablicy na górze stosu oceny jako typ <see langword="&amp;" /> (wskaźnik zarządzanego).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2635">Loads the address of the array element at a specified array index onto the top of the evaluation stack as type <see langword="&amp;" /> (managed pointer).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2636">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2636">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2637">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2637">Format</span></span>|<span data-ttu-id="68c9f-2638">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2638">Assembly Format</span></span>|<span data-ttu-id="68c9f-2639">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2639">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2640">8F < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-2640">8F < `T` ></span></span>|<span data-ttu-id="68c9f-2641">ldelema</span><span class="sxs-lookup"><span data-stu-id="68c9f-2641">ldelema</span></span> `class`|<span data-ttu-id="68c9f-2642">Ładuje adres elementu tablicy w `index` na górze stosu oceny jako typ `&` (wskaźnik zarządzanego).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2642">Loads the address of the array element at `index` onto the top of the evaluation stack as type `&` (managed pointer).</span></span>|  
  
 <span data-ttu-id="68c9f-2643">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2643">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2644">Odwołanie do obiektu `array` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2644">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2645">Wartość indeksu `index` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2645">An index value `index` is pushed onto the stack.</span></span>  
  
3.  `index` <span data-ttu-id="68c9f-2646">i `array` są zdjęte ze stosu ze stosu; adresem przechowywanym w położeniu `index` w `array` będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2646">and `array` are popped from the stack; the address stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="68c9f-2647">Adres są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2647">The address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2648">`ldelema` Służy do pobierania adresu obiektu od określonego indeksu tablicy obiektów (typu `class`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2648">The `ldelema` is used to retrieve the address of an object at a particular index in an array of objects (of type `class`).</span></span> <span data-ttu-id="68c9f-2649">`ldelema` Instrukcji ładuje adres wartość indeksu `index` (typ `native int`) w tablicy jednowymiarowej liczony od zera `array` i umieszcza je w górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2649">The `ldelema` instruction loads the address of the value at index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="68c9f-2650">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2650">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="68c9f-2651">Wartość musi być typu `class` przekazaną za pomocą instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2651">The value must be of type `class` passed with the instruction.</span></span>  
  
 <span data-ttu-id="68c9f-2652">Wartość zwracana dla `ldelema` jest wskaźnikiem typu zarządzanego (typ `&`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2652">The return value for `ldelema` is a managed pointer (type `&`).</span></span>  
  
 <span data-ttu-id="68c9f-2653">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` (nie `native int`), gdy są one załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2653">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-2654">jest generowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2654">is thrown if `array` is a null reference.</span></span>  
  
 <xref:System.ArrayTypeMismatchException> <span data-ttu-id="68c9f-2655">jest generowany, jeśli `array` nie przechowuje elementy typu wymagane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2655">is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <xref:System.IndexOutOfRangeException> <span data-ttu-id="68c9f-2656">jest generowany, jeśli `index` jest ujemny lub większy niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2656">is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="68c9f-2657">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldelema` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2657">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelema` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2658">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2658">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2659">Wyszukuje wartość pola w obiekcie, do której odwołanie znajduje się obecnie w stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2659">Finds the value of a field in the object whose reference is currently on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2660">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2660">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2661">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2661">Format</span></span>|<span data-ttu-id="68c9f-2662">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2662">Assembly Format</span></span>|<span data-ttu-id="68c9f-2663">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2663">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2664">7B < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-2664">7B < `T` ></span></span>|<span data-ttu-id="68c9f-2665">ldfld</span><span class="sxs-lookup"><span data-stu-id="68c9f-2665">ldfld</span></span> `field`|<span data-ttu-id="68c9f-2666">Wypychanie wartości pola w określonym obiekcie na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2666">Pushes the value of a field in a specified object onto the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-2667">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2667">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2668">Odwołanie do obiektu (lub wskaźnik) są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2668">An object reference (or pointer) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2669">Odwołanie do obiektu (lub wskaźnik) zostanie zdjęte ze stosu; Znaleziono wartość określonego pola w obiekcie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2669">The object reference (or pointer) is popped from the stack; the value of the specified field in the object is found.</span></span>  
  
3.  <span data-ttu-id="68c9f-2670">Wartość przechowywana w polu są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2670">The value stored in the field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2671">`ldfld` Instrukcji wypycha wartości pola, znajdujące się w obiekcie na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2671">The `ldfld` instruction pushes the value of a field located in an object onto the stack.</span></span> <span data-ttu-id="68c9f-2672">Obiekt musi być na stosie jako odwołanie do obiektu (typ `O`), wskaźnika zarządzanych (typ `&`), niezarządzanym wskaźnikiem (typ `native int`), przejściowe wskaźnika (typu `*`), lub wystąpienie typu wartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2672">The object must be on the stack as an object reference (type `O`), a managed pointer (type `&`), an unmanaged pointer (type `native int`), a transient pointer (type `*`), or an instance of a value type.</span></span> <span data-ttu-id="68c9f-2673">Używanie wskaźników niezarządzanych nie jest dozwolona w weryfikowalny kod.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2673">The use of an unmanaged pointer is not permitted in verifiable code.</span></span> <span data-ttu-id="68c9f-2674">Pola obiektu jest określony za pomocą tokenu metadanych, który musi odwoływać się do elementu członkowskiego pola.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2674">The object's field is specified by a metadata token that must refer to a field member.</span></span> <span data-ttu-id="68c9f-2675">Typ zwracany jest taka sama jak skojarzony z polem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2675">The return type is the same as the one associated with the field.</span></span> <span data-ttu-id="68c9f-2676">Pole może być pole statyczne lub pola wystąpienia (w takim przypadku obiekt nie może być odwołaniem do wartości null).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2676">The field may be either an instance field (in which case the object must not be a null reference) or a static field.</span></span>  
  
 <span data-ttu-id="68c9f-2677">`ldfld` Instrukcji może być poprzedzona przez jeden lub oba <xref:System.Reflection.Emit.OpCodes.Unaligned> i <xref:System.Reflection.Emit.OpCodes.Volatile> prefiksy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2677">The `ldfld` instruction can be preceded by either or both of the <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile> prefixes.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-2678">jest generowany, jeśli obiekt ma wartość null i nie jest statyczne.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2678">is thrown if the object is null and the field is not static.</span></span>  
  
 <xref:System.MissingFieldException> <span data-ttu-id="68c9f-2679">jest generowany, jeśli określone pole nie zostanie znaleziony w metadanych.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2679">is thrown if the specified field is not found in the metadata.</span></span> <span data-ttu-id="68c9f-2680">Jest to zazwyczaj sprawdzana po instrukcji Microsoft Intermediate Language (MSIL) są konwertowane do kodu macierzystego, nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2680">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="68c9f-2681">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldfld` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2681">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldfld` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2682">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2682">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldflda">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldflda;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldflda" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldflda" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldflda As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldflda;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldflda : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldflda" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2683">Umożliwia znalezienie adresu pola w obiekcie, do której odwołanie znajduje się obecnie w stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2683">Finds the address of a field in the object whose reference is currently on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2684">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2684">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2685">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2685">Format</span></span>|<span data-ttu-id="68c9f-2686">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2686">Assembly Format</span></span>|<span data-ttu-id="68c9f-2687">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2687">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2688">7C < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-2688">7C < `T` ></span></span>|<span data-ttu-id="68c9f-2689">ldflda</span><span class="sxs-lookup"><span data-stu-id="68c9f-2689">ldflda</span></span> `field`|<span data-ttu-id="68c9f-2690">Wypycha adres `field` w określonym obiekcie na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2690">Pushes the address of `field` in a specified object onto the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-2691">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2691">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2692">Odwołanie do obiektu (lub wskaźnik) są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2692">An object reference (or pointer) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2693">Odwołanie do obiektu (lub wskaźnik) zostanie zdjęte ze stosu; Znaleziono adres określone pole w obiekcie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2693">The object reference (or pointer) is popped from the stack; the address of the specified field in the object is found.</span></span>  
  
3.  <span data-ttu-id="68c9f-2694">Adres określonego pola są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2694">The address of the specified field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2695">`ldflda` Instrukcji wypycha adresu pola znajdujące się w obiekcie na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2695">The `ldflda` instruction pushes the address of a field located in an object onto the stack.</span></span> <span data-ttu-id="68c9f-2696">Obiekt musi być na stosie jako odwołanie do obiektu (typ `O`), wskaźnika zarządzanych (typ `&`), niezarządzanym wskaźnikiem (typ `native int`), przejściowe wskaźnika (typu `*`), lub wystąpienie typu wartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2696">The object must be on the stack as an object reference (type `O`), a managed pointer (type `&`), an unmanaged pointer (type `native int`), a transient pointer (type `*`), or an instance of a value type.</span></span> <span data-ttu-id="68c9f-2697">Używanie wskaźników niezarządzanych nie jest dozwolona w weryfikowalny kod.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2697">The use of an unmanaged pointer is not permitted in verifiable code.</span></span> <span data-ttu-id="68c9f-2698">Pola obiektu jest określony za pomocą tokenu metadanych, który musi odwoływać się do elementu członkowskiego pola.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2698">The object's field is specified by a metadata token that must refer to a field member.</span></span>  
  
 <span data-ttu-id="68c9f-2699">Wartość zwrócona przez obiekt `ldflda` jest wskaźnikiem typu zarządzanego (typ `&`), chyba że obiekt są wypychane na stosie jako niezarządzany wskaźnik, w którym to przypadku środki adres zwrotny jest również niezarządzany wskaźnik (typ `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2699">The value returned by `ldflda` is a managed pointer (type `&`) unless the object is pushed onto the stack as an unmanaged pointer, in which case the return address is also an unmanaged pointer (type `native int`).</span></span>  
  
 <span data-ttu-id="68c9f-2700">`ldflda` Instrukcji może być poprzedzona przez jeden lub oba <xref:System.Reflection.Emit.OpCodes.Unaligned> i <xref:System.Reflection.Emit.OpCodes.Volatile> prefiksy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2700">The `ldflda` instruction can be preceded by either or both of the <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile> prefixes.</span></span>  
  
 <xref:System.InvalidOperationException> <span data-ttu-id="68c9f-2701">jest generowany, jeśli obiekt nie mieści się w domenie aplikacji, z którego jest uzyskiwany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2701">is thrown if the object is not within the application domain from which it is being accessed.</span></span> <span data-ttu-id="68c9f-2702">Nie można załadować adresu pola, które nie znajduje się wewnątrz uzyskiwania dostępu do domeny aplikacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2702">The address of a field that is not inside the accessing application domain cannot be loaded.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-2703">jest generowany, jeśli obiekt ma wartość null i nie jest statyczne.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2703">is thrown if the object is null and the field is not static.</span></span>  
  
 <xref:System.MissingFieldException> <span data-ttu-id="68c9f-2704">jest generowany, jeśli określone pole nie zostanie znaleziony w metadanych.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2704">is thrown if the specified field is not found in the metadata.</span></span> <span data-ttu-id="68c9f-2705">Jest to zazwyczaj sprawdzana po instrukcji Microsoft Intermediate Language (MSIL) są konwertowane do kodu macierzystego, nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2705">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="68c9f-2706">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldflda` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2706">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldflda` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2707">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2707">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldftn">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldftn;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldftn" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldftn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldftn As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldftn;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldftn : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldftn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2708">Umieszcza niezarządzany wskaźnik (typ <see langword="native int" />) do kodu natywnego wykonywania określonej metody na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2708">Pushes an unmanaged pointer (type <see langword="native int" />) to the native code implementing a specific method onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2709">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2709">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2710">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2710">Format</span></span>|<span data-ttu-id="68c9f-2711">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2711">Assembly Format</span></span>|<span data-ttu-id="68c9f-2712">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2712">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2713">FE 06 < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-2713">FE 06 < `T` ></span></span>|<span data-ttu-id="68c9f-2714">ldftn</span><span class="sxs-lookup"><span data-stu-id="68c9f-2714">ldftn</span></span> `method`|<span data-ttu-id="68c9f-2715">Umieszcza wskaźnik do metody odwołuje się `method` na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2715">Pushes a pointer to a method referenced by `method` on the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-2716">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2716">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2717">Niezarządzany wskaźnik do określonej metody są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2717">The unmanaged pointer to a specific method is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2718">Określonej metody (`method`) może być wywoływany przy użyciu <xref:System.Reflection.Emit.OpCodes.Calli> instrukcji, jeśli odwołuje się zarządzaną metodą (lub procedurę zastępczą, przejście z kodu zarządzanego do kodu niezarządzanego).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2718">The specific method (`method`) can be called using the <xref:System.Reflection.Emit.OpCodes.Calli> instruction if it references a managed method (or a stub that transitions from managed to unmanaged code).</span></span>  
  
 <span data-ttu-id="68c9f-2719">Wartość zwracana punktów do kodu natywnego za pomocą konwencji wywoływania środowiska CLR.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2719">The value returned points to native code using the CLR calling convention.</span></span> <span data-ttu-id="68c9f-2720">This, wskaźnik metody nie powinny być przekazywane do niezarządzanego kodu natywnego jako procedura wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2720">This method pointer should not be passed to unmanaged native code as a callback routine.</span></span>  
  
 <span data-ttu-id="68c9f-2721">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldftn` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2721">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldftn` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2722">ILGenerator.Emit(OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2722">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2723">Ładuje wartości typu <see langword="native int" /> jako <see langword="native int" /> na ocenę pośrednio stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2723">Loads a value of type <see langword="native int" /> as a <see langword="native int" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2724">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2724">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2725">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2725">Format</span></span>|<span data-ttu-id="68c9f-2726">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2726">Assembly Format</span></span>|<span data-ttu-id="68c9f-2727">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2727">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2728">4D</span><span class="sxs-lookup"><span data-stu-id="68c9f-2728">4D</span></span>|<span data-ttu-id="68c9f-2729">ldind.i</span><span class="sxs-lookup"><span data-stu-id="68c9f-2729">ldind.i</span></span>|<span data-ttu-id="68c9f-2730">Ładunki `native int` wartość pod adresem `addr` na stosie jako `native int`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2730">Loads the `native int` value at address `addr` onto the stack as a `native int`.</span></span>|  
  
 <span data-ttu-id="68c9f-2731">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2731">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2732">Adres są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2732">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2733">Adres zostanie zdjęte ze stosu; wartość znajduje się pod adresem zostanie pobrany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2733">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="68c9f-2734">Pobrano wartość są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2734">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2735">`ldind.i` Instrukcji pośrednio ładuje `native int` wartość z określonego adresu (typu `native int`, `&`, lub \*) na stosie jako `native int`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2735">The `ldind.i` instruction indirectly loads a `native int` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a `native int`.</span></span>  
  
 <span data-ttu-id="68c9f-2736">Wszystkie `ldind` instrukcje są skróty klawiaturowe <xref:System.Reflection.Emit.OpCodes.Ldobj> instrukcji, która określa odpowiednią klasę wartości wbudowanej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2736">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="68c9f-2737">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` (nie `native int`), gdy są one załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2737">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="68c9f-2738">Wartości zmiennoprzecinkowe są konwertowane na `F` wpisz po załadowaniu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2738">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="68c9f-2739">Poprawnie sformułowany Microsoft Intermediate Language (MSIL), masz pewność, że `ldind` instrukcje są używane w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2739">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="68c9f-2740">Adres początkowo są wypychane na stosie, muszą być wyrównane do naturalnym rozmiar obiektów na komputerze lub <xref:System.NullReferenceException> może wystąpić (zobacz <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcję środków zapobiegawczych).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2740">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="68c9f-2741">Wyniki wszystkich instrukcji MSIL, które zwracają adresów (na przykład <xref:System.Reflection.Emit.OpCodes.Ldloca> i <xref:System.Reflection.Emit.OpCodes.Ldarga>) są bezpiecznie wyrównane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2741">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="68c9f-2742">Typy danych jest większy niż 1 bajt kolejność bajtów jest zależny od docelowy adres CPU.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2742">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="68c9f-2743">Kod, który jest zależny od określanie kolejności bajtów może nie działać na wszystkich platformach.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2743">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-2744">może zostać wygenerowany, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2744">can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="68c9f-2745">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldind.i` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2745">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2746">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2746">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2747">Ładuje wartości typu <see langword="int8" /> jako <see langword="int32" /> na ocenę pośrednio stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2747">Loads a value of type <see langword="int8" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2748">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2748">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2749">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2749">Format</span></span>|<span data-ttu-id="68c9f-2750">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2750">Assembly Format</span></span>|<span data-ttu-id="68c9f-2751">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2751">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2752">46</span><span class="sxs-lookup"><span data-stu-id="68c9f-2752">46</span></span>|<span data-ttu-id="68c9f-2753">ldind.i1</span><span class="sxs-lookup"><span data-stu-id="68c9f-2753">ldind.i1</span></span>|<span data-ttu-id="68c9f-2754">Ładunki `int8` wartość pod adresem `addr` na stosie jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2754">Loads the `int8` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="68c9f-2755">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2755">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2756">Adres są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2756">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2757">Adres zostanie zdjęte ze stosu; wartość znajduje się pod adresem zostanie pobrany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2757">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="68c9f-2758">Pobrano wartość są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2758">The fetched value is pushed onto the stack.</span></span> 
  
 <span data-ttu-id="68c9f-2759">`ldind.i1` Instrukcji pośrednio ładuje `int8` wartość z określonego adresu (typu `native int`, `&`, lub \*) na stosie jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2759">The `ldind.i1` instruction indirectly loads an `int8` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="68c9f-2760">Wszystkie `ldind` instrukcje są skróty klawiaturowe <xref:System.Reflection.Emit.OpCodes.Ldobj> instrukcji, która określa odpowiednią klasę wartości wbudowanej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2760">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="68c9f-2761">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` (nie `native int`), gdy są one załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2761">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="68c9f-2762">Wartości zmiennoprzecinkowe są konwertowane na `F` wpisz po załadowaniu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2762">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="68c9f-2763">Poprawnie sformułowany Microsoft Intermediate Language (MSIL), masz pewność, że `ldind` instrukcje są używane w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2763">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="68c9f-2764">Adres początkowo są wypychane na stosie, muszą być wyrównane do naturalnym rozmiar obiektów na komputerze lub <xref:System.NullReferenceException> może wystąpić (zobacz <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcję środków zapobiegawczych).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2764">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="68c9f-2765">Wyniki wszystkich instrukcji MSIL, które zwracają adresów (na przykład <xref:System.Reflection.Emit.OpCodes.Ldloca> i <xref:System.Reflection.Emit.OpCodes.Ldarga>) są bezpiecznie wyrównane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2765">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="68c9f-2766">Typy danych jest większy niż 1 bajt kolejność bajtów jest zależny od docelowy adres CPU.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2766">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="68c9f-2767">Kod, który jest zależny od określanie kolejności bajtów może nie działać na wszystkich platformach.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2767">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-2768">może zostać wygenerowany, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2768">can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="68c9f-2769">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldind.i1` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2769">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i1` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2770">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2770">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2771">Ładuje wartości typu <see langword="int16" /> jako <see langword="int32" /> na ocenę pośrednio stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2771">Loads a value of type <see langword="int16" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2772">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2772">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2773">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2773">Format</span></span>|<span data-ttu-id="68c9f-2774">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2774">Assembly Format</span></span>|<span data-ttu-id="68c9f-2775">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2775">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2776">48</span><span class="sxs-lookup"><span data-stu-id="68c9f-2776">48</span></span>|<span data-ttu-id="68c9f-2777">ldind.i2</span><span class="sxs-lookup"><span data-stu-id="68c9f-2777">ldind.i2</span></span>|<span data-ttu-id="68c9f-2778">Ładunki `int16` wartość pod adresem `addr` na stosie jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2778">Loads the `int16` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="68c9f-2779">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2779">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2780">Adres są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2780">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2781">Adres zostanie zdjęte ze stosu; wartość znajduje się pod adresem zostanie pobrany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2781">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="68c9f-2782">Pobrano wartość są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2782">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2783">`ldind.i2` Instrukcji pośrednio ładuje `int16` wartość z określonego adresu (typu `native int`, `&`, lub \*) na stosie jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2783">The `ldind.i2` instruction indirectly loads an `int16` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="68c9f-2784">Wszystkie `ldind` instrukcje są skróty klawiaturowe <xref:System.Reflection.Emit.OpCodes.Ldobj> instrukcji, która określa odpowiednią klasę wartości wbudowanej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2784">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="68c9f-2785">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` (nie `native int`), gdy są one załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2785">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="68c9f-2786">Wartości zmiennoprzecinkowe są konwertowane na `F` wpisz po załadowaniu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2786">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="68c9f-2787">Poprawnie sformułowany Microsoft Intermediate Language (MSIL), masz pewność, że `ldind` instrukcje są używane w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2787">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="68c9f-2788">Adres początkowo są wypychane na stosie, muszą być wyrównane do naturalnym rozmiar obiektów na komputerze lub <xref:System.NullReferenceException> może wystąpić (zobacz <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcję środków zapobiegawczych).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2788">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="68c9f-2789">Wyniki wszystkich instrukcji MSIL, które zwracają adresów (na przykład <xref:System.Reflection.Emit.OpCodes.Ldloca> i <xref:System.Reflection.Emit.OpCodes.Ldarga>) są bezpiecznie wyrównane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2789">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="68c9f-2790">Typy danych jest większy niż 1 bajt kolejność bajtów jest zależny od docelowy adres CPU.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2790">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="68c9f-2791">Kod, który jest zależny od określanie kolejności bajtów może nie działać na wszystkich platformach.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2791">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-2792">może zostać wygenerowany, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2792">can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="68c9f-2793">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldind.i2` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2793">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i2` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2794">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2794">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2795">Ładuje wartości typu <see langword="int32" /> jako <see langword="int32" /> na ocenę pośrednio stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2795">Loads a value of type <see langword="int32" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2796">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2796">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2797">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2797">Format</span></span>|<span data-ttu-id="68c9f-2798">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2798">Assembly Format</span></span>|<span data-ttu-id="68c9f-2799">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2799">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2800">4A</span><span class="sxs-lookup"><span data-stu-id="68c9f-2800">4A</span></span>|<span data-ttu-id="68c9f-2801">ldind.i4</span><span class="sxs-lookup"><span data-stu-id="68c9f-2801">ldind.i4</span></span>|<span data-ttu-id="68c9f-2802">Ładunki `int32` wartość pod adresem `addr` na stosie jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2802">Loads the `int32` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="68c9f-2803">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2803">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2804">Adres są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2804">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2805">Adres zostanie zdjęte ze stosu; wartość znajduje się pod adresem zostanie pobrany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2805">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="68c9f-2806">Pobrano wartość są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2806">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2807">`ldind.i4` Instrukcji pośrednio ładuje `int32` wartość z określonego adresu (typu `native int`, `&`, lub \*) na stosie jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2807">The `ldind.i4` instruction indirectly loads an `int32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="68c9f-2808">Wszystkie `ldind` instrukcje są skróty klawiaturowe <xref:System.Reflection.Emit.OpCodes.Ldobj> instrukcji, która określa odpowiednią klasę wartości wbudowanej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2808">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="68c9f-2809">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` (nie `native int`), gdy są one załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2809">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="68c9f-2810">Wartości zmiennoprzecinkowe są konwertowane na `F` wpisz po załadowaniu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2810">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="68c9f-2811">Poprawnie sformułowany Microsoft Intermediate Language (MSIL), masz pewność, że `ldind` instrukcje są używane w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2811">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="68c9f-2812">Adres początkowo są wypychane na stosie, muszą być wyrównane do naturalnym rozmiar obiektów na komputerze lub <xref:System.NullReferenceException> może wystąpić (zobacz <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcję środków zapobiegawczych).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2812">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="68c9f-2813">Wyniki wszystkich instrukcji MSIL, które zwracają adresów (na przykład <xref:System.Reflection.Emit.OpCodes.Ldloca> i <xref:System.Reflection.Emit.OpCodes.Ldarga>) są bezpiecznie wyrównane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2813">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="68c9f-2814">Typy danych jest większy niż 1 bajt kolejność bajtów jest zależny od docelowy adres CPU.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2814">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="68c9f-2815">Kod, który jest zależny od określanie kolejności bajtów może nie działać na wszystkich platformach.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2815">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-2816">może zostać wygenerowany, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2816">can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="68c9f-2817">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldind.i4` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2817">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i4` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2818">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2818">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2819">Ładuje wartości typu <see langword="int64" /> jako <see langword="int64" /> na ocenę pośrednio stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2819">Loads a value of type <see langword="int64" /> as an <see langword="int64" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2820">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2820">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2821">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2821">Format</span></span>|<span data-ttu-id="68c9f-2822">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2822">Assembly Format</span></span>|<span data-ttu-id="68c9f-2823">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2823">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2824">4C</span><span class="sxs-lookup"><span data-stu-id="68c9f-2824">4C</span></span>|<span data-ttu-id="68c9f-2825">ldind.i8</span><span class="sxs-lookup"><span data-stu-id="68c9f-2825">ldind.i8</span></span>|<span data-ttu-id="68c9f-2826">Ładunki `int64` wartość pod adresem `addr` na stosie jako `int64`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2826">Loads the `int64` value at address `addr` onto the stack as an `int64`.</span></span>|  
  
 <span data-ttu-id="68c9f-2827">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2827">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2828">Adres są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2828">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2829">Adres zostanie zdjęte ze stosu; wartość znajduje się pod adresem zostanie pobrany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2829">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="68c9f-2830">Pobrano wartość są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2830">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2831">`ldind.i8` Instrukcji pośrednio ładuje `int64` wartość z określonego adresu (typu `native int`, `&`, lub \*) na stosie jako `int64`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2831">The `ldind.i8` instruction indirectly loads an `int64` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int64`.</span></span>  
  
 <span data-ttu-id="68c9f-2832">Wszystkie `ldind` instrukcje są skróty klawiaturowe <xref:System.Reflection.Emit.OpCodes.Ldobj> instrukcji, która określa odpowiednią klasę wartości wbudowanej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2832">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="68c9f-2833">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` (nie `native int`), gdy są one załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2833">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="68c9f-2834">Wartości zmiennoprzecinkowe są konwertowane na `F` wpisz po załadowaniu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2834">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="68c9f-2835">Poprawnie sformułowany Microsoft Intermediate Language (MSIL), masz pewność, że `ldind` instrukcje są używane w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2835">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="68c9f-2836">Adres początkowo są wypychane na stosie, muszą być wyrównane do naturalnym rozmiar obiektów na komputerze lub <xref:System.NullReferenceException> może wystąpić (zobacz <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcję środków zapobiegawczych).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2836">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="68c9f-2837">Wyniki wszystkich instrukcji MSIL, które zwracają adresów (na przykład <xref:System.Reflection.Emit.OpCodes.Ldloca> i <xref:System.Reflection.Emit.OpCodes.Ldarga>) są bezpiecznie wyrównane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2837">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="68c9f-2838">Typy danych jest większy niż 1 bajt kolejność bajtów jest zależny od docelowy adres CPU.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2838">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="68c9f-2839">Kod, który jest zależny od określanie kolejności bajtów może nie działać na wszystkich platformach.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2839">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-2840">może zostać wygenerowany, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2840">can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="68c9f-2841">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldind.i8` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2841">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i8` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2842">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2842">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2843">Ładuje wartości typu <see langword="float32" /> jako typ <see langword="F" /> (float) na stosie oceny pośrednio.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2843">Loads a value of type <see langword="float32" /> as a type <see langword="F" /> (float) onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2844">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2844">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2845">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2845">Format</span></span>|<span data-ttu-id="68c9f-2846">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2846">Assembly Format</span></span>|<span data-ttu-id="68c9f-2847">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2847">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2848">4E</span><span class="sxs-lookup"><span data-stu-id="68c9f-2848">4E</span></span>|<span data-ttu-id="68c9f-2849">ldind.r4</span><span class="sxs-lookup"><span data-stu-id="68c9f-2849">ldind.r4</span></span>|<span data-ttu-id="68c9f-2850">Ładunki `float32` wartość pod adresem `addr` na stosie jako typ `F`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2850">Loads the `float32` value at address `addr` onto the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="68c9f-2851">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2851">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2852">Adres są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2852">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2853">Adres zostanie zdjęte ze stosu; wartość znajduje się pod adresem zostanie pobrany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2853">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="68c9f-2854">Pobrano wartość są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2854">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2855">`ldind.r4` Instrukcji pośrednio ładuje `float32` wartość z określonego adresu (typu `native int`, `&`, lub \*) na stosie jako typ `F`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2855">The `ldind.r4` instruction indirectly loads a `float32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a type `F`.</span></span>  
  
 <span data-ttu-id="68c9f-2856">Wszystkie `ldind` instrukcje są skróty klawiaturowe <xref:System.Reflection.Emit.OpCodes.Ldobj> instrukcji, która określa odpowiednią klasę wartości wbudowanej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2856">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="68c9f-2857">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` (nie `native int`), gdy są one załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2857">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="68c9f-2858">Wartości zmiennoprzecinkowe są konwertowane na `F` wpisz po załadowaniu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2858">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="68c9f-2859">Poprawnie sformułowany Microsoft Intermediate Language (MSIL), masz pewność, że `ldind` instrukcje są używane w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2859">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="68c9f-2860">Adres początkowo są wypychane na stosie, muszą być wyrównane do naturalnym rozmiar obiektów na komputerze lub <xref:System.NullReferenceException> może wystąpić (zobacz <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcję środków zapobiegawczych).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2860">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="68c9f-2861">Wyniki wszystkich instrukcji MSIL, które zwracają adresów (na przykład <xref:System.Reflection.Emit.OpCodes.Ldloca> i <xref:System.Reflection.Emit.OpCodes.Ldarga>) są bezpiecznie wyrównane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2861">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="68c9f-2862">Typy danych jest większy niż 1 bajt kolejność bajtów jest zależny od docelowy adres CPU.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2862">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="68c9f-2863">Kod, który jest zależny od określanie kolejności bajtów może nie działać na wszystkich platformach.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2863">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-2864">może zostać wygenerowany, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2864">can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="68c9f-2865">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldind.r4` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2865">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.r4` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2866">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2866">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2867">Ładuje wartości typu <see langword="float64" /> jako typ <see langword="F" /> (float) na stosie oceny pośrednio.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2867">Loads a value of type <see langword="float64" /> as a type <see langword="F" /> (float) onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2868">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2868">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2869">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2869">Format</span></span>|<span data-ttu-id="68c9f-2870">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2870">Assembly Format</span></span>|<span data-ttu-id="68c9f-2871">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2871">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2872">4F</span><span class="sxs-lookup"><span data-stu-id="68c9f-2872">4F</span></span>|<span data-ttu-id="68c9f-2873">ldind.r8</span><span class="sxs-lookup"><span data-stu-id="68c9f-2873">ldind.r8</span></span>|<span data-ttu-id="68c9f-2874">Ładunki `float64` wartość pod adresem `addr` na stosie jako typ `F`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2874">Loads the `float64` value at address `addr` onto the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="68c9f-2875">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2875">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2876">Adres są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2876">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2877">Adres zostanie zdjęte ze stosu; wartość znajduje się pod adresem zostanie pobrany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2877">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="68c9f-2878">Pobrano wartość są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2878">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2879">`ldind.r8` Instrukcji pośrednio ładuje `float64` wartość z określonego adresu (typu `native int`, `&`, lub \*) na stosie jako `float64`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2879">The `ldind.r8` instruction indirectly loads a `float64` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a `float64`.</span></span>  
  
 <span data-ttu-id="68c9f-2880">Wszystkie `ldind` instrukcje są skróty klawiaturowe <xref:System.Reflection.Emit.OpCodes.Ldobj> instrukcji, która określa odpowiednią klasę wartości wbudowanej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2880">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="68c9f-2881">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` (nie `native int`), gdy są one załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2881">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="68c9f-2882">Wartości zmiennoprzecinkowe są konwertowane na `F` wpisz po załadowaniu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2882">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="68c9f-2883">Poprawnie sformułowany Microsoft Intermediate Language (MSIL), masz pewność, że `ldind` instrukcje są używane w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2883">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="68c9f-2884">Adres początkowo są wypychane na stosie, muszą być wyrównane do naturalnym rozmiar obiektów na komputerze lub <xref:System.NullReferenceException> może wystąpić (zobacz <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcję środków zapobiegawczych).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2884">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="68c9f-2885">Wyniki wszystkich instrukcji MSIL, które zwracają adresów (na przykład <xref:System.Reflection.Emit.OpCodes.Ldloca> i <xref:System.Reflection.Emit.OpCodes.Ldarga>) są bezpiecznie wyrównane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2885">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="68c9f-2886">Typy danych jest większy niż 1 bajt kolejność bajtów jest zależny od docelowy adres CPU.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2886">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="68c9f-2887">Kod, który jest zależny od określanie kolejności bajtów może nie działać na wszystkich platformach.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2887">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-2888">może zostać wygenerowany, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2888">can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="68c9f-2889">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldind.r8` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2889">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.r8` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2890">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2890">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2891">Ładuje odwołanie do obiektu o typie <see langword="O" /> (odwołanie do obiektu) do oceny pośrednio stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2891">Loads an object reference as a type <see langword="O" /> (object reference) onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2892">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2892">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2893">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2893">Format</span></span>|<span data-ttu-id="68c9f-2894">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2894">Assembly Format</span></span>|<span data-ttu-id="68c9f-2895">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2895">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2896">50</span><span class="sxs-lookup"><span data-stu-id="68c9f-2896">50</span></span>|<span data-ttu-id="68c9f-2897">ldind.ref</span><span class="sxs-lookup"><span data-stu-id="68c9f-2897">ldind.ref</span></span>|<span data-ttu-id="68c9f-2898">Ładuje odwołanie do obiektu pod adresem `addr` na stosie jako typ</span><span class="sxs-lookup"><span data-stu-id="68c9f-2898">Loads the object reference at address `addr` onto the stack as a type</span></span> `O`|  
  
 <span data-ttu-id="68c9f-2899">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2899">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2900">Adres są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2900">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2901">Adres zostanie zdjęte ze stosu; Odwołanie do obiektu znajdujący się pod adresem zostanie pobrany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2901">The address is popped from the stack; the object reference located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="68c9f-2902">Pobrano odwołania są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2902">The fetched reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2903">`ldind.ref` Instrukcji pośrednio ładuje odwołanie do obiektu określony adres (typu `native int`, `&`, lub \*) na stosie jako typ `O`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2903">The `ldind.ref` instruction indirectly loads the object reference the specified address (of type `native int`, `&`, or \*) onto the stack as type `O`.</span></span>  
  
 <span data-ttu-id="68c9f-2904">Wszystkie `ldind` instrukcje są skróty klawiaturowe <xref:System.Reflection.Emit.OpCodes.Ldobj> instrukcji, która określa odpowiednią klasę wartości wbudowanej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2904">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="68c9f-2905">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` (nie `native int`), gdy są one załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2905">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="68c9f-2906">Wartości zmiennoprzecinkowe są konwertowane na `F` wpisz po załadowaniu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2906">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="68c9f-2907">Poprawnie sformułowany Microsoft Intermediate Language (MSIL), masz pewność, że `ldind` instrukcje są używane w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2907">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="68c9f-2908">Adres początkowo są wypychane na stosie, muszą być wyrównane do naturalnym rozmiar obiektów na komputerze lub <xref:System.NullReferenceException> może wystąpić (zobacz <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcję środków zapobiegawczych).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2908">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="68c9f-2909">Wyniki wszystkich instrukcji MSIL, które zwracają adresów (na przykład <xref:System.Reflection.Emit.OpCodes.Ldloca> i <xref:System.Reflection.Emit.OpCodes.Ldarga>) są bezpiecznie wyrównane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2909">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="68c9f-2910">Typy danych jest większy niż 1 bajt kolejność bajtów jest zależny od docelowy adres CPU.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2910">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="68c9f-2911">Kod, który jest zależny od określanie kolejności bajtów może nie działać na wszystkich platformach.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2911">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-2912">może zostać wygenerowany, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2912">can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="68c9f-2913">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldind.ref` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2913">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.ref` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2914">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2914">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2915">Ładuje wartości typu <see langword="unsigned int8" /> jako <see langword="int32" /> na ocenę pośrednio stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2915">Loads a value of type <see langword="unsigned int8" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2916">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2916">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2917">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2917">Format</span></span>|<span data-ttu-id="68c9f-2918">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2918">Assembly Format</span></span>|<span data-ttu-id="68c9f-2919">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2919">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2920">47</span><span class="sxs-lookup"><span data-stu-id="68c9f-2920">47</span></span>|<span data-ttu-id="68c9f-2921">ldind.u1</span><span class="sxs-lookup"><span data-stu-id="68c9f-2921">ldind.u1</span></span>|<span data-ttu-id="68c9f-2922">Ładunki `unsigned int8` wartość pod adresem `addr` na stosie jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2922">Loads the `unsigned int8` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="68c9f-2923">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2923">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2924">Adres są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2924">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2925">Adres zostanie zdjęte ze stosu; wartość znajduje się pod adresem zostanie pobrany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2925">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="68c9f-2926">Pobrano wartość są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2926">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2927">`ldind.u1` Instrukcji pośrednio ładuje `unsigned int8` wartość z określonego adresu (typu`native int`, `&`, lub \*) na stosie jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2927">The `ldind.u1` instruction indirectly loads an `unsigned int8` value from the specified address (of type`native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="68c9f-2928">Wszystkie `ldind` instrukcje są skróty klawiaturowe <xref:System.Reflection.Emit.OpCodes.Ldobj> instrukcji, która określa odpowiednią klasę wartości wbudowanej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2928">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="68c9f-2929">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` (nie `native int`), gdy są one załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2929">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="68c9f-2930">Wartości zmiennoprzecinkowe są konwertowane na `F` wpisz po załadowaniu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2930">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="68c9f-2931">Poprawnie sformułowany Microsoft Intermediate Language (MSIL), masz pewność, że `ldind` instrukcje są używane w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2931">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="68c9f-2932">Adres początkowo są wypychane na stosie, muszą być wyrównane do naturalnym rozmiar obiektów na komputerze lub <xref:System.NullReferenceException> może wystąpić (zobacz <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcję środków zapobiegawczych).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2932">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="68c9f-2933">Wyniki wszystkich instrukcji MSIL, które zwracają adresów (na przykład <xref:System.Reflection.Emit.OpCodes.Ldloca> i <xref:System.Reflection.Emit.OpCodes.Ldarga>) są bezpiecznie wyrównane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2933">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="68c9f-2934">Typy danych jest większy niż 1 bajt kolejność bajtów jest zależny od docelowy adres CPU.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2934">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="68c9f-2935">Kod, który jest zależny od określanie kolejności bajtów może nie działać na wszystkich platformach.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2935">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-2936">może zostać wygenerowany, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2936">can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="68c9f-2937">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldind.u1` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2937">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u1` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2938">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2938">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2939">Ładuje wartości typu <see langword="unsigned int16" /> jako <see langword="int32" /> na ocenę pośrednio stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2939">Loads a value of type <see langword="unsigned int16" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2940">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2940">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2941">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2941">Format</span></span>|<span data-ttu-id="68c9f-2942">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2942">Assembly Format</span></span>|<span data-ttu-id="68c9f-2943">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2943">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2944">49</span><span class="sxs-lookup"><span data-stu-id="68c9f-2944">49</span></span>|<span data-ttu-id="68c9f-2945">ldind.u2</span><span class="sxs-lookup"><span data-stu-id="68c9f-2945">ldind.u2</span></span>|<span data-ttu-id="68c9f-2946">Ładunki `unsigned int16` wartość pod adresem `addr` na stosie jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2946">Loads the `unsigned int16` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="68c9f-2947">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2947">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2948">Adres są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2948">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2949">Adres zostanie zdjęte ze stosu; wartość znajduje się pod adresem zostanie pobrany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2949">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="68c9f-2950">Pobrano wartość są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2950">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2951">`ldind.u2` Instrukcji pośrednio ładuje `unsigned int16` wartość z określonego adresu (typu `native int`, `&`, lub \*) na stosie jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2951">The `ldind.u2` instruction indirectly loads an `unsigned int16` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="68c9f-2952">Wszystkie `ldind` instrukcje są skróty klawiaturowe <xref:System.Reflection.Emit.OpCodes.Ldobj> instrukcji, która określa odpowiednią klasę wartości wbudowanej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2952">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="68c9f-2953">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` (nie `native int`), gdy są one załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2953">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="68c9f-2954">Wartości zmiennoprzecinkowe są konwertowane na `F` wpisz po załadowaniu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2954">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="68c9f-2955">Poprawnie sformułowany Microsoft Intermediate Language (MSIL), masz pewność, że `ldind` instrukcje są używane w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2955">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="68c9f-2956">Adres początkowo są wypychane na stosie, muszą być wyrównane do naturalnym rozmiar obiektów na komputerze lub <xref:System.NullReferenceException> może wystąpić (zobacz <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcję środków zapobiegawczych).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2956">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="68c9f-2957">Wyniki wszystkich instrukcji MSIL, które zwracają adresów (na przykład <xref:System.Reflection.Emit.OpCodes.Ldloca> i <xref:System.Reflection.Emit.OpCodes.Ldarga>) są bezpiecznie wyrównane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2957">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="68c9f-2958">Typy danych jest większy niż 1 bajt kolejność bajtów jest zależny od docelowy adres CPU.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2958">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="68c9f-2959">Kod, który jest zależny od określanie kolejności bajtów może nie działać na wszystkich platformach.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2959">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-2960">może zostać wygenerowany, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2960">can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="68c9f-2961">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldind.u2` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2961">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u2` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2962">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2962">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2963">Ładuje wartości typu <see langword="unsigned int32" /> jako <see langword="int32" /> na ocenę pośrednio stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2963">Loads a value of type <see langword="unsigned int32" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2964">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2964">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2965">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2965">Format</span></span>|<span data-ttu-id="68c9f-2966">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2966">Assembly Format</span></span>|<span data-ttu-id="68c9f-2967">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2967">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2968">4B</span><span class="sxs-lookup"><span data-stu-id="68c9f-2968">4B</span></span>|<span data-ttu-id="68c9f-2969">ldind.u4</span><span class="sxs-lookup"><span data-stu-id="68c9f-2969">ldind.u4</span></span>|<span data-ttu-id="68c9f-2970">Ładunki `unsigned int32` wartość pod adresem `addr` na stosie jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2970">Loads the `unsigned int32` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="68c9f-2971">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2971">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2972">Adres są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2972">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2973">Adres zostanie zdjęte ze stosu; wartość znajduje się pod adresem zostanie pobrany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2973">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="68c9f-2974">Pobrano wartość są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2974">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2975">`ldind.u4` Instrukcji pośrednio ładuje `unsigned int32` wartość z określonego adresu (typu `native int`, `&`, lub \*) na stosie jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2975">The `ldind.u4` instruction indirectly loads an `unsigned int32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="68c9f-2976">Wszystkie `ldind` instrukcje są skróty klawiaturowe <xref:System.Reflection.Emit.OpCodes.Ldobj> instrukcji, która określa odpowiednią klasę wartości wbudowanej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2976">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="68c9f-2977">Należy pamiętać, że wartości całkowitych o mniej niż 4 bajty zostają rozszerzone, aby `int32` (nie `native int`), gdy są one załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2977">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="68c9f-2978">Wartości zmiennoprzecinkowe są konwertowane na `F` wpisz po załadowaniu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2978">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="68c9f-2979">Poprawnie sformułowany Microsoft Intermediate Language (MSIL), masz pewność, że `ldind` instrukcje są używane w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2979">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="68c9f-2980">Adres początkowo są wypychane na stosie, muszą być wyrównane do naturalnym rozmiar obiektów na komputerze lub <xref:System.NullReferenceException> może wystąpić (zobacz <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcję środków zapobiegawczych).</span><span class="sxs-lookup"><span data-stu-id="68c9f-2980">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="68c9f-2981">Wyniki wszystkich instrukcji MSIL, które zwracają adresów (na przykład <xref:System.Reflection.Emit.OpCodes.Ldloca> i <xref:System.Reflection.Emit.OpCodes.Ldarga>) są bezpiecznie wyrównane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2981">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="68c9f-2982">Typy danych jest większy niż 1 bajt kolejność bajtów jest zależny od docelowy adres CPU.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2982">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="68c9f-2983">Kod, który jest zależny od określanie kolejności bajtów może nie działać na wszystkich platformach.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2983">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-2984">może zostać wygenerowany, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2984">can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="68c9f-2985">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldind.u4` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2985">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u4` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-2986">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-2986">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldlen">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldlen;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldlen" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldlen" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldlen As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldlen;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldlen : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldlen" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-2987">Wypycha liczby elementów nieujemną jednowymiarową tablicę na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2987">Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-2988">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2988">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-2989">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-2989">Format</span></span>|<span data-ttu-id="68c9f-2990">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-2990">Assembly Format</span></span>|<span data-ttu-id="68c9f-2991">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-2991">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-2992">8E</span><span class="sxs-lookup"><span data-stu-id="68c9f-2992">8E</span></span>|<span data-ttu-id="68c9f-2993">ldlen</span><span class="sxs-lookup"><span data-stu-id="68c9f-2993">ldlen</span></span>|<span data-ttu-id="68c9f-2994">Wypycha długość (typu `natural unsigned int`) tablicy na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2994">Pushes the length (of type `natural unsigned int`) of an array on the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-2995">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-2995">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-2996">Odwołanie do obiektu do tablicy są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2996">An object reference to an array is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-2997">Odwołanie do tablicy zostanie zdjęte ze stosu i długość jest kolumną obliczaną.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2997">The array reference is popped from the stack and the length is computed.</span></span>  
  
3.  <span data-ttu-id="68c9f-2998">Długość są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2998">The length is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-2999">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-2999">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="68c9f-3000">Długość jest zwracana jako `natural unsigned int`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3000">The length is returned as a `natural unsigned int`.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-3001">jest generowany, jeśli odwołanie do tablicy jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3001">is thrown if the array reference is a null reference.</span></span>  
  
 <span data-ttu-id="68c9f-3002">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldlen` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3002">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldlen` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3003">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3003">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3004">Ładuje zmienna lokalna o określonym indeksie na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3004">Loads the local variable at a specific index onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3005">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3005">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3006">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3006">Format</span></span>|<span data-ttu-id="68c9f-3007">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3007">Assembly Format</span></span>|<span data-ttu-id="68c9f-3008">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3008">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3009">FE 0C < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-3009">FE 0C < `unsigned int16` ></span></span>|<span data-ttu-id="68c9f-3010">ldloc</span><span class="sxs-lookup"><span data-stu-id="68c9f-3010">ldloc</span></span> `index`|<span data-ttu-id="68c9f-3011">Ładuje zmienna lokalna o indeksie `index` na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3011">Loads the local variable at index `index` onto stack.</span></span>|  
  
 <span data-ttu-id="68c9f-3012">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3012">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3013">Wartości zmiennej lokalnej o określonym indeksie są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3013">The local variable value at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3014">`ldloc` Instrukcji wypycha zawartość numer zmiennej lokalnej o indeksie przekazany na stosie oceny gdzie zmienne lokalne są numerowane 0 lub nowszy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3014">The `ldloc` instruction pushes the contents of the local variable number at the passed index onto the evaluation stack, where the local variables are numbered 0 onwards.</span></span> <span data-ttu-id="68c9f-3015">Zmienne lokalne są inicjowane na wartość 0, przed wprowadzeniem metody tylko wtedy, gdy flaga zainicjować metody ma wartość true.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3015">Local variables are initialized to 0 before entering the method only if the initialize flag on the method is true.</span></span> <span data-ttu-id="68c9f-3016">Istnieją 65 535 (2 ^ 16 - 1) zmienne lokalne możliwe (0-65,534).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3016">There are 65,535 (2^16-1) local variables possible (0-65,534).</span></span> <span data-ttu-id="68c9f-3017">65 535 indeksu jest nieprawidłowy, ponieważ implementacje prawdopodobnie będzie używać 2-bajtowych liczb całkowitych do śledzenia indeksu zarówno lokalnych, wraz z łączną liczbę zmiennych lokalnych dla danej metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3017">Index 65,535 is not valid since likely implementations will use a 2-byte integer to track both a local's index, along with the total number of locals for a given method.</span></span> <span data-ttu-id="68c9f-3018">Indeks 65535 dokonano prawidłowe, wymagałoby na liczbę całkowitą szersze śledzić liczbę zmiennych lokalnych w takiej metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3018">If an index of 65535 had been made valid, it would require a wider integer to track the number of locals in such a method.</span></span>  
  
 <span data-ttu-id="68c9f-3019">`ldloc.0`, `ldloc.1`, `ldloc.2`, I `ldloc.3` instrukcje stanowią efektywne kodowanie do uzyskiwania dostępu do zmiennych lokalnych pierwsze cztery.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3019">The `ldloc.0`, `ldloc.1`, `ldloc.2`, and `ldloc.3` instructions provide an efficient encoding for accessing the first four local variables.</span></span>  
  
 <span data-ttu-id="68c9f-3020">Typ wartości jest taki sam jak typ zmiennej lokalnej jest określony w nagłówku metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3020">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="68c9f-3021">Zobacz partycji I. lokalnych zmiennych, które są mniejsze niż 4 bajty są rozszerzane do typu `int32` , gdy są one załadowane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3021">See Partition I. Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="68c9f-3022">Wartości zmiennoprzecinkowe są rozszerzane do ich rozmiaru natywnego (typ `F`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3022">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="68c9f-3023">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenia metody można użyć `ldloc` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3023">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldloc` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3024">ILGenerator.Emit (OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3024">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="68c9f-3025">ILGenerator.Emit (OpCode, krótki)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3025">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3026">Ładuje zmienna lokalna o indeksie 0 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3026">Loads the local variable at index 0 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3027">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3027">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3028">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3028">Format</span></span>|<span data-ttu-id="68c9f-3029">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3029">Assembly Format</span></span>|<span data-ttu-id="68c9f-3030">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3030">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3031">06</span><span class="sxs-lookup"><span data-stu-id="68c9f-3031">06</span></span>|<span data-ttu-id="68c9f-3032">ldloc.0</span><span class="sxs-lookup"><span data-stu-id="68c9f-3032">ldloc.0</span></span>|<span data-ttu-id="68c9f-3033">Ładuje zmienna lokalna o indeksie 0 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3033">Loads the local variable at index 0 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="68c9f-3034">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3034">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3035">Wartości zmiennej lokalnej o indeksie 0 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3035">The local variable value at the index 0 is pushed onto the stack.</span></span>  
  
 `ldloc.0` <span data-ttu-id="68c9f-3036">jest szczególnie wydajne kodowania dla <xref:System.Reflection.Emit.OpCodes.Ldloc>, zezwalając na dostęp do zmiennej lokalnej o indeksie 0.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3036">is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 0.</span></span>  
  
 <span data-ttu-id="68c9f-3037">Typ wartości jest taki sam jak typ zmiennej lokalnej jest określony w nagłówku metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3037">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="68c9f-3038">Zmienne lokalne, które są mniejsze niż 4 bajty są rozszerzane do typu `int32` , gdy są one załadowane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3038">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="68c9f-3039">Wartości zmiennoprzecinkowe są rozszerzane do ich rozmiaru natywnego (typ `F`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3039">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="68c9f-3040">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldloc.0` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3040">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.0` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3041">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3041">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3042">Ładuje zmienna lokalna pod indeksem 1 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3042">Loads the local variable at index 1 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3043">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3043">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3044">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3044">Format</span></span>|<span data-ttu-id="68c9f-3045">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3045">Assembly Format</span></span>|<span data-ttu-id="68c9f-3046">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3046">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3047">07</span><span class="sxs-lookup"><span data-stu-id="68c9f-3047">07</span></span>|<span data-ttu-id="68c9f-3048">ldloc.1</span><span class="sxs-lookup"><span data-stu-id="68c9f-3048">ldloc.1</span></span>|<span data-ttu-id="68c9f-3049">Ładuje zmienna lokalna pod indeksem 1 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3049">Loads the local variable at index 1 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="68c9f-3050">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3050">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3051">Wartości zmiennej lokalnej pod indeksem 1 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3051">The local variable value at the index 1 is pushed onto the stack.</span></span>  
  
 `ldloc.1` <span data-ttu-id="68c9f-3052">jest szczególnie wydajne kodowania dla <xref:System.Reflection.Emit.OpCodes.Ldloc>, zezwalając na dostęp do zmiennej lokalnej pod indeksem 1.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3052">is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 1.</span></span>  
  
 <span data-ttu-id="68c9f-3053">Typ wartości jest taki sam jak typ zmiennej lokalnej jest określony w nagłówku metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3053">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="68c9f-3054">Zmienne lokalne, które są mniejsze niż 4 bajty są rozszerzane do typu `int32` , gdy są one załadowane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3054">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="68c9f-3055">Wartości zmiennoprzecinkowe są rozszerzane do ich rozmiaru natywnego (typ `F`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3055">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="68c9f-3056">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldloc.1` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3056">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.1` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3057">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3057">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3058">Ładuje zmienna lokalna pod indeksem 2 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3058">Loads the local variable at index 2 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3059">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3059">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3060">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3060">Format</span></span>|<span data-ttu-id="68c9f-3061">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3061">Assembly Format</span></span>|<span data-ttu-id="68c9f-3062">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3062">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3063">08</span><span class="sxs-lookup"><span data-stu-id="68c9f-3063">08</span></span>|<span data-ttu-id="68c9f-3064">ldloc.2</span><span class="sxs-lookup"><span data-stu-id="68c9f-3064">ldloc.2</span></span>|<span data-ttu-id="68c9f-3065">Ładuje zmienna lokalna pod indeksem 2 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3065">Loads the local variable at index 2 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="68c9f-3066">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3066">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3067">Wartości zmiennej lokalnej pod indeksem 2 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3067">The local variable value at the index 2 is pushed onto the stack.</span></span>  
  
 `ldloc.2` <span data-ttu-id="68c9f-3068">jest szczególnie wydajne kodowania dla <xref:System.Reflection.Emit.OpCodes.Ldloc>, zezwalając na dostęp do zmiennej lokalnej pod indeksem 2.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3068">is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 2.</span></span>  
  
 <span data-ttu-id="68c9f-3069">Typ wartości jest taki sam jak typ zmiennej lokalnej jest określony w nagłówku metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3069">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="68c9f-3070">Zmienne lokalne, które są mniejsze niż 4 bajty są rozszerzane do typu `int32` , gdy są one załadowane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3070">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="68c9f-3071">Wartości zmiennoprzecinkowe są rozszerzane do ich rozmiaru natywnego (typ `F`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3071">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="68c9f-3072">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldloc.2` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3072">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.2` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3073">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3073">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3074">Ładuje zmienna lokalna o indeksie 3 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3074">Loads the local variable at index 3 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3075">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3075">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3076">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3076">Format</span></span>|<span data-ttu-id="68c9f-3077">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3077">Assembly Format</span></span>|<span data-ttu-id="68c9f-3078">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3078">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3079">09</span><span class="sxs-lookup"><span data-stu-id="68c9f-3079">09</span></span>|<span data-ttu-id="68c9f-3080">ldloc.3</span><span class="sxs-lookup"><span data-stu-id="68c9f-3080">ldloc.3</span></span>|<span data-ttu-id="68c9f-3081">Ładuje zmienna lokalna o indeksie 3 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3081">Loads the local variable at index 3 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="68c9f-3082">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3082">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3083">Wartości zmiennej lokalnej o indeksie 3 są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3083">The local variable value at the index 3 is pushed onto the stack.</span></span>  
  
 `ldloc.3` <span data-ttu-id="68c9f-3084">jest szczególnie wydajne kodowania dla <xref:System.Reflection.Emit.OpCodes.Ldloc>, zezwalając na dostęp do zmiennej lokalnej o indeksie 3.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3084">is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 3.</span></span>  
  
 <span data-ttu-id="68c9f-3085">Typ wartości jest taki sam jak typ zmiennej lokalnej jest określony w nagłówku metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3085">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="68c9f-3086">Zmienne lokalne, które są mniejsze niż 4 bajty są rozszerzane do typu `int32` , gdy są one załadowane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3086">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="68c9f-3087">Wartości zmiennoprzecinkowe są rozszerzane do ich rozmiaru natywnego (typ `F`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3087">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="68c9f-3088">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldloc.3` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3088">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.3` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3089">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3089">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3090">Ładuje zmienna lokalna o określonym indeksie na stosie oceny, krótka.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3090">Loads the local variable at a specific index onto the evaluation stack, short form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3091">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3091">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3092">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3092">Format</span></span>|<span data-ttu-id="68c9f-3093">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3093">Assembly Format</span></span>|<span data-ttu-id="68c9f-3094">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3094">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3095">11 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-3095">11 < `unsigned int8` ></span></span>|<span data-ttu-id="68c9f-3096">ldloc.s</span><span class="sxs-lookup"><span data-stu-id="68c9f-3096">ldloc.s</span></span> `index`|<span data-ttu-id="68c9f-3097">Ładuje zmienna lokalna o indeksie `index` na stosie, krótka.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3097">Loads the local variable at index `index` onto stack, short form.</span></span>|  
  
 <span data-ttu-id="68c9f-3098">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3098">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3099">Wartości zmiennej lokalnej o określonym indeksie są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3099">The local variable value at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3100">`ldloc.s` Instrukcji wypycha zawartość numer zmiennej lokalnej o indeksie przekazany na stosie oceny gdzie zmienne lokalne są numerowane 0 lub nowszy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3100">The `ldloc.s` instruction pushes the contents of the local variable number at the passed index onto the evaluation stack, where the local variables are numbered 0 onwards.</span></span> <span data-ttu-id="68c9f-3101">Zmienne lokalne są inicjowane na wartość 0, przed wprowadzeniem metody, jeśli flaga zainicjować metody ma wartość true.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3101">Local variables are initialized to 0 before entering the method if the initialize flag on the method is true.</span></span> <span data-ttu-id="68c9f-3102">Istnieją 256 (2 ^ 8) zmiennych lokalnych możliwe (0 – 255) w krótkiej formy, która jest bardziej efektywne kodowanie niż `ldloc`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3102">There are 256 (2^8) local variables possible (0-255) in the short form, which is a more efficient encoding than `ldloc`.</span></span>  
  
 <span data-ttu-id="68c9f-3103">Typ wartości jest taki sam jak typ zmiennej lokalnej jest określony w nagłówku metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3103">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="68c9f-3104">Zobacz partycji I. lokalnych zmiennych, które są mniejsze niż 4 bajty są rozszerzane do typu `int32` , gdy są one załadowane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3104">See Partition I. Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="68c9f-3105">Wartości zmiennoprzecinkowe są rozszerzane do ich rozmiaru natywnego (typ `F`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3105">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="68c9f-3106">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenia metody można użyć `ldloc.s` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3106">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldloc.s` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3107">ILGenerator.Emit (OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3107">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="68c9f-3108">ILGenerator.Emit (OpCode, bajtów)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3108">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloca">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloca;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloca" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloca" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloca As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloca;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloca : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloca" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3109">Ładuje adres zmiennej lokalnej o określonym indeksie na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3109">Loads the address of the local variable at a specific index onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3110">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3110">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3111">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3111">Format</span></span>|<span data-ttu-id="68c9f-3112">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3112">Assembly Format</span></span>|<span data-ttu-id="68c9f-3113">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3113">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3114">FE OD &LT; `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-3114">FE OD < `unsigned int16` ></span></span>|<span data-ttu-id="68c9f-3115">ldloca</span><span class="sxs-lookup"><span data-stu-id="68c9f-3115">ldloca</span></span> `index`|<span data-ttu-id="68c9f-3116">Ładuje adres zmiennej lokalnej o `index` na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3116">Loads the address of the local variable at `index` onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="68c9f-3117">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3117">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3118">Adres przechowywany w zmiennej lokalnej o określonym indeksie są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3118">The address stored in the local variable at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3119">`ldloca` Instrukcji wypycha adres numer zmiennej lokalnej o indeksie przekazany na stosie, gdy zmienne lokalne są numerowane 0 lub nowszy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3119">The `ldloca` instruction pushes the address of the local variable number at the passed index onto the stack, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="68c9f-3120">Wartość wypychane na stos jest już powiązana poprawnie do użytku z instrukcji takich jak <xref:System.Reflection.Emit.OpCodes.Ldind_I> i <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3120">The value pushed on the stack is already aligned correctly for use with instructions like <xref:System.Reflection.Emit.OpCodes.Ldind_I> and <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span></span> <span data-ttu-id="68c9f-3121">Wynik jest wskaźnikiem przejściowy (typ `*`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3121">The result is a transient pointer (type `*`).</span></span>  
  
 <span data-ttu-id="68c9f-3122">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldloca` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3122">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloca` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3123">ILGenerator.Emit (OpCode, krótki)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3123">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloca_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloca_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloca_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloca_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloca_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloca_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloca_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloca_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3124">Ładuje adres zmiennej lokalnej o określonym indeksie na stosie oceny, krótka.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3124">Loads the address of the local variable at a specific index onto the evaluation stack, short form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3125">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3125">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3126">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3126">Format</span></span>|<span data-ttu-id="68c9f-3127">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3127">Assembly Format</span></span>|<span data-ttu-id="68c9f-3128">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3128">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3129">12 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-3129">12 < `unsigned int8` ></span></span>|<span data-ttu-id="68c9f-3130">ldloca.s</span><span class="sxs-lookup"><span data-stu-id="68c9f-3130">ldloca.s</span></span> `index`|<span data-ttu-id="68c9f-3131">Ładuje adres zmiennej lokalnej o `index` na stosie oceny krótka.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3131">Loads the address of the local variable at `index` onto the evaluation stack, short form.</span></span>|  
  
 <span data-ttu-id="68c9f-3132">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3132">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3133">Adres przechowywany w zmiennej lokalnej o określonym indeksie są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3133">The address stored in the local variable at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3134">`ldloca.s` Instrukcji wypycha adres numer zmiennej lokalnej o indeksie przekazany na stosie, gdy zmienne lokalne są numerowane 0 lub nowszy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3134">The `ldloca.s` instruction pushes the address of the local variable number at the passed index onto the stack, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="68c9f-3135">Wartość wypychane na stos jest już powiązana poprawnie do użytku z instrukcji takich jak <xref:System.Reflection.Emit.OpCodes.Ldind_I> i <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3135">The value pushed on the stack is already aligned correctly for use with instructions like <xref:System.Reflection.Emit.OpCodes.Ldind_I> and <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span></span> <span data-ttu-id="68c9f-3136">Wynik jest wskaźnikiem przejściowy (typ `*`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3136">The result is a transient pointer (type `*`).</span></span>  
  
 <span data-ttu-id="68c9f-3137">`ldloca.s` Instrukcji zapewnia efektywne kodowanie do użycia ze zmiennymi lokalnymi od 0 do 255.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3137">The `ldloca.s` instruction provides an efficient encoding for use with the local variables 0 through 255.</span></span>  
  
 <span data-ttu-id="68c9f-3138">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldloca.s` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3138">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloca.s` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3139">ILGenerator.Emit (OpCode, bajtów)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3139">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldnull">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldnull;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldnull" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldnull" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldnull As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldnull;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldnull : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldnull" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3140">Wypycha odwołanie o wartości null (typ <see langword="O" />) na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3140">Pushes a null reference (type <see langword="O" />) onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3141">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3141">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3142">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3142">Format</span></span>|<span data-ttu-id="68c9f-3143">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3143">Assembly Format</span></span>|<span data-ttu-id="68c9f-3144">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3144">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3145">14</span><span class="sxs-lookup"><span data-stu-id="68c9f-3145">14</span></span>|<span data-ttu-id="68c9f-3146">ldnull</span><span class="sxs-lookup"><span data-stu-id="68c9f-3146">ldnull</span></span>|<span data-ttu-id="68c9f-3147">Wypychanie odwołanie o wartości null na stosie</span><span class="sxs-lookup"><span data-stu-id="68c9f-3147">push a null reference onto the stack</span></span>|  
  
 <span data-ttu-id="68c9f-3148">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3148">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3149">Odwołanie do obiektu o wartości null są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3149">A null object reference is pushed onto the stack.</span></span>  
  
 `ldnull` <span data-ttu-id="68c9f-3150">wypycha odwołanie o wartości null (typ `O`) na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3150">pushes a null reference (type `O`) on the stack.</span></span> <span data-ttu-id="68c9f-3151">Służy to do zainicjowania lokalizacje przed wypełniony danymi lub mogą stać się przestarzałe.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3151">This is used to initialize locations before they are populated with data, or when they become deprecated.</span></span>  
  
 `ldnull` <span data-ttu-id="68c9f-3152">zawiera odwołanie o wartości null, który jest niezależny od rozmiaru.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3152">provides a null reference that is size-independent.</span></span>  
  
 <span data-ttu-id="68c9f-3153">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldnull` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3153">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldnull` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3154">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3154">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3155">Kopie obiektu typu wartościowego wskazywana przez adres na górze stosu oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3155">Copies the value type object pointed to by an address to the top of the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3156">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3156">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3157">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3157">Format</span></span>|<span data-ttu-id="68c9f-3158">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3158">Assembly Format</span></span>|<span data-ttu-id="68c9f-3159">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3159">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3160">71 < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-3160">71 < `T` ></span></span>|<span data-ttu-id="68c9f-3161">ldobj</span><span class="sxs-lookup"><span data-stu-id="68c9f-3161">ldobj</span></span> `class`|<span data-ttu-id="68c9f-3162">Kopiuj wystąpienie typu wartości `class` stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3162">Copy instance of value type `class` to the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-3163">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3163">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3164">Adres obiektu typu wartościowego są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3164">The address of a value type object is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-3165">Adres zostanie zdjęte ze stosu i wyszukiwane są wystąpienia pod tym adresem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3165">The address is popped from the stack and the instance at that particular address is looked up.</span></span>  
  
3.  <span data-ttu-id="68c9f-3166">Wartość obiektu przechowywane pod tym adresem są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3166">The value of the object stored at that address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3167">`ldobj` Instrukcji jest używany do przekazywania typu wartości jako parametr.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3167">The `ldobj` instruction is used to pass a value type as a parameter.</span></span>  
  
 <span data-ttu-id="68c9f-3168">`ldobj` Instrukcji kopiuje wartość wskazywana przez `addrOfValObj` (typu `&`, `*`, lub `native int`) na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3168">The `ldobj` instruction copies the value pointed to by `addrOfValObj` (of type `&`, `*`, or `native int`) to the top of the stack.</span></span> <span data-ttu-id="68c9f-3169">Liczbą bajtów skopiowanych zależy od rozmiaru klasy (zgodnie z określonym `class` parametru).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3169">The number of bytes copied depends on the size of the class (as specified by the `class` parameter).</span></span> <span data-ttu-id="68c9f-3170">`class` Parametr jest token metadanych reprezentujący typ wartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3170">The `class` parameter is a metadata token representing the value type.</span></span>  
  
 <span data-ttu-id="68c9f-3171">Działanie `ldobj` instrukcji może być zmienione przez bezpośrednio poprzedzający <xref:System.Reflection.Emit.OpCodes.Volatile> lub <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3171">The operation of the `ldobj` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <xref:System.TypeLoadException> <span data-ttu-id="68c9f-3172">jest generowany, jeśli nie można odnaleźć klasy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3172">is thrown if class cannot be found.</span></span> <span data-ttu-id="68c9f-3173">Jest to zazwyczaj wykrywany, po instrukcji Microsoft Intermediate Language (MSIL) jest konwertowana do kodu natywnego, a nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3173">This is typically detected when the Microsoft Intermediate Language (MSIL) instruction is converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="68c9f-3174">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldobj` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3174">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldobj` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3175">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3175">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldsfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldsfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldsfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldsfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldsfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldsfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldsfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldsfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3176">Wypycha wartość pola statycznego na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3176">Pushes the value of a static field onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3177">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3177">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3178">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3178">Format</span></span>|<span data-ttu-id="68c9f-3179">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3179">Assembly Format</span></span>|<span data-ttu-id="68c9f-3180">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3180">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3181">7E < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-3181">7E < `T` ></span></span>|<span data-ttu-id="68c9f-3182">ldsfld</span><span class="sxs-lookup"><span data-stu-id="68c9f-3182">ldsfld</span></span> `field`|<span data-ttu-id="68c9f-3183">Wypychanie wartości `field` na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3183">Push the value of `field` on the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-3184">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3184">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3185">Wartość określonego pola są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3185">The value of the specific field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3186">`ldsfld` Instrukcji wypycha wartość statyczne (współużytkowane przez wszystkie wystąpienia klasy) pola na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3186">The `ldsfld` instruction pushes the value of a static (shared among all instances of a class) field on the stack.</span></span> <span data-ttu-id="68c9f-3187">Typ zwracany jest skojarzone z tokenem przekazany metadanych `field`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3187">The return type is that associated with the passed metadata token `field`.</span></span>  
  
 <span data-ttu-id="68c9f-3188">`ldsfld` Instrukcji może mieć <xref:System.Reflection.Emit.OpCodes.Volatile> prefiks.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3188">The `ldsfld` instruction can have a <xref:System.Reflection.Emit.OpCodes.Volatile> prefix.</span></span>  
  
 <span data-ttu-id="68c9f-3189">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldsfld` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3189">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldsfld` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3190">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3190">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldsflda">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldsflda;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldsflda" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldsflda" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldsflda As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldsflda;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldsflda : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldsflda" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3191">Wypycha adresu statycznego pola na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3191">Pushes the address of a static field onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3192">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3192">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3193">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3193">Format</span></span>|<span data-ttu-id="68c9f-3194">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3194">Assembly Format</span></span>|<span data-ttu-id="68c9f-3195">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3195">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3196">7F < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-3196">7F < `T` ></span></span>|<span data-ttu-id="68c9f-3197">ldsflda</span><span class="sxs-lookup"><span data-stu-id="68c9f-3197">ldsflda</span></span> `field`|<span data-ttu-id="68c9f-3198">Wypychanie adres `field` na stosie</span><span class="sxs-lookup"><span data-stu-id="68c9f-3198">Push the address of `field` on the stack</span></span>|  
  
 <span data-ttu-id="68c9f-3199">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3199">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3200">Adres określonego pola są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3200">The address of a specific field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3201">`ldsflda` Instrukcji wypycha adres statyczne (współużytkowane przez wszystkie wystąpienia klasy) pola na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3201">The `ldsflda` instruction pushes the address of a static (shared among all instances of a class) field on the stack.</span></span> <span data-ttu-id="68c9f-3202">Adres może być reprezentowana jako przejściowe wskaźnika (typ `*`) Jeśli token metadanych `field` odwołuje się do typu, którego pamięć jest zarządzana.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3202">The address may be represented as a transient pointer (type `*`) if the metadata token `field` refers to a type whose memory is managed.</span></span> <span data-ttu-id="68c9f-3203">W przeciwnym razie odpowiadający mu niezarządzany wskaźnik (typ `native int`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3203">Otherwise, it corresponds to an unmanaged pointer (type `native int`).</span></span> <span data-ttu-id="68c9f-3204">Należy pamiętać, że `field` statycznego mogą być globalne przy użyciu przypisanych względny adres wirtualny (przesunięcia z pola Adres podstawowy, w którym jego zawierającego plik PE jest ładowany do pamięci) pamięci w przypadku niezarządzanych.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3204">Note that `field` may be a static global with an assigned relative virtual address (the offset of the field from the base address at which its containing PE file is loaded into memory) where the memory is unmanaged.</span></span>  
  
 <span data-ttu-id="68c9f-3205">`ldsflda` Instrukcji może mieć <xref:System.Reflection.Emit.OpCodes.Volatile> prefiks.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3205">The `ldsflda` instruction can have a <xref:System.Reflection.Emit.OpCodes.Volatile> prefix.</span></span>  
  
 <xref:System.MissingFieldException> <span data-ttu-id="68c9f-3206">jest generowany, jeśli pole nie zostanie znaleziony w metadanych.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3206">is thrown if field is not found in the metadata.</span></span> <span data-ttu-id="68c9f-3207">Jest to zazwyczaj sprawdzana po instrukcji Microsoft Intermediate Language (MSIL) są konwertowane do kodu macierzystego, nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3207">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at runtime.</span></span>  
  
 <span data-ttu-id="68c9f-3208">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldsflda` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3208">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldsflda` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3209">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3209">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldstr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldstr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldstr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldstr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldstr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldstr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldstr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldstr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3210">Wypycha nowe odwołanie do obiektu, do literału ciągu przechowywany w metadanych.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3210">Pushes a new object reference to a string literal stored in the metadata.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3211">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3211">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3212">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3212">Format</span></span>|<span data-ttu-id="68c9f-3213">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3213">Assembly Format</span></span>|<span data-ttu-id="68c9f-3214">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3214">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3215">72 < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-3215">72 < `T` ></span></span>|<span data-ttu-id="68c9f-3216">ldstr</span><span class="sxs-lookup"><span data-stu-id="68c9f-3216">ldstr</span></span> `mdToken`|<span data-ttu-id="68c9f-3217">Obiekt ciągu dla token ciągu metadanych wypycha `mdToken`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3217">Pushes a string object for the metadata string token `mdToken`.</span></span>|  
  
 <span data-ttu-id="68c9f-3218">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3218">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3219">Odwołanie do obiektu na ciąg są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3219">An object reference to a string is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3220">`ldstr` Instrukcji wypycha odwołanie do obiektu (typ `O`) na obiekt ciągu reprezentujący określony ciąg znaków literału przechowywany w metadanych.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3220">The `ldstr` instruction pushes an object reference (type `O`) to a new string object representing the specific string literal stored in the metadata.</span></span> <span data-ttu-id="68c9f-3221">`ldstr` Instrukcji przydziela wymaganego ilość pamięci i wykonuje żadnych konwersji formatów, wymaganych do przekonwertowania literału ciągu w formularzu, który został użyty w pliku formatu ciągu wymagane w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3221">The `ldstr` instruction allocates the requisite amount of memory and performs any format conversion required to convert the string literal from the form used in the file to the string format required at runtime.</span></span>  
  
 <span data-ttu-id="68c9f-3222">Common Language Infrastructure (CLI) gwarantuje, że wynik dwa `ldstr` instrukcje odwołujące się do dwa tokeny metadanych, które mają taką samą sekwencję znaków przywrócić dokładnie tego samego ciągu obiektu (proces znany jako "wewnętrzne przygotowanie ciągu").</span><span class="sxs-lookup"><span data-stu-id="68c9f-3222">The Common Language Infrastructure (CLI) guarantees that the result of two `ldstr` instructions referring to two metadata tokens that have the same sequence of characters return precisely the same string object (a process known as "string interning").</span></span>  
  
 <span data-ttu-id="68c9f-3223">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldstr` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3223">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldstr` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3224">ILGenerator.Emit (OpCode, ciąg)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3224">ILGenerator.Emit(OpCode, string)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldtoken">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldtoken;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldtoken" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldtoken" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldtoken As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldtoken;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldtoken : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldtoken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3225">Konwertuje token metadanych na jego reprezentację środowiska uruchomieniowego, wypychając ją na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3225">Converts a metadata token to its runtime representation, pushing it onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3226">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3226">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3227">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3227">Format</span></span>|<span data-ttu-id="68c9f-3228">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3228">Assembly Format</span></span>|<span data-ttu-id="68c9f-3229">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3229">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3230">D0 < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-3230">D0 < `T` ></span></span>|<span data-ttu-id="68c9f-3231">Ldtoken</span><span class="sxs-lookup"><span data-stu-id="68c9f-3231">ldtoken</span></span> `token`|<span data-ttu-id="68c9f-3232">Konwertuje token metadanych na jego reprezentację środowiska uruchomieniowego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3232">Converts a metadata token to its runtime representation.</span></span>|  
  
 <span data-ttu-id="68c9f-3233">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3233">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3234">Token przekazany jest konwertowany na `RuntimeHandle` i wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3234">The passed token is converted to a `RuntimeHandle` and pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3235">`ldtoken` Wypchnięć instrukcji `RuntimeHandle` dla tokenu określonych metadanych.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3235">The `ldtoken` instruction pushes a `RuntimeHandle` for the specified metadata token.</span></span> <span data-ttu-id="68c9f-3236">A `RuntimeHandle` może być `fieldref/fielddef`, `methodref/methoddef`, lub `typeref/typedef`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3236">A `RuntimeHandle` can be a `fieldref/fielddef`, a `methodref/methoddef`, or a `typeref/typedef`.</span></span>  
  
 <span data-ttu-id="68c9f-3237">Wartość wypychane na stos może służyć w wywołaniach `Reflection` metody w bibliotece klas systemowych.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3237">The value pushed on the stack can be used in calls to `Reflection` methods in the system class library.</span></span>  
  
 <span data-ttu-id="68c9f-3238">Aby uzyskać informacji na temat obsługi środowiska uruchomieniowego, zobacz następujące klasy: <xref:System.RuntimeFieldHandle>, <xref:System.RuntimeTypeHandle>, i <xref:System.RuntimeMethodHandle>.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3238">For information on runtime handles, see the following classes: <xref:System.RuntimeFieldHandle>, <xref:System.RuntimeTypeHandle>, and <xref:System.RuntimeMethodHandle>.</span></span>  
  
 <span data-ttu-id="68c9f-3239">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenia metody można użyć `ldtoken` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3239">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldtoken` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3240">ILGenerator.Emit(OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3240">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="68c9f-3241">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3241">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
-   <span data-ttu-id="68c9f-3242">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3242">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldvirtftn">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldvirtftn;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldvirtftn" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldvirtftn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldvirtftn As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldvirtftn;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldvirtftn : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldvirtftn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3243">Umieszcza niezarządzany wskaźnik (typ <see langword="native int" />) do kodu natywnego wykonywania określonej metody wirtualnej skojarzone z określonego obiektu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3243">Pushes an unmanaged pointer (type <see langword="native int" />) to the native code implementing a particular virtual method associated with a specified object onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3244">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3244">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3245">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3245">Format</span></span>|<span data-ttu-id="68c9f-3246">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3246">Assembly Format</span></span>|<span data-ttu-id="68c9f-3247">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3247">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3248">FE 07 &LT; `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-3248">FE 07 < `T` ></span></span>|<span data-ttu-id="68c9f-3249">ldvirtftn</span><span class="sxs-lookup"><span data-stu-id="68c9f-3249">ldvirtftn</span></span> `method`|<span data-ttu-id="68c9f-3250">Wypychanie wskaźnik do obiektu metodę wirtualną `method` na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3250">Pushes the pointer to an object's virtual method `method` on the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-3251">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3251">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3252">Odwołanie do obiektu są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3252">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-3253">Odwołanie do obiektu zostanie zdjęte ze stosu i adres punktu wejścia do metody (określone przez token metadanych `method`) będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3253">The object reference is popped from the stack and the address of the entry point to the method (as specified by the metadata token `method`) is looked up.</span></span>  
  
3.  <span data-ttu-id="68c9f-3254">Wskaźnik do `method` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3254">The pointer to `method` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3255">Niezarządzany wskaźnik wynikowy wypychane na stosie przez `ldvirtftn` instrukcji można wywoływać za pomocą <xref:System.Reflection.Emit.OpCodes.Calli> instrukcji, jeśli odwołuje się zarządzaną metodą (lub procedurę zastępczą, przejście z kodu zarządzanego do kodu niezarządzanego).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3255">The resulting unmanaged pointer pushed onto the stack by the `ldvirtftn` instruction can be called using the <xref:System.Reflection.Emit.OpCodes.Calli> instruction if it references a managed method (or a stub that transitions from managed to unmanaged code).</span></span>  
  
 <span data-ttu-id="68c9f-3256">Niezarządzany wskaźnik wskazuje kodu natywnego za pomocą konwencji wywoływania środowiska CLR.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3256">The unmanaged pointer points to native code using the CLR calling convention.</span></span> <span data-ttu-id="68c9f-3257">This, wskaźnik metody nie powinny być przekazywane do niezarządzanego kodu natywnego jako procedura wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3257">This method pointer should not be passed to unmanaged native code as a callback routine.</span></span>  
  
 <span data-ttu-id="68c9f-3258">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ldvirtftn` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3258">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldvirtftn` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3259">ILGenerator.Emit(OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3259">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Leave">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Leave;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Leave" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Leave" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Leave As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Leave;" />
      <MemberSignature Language="F#" Value=" staticval mutable Leave : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Leave" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3260">Zamyka chronione regionów kodu, bezwarunkowo transferowanie formantu do instrukcji określony element docelowy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3260">Exits a protected region of code, unconditionally transferring control to a specific target instruction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3261">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3261">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3262">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3262">Format</span></span>|<span data-ttu-id="68c9f-3263">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3263">Assembly Format</span></span>|<span data-ttu-id="68c9f-3264">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3264">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3265">DD < `int32` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-3265">DD < `int32` ></span></span>|<span data-ttu-id="68c9f-3266">Pozostaw</span><span class="sxs-lookup"><span data-stu-id="68c9f-3266">leave</span></span> `target`|<span data-ttu-id="68c9f-3267">Zamyka chronione regionów kodu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3267">Exits a protected region of code.</span></span>|  
  
 <span data-ttu-id="68c9f-3268">Nie ma żadnych stosu przejścia nieaktywności dla tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3268">There is no stack transition behavior specified for this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-3269">`leave` Instrukcji bezwarunkowo przekazuje sterowanie do instrukcji określonych docelowych, reprezentowane jako 4-bajtowych oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3269">The `leave` instruction unconditionally transfers control to the specific target instruction, represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-3270">`leave` Instrukcji jest podobna do `br` instrukcji, ale można zamknąć `try`, `filter`, lub `catch` blokowania, natomiast instrukcji gałęzi zwykłych należy używać tylko w tych bloku do przekazywania kontroli w ramach go.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3270">The `leave` instruction is similar to the `br` instruction, but it can be used to exit a `try`, `filter`, or `catch` block whereas the ordinary branch instructions can only be used in such a block to transfer control within it.</span></span> <span data-ttu-id="68c9f-3271">`leave` Instrukcji opróżnia stosu oceny i zapewnia, że odpowiednie otaczającego `finally` bloki są wykonywane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3271">The `leave` instruction empties the evaluation stack and ensures that the appropriate surrounding `finally` blocks are executed.</span></span>  
  
 <span data-ttu-id="68c9f-3272">Nie można użyć `leave` instrukcji, aby zakończyć działanie `finally` bloku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3272">You cannot use a `leave` instruction to exit a `finally` block.</span></span> <span data-ttu-id="68c9f-3273">Do generowania kodu dla obsługi wyjątków jest prawidłowy z wnętrza bloku catch służące do jej obsługi ułatwiają `leave` kontrola jest przekazywana do żadnych instrukcji w skojarzonej instrukcji `try` bloku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3273">To ease code generation for exception handlers it is valid from within a catch block to use a `leave` instruction to transfer control to any instruction within the associated `try` block.</span></span>  
  
 <span data-ttu-id="68c9f-3274">Jeśli instrukcja zawiera co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3274">If an instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="68c9f-3275">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenia metody można użyć `leave` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3275">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `leave` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3276">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3276">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Leave_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Leave_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Leave_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Leave_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Leave_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Leave_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Leave_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Leave_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3277">Zamyka chronione regionów kodu, bezwarunkowo transferowanie formantu do instrukcji docelowej (krótka).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3277">Exits a protected region of code, unconditionally transferring control to a target instruction (short form).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3278">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3278">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3279">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3279">Format</span></span>|<span data-ttu-id="68c9f-3280">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3280">Assembly Format</span></span>|<span data-ttu-id="68c9f-3281">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3281">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3282">DE < `int8` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-3282">DE < `int8` ></span></span>|<span data-ttu-id="68c9f-3283">Leave.s</span><span class="sxs-lookup"><span data-stu-id="68c9f-3283">leave.s</span></span> `target`|<span data-ttu-id="68c9f-3284">Zamknij chronione regionów kodu, krótka.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3284">Exit a protected region of code, short form.</span></span>|  
  
 <span data-ttu-id="68c9f-3285">Nie ma żadnych stosu przejścia nieaktywności dla tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3285">There is no stack transition behavior specified for this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-3286">`leave.s` Instrukcji bezwarunkowo przekazuje sterowanie do instrukcji docelowej przekazany, reprezentowane jako 1-bajtowe oznaczone przesunięcie od początku instrukcji zgodnie z bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3286">The `leave.s` instruction unconditionally transfers control to the passed target instruction, represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="68c9f-3287">`leave.s` Instrukcji jest podobna do `br` instrukcji, ale można zamknąć `try`, `filter`, lub `catch` blokowania, natomiast instrukcji gałęzi zwykłych należy używać tylko w tych bloku do przekazywania kontroli w ramach go.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3287">The `leave.s` instruction is similar to the `br` instruction, but it can be used to exit a `try`, `filter`, or `catch` block whereas the ordinary branch instructions can only be used in such a block to transfer control within it.</span></span> <span data-ttu-id="68c9f-3288">`leave.s` Instrukcji opróżnia stosu oceny i zapewnia, że odpowiednie otaczającego `finally` bloki są wykonywane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3288">The `leave.s` instruction empties the evaluation stack and ensures that the appropriate surrounding `finally` blocks are executed.</span></span>  
  
 <span data-ttu-id="68c9f-3289">Nie można użyć `leave.s` instrukcji, aby zakończyć działanie `finally` bloku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3289">You cannot use a `leave.s` instruction to exit a `finally` block.</span></span> <span data-ttu-id="68c9f-3290">Do generowania kodu dla obsługi wyjątków jest prawidłowy z wnętrza bloku catch służące do jej obsługi ułatwiają `leave.s` kontrola jest przekazywana do żadnych instrukcji w skojarzonej instrukcji `try` bloku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3290">To ease code generation for exception handlers it is valid from within a catch block to use a `leave.s` instruction to transfer control to any instruction within the associated `try` block.</span></span>  
  
 <span data-ttu-id="68c9f-3291">Jeśli instrukcja zawiera co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3291">If an instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="68c9f-3292">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `leave.s` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3292">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `leave.s` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3293">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3293">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Localloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Localloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Localloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Localloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Localloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Localloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Localloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Localloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3294">Przydziela określoną liczbę bajtów z puli lokalnej pamięci dynamicznej, a następnie wypycha adres (wskaźnik przejściowym, typ <see langword="*" />) pierwszego bajtu przydzielony na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3294">Allocates a certain number of bytes from the local dynamic memory pool and pushes the address (a transient pointer, type <see langword="*" />) of the first allocated byte onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3295">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3295">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3296">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3296">Format</span></span>|<span data-ttu-id="68c9f-3297">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3297">Assembly Format</span></span>|<span data-ttu-id="68c9f-3298">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3298">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3299">FE 0F</span><span class="sxs-lookup"><span data-stu-id="68c9f-3299">FE 0F</span></span>|<span data-ttu-id="68c9f-3300">operacji localloc</span><span class="sxs-lookup"><span data-stu-id="68c9f-3300">localloc</span></span>|<span data-ttu-id="68c9f-3301">Przydzielanie miejsca z lokalnej sterty.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3301">Allocate space from the local heap.</span></span>|  
  
 <span data-ttu-id="68c9f-3302">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3302">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3303">Liczba bajtów do przydzielenia, są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3303">The number of bytes to be allocated is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-3304">Liczba bajtów zostanie zdjęte ze stosu; ilość pamięci, odpowiadający rozmiar jest przydzielany z lokalnej sterty.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3304">The number of bytes is popped from the stack; an amount of memory corresponding to the size is allocated from the local heap.</span></span>  
  
3.  <span data-ttu-id="68c9f-3305">Wskaźnik do pierwszego bajtu ilość przydzielonej pamięci są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3305">A pointer to the first byte of the allocated memory is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3306">`localloc` Przydziela instrukcji `size` (typ `natural unsigned int`) bajtów z lokalnej pamięci dynamicznej w puli i zwraca adres (wskaźnik przejściowym, typ `*`) pierwszego bajtu przydzielone.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3306">The `localloc` instruction allocates `size` (type `natural unsigned int`) bytes from the local dynamic memory pool and returns the address (a transient pointer, type `*`) of the first allocated byte.</span></span> <span data-ttu-id="68c9f-3307">Blok pamięci zwracany jest inicjowana wartością 0 tylko wtedy, gdy flaga inicjowania w metodzie `true`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3307">The block of memory returned is initialized to 0 only if the initialize flag on the method is `true`.</span></span> <span data-ttu-id="68c9f-3308">Po wykonaniu bieżącej metody <xref:System.Reflection.Emit.OpCodes.Ret>, puli pamięci lokalnej jest udostępniana do ponownego użycia.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3308">When the current method executes a <xref:System.Reflection.Emit.OpCodes.Ret>, the local memory pool is made available for reuse.</span></span>  
  
 <span data-ttu-id="68c9f-3309">Otrzymany adres jest wyrównywany tak, aby dowolnego typu danych pierwotnych może znajdować się za pomocą `stind` instrukcje (takie jak <xref:System.Reflection.Emit.OpCodes.Stind_I4>) i załadowany przy użyciu `ldind` instrukcje (takie jak <xref:System.Reflection.Emit.OpCodes.Ldind_I4>).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3309">The resulting address is aligned so that any primitive data type can be stored there using the `stind` instructions (such as <xref:System.Reflection.Emit.OpCodes.Stind_I4>) and loaded using the `ldind` instructions (such as <xref:System.Reflection.Emit.OpCodes.Ldind_I4>).</span></span>  
  
 <span data-ttu-id="68c9f-3310">`localloc` Instrukcji nie mogą występować w `filter`, `catch`, `finally`, lub `fault` bloku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3310">The `localloc` instruction cannot occur within a `filter`, `catch`, `finally`, or `fault` block.</span></span>  
  
 <xref:System.StackOverflowException> <span data-ttu-id="68c9f-3311">jest generowany, jeśli pamięć jest niewystarczająca do obsługi żądania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3311">is thrown if there is insufficient memory to service the request.</span></span>  
  
 <span data-ttu-id="68c9f-3312">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `localloc` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3312">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `localloc` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3313">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3313">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mkrefany">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mkrefany;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mkrefany" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mkrefany" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mkrefany As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mkrefany;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mkrefany : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mkrefany" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3314">Wypycha wpisane odwołania do wystąpienia określonego typu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3314">Pushes a typed reference to an instance of a specific type onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3315">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3315">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3316">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3316">Format</span></span>|<span data-ttu-id="68c9f-3317">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3317">Assembly Format</span></span>|<span data-ttu-id="68c9f-3318">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3318">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3319">C6 < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-3319">C6 < `T` ></span></span>|<span data-ttu-id="68c9f-3320">mkrefany</span><span class="sxs-lookup"><span data-stu-id="68c9f-3320">mkrefany</span></span> `class`|<span data-ttu-id="68c9f-3321">Wypycha wpisane odwołanie typu `class` na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3321">Pushes a typed reference of type `class` onto the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-3322">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3322">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3323">Wskaźnik do elementu danych są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3323">A pointer to piece of data is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-3324">Wskaźnik jest zdjęte ze stosu i konwertowana do typizowanych odwołanie typu `class`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3324">The pointer is popped and converted to a typed reference of type `class`.</span></span>  
  
3.  <span data-ttu-id="68c9f-3325">Wpisane odwołania są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3325">The typed reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3326">`mkrefany` Instrukcji obsługuje przekazywanie odwołania o typach określanych dynamicznie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3326">The `mkrefany` instruction supports the passing of dynamically typed references.</span></span> <span data-ttu-id="68c9f-3327">Wskaźnik musi być typu `&`, `*`, lub `native int`i przytrzymaj prawidłowy adres elementu danych.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3327">The pointer must be of type `&`, `*`, or `native int`, and hold the valid address of a piece of data.</span></span> `Class` <span data-ttu-id="68c9f-3328">jest token klasy opisujące typ danych odwołuje się wskaźnik myszy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3328">is the class token describing the type of the data referenced by the pointer.</span></span> `Mkrefany` <span data-ttu-id="68c9f-3329">wypycha wpisane odwołania na stosie, zapewniając deskryptora nieprzezroczyste wskaźnika i typ `class`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3329">pushes a typed reference on the stack, providing an opaque descriptor of the pointer and the type `class`.</span></span>  
  
 <span data-ttu-id="68c9f-3330">Jedyne prawidłowe Operacja dozwolona po wpisane odwołania jest przekazywany do metody, która wymaga to dodania odwołania typizowane jako parametr.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3330">The only valid operation permitted upon a typed reference is to pass it to a method that requires a typed reference as a parameter.</span></span> <span data-ttu-id="68c9f-3331">Obiekt wywoływany może następnie użyć <xref:System.Reflection.Emit.OpCodes.Refanytype> i <xref:System.Reflection.Emit.OpCodes.Refanyval> instrukcjami, aby pobrać typ (klasa) oraz adres, odpowiednio.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3331">The callee can then use the <xref:System.Reflection.Emit.OpCodes.Refanytype> and <xref:System.Reflection.Emit.OpCodes.Refanyval> instructions to retrieve the type (class) and the address respectively.</span></span>  
  
 <xref:System.TypeLoadException> <span data-ttu-id="68c9f-3332">jest generowany, jeśli `class` nie można odnaleźć.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3332">is thrown if `class` cannot be found.</span></span> <span data-ttu-id="68c9f-3333">Jest to zazwyczaj wykrywany, po instrukcji Microsoft Intermediate Language (MSIL) są konwertowane do kodu natywnego, a nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3333">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="68c9f-3334">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `mkrefany` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3334">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mkrefany` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3335">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3335">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3336">Mnoży dwie wartości, a następnie wypycha wynik na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3336">Multiplies two values and pushes the result on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3337">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3337">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3338">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3338">Format</span></span>|<span data-ttu-id="68c9f-3339">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3339">Assembly Format</span></span>|<span data-ttu-id="68c9f-3340">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3340">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3341">5A</span><span class="sxs-lookup"><span data-stu-id="68c9f-3341">5A</span></span>|<span data-ttu-id="68c9f-3342">mul</span><span class="sxs-lookup"><span data-stu-id="68c9f-3342">mul</span></span>|<span data-ttu-id="68c9f-3343">Mnoży dwie wartości na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3343">Multiplies two values on the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-3344">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3344">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-3345">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3345">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-3346">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3346">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-3347">i `value1` są zdjęte ze stosu ze stosu; `value1` jest mnożony przez `value2`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3347">and `value1` are popped from the stack; `value1` is multiplied by `value2`.</span></span>  
  
4.  <span data-ttu-id="68c9f-3348">Wyniki są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3348">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3349">`mul` Mnoży instrukcji `value1` przez `value2` i umieszcza wynik na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3349">The `mul` instruction multiplies `value1` by `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="68c9f-3350">Operacje całkowitą obciąć dyskretnie górny usługi bits przy przepełnieniu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3350">Integer operations silently truncate the upper bits on overflow.</span></span>  
  
 <span data-ttu-id="68c9f-3351">Zobacz <xref:System.Reflection.Emit.OpCodes.Mul_Ovf> dla określonej liczby całkowitej, należy pomnożyć operację, podając obsługi przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3351">See <xref:System.Reflection.Emit.OpCodes.Mul_Ovf> for an integer-specific multiply operation with overflow handling.</span></span>  
  
 <span data-ttu-id="68c9f-3352">Dla typów zmiennopozycyjnych 0 \* nieskończoności = NaN.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3352">For floating-point types, 0 \* infinity = NaN.</span></span>  
  
 <span data-ttu-id="68c9f-3353">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `mul` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3353">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3354">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3354">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3355">Mnoży dwie liczby całkowite, przeprowadza sprawdzanie przepełnienia, a wynik na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3355">Multiplies two integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3356">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3356">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3357">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3357">Format</span></span>|<span data-ttu-id="68c9f-3358">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3358">Assembly Format</span></span>|<span data-ttu-id="68c9f-3359">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3359">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3360">D8</span><span class="sxs-lookup"><span data-stu-id="68c9f-3360">D8</span></span>|<span data-ttu-id="68c9f-3361">mul.ovf</span><span class="sxs-lookup"><span data-stu-id="68c9f-3361">mul.ovf</span></span>|<span data-ttu-id="68c9f-3362">Mnoży dwie wartości liczby całkowitej na stosie ze sprawdzeniem przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3362">Multiplies two integer values on the stack with an overflow check.</span></span>|  
  
 <span data-ttu-id="68c9f-3363">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3363">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-3364">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3364">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-3365">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3365">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-3366">i `value1` są zdjęte ze stosu ze stosu; `value1` jest mnożony przez `value2`, ze sprawdzeniem przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3366">and `value1` are popped from the stack; `value1` is multiplied by `value2`, with an overflow check.</span></span>  
  
4.  <span data-ttu-id="68c9f-3367">Wyniki są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3367">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3368">`mul.ovf` Instrukcji mnoży liczbę całkowitą `value1` przez liczbę całkowitą `value2` i umieszcza wynik na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3368">The `mul.ovf` instruction multiplies integer `value1` by integer `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="68c9f-3369">Wyjątek jest generowany, jeśli wynik nie zmieści się w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3369">An exception is thrown if the result will not fit in the result type.</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-3370">jest generowany, jeśli wynik nie może być reprezentowana w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3370">is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="68c9f-3371">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `mul.ovf` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3371">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3372">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3372">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3373">Mnoży dwie wartości liczb całkowitych bez znaku, przeprowadza sprawdzanie przepełnienia i umieszcza wynik na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3373">Multiplies two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3374">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3374">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3375">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3375">Format</span></span>|<span data-ttu-id="68c9f-3376">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3376">Assembly Format</span></span>|<span data-ttu-id="68c9f-3377">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3377">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3378">D9</span><span class="sxs-lookup"><span data-stu-id="68c9f-3378">D9</span></span>|<span data-ttu-id="68c9f-3379">mul.ovf.un</span><span class="sxs-lookup"><span data-stu-id="68c9f-3379">mul.ovf.un</span></span>|<span data-ttu-id="68c9f-3380">Mnoży dwie wartości nieoznaczone na stosie ze sprawdzeniem przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3380">Multiplies two unsigned values on the stack with an overflow check.</span></span>|  
  
 <span data-ttu-id="68c9f-3381">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3381">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-3382">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3382">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-3383">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3383">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-3384">i `value1` są zdjęte ze stosu ze stosu; `value1` jest mnożony przez `value2`, ze sprawdzeniem przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3384">and `value1` are popped from the stack; `value1` is multiplied by `value2`, with an overflow check.</span></span>  
  
4.  <span data-ttu-id="68c9f-3385">Wyniki są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3385">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3386">`mul.ovf.un` Instrukcji mnoży liczbę całkowitą bez znaku `value1` przez liczbę całkowitą bez znaku `value2` i umieszcza wynik na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3386">The `mul.ovf.un` instruction multiplies unsigned integer `value1` by unsigned integer `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="68c9f-3387">Wyjątek jest generowany, jeśli wynik nie zmieści się w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3387">An exception is thrown if the result will not fit in the result type.</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-3388">jest generowany, jeśli wynik nie może być reprezentowana w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3388">is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="68c9f-3389">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `mul.ovf.un` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3389">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3390">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3390">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Neg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Neg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Neg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Neg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Neg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Neg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Neg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Neg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3391">Neguje wartości, a następnie wypycha wynik na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3391">Negates a value and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3392">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3392">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3393">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3393">Format</span></span>|<span data-ttu-id="68c9f-3394">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3394">Assembly Format</span></span>|<span data-ttu-id="68c9f-3395">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3395">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3396">65</span><span class="sxs-lookup"><span data-stu-id="68c9f-3396">65</span></span>|<span data-ttu-id="68c9f-3397">neg</span><span class="sxs-lookup"><span data-stu-id="68c9f-3397">neg</span></span>|<span data-ttu-id="68c9f-3398">Zmienia znak wartości obecnie na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3398">Negates the value currently on top of the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-3399">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3399">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3400">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3400">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-3401">Wartość jest zdjęte ze stosu ze stosu i ujemna.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3401">A value is popped from the stack and negated.</span></span>  
  
3.  <span data-ttu-id="68c9f-3402">Wyniki są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3402">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3403">`neg` Instrukcji neguje wartość i umieszcza wynik na górze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3403">The `neg` instruction negates value and pushes the result on top of the stack.</span></span> <span data-ttu-id="68c9f-3404">Zwracany typ jest taki sam jak typ operandu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3404">The return type is the same as the operand type.</span></span>  
  
 <span data-ttu-id="68c9f-3405">Negacja wartości całkowitych jest standardowa dwójki uzupełniają negacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3405">Negation of integral values is standard two's complement negation.</span></span> <span data-ttu-id="68c9f-3406">W szczególności Negacja liczbę najbardziej ujemną, (która nie ma odpowiednika dodatni) daje najbardziej ujemną.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3406">In particular, negating the most negative number (which does not have a positive counterpart) yields the most negative number.</span></span> <span data-ttu-id="68c9f-3407">Wykrywa to użycie przepełnienie <xref:System.Reflection.Emit.OpCodes.Sub_Ovf> instrukcji zamiast (czyli odjęcia od 0).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3407">To detect this overflow use the <xref:System.Reflection.Emit.OpCodes.Sub_Ovf> instruction instead (that is, subtract from 0).</span></span>  
  
 <span data-ttu-id="68c9f-3408">Negacja liczba zmiennoprzecinkowa przepełnienie nie jest możliwe, a Negacja NaN zwraca NaN.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3408">Negating a floating-point number cannot overflow, and negating NaN returns NaN.</span></span>  
  
 <span data-ttu-id="68c9f-3409">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `neg` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3409">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `neg` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3410">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3410">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Newarr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Newarr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Newarr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Newarr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Newarr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Newarr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Newarr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Newarr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3411">Wypycha odwołanie do obiektu na nową tablicę indeksowaną od zera, jednowymiarową której elementy są określonego typu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3411">Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3412">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3412">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3413">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3413">Format</span></span>|<span data-ttu-id="68c9f-3414">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3414">Assembly Format</span></span>|<span data-ttu-id="68c9f-3415">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3415">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3416">8D < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-3416">8D < `T` ></span></span>|<span data-ttu-id="68c9f-3417">newarr</span><span class="sxs-lookup"><span data-stu-id="68c9f-3417">newarr</span></span> `etype`|<span data-ttu-id="68c9f-3418">Tworzy nową tablicę z elementami typu `etype`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3418">Creates a new array with elements of type `etype`.</span></span>|  
  
 <span data-ttu-id="68c9f-3419">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3419">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3420">Liczba elementów w tablicy są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3420">The number of elements in the array is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-3421">Liczba elementów, które zostanie zdjęte ze stosu i utworzeniu tablicy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3421">The number of elements is popped from the stack and the array is created.</span></span>  
  
3.  <span data-ttu-id="68c9f-3422">Odwołanie do obiektu do nowej tablicy są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3422">An object reference to the new array is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3423">`newarr` Instrukcji wypycha odwołanie do obiektu (typ `O`) do nowej tablicy liczony od zera, jednowymiarową której elementy są typu `etype` (opisujące typ tokenu metadanych).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3423">The `newarr` instruction pushes an object reference (type `O`) to a new zero-based, one-dimensional array whose elements are of type `etype` (a metadata token describing the type).</span></span> <span data-ttu-id="68c9f-3424">Liczba elementów w nowej tablicy, powinien być określony jako `native int`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3424">The number of elements in the new array should be specified as a `native int`.</span></span> <span data-ttu-id="68c9f-3425">Prawidłową tablicą zakres indeksy od zera do maksymalną liczbę elementów minus jeden.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3425">Valid array indexes range from zero to the maximum number of elements minus one.</span></span>  
  
 <span data-ttu-id="68c9f-3426">Elementy tablicy mogą być dowolnego typu, łącznie z typami wartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3426">The elements of an array can be any type, including value types.</span></span>  
  
 <span data-ttu-id="68c9f-3427">Liczony od zera, jednowymiarową. tablice liczb są tworzone za pomocą tokenu metadanych odwołuje się do typu odpowiednie wartości (<xref:System.Int32>i tak dalej).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3427">Zero-based, one-dimensional arrays of numbers are created using a metadata token referencing the appropriate value type (<xref:System.Int32>, and so on).</span></span> <span data-ttu-id="68c9f-3428">Elementy tablicy są inicjowane na wartość 0 odpowiedniego typu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3428">Elements of the array are initialized to 0 of the appropriate type.</span></span>  
  
 <span data-ttu-id="68c9f-3429">Tablice jednowymiarowe NonZero-zależności i tablice wielowymiarowe są tworzone przy użyciu <xref:System.Reflection.Emit.OpCodes.Newobj> zamiast `newarr`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3429">Nonzero-based one-dimensional arrays and multidimensional arrays are created using <xref:System.Reflection.Emit.OpCodes.Newobj> rather than `newarr`.</span></span> <span data-ttu-id="68c9f-3430">Więcej często są one tworzone, za pomocą metody <xref:System.Array> klasy w .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3430">More commonly, they are created using the methods of the <xref:System.Array> class in the .NET Framework.</span></span>  
  
 <xref:System.OutOfMemoryException> <span data-ttu-id="68c9f-3431">jest generowany, jeśli pamięć jest niewystarczająca do spełnienia żądania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3431">is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-3432">jest generowany, jeśli `numElems` jest mniejszy niż 0.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3432">is thrown if `numElems` is less than 0.</span></span>  
  
 <span data-ttu-id="68c9f-3433">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `newarr` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3433">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `newarr` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3434">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3434">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Newobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Newobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Newobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Newobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Newobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Newobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Newobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Newobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3435">Tworzy nowy obiekt lub nowe wystąpienie typu wartości wypychanie odwołanie do obiektu (typ <see langword="O" />) na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3435">Creates a new object or a new instance of a value type, pushing an object reference (type <see langword="O" />) onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3436">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3436">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3437">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3437">Format</span></span>|<span data-ttu-id="68c9f-3438">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3438">Assembly Format</span></span>|<span data-ttu-id="68c9f-3439">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3439">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3440">73 < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-3440">73 < `T` ></span></span>|<span data-ttu-id="68c9f-3441">NowyObiekt</span><span class="sxs-lookup"><span data-stu-id="68c9f-3441">newobj</span></span> `ctor`|<span data-ttu-id="68c9f-3442">Przydziela niezainicjowanego obiektu lub typu wartości i wywołuje metodę konstruktora `ctor`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3442">Allocates an uninitialized object or value type and calls the constructor method `ctor`.</span></span>|  
  
 <span data-ttu-id="68c9f-3443">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3443">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3444">Argumenty `arg1` za pośrednictwem `argn` są wypychane na stos w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3444">Arguments `arg1` through `argn` are pushed on the stack in sequence.</span></span>  
  
2.  <span data-ttu-id="68c9f-3445">Argumenty `argn` za pośrednictwem `arg1` zdjęte ze stosu ze stosu i przekazywane do `ctor` do tworzenia obiektów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3445">Arguments `argn` through `arg1` are popped from the stack and passed to `ctor` for object creation.</span></span>  
  
3.  <span data-ttu-id="68c9f-3446">Odwołanie do nowego obiektu są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3446">A reference to the new object is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3447">`newobj` Instrukcja tworzy nowy obiekt lub nowe wystąpienie typu wartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3447">The `newobj` instruction creates a new object or a new instance of a value type.</span></span> `Ctor` <span data-ttu-id="68c9f-3448">jest to token metadanych ( `methodref` lub `methoddef` muszą być oznaczone jako Konstruktor) oznacza to nazwa, klasa i sygnatury konstruktora do wywołania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3448">is a metadata token (a `methodref` or `methoddef` that must be marked as a constructor) that indicates the name, class and signature of the constructor to call.</span></span>  
  
 <span data-ttu-id="68c9f-3449">`newobj` Instrukcji przydziela nowe wystąpienie klasy skojarzonej z `ctor` i inicjalizuje wszystkie pola w nowym wystąpieniu na 0 (właściwego typu) lub odwołania o wartości null, zgodnie z potrzebami.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3449">The `newobj` instruction allocates a new instance of the class associated with `ctor` and initializes all the fields in the new instance to 0 (of the proper type) or null references as appropriate.</span></span> <span data-ttu-id="68c9f-3450">Następnie wywołuje on Konstruktor `ctor` danego argumentów wraz z nowo utworzone wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3450">It then calls the constructor `ctor` with the given arguments along with the newly created instance.</span></span> <span data-ttu-id="68c9f-3451">Po wywołaniu konstruktora teraz inicjowane odwołanie do obiektu (typ `O`) są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3451">After the constructor has been called, the now initialized object reference (type `O`) is pushed on the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3452">Z punktu widzenia Konstruktor niezainicjowanego obiektu jest argumentem 0, a inne argumenty przekazane do NowyObiekt wykonaj w kolejności.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3452">From the constructor's point of view, the uninitialized object is argument 0 and the other arguments passed to newobj follow in order.</span></span>  
  
 <span data-ttu-id="68c9f-3453">Wszystkie tablice liczony od zera, jednowymiarową są tworzone przy użyciu <xref:System.Reflection.Emit.OpCodes.Newarr>, a nie `newobj`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3453">All zero-based, one-dimensional arrays are created using <xref:System.Reflection.Emit.OpCodes.Newarr>, not `newobj`.</span></span> <span data-ttu-id="68c9f-3454">Z drugiej strony wszystkie tablice (więcej niż jednym wymiarze, lub w jednowymiarowa ale nie od zera) są tworzone przy użyciu `newobj`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3454">On the other hand, all other arrays (more than one dimension, or one-dimensional but not zero-based) are created using `newobj`.</span></span>  
  
 <span data-ttu-id="68c9f-3455">Typy wartości nie są zwykle tworzone przy użyciu `newobj`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3455">Value types are not usually created using `newobj`.</span></span> <span data-ttu-id="68c9f-3456">Zazwyczaj są przydzielane jako argumenty lub zmiennych lokalnych za pomocą `newarr` (dla tablic liczony od zera, jednowymiarową), lub jako pola obiektów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3456">They are usually allocated either as arguments or local variables, using `newarr` (for zero-based, one-dimensional arrays), or as fields of objects.</span></span> <span data-ttu-id="68c9f-3457">Po przydzieleniu, są inicjowanie przy użyciu <xref:System.Reflection.Emit.OpCodes.Initobj>.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3457">Once allocated, they are initialized using <xref:System.Reflection.Emit.OpCodes.Initobj>.</span></span> <span data-ttu-id="68c9f-3458">Jednak `newobj` instrukcji może służyć do tworzenia nowego wystąpienia typu wartości na stosie, który może być następnie przekazywany jako argument, przechowywane w lokalnej i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3458">However, the `newobj` instruction can be used to create a new instance of a value type on the stack, that can then be passed as an argument, stored in a local, and so on.</span></span>  
  
 <xref:System.OutOfMemoryException> <span data-ttu-id="68c9f-3459">jest generowany, jeśli pamięć jest niewystarczająca do spełnienia żądania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3459">is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <xref:System.MissingMethodException> <span data-ttu-id="68c9f-3460">jest generowany, jeśli metoda konstruktora `ctor` o nazwie wskazanej klasy i podpis nie został odnaleziony.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3460">is thrown if a constructor method `ctor` with the indicated name, class and signature could not be found.</span></span> <span data-ttu-id="68c9f-3461">Jest to zazwyczaj wykrywany, po instrukcji Microsoft Intermediate Language (MSIL) są konwertowane do kodu natywnego, a nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3461">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="68c9f-3462">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `newobj` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3462">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `newobj` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3463">ILGenerator.Emit(OpCode, ConstructorInfo)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3463">ILGenerator.Emit(OpCode, ConstructorInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Nop">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Nop;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Nop" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Nop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Nop As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Nop;" />
      <MemberSignature Language="F#" Value=" staticval mutable Nop : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Nop" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3464">Wypełnia miejsce, jeśli rozkazów są poprawek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3464">Fills space if opcodes are patched.</span></span> <span data-ttu-id="68c9f-3465">Nie znaczących operacja została wykonana, mimo że cyklu przetwarzania, które mogą być używane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3465">No meaningful operation is performed although a processing cycle can be consumed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3466">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3466">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3467">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3467">Format</span></span>|<span data-ttu-id="68c9f-3468">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3468">Assembly Format</span></span>|<span data-ttu-id="68c9f-3469">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3469">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3470">00</span><span class="sxs-lookup"><span data-stu-id="68c9f-3470">00</span></span>|<span data-ttu-id="68c9f-3471">NOP</span><span class="sxs-lookup"><span data-stu-id="68c9f-3471">nop</span></span>|<span data-ttu-id="68c9f-3472">Wykonuje operację bez zachowania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3472">Performs an operation without behavior.</span></span>|  
  
 <span data-ttu-id="68c9f-3473">Nie ma żadnych stosu przejściowe zachowanie zdefiniowane w tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3473">There is no stack transitional behavior defined for this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-3474">`nop` Operacji nic nie robi.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3474">The `nop` operation does nothing.</span></span> <span data-ttu-id="68c9f-3475">Jest on przeznaczony do Wypełnij miejsce, jeśli rozkazów są poprawek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3475">It is intended to fill in space if opcodes are patched.</span></span>  
  
 <span data-ttu-id="68c9f-3476">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `nop` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3476">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `nop` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3477">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3477">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Not;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Not" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Not" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Not As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Not;" />
      <MemberSignature Language="F#" Value=" staticval mutable Not : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Not" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3478">Oblicza bitowe uzupełnienie wartość całkowitą na szczycie stosu, a następnie wypycha wynik na stosie oceny tego samego typu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3478">Computes the bitwise complement of the integer value on top of the stack and pushes the result onto the evaluation stack as the same type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3479">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3479">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3480">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3480">Format</span></span>|<span data-ttu-id="68c9f-3481">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3481">Assembly Format</span></span>|<span data-ttu-id="68c9f-3482">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3482">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3483">66</span><span class="sxs-lookup"><span data-stu-id="68c9f-3483">66</span></span>|<span data-ttu-id="68c9f-3484">not</span><span class="sxs-lookup"><span data-stu-id="68c9f-3484">not</span></span>|<span data-ttu-id="68c9f-3485">Oblicza uzupełnienie bitowe wartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3485">Computes the bitwise complement of a value.</span></span>|  
  
 <span data-ttu-id="68c9f-3486">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3486">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value` <span data-ttu-id="68c9f-3487">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3487">is pushed onto the stack.</span></span>  
  
2.  `value` <span data-ttu-id="68c9f-3488">zostanie zdjęte ze stosu i jego bitowe uzupełnienie obliczane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3488">is popped from the stack and its bitwise complement computed.</span></span>  
  
3.  <span data-ttu-id="68c9f-3489">Wyniki są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3489">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3490">`not` Instrukcja oblicza bitowe uzupełnienie wartością całkowitą z zakresu i umieszcza wynik na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3490">The `not` instruction computes the bitwise complement of an integer value and pushes the result onto the stack.</span></span> <span data-ttu-id="68c9f-3491">Zwracany typ jest taki sam jak typ operandu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3491">The return type is the same as the operand type.</span></span>  
  
 <span data-ttu-id="68c9f-3492">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `not` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3492">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `not` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3493">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3493">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Or;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Or" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Or" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Or As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Or;" />
      <MemberSignature Language="F#" Value=" staticval mutable Or : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Or" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3494">Obliczenia bitowe uzupełnienie dwóch liczb całkowitych wartości na szczycie stosu i umieszcza wynik na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3494">Compute the bitwise complement of the two integer values on top of the stack and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3495">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3495">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3496">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3496">Format</span></span>|<span data-ttu-id="68c9f-3497">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3497">Assembly Format</span></span>|<span data-ttu-id="68c9f-3498">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3498">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3499">60</span><span class="sxs-lookup"><span data-stu-id="68c9f-3499">60</span></span>|<span data-ttu-id="68c9f-3500">lub</span><span class="sxs-lookup"><span data-stu-id="68c9f-3500">or</span></span>|<span data-ttu-id="68c9f-3501">Oblicza operatora testu koniunkcji lub z dwóch wartości całkowitych, zwraca liczbę całkowitą.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3501">Computes the bitwise OR of two integer values, returns an integer.</span></span>|  
  
 <span data-ttu-id="68c9f-3502">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3502">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-3503">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3503">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-3504">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3504">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-3505">i `value1` są zdjęte ze stosu ze stosu i ich bitowe OR obliczane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3505">and `value1` are popped from the stack and their bitwise OR computed.</span></span>  
  
4.  <span data-ttu-id="68c9f-3506">Wyniki są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3506">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3507">`or` Instrukcja oblicza logiczną lub dwie wartości na jego podstawie stosu, wypychanie wynik na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3507">The `or` instruction computes the bitwise OR of two values atop the stack, pushing the result onto the stack.</span></span>  
  
 `Or` <span data-ttu-id="68c9f-3508">jest operacją specyficzne dla liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3508">is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="68c9f-3509">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `or` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3509">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `or` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3510">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3510">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Pop;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Pop" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Pop As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Pop;" />
      <MemberSignature Language="F#" Value=" staticval mutable Pop : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Pop" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3511">Usuwa wartość obecnie na szczycie stosu oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3511">Removes the value currently on top of the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3512">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3512">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3513">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3513">Format</span></span>|<span data-ttu-id="68c9f-3514">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3514">Assembly Format</span></span>|<span data-ttu-id="68c9f-3515">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3515">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3516">26</span><span class="sxs-lookup"><span data-stu-id="68c9f-3516">26</span></span>|<span data-ttu-id="68c9f-3517">POP</span><span class="sxs-lookup"><span data-stu-id="68c9f-3517">pop</span></span>|<span data-ttu-id="68c9f-3518">Pobiera najwyższą wartość ze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3518">Pops the top value from the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-3519">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3519">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3520">Najwyższą wartość zostanie zdjęte ze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3520">The top value is popped from the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3521">`pop` Instrukcji usuwa górny element ze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3521">The `pop` instruction removes the top element from the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3522">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `pop` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3522">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `pop` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3523">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3523">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3524">Jest to zastrzeżony instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3524">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3525">Jest to zastrzeżony instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3525">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3526">Jest to zastrzeżony instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3526">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3527">Jest to zastrzeżony instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3527">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix5">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix5;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix5" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix5" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix5 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix5;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix5 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix5" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3528">Jest to zastrzeżony instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3528">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix6">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix6;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix6" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix6 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix6;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix6 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix6" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3529">Jest to zastrzeżony instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3529">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix7">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix7;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix7" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix7 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix7;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix7 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix7" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3530">Jest to zastrzeżony instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3530">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefixref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefixref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefixref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefixref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefixref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefixref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefixref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefixref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3531">Jest to zastrzeżony instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3531">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Readonly">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Readonly;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Readonly" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Readonly" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Readonly As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Readonly;" />
      <MemberSignature Language="F#" Value=" staticval mutable Readonly : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Readonly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3532">Określa, że kolejne tablicę adresów są wykonywane żadne sprawdzenie typu w czasie wykonywania i którego zmienność go zwraca wskaźnik zarządzanego jest ograniczona.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3532">Specifies that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer whose mutability is restricted.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3533">W poniższej tabeli wymieniono szesnastkowym i format programu Microsoft intermediate language (MSIL) zestawu, wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3533">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3534">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3534">Format</span></span>|<span data-ttu-id="68c9f-3535">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3535">Assembly Format</span></span>|<span data-ttu-id="68c9f-3536">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3536">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3537">FE 1E</span><span class="sxs-lookup"><span data-stu-id="68c9f-3537">FE 1E</span></span>|<span data-ttu-id="68c9f-3538">tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3538">readonly.</span></span>|<span data-ttu-id="68c9f-3539">Określ, czy kolejnych tablicy adresu są wykonywane żadne sprawdzenie typu w czasie wykonywania i zwraca wskaźnik zarządzanego, z ograniczeniami zmienność.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3539">Specify that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer with restricted mutability.</span></span>|  
  
 <span data-ttu-id="68c9f-3540">Ten prefiks może się pojawić tylko bezpośrednio poprzedzającego `ldelema` instrukcji i wywołania do specjalnej `Address` metody na tablicach.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3540">This prefix can only appear immediately preceding the `ldelema` instruction and calls to the special `Address` method on arrays.</span></span> <span data-ttu-id="68c9f-3541">Jego wpływ na kolejna operacja ma dwa cele:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3541">Its effect on the subsequent operation is twofold:</span></span>  
  
1.  <span data-ttu-id="68c9f-3542">W czasie wykonywania odbywa się żadna operacja sprawdzania typu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3542">At run time, no type check operation is performed.</span></span> <span data-ttu-id="68c9f-3543">Należy pamiętać, że zwykle niejawnego typu Wyszukaj `ldelema` i `stelem` instrukcje stosowania na odwołanie do typu tablic.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3543">Note that there is normally an implicit type check for the `ldelema` and `stelem` instructions when used on reference type arrays.</span></span> <span data-ttu-id="68c9f-3544">Nigdy nie jest typu run-time Wyszukaj klasy wartości, więc `readonly` w takiej sytuacji jest pusta.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3544">There is never a run-time type check for value classes, so `readonly` is a no-op in that case.</span></span>  
  
2.  <span data-ttu-id="68c9f-3545">Weryfikator wynik operacji adresu jest traktuje jako wskaźnika zarządzanych z ograniczeniami zmienność.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3545">The verifier treats the result of the address-of operation as a managed pointer with restricted mutability.</span></span>  
  
 <span data-ttu-id="68c9f-3546">Wskaźnik jest nazywany ograniczono zmienność, ponieważ typ definiujący kontroluje, czy można zmutować wartość.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3546">The pointer is said to have restricted mutability because the defining type controls whether the value can be mutated.</span></span> <span data-ttu-id="68c9f-3547">Dla klas wartości, które ujawniają nie pola publiczne lub metody, które zaktualizuj tę wartość w miejscu, wskaźnik jest tylko do odczytu (stąd nazwa prefiks).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3547">For value classes that expose no public fields or methods that update the value in place, the pointer is read-only (hence the name of the prefix).</span></span> <span data-ttu-id="68c9f-3548">W szczególności klas reprezentujących typy pierwotne (na przykład System.Int32) nie ujawniaj metody ustawiającej, a zatem będą tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3548">In particular, the classes representing primitive types (for example, System.Int32) do not expose mutators and thus are read-only.</span></span>  
  
 <span data-ttu-id="68c9f-3549">Wskaźnika zarządzanych z ograniczeniami w ten sposób może służyć tylko w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3549">A managed pointer restricted in this fashion can be used only in the following ways:</span></span>  
  
-   <span data-ttu-id="68c9f-3550">Jako `object` parametr `ldfld`, `ldflda`, `stfld`, `call`, lub`constrained callvirt` instrukcje.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3550">As the `object` parameter for the `ldfld`, `ldflda`, `stfld`, `call`, or`constrained callvirt` instructions.</span></span>  
  
-   <span data-ttu-id="68c9f-3551">Jako `pointer` parametr `ldobj` instrukcji lub do jednego z `ldind` instrukcje.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3551">As the `pointer` parameter to the `ldobj` instruction or to one of the `ldind` instructions.</span></span>  
  
-   <span data-ttu-id="68c9f-3552">Jako `source` parametr `cpobj` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3552">As the `source` parameter to the `cpobj` instruction.</span></span>  
  
 <span data-ttu-id="68c9f-3553">Wszystkie pozostałe operacje niedozwolone w tym `stobj`, `initobj`, lub `mkrefany` operacji lub dowolny z `stind` instrukcje.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3553">All other operations disallowed, including the `stobj`, `initobj`, or `mkrefany` operations, or any of the `stind` instructions.</span></span>  
  
 <span data-ttu-id="68c9f-3554">Celem `readonly` prefiks jest aby uniknąć sprawdzania typu podczas pobierania elementu z tablicy w kodzie rodzajowym.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3554">The purpose of the `readonly` prefix is to avoid a type check when fetching an element from an array in generic code.</span></span> <span data-ttu-id="68c9f-3555">Na przykład, wyrażenie `arr[i].m()`, w którym typ elementu tablicy `arr` jest typem ogólnym, która została ograniczona do interfejs za pomocą metody `m`, może być kompilowana do następujących MSIL.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3555">For example, the expression `arr[i].m()`, where the element type of the array `arr` is a generic type that has been constrained to have an interface with method `m`, might compile to the following MSIL.</span></span>  
  
```  
ldloc arr  
ldloc i  
readonly.  
ldelema !0    // Loads the pointer to the object.  
…             // Load the arguments to the call.  
constrained. !0  
callvirt m  
```  
  
 <span data-ttu-id="68c9f-3556">Bez `readonly` prefiksu, `ldelema` instrukcji wykona sprawdzenie typu w przypadku których! 0 był typem referencyjnym.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3556">Without the `readonly` prefix, the `ldelema` instruction would perform a type check in the case where !0 was a reference type.</span></span> <span data-ttu-id="68c9f-3557">Nie tylko jest to sprawdzenie typu nieefektywne, ale jest semantycznie nieprawidłowe.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3557">Not only is this type check inefficient, but it is semantically incorrect.</span></span> <span data-ttu-id="68c9f-3558">Sprawdzanie typu `ldelema` dokładne dopasowanie, który jest zbyt silne.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3558">The type check for `ldelema` is an exact match, which is too strong.</span></span> <span data-ttu-id="68c9f-3559">Jeżeli tablica podklasy typu! 0, powyższy kod może zakończyć się niepowodzeniem sprawdzanie typów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3559">If the array held subclasses of type !0, the code above would fail the type check.</span></span>  
  
 <span data-ttu-id="68c9f-3560">Adres elementu tablicy jest pobierana, zamiast elementu, aby uzyskać dojścia do `arr[i]` działa zarówno typy wartości i typy odwołań i dlatego może być przekazywany do `constrained callvirt` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3560">The address of the array element is fetched, instead of the element itself, in order to have a handle for `arr[i]` that works for both value types and reference types, and thus can be passed to the `constrained callvirt` instruction.</span></span>  
  
 <span data-ttu-id="68c9f-3561">Ogólnie rzecz biorąc byłoby niebezpieczne pominąć sprawdzanie w czasie wykonania, jeśli tablicy przechowywane elementy typu odwołania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3561">In general it would be unsafe to skip the run-time check if the array held elements of a reference type.</span></span> <span data-ttu-id="68c9f-3562">Jest to niezbędne do zapewnienia, że nie do tablicy modyfikacje za pomocą tego wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3562">To be safe, it is necessary to ensure that no modifications to the array are made through this pointer.</span></span> <span data-ttu-id="68c9f-3563">Reguły weryfikatora warunek ten był spełniony.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3563">The verifier rules ensure this.</span></span> <span data-ttu-id="68c9f-3564">Ograniczone wskaźnika zarządzanych mogą być przekazywane jako obiekt wywołaniach metod wystąpień, co nie jest ściśle rzecz ujmując tylko do odczytu dla typów wartości, ale nie problemu bezpieczeństwa typu dla typów wartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3564">The restricted managed pointer can be passed as the object of instance method calls, so it is not strictly speaking read-only for value types, but there is no type safety problem for value types.</span></span>  
  
 <span data-ttu-id="68c9f-3565">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `readonly` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3565">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `readonly` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3566">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3566">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refanytype">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Refanytype;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Refanytype" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Refanytype" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Refanytype As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Refanytype;" />
      <MemberSignature Language="F#" Value=" staticval mutable Refanytype : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Refanytype" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3567">Pobiera token typu osadzonego w wpisane odwołania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3567">Retrieves the type token embedded in a typed reference.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3568">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3568">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3569">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3569">Format</span></span>|<span data-ttu-id="68c9f-3570">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3570">Assembly Format</span></span>|<span data-ttu-id="68c9f-3571">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3571">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3572">FE 1D</span><span class="sxs-lookup"><span data-stu-id="68c9f-3572">FE 1D</span></span>|<span data-ttu-id="68c9f-3573">refanytype</span><span class="sxs-lookup"><span data-stu-id="68c9f-3573">refanytype</span></span>|<span data-ttu-id="68c9f-3574">Wypycha tokenu typu przechowywane w wpisane odwołania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3574">Pushes the type token stored in a typed reference.</span></span>|  
  
 <span data-ttu-id="68c9f-3575">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3575">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3576">Odwołanie do typu wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3576">A value type reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-3577">Wpisane odwołania zostanie zdjęte ze stosu i pobrać jego odpowiedniego tokenu typu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3577">The typed reference is popped from the stack and its corresponding type token retrieved.</span></span>  
  
3.  <span data-ttu-id="68c9f-3578">Token typu są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3578">The type token is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3579">Wpisane odwołania zawiera token typu i adres na wystąpienie obiektu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3579">A typed reference contains a type token and an address to an object instance.</span></span>  
  
 <span data-ttu-id="68c9f-3580">`refanytype` Instrukcji pobiera tokenu typu osadzonego w wpisane odwołania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3580">The `refanytype` instruction retrieves the type token embedded in the typed reference.</span></span> <span data-ttu-id="68c9f-3581">Zobacz <xref:System.Reflection.Emit.OpCodes.Mkrefany> instrukcji, aby uzyskać informacje na temat tworzenia wpisane odwołania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3581">See the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction for information on creating typed references.</span></span>  
  
 <span data-ttu-id="68c9f-3582">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `refanytype` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3582">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `refanytype` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3583">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3583">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refanyval">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Refanyval;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Refanyval" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Refanyval" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Refanyval As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Refanyval;" />
      <MemberSignature Language="F#" Value=" staticval mutable Refanyval : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Refanyval" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3584">Pobiera adres (typ <see langword="&amp;" />) osadzonego w wpisane odwołania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3584">Retrieves the address (type <see langword="&amp;" />) embedded in a typed reference.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3585">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3585">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3586">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3586">Format</span></span>|<span data-ttu-id="68c9f-3587">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3587">Assembly Format</span></span>|<span data-ttu-id="68c9f-3588">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3588">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3589">C2 < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-3589">C2 < `T` ></span></span>|<span data-ttu-id="68c9f-3590">refanyval</span><span class="sxs-lookup"><span data-stu-id="68c9f-3590">refanyval</span></span> `type`|<span data-ttu-id="68c9f-3591">Wypycha adresem przechowywanym w odwołania typizowane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3591">Pushes the address stored in a typed reference.</span></span>|  
  
 <span data-ttu-id="68c9f-3592">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3592">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3593">Odwołanie do typu wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3593">A value type reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-3594">Wpisane odwołania zostanie zdjęte ze stosu i pobrać odpowiedni adres.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3594">The typed reference is popped from the stack and the corresponding address retrieved.</span></span>  
  
3.  <span data-ttu-id="68c9f-3595">Adres są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3595">The address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3596">Wpisane odwołania zawiera token typu i adres na wystąpienie obiektu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3596">A typed reference contains a type token and an address to an object instance.</span></span>  
  
 <span data-ttu-id="68c9f-3597">`refanyval` Instrukcji pobiera adres osadzone w wpisane odwołania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3597">The `refanyval` instruction retrieves the address embedded in the a typed reference.</span></span> <span data-ttu-id="68c9f-3598">Typ osadzone w wpisane odwołania podane na stosie musi być zgodna z typem określonym przez `type` (metadane token albo `typedef` lub `typeref`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3598">The type embedded in the typed reference supplied on the stack must match the type specified by `type` (a metadata token, either a `typedef` or a `typeref`).</span></span> <span data-ttu-id="68c9f-3599">Zobacz <xref:System.Reflection.Emit.OpCodes.Mkrefany> instrukcję powiązanej zawartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3599">See the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction for related content.</span></span>  
  
 <xref:System.InvalidCastException> <span data-ttu-id="68c9f-3600">jest generowany, jeśli `type` nie jest identyczny z ich typem w odwołaniu do typu (w tym przypadku `type` jest klasa dostarczony do <xref:System.Reflection.Emit.OpCodes.Mkrefany> instrukcji, która skonstruowany powiedział wpisane odwołania).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3600">is thrown if `type` is not identical to the type stored in the type reference (in this case, `type` is the class supplied to the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction that constructed said typed reference).</span></span>  
  
 <xref:System.TypeLoadException> <span data-ttu-id="68c9f-3601">jest generowany, jeśli `type` nie można odnaleźć.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3601">is thrown if `type` cannot be found.</span></span>  
  
 <span data-ttu-id="68c9f-3602">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `refanyval` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3602">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `refanyval` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3603">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3603">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3604">Dzieli dwie wartości, a następnie wypycha resztę na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3604">Divides two values and pushes the remainder onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3605">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3605">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3606">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3606">Format</span></span>|<span data-ttu-id="68c9f-3607">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3607">Assembly Format</span></span>|<span data-ttu-id="68c9f-3608">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3608">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3609">5D</span><span class="sxs-lookup"><span data-stu-id="68c9f-3609">5D</span></span>|<span data-ttu-id="68c9f-3610">rem</span><span class="sxs-lookup"><span data-stu-id="68c9f-3610">rem</span></span>|<span data-ttu-id="68c9f-3611">Wypycha resztę z dzielenia `value1` przez `value2` na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3611">Pushes the remainder of dividing `value1` by `value2` onto the stack.</span></span>|  
  
  
 <span data-ttu-id="68c9f-3612">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3612">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3613">A `value1` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3613">A `value1` is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-3614">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3614">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-3615">i `value1` są zdjęte ze stosu ze stosu i pozostałą część `value1` `div` `value2` obliczane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3615">and `value1` are popped from the stack and the remainder of `value1` `div` `value2` computed.</span></span>  
  
4.  <span data-ttu-id="68c9f-3616">Wyniki są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3616">The result is pushed onto the stack.</span></span>  
  
 `result`<span data-ttu-id="68c9f-3617"> = `value1` `rem` `value2` spełnia następujące warunki:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3617"> = `value1` `rem` `value2` satisfies the following conditions:</span></span>  
  
 `result`<span data-ttu-id="68c9f-3618"> = `value1` - `value2` `×` (`value1` `div` `value2\`), oraz:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3618"> = `value1` - `value2` `×` (`value1` `div` `value2\`), and:</span></span>  
  
 <span data-ttu-id="68c9f-3619">0 = &#124; `result` &#124; < &#124; `value2` &#124;, logowania (`result`) = logowanie (`value1`), gdzie `div` jest instrukcji podziału, która obcina w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3619">0 = &#124; `result` &#124; < &#124; `value2` &#124;, sign(`result`) = sign(`value1`), where `div` is the division instruction that truncates towards zero.</span></span>  
  
 <span data-ttu-id="68c9f-3620">Jeśli `value2` ma wartość zero lub `value1` jest nieskończoność, wynik jest wartością typu NaN.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3620">If `value2` is zero or `value1` is infinity the result is NaN.</span></span> <span data-ttu-id="68c9f-3621">Jeśli `value2` jest nieskończoność, wynik jest `value1` (ujemna dla `-infinity`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3621">If `value2` is infinity, the result is `value1` (negated for `-infinity`).</span></span>  
  
 <span data-ttu-id="68c9f-3622">Operacje typu całkowitego throw <xref:System.DivideByZeroException> Jeśli `value2` wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3622">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="68c9f-3623">Należy pamiętać, że na platformach opartych na architekturze Intel <xref:System.OverflowException> jest zgłaszany, gdy obliczeń (minint `rem` -1).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3623">Note that on the Intel-based platforms an <xref:System.OverflowException> is thrown when computing (minint `rem` -1).</span></span>  
  
 <span data-ttu-id="68c9f-3624">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `rem` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3624">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rem` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3625">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3625">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rem_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rem_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rem_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rem_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rem_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rem_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rem_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rem_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3626">Dzieli dwie wartości nieoznaczone, a następnie wypycha resztę na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3626">Divides two unsigned values and pushes the remainder onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3627">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3627">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3628">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3628">Format</span></span>|<span data-ttu-id="68c9f-3629">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3629">Assembly Format</span></span>|<span data-ttu-id="68c9f-3630">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3630">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3631">5E</span><span class="sxs-lookup"><span data-stu-id="68c9f-3631">5E</span></span>|<span data-ttu-id="68c9f-3632">rem.un</span><span class="sxs-lookup"><span data-stu-id="68c9f-3632">rem.un</span></span>|<span data-ttu-id="68c9f-3633">Wypycha resztę z dzielenia bez znaku `value1` przez niepodpisane `value2` na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3633">Pushes the remainder of dividing unsigned `value1` by unsigned `value2` onto the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-3634">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3634">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-3635">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3635">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-3636">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3636">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-3637">i `value1` są zdjęte ze stosu ze stosu i pozostałą część `value1` `div` `value2` obliczane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3637">and `value1` are popped from the stack and the remainder of `value1` `div` `value2` computed.</span></span>  
  
4.  <span data-ttu-id="68c9f-3638">Wyniki są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3638">The result is pushed onto the stack.</span></span>  
  
 `result`<span data-ttu-id="68c9f-3639"> = `value1` `rem.un` `value2` spełnia następujące warunki:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3639"> = `value1` `rem.un` `value2` satisfies the following conditions:</span></span>  
  
 `result`<span data-ttu-id="68c9f-3640"> = `value1` - `value2` x (`value1` `div.un` `value2\`), oraz:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3640"> = `value1` - `value2` x(`value1` `div.un` `value2\`), and:</span></span>  
  
 <span data-ttu-id="68c9f-3641">0 = `result`  <  `value2`, gdzie `div.un` jest instrukcją dzielenia bez znaku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3641">0 = `result` < `value2`, where `div.un` is the unsigned division instruction.</span></span>  
  
 <span data-ttu-id="68c9f-3642">`rem.un` Oblicza instrukcji `result` a następnie wypycha go na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3642">The `rem.un` instruction computes `result` and pushes it on the stack.</span></span> `Rem.un` <span data-ttu-id="68c9f-3643">traktuje jego argumenty jako liczb całkowitych bez znaku, podczas gdy <xref:System.Reflection.Emit.OpCodes.Rem> traktować je jak oznaczone liczby całkowite.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3643">treats its arguments as unsigned integers, while <xref:System.Reflection.Emit.OpCodes.Rem> treats them as signed integers.</span></span>  
  
 `Rem.un` <span data-ttu-id="68c9f-3644">jest podana w przypadku liczb zmiennoprzecinkowych.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3644">is unspecified for floating-point numbers.</span></span>  
  
 <span data-ttu-id="68c9f-3645">Operacje typu całkowitego throw <xref:System.DivideByZeroException> Jeśli `value2` wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3645">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="68c9f-3646">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `rem.un` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3646">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rem.un` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3647">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3647">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ret">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ret;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ret" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ret" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ret As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ret;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ret : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ret" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3648">Zwraca ciąg z bieżącej metody (jeśli istnieje) wypychanie zwracana wartość ze stosu oceny funkcji na stosie oceny obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3648">Returns from the current method, pushing a return value (if present) from the callee's evaluation stack onto the caller's evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3649">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3649">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3650">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3650">Format</span></span>|<span data-ttu-id="68c9f-3651">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3651">Assembly Format</span></span>|<span data-ttu-id="68c9f-3652">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3652">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3653">2A</span><span class="sxs-lookup"><span data-stu-id="68c9f-3653">2A</span></span>|<span data-ttu-id="68c9f-3654">instrukcji</span><span class="sxs-lookup"><span data-stu-id="68c9f-3654">ret</span></span>|<span data-ttu-id="68c9f-3655">Zwraca metodę, być może zwracać wartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3655">Returns from method, possibly returning a value.</span></span>|  
  
 <span data-ttu-id="68c9f-3656">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3656">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3657">Wartość zwracana zostanie zdjęte ze stosu oceny / / wywoływany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3657">The return value is popped from the callee evaluation stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-3658">Zwracana wartość uzyskaną w kroku 1 są wypychane na stosie oceny obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3658">The return value obtained in step 1 is pushed onto the caller evaluation stack.</span></span>  
  
 <span data-ttu-id="68c9f-3659">Jeśli wartość zwracana nie jest obecny na stosie oceny / / wywoływany, jest zwracana żadna wartość (nie stosu zachowania dla / / wywoływany lub obiekt wywołujący metody).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3659">If the return value is not present on the callee evaluation stack, no value is returned (no stack transition behaviors for either the callee or caller method).</span></span>  
  
 <span data-ttu-id="68c9f-3660">Typ wartości zwracanej, bieżącej metody Określa typ wartości do pobrania z góry stosu i skopiowany na stosie metody, która wywołała bieżącą metodę.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3660">The type of the return value, if any, of the current method determines the type of value to be fetched from the top of the stack and copied onto the stack of the method that called the current method.</span></span> <span data-ttu-id="68c9f-3661">Stos oceny dla bieżącej metody musi być pusta, z wyjątkiem wartość zwracaną.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3661">The evaluation stack for the current method must be empty except for the value to be returned.</span></span>  
  
 <span data-ttu-id="68c9f-3662">`ret` Nie może być używana do przekazywania kontroli poza`try`, `filter`, `catch`, lub `finally` bloku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3662">The `ret` instruction cannot be used to transfer control out of a`try`, `filter`, `catch`, or `finally` block.</span></span> <span data-ttu-id="68c9f-3663">Z poziomu `try` lub `catch`, użyj <xref:System.Reflection.Emit.OpCodes.Leave> instrukcji z miejsca docelowego `ret` instrukcji, która znajduje się poza wszystkich otaczających bloków wyjątków.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3663">From within a `try` or `catch`, use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction with a destination of a `ret` instruction that is outside all enclosing exception blocks.</span></span> <span data-ttu-id="68c9f-3664">Ponieważ `filter` i `finally` bloki logicznie to część obsługi wyjątków i nie metody, w której ich kod jest osadzony, poprawnie wygenerowanymi instrukcjami Microsoft Intermediate Language (MSIL), nie należy wykonywać zwrócone z w obrębie metody `filter` lub `finally`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3664">Because the `filter` and `finally` blocks are logically part of exception handling and not the method in which their code is embedded, correctly generated Microsoft Intermediate Language (MSIL) instructions do not perform a method return from within a `filter` or `finally`.</span></span>  
  
 <span data-ttu-id="68c9f-3665">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `ret` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3665">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ret` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3666">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3666">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rethrow;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rethrow" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rethrow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rethrow As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rethrow;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rethrow : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rethrow" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3667">Ponownie zgłasza wyjątek bieżący.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3667">Rethrows the current exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3668">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3668">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3669">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3669">Format</span></span>|<span data-ttu-id="68c9f-3670">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3670">Assembly Format</span></span>|<span data-ttu-id="68c9f-3671">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3671">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3672">FE 1A</span><span class="sxs-lookup"><span data-stu-id="68c9f-3672">FE 1A</span></span>|<span data-ttu-id="68c9f-3673">Zgłoś ponownie</span><span class="sxs-lookup"><span data-stu-id="68c9f-3673">rethrow</span></span>|<span data-ttu-id="68c9f-3674">Ponownie zgłasza wyjątek bieżący</span><span class="sxs-lookup"><span data-stu-id="68c9f-3674">Rethrows the current exception</span></span>|  
  
 <span data-ttu-id="68c9f-3675">Nie zachowania przejścia stosu jest zdefiniowany dla tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3675">No stack transition behavior is defined for this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-3676">`rethrow` Instrukcji jest dozwolona tylko w treści `catch` programu obsługi.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3676">The `rethrow` instruction is only permitted within the body of a `catch` handler.</span></span> <span data-ttu-id="68c9f-3677">Wyniku weryfikacji zgłasza wyjątek ten sam wyjątek, który został zgłoszony przez ten program obsługi.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3677">It throws the same exception that was caught by this handler.</span></span>  
  
 <span data-ttu-id="68c9f-3678">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `rethrow` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3678">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rethrow` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3679">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3679">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shl">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shl;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shl" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shl As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shl;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shl : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3680">Przenosi wartość całkowitą z lewej strony (w wartości zerowe) przez określoną liczbę bitów, wypychanie wynik na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3680">Shifts an integer value to the left (in zeroes) by a specified number of bits, pushing the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3681">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3681">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3682">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3682">Format</span></span>|<span data-ttu-id="68c9f-3683">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3683">Assembly Format</span></span>|<span data-ttu-id="68c9f-3684">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3684">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3685">62</span><span class="sxs-lookup"><span data-stu-id="68c9f-3685">62</span></span>|<span data-ttu-id="68c9f-3686">shl —</span><span class="sxs-lookup"><span data-stu-id="68c9f-3686">shl</span></span>|<span data-ttu-id="68c9f-3687">Przenosi całkowitą po lewej stronie (przesunięcie w zera).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3687">Shifts an integer to the left (shifting in zeros).</span></span>|  
  
 <span data-ttu-id="68c9f-3688">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3688">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3689">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3689">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-3690">Liczba bitów, które mają zostać przesunięte są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3690">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-3691">Liczba bitów jest przesuwany i wartość ze stosu; zdjęte ze stosu są wartość zostanie przesunięty w lewo o określoną liczbę bitów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3691">The number of bits to be shifted and the value are popped from the stack; the value is shifted left by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="68c9f-3692">Wyniki są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3692">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3693">`shl` Instrukcji przenosi wartości (typu `int32`, `int64` lub `native int`) przez określoną liczbę bitów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3693">The `shl` instruction shifts the value (type `int32`, `int64` or `native int`) left by the specified number of bits.</span></span> <span data-ttu-id="68c9f-3694">Liczba bitów jest wartość typu `int32` lub `native int`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3694">The number of bits is a value of type `int32` or `native int`.</span></span> <span data-ttu-id="68c9f-3695">Wartość zwracana jest nieokreślony, jeśli liczba bitów jest przesuwany jest większa lub równa szerokości (w bitach) podanej wartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3695">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 `Shl` <span data-ttu-id="68c9f-3696">Wstawia zero nieco najniżej na każdej zmianie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3696">inserts a zero bit in the lowest position on each shift.</span></span>  
  
 <span data-ttu-id="68c9f-3697">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `shl` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3697">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shl` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3698">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3698">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3699">Przenosi wartość całkowitą (w znak) po prawej stronie przez określoną liczbę bitów, wypychanie wynik na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3699">Shifts an integer value (in sign) to the right by a specified number of bits, pushing the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3700">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3700">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3701">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3701">Format</span></span>|<span data-ttu-id="68c9f-3702">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3702">Assembly Format</span></span>|<span data-ttu-id="68c9f-3703">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3703">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3704">63</span><span class="sxs-lookup"><span data-stu-id="68c9f-3704">63</span></span>|<span data-ttu-id="68c9f-3705">shr</span><span class="sxs-lookup"><span data-stu-id="68c9f-3705">shr</span></span>|<span data-ttu-id="68c9f-3706">Przenosi całkowitą w prawo (przesunięcie w logowania).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3706">Shifts an integer to the right (shifting in sign).</span></span>|  
  
 <span data-ttu-id="68c9f-3707">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3707">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3708">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3708">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-3709">Liczba bitów, które mają zostać przesunięte są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3709">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-3710">Liczba bitów jest przesuwany i wartość ze stosu; zdjęte ze stosu są wartość zostanie przesunięty w prawo o określoną liczbę bitów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3710">The number of bits to be shifted and the value are popped from the stack; the value is shifted right by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="68c9f-3711">Wyniki są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3711">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3712">`shr.un` Instrukcji przenosi wartości (typu `int32`, `int64` lub `native int`) bezpośrednio przez określoną liczbę bitów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3712">The `shr.un` instruction shifts the value (type `int32`, `int64` or `native int`) right by the specified number of bits.</span></span> <span data-ttu-id="68c9f-3713">Liczba bitów jest wartość typu `int32` lub `native int`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3713">The number of bits is a value of type `int32` or `native int`.</span></span> <span data-ttu-id="68c9f-3714">Wartość zwracana jest nieokreślony, jeśli liczba bitów jest przesuwany jest większa lub równa szerokości (w bitach) podanej wartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3714">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 `Shr` <span data-ttu-id="68c9f-3715">replikowane najbardziej znaczących bitów na każdej zmiany zachowania logowania oryginalnej wartości `result`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3715">replicates the high order bit on each shift, preserving the sign of the original value in the `result`.</span></span>  
  
 <span data-ttu-id="68c9f-3716">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `shr` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3716">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shr` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3717">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3717">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shr_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shr_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shr_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shr_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shr_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shr_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shr_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shr_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3718">Przenosi nieoznaczoną wartość całkowitą (w wartości zerowe) po prawej stronie przez określoną liczbę bitów, wypychanie wynik na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3718">Shifts an unsigned integer value (in zeroes) to the right by a specified number of bits, pushing the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3719">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3719">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3720">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3720">Format</span></span>|<span data-ttu-id="68c9f-3721">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3721">Assembly Format</span></span>|<span data-ttu-id="68c9f-3722">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3722">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3723">64</span><span class="sxs-lookup"><span data-stu-id="68c9f-3723">64</span></span>|<span data-ttu-id="68c9f-3724">shr.UN</span><span class="sxs-lookup"><span data-stu-id="68c9f-3724">shr.un</span></span>|<span data-ttu-id="68c9f-3725">Przenosi całkowitą w prawo (przesunięcie w zera).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3725">Shifts an integer to the right (shifting in zeroes).</span></span>|  
  
 <span data-ttu-id="68c9f-3726">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3726">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3727">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3727">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-3728">Liczba bitów, które mają zostać przesunięte są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3728">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-3729">Liczba bitów jest przesuwany i wartość ze stosu; zdjęte ze stosu są wartość zostanie przesunięty w prawo o określoną liczbę bitów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3729">The number of bits to be shifted and the value are popped from the stack; the value is shifted right by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="68c9f-3730">Wyniki są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3730">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3731">`shr.un` Instrukcji przenosi wartości (typu `int32`, `int64` lub `native int`) bezpośrednio przez określoną liczbę bitów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3731">The `shr.un` instruction shifts the value (type `int32`, `int64` or `native int`) right by the specified number of bits.</span></span> <span data-ttu-id="68c9f-3732">Liczba bitów jest wartość typu `int32`, `int64` lub `native int`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3732">The number of bits is a value of type `int32`, `int64` or `native int`.</span></span> <span data-ttu-id="68c9f-3733">Wartość zwracana jest nieokreślony, jeśli liczba bitów jest przesuwany jest większa lub równa szerokości (w bitach) podanej wartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3733">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 `Shr.un` <span data-ttu-id="68c9f-3734">Wstawia zero bitu na najwyższej pozycji na każdej zmianie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3734">inserts a zero bit in the highest position on each shift.</span></span>  
  
 <span data-ttu-id="68c9f-3735">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `shr.un` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3735">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shr.un` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3736">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3736">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sizeof">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sizeof;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sizeof" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sizeof" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sizeof As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sizeof;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sizeof : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sizeof" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3737">Wypycha rozmiar w bajtach, typ podanej wartości na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3737">Pushes the size, in bytes, of a supplied value type onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3738">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3738">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3739">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3739">Format</span></span>|<span data-ttu-id="68c9f-3740">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3740">Assembly Format</span></span>|<span data-ttu-id="68c9f-3741">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3741">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3742">FE 1C < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-3742">FE 1C < `T` ></span></span>|<span data-ttu-id="68c9f-3743">sizeof</span><span class="sxs-lookup"><span data-stu-id="68c9f-3743">sizeof</span></span> `valType`|<span data-ttu-id="68c9f-3744">Wypychanie rozmiar w bajtach, typ wartości jako `unsigned int32`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3744">Push the size, in bytes, of a value type as an `unsigned int32`.</span></span>|  
  
 <span data-ttu-id="68c9f-3745">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3745">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3746">Rozmiar (w bajtach) typu podana wartość (`valType`) są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3746">The size (in bytes) of the supplied value type (`valType`) is pushed onto the stack.</span></span>  
  
 `valType` <span data-ttu-id="68c9f-3747">musi być token metadanych ( `typeref` lub `typedef`), który określa typ wartości, typem referencyjnym lub parametr typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3747">must be a metadata token (a `typeref` or `typedef`) that specifies a value type, reference type, or generic type parameter.</span></span>  
  
 <span data-ttu-id="68c9f-3748">Dla typu odwołania rozmiar zwrócony jest rozmiar wartości odniesienia odpowiadającego typu (4 bajty w systemach 32-bitowy), nie rozmiar danych przechowywanych w obiektach określone przez wartość odniesienia.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3748">For a reference type, the size returned is the size of a reference value of the corresponding type (4 bytes on 32-bit systems), not the size of the data stored in objects referred to by the reference value.</span></span> <span data-ttu-id="68c9f-3749">Parametr typu ogólnego może służyć tylko w treści typu lub metody, który go definiuje.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3749">A generic type parameter can be used only in the body of the type or method that defines it.</span></span> <span data-ttu-id="68c9f-3750">Podczas tworzenia wystąpienia tego typu lub metody, parametr typu ogólnego jest zastępowany przez typ wartości lub typem referencyjnym.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3750">When that type or method is instantiated, the generic type parameter is replaced by a value type or reference type.</span></span>  
  
 <span data-ttu-id="68c9f-3751">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `sizeof` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3751">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sizeof` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3752">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3752">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Starg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Starg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Starg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Starg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Starg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Starg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Starg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Starg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3753">Przechowuje wartość na szczycie stosu oceny w gnieździe argumentu z określonym indeksem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3753">Stores the value on top of the evaluation stack in the argument slot at a specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3754">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3754">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3755">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3755">Format</span></span>|<span data-ttu-id="68c9f-3756">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3756">Assembly Format</span></span>|<span data-ttu-id="68c9f-3757">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3757">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3758">FE 0B < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-3758">FE 0B < `unsigned int16` ></span></span>|<span data-ttu-id="68c9f-3759">starg</span><span class="sxs-lookup"><span data-stu-id="68c9f-3759">starg</span></span> `num`|<span data-ttu-id="68c9f-3760">POP najwyższą wartość ze stosu i zapisuje go w miejsce argumentu `num`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3760">Pops the top value from the stack and stores it in argument slot `num`.</span></span>|  
  
 <span data-ttu-id="68c9f-3761">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3761">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3762">Wartość obecnie na górze stosu jest zdjęte ze stosu i umieścić w gnieździe argument `num`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3762">The value currently on top of the stack is popped and placed in argument slot `num`.</span></span>  
  
 <span data-ttu-id="68c9f-3763">`starg` Instrukcji pobiera wartość ze stosu i umieszcza je w gnieździe argument `num`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3763">The `starg` instruction pops a value from the stack and places it in argument slot `num`.</span></span> <span data-ttu-id="68c9f-3764">Typ wartości musi odpowiadać typowi argumentu, jak określono w podpisie metody bieżącej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3764">The type of the value must match the type of the argument, as specified in the current method's signature.</span></span>  
  
 <span data-ttu-id="68c9f-3765">Procedury, które przyjmują o zmiennej liczbie argumentów `starg` instrukcji może służyć tylko w przypadku wstępnego stałej argumentów, wyklucza te w zmiennej część podpisu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3765">For procedures that take a variable argument list, the `starg` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="68c9f-3766">Wykonywanie w magazynie do argumentów, w których wartość całkowitą mniejszą niż 4 bajty obcina wartość, kiedy przesuwa się on ze stosu do argumentu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3766">Performing a store into arguments that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the argument.</span></span> <span data-ttu-id="68c9f-3767">Wartości zmiennoprzecinkowe są zaokrąglane z ich rozmiar natywnego (typ `F`) do rozmiaru skojarzonych z argumentem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3767">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="68c9f-3768">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `starg` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3768">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `starg` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3769">ILGenerator.Emit (OpCode, krótki)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3769">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Starg_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Starg_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Starg_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Starg_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Starg_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Starg_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Starg_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Starg_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3770">Przechowuje wartość na szczycie stosu oceny w gnieździe argumentu z określonym indeksem, krótka.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3770">Stores the value on top of the evaluation stack in the argument slot at a specified index, short form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3771">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3771">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3772">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3772">Format</span></span>|<span data-ttu-id="68c9f-3773">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3773">Assembly Format</span></span>|<span data-ttu-id="68c9f-3774">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3774">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3775">10 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-3775">10 < `unsigned int8` ></span></span>|<span data-ttu-id="68c9f-3776">starg.s</span><span class="sxs-lookup"><span data-stu-id="68c9f-3776">starg.s</span></span> `num`|<span data-ttu-id="68c9f-3777">POP najwyższą wartość ze stosu i zapisuje go w miejsce argument `num`, krótka.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3777">Pops the top value from the stack and stores it in argument slot `num`, short form.</span></span>|  
  
 <span data-ttu-id="68c9f-3778">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3778">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3779">Wartość obecnie na górze stosu jest zdjęte ze stosu i umieścić w gnieździe argument `num`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3779">The value currently on top of the stack is popped and placed in argument slot `num`.</span></span>  
  
 <span data-ttu-id="68c9f-3780">`starg.s` Instrukcji pobiera wartość ze stosu i umieszcza je w gnieździe argument `num`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3780">The `starg.s` instruction pops a value from the stack and places it in argument slot `num`.</span></span> <span data-ttu-id="68c9f-3781">Typ wartości musi odpowiadać typowi argumentu, jak określono w podpisie metody bieżącej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3781">The type of the value must match the type of the argument, as specified in the current method's signature.</span></span>  
  
 <span data-ttu-id="68c9f-3782">`starg.s` Instrukcji zapewnia efektywne kodowanie do użycia z argumentami pierwszych 256.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3782">The `starg.s` instruction provides an efficient encoding for use with the first 256 arguments.</span></span>  
  
 <span data-ttu-id="68c9f-3783">Procedury, które przyjmują o zmiennej liczbie argumentów `starg.s` instrukcji może służyć tylko w przypadku wstępnego stałej argumentów, wyklucza te w zmiennej część podpisu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3783">For procedures that take a variable argument list, the `starg.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="68c9f-3784">Wykonywanie w magazynie do argumentów, w których wartość całkowitą mniejszą niż 4 bajty obcina wartość, kiedy przesuwa się on ze stosu do argumentu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3784">Performing a store into arguments that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the argument.</span></span> <span data-ttu-id="68c9f-3785">Wartości zmiennoprzecinkowe są zaokrąglane z ich rozmiar natywnego (typ `F`) do rozmiaru skojarzonych z argumentem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3785">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="68c9f-3786">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `starg.s` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3786">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `starg.s` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3787">ILGenerator.Emit (OpCode, bajtów)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3787">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3788">Zamienia element tablicy pod danym indeksem wartość na stosie oceny, którego typ jest określony w instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3788">Replaces the array element at a given index with the value on the evaluation stack, whose type is specified in the instruction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3789">W poniższej tabeli wymieniono szesnastkowym i format programu Microsoft intermediate language (MSIL) zestawu, wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3789">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3790">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3790">Format</span></span>|<span data-ttu-id="68c9f-3791">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3791">Assembly Format</span></span>|<span data-ttu-id="68c9f-3792">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3792">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3793">A4 &LT; `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-3793">A4 < `T` ></span></span>|<span data-ttu-id="68c9f-3794">stelem</span><span class="sxs-lookup"><span data-stu-id="68c9f-3794">stelem</span></span> `typeTok`|<span data-ttu-id="68c9f-3795">Zamienia element tablicy o indeksie podane wartości typu `typeTok` na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3795">Replaces the array element at the supplied index with a value of type `typeTok` on the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-3796">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3796">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3797">Odwołanie do obiektu do tablicy, `array`, są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3797">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-3798">Wartość indeksu `index`, do elementu w `array` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3798">An index value, `index`, to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-3799">Wartość o typie określonym w instrukcji są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3799">A value of the type specified in the instruction is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="68c9f-3800">Wartość, indeksu i odwołanie do tablicy ze stosu; zdjęte ze stosu są wartość zostanie przełączone do elementu tablicy pod danym indeksem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3800">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="68c9f-3801">`stelem` Instrukcji zastępuje wartość elementu wskazywanego przez podany liczony od zera indeks w tablicy jednowymiarowej `array` z wartością.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3801">The `stelem` instruction replaces the value of the element at the supplied zero-based index in the one-dimensional array `array` with the value.</span></span> <span data-ttu-id="68c9f-3802">Wartość ma typ określony przez token `typeTok` w instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3802">The value has the type specified by the token `typeTok` in the instruction.</span></span>  
  
 <span data-ttu-id="68c9f-3803">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3803">Arrays are objects, and hence represented by a value of type `O`.</span></span> <span data-ttu-id="68c9f-3804">Indeks jest typem `native int`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3804">The index is type `native int`.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-3805">jest generowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3805">is thrown if `array` is a null reference.</span></span>  
  
 <xref:System.IndexOutOfRangeException> <span data-ttu-id="68c9f-3806">jest generowany, jeśli `index` jest ujemny lub większy niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3806">is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <xref:System.ArrayTypeMismatchException> <span data-ttu-id="68c9f-3807">jest generowany, jeśli `array` nie przechowuje elementy typu wymagane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3807">is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="68c9f-3808">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `stelem` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3808">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3809">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3809">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3810">Zamienia element tablicy pod danym indeksem z <see langword="native int" /> wartość na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3810">Replaces the array element at a given index with the <see langword="native int" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3811">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3811">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3812">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3812">Format</span></span>|<span data-ttu-id="68c9f-3813">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3813">Assembly Format</span></span>|<span data-ttu-id="68c9f-3814">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3814">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3815">9B</span><span class="sxs-lookup"><span data-stu-id="68c9f-3815">9B</span></span>|<span data-ttu-id="68c9f-3816">stelem.i</span><span class="sxs-lookup"><span data-stu-id="68c9f-3816">stelem.i</span></span>|<span data-ttu-id="68c9f-3817">Zamienia element tablicy w podany indeks z `native int` wartość na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3817">Replaces an array element at the supplied index with the `native int` value on the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-3818">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3818">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3819">Odwołanie do obiektu do tablicy, `array`, są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3819">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-3820">Nieprawidłowy indeks do elementu w `array` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3820">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-3821">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3821">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="68c9f-3822">Wartość, indeksu i odwołanie do tablicy ze stosu; zdjęte ze stosu są wartość zostanie przełączone do elementu tablicy pod danym indeksem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3822">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="68c9f-3823">`stelem.i` Instrukcji zastępuje wartość elementu `index` w tablicy jednowymiarowej `array` z `native int` wartość wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3823">The `stelem.i` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `native int` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3824">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3824">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="68c9f-3825">Indeks jest typem `native int`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3825">The index is type `native int`.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-3826">jest generowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3826">is thrown if `array` is a null reference.</span></span>  
  
 <xref:System.IndexOutOfRangeException> <span data-ttu-id="68c9f-3827">jest generowany, jeśli `index` jest ujemny lub większy niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3827">is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <xref:System.ArrayTypeMismatchException> <span data-ttu-id="68c9f-3828">jest generowany, jeśli `array` nie przechowuje elementy typu wymagane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3828">is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="68c9f-3829">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `stelem.i` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3829">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3830">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3830">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3831">Zamienia element tablicy pod danym indeksem z <see langword="int8" /> wartość na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3831">Replaces the array element at a given index with the <see langword="int8" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3832">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3832">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3833">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3833">Format</span></span>|<span data-ttu-id="68c9f-3834">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3834">Assembly Format</span></span>|<span data-ttu-id="68c9f-3835">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3835">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3836">9C</span><span class="sxs-lookup"><span data-stu-id="68c9f-3836">9C</span></span>|<span data-ttu-id="68c9f-3837">stelem.i1</span><span class="sxs-lookup"><span data-stu-id="68c9f-3837">stelem.i1</span></span>|<span data-ttu-id="68c9f-3838">Zamienia element tablicy w podany indeks z `int8` wartość na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3838">Replaces an array element at the supplied index with the `int8` value on the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-3839">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3839">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3840">Odwołanie do obiektu do tablicy, `array`, są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3840">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-3841">Nieprawidłowy indeks do elementu w `array` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3841">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-3842">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3842">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="68c9f-3843">Wartość, indeksu i odwołanie do tablicy ze stosu; zdjęte ze stosu są wartość zostanie przełączone do elementu tablicy pod danym indeksem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3843">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="68c9f-3844">`stelem.i1` Instrukcji zastępuje wartość elementu `index` w tablicy jednowymiarowej `array` z `int8` wartość wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3844">The `stelem.i1` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int8` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3845">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3845">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="68c9f-3846">Indeks jest typem `native int`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3846">The index is type `native int`.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-3847">jest generowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3847">is thrown if `array` is a null reference.</span></span>  
  
 <xref:System.IndexOutOfRangeException> <span data-ttu-id="68c9f-3848">jest generowany, jeśli `index` jest ujemny lub większy niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3848">is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <xref:System.ArrayTypeMismatchException> <span data-ttu-id="68c9f-3849">jest generowany, jeśli `array` nie przechowuje elementy typu wymagane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3849">is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="68c9f-3850">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `stelem.i1` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3850">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i1` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3851">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3851">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3852">Zamienia element tablicy pod danym indeksem z <see langword="int16" /> wartość na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3852">Replaces the array element at a given index with the <see langword="int16" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3853">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3853">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3854">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3854">Format</span></span>|<span data-ttu-id="68c9f-3855">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3855">Assembly Format</span></span>|<span data-ttu-id="68c9f-3856">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3856">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3857">9D</span><span class="sxs-lookup"><span data-stu-id="68c9f-3857">9D</span></span>|<span data-ttu-id="68c9f-3858">stelem.i2</span><span class="sxs-lookup"><span data-stu-id="68c9f-3858">stelem.i2</span></span>|<span data-ttu-id="68c9f-3859">Zamienia element tablicy w podany indeks z `int16` wartość na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3859">Replaces an array element at the supplied index with the `int16` value on the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-3860">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3860">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3861">Odwołanie do obiektu do tablicy, `array`, są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3861">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-3862">Nieprawidłowy indeks do elementu w `array` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3862">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-3863">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3863">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="68c9f-3864">Wartość, indeksu i odwołanie do tablicy ze stosu; zdjęte ze stosu są wartość zostanie przełączone do elementu tablicy pod danym indeksem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3864">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="68c9f-3865">`stelem.i2` Instrukcji zastępuje wartość elementu `index` w tablicy jednowymiarowej `array` z `int16` wartość wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3865">The `stelem.i2` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int16` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3866">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3866">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="68c9f-3867">Indeks jest typem `native int`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3867">The index is type `native int`.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-3868">jest generowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3868">is thrown if `array` is a null reference.</span></span>  
  
 <xref:System.IndexOutOfRangeException> <span data-ttu-id="68c9f-3869">jest generowany, jeśli `index` jest ujemny lub większy niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3869">is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <xref:System.ArrayTypeMismatchException> <span data-ttu-id="68c9f-3870">jest generowany, jeśli `array` nie przechowuje elementy typu wymagane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3870">is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="68c9f-3871">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `stelem.i2` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3871">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i2` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3872">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3872">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3873">Zamienia element tablicy pod danym indeksem z <see langword="int32" /> wartość na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3873">Replaces the array element at a given index with the <see langword="int32" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3874">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3874">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3875">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3875">Format</span></span>|<span data-ttu-id="68c9f-3876">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3876">Assembly Format</span></span>|<span data-ttu-id="68c9f-3877">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3877">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3878">9E</span><span class="sxs-lookup"><span data-stu-id="68c9f-3878">9E</span></span>|<span data-ttu-id="68c9f-3879">stelem.i4</span><span class="sxs-lookup"><span data-stu-id="68c9f-3879">stelem.i4</span></span>|<span data-ttu-id="68c9f-3880">Zamienia element tablicy w podany indeks z `int32` wartość na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3880">Replaces an array element at the supplied index with the `int32` value on the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-3881">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3881">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3882">Odwołanie do obiektu do tablicy, `array`, są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3882">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-3883">Nieprawidłowy indeks do elementu w `array` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3883">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-3884">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3884">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="68c9f-3885">Wartość, indeksu i odwołanie do tablicy ze stosu; zdjęte ze stosu są wartość zostanie przełączone do elementu tablicy pod danym indeksem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3885">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="68c9f-3886">`stelem.i4` Instrukcji zastępuje wartość elementu `index` w tablicy jednowymiarowej `array` z `int32` wartość wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3886">The `stelem.i4` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int32` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3887">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3887">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="68c9f-3888">Indeks jest typem `native int`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3888">The index is type `native int`.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-3889">jest generowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3889">is thrown if `array` is a null reference.</span></span>  
  
 <xref:System.IndexOutOfRangeException> <span data-ttu-id="68c9f-3890">jest generowany, jeśli `index` jest ujemny lub większy niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3890">is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <xref:System.ArrayTypeMismatchException> <span data-ttu-id="68c9f-3891">jest generowany, jeśli `array` nie przechowuje elementy typu wymagane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3891">is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="68c9f-3892">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `stelem.i4` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3892">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i4` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3893">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3893">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3894">Zamienia element tablicy pod danym indeksem z <see langword="int64" /> wartość na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3894">Replaces the array element at a given index with the <see langword="int64" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3895">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3895">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3896">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3896">Format</span></span>|<span data-ttu-id="68c9f-3897">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3897">Assembly Format</span></span>|<span data-ttu-id="68c9f-3898">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3898">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3899">9F</span><span class="sxs-lookup"><span data-stu-id="68c9f-3899">9F</span></span>|<span data-ttu-id="68c9f-3900">stelem.i8</span><span class="sxs-lookup"><span data-stu-id="68c9f-3900">stelem.i8</span></span>|<span data-ttu-id="68c9f-3901">Zamienia element tablicy w podany indeks z `int64` wartość na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3901">Replaces an array element at the supplied index with the `int64` value on the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-3902">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3902">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3903">Odwołanie do obiektu do tablicy, `array`, są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3903">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-3904">Nieprawidłowy indeks do elementu w `array` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3904">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-3905">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3905">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="68c9f-3906">Wartość, indeksu i odwołanie do tablicy ze stosu; zdjęte ze stosu są wartość zostanie przełączone do elementu tablicy pod danym indeksem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3906">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="68c9f-3907">`stelem.i8` Instrukcji zastępuje wartość elementu `index` w tablicy jednowymiarowej `array` z `int64` wartość wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3907">The `stelem.i8` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int64` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3908">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3908">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="68c9f-3909">Indeks jest typem `native int`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3909">The index is type `native int`.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-3910">jest generowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3910">is thrown if `array` is a null reference.</span></span>  
  
 <xref:System.IndexOutOfRangeException> <span data-ttu-id="68c9f-3911">jest generowany, jeśli `index` jest ujemny lub większy niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3911">is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <xref:System.ArrayTypeMismatchException> <span data-ttu-id="68c9f-3912">jest generowany, jeśli `array` nie przechowuje elementy typu wymagane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3912">is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="68c9f-3913">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `stelem.i8` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3913">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i8` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3914">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3914">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3915">Zamienia element tablicy pod danym indeksem z <see langword="float32" /> wartość na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3915">Replaces the array element at a given index with the <see langword="float32" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3916">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3916">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3917">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3917">Format</span></span>|<span data-ttu-id="68c9f-3918">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3918">Assembly Format</span></span>|<span data-ttu-id="68c9f-3919">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3919">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3920">A0</span><span class="sxs-lookup"><span data-stu-id="68c9f-3920">A0</span></span>|<span data-ttu-id="68c9f-3921">stelem.r4</span><span class="sxs-lookup"><span data-stu-id="68c9f-3921">stelem.r4</span></span>|<span data-ttu-id="68c9f-3922">Zamienia element tablicy w podany indeks z `float32` wartość na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3922">Replaces an array element at the supplied index with the `float32` value on the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-3923">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3923">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3924">Odwołanie do obiektu do tablicy, `array`, są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3924">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-3925">Nieprawidłowy indeks do elementu w `array` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3925">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-3926">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3926">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="68c9f-3927">Wartość, indeksu i odwołanie do tablicy ze stosu; zdjęte ze stosu są wartość zostanie przełączone do elementu tablicy pod danym indeksem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3927">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="68c9f-3928">`stelem.r4` Instrukcji zastępuje wartość elementu `index` w tablicy jednowymiarowej `array` z `float32` wartość wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3928">The `stelem.r4` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `float32` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3929">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3929">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="68c9f-3930">Indeks jest typem `native int`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3930">The index is type `native int`.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-3931">jest generowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3931">is thrown if `array` is a null reference.</span></span>  
  
 <xref:System.IndexOutOfRangeException> <span data-ttu-id="68c9f-3932">jest generowany, jeśli `index` jest ujemny lub większy niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3932">is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <xref:System.ArrayTypeMismatchException> <span data-ttu-id="68c9f-3933">jest generowany, jeśli `array` nie przechowuje elementy typu wymagane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3933">is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="68c9f-3934">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `stelem.r4` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3934">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.r4` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3935">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3935">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3936">Zamienia element tablicy pod danym indeksem z <see langword="float64" /> wartość na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3936">Replaces the array element at a given index with the <see langword="float64" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3937">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3937">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3938">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3938">Format</span></span>|<span data-ttu-id="68c9f-3939">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3939">Assembly Format</span></span>|<span data-ttu-id="68c9f-3940">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3940">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3941">A1</span><span class="sxs-lookup"><span data-stu-id="68c9f-3941">A1</span></span>|<span data-ttu-id="68c9f-3942">stelem.r8</span><span class="sxs-lookup"><span data-stu-id="68c9f-3942">stelem.r8</span></span>|<span data-ttu-id="68c9f-3943">Zamienia element tablicy w podany indeks z `float64` wartość na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3943">Replaces an array element at the supplied index with the `float64` value on the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-3944">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3944">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3945">Odwołanie do obiektu do tablicy, `array`, są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3945">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-3946">Nieprawidłowy indeks do elementu w `array` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3946">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-3947">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3947">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="68c9f-3948">Wartość, indeksu i odwołanie do tablicy ze stosu; zdjęte ze stosu są wartość zostanie przełączone do elementu tablicy pod danym indeksem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3948">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="68c9f-3949">`stelem.r8` Instrukcji zastępuje wartość elementu `index` w tablicy jednowymiarowej `array` z `float64` wartość wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3949">The `stelem.r8` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `float64` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3950">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3950">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="68c9f-3951">Indeks jest typem `native int`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3951">The index is type `native int`.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-3952">jest generowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3952">is thrown if `array` is a null reference.</span></span>  
  
 <xref:System.IndexOutOfRangeException> <span data-ttu-id="68c9f-3953">jest generowany, jeśli `index` jest ujemny lub większy niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3953">is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <xref:System.ArrayTypeMismatchException> <span data-ttu-id="68c9f-3954">jest generowany, jeśli `array` nie przechowuje elementy typu wymagane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3954">is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="68c9f-3955">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `stelem.r8` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3955">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.r8` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3956">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3956">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3957">Zamienia element tablicy pod danym indeksem wartość odwołania do obiektu (typ <see langword="O" />) na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3957">Replaces the array element at a given index with the object ref value (type <see langword="O" />) on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3958">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3958">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3959">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3959">Format</span></span>|<span data-ttu-id="68c9f-3960">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3960">Assembly Format</span></span>|<span data-ttu-id="68c9f-3961">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3961">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3962">A2</span><span class="sxs-lookup"><span data-stu-id="68c9f-3962">A2</span></span>|<span data-ttu-id="68c9f-3963">stelem.ref</span><span class="sxs-lookup"><span data-stu-id="68c9f-3963">stelem.ref</span></span>|<span data-ttu-id="68c9f-3964">Zamienia element tablicy w podany indeks z `ref` wartości (typu `O`) na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3964">Replaces an array element at the supplied index with the `ref` value (type `O`) on the stack.</span></span>|  
  
 <span data-ttu-id="68c9f-3965">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3965">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3966">Odwołanie do obiektu do tablicy, `array`, są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3966">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-3967">Nieprawidłowy indeks do elementu w `array` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3967">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-3968">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3968">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="68c9f-3969">Wartość, indeksu i odwołanie do tablicy ze stosu; zdjęte ze stosu są wartość zostanie przełączone do elementu tablicy pod danym indeksem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3969">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="68c9f-3970">`stelem.ref` Instrukcji zastępuje wartość elementu wskazywanego przez podany indeks w tablicy jednowymiarowej `array` z `ref` (typ `O`) wartość wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3970">The `stelem.ref` instruction replaces the value of the element at the supplied index in the one-dimensional array `array` with the `ref` (type `O`) value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-3971">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3971">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="68c9f-3972">Indeks jest typem `native int`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3972">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="68c9f-3973">Należy pamiętać, że `stelem.ref` niejawnie rzutuje podana wartość dla typu elementu `array` przed przypisaniem wartości do elementu tablicy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3973">Note that `stelem.ref` implicitly casts the supplied value to the element type of `array` before assigning the value to the array element.</span></span> <span data-ttu-id="68c9f-3974">To rzutowanie może zakończyć się niepowodzeniem, nawet w przypadku kodu zweryfikowane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3974">This cast can fail, even for verified code.</span></span> <span data-ttu-id="68c9f-3975">Ten sposób `stelem.ref` instrukcji może zgłosić <xref:System.InvalidCastException>.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3975">Thus the `stelem.ref` instruction can throw <xref:System.InvalidCastException>.</span></span> <span data-ttu-id="68c9f-3976">Dla tablic jednowymiarowych, które nie są liczony od zera, a dla tablic wielowymiarowych <xref:System.Array> klasa udostępnia <xref:System.Array.SetValue%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3976">For one-dimensional arrays that aren't zero-based and for multidimensional arrays, the <xref:System.Array> class provides a <xref:System.Array.SetValue%2A> method.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-3977">jest generowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3977">is thrown if `array` is a null reference.</span></span>  
  
 <xref:System.IndexOutOfRangeException> <span data-ttu-id="68c9f-3978">jest generowany, jeśli `index` jest ujemny lub większy niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3978">is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <xref:System.ArrayTypeMismatchException> <span data-ttu-id="68c9f-3979">jest generowany, jeśli `array` nie przechowuje elementy typu wymagane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3979">is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="68c9f-3980">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `stelem.ref` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3980">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.ref` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-3981">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-3981">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-3982">Zamienia wartość przechowywaną w polu odwołania do obiektu lub wskaźnika z nową wartością.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3982">Replaces the value stored in the field of an object reference or pointer with a new value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-3983">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3983">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-3984">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-3984">Format</span></span>|<span data-ttu-id="68c9f-3985">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-3985">Assembly Format</span></span>|<span data-ttu-id="68c9f-3986">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-3986">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-3987">7D < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-3987">7D < `T` ></span></span>|<span data-ttu-id="68c9f-3988">stfld</span><span class="sxs-lookup"><span data-stu-id="68c9f-3988">stfld</span></span> `field`|<span data-ttu-id="68c9f-3989">Zastępuje wartości `field` obiektu z nową wartością.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3989">Replaces the value of `field` of the object with a new value.</span></span>|  
  
 <span data-ttu-id="68c9f-3990">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-3990">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-3991">Odwołanie do obiektu lub wskaźnika są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3991">An object reference or pointer is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-3992">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3992">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-3993">Wartość i odwołania/wskaźnika obiektu ze stosu; zdjęte ze stosu są wartość `field` w obiekcie jest zastępowany podana wartość.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3993">The value and the object reference/pointer are popped from the stack; the value of `field` in the object is replaced with the supplied value.</span></span>  
  
 <span data-ttu-id="68c9f-3994">`stfld` Instrukcji zastępuje wartość pola obiektu (typ `O`) lub za pomocą wskaźnika (typ `native int`, `&`, lub `*`) z danej wartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3994">The `stfld` instruction replaces the value of a field of an object (type `O`) or via a pointer (type `native int`, `&`, or `*`) with a given value.</span></span> `Field` <span data-ttu-id="68c9f-3995">jest token metadanych, który odwołuje się do odwołania do składowej pola.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3995">is a metadata token that refers to a field member reference.</span></span> <span data-ttu-id="68c9f-3996">`stfld` Instrukcji może mieć prefiks z jednego lub obu <xref:System.Reflection.Emit.OpCodes.Unaligned> i <xref:System.Reflection.Emit.OpCodes.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3996">The `stfld` instruction can have a prefix of either or both of <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile>.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-3997">jest generowany, jeśli odwołanie do obiektu lub wskaźnika jest odwołanie o wartości null i pole nie jest statyczne.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3997">is thrown if the object reference or pointer is a null reference and the field isn't static.</span></span>  
  
 <xref:System.MissingFieldException> <span data-ttu-id="68c9f-3998">jest generowany, jeśli `field` nie zostanie znaleziony w metadanych.</span><span class="sxs-lookup"><span data-stu-id="68c9f-3998">is thrown if `field` is not found in the metadata.</span></span> <span data-ttu-id="68c9f-3999">Jest to zazwyczaj sprawdzana podczas konwersji do kodu macierzystego, nie w czasie wykonywania instrukcji Microsoft Intermediate Language (MSIL).</span><span class="sxs-lookup"><span data-stu-id="68c9f-3999">This is typically checked when the Microsoft Intermediate Language (MSIL) instruction is converted to native code, not at runtime.</span></span>  
  
 <span data-ttu-id="68c9f-4000">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `stfld` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4000">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stfld` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4001">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4001">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4002">Przechowuje wartość typu <see langword="native int" /> na podany adres.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4002">Stores a value of type <see langword="native int" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4003">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4003">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4004">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4004">Format</span></span>|<span data-ttu-id="68c9f-4005">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4005">Assembly Format</span></span>|<span data-ttu-id="68c9f-4006">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4006">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4007">DF</span><span class="sxs-lookup"><span data-stu-id="68c9f-4007">DF</span></span>|<span data-ttu-id="68c9f-4008">stind.i</span><span class="sxs-lookup"><span data-stu-id="68c9f-4008">stind.i</span></span>|<span data-ttu-id="68c9f-4009">Magazyny `native int` wartość pod danym adresem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4009">Stores a `native int` value at a given address.</span></span>|  
  
 <span data-ttu-id="68c9f-4010">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4010">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-4011">Adres są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4011">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-4012">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4012">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-4013">Wartość i adres ze stosu; zdjęte ze stosu są wartość znajduje się pod adresem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4013">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="68c9f-4014">`stind.i` Magazynów instrukcji `native int` wartość na podany adres (typ `native int`, `*`, lub `&`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-4014">The `stind.i` instruction stores a `native int` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="68c9f-4015">Typ bezpiecznego działania wymaga, aby `stind.i` instrukcji można używać w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4015">Type safe operation requires that the `stind.i` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="68c9f-4016">Działanie `stind.i` instrukcji może być zmienione przez bezpośrednio poprzedzający <xref:System.Reflection.Emit.OpCodes.Volatile> lub <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4016">The operation of the `stind.i` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-4017">jest generowany, jeśli `addr` naturalnie nie jest wyrównany dla typu argumentu też dorozumianych przez sufiks instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4017">is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="68c9f-4018">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `stind.i` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4018">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4019">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4019">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4020">Przechowuje wartość typu <see langword="int8" /> na podany adres.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4020">Stores a value of type <see langword="int8" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4021">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4021">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4022">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4022">Format</span></span>|<span data-ttu-id="68c9f-4023">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4023">Assembly Format</span></span>|<span data-ttu-id="68c9f-4024">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4024">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4025">52</span><span class="sxs-lookup"><span data-stu-id="68c9f-4025">52</span></span>|<span data-ttu-id="68c9f-4026">stind.I1</span><span class="sxs-lookup"><span data-stu-id="68c9f-4026">stind.i1</span></span>|<span data-ttu-id="68c9f-4027">Magazyny `int8` wartość pod danym adresem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4027">Stores an `int8` value at a given address.</span></span>|  
  
 <span data-ttu-id="68c9f-4028">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4028">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-4029">Adres są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4029">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-4030">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4030">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-4031">Wartość i adres ze stosu; zdjęte ze stosu są wartość znajduje się pod adresem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4031">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="68c9f-4032">`stind.i1` Magazynów instrukcji `int8` wartość na podany adres (typ `native int`, `*`, lub `&`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-4032">The `stind.i1` instruction stores an `int8` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="68c9f-4033">Typ bezpiecznego działania wymaga, aby `stind.i1` instrukcji można używać w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4033">Type safe operation requires that the `stind.i1` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="68c9f-4034">Działanie `stind.i1` instrukcji może być zmienione przez bezpośrednio poprzedzający <xref:System.Reflection.Emit.OpCodes.Volatile> lub <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4034">The operation of the `stind.i1` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-4035">jest generowany, jeśli `addr` naturalnie nie jest wyrównany dla typu argumentu też dorozumianych przez sufiks instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4035">is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="68c9f-4036">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `stind.i1` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4036">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i1` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4037">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4037">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4038">Przechowuje wartość typu <see langword="int16" /> na podany adres.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4038">Stores a value of type <see langword="int16" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4039">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4039">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4040">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4040">Format</span></span>|<span data-ttu-id="68c9f-4041">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4041">Assembly Format</span></span>|<span data-ttu-id="68c9f-4042">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4042">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4043">53</span><span class="sxs-lookup"><span data-stu-id="68c9f-4043">53</span></span>|<span data-ttu-id="68c9f-4044">stind.I2</span><span class="sxs-lookup"><span data-stu-id="68c9f-4044">stind.i2</span></span>|<span data-ttu-id="68c9f-4045">Magazyny `int16` wartość pod danym adresem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4045">Stores an `int16` value at a given address.</span></span>|  
  
 <span data-ttu-id="68c9f-4046">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4046">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-4047">Adres są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4047">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-4048">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4048">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-4049">Wartość i adres ze stosu; zdjęte ze stosu są wartość znajduje się pod adresem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4049">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="68c9f-4050">`stind.i2` Magazynów instrukcji `int16` wartość na podany adres (typ `native int`, `*`, lub `&`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-4050">The `stind.i2` instruction stores an `int16` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="68c9f-4051">Typ bezpiecznego działania wymaga, aby `stind.2i` instrukcji można używać w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4051">Type safe operation requires that the `stind.2i` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="68c9f-4052">Działanie `stind.i2` instrukcji może być zmienione przez bezpośrednio poprzedzający <xref:System.Reflection.Emit.OpCodes.Volatile> lub <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4052">The operation of the `stind.i2` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-4053">jest generowany, jeśli `addr` naturalnie nie jest wyrównany dla typu argumentu też dorozumianych przez sufiks instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4053">is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="68c9f-4054">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `stind.i2` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4054">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i2` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4055">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4055">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4056">Przechowuje wartość typu <see langword="int32" /> na podany adres.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4056">Stores a value of type <see langword="int32" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4057">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4057">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4058">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4058">Format</span></span>|<span data-ttu-id="68c9f-4059">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4059">Assembly Format</span></span>|<span data-ttu-id="68c9f-4060">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4060">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4061">54</span><span class="sxs-lookup"><span data-stu-id="68c9f-4061">54</span></span>|<span data-ttu-id="68c9f-4062">stind.i4</span><span class="sxs-lookup"><span data-stu-id="68c9f-4062">stind.i4</span></span>|<span data-ttu-id="68c9f-4063">Magazyny `int32` wartość pod danym adresem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4063">Stores an `int32` value at a given address.</span></span>|  
  
 <span data-ttu-id="68c9f-4064">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4064">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-4065">Adres są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4065">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-4066">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4066">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-4067">Wartość i adres ze stosu; zdjęte ze stosu są wartość znajduje się pod adresem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4067">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="68c9f-4068">`stind.i4` Magazynów instrukcji `int32` wartość na podany adres (typ `native int`, `*`, lub `&`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-4068">The `stind.i4` instruction stores an `int32` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="68c9f-4069">Typ bezpiecznego działania wymaga, aby `stind.i4` instrukcji można używać w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4069">Type safe operation requires that the `stind.i4` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="68c9f-4070">Działanie `stind.i4` instrukcji może być zmienione przez bezpośrednio poprzedzający <xref:System.Reflection.Emit.OpCodes.Volatile> lub <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4070">The operation of the `stind.i4` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-4071">jest generowany, jeśli `addr` naturalnie nie jest wyrównany dla typu argumentu też dorozumianych przez sufiks instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4071">is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="68c9f-4072">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `stind.i4` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4072">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i4` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4073">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4073">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4074">Przechowuje wartość typu <see langword="int64" /> na podany adres.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4074">Stores a value of type <see langword="int64" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4075">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4075">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4076">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4076">Format</span></span>|<span data-ttu-id="68c9f-4077">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4077">Assembly Format</span></span>|<span data-ttu-id="68c9f-4078">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4078">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4079">55</span><span class="sxs-lookup"><span data-stu-id="68c9f-4079">55</span></span>|<span data-ttu-id="68c9f-4080">stind.i8</span><span class="sxs-lookup"><span data-stu-id="68c9f-4080">stind.i8</span></span>|<span data-ttu-id="68c9f-4081">Magazyny `int64` wartość pod danym adresem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4081">Stores an `int64` value at a given address.</span></span>|  
  
 <span data-ttu-id="68c9f-4082">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4082">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-4083">Adres są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4083">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-4084">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4084">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-4085">Wartość i adres ze stosu; zdjęte ze stosu są wartość znajduje się pod adresem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4085">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="68c9f-4086">`stind.i8` Magazynów instrukcji `int64` wartość na podany adres (typ `native int`, `*`, lub `&`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-4086">The `stind.i8` instruction stores an `int64` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="68c9f-4087">Typ bezpiecznego działania wymaga, aby `stind.i8` instrukcji można używać w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4087">Type safe operation requires that the `stind.i8` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="68c9f-4088">Działanie `stind.i` instrukcji może być zmienione przez bezpośrednio poprzedzający <xref:System.Reflection.Emit.OpCodes.Volatile> lub <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4088">The operation of the `stind.i` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-4089">jest generowany, jeśli `addr` naturalnie nie jest wyrównany dla typu argumentu też dorozumianych przez sufiks instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4089">is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="68c9f-4090">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `stind.i8` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4090">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i8` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4091">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4091">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4092">Przechowuje wartość typu <see langword="float32" /> na podany adres.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4092">Stores a value of type <see langword="float32" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4093">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4093">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4094">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4094">Format</span></span>|<span data-ttu-id="68c9f-4095">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4095">Assembly Format</span></span>|<span data-ttu-id="68c9f-4096">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4096">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4097">56</span><span class="sxs-lookup"><span data-stu-id="68c9f-4097">56</span></span>|<span data-ttu-id="68c9f-4098">stind.r4</span><span class="sxs-lookup"><span data-stu-id="68c9f-4098">stind.r4</span></span>|<span data-ttu-id="68c9f-4099">Magazyny `float32` wartość pod danym adresem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4099">Stores a `float32` value at a given address.</span></span>|  
  
 <span data-ttu-id="68c9f-4100">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4100">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-4101">Adres są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4101">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-4102">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4102">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-4103">Wartość i adres ze stosu; zdjęte ze stosu są wartość znajduje się pod adresem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4103">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="68c9f-4104">`stind.r4` Magazynów instrukcji `float32` wartość na podany adres (typ `native int`, `*`, lub `&`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-4104">The `stind.r4` instruction stores a `float32` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="68c9f-4105">Typ bezpiecznego działania wymaga, aby `stind.r4` instrukcji można używać w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4105">Type safe operation requires that the `stind.r4` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="68c9f-4106">Działanie `stind.r4` instrukcji może być zmienione przez bezpośrednio poprzedzający <xref:System.Reflection.Emit.OpCodes.Volatile> lub <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4106">The operation of the `stind.r4` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-4107">jest generowany, jeśli `addr` naturalnie nie jest wyrównany dla typu argumentu też dorozumianych przez sufiks instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4107">is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="68c9f-4108">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `stind.r4` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4108">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.r4` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4109">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4109">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4110">Przechowuje wartość typu <see langword="float64" /> na podany adres.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4110">Stores a value of type <see langword="float64" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4111">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4111">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4112">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4112">Format</span></span>|<span data-ttu-id="68c9f-4113">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4113">Assembly Format</span></span>|<span data-ttu-id="68c9f-4114">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4114">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4115">57</span><span class="sxs-lookup"><span data-stu-id="68c9f-4115">57</span></span>|<span data-ttu-id="68c9f-4116">stind.r8</span><span class="sxs-lookup"><span data-stu-id="68c9f-4116">stind.r8</span></span>|<span data-ttu-id="68c9f-4117">Magazyny `float64` wartość pod danym adresem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4117">Stores a `float64` value at a given address.</span></span>|  
  
 <span data-ttu-id="68c9f-4118">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4118">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-4119">Adres są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4119">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-4120">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4120">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-4121">Wartość i adres ze stosu; zdjęte ze stosu są wartość znajduje się pod adresem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4121">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="68c9f-4122">`stind.r8` Magazynów instrukcji `float64` wartość na podany adres (typ `native int`, `*`, lub `&`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-4122">The `stind.r8` instruction stores a `float64` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="68c9f-4123">Typ bezpiecznego działania wymaga, aby `stind.r8` instrukcji można używać w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4123">Type safe operation requires that the `stind.r8` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="68c9f-4124">Działanie `stind.r8` instrukcji może być zmienione przez bezpośrednio poprzedzający <xref:System.Reflection.Emit.OpCodes.Volatile> lub <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4124">The operation of the `stind.r8` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-4125">jest generowany, jeśli `addr` naturalnie nie jest wyrównany dla typu argumentu też dorozumianych przez sufiks instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4125">is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="68c9f-4126">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `stind.r8` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4126">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.r8` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4127">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4127">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4128">Przechowuje wartość odwołania do obiektu na podany adres.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4128">Stores a object reference value at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4129">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4129">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4130">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4130">Format</span></span>|<span data-ttu-id="68c9f-4131">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4131">Assembly Format</span></span>|<span data-ttu-id="68c9f-4132">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4132">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4133">51</span><span class="sxs-lookup"><span data-stu-id="68c9f-4133">51</span></span>|<span data-ttu-id="68c9f-4134">stind.ref</span><span class="sxs-lookup"><span data-stu-id="68c9f-4134">stind.ref</span></span>|<span data-ttu-id="68c9f-4135">Przechowuje odwołania do obiektu (typ `O`) wartość pod danym adresem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4135">Stores an object reference (type `O`) value at a given address.</span></span>|  
  
 <span data-ttu-id="68c9f-4136">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4136">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-4137">Adres są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4137">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-4138">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4138">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-4139">Wartość i adres ze stosu; zdjęte ze stosu są wartość znajduje się pod adresem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4139">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="68c9f-4140">`stind.ref` Instrukcji przechowuje wartość odwołania do obiektu na podany adres (typ `native int`, `*`, lub `&`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-4140">The `stind.ref` instruction stores an object reference value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="68c9f-4141">Typ bezpiecznego działania wymaga, aby `stind.ref` instrukcji można używać w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4141">Type safe operation requires that the `stind.ref` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="68c9f-4142">Działanie `stind.ref` instrukcji może być zmienione przez bezpośrednio poprzedzający <xref:System.Reflection.Emit.OpCodes.Volatile> lub <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4142">The operation of the `stind.ref` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-4143">jest generowany, jeśli `addr` naturalnie nie jest wyrównany dla typu argumentu też dorozumianych przez sufiks instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4143">is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="68c9f-4144">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `stind.ref` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4144">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.ref` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4145">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4145">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4146">Pobiera bieżącą wartość z góry stosu oceny i zapisuje go w liście zmiennej lokalnej z określonym indeksem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4146">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at a specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4147">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4147">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4148">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4148">Format</span></span>|<span data-ttu-id="68c9f-4149">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4149">Assembly Format</span></span>|<span data-ttu-id="68c9f-4150">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4150">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4151">FE 0E < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-4151">FE 0E < `unsigned int16` ></span></span>|<span data-ttu-id="68c9f-4152">stloc</span><span class="sxs-lookup"><span data-stu-id="68c9f-4152">stloc</span></span> `index`|<span data-ttu-id="68c9f-4153">Pobiera wartość ze stosu i zapisuje go w zmiennej lokalnej `index`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4153">Pops a value from the stack and stores it in local variable `index`.</span></span>|  
  
 <span data-ttu-id="68c9f-4154">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4154">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-4155">Wartość się zdjęte ze stosu zniżki w stosunku do stosu i umieszcza w zmiennej lokalnej `index`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4155">A value is popped off of the stack and placed in local variable `index`.</span></span>  
  
 <span data-ttu-id="68c9f-4156">`stloc` Instrukcji POP najwyższą wartość ze stosu oceny i przenosi ją na liczbę zmiennych lokalnych `index`, gdzie zmienne lokalne są numerowane 0 lub nowszy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4156">The `stloc` instruction pops the top value off the evaluation stack and moves it into local variable number `index`, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="68c9f-4157">Typ wartości musi odpowiadać typowi zmiennej lokalnej, jak to określono w bieżącej metody podpisu lokalnego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4157">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="68c9f-4158">Przechowywanie w zmiennych lokalnych, w których wartość całkowitą mniejszą niż 4 bajty obcina wartość, kiedy przesuwa się on ze stosu do zmiennej lokalnej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4158">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="68c9f-4159">Wartości zmiennoprzecinkowe są zaokrąglane z ich rozmiar natywnego (typ `F`) do rozmiaru skojarzonych z argumentem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4159">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="68c9f-4160">Poprawne instrukcji Microsoft Intermediate Language (MSIL) wymagają, aby `index` mieć prawidłowy indeks lokalnego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4160">Correct Microsoft Intermediate Language (MSIL) instructions require that `index` be a valid local index.</span></span> <span data-ttu-id="68c9f-4161">Dla `stloc` instrukcji, `index` musi należeć do zakresu 0 i 65534 włącznie (w szczególności 65535 nie jest prawidłowy).</span><span class="sxs-lookup"><span data-stu-id="68c9f-4161">For the `stloc` instruction, `index` must lie in the range 0 to 65534 inclusive (specifically, 65535 is not valid).</span></span> <span data-ttu-id="68c9f-4162">Z wyjątkiem 65535 przyczyną jest pragmatyczne: implementacje prawdopodobnie będzie używać 2-bajtowych liczb całkowitych do śledzenia, zarówno lokalne indeksu, a także całkowita liczba zmiennych lokalnych dla danej metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4162">The reason for excluding 65535 is pragmatic: likely implementations will use a 2-byte integer to track both a local's index, as well as the total number of locals for a given method.</span></span> <span data-ttu-id="68c9f-4163">Indeks 65535 dokonano prawidłowe, wymagałoby na liczbę całkowitą szersze śledzić liczbę zmiennych lokalnych w takiej metody.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4163">If an index of 65535 had been made valid, it would require a wider integer to track the number of locals in such a method.</span></span>  
  
 <span data-ttu-id="68c9f-4164">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenia metody można użyć `stloc` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4164">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `stloc` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4165">ILGenerator.Emit (OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4165">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="68c9f-4166">ILGenerator.Emit (OpCode, krótki)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4166">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4167">Pobiera bieżącą wartość z góry stosu oceny i zapisuje go w lokalnym listy zmiennych pod indeksem 0.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4167">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 0.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4168">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4168">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4169">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4169">Format</span></span>|<span data-ttu-id="68c9f-4170">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4170">Assembly Format</span></span>|<span data-ttu-id="68c9f-4171">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4171">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4172">0A</span><span class="sxs-lookup"><span data-stu-id="68c9f-4172">0A</span></span>|<span data-ttu-id="68c9f-4173">stloc.0</span><span class="sxs-lookup"><span data-stu-id="68c9f-4173">stloc.0</span></span>|<span data-ttu-id="68c9f-4174">Pobiera wartość ze stosu do zmiennej lokalnej 0.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4174">Pops a value from the stack into local variable 0.</span></span>|  
  
 <span data-ttu-id="68c9f-4175">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4175">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-4176">Wartość się zdjęte ze stosu zniżki w stosunku do stosu i umieszcza w zmiennej lokalnej indeksowane przez 0.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4176">A value is popped off of the stack and placed in the local variable indexed by 0.</span></span>  
  
 <span data-ttu-id="68c9f-4177">`stloc.0` Instrukcji POP najwyższą wartość ze stosu oceny i przenosi ją do zmiennej lokalnej indeksowane przez 0.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4177">The `stloc.0` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 0.</span></span> <span data-ttu-id="68c9f-4178">Typ wartości musi odpowiadać typowi zmiennej lokalnej, jak to określono w bieżącej metody podpisu lokalnego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4178">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 `stloc.0` <span data-ttu-id="68c9f-4179">jest szczególnie wydajne kodowania do przechowywania wartości zmiennej lokalnej 0.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4179">is an especially efficient encoding for storing values in local variable 0.</span></span>  
  
 <span data-ttu-id="68c9f-4180">Przechowywanie w zmiennych lokalnych, w których wartość całkowitą mniejszą niż 4 bajty obcina wartość, kiedy przesuwa się on ze stosu do zmiennej lokalnej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4180">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="68c9f-4181">Wartości zmiennoprzecinkowe są zaokrąglane z ich rozmiar natywnego (typ `F`) do rozmiaru skojarzonych z argumentem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4181">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="68c9f-4182">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `stloc.0` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4182">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.0` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4183">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4183">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4184">Pobiera bieżącą wartość z góry stosu oceny i zapisuje go w lokalnym listy zmiennych pod indeksem 1.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4184">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 1.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4185">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4185">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4186">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4186">Format</span></span>|<span data-ttu-id="68c9f-4187">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4187">Assembly Format</span></span>|<span data-ttu-id="68c9f-4188">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4188">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4189">0B</span><span class="sxs-lookup"><span data-stu-id="68c9f-4189">0B</span></span>|<span data-ttu-id="68c9f-4190">stloc.1</span><span class="sxs-lookup"><span data-stu-id="68c9f-4190">stloc.1</span></span>|<span data-ttu-id="68c9f-4191">Pobiera wartość ze stosu do zmiennej lokalnej 1.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4191">Pops a value from the stack into local variable 1.</span></span>|  
  
 <span data-ttu-id="68c9f-4192">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4192">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-4193">Wartość się zdjęte ze stosu zniżki w stosunku do stosu i umieszcza w zmiennej lokalnej indeksowane przez 1.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4193">A value is popped off of the stack and placed in the local variable indexed by 1.</span></span>  
  
 <span data-ttu-id="68c9f-4194">`stloc.1` Instrukcji POP najwyższą wartość ze stosu oceny i przenosi ją do zmiennej lokalnej indeksowane przez 1.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4194">The `stloc.1` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 1.</span></span> <span data-ttu-id="68c9f-4195">Typ wartości musi odpowiadać typowi zmiennej lokalnej, jak to określono w bieżącej metody podpisu lokalnego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4195">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 `stloc.1` <span data-ttu-id="68c9f-4196">jest szczególnie wydajne kodowania do przechowywania wartości zmiennej lokalnej 1.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4196">is an especially efficient encoding for storing values in local variable 1.</span></span>  
  
 <span data-ttu-id="68c9f-4197">Przechowywanie w zmiennych lokalnych, w których wartość całkowitą mniejszą niż 4 bajty obcina wartość, kiedy przesuwa się on ze stosu do zmiennej lokalnej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4197">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="68c9f-4198">Wartości zmiennoprzecinkowe są zaokrąglane z ich rozmiar natywnego (typ `F`) do rozmiaru skojarzonych z argumentem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4198">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="68c9f-4199">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `stloc.1` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4199">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.1` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4200">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4200">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4201">Pobiera bieżącą wartość z góry stosu oceny i zapisuje go w lokalnym listy zmiennych pod indeksem 2.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4201">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 2.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4202">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4202">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4203">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4203">Format</span></span>|<span data-ttu-id="68c9f-4204">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4204">Assembly Format</span></span>|<span data-ttu-id="68c9f-4205">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4205">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4206">0C</span><span class="sxs-lookup"><span data-stu-id="68c9f-4206">0C</span></span>|<span data-ttu-id="68c9f-4207">stloc.2</span><span class="sxs-lookup"><span data-stu-id="68c9f-4207">stloc.2</span></span>|<span data-ttu-id="68c9f-4208">Pobiera wartość ze stosu do zmiennej lokalnej 2</span><span class="sxs-lookup"><span data-stu-id="68c9f-4208">Pops a value from the stack into local variable 2</span></span>|  
  
 <span data-ttu-id="68c9f-4209">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4209">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-4210">Wartość się zdjęte ze stosu zniżki w stosunku do stosu i umieszcza w zmiennej lokalnej indeksowane przez 2.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4210">A value is popped off of the stack and placed in the local variable indexed by 2.</span></span>  
  
 <span data-ttu-id="68c9f-4211">`stloc.2` Instrukcji POP najwyższą wartość ze stosu oceny i przenosi ją do zmiennej lokalnej indeksowane przez 2.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4211">The `stloc.2` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 2.</span></span> <span data-ttu-id="68c9f-4212">Typ wartości musi odpowiadać typowi zmiennej lokalnej, jak to określono w bieżącej metody podpisu lokalnego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4212">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 `stloc.2` <span data-ttu-id="68c9f-4213">jest szczególnie wydajne kodowania do przechowywania wartości zmiennej lokalnej 2.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4213">is an especially efficient encoding for storing values in local variable 2.</span></span>  
  
 <span data-ttu-id="68c9f-4214">Przechowywanie w zmiennych lokalnych, w których wartość całkowitą mniejszą niż 4 bajty obcina wartość, kiedy przesuwa się on ze stosu do zmiennej lokalnej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4214">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="68c9f-4215">Wartości zmiennoprzecinkowe są zaokrąglane z ich rozmiar natywnego (typ `F`) do rozmiaru skojarzonych z argumentem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4215">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="68c9f-4216">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `stloc.2` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4216">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.2` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4217">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4217">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4218">Pobiera bieżącą wartość z góry stosu oceny i zapisuje go w lokalnym listę zmiennych pod indeksem 3.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4218">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 3.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4219">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4219">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4220">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4220">Format</span></span>|<span data-ttu-id="68c9f-4221">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4221">Assembly Format</span></span>|<span data-ttu-id="68c9f-4222">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4222">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4223">0D</span><span class="sxs-lookup"><span data-stu-id="68c9f-4223">0D</span></span>|<span data-ttu-id="68c9f-4224">stloc.3</span><span class="sxs-lookup"><span data-stu-id="68c9f-4224">stloc.3</span></span>|<span data-ttu-id="68c9f-4225">Pobiera wartość ze stosu do zmiennej lokalnej 3</span><span class="sxs-lookup"><span data-stu-id="68c9f-4225">Pops a value from the stack into local variable 3</span></span>|  
  
 <span data-ttu-id="68c9f-4226">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4226">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-4227">Wartość się zdjęte ze stosu zniżki w stosunku do stosu i umieszcza w zmiennej lokalnej indeksowane przez 3.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4227">A value is popped off of the stack and placed in the local variable indexed by 3.</span></span>  
  
 <span data-ttu-id="68c9f-4228">`stloc.3` Instrukcji POP najwyższą wartość ze stosu oceny i przenosi ją do zmiennej lokalnej indeksowane przez 3.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4228">The `stloc.3` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 3.</span></span> <span data-ttu-id="68c9f-4229">Typ wartości musi odpowiadać typowi zmiennej lokalnej, jak to określono w bieżącej metody podpisu lokalnego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4229">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 `stloc.3` <span data-ttu-id="68c9f-4230">jest szczególnie wydajne kodowania do przechowywania wartości zmiennej lokalnej 3.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4230">is an especially efficient encoding for storing values in local variable 3.</span></span>  
  
 <span data-ttu-id="68c9f-4231">Przechowywanie w zmiennych lokalnych, w których wartość całkowitą mniejszą niż 4 bajty obcina wartość, kiedy przesuwa się on ze stosu do zmiennej lokalnej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4231">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="68c9f-4232">Wartości zmiennoprzecinkowe są zaokrąglane z ich rozmiar natywnego (typ `F`) do rozmiaru skojarzonych z argumentem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4232">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="68c9f-4233">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `stloc.3` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4233">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.3` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4234">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4234">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4235">Pobiera bieżącą wartość z góry stosu oceny i zapisuje go w liście zmiennych lokalnych w <paramref name="index" /> (skrócona forma).</span><span class="sxs-lookup"><span data-stu-id="68c9f-4235">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at <paramref name="index" /> (short form).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4236">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4236">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4237">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4237">Format</span></span>|<span data-ttu-id="68c9f-4238">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4238">Assembly Format</span></span>|<span data-ttu-id="68c9f-4239">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4239">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4240">13 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-4240">13 < `unsigned int8` ></span></span>|<span data-ttu-id="68c9f-4241">stloc.s</span><span class="sxs-lookup"><span data-stu-id="68c9f-4241">stloc.s</span></span> `index`|<span data-ttu-id="68c9f-4242">Pobiera wartość ze stosu i zapisuje go w zmiennej lokalnej `index`, krótka.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4242">Pops a value from the stack and stores it in local variable `index`, short form.</span></span>|  
  
 <span data-ttu-id="68c9f-4243">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4243">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-4244">Wartość się zdjęte ze stosu zniżki w stosunku do stosu i umieszcza w zmiennej lokalnej `index`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4244">A value is popped off of the stack and placed in local variable `index`.</span></span>  
  
 <span data-ttu-id="68c9f-4245">`stloc.s` Instrukcji POP najwyższą wartość ze stosu oceny i przenosi ją na liczbę zmiennych lokalnych `index`, gdzie zmienne lokalne są numerowane 0 lub nowszy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4245">The `stloc.s` instruction pops the top value off the evaluation stack and moves it into local variable number `index`, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="68c9f-4246">Typ wartości musi odpowiadać typowi zmiennej lokalnej, jak to określono w bieżącej metody podpisu lokalnego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4246">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="68c9f-4247">`stloc.s` Instrukcji zapewnia efektywne kodowanie dla zmiennych lokalnych 0 do 255.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4247">The `stloc.s` instruction provides an efficient encoding for local variables 0 through 255.</span></span>  
  
 <span data-ttu-id="68c9f-4248">Przechowywanie w zmiennych lokalnych, w których wartość całkowitą mniejszą niż 4 bajty obcina wartość, kiedy przesuwa się on ze stosu do zmiennej lokalnej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4248">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="68c9f-4249">Wartości zmiennoprzecinkowe są zaokrąglane z ich rozmiar natywnego (typ `F`) do rozmiaru skojarzonych z argumentem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4249">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="68c9f-4250">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenia metody można użyć `stloc.s` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4250">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `stloc.s` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4251">ILGenerator.Emit (OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4251">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="68c9f-4252">ILGenerator.Emit (OpCode, bajtów)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4252">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4253">Kopiuje wartość o określonym typie ze stosu oceny na adres podany pamięci.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4253">Copies a value of a specified type from the evaluation stack into a supplied memory address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4254">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4254">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4255">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4255">Format</span></span>|<span data-ttu-id="68c9f-4256">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4256">Assembly Format</span></span>|<span data-ttu-id="68c9f-4257">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4257">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4258">81 < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-4258">81 < `T` ></span></span>|<span data-ttu-id="68c9f-4259">stobj</span><span class="sxs-lookup"><span data-stu-id="68c9f-4259">stobj</span></span> `class`|<span data-ttu-id="68c9f-4260">Przechowuje wartość typu `class` ze stosu w pamięci.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4260">Stores a value of type `class` from the stack into memory.</span></span>|  
  
 <span data-ttu-id="68c9f-4261">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4261">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-4262">Adres są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4262">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-4263">Obiekt typu wartości typu `class` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4263">A value type object of type `class` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="68c9f-4264">Obiekt i adres ze stosu; zdjęte ze stosu są obiektu typu wartościowego znajduje się pod adresem.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4264">The object and the address are popped from the stack; the value type object is stored at the address.</span></span>  
  
 <span data-ttu-id="68c9f-4265">`stobj` Instrukcji kopiuje obiektu typu wartościowego na adres określony adres (wskaźnik typu `native int`, `*`, lub `&`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-4265">The `stobj` instruction copies the value type object into the address specified by the address (a pointer of type `native int`, `*`, or `&`).</span></span> <span data-ttu-id="68c9f-4266">Liczbą bajtów skopiowanych zależy od rozmiaru klasy reprezentowane przez `class`, token metadanych reprezentujący typ wartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4266">The number of bytes copied depends on the size of the class represented by `class`, a metadata token representing a value type.</span></span>  
  
 <span data-ttu-id="68c9f-4267">Działanie `stobj` instrukcji może być zmienione przez bezpośrednio poprzedzający <xref:System.Reflection.Emit.OpCodes.Volatile> lub <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4267">The operation of the `stobj` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <xref:System.TypeLoadException> <span data-ttu-id="68c9f-4268">jest generowany, jeśli nie można odnaleźć klasy.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4268">is thrown if class cannot be found.</span></span> <span data-ttu-id="68c9f-4269">Jest to zazwyczaj wykrywany, po instrukcji Microsoft Intermediate Language (MSIL) są konwertowane do kodu natywnego, a nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4269">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at run time.</span></span>  
  
 <span data-ttu-id="68c9f-4270">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `stobj` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4270">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stobj` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4271">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4271">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stsfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stsfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stsfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stsfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stsfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stsfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stsfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stsfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4272">Zamienia wartości pola statyczne wartość ze stosu oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4272">Replaces the value of a static field with a value from the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4273">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4273">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4274">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4274">Format</span></span>|<span data-ttu-id="68c9f-4275">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4275">Assembly Format</span></span>|<span data-ttu-id="68c9f-4276">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4276">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4277">80 < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-4277">80 < `T` ></span></span>|<span data-ttu-id="68c9f-4278">stsfld</span><span class="sxs-lookup"><span data-stu-id="68c9f-4278">stsfld</span></span> `field`|<span data-ttu-id="68c9f-4279">Zastępuje wartości w `field` o podanej wartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4279">Replaces the value in `field` with a supplied value.</span></span>|  
  
 <span data-ttu-id="68c9f-4280">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4280">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-4281">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4281">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-4282">Wartość jest zdjęte ze stosu ze stosu i przechowywane w `field`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4282">A value is popped from the stack and stored in `field`.</span></span>  
  
 <span data-ttu-id="68c9f-4283">`stsfld` Instrukcji zastępuje wartość pola statyczne z wartością ze stosu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4283">The `stsfld` instruction replaces the value of a static field with a value from the stack.</span></span> `field` <span data-ttu-id="68c9f-4284">jest token metadanych, który musi odwoływać się do elementu członkowskiego pole statyczne.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4284">is a metadata token that must refer to a static field member.</span></span>  
  
 <span data-ttu-id="68c9f-4285">`stsfld` Instrukcji może być poprzedzony <xref:System.Reflection.Emit.OpCodes.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4285">The `stsfld` instruction may be prefixed by <xref:System.Reflection.Emit.OpCodes.Volatile>.</span></span>  
  
 <xref:System.MissingFieldException> <span data-ttu-id="68c9f-4286">jest generowany, jeśli pole nie zostanie znaleziony w metadanych.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4286">is thrown if field is not found in the metadata.</span></span> <span data-ttu-id="68c9f-4287">Jest to zazwyczaj sprawdzana po instrukcji Microsoft Intermediate Language (MSIL) są konwertowane do kodu macierzystego, nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4287">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="68c9f-4288">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `stsfld` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4288">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stsfld` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4289">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4289">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4290">Odejmuje wartość jednego z innego i wypycha wynik na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4290">Subtracts one value from another and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4291">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4291">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4292">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4292">Format</span></span>|<span data-ttu-id="68c9f-4293">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4293">Assembly Format</span></span>|<span data-ttu-id="68c9f-4294">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4294">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4295">59</span><span class="sxs-lookup"><span data-stu-id="68c9f-4295">59</span></span>|<span data-ttu-id="68c9f-4296">Sub</span><span class="sxs-lookup"><span data-stu-id="68c9f-4296">sub</span></span>|<span data-ttu-id="68c9f-4297">Odejmuje jedną wartość z innej, zwracając wartość liczbową.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4297">Subtracts one value from another, returning a new numeric value.</span></span>|  
  
 <span data-ttu-id="68c9f-4298">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4298">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-4299">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4299">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-4300">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4300">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-4301">i `value1` są zdjęte ze stosu ze stosu; `value2` jest odejmowany od `value1`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4301">and `value1` are popped from the stack; `value2` is subtracted from `value1`.</span></span>  
  
4.  <span data-ttu-id="68c9f-4302">Wyniki są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4302">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-4303">Nie wykryto przepełnienia liczby całkowitej operacji (do obsługi właściwego przepełnienie zobacz <xref:System.Reflection.Emit.OpCodes.Sub_Ovf>).</span><span class="sxs-lookup"><span data-stu-id="68c9f-4303">Overflow is not detected for integer operations (for proper overflow handling, see <xref:System.Reflection.Emit.OpCodes.Sub_Ovf>).</span></span>  
  
 <span data-ttu-id="68c9f-4304">Liczba całkowita odejmowania opakowuje, a nie zmienia nasycenie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4304">Integer subtraction wraps, rather than saturates.</span></span> <span data-ttu-id="68c9f-4305">Na przykład: przy założeniu 8-bitowych liczb całkowitych, gdzie `value1` jest równa 0 i `value2` jest ustawiona na 1, "zawinięty" wynik będzie 255.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4305">For example: assuming 8-bit integers, where `value1` is set to 0 and `value2` is set to 1, the "wrapped" result will be 255.</span></span>  
  
 <span data-ttu-id="68c9f-4306">Przepełnienie zmiennoprzecinkowej zwraca `+inf` (`PositiveInfinity`) lub `-inf` (`NegativeInfinity`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-4306">Floating-point overflow returns `+inf` (`PositiveInfinity`) or `-inf` (`NegativeInfinity`).</span></span>  
  
 <span data-ttu-id="68c9f-4307">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `sub` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4307">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4308">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4308">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4309">Odejmuje jedną liczbę całkowitą z innego, przeprowadza sprawdzanie przepełnienia i umieszcza wynik na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4309">Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4310">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4310">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4311">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4311">Format</span></span>|<span data-ttu-id="68c9f-4312">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4312">Assembly Format</span></span>|<span data-ttu-id="68c9f-4313">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4313">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4314">DA</span><span class="sxs-lookup"><span data-stu-id="68c9f-4314">DA</span></span>|<span data-ttu-id="68c9f-4315">sub.ovf</span><span class="sxs-lookup"><span data-stu-id="68c9f-4315">sub.ovf</span></span>|<span data-ttu-id="68c9f-4316">Odejmuje jedną liczbę całkowitą z innego ze sprawdzeniem przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4316">Subtracts one integer value from another with an overflow check.</span></span>|  
  
 <span data-ttu-id="68c9f-4317">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4317">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-4318">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4318">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-4319">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4319">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-4320">i `value1` są zdjęte ze stosu ze stosu; `value2` jest odejmowany od `value1` ze sprawdzaniem dla przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4320">and `value1` are popped from the stack; `value2` is subtracted from `value1` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="68c9f-4321">Wyniki są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4321">The result is pushed onto the stack.</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-4322">jest generowany, jeśli wynik nie może być reprezentowana w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4322">is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="68c9f-4323">Ta operacja jest wykonywana na liczby całkowite ze znakiem; w przypadku wartości zmiennoprzecinkowe, użyj <xref:System.Reflection.Emit.OpCodes.Sub>.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4323">This operation is performed on signed integers; for floating-point values, use <xref:System.Reflection.Emit.OpCodes.Sub>.</span></span>  
  
 <span data-ttu-id="68c9f-4324">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `sub.ovf` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4324">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4325">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4325">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4326">Odejmuje jedną wartość liczby całkowitej bez znaku z innego, przeprowadza sprawdzanie przepełnienia i umieszcza wynik na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4326">Subtracts one unsigned integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4327">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4327">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4328">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4328">Format</span></span>|<span data-ttu-id="68c9f-4329">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4329">Assembly Format</span></span>|<span data-ttu-id="68c9f-4330">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4330">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4331">DB</span><span class="sxs-lookup"><span data-stu-id="68c9f-4331">DB</span></span>|<span data-ttu-id="68c9f-4332">sub.ovf.un</span><span class="sxs-lookup"><span data-stu-id="68c9f-4332">sub.ovf.un</span></span>|<span data-ttu-id="68c9f-4333">Odejmuje jedną wartość liczby całkowitej bez znaku z innego ze sprawdzeniem przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4333">Subtracts one unsigned integer value from another with an overflow check.</span></span>|  
  
 <span data-ttu-id="68c9f-4334">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4334">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-4335">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4335">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-4336">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4336">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-4337">i `value1` są zdjęte ze stosu ze stosu; `value2` jest odejmowany od `value1` ze sprawdzaniem dla przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4337">and `value1` are popped from the stack; `value2` is subtracted from `value1` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="68c9f-4338">Wyniki są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4338">The result is pushed onto the stack.</span></span>  
  
 <xref:System.OverflowException> <span data-ttu-id="68c9f-4339">jest generowany, jeśli wynik nie może być reprezentowana w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4339">is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="68c9f-4340">Ta operacja jest wykonywana na liczby całkowite ze znakiem; w przypadku wartości zmiennoprzecinkowe, użyj <xref:System.Reflection.Emit.OpCodes.Sub>.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4340">This operation is performed on signed integers; for floating-point values, use <xref:System.Reflection.Emit.OpCodes.Sub>.</span></span>  
  
 <span data-ttu-id="68c9f-4341">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `sub.ovf.un` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4341">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4342">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4342">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Switch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Switch" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Switch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Switch As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Switch;" />
      <MemberSignature Language="F#" Value=" staticval mutable Switch : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Switch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4343">Implementuje tabelę przeskoków.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4343">Implements a jump table.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4344">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4344">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4345">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4345">Format</span></span>|<span data-ttu-id="68c9f-4346">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4346">Assembly Format</span></span>|<span data-ttu-id="68c9f-4347">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4347">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4348">45 < `unsigned int32` > < `int32` >... < `int32` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-4348">45 < `unsigned int32` > < `int32` >... < `int32` ></span></span>|<span data-ttu-id="68c9f-4349">Przełącz (`N`, `t1`, `t2`... `tN`)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4349">switch (`N`, `t1`, `t2`... `tN`)</span></span>|<span data-ttu-id="68c9f-4350">Przechodzi do jednego z `N` wartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4350">Jumps to one of `N` values.</span></span>|  
  
 <span data-ttu-id="68c9f-4351">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4351">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-4352">Wartości są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4352">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-4353">Wartość zostanie zdjęte ze stosu i wykonywania jest przekazywana do instrukcji w przesunięciu indeksowane według wartości, gdy wartość jest mniejsza niż `N`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4353">The value is popped off the stack and execution is transferred to the instruction at the offset indexed by the value, where the value is less than `N`.</span></span>  
  
 <span data-ttu-id="68c9f-4354">`switch` Instrukcji implementuje tabelę przeskoków.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4354">The `switch` instruction implements a jump table.</span></span> <span data-ttu-id="68c9f-4355">Format instrukcji jest `unsigned int32` reprezentujący liczbę wszystkich elementów docelowych `N`, a następnie `N` wartości int32, określając przejść elementów docelowych.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4355">The format of the instruction is an `unsigned int32` representing the number of targets `N`, followed by `N` int32 values specifying jump targets.</span></span> <span data-ttu-id="68c9f-4356">Te obiekty docelowe są reprezentowane jako przesunięcia (dodatnia lub ujemna) od początku instrukcji zgodnie z dokumentem `switch` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4356">These targets are represented as offsets (positive or negative) from the beginning of the instruction following this `switch` instruction.</span></span>  
  
 <span data-ttu-id="68c9f-4357">`switch` Instrukcji pobiera wartość ze stosu i porównuje go jako liczba całkowita bez znaku do `N`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4357">The `switch` instruction pops a value off the stack and compares it, as an unsigned integer, to `N`.</span></span> <span data-ttu-id="68c9f-4358">Jeśli wartość jest mniejsza niż `N`, wykonanie jest przekazywany do docelowego indeksowane według wartości, których obiekty docelowe są numerowane od 0 (na przykład, wartość 0 przyjmuje pierwszego obiektu docelowego, przyjmuje wartość 1, docelowych w drugiej i tak dalej).</span><span class="sxs-lookup"><span data-stu-id="68c9f-4358">If value is less than `N`, execution is transferred to the target indexed by value, where targets are numbered from 0 (for example, a value of 0 takes the first target, a value of 1 takes the second target, and so on).</span></span> <span data-ttu-id="68c9f-4359">Jeśli wartość jest większa niż lub równa `N`, program kontynuuje wykonywanie następnej instrukcji (poniżej).</span><span class="sxs-lookup"><span data-stu-id="68c9f-4359">If the value is greater than or equal to `N`, execution continues at the next instruction (fall through).</span></span>  
  
 <span data-ttu-id="68c9f-4360">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, kontroli można przesłać tylko do pierwszej z tych prefiksów.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4360">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="68c9f-4361">Kontrolowanie transferu do i z `try`, `catch`, `filter`, i `finally` bloki nie można wykonać przy tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4361">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span> <span data-ttu-id="68c9f-4362">(Przeniesienie takie są znacznie ograniczone i należy zamiast tego użyj instrukcji pozostaw).</span><span class="sxs-lookup"><span data-stu-id="68c9f-4362">(Such transfers are severely restricted and must use the leave instruction instead).</span></span>  
  
 <span data-ttu-id="68c9f-4363">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `switch` opcode.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4363">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `switch` opcode.</span></span> <span data-ttu-id="68c9f-4364">`Label[]` Argument jest tablicą reprezentujący 32-bitowe przesunięcia etykiet.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4364">The `Label[]` argument is an array of Labels representing 32-bit offsets.</span></span>  
  
-   <span data-ttu-id="68c9f-4365">ILGenerator.Emit (OpCode, Label[])</span><span class="sxs-lookup"><span data-stu-id="68c9f-4365">ILGenerator.Emit(OpCode, Label[])</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c9f-4366">Poniższy przykład kodu ilustruje użycie `Switch` opcode do generują tabelę przeskoków użycie tablicy <xref:System.Reflection.Emit.Label>.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4366">The following code sample illustrates the use of the `Switch` opcode to generate a jump table using an array of <xref:System.Reflection.Emit.Label>.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tailcall">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Tailcall;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Tailcall" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Tailcall" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Tailcall As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Tailcall;" />
      <MemberSignature Language="F#" Value=" staticval mutable Tailcall : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Tailcall" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4367">Wykonuje instrukcji wywołania metody mieć sufiks w taki sposób, że ramka stosu bieżącej metody zostanie usunięty przed wykonaniem instrukcji rzeczywistego wywołania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4367">Performs a postfixed method call instruction such that the current method's stack frame is removed before the actual call instruction is executed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4368">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4368">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4369">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4369">Format</span></span>|<span data-ttu-id="68c9f-4370">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4370">Assembly Format</span></span>|<span data-ttu-id="68c9f-4371">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4371">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4372">FE 14</span><span class="sxs-lookup"><span data-stu-id="68c9f-4372">FE 14</span></span>|<span data-ttu-id="68c9f-4373">tail.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4373">tail.</span></span>|<span data-ttu-id="68c9f-4374">Kolejne wywołanie kończy bieżącej metody</span><span class="sxs-lookup"><span data-stu-id="68c9f-4374">Subsequent call terminates current methods</span></span>|  
  
 <span data-ttu-id="68c9f-4375">Nie ma żadnych zachowania przejścia stack zdefiniowane w tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4375">There is no stack transition behavior defined for this instruction.</span></span>  
  
 <span data-ttu-id="68c9f-4376">`tail` Instrukcji prefiks musi bezpośrednio poprzedzać <xref:System.Reflection.Emit.OpCodes.Call>, <xref:System.Reflection.Emit.OpCodes.Calli>, lub <xref:System.Reflection.Emit.OpCodes.Callvirt> instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4376">The `tail` prefix instruction must immediately precede a <xref:System.Reflection.Emit.OpCodes.Call>, <xref:System.Reflection.Emit.OpCodes.Calli>, or <xref:System.Reflection.Emit.OpCodes.Callvirt> instruction.</span></span> <span data-ttu-id="68c9f-4377">Wskazuje, że ramka stosu bieżącej metody powinny zostać usunięte przed wykonaniem instrukcji wywołania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4377">It indicates that the current method's stack frame should be removed before the call instruction is executed.</span></span> <span data-ttu-id="68c9f-4378">Również zakłada, że wartość zwracana z wywołania następujących jest również wartość zwrócona przez obiekt bieżącej metody i wywołania w związku z tym można przekonwertować na szybkie cross-method.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4378">It also implies that the value returned from the following call is also the value returned by the current method, and the call can therefore be converted into a cross-method jump.</span></span>  
  
 <span data-ttu-id="68c9f-4379">Stos może być pusty, z wyjątkiem argumenty przesyłanych przez następujące wywołanie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4379">The stack must be empty except for the arguments being transferred by the following call.</span></span> <span data-ttu-id="68c9f-4380">Instrukcję po instrukcji wywołania musi być ret. Tak więc sekwencji tylko prawidłowy kod jest `tail. call` (lub `calli` lub `callvirt`).</span><span class="sxs-lookup"><span data-stu-id="68c9f-4380">The instruction following the call instruction must be a ret. Thus the only valid code sequence is `tail. call` (or `calli` or `callvirt`).</span></span> <span data-ttu-id="68c9f-4381">Poprawne instrukcji Microsoft Intermediate Language (MSIL) nie należy tworzyć gałęzi do `call` instrukcji, ale może tworzyć gałęzi do kolejnego <xref:System.Reflection.Emit.OpCodes.Ret>.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4381">Correct Microsoft Intermediate Language (MSIL) instructions must not branch to the `call` instruction, but they may branch to the subsequent <xref:System.Reflection.Emit.OpCodes.Ret>.</span></span>  
  
 <span data-ttu-id="68c9f-4382">Nie można odrzucić bieżące ramce, gdy formant jest przekazywany z niezaufanego kodu do zaufanego kodu, ponieważ może to zagrozić zabezpieczeń tożsamości kodu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4382">The current frame cannot be discarded when control is transferred from untrusted code to trusted code, since this would jeopardize code identity security.</span></span> <span data-ttu-id="68c9f-4383">Zabezpieczenia .NET Framework sprawdza, czy w związku z tym może spowodować, że `tail` mają być ignorowane, pozostawiając standardowego <xref:System.Reflection.Emit.OpCodes.Call> instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4383">The .NET Framework security checks can therefore cause the `tail` to be ignored, leaving a standard <xref:System.Reflection.Emit.OpCodes.Call> instruction.</span></span> <span data-ttu-id="68c9f-4384">Podobnie, w kolejności umożliwia wyjścia zsynchronizowane regionu po wywołaniu zwraca, `tail` prefiks jest ignorowana, gdy używać do kończenia działania metodę, która jest oznaczona zsynchronizowane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4384">Similarly, in order to allow the exit of a synchronized region to occur after the call returns, the `tail` prefix is ignored when used to exit a method that is marked synchronized.</span></span>  
  
 <span data-ttu-id="68c9f-4385">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `tail` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4385">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `tail` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4386">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4386">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TakesSingleByteArgument">
      <MemberSignature Language="C#" Value="public static bool TakesSingleByteArgument (System.Reflection.Emit.OpCode inst);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TakesSingleByteArgument(valuetype System.Reflection.Emit.OpCode inst) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TakesSingleByteArgument (inst As OpCode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TakesSingleByteArgument(System::Reflection::Emit::OpCode inst);" />
      <MemberSignature Language="F#" Value="static member TakesSingleByteArgument : System.Reflection.Emit.OpCode -&gt; bool" Usage="System.Reflection.Emit.OpCodes.TakesSingleByteArgument inst" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inst" Type="System.Reflection.Emit.OpCode" />
      </Parameters>
      <Docs>
        <param name="inst"><span data-ttu-id="68c9f-4387">Wystąpienie obiektu Opcode.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4387">An instance of an Opcode object.</span></span></param>
        <summary><span data-ttu-id="68c9f-4388">Zwraca wartość PRAWDA lub FAŁSZ, jeśli podany kod operacji przyjmuje argument jednobajtowych.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4388">Returns true or false if the supplied opcode takes a single byte argument.</span></span></summary>
        <returns><see langword="true" /> <span data-ttu-id="68c9f-4389">lub <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4389">or <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4390">Ta metoda umożliwia znajdowanie rozkazów MSIL, które są "krótkiej formy", do użytku w zoptymalizowanym kodzie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4390">This method can be used to find which MSIL opcodes are "short form", for use in optimized code.</span></span>  
  
 `TakesSingleByteArgument` <span data-ttu-id="68c9f-4391">Zwraca `true` Jeśli <xref:System.Reflection.Emit.OpCode> wystąpienia przyjmuje argument jednobajtowych w następujących przypadkach:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4391">returns `true` if the <xref:System.Reflection.Emit.OpCode> instance takes a single byte argument in the following cases:</span></span>  
  
-   <span data-ttu-id="68c9f-4392">Opcode wykonuje instrukcję gałęzi do adresu o rozmiarze bajtów (na przykład <xref:System.Reflection.Emit.OpCodes.Br_S> i <xref:System.Reflection.Emit.OpCodes.Bgt_S>).</span><span class="sxs-lookup"><span data-stu-id="68c9f-4392">The opcode performs a branch instruction to a byte-sized address (for example, <xref:System.Reflection.Emit.OpCodes.Br_S> and <xref:System.Reflection.Emit.OpCodes.Bgt_S>).</span></span>  
  
-   <span data-ttu-id="68c9f-4393">Opcode wypycha wartość bajtową na stosie (na przykład <xref:System.Reflection.Emit.OpCodes.Ldc_I4_S>).</span><span class="sxs-lookup"><span data-stu-id="68c9f-4393">The opcode pushes a byte value onto the stack (for example, <xref:System.Reflection.Emit.OpCodes.Ldc_I4_S>).</span></span>  
  
-   <span data-ttu-id="68c9f-4394">Opcode odwołuje się do zmiennej lub argumentu za pośrednictwem wielkości bajtów "krótkiej formy" (na przykład <xref:System.Reflection.Emit.OpCodes.Ldloc_S> i <xref:System.Reflection.Emit.OpCodes.Stloc_S>).</span><span class="sxs-lookup"><span data-stu-id="68c9f-4394">The opcode references a variable or argument via the byte-sized "short form" (for example, <xref:System.Reflection.Emit.OpCodes.Ldloc_S> and <xref:System.Reflection.Emit.OpCodes.Stloc_S>).</span></span>  
  
 <span data-ttu-id="68c9f-4395">W przeciwnym razie zwraca `false`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4395">Otherwise, it returns `false`.</span></span>  
  
 <span data-ttu-id="68c9f-4396">W poniższym przykładzie pokazano użycie `TakesSingleByteArgument` przez odzwierciedlenie na `OpCodes` klasy i testowanie w celu sprawdzenia czy każdy `OpCode` pola przyjmuje argument jednobajtowych.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4396">The example below demonstrates the use of `TakesSingleByteArgument` by reflecting on to the `OpCodes` class and testing to see whether each `OpCode` field takes a single-byte argument.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Throw;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Throw" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Throw" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Throw As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Throw;" />
      <MemberSignature Language="F#" Value=" staticval mutable Throw : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Throw" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4397">Obecnie zgłasza obiekt wyjątku na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4397">Throws the exception object currently on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4398">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4398">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4399">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4399">Format</span></span>|<span data-ttu-id="68c9f-4400">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4400">Assembly Format</span></span>|<span data-ttu-id="68c9f-4401">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4401">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4402">7A</span><span class="sxs-lookup"><span data-stu-id="68c9f-4402">7A</span></span>|<span data-ttu-id="68c9f-4403">throw</span><span class="sxs-lookup"><span data-stu-id="68c9f-4403">throw</span></span>|<span data-ttu-id="68c9f-4404">Zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4404">Throws an exception.</span></span>|  
  
 <span data-ttu-id="68c9f-4405">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4405">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-4406">Odwołanie do obiektu (na wyjątek) są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4406">An object reference (to an exception) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-4407">Odwołanie do obiektu zostanie zdjęte ze stosu i wyjątku.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4407">The object reference is popped from the stack and the exception thrown.</span></span>  
  
 <span data-ttu-id="68c9f-4408">`throw` Instrukcji wyrzuca obiekt wyjątku (typ `O`) obecnie na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4408">The `throw` instruction throws the exception object (type `O`) currently on the stack.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-4409">jest generowany, jeśli odwołanie do obiektu jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4409">is thrown if the object reference is a null reference.</span></span>  
  
 <span data-ttu-id="68c9f-4410">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `throw` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4410">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `throw` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4411">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4411">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unaligned">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unaligned;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unaligned" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unaligned" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unaligned As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unaligned;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unaligned : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unaligned" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4412">Wskazuje adres obecnie na jego podstawie stosu oceny nie może być wyrównane do naturalnym rozmiaru natychmiast po <see langword="ldind" />, <see langword="stind" />, <see langword="ldfld" />, <see langword="stfld" />, <see langword="ldobj" />, <see langword="stobj" />, <see langword="initblk" />, lub <see langword="cpblk" /> instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4412">Indicates that an address currently atop the evaluation stack might not be aligned to the natural size of the immediately following <see langword="ldind" />, <see langword="stind" />, <see langword="ldfld" />, <see langword="stfld" />, <see langword="ldobj" />, <see langword="stobj" />, <see langword="initblk" />, or <see langword="cpblk" /> instruction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4413">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4413">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4414">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4414">Format</span></span>|<span data-ttu-id="68c9f-4415">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4415">Assembly Format</span></span>|<span data-ttu-id="68c9f-4416">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4416">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4417">FE 12 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-4417">FE 12 < `unsigned int8` ></span></span>|<span data-ttu-id="68c9f-4418">niewyrównanych.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4418">unaligned.</span></span> `alignment`|<span data-ttu-id="68c9f-4419">Wskazuje, że kolejne wskaźnik instrukcji może być niewyrównany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4419">Indicates that the subsequent pointer instruction may be unaligned.</span></span>|  
  
 <span data-ttu-id="68c9f-4420">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4420">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-4421">Adres są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4421">An address is pushed onto the stack.</span></span>  
  
 `Unaligned` <span data-ttu-id="68c9f-4422">Określa, że adres (niezarządzany wskaźnik `native int`) na stosie może nie wyrównany do naturalnym rozmiaru natychmiast po `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, lub `cpblk` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4422">specifies that the address (an unmanaged pointer, `native int`) on the stack might not be aligned to the natural size of the immediately following `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="68c9f-4423">Oznacza to aby uzyskać <xref:System.Reflection.Emit.OpCodes.Ldind_I4> wyrównanie adresu nie może być do granicy 4-bajtowych instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4423">That is, for a <xref:System.Reflection.Emit.OpCodes.Ldind_I4> instruction the alignment of the address may not be to a 4-byte boundary.</span></span> <span data-ttu-id="68c9f-4424">Aby uzyskać `initblk` i `cpblk` wyrównanie domyślne to architektura zależne (4-bajtowych na 32-bitowe procesory, 8-bajtowych na 64-bitowych procesorach).</span><span class="sxs-lookup"><span data-stu-id="68c9f-4424">For `initblk` and `cpblk` the default alignment is architecture dependent (4-byte on 32-bit CPUs, 8-byte on 64-bit CPUs).</span></span> <span data-ttu-id="68c9f-4425">Należy użyć generatorów kodu, które o rozmiarze 32-bitowe słowo nie ograniczają dane wyjściowe `unaligned` Jeśli wyrównanie nie jest znany w czasie kompilacji jako 8-bajtowych.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4425">Code generators that do not restrict their output to a 32-bit word size must use `unaligned` if the alignment is not known at compile time to be 8-byte.</span></span>  
  
 <span data-ttu-id="68c9f-4426">Wartość wyrównania musi być 1, 2 lub 4 i oznacza, że wygenerowany kod powinien zakładają, że adres jest bajcie znaków dwubajtowych, lub cztery bajtami, odpowiednio.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4426">The value of alignment must be 1, 2, or 4 and means that the generated code should assume that the address is byte, double-byte, or quad-byte aligned, respectively.</span></span> <span data-ttu-id="68c9f-4427">Należy pamiętać, że przejściowy wskaźników (typ `*`) zawsze są wyrównane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4427">Note that transient pointers (type `*`) are always aligned.</span></span>  
  
 <span data-ttu-id="68c9f-4428">Podczas gdy wyrównanie `cpblk` instrukcji logicznie wymaga dwóch liczb (jeden dla źródła) i jeden dla miejsca docelowego, istnieje bez zauważalnego wpływu na wydajność, jeśli tylko niższy numer jest określony.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4428">While the alignment for a `cpblk` instruction would logically require two numbers (one for the source and one for the destination), there is no noticeable impact on performance if only the lower number is specified.</span></span>  
  
 <span data-ttu-id="68c9f-4429">`unaligned` i `volatile` prefiksy można łączyć w obu kolejności.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4429">The `unaligned` and `volatile` prefixes can be combined in either order.</span></span> <span data-ttu-id="68c9f-4430">Musi bezpośrednio poprzedzać `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, lub `cpblk` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4430">They must immediately precede a `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="68c9f-4431">Tylko <xref:System.Reflection.Emit.OpCodes.Volatile> prefiks jest dozwolone w przypadku <xref:System.Reflection.Emit.OpCodes.Ldsfld> i <xref:System.Reflection.Emit.OpCodes.Stsfld> instrukcje.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4431">Only the <xref:System.Reflection.Emit.OpCodes.Volatile> prefix is allowed for the <xref:System.Reflection.Emit.OpCodes.Ldsfld> and <xref:System.Reflection.Emit.OpCodes.Stsfld> instructions.</span></span>  
  
 <span data-ttu-id="68c9f-4432">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenia metody można użyć `unaligned` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4432">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `unaligned` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4433">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4433">ILGenerator.Emit(OpCode, Label)</span></span>  
  
-   <span data-ttu-id="68c9f-4434">ILGenerator.Emit (Opcode, bajtów)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4434">ILGenerator.Emit(Opcode, Byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unbox;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unbox" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unbox" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unbox As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unbox;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unbox : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unbox" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4435">Konwertuje spakowany reprezentacja typu wartości do postaci rozpakowany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4435">Converts the boxed representation of a value type to its unboxed form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4436">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4436">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4437">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4437">Format</span></span>|<span data-ttu-id="68c9f-4438">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4438">Assembly Format</span></span>|<span data-ttu-id="68c9f-4439">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4439">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4440">79 < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-4440">79 < `T` ></span></span>|<span data-ttu-id="68c9f-4441">Rozpakowywanie</span><span class="sxs-lookup"><span data-stu-id="68c9f-4441">unbox</span></span> `valType`|<span data-ttu-id="68c9f-4442">Wyodrębnia dane typu wartości z `obj`, jego opakowany reprezentacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4442">Extracts the value type data from `obj`, its boxed representation.</span></span>|  
  
 <span data-ttu-id="68c9f-4443">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4443">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-4444">Odwołanie do obiektu są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4444">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-4445">Odwołanie do obiektu jest zdjęte ze stosu ze stosu i rozpakowany na wskaźnik typu wartości.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4445">The object reference is popped from the stack and unboxed to a value type pointer.</span></span>  
  
3.  <span data-ttu-id="68c9f-4446">Wartość wskaźnika typu są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4446">The value type pointer is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-4447">Typ wartości ma dwa oddzielne reprezentacje w ramach Common Language Infrastructure (CLI):</span><span class="sxs-lookup"><span data-stu-id="68c9f-4447">A value type has two separate representations within the Common Language Infrastructure (CLI):</span></span>  
  
-   <span data-ttu-id="68c9f-4448">Używany, gdy typ wartości jest osadzony w innym obiekcie formularz "raw".</span><span class="sxs-lookup"><span data-stu-id="68c9f-4448">A 'raw' form used when a value type is embedded within another object.</span></span>  
  
-   <span data-ttu-id="68c9f-4449">Formularz "spakowane", gdzie dane w typ wartości opakowany jest (opakowany) obiektu, dzięki czemu może istnieć jako niezależne jednostki.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4449">A 'boxed' form, where the data in the value type is wrapped (boxed) into an object so it can exist as an independent entity.</span></span>  
  
 <span data-ttu-id="68c9f-4450">`unbox` Konwertuje odwołanie do obiektu (typ `O`), opakowany reprezentacja typu wartości do wskaźnika typu wartości (wskaźnik zarządzanego typu `&`), jego rozpakowany formularza.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4450">The `unbox` instruction converts the object reference (type `O`), the boxed representation of a value type, to a value type pointer (a managed pointer, type `&`), its unboxed form.</span></span> <span data-ttu-id="68c9f-4451">Typ podanej wartości (`valType`) jest token metadanych, wskazujący typ typu wartości zawartych w obiektu w ramce.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4451">The supplied value type (`valType`) is a metadata token indicating the type of value type contained within the boxed object.</span></span>  
  
 <span data-ttu-id="68c9f-4452">W odróżnieniu od <xref:System.Reflection.Emit.OpCodes.Box>, co jest wymagane do utworzenia kopii typu wartości do użycia w obiekcie, `unbox` nie jest wymagane do skopiowania typ wartości z obiektu.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4452">Unlike <xref:System.Reflection.Emit.OpCodes.Box>, which is required to make a copy of a value type for use in the object, `unbox` is not required to copy the value type from the object.</span></span> <span data-ttu-id="68c9f-4453">Zwykle po prostu oblicza adres typu wartości, który jest już obecny wewnątrz obiektu w ramce.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4453">Typically it simply computes the address of the value type that is already present inside of the boxed object.</span></span>  
  
 <xref:System.InvalidCastException> <span data-ttu-id="68c9f-4454">jest generowany, jeśli obiekt nie jest spakowany jako `valType`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4454">is thrown if the object is not boxed as `valType`.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-4455">jest generowany, jeśli odwołanie do obiektu jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4455">is thrown if the object reference is a null reference.</span></span>  
  
 <xref:System.TypeLoadException> <span data-ttu-id="68c9f-4456">jest generowany, jeśli wartość typu `valType` nie można odnaleźć.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4456">is thrown if the value type `valType` cannot be found.</span></span> <span data-ttu-id="68c9f-4457">Jest to zazwyczaj wykrywany, po instrukcji Microsoft Intermediate Language (MSIL) są konwertowane do kodu natywnego, a nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4457">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="68c9f-4458">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `unbox` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4458">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `unbox` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4459">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4459">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox_Any">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unbox_Any;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unbox_Any" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unbox_Any" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unbox_Any As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unbox_Any;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unbox_Any : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unbox_Any" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4460">Konwertuje spakowany reprezentujący typ określony w instrukcji do postaci rozpakowany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4460">Converts the boxed representation of a type specified in the instruction to its unboxed form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4461">W poniższej tabeli wymieniono szesnastkowym i format programu Microsoft intermediate language (MSIL) zestawu, wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4461">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4462">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4462">Format</span></span>|<span data-ttu-id="68c9f-4463">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4463">Assembly Format</span></span>|<span data-ttu-id="68c9f-4464">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4464">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4465">A5 < `T` ></span><span class="sxs-lookup"><span data-stu-id="68c9f-4465">A5 < `T` ></span></span>|<span data-ttu-id="68c9f-4466">unbox.any</span><span class="sxs-lookup"><span data-stu-id="68c9f-4466">unbox.any</span></span> `typeTok`|<span data-ttu-id="68c9f-4467">Wyodrębnij dane z `obj`, jego opakowany reprezentacji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4467">Extract the data from `obj`, its boxed representation.</span></span>|  
  
 <span data-ttu-id="68c9f-4468">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4468">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-4469">Odwołanie do obiektu `obj` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4469">An object reference `obj` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="68c9f-4470">Odwołanie do obiektu jest zdjęte ze stosu ze stosu i rozpakowany typ określony w instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4470">The object reference is popped from the stack and unboxed to the type specified in the instruction.</span></span>  
  
3.  <span data-ttu-id="68c9f-4471">Wynikowy typ odwołanie lub wartość obiektu są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4471">The resulting object reference or value type is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-4472">Po zastosowaniu do formy opakowanej typu wartości `unbox.any` instrukcji wyodrębnia wartości zawartych w `obj` (typu `O`) i dlatego jest odpowiednikiem `unbox` następuje `ldobj`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4472">When applied to the boxed form of a value type, the `unbox.any` instruction extracts the value contained within `obj` (of type `O`), and is therefore equivalent to `unbox` followed by `ldobj`.</span></span>  
  
 <span data-ttu-id="68c9f-4473">W przypadku zastosowania do typu odwołania `unbox.any` instrukcji ma taki sam skutek jak `castclass` `typeTok`.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4473">When applied to a reference type, the `unbox.any` instruction has the same effect as `castclass` `typeTok`.</span></span>  
  
 <span data-ttu-id="68c9f-4474">Jeśli argument `typeTok` jest parametr typu ogólnego, a następnie zachowanie środowiska uruchomieniowego jest określana przez typ, który jest określony dla tego parametru typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4474">If the operand `typeTok` is a generic type parameter, then the runtime behavior is determined by the type that is specified for that generic type parameter.</span></span>  
  
 <xref:System.InvalidCastException> <span data-ttu-id="68c9f-4475">jest generowany, jeśli `obj` nie jest typ spakowany.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4475">is thrown if `obj` is not a boxed type.</span></span>  
  
 <xref:System.NullReferenceException> <span data-ttu-id="68c9f-4476">jest generowany, jeśli `obj` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4476">is thrown if `obj` is a null reference.</span></span>  
  
 <span data-ttu-id="68c9f-4477">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `unbox.any` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4477">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `unbox.any` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4478">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4478">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Volatile">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Volatile;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Volatile" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Volatile" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Volatile As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Volatile;" />
      <MemberSignature Language="F#" Value=" staticval mutable Volatile : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Volatile" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4479">Określa, że adres obecnie na jego podstawie stosu oceny może być nietrwałe i wyniki odczytu nie można buforować lokalizacji lub wielu sklepach do tej lokalizacji nie można pominąć.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4479">Specifies that an address currently atop the evaluation stack might be volatile, and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4480">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4480">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4481">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4481">Format</span></span>|<span data-ttu-id="68c9f-4482">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4482">Assembly Format</span></span>|<span data-ttu-id="68c9f-4483">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4483">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4484">FE 13</span><span class="sxs-lookup"><span data-stu-id="68c9f-4484">FE 13</span></span>|<span data-ttu-id="68c9f-4485">volatile.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4485">volatile.</span></span>|<span data-ttu-id="68c9f-4486">Wskazuje, czy odwołanie kolejnych wskaźnika jest nietrwały.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4486">Indicates that the subsequent pointer reference is volatile.</span></span>|  
  
 <span data-ttu-id="68c9f-4487">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4487">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="68c9f-4488">Adres są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4488">An address is pushed onto the stack.</span></span>  
  
 `volatile`<span data-ttu-id="68c9f-4489">.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4489">.</span></span> <span data-ttu-id="68c9f-4490">Określa, że adres jest adres volatile (czyli go mogą być przywoływane zewnętrznie w bieżącym wątku wykonywania) oraz wyniki odczytu nie można buforować lokalizacji lub wielu sklepach do tej lokalizacji nie można pominąć.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4490">specifies that the address is a volatile address (that is, it can be referenced externally to the current thread of execution) and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</span></span> <span data-ttu-id="68c9f-4491">Oznaczanie dostępu jako `volatile` tylko, które dostęp za pomocą; ma wpływ na inne uzyskuje dostęp do tej samej lokalizacji, które muszą być oznaczone oddzielnie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4491">Marking an access as `volatile` affects only that single access; other accesses to the same location must be marked separately.</span></span> <span data-ttu-id="68c9f-4492">Dostęp do lokalizacji volatile nie trzeba przeprowadzać niepodzielne.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4492">Access to volatile locations need not be performed atomically.</span></span>  
  
 <span data-ttu-id="68c9f-4493"><xref:System.Reflection.Emit.OpCodes.Unaligned> i `volatile` prefiksy można łączyć w obu kolejności.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4493">The <xref:System.Reflection.Emit.OpCodes.Unaligned> and `volatile` prefixes can be combined in either order.</span></span> <span data-ttu-id="68c9f-4494">Musi bezpośrednio poprzedzać `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, lub `cpblk` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4494">They must immediately precede a `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="68c9f-4495">Tylko `volatile` prefiks jest dozwolone w przypadku <xref:System.Reflection.Emit.OpCodes.Ldsfld> i <xref:System.Reflection.Emit.OpCodes.Stsfld> instrukcje.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4495">Only the `volatile` prefix is allowed for the <xref:System.Reflection.Emit.OpCodes.Ldsfld> and <xref:System.Reflection.Emit.OpCodes.Stsfld> instructions.</span></span>  
  
 <span data-ttu-id="68c9f-4496">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `volatile` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4496">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `volatile` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4497">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4497">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Xor;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Xor" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Xor" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Xor As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Xor;" />
      <MemberSignature Language="F#" Value=" staticval mutable Xor : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Xor" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c9f-4498">Oblicza bitowe XOR najważniejsze dwie wartości na stosie oceny, wypychanie wynik na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4498">Computes the bitwise XOR of the top two values on the evaluation stack, pushing the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c9f-4499">W poniższej tabeli wymieniono szesnastkowym i format zestawu Microsoft Intermediate Language (MSIL), wraz z podsumowaniem krótkie odniesienie instrukcji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4499">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="68c9f-4500">Format</span><span class="sxs-lookup"><span data-stu-id="68c9f-4500">Format</span></span>|<span data-ttu-id="68c9f-4501">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="68c9f-4501">Assembly Format</span></span>|<span data-ttu-id="68c9f-4502">Opis</span><span class="sxs-lookup"><span data-stu-id="68c9f-4502">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="68c9f-4503">61</span><span class="sxs-lookup"><span data-stu-id="68c9f-4503">61</span></span>|<span data-ttu-id="68c9f-4504">xor</span><span class="sxs-lookup"><span data-stu-id="68c9f-4504">xor</span></span>|<span data-ttu-id="68c9f-4505">Bitowe XOR dwóch wartości całkowitych oblicza i zwraca liczbę całkowitą.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4505">Computes the bitwise XOR of two integer values and returns an integer.</span></span>|  
  
 <span data-ttu-id="68c9f-4506">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4506">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  `value1` <span data-ttu-id="68c9f-4507">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4507">is pushed onto the stack.</span></span>  
  
2.  `value2` <span data-ttu-id="68c9f-4508">są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4508">is pushed onto the stack.</span></span>  
  
3.  `value2` <span data-ttu-id="68c9f-4509">i `value1` są zdjęte ze stosu ze stosu i ich bitowe XOR obliczane.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4509">and `value1` are popped from the stack and their bitwise XOR computed.</span></span>  
  
4.  <span data-ttu-id="68c9f-4510">Bitowe XOR dla `value2` i `value1` są wypychane na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4510">The bitwise XOR of `value2` and `value1` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="68c9f-4511">`xor` Instrukcja oblicza iloczynu bitowego XOR TOP dwie wartości na stosie i pozostawia wynik na stosie.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4511">The `xor` instruction computes the bitwise XOR of the top two values on the stack and leaves the result on the stack.</span></span>  
  
 `Xor` <span data-ttu-id="68c9f-4512">jest operacją specyficzne dla liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="68c9f-4512">is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="68c9f-4513">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> można użyć przeładowania metody `xor` kod operacji:</span><span class="sxs-lookup"><span data-stu-id="68c9f-4513">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `xor` opcode:</span></span>  
  
-   <span data-ttu-id="68c9f-4514">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="68c9f-4514">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
