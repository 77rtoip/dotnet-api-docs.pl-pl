<Type Name="OpCodes" FullName="System.Reflection.Emit.OpCodes">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="922fb9597fe60f2fe290329ee8a5f430c0343e13" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36645513" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class OpCodes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OpCodes extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.OpCodes" />
  <TypeSignature Language="VB.NET" Value="Public Class OpCodes" />
  <TypeSignature Language="C++ CLI" Value="public ref class OpCodes" />
  <TypeSignature Language="F#" Value="type OpCodes = class" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="38ac7-101">Udostępnia pole reprezentacje instrukcji Microsoft języka pośredniego (MSIL) emisji przez <see cref="T:System.Reflection.Emit.ILGenerator" /> elementy członkowskie klasy (takie jak <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />).</span>
      <span class="sxs-lookup">
        <span data-stu-id="38ac7-101">Provides field representations of the Microsoft Intermediate Language (MSIL) instructions for emission by the <see cref="T:System.Reflection.Emit.ILGenerator" /> class members (such as <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />).</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-102">Aby uzyskać szczegółowy opis używa elementu członkowskiego w dokumentacji infrastruktury języka wspólnego (CLI), szczególnie "III: CIL instrukcji zestawu partycji" i "Partycji II: metadane definicji i semantyki".</span><span class="sxs-lookup"><span data-stu-id="38ac7-102">For a detailed description of the member opcodes, see the Common Language Infrastructure (CLI) documentation, especially "Partition III: CIL Instruction Set" and "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="38ac7-103">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# i wspólne normy infrastruktury języka](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie sieci Web międzynarodowej Ecma.</span><span class="sxs-lookup"><span data-stu-id="38ac7-103">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38ac7-104">W poniższym przykładzie pokazano konstrukcji przy użyciu metody dynamicznej <xref:System.Reflection.Emit.ILGenerator> można wyemitować `OpCodes` do <xref:System.Reflection.Emit.MethodBuilder>.</span><span class="sxs-lookup"><span data-stu-id="38ac7-104">The following example demonstrates the construction of a dynamic method using <xref:System.Reflection.Emit.ILGenerator> to emit `OpCodes` into a <xref:System.Reflection.Emit.MethodBuilder>.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-105">Dodaje dwie wartości, a wynik na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-105">Adds two values and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-106">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-106">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-107">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-107">Format</span></span>|<span data-ttu-id="38ac7-108">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-108">Assembly Format</span></span>|<span data-ttu-id="38ac7-109">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-109">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-110">58</span><span class="sxs-lookup"><span data-stu-id="38ac7-110">58</span></span>|<span data-ttu-id="38ac7-111">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-111">add</span></span>|<span data-ttu-id="38ac7-112">Dodaje dwie wartości liczbowe, zwracając wartość liczbową.</span><span class="sxs-lookup"><span data-stu-id="38ac7-112">Adds two numeric values, returning a new numeric value.</span></span>|  
  
 <span data-ttu-id="38ac7-113">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-113">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-114">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-114">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-115">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-115">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-116">`value2` i `value1` są zdjęte ze stosu ze stosu; `value1` jest dodawany do `value2`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-116">`value2` and `value1` are popped from the stack; `value1` is added to `value2`.</span></span>  
  
4.  <span data-ttu-id="38ac7-117">Wynik spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-117">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-118">Nie wykryto przepełnienia dla operacji liczba całkowita (przepełnienie prawidłowego obsługi, zobacz <xref:System.Reflection.Emit.OpCodes.Add_Ovf>).</span><span class="sxs-lookup"><span data-stu-id="38ac7-118">Overflow is not detected for integer operations (for proper overflow handling, see <xref:System.Reflection.Emit.OpCodes.Add_Ovf>).</span></span>  
  
 <span data-ttu-id="38ac7-119">Liczba całkowita dodanie zawijany, a nie zmienia nasycenie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-119">Integer addition wraps, rather than saturates.</span></span> <span data-ttu-id="38ac7-120">Na przykład przy założeniu, 8-bitowych liczb całkowitych gdzie `value1` wynosi 255 i `value2` jest ustawiona na 1, opakowana wynik jest 0, a nie do 256.</span><span class="sxs-lookup"><span data-stu-id="38ac7-120">For example, assuming 8-bit integers where `value1` is set to 255 and `value2` is set to 1, the wrapped result is 0 rather than 256.</span></span>  
  
 <span data-ttu-id="38ac7-121">Przepełnienie zmiennoprzecinkowej zwraca `+inf` (`PositiveInfinity`) lub `-inf` (`NegativeInfinity`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-121">Floating-point overflow returns `+inf` (`PositiveInfinity`) or `-inf` (`NegativeInfinity`).</span></span>  
  
 <span data-ttu-id="38ac7-122">Operand dopuszczalne typy i ich odpowiedni typ danych wyników są wymienione w poniższej tabeli.</span><span class="sxs-lookup"><span data-stu-id="38ac7-122">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="38ac7-123">Jeśli brak wpisu dla kombinacji określonego typu (na przykład `int32` i `float`; `int32` i `int64`), jest nieprawidłowy Microsoft pośredniego Language (MSIL) i generuje błąd.</span><span class="sxs-lookup"><span data-stu-id="38ac7-123">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) and generates an error.</span></span>  
  
|<span data-ttu-id="38ac7-124">argument operacji</span><span class="sxs-lookup"><span data-stu-id="38ac7-124">operand</span></span>|<span data-ttu-id="38ac7-125">Typ wartość1</span><span class="sxs-lookup"><span data-stu-id="38ac7-125">value1 type</span></span>|<span data-ttu-id="38ac7-126">Typ wartość2</span><span class="sxs-lookup"><span data-stu-id="38ac7-126">value2 type</span></span>|<span data-ttu-id="38ac7-127">Typ wyniku</span><span class="sxs-lookup"><span data-stu-id="38ac7-127">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="38ac7-128">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-128">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="38ac7-129">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-129">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="38ac7-130">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-130">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="38ac7-131">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-131">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="38ac7-132">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-132">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="38ac7-133">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-133">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="38ac7-134">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-134">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="38ac7-135">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-135">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="38ac7-136">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-136">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="38ac7-137">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-137">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="38ac7-138">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-138">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="38ac7-139">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-139">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="38ac7-140">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-140">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="38ac7-141">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-141">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="38ac7-142">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `add` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-142">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-143">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-143">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-144">Dodaje dwie liczb całkowitych, przeprowadza sprawdzanie przepełnienia, a wynik na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-144">Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-145">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-145">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-146">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-146">Format</span></span>|<span data-ttu-id="38ac7-147">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-147">Assembly Format</span></span>|<span data-ttu-id="38ac7-148">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-148">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-149">D6</span><span class="sxs-lookup"><span data-stu-id="38ac7-149">D6</span></span>|<span data-ttu-id="38ac7-150">add.ovf</span><span class="sxs-lookup"><span data-stu-id="38ac7-150">add.ovf</span></span>|<span data-ttu-id="38ac7-151">Dodaje dwie wartości liczb całkowitych ze sprawdzaniem przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-151">Adds two signed integer values with an overflow check.</span></span>|  
  
 <span data-ttu-id="38ac7-152">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-152">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-153">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-153">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-154">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-154">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-155">`value2` i `value1` są zdjęte ze stosu ze stosu; `value1` jest dodawany do `value2` z sprawdzaj przepełnienie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-155">`value2` and `value1` are popped from the stack; `value1` is added to `value2` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="38ac7-156">Wynik spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-156">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-157"><xref:System.OverflowException> jest generowany, jeśli wynik nie jest uwzględniona w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-157"><xref:System.OverflowException> is thrown if the result is not represented in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-158">Można wykonać tej operacji na liczb całkowitych ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-158">You can perform this operation on signed integers.</span></span> <span data-ttu-id="38ac7-159">Użyj wartości zmiennoprzecinkowych <xref:System.Reflection.Emit.OpCodes.Add>.</span><span class="sxs-lookup"><span data-stu-id="38ac7-159">For floating-point values, use <xref:System.Reflection.Emit.OpCodes.Add>.</span></span>  
  
 <span data-ttu-id="38ac7-160">Operand dopuszczalne typy i ich odpowiedni typ danych wyników są wymienione w poniższej tabeli.</span><span class="sxs-lookup"><span data-stu-id="38ac7-160">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="38ac7-161">Jeśli brak wpisu dla kombinacji określonego typu (na przykład `int32` i `float`; `int32` i `int64`), jest nieprawidłowa instrukcja Microsoft języka pośredniego (MSIL) i generuje błąd.</span><span class="sxs-lookup"><span data-stu-id="38ac7-161">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) instruction and generates an error.</span></span>  
  
|<span data-ttu-id="38ac7-162">argument operacji</span><span class="sxs-lookup"><span data-stu-id="38ac7-162">operand</span></span>|<span data-ttu-id="38ac7-163">Typ wartość1</span><span class="sxs-lookup"><span data-stu-id="38ac7-163">value1 type</span></span>|<span data-ttu-id="38ac7-164">Typ wartość2</span><span class="sxs-lookup"><span data-stu-id="38ac7-164">value2 type</span></span>|<span data-ttu-id="38ac7-165">Typ wyniku</span><span class="sxs-lookup"><span data-stu-id="38ac7-165">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="38ac7-166">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-166">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="38ac7-167">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-167">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="38ac7-168">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-168">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="38ac7-169">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-169">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="38ac7-170">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-170">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="38ac7-171">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-171">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="38ac7-172">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-172">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="38ac7-173">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-173">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="38ac7-174">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-174">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="38ac7-175">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-175">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="38ac7-176">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-176">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="38ac7-177">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-177">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="38ac7-178">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-178">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="38ac7-179">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-179">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="38ac7-180">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `add.ovf` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-180">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-181">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-181">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-182">Dodaje dwie wartości całkowitej bez znaku, przeprowadza sprawdzanie przepełnienia, a wynik na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-182">Adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-183">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-183">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-184">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-184">Format</span></span>|<span data-ttu-id="38ac7-185">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-185">Assembly Format</span></span>|<span data-ttu-id="38ac7-186">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-186">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-187">D7</span><span class="sxs-lookup"><span data-stu-id="38ac7-187">D7</span></span>|<span data-ttu-id="38ac7-188">add.ovf.un</span><span class="sxs-lookup"><span data-stu-id="38ac7-188">add.ovf.un</span></span>|<span data-ttu-id="38ac7-189">Dodaje dwie wartości całkowitej bez znaku z kontroli przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-189">Adds two unsigned integer values with an overflow check.</span></span>|  
  
 <span data-ttu-id="38ac7-190">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-190">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-191">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-191">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-192">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-192">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-193">`value2` i `value1` są zdjęte ze stosu ze stosu; `value1` jest dodawany do `value2` z sprawdzaj przepełnienie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-193">`value2` and `value1` are popped from the stack; `value1` is added to `value2` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="38ac7-194">Wynik spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-194">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-195"><xref:System.OverflowException> jest generowany, jeśli wynik nie jest uwzględniona w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-195"><xref:System.OverflowException> is thrown if the result is not represented in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-196">Można wykonać tej operacji na liczb całkowitych ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-196">You can perform this operation on signed integers.</span></span> <span data-ttu-id="38ac7-197">Użyj wartości zmiennoprzecinkowych <xref:System.Reflection.Emit.OpCodes.Add>.</span><span class="sxs-lookup"><span data-stu-id="38ac7-197">For floating-point values, use <xref:System.Reflection.Emit.OpCodes.Add>.</span></span>  
  
 <span data-ttu-id="38ac7-198">Operand dopuszczalne typy i ich odpowiedni typ danych wyników są wymienione w poniższej tabeli.</span><span class="sxs-lookup"><span data-stu-id="38ac7-198">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="38ac7-199">Jeśli brak wpisu dla kombinacji określonego typu (na przykład `int32` i `float`; `int32` i `int64`), jest nieprawidłowa instrukcja Microsoft języka pośredniego (MSIL) i generuje błąd.</span><span class="sxs-lookup"><span data-stu-id="38ac7-199">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) instruction and generates an error.</span></span>  
  
|<span data-ttu-id="38ac7-200">argument operacji</span><span class="sxs-lookup"><span data-stu-id="38ac7-200">operand</span></span>|<span data-ttu-id="38ac7-201">Typ wartość1</span><span class="sxs-lookup"><span data-stu-id="38ac7-201">value1 type</span></span>|<span data-ttu-id="38ac7-202">Typ wartość2</span><span class="sxs-lookup"><span data-stu-id="38ac7-202">value2 type</span></span>|<span data-ttu-id="38ac7-203">Typ wyniku</span><span class="sxs-lookup"><span data-stu-id="38ac7-203">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="38ac7-204">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-204">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="38ac7-205">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-205">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="38ac7-206">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-206">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="38ac7-207">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-207">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="38ac7-208">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-208">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="38ac7-209">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-209">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="38ac7-210">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-210">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="38ac7-211">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-211">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="38ac7-212">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-212">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="38ac7-213">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-213">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="38ac7-214">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-214">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="38ac7-215">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-215">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="38ac7-216">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-216">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="38ac7-217">add</span><span class="sxs-lookup"><span data-stu-id="38ac7-217">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="38ac7-218">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `add.ovf.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-218">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-219">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-219">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode And;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode And" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.And" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly And As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode And;" />
      <MemberSignature Language="F#" Value=" staticval mutable And : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.And" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-220">Oblicza iloczynu bitowego AND z dwóch wartości i umieszcza wynik na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-220">Computes the bitwise AND of two values and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-221">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-221">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-222">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-222">Format</span></span>|<span data-ttu-id="38ac7-223">Instrukcja</span><span class="sxs-lookup"><span data-stu-id="38ac7-223">Instruction</span></span>|<span data-ttu-id="38ac7-224">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-224">Description</span></span>|  
|------------|-----------------|-----------------|  
|<span data-ttu-id="38ac7-225">5F</span><span class="sxs-lookup"><span data-stu-id="38ac7-225">5F</span></span>|<span data-ttu-id="38ac7-226">and</span><span class="sxs-lookup"><span data-stu-id="38ac7-226">and</span></span>|<span data-ttu-id="38ac7-227">Określa iloczynu bitowego AND z dwóch wartości całkowitych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-227">Determines the bitwise AND of two integer values.</span></span>|  
  
 <span data-ttu-id="38ac7-228">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-228">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-229">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-229">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-230">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-230">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-231">`value1` i `value2` są zdjęte ze stosu ze stosu; jest obliczana iloczynu bitowego AND dwóch wartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-231">`value1` and `value2` are popped from the stack; the bitwise AND of the two values is computed.</span></span>  
  
4.  <span data-ttu-id="38ac7-232">Wynik spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-232">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-233">`and` Instrukcji oblicza iloczynu bitowego AND dwóch pierwszych wartości na stosie i pozostawienie wynik na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-233">The `and` instruction computes the bitwise AND of the top two values on the stack and leaves the result on the stack.</span></span>  
  
 <span data-ttu-id="38ac7-234">`And` jest operacją określonej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-234">`And` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="38ac7-235">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `and` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-235">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `and` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-236">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-236">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Arglist">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Arglist;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Arglist" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Arglist" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Arglist As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Arglist;" />
      <MemberSignature Language="F#" Value=" staticval mutable Arglist : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Arglist" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-237">Zwraca niezarządzanego wskaźnika do listy argumentów bieżącej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-237">Returns an unmanaged pointer to the argument list of the current method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-238">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-238">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-239">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-239">Format</span></span>|<span data-ttu-id="38ac7-240">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-240">Assembly Format</span></span>|<span data-ttu-id="38ac7-241">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-241">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-242">FE 00</span><span class="sxs-lookup"><span data-stu-id="38ac7-242">FE 00</span></span>|<span data-ttu-id="38ac7-243">lista_argumentów</span><span class="sxs-lookup"><span data-stu-id="38ac7-243">arglist</span></span>|<span data-ttu-id="38ac7-244">Zwraca dojście listy argumentów dla bieżącej metody.</span><span class="sxs-lookup"><span data-stu-id="38ac7-244">Returns an argument list handle for the current method.</span></span>|  
  
 <span data-ttu-id="38ac7-245">Nie zachowania stosu oceny są wykonywane przez tę operację.</span><span class="sxs-lookup"><span data-stu-id="38ac7-245">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="38ac7-246">`arglist` Instrukcji zwraca nieprzezroczystego uchwyt (niezarządzanego wskaźnika typu `native int`) reprezentujący listy argumentów bieżącej metody.</span><span class="sxs-lookup"><span data-stu-id="38ac7-246">The `arglist` instruction returns an opaque handle (an unmanaged pointer, of type `native int`) that represents the argument list of the current method.</span></span> <span data-ttu-id="38ac7-247">Ta dojścia jest prawidłowy tylko w czasie trwania bieżącej metody.</span><span class="sxs-lookup"><span data-stu-id="38ac7-247">This handle is valid only during the lifetime of the current method.</span></span> <span data-ttu-id="38ac7-248">Można jednak przekazać dojście do innych metod, tak długo, jak jest bieżąca metoda w wątku kontroli.</span><span class="sxs-lookup"><span data-stu-id="38ac7-248">You can, however, pass the handle to other methods as long as the current method is on the thread of control.</span></span> <span data-ttu-id="38ac7-249">Można wykonywać tylko `arglist` instrukcji w metodę, która przyjmuje zmienną liczbę argumentów.</span><span class="sxs-lookup"><span data-stu-id="38ac7-249">You can only execute the `arglist` instruction within a method that takes a variable number of arguments.</span></span>  
  
 <span data-ttu-id="38ac7-250">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `arglist` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-250">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `arglist` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-251">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-251">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beq">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Beq;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Beq" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Beq" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Beq As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Beq;" />
      <MemberSignature Language="F#" Value=" staticval mutable Beq : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Beq" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-252">Transfer kontroli instrukcji docelowych, jeśli dwie wartości są równe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-252">Transfers control to a target instruction if two values are equal.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-253">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-253">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-254">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-254">Format</span></span>|<span data-ttu-id="38ac7-255">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-255">Assembly Format</span></span>|<span data-ttu-id="38ac7-256">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-256">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-257">3B < `int32` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-257">3B < `int32` ></span></span>|<span data-ttu-id="38ac7-258">beq `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-258">beq `target`</span></span>|<span data-ttu-id="38ac7-259">Gałąź do instrukcji docelowy o przesunięciu `target` Jeśli dwie wartości są równe.</span><span class="sxs-lookup"><span data-stu-id="38ac7-259">Branch to the target instruction at offset `target` if the two values are equal.</span></span>|  
  
 <span data-ttu-id="38ac7-260">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-260">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-261">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-261">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-262">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-262">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-263">`value2` i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest równa `value2`, jest wykonywane gałęzi.</span><span class="sxs-lookup"><span data-stu-id="38ac7-263">`value2` and `value1` are popped from the stack; if `value1` is equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="38ac7-264">`beq` Instrukcji przekazuje sterowanie do instrukcji określonych docelowych, jeśli `value1` jest równa `value2`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-264">The `beq` instruction transfers control to the specified target instruction if `value1` is equal to `value2`.</span></span> <span data-ttu-id="38ac7-265">Efekt jest taki sam jak wykonywanie `ceq` instrukcji następuje `brtrue` gałąź do instrukcji określonych docelowych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-265">The effect is the same as performing a `ceq` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="38ac7-266">Instrukcja docelowy jest reprezentowany jako offset podpisem 4-bajtowych od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-266">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-267">Operand dopuszczalne typy znajdują się poniżej:</span><span class="sxs-lookup"><span data-stu-id="38ac7-267">The acceptable operand types are encapsulated below:</span></span>  
  
 <span data-ttu-id="38ac7-268">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-268">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="38ac7-269">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji (przeniesienie są znacznie ograniczone i musi być <xref:System.Reflection.Emit.OpCodes.Leave> instrukcji zamiast niego).</span><span class="sxs-lookup"><span data-stu-id="38ac7-269">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction (such transfers are severely restricted and must use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction instead).</span></span>  
  
 <span data-ttu-id="38ac7-270">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `beq` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-270">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `beq` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-271">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-271">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beq_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Beq_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Beq_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Beq_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Beq_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Beq_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Beq_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Beq_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-272">Transfery kontroli docelowych instrukcji (forma krótka /), jeśli dwie wartości są równe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-272">Transfers control to a target instruction (short form) if two values are equal.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-273">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-273">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-274">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-274">Format</span></span>|<span data-ttu-id="38ac7-275">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-275">Assembly Format</span></span>|<span data-ttu-id="38ac7-276">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-276">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-277">2E < `int8` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-277">2E < `int8` ></span></span>|<span data-ttu-id="38ac7-278">beq.s `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-278">beq.s `target`</span></span>|<span data-ttu-id="38ac7-279">Gałąź do instrukcji docelowy o przesunięciu `target` przypadku równości, krótka</span><span class="sxs-lookup"><span data-stu-id="38ac7-279">Branch to the target instruction at offset `target` if equal, short form</span></span>|  
  
 <span data-ttu-id="38ac7-280">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-280">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-281">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-281">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-282">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-282">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-283">`value2` i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest równa `value2`, jest wykonywane gałęzi.</span><span class="sxs-lookup"><span data-stu-id="38ac7-283">`value2` and `value1` are popped from the stack; if `value1` is equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="38ac7-284">`beq.s` Instrukcji przekazuje sterowanie do instrukcji określonych docelowych, jeśli `value1` jest równa `value2`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-284">The `beq.s` instruction transfers control to the specified target instruction if `value1` is equal to `value2`.</span></span> <span data-ttu-id="38ac7-285">Efekt jest taki sam jak wykonywanie `ceq` instrukcji następuje `brtrue` gałąź do instrukcji określonych docelowych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-285">The effect is the same as performing a `ceq` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="38ac7-286">Instrukcja docelowy jest reprezentowany jako offset podpisem 1-bajtowy od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-286">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-287">Operand dopuszczalne typy znajdują się poniżej:</span><span class="sxs-lookup"><span data-stu-id="38ac7-287">The acceptable operand types are encapsulated below:</span></span>  
  
 <span data-ttu-id="38ac7-288">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-288">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="38ac7-289">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji (przeniesienie są znacznie ograniczone i musi być <xref:System.Reflection.Emit.OpCodes.Leave> instrukcji zamiast niego).</span><span class="sxs-lookup"><span data-stu-id="38ac7-289">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction (such transfers are severely restricted and must use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction instead).</span></span>  
  
 <span data-ttu-id="38ac7-290">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `beq.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-290">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `beq.s` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-291">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-291">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-292">Transfery kontroli instrukcji docelowych, jeśli pierwsza wartość jest większa niż lub równa drugiej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-292">Transfers control to a target instruction if the first value is greater than or equal to the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-293">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-293">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-294">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-294">Format</span></span>|<span data-ttu-id="38ac7-295">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-295">Assembly Format</span></span>|<span data-ttu-id="38ac7-296">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-296">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-297">3C `<int32>`</span><span class="sxs-lookup"><span data-stu-id="38ac7-297">3C `<int32>`</span></span>|<span data-ttu-id="38ac7-298">bge `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-298">bge `target`</span></span>|<span data-ttu-id="38ac7-299">Gałęzi docelowych instrukcji od wskazanego przesunięcia, jeśli pierwsza wartość jest większa niż lub równa drugiej wartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-299">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value.</span></span>|  
  
 <span data-ttu-id="38ac7-300">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-300">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-301">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-301">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-302">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-302">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-303">`value2` i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest większa niż lub równa `value2`, jest wykonywane gałęzi.</span><span class="sxs-lookup"><span data-stu-id="38ac7-303">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="38ac7-304">`bge` Instrukcji przekazuje sterowanie do instrukcji określonych docelowych, jeśli `value1` jest większa niż lub równa `value2`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-304">The `bge` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`.</span></span> <span data-ttu-id="38ac7-305">Efekt jest taki sam jak wykonywanie `clt.un` instrukcji następuje `brfalse` gałąź do instrukcji określonych docelowych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-305">The effect is identical to performing a `clt.un` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="38ac7-306">Instrukcja docelowy jest reprezentowany jako offset podpisem 4-bajtowych od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-306">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-307">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-307">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="38ac7-308">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-308">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-309">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `bge` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-309">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-310">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-310">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-311">Transfery kontroli docelowych instrukcji (forma krótka /), jeśli pierwsza wartość jest większa niż lub równa drugiej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-311">Transfers control to a target instruction (short form) if the first value is greater than or equal to the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-312">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-312">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-313">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-313">Format</span></span>|<span data-ttu-id="38ac7-314">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-314">Assembly Format</span></span>|<span data-ttu-id="38ac7-315">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-315">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-316">2F `<int8>`</span><span class="sxs-lookup"><span data-stu-id="38ac7-316">2F `<int8>`</span></span>|<span data-ttu-id="38ac7-317">bge.s `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-317">bge.s `target`</span></span>|<span data-ttu-id="38ac7-318">Gałęzi docelowych instrukcji od wskazanego przesunięcia, jeśli pierwsza wartość jest większa lub równa wartości drugiego Krótka forma.</span><span class="sxs-lookup"><span data-stu-id="38ac7-318">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value, short form.</span></span>|  
  
 <span data-ttu-id="38ac7-319">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-319">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-320">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-320">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-321">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-321">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-322">`value2` i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest większa niż lub równa `value2`, jest wykonywane gałęzi.</span><span class="sxs-lookup"><span data-stu-id="38ac7-322">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="38ac7-323">`bge.s` Instrukcji przekazuje sterowanie do instrukcji określonych docelowych, jeśli `value1` jest większa niż lub równa `value2`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-323">The `bge.s` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`.</span></span> <span data-ttu-id="38ac7-324">Efekt jest taki sam jak wykonywanie `clt.un` instrukcji następuje `brfalse` gałąź do instrukcji określonych docelowych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-324">The effect is identical to performing a `clt.un` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="38ac7-325">Instrukcja docelowy jest reprezentowany jako offset podpisem 1-bajtowy od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-325">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-326">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-326">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="38ac7-327">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-327">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-328">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `bge.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-328">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.s` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-329">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-329">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-330">Transfery kontroli instrukcji docelowych, jeśli pierwsza wartość jest większa niż wartość drugiej podczas porównywania wartości całkowitej bez znaku lub nieuporządkowaną float.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-330">Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-331">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-331">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-332">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-332">Format</span></span>|<span data-ttu-id="38ac7-333">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-333">Assembly Format</span></span>|<span data-ttu-id="38ac7-334">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-334">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-335">41 `<int32>`</span><span class="sxs-lookup"><span data-stu-id="38ac7-335">41 `<int32>`</span></span>|<span data-ttu-id="38ac7-336">bge.UN `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-336">bge.un `target`</span></span>|<span data-ttu-id="38ac7-337">Gałęzi docelowych instrukcji od określonego przesunięcia, jeśli pierwsza wartość jest większa lub równa wartości drugiego (wartości bez znaku).</span><span class="sxs-lookup"><span data-stu-id="38ac7-337">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="38ac7-338">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-338">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-339">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-339">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-340">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-340">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-341">`value2` i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest większa niż lub równa `value2`, jest wykonywane gałęzi.</span><span class="sxs-lookup"><span data-stu-id="38ac7-341">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="38ac7-342">`bge.un` Instrukcji przekazuje sterowanie do instrukcji określonych docelowych, jeśli `value1` jest większa niż lub równa `value2`, w porównaniu za pomocą liczby całkowitej bez znaku lub wartości nieuporządkowaną float.</span><span class="sxs-lookup"><span data-stu-id="38ac7-342">The `bge.un` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="38ac7-343">Efekt jest taki sam jak wykonywanie `clt` instrukcji następuje `brfalse` gałąź do instrukcji określonych docelowych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-343">The effect is identical to performing a `clt` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="38ac7-344">Instrukcja docelowy jest reprezentowany jako offset podpisem 4-bajtowych od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-344">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-345">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-345">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="38ac7-346">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-346">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-347">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `bge.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-347">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.un` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-348">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-348">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-349">Transfery kontroli docelowych instrukcji (forma krótka /), jeśli pierwsza wartość jest większa niż wartość drugiej podczas porównywania wartości całkowitej bez znaku lub nieuporządkowaną float.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-349">Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-350">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-350">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-351">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-351">Format</span></span>|<span data-ttu-id="38ac7-352">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-352">Assembly Format</span></span>|<span data-ttu-id="38ac7-353">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-353">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-354">34 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-354">34 < `int8` ></span></span>|<span data-ttu-id="38ac7-355">bge.UN.s `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-355">bge.un.s `target`</span></span>|<span data-ttu-id="38ac7-356">Gałęzi docelowych instrukcji od wskazanego przesunięcia, jeśli pierwsza wartość jest większa lub równa wartości (wartości bez znaku), drugi krótkich fragmentów.</span><span class="sxs-lookup"><span data-stu-id="38ac7-356">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="38ac7-357">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-357">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-358">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-358">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-359">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-359">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-360">`value2` i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest większa niż lub równa `value2`, jest wykonywane gałęzi.</span><span class="sxs-lookup"><span data-stu-id="38ac7-360">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="38ac7-361">`bge.un.s` Instrukcji przekazuje sterowanie do instrukcji określonych docelowych, jeśli `value1` jest większa niż lub równa `value2`, w porównaniu za pomocą liczby całkowitej bez znaku lub wartości nieuporządkowaną float.</span><span class="sxs-lookup"><span data-stu-id="38ac7-361">The `bge.un.s` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="38ac7-362">Efekt jest taki sam jak wykonywanie `clt` instrukcji następuje `brfalse` gałąź do instrukcji określonych docelowych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-362">The effect is identical to performing a `clt` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="38ac7-363">Instrukcja docelowy jest reprezentowany jako offset podpisem 1-bajtowy od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-363">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-364">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-364">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="38ac7-365">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-365">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-366">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `bge.un.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-366">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-367">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-367">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-368">Transfery kontroli instrukcji docelowych, jeśli pierwsza wartość jest większa od drugiej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-368">Transfers control to a target instruction if the first value is greater than the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-369">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-369">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-370">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-370">Format</span></span>|<span data-ttu-id="38ac7-371">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-371">Assembly Format</span></span>|<span data-ttu-id="38ac7-372">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-372">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-373">3D < `int32` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-373">3D < `int32` ></span></span>|<span data-ttu-id="38ac7-374">BGT `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-374">bgt `target`</span></span>|<span data-ttu-id="38ac7-375">Gałęzi docelowych instrukcji od wskazanego przesunięcia, jeśli pierwsza wartość jest większa od drugiej wartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-375">Branch to the target instruction at the specified offset if the first value is greater than the second value.</span></span>|  
  
 <span data-ttu-id="38ac7-376">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-376">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-377">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-377">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-378">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-378">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-379">`value2` i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest większa niż `value2`, jest wykonywane gałęzi.</span><span class="sxs-lookup"><span data-stu-id="38ac7-379">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="38ac7-380">`bgt` Instrukcji przekazuje sterowanie do instrukcji określonych docelowych, jeśli `value1` jest większa niż `value2`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-380">The `bgt` instruction transfers control to the specified target instruction if `value1` is greater than `value2`.</span></span> <span data-ttu-id="38ac7-381">Efekt jest taki sam jak wykonywanie `cgt` instrukcji następuje `brtrue` gałąź do instrukcji określonych docelowych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-381">The effect is identical to performing a `cgt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="38ac7-382">Instrukcja docelowy jest reprezentowany jako offset podpisem 4-bajtowych od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-382">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-383">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-383">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="38ac7-384">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-384">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-385">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `bgt` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-385">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-386">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-386">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-387">Transfery kontroli docelowych instrukcji (forma krótka /), jeśli pierwsza wartość jest większa od drugiej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-387">Transfers control to a target instruction (short form) if the first value is greater than the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-388">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-388">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-389">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-389">Format</span></span>|<span data-ttu-id="38ac7-390">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-390">Assembly Format</span></span>|<span data-ttu-id="38ac7-391">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-391">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-392">30 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-392">30 < `int8` ></span></span>|<span data-ttu-id="38ac7-393">BGT.s `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-393">bgt.s `target`</span></span>|<span data-ttu-id="38ac7-394">Gałęzi docelowych instrukcji od wskazanego przesunięcia, jeśli pierwsza wartość jest większa niż wartość drugiej krótkich fragmentów.</span><span class="sxs-lookup"><span data-stu-id="38ac7-394">Branch to the target instruction at the specified offset if the first value is greater than the second value, short form.</span></span>|  
  
 <span data-ttu-id="38ac7-395">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-395">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-396">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-396">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-397">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-397">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-398">`value2` i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest większa niż `value2`, jest wykonywane gałęzi.</span><span class="sxs-lookup"><span data-stu-id="38ac7-398">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="38ac7-399">`bgt.s` Instrukcji przekazuje sterowanie do instrukcji określonych docelowych, jeśli `value1` jest większa niż `value2`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-399">The `bgt.s` instruction transfers control to the specified target instruction if `value1` is greater than `value2`.</span></span> <span data-ttu-id="38ac7-400">Efekt jest taki sam jak wykonywanie `cgt` instrukcji następuje `brtrue` gałąź do instrukcji określonych docelowych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-400">The effect is identical to performing a `cgt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="38ac7-401">Instrukcja docelowy jest reprezentowany jako offset podpisem 1-bajtowy od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-401">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-402">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-402">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="38ac7-403">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-403">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-404">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `bgt.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-404">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.s` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-405">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-405">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-406">Transfery kontroli instrukcji docelowych, jeśli pierwsza wartość jest większa niż wartość drugiej podczas porównywania wartości całkowitej bez znaku lub nieuporządkowaną float.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-406">Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-407">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-407">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-408">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-408">Format</span></span>|<span data-ttu-id="38ac7-409">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-409">Assembly Format</span></span>|<span data-ttu-id="38ac7-410">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-410">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-411">42 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-411">42 < `int32` ></span></span>|<span data-ttu-id="38ac7-412">BGT.UN `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-412">bgt.un `target`</span></span>|<span data-ttu-id="38ac7-413">Gałęzi docelowych instrukcji od określonego przesunięcia, jeśli pierwsza wartość jest większa niż wartość drugiej (wartości bez znaku).</span><span class="sxs-lookup"><span data-stu-id="38ac7-413">Branch to the target instruction at the specified offset if the first value is greater than the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="38ac7-414">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-414">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-415">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-415">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-416">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-416">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-417">`value2` i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest większa niż `value2`, jest wykonywane gałęzi.</span><span class="sxs-lookup"><span data-stu-id="38ac7-417">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="38ac7-418">`bgt.un` Instrukcji przekazuje sterowanie do instrukcji określonych docelowych, jeśli `value1` jest większa niż `value2`, w porównaniu za pomocą liczby całkowitej bez znaku lub wartości nieuporządkowaną float.</span><span class="sxs-lookup"><span data-stu-id="38ac7-418">The `bgt.un` instruction transfers control to the specified target instruction if `value1` is greater than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="38ac7-419">Efekt jest taki sam jak wykonywanie `cgt.un` instrukcji następuje `brtrue` gałąź do instrukcji określonych docelowych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-419">The effect is identical to performing a `cgt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="38ac7-420">Instrukcja docelowy jest reprezentowany jako offset podpisem 4-bajtowych od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-420">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-421">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-421">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="38ac7-422">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-422">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-423">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `bgt.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-423">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.un` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-424">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-424">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-425">Transfery kontroli docelowych instrukcji (forma krótka /), jeśli pierwsza wartość jest większa niż wartość drugiej podczas porównywania wartości całkowitej bez znaku lub nieuporządkowaną float.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-425">Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-426">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-426">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-427">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-427">Format</span></span>|<span data-ttu-id="38ac7-428">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-428">Assembly Format</span></span>|<span data-ttu-id="38ac7-429">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-429">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-430">35 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-430">35 < `int8` ></span></span>|<span data-ttu-id="38ac7-431">BGT.UN.s `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-431">bgt.un.s `target`</span></span>|<span data-ttu-id="38ac7-432">Gałęzi docelowych instrukcji od wskazanego przesunięcia, jeśli pierwsza wartość jest większa niż wartość drugiej (wartości bez znaku), krótka forma.</span><span class="sxs-lookup"><span data-stu-id="38ac7-432">Branch to the target instruction at the specified offset if the first value is greater than the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="38ac7-433">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-433">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-434">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-434">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-435">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-435">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-436">`value2` i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest większa niż `value2`, jest wykonywane gałęzi.</span><span class="sxs-lookup"><span data-stu-id="38ac7-436">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="38ac7-437">`bgt.un.s` Instrukcji przekazuje sterowanie do instrukcji określonych docelowych, jeśli `value1` jest większa niż `value2`, w porównaniu za pomocą liczby całkowitej bez znaku lub wartości nieuporządkowaną float.</span><span class="sxs-lookup"><span data-stu-id="38ac7-437">The `bgt.un.s` instruction transfers control to the specified target instruction if `value1` is greater than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="38ac7-438">Efekt jest taki sam jak wykonywanie `cgt.un` instrukcji następuje `brtrue` gałąź do instrukcji określonych docelowych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-438">The effect is identical to performing a `cgt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="38ac7-439">Instrukcja docelowy jest reprezentowany jako offset podpisem 1-bajtowy od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-439">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-440">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-440">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="38ac7-441">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-441">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-442">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `bgt.un.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-442">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-443">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-443">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-444">Transfery kontroli instrukcji docelowy Jeśli pierwsza wartość jest mniejsza lub równa wartości drugiego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-444">Transfers control to a target instruction if the first value is less than or equal to the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-445">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-445">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-446">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-446">Format</span></span>|<span data-ttu-id="38ac7-447">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-447">Assembly Format</span></span>|<span data-ttu-id="38ac7-448">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-448">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-449">3E `<int32>`</span><span class="sxs-lookup"><span data-stu-id="38ac7-449">3E `<int32>`</span></span>|<span data-ttu-id="38ac7-450">Cz `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-450">ble `target`</span></span>|<span data-ttu-id="38ac7-451">Gałęzi docelowych instrukcji od wskazanego przesunięcia, jeśli pierwsza wartość jest mniejsza lub równa drugiej wartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-451">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value.</span></span>|  
  
 <span data-ttu-id="38ac7-452">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-452">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-453">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-453">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-454">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-454">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-455">`value2` i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest mniejsza niż lub równa `value2`, jest wykonywane gałęzi.</span><span class="sxs-lookup"><span data-stu-id="38ac7-455">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="38ac7-456">`ble` Instrukcji przekazuje sterowanie do instrukcji określonych docelowych, jeśli `value1` jest mniejsza niż lub równa `value2`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-456">The `ble` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="38ac7-457">Efekt jest taki sam jak wykonywanie `cgt` instrukcji (`cgt.un` w przypadku elementów przestawnych) następuje `brfalse` gałąź do instrukcji określonych docelowych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-457">The effect is identical to performing a `cgt` instruction (`cgt.un` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="38ac7-458">Instrukcja docelowy jest reprezentowany jako offset podpisem 4-bajtowych od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-458">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-459">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-459">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="38ac7-460">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-460">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-461">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ble` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-461">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-462">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-462">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-463">Transfery kontroli docelowych instrukcji (forma krótka /), jeśli pierwsza wartość jest mniejsza niż wartość drugiego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-463">Transfers control to a target instruction (short form) if the first value is less than or equal to the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-464">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-464">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-465">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-465">Format</span></span>|<span data-ttu-id="38ac7-466">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-466">Assembly Format</span></span>|<span data-ttu-id="38ac7-467">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-467">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-468">31 `<int8>`</span><span class="sxs-lookup"><span data-stu-id="38ac7-468">31 `<int8>`</span></span>|<span data-ttu-id="38ac7-469">BLE.s `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-469">ble.s `target`</span></span>|<span data-ttu-id="38ac7-470">Gałęzi docelowych instrukcji od wskazanego przesunięcia, jeśli pierwsza wartość jest mniejsza lub równa wartości drugiego Krótka forma.</span><span class="sxs-lookup"><span data-stu-id="38ac7-470">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value, short form.</span></span>|  
  
 <span data-ttu-id="38ac7-471">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-471">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-472">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-472">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-473">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-473">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-474">`value2` i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest mniejsza niż lub równa `value2`, jest wykonywane gałęzi.</span><span class="sxs-lookup"><span data-stu-id="38ac7-474">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="38ac7-475">`ble.s` Instrukcji przekazuje sterowanie do instrukcji określonych docelowych, jeśli `value1` jest mniejsza niż lub równa `value2`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-475">The `ble.s` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="38ac7-476">Efekt jest taki sam jak wykonywanie `cgt` instrukcji (`cgt.un` w przypadku elementów przestawnych) instrukcji następuje`brfalse` gałąź do instrukcji określonych docelowych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-476">The effect is identical to performing a `cgt` instruction (`cgt.un` for floats) instruction followed by a`brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="38ac7-477">Instrukcja docelowy jest reprezentowany jako offset podpisem 1-bajtowy od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-477">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-478">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-478">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="38ac7-479">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-479">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-480">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ble.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-480">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.s` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-481">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-481">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-482">Transfery kontroli instrukcji docelowych, jeśli pierwsza wartość jest mniejsza lub równa wartości drugiego podczas porównanie niepodpisane nieuporządkowaną float wartości lub wartości całkowite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-482">Transfers control to a target instruction if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-483">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-483">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-484">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-484">Format</span></span>|<span data-ttu-id="38ac7-485">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-485">Assembly Format</span></span>|<span data-ttu-id="38ac7-486">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-486">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-487">43 `<int32>`</span><span class="sxs-lookup"><span data-stu-id="38ac7-487">43 `<int32>`</span></span>|<span data-ttu-id="38ac7-488">BLE.UN `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-488">ble.un `target`</span></span>|<span data-ttu-id="38ac7-489">Gałęzi docelowych instrukcji od określonego przesunięcia, jeśli pierwsza wartość jest mniejsza niż lub równa wartości drugiego (wartości bez znaku).</span><span class="sxs-lookup"><span data-stu-id="38ac7-489">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="38ac7-490">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-490">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-491">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-491">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-492">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-492">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-493">`value2` i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest mniejsza niż lub równa `value2`, jest wykonywane gałęzi.</span><span class="sxs-lookup"><span data-stu-id="38ac7-493">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="38ac7-494">`ble.un` Instrukcji przekazuje sterowanie do instrukcji określonych docelowych, jeśli `value1` jest mniejsza niż lub równa `value2`, w porównaniu za pomocą liczby całkowitej bez znaku lub wartości nieuporządkowaną float.</span><span class="sxs-lookup"><span data-stu-id="38ac7-494">The `ble.un` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="38ac7-495">Efekt jest taki sam jak wykonywanie `cgt.un` instrukcji (`cgt` w przypadku elementów przestawnych) następuje `brfalse` gałąź do instrukcji określonych docelowych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-495">The effect is identical to performing a `cgt.un` instruction (`cgt` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="38ac7-496">Instrukcja docelowy jest reprezentowany jako offset podpisem 4-bajtowych od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-496">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-497">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-497">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="38ac7-498">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-498">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-499">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ble.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-499">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.un` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-500">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-500">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-501">Transfery kontroli docelowych instrukcji (forma krótka), jeśli pierwsza wartość jest mniejsza lub równa wartości drugiego podczas porównanie niepodpisane nieuporządkowaną float wartości lub wartości całkowite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-501">Transfers control to a target instruction (short form) if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-502">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-502">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-503">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-503">Format</span></span>|<span data-ttu-id="38ac7-504">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-504">Assembly Format</span></span>|<span data-ttu-id="38ac7-505">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-505">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-506">36 `<int8>`</span><span class="sxs-lookup"><span data-stu-id="38ac7-506">36 `<int8>`</span></span>|<span data-ttu-id="38ac7-507">BLE.UN.s `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-507">ble.un.s `target`</span></span>|<span data-ttu-id="38ac7-508">Gałęzi docelowych instrukcji od wskazanego przesunięcia, jeśli pierwsza wartość jest mniejsza lub równa wartości (wartości bez znaku), drugi krótkich fragmentów.</span><span class="sxs-lookup"><span data-stu-id="38ac7-508">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="38ac7-509">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-509">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-510">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-510">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-511">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-511">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-512">`value2` i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest mniejsza niż lub równa `value2`, jest wykonywane gałęzi.</span><span class="sxs-lookup"><span data-stu-id="38ac7-512">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="38ac7-513">`ble.un.s` Instrukcji przekazuje sterowanie do instrukcji określonych docelowych, jeśli `value1` jest mniejsza niż lub równa `value2`, w porównaniu za pomocą liczby całkowitej bez znaku lub wartości nieuporządkowaną float.</span><span class="sxs-lookup"><span data-stu-id="38ac7-513">The `ble.un.s` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="38ac7-514">Efekt jest taki sam jak wykonywanie `cgt.un` instrukcji (`cgt` w przypadku elementów przestawnych) następuje `brfalse` gałąź do instrukcji określonych docelowych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-514">The effect is identical to performing a `cgt.un` instruction (`cgt` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="38ac7-515">Instrukcja docelowy jest reprezentowany jako offset podpisem 1-bajtowy od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-515">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-516">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-516">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="38ac7-517">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-517">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-518">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ble.un.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-518">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-519">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-519">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-520">Formant transferu do instrukcji docelowych, jeśli pierwsza wartość jest mniejsza od drugiej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-520">Transfers control to a target instruction if the first value is less than the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-521">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-521">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-522">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-522">Format</span></span>|<span data-ttu-id="38ac7-523">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-523">Assembly Format</span></span>|<span data-ttu-id="38ac7-524">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-524">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-525">3F < `int32` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-525">3F < `int32` ></span></span>|<span data-ttu-id="38ac7-526">Blt `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-526">blt `target`</span></span>|<span data-ttu-id="38ac7-527">Rozgałęzienie do instrukcji docelowego na określone przesunięcie, jeśli pierwsza wartość jest mniejsza od drugiej wartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-527">Branch to the target instruction at the specified offset if the first value is less than the second value.</span></span>|  
  
 <span data-ttu-id="38ac7-528">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-528">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-529">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-529">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-530">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-530">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-531">`value2` i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest mniejsza niż `value2`, jest wykonywane gałęzi.</span><span class="sxs-lookup"><span data-stu-id="38ac7-531">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="38ac7-532">`blt` Instrukcji przekazuje sterowanie do instrukcji określonych docelowych, jeśli `value1` jest mniejsza niż lub równa `value2`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-532">The `blt` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="38ac7-533">Efekt jest taki sam jak wykonywanie `clt` instrukcji następuje `brtrue` gałąź do instrukcji określonych docelowych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-533">The effect is identical to performing a `clt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="38ac7-534">Instrukcja docelowy jest reprezentowany jako offset podpisem 4-bajtowych od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-534">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-535">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-535">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="38ac7-536">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-536">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-537">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `blt` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-537">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-538">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-538">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-539">Przekazuje sterowanie instrukcję docelowego (forma krótka /), jeśli pierwsza wartość jest mniejsza niż wartość drugiej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-539">Transfers control to a target instruction (short form) if the first value is less than the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-540">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-540">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-541">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-541">Format</span></span>|<span data-ttu-id="38ac7-542">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-542">Assembly Format</span></span>|<span data-ttu-id="38ac7-543">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-543">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-544">32 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-544">32 < `int8` ></span></span>|<span data-ttu-id="38ac7-545">Blt.s `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-545">blt.s `target`</span></span>|<span data-ttu-id="38ac7-546">Gałęzi docelowych instrukcji na określone przesunięcie, jeśli pierwsza wartość jest mniejsza od drugiej wartości Krótka forma.</span><span class="sxs-lookup"><span data-stu-id="38ac7-546">Branch to the target instruction at the specified offset if the first value is less than the second value, short form.</span></span>|  
  
 <span data-ttu-id="38ac7-547">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-547">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-548">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-548">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-549">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-549">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-550">`value2` i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest mniejsza niż `value2`, jest wykonywane gałęzi.</span><span class="sxs-lookup"><span data-stu-id="38ac7-550">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="38ac7-551">`blt.s` Instrukcji przekazuje sterowanie do instrukcji określonych docelowych, jeśli `value1` jest mniejsza niż `value2`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-551">The `blt.s` instruction transfers control to the specified target instruction if `value1` is less than `value2`.</span></span> <span data-ttu-id="38ac7-552">Efekt jest taki sam jak wykonywanie `clt` instrukcji następuje `brtrue` gałąź do instrukcji określonych docelowych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-552">The effect is identical to performing a `clt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="38ac7-553">Instrukcja docelowy jest reprezentowany jako offset podpisem 1-bajtowy od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-553">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-554">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-554">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="38ac7-555">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-555">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-556">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `blt.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-556">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.s` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-557">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-557">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-558">Formant transferu do instrukcji docelowych, jeśli pierwsza wartość jest mniejsza niż wartość drugiej, podczas porównywania wartości całkowitej bez znaku lub nieuporządkowaną float.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-558">Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-559">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-559">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-560">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-560">Format</span></span>|<span data-ttu-id="38ac7-561">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-561">Assembly Format</span></span>|<span data-ttu-id="38ac7-562">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-562">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-563">44 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-563">44 < `int32` ></span></span>|<span data-ttu-id="38ac7-564">Blt.UN `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-564">blt.un `target`</span></span>|<span data-ttu-id="38ac7-565">Rozgałęzienie do instrukcji docelowego na określone przesunięcie, jeśli pierwsza wartość jest mniejsza od drugiej wartości (wartości bez znaku).</span><span class="sxs-lookup"><span data-stu-id="38ac7-565">Branch to the target instruction at the specified offset if the first value is less than the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="38ac7-566">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-566">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-567">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-567">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-568">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-568">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-569">`value2` i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest mniejsza niż `value2`, jest wykonywane gałęzi.</span><span class="sxs-lookup"><span data-stu-id="38ac7-569">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="38ac7-570">`blt.un` Instrukcji przekazuje sterowanie do instrukcji określonych docelowych, jeśli `value1` jest mniejsza niż `value2`, w porównaniu za pomocą liczby całkowitej bez znaku lub wartości nieuporządkowaną float.</span><span class="sxs-lookup"><span data-stu-id="38ac7-570">The `blt.un` instruction transfers control to the specified target instruction if `value1` is less than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="38ac7-571">Efekt jest taki sam jak wykonywanie `clt.un` instrukcji następuje `brtrue` gałąź do instrukcji określonych docelowych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-571">The effect is identical to performing a `clt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="38ac7-572">Instrukcja docelowy jest reprezentowany jako offset podpisem 4-bajtowych od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-572">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-573">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-573">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="38ac7-574">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-574">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-575">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `blt.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-575">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.un` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-576">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-576">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-577">Transfery kontrolować instrukcję docelowego (forma krótka /), jeśli pierwsza wartość mniejsza od drugiego jest wartość, przy porównanie niepodpisane wartości całkowitych lub wartości zmiennoprzecinkowych nieuporządkowaną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-577">Transfers control to a target instruction (short form) if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-578">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-578">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-579">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-579">Format</span></span>|<span data-ttu-id="38ac7-580">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-580">Assembly Format</span></span>|<span data-ttu-id="38ac7-581">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-581">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-582">37 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-582">37 < `int8` ></span></span>|<span data-ttu-id="38ac7-583">Blt.UN.s `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-583">blt.un.s `target`</span></span>|<span data-ttu-id="38ac7-584">Rozgałęzienie do instrukcji docelowego na określone przesunięcie, jeśli pierwsza wartość jest mniejsza niż wartość drugiej (wartości bez znaku), krótka forma.</span><span class="sxs-lookup"><span data-stu-id="38ac7-584">Branch to the target instruction at the specified offset if the first value is less than the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="38ac7-585">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-585">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-586">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-586">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-587">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-587">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-588">`value2` i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` jest mniejsza niż `value2`, jest wykonywane gałęzi.</span><span class="sxs-lookup"><span data-stu-id="38ac7-588">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="38ac7-589">`blt.un` Instrukcji przekazuje sterowanie do instrukcji określonych docelowych, jeśli `value1` jest mniejsza niż `value2`, w porównaniu za pomocą liczby całkowitej bez znaku lub wartości nieuporządkowaną float.</span><span class="sxs-lookup"><span data-stu-id="38ac7-589">The `blt.un` instruction transfers control to the specified target instruction if `value1` is less than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="38ac7-590">Efekt jest taki sam jak wykonywanie `clt.un` instrukcji następuje `brtrue` gałąź do instrukcji określonych docelowych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-590">The effect is identical to performing a `clt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="38ac7-591">Instrukcja docelowy jest reprezentowany jako offset podpisem 4-bajtowych od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-591">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-592">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-592">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="38ac7-593">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-593">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-594">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `blt.un.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-594">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-595">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-595">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bne_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bne_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bne_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bne_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bne_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bne_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bne_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bne_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-596">Transfery kontrolować instrukcji docelowych nie są takie same wartości nieuporządkowaną float lub dwie wartości całkowitej bez znaku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-596">Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-597">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-597">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-598">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-598">Format</span></span>|<span data-ttu-id="38ac7-599">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-599">Assembly Format</span></span>|<span data-ttu-id="38ac7-600">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-600">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-601">40 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-601">40 < `int32` ></span></span>|<span data-ttu-id="38ac7-602">BNE.UN `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-602">bne.un `target`</span></span>|<span data-ttu-id="38ac7-603">Gałąź z obiektem docelowym instrukcji od wskazanego przesunięcia, jeśli dwa podpisane liczby całkowite są nierówne (wartości bez znaku).</span><span class="sxs-lookup"><span data-stu-id="38ac7-603">Branch to the target instruction at the specified offset if two unsigned integer values are not equal (unsigned values).</span></span>|  
  
 <span data-ttu-id="38ac7-604">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-604">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-605">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-605">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-606">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-606">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-607">`value2` i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` nie jest równa `value2`, jest wykonywane gałęzi.</span><span class="sxs-lookup"><span data-stu-id="38ac7-607">`value2` and `value1` are popped from the stack; if `value1` is not equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="38ac7-608">`bne.un` Instrukcji przekazuje sterowanie do instrukcji określonych docelowych, jeśli `value1` nie jest równa `value2`, w porównaniu za pomocą liczby całkowitej bez znaku lub wartości nieuporządkowaną float.</span><span class="sxs-lookup"><span data-stu-id="38ac7-608">The `bne.un` instruction transfers control to the specified target instruction if `value1` is not equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="38ac7-609">Efekt jest taki sam jak wykonywanie `ceq` instrukcji następuje `brfalse` gałąź do instrukcji określonych docelowych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-609">The effect is identical to performing a `ceq` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="38ac7-610">Instrukcja docelowy jest reprezentowany jako offset podpisem 4-bajtowych od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-610">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-611">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-611">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="38ac7-612">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-612">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-613">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `bne.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-613">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bne.un` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-614">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-614">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bne_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bne_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bne_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bne_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bne_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bne_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bne_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bne_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-615">Przekazuje sterowanie do instrukcję docelowego (forma krótka) po dwóch niepodpisane nieuporządkowaną float wartości lub wartości całkowite nie są takie same.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-615">Transfers control to a target instruction (short form) when two unsigned integer values or unordered float values are not equal.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-616">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-616">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-617">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-617">Format</span></span>|<span data-ttu-id="38ac7-618">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-618">Assembly Format</span></span>|<span data-ttu-id="38ac7-619">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-619">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-620">33 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-620">33 < `int8` ></span></span>|<span data-ttu-id="38ac7-621">BNE.UN.s `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-621">bne.un.s `target`</span></span>|<span data-ttu-id="38ac7-622">Gałąź z obiektem docelowym instrukcji od wskazanego przesunięcia, jeśli dwa podpisane liczby całkowite są nie równa się (wartości bez znaku), krótka wersja.</span><span class="sxs-lookup"><span data-stu-id="38ac7-622">Branch to the target instruction at the specified offset if two unsigned integer values are not equal (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="38ac7-623">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-623">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-624">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-624">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-625">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-625">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-626">`value2` i `value1` są zdjęte ze stosu ze stosu; Jeśli `value1` nie jest równa `value2`, jest wykonywane gałęzi.</span><span class="sxs-lookup"><span data-stu-id="38ac7-626">`value2` and `value1` are popped from the stack; if `value1` is not equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="38ac7-627">`bne.un` Instrukcji przekazuje sterowanie do instrukcji określonych docelowych, jeśli `value1` nie jest równa `value2`, w porównaniu za pomocą liczby całkowitej bez znaku lub wartości nieuporządkowaną float.</span><span class="sxs-lookup"><span data-stu-id="38ac7-627">The `bne.un` instruction transfers control to the specified target instruction if `value1` is not equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="38ac7-628">Efekt jest taki sam jak wykonywanie `ceq` instrukcji następuje `brfalse` gałąź do instrukcji określonych docelowych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-628">The effect is identical to performing a `ceq` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="38ac7-629">Instrukcja docelowy jest reprezentowany jako offset podpisem 4-bajtowych od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-629">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-630">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-630">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="38ac7-631">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-631">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-632">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `bne.un.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-632">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bne.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-633">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-633">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Box">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Box;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Box" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Box" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Box As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Box;" />
      <MemberSignature Language="F#" Value=" staticval mutable Box : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Box" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-634">Konwertuje odwołanie do obiektu typu wartości (typu <see langword="O" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-634">Converts a value type to an object reference (type <see langword="O" />).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-635">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-635">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-636">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-636">Format</span></span>|<span data-ttu-id="38ac7-637">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-637">Assembly Format</span></span>|<span data-ttu-id="38ac7-638">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-638">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-639">8C < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-639">8C < `T` ></span></span>|<span data-ttu-id="38ac7-640">Pole `valTypeToken`</span><span class="sxs-lookup"><span data-stu-id="38ac7-640">box `valTypeToken`</span></span>|<span data-ttu-id="38ac7-641">Konwertuj typu wartość (typu określonego w `valTypeToken`) odwołania do obiektu wartość true.</span><span class="sxs-lookup"><span data-stu-id="38ac7-641">Convert a value type (of the type specified in `valTypeToken`) to a true object reference.</span></span>|  
  
 <span data-ttu-id="38ac7-642">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-642">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-643">Typ wartości spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-643">A value type is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-644">Typ wartości jest zdjęte ze stosu ze stosu; `box` operacja została wykonana.</span><span class="sxs-lookup"><span data-stu-id="38ac7-644">The value type is popped from the stack; the `box` operation is performed.</span></span>  
  
3.  <span data-ttu-id="38ac7-645">Odwołanie obiektu do wynikowy typ wartości "spakowanej" spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-645">An object reference to the resulting "boxed" value type is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-646">Typ wartości ma dwa oddzielne reprezentacje w ramach wspólnej infrastruktury języka (CLI):</span><span class="sxs-lookup"><span data-stu-id="38ac7-646">A value type has two separate representations within the Common Language Infrastructure (CLI):</span></span>  
  
-   <span data-ttu-id="38ac7-647">"Raw" formularz używany, gdy typ wartości jest osadzony w innym obiekcie lub na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-647">A 'raw' form used when a value type is embedded within another object or on the stack.</span></span>  
  
-   <span data-ttu-id="38ac7-648">Formy "opakowanej", gdzie dane w typ wartości jest opakowana (opakowany) do obiektu, może istnieć jako niezależne jednostki.</span><span class="sxs-lookup"><span data-stu-id="38ac7-648">A 'boxed' form, where the data in the value type is wrapped (boxed) into an object so it can exist as an independent entity.</span></span>  
  
 <span data-ttu-id="38ac7-649">`box` Instrukcji konwertuje odwołanie do obiektu typu "raw" (rozpakowany) wartość (typu `O`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-649">The `box` instruction converts the 'raw' (unboxed) value type into an object reference (type `O`).</span></span> <span data-ttu-id="38ac7-650">Jest to osiągane przez utworzenie nowego obiektu i kopiowanie danych z typ wartości do nowoprzydzielonych obiektu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-650">This is accomplished by creating a new object and copying the data from the value type into the newly allocated object.</span></span> <span data-ttu-id="38ac7-651">`valTypeToken` token metadanych jest i wskazujący rodzaj typu wartości na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-651">`valTypeToken` is a metadata token indicating the type of the value type on the stack.</span></span>  
  
 <span data-ttu-id="38ac7-652"><xref:System.OutOfMemoryException> jest generowany, jeśli jest za mało pamięci do spełnienia żądania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-652"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="38ac7-653"><xref:System.TypeLoadException> jest generowany, jeśli nie można znaleźć klasy.</span><span class="sxs-lookup"><span data-stu-id="38ac7-653"><xref:System.TypeLoadException> is thrown if the class cannot be found.</span></span> <span data-ttu-id="38ac7-654">To zwykle wykryto po przekonwertowaniu Microsoft języka pośredniego (MSIL) do kodu natywnego, a nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-654">This is typically detected when Microsoft Intermediate Language (MSIL) is converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="38ac7-655">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `box` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-655">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `box` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-656">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="38ac7-656">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Br">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Br;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Br" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Br" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Br As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Br;" />
      <MemberSignature Language="F#" Value=" staticval mutable Br : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Br" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-657">Bezwarunkowo przekazuje sterowanie do instrukcji docelowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-657">Unconditionally transfers control to a target instruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-658">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-658">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-659">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-659">Format</span></span>|<span data-ttu-id="38ac7-660">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-660">Assembly Format</span></span>|<span data-ttu-id="38ac7-661">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-661">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-662">38 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-662">38 < `int32` ></span></span>|<span data-ttu-id="38ac7-663">br `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-663">br `target`</span></span>|<span data-ttu-id="38ac7-664">Gałęzie, które mają instrukcję docelowy od wskazanego przesunięcia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-664">Branches to a target instruction at the specified offset.</span></span>|  
  
 <span data-ttu-id="38ac7-665">Nie zachowania stosu oceny są wykonywane przez tę operację.</span><span class="sxs-lookup"><span data-stu-id="38ac7-665">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="38ac7-666">`br` Instrukcji bezwarunkowo przekazuje sterowanie do instrukcji docelowej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-666">The `br` instruction unconditionally transfers control to a target instruction.</span></span> <span data-ttu-id="38ac7-667">Instrukcja docelowy jest reprezentowany jako offset podpisem 4-bajtowych od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-667">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-668">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-668">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="38ac7-669">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-669">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-670">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `br` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-670">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `br` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-671">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-671">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Br_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Br_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Br_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Br_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Br_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Br_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Br_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Br_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-672">Bezwarunkowo przekazuje sterowanie do instrukcję docelowego (forma krótka /).</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-672">Unconditionally transfers control to a target instruction (short form).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-673">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-673">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-674">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-674">Format</span></span>|<span data-ttu-id="38ac7-675">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-675">Assembly Format</span></span>|<span data-ttu-id="38ac7-676">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-676">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-677">2B < `int8` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-677">2B < `int8` ></span></span>|<span data-ttu-id="38ac7-678">br.s `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-678">br.s `target`</span></span>|<span data-ttu-id="38ac7-679">Gałęzie, które mają instrukcję docelowy od wskazanego przesunięcia krótkich fragmentów.</span><span class="sxs-lookup"><span data-stu-id="38ac7-679">Branches to a target instruction at the specified offset, short form.</span></span>|  
  
 <span data-ttu-id="38ac7-680">Nie zachowania stosu oceny są wykonywane przez tę operację.</span><span class="sxs-lookup"><span data-stu-id="38ac7-680">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="38ac7-681">`br.s` Instrukcji bezwarunkowo przekazuje sterowanie do instrukcji docelowej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-681">The `br.s` instruction unconditionally transfers control to a target instruction.</span></span> <span data-ttu-id="38ac7-682">Instrukcja docelowy jest reprezentowany jako offset podpisem 1-bajtowy od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-682">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-683">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-683">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="38ac7-684">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-684">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-685">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `br.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-685">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `br.s` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-686">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-686">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Break;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Break" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Break" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Break As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Break;" />
      <MemberSignature Language="F#" Value=" staticval mutable Break : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Break" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-687">Sygnały infrastruktury języka wspólnego (CLI) informują debugera o tym, że punkt przerwania został uruchomiony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-687">Signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-688">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-688">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-689">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-689">Format</span></span>|<span data-ttu-id="38ac7-690">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-690">Assembly Format</span></span>|<span data-ttu-id="38ac7-691">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-691">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-692">01</span><span class="sxs-lookup"><span data-stu-id="38ac7-692">01</span></span>|<span data-ttu-id="38ac7-693">break</span><span class="sxs-lookup"><span data-stu-id="38ac7-693">break</span></span>|<span data-ttu-id="38ac7-694">Poinformuj debugera punkt przerwania został osiągnięty.</span><span class="sxs-lookup"><span data-stu-id="38ac7-694">inform a debugger that a breakpoint has been reached.</span></span>|  
  
 <span data-ttu-id="38ac7-695">Nie zachowania stosu oceny są wykonywane przez tę operację.</span><span class="sxs-lookup"><span data-stu-id="38ac7-695">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="38ac7-696">`break` Instrukcja to debugowanie pomocy technicznej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-696">The `break` instruction is for debugging support.</span></span> <span data-ttu-id="38ac7-697">Powiadamia interfejsu wiersza polecenia, aby informować debugera, czy punkt przerwania został uruchomiony.</span><span class="sxs-lookup"><span data-stu-id="38ac7-697">It signals the CLI to inform the debugger that a break point has been tripped.</span></span> <span data-ttu-id="38ac7-698">Go nie ma innych wpływu na stan interpreter.</span><span class="sxs-lookup"><span data-stu-id="38ac7-698">It has no other effect on the interpreter state.</span></span>  
  
 <span data-ttu-id="38ac7-699">`break` Instrukcji ma najmniejszą możliwe instrukcji rozmiar Włączanie kod poprawki z punktem przerwania i generowania minimalnego zakłóceń otaczającego kodu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-699">The `break` instruction has the smallest possible instruction size enabling code patching with a break point and generating minimal disturbance to the surrounding code.</span></span>  
  
 <span data-ttu-id="38ac7-700">`break` Instrukcji można debugera, nic nie rób lub Zgłoś wyjątek zabezpieczeń.</span><span class="sxs-lookup"><span data-stu-id="38ac7-700">The `break` instruction can trap to a debugger, do nothing, or raise a security exception.</span></span> <span data-ttu-id="38ac7-701">Dokładne jest zdefiniowane w implementacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-701">The exact behavior is implementation-defined.</span></span>  
  
 <span data-ttu-id="38ac7-702">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `break` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-702">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `break` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-703">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-703">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brfalse">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brfalse;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brfalse" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brfalse" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brfalse As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brfalse;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brfalse : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brfalse" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-704">Przekazuje sterowanie do instrukcji docelowych, jeśli <paramref name="value" /> jest <see langword="false" />, odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic), lub wartość zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-704">Transfers control to a target instruction if <paramref name="value" /> is <see langword="false" />, a null reference (<see langword="Nothing" /> in Visual Basic), or zero.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-705">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-705">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-706">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-706">Format</span></span>|<span data-ttu-id="38ac7-707">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-707">Assembly Format</span></span>|<span data-ttu-id="38ac7-708">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-708">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-709">39 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-709">39 < `int32` ></span></span>|<span data-ttu-id="38ac7-710">brfalse `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-710">brfalse `target`</span></span><br /><br /> <span data-ttu-id="38ac7-711">brnull `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-711">brnull `target`</span></span><br /><br /> <span data-ttu-id="38ac7-712">brzero `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-712">brzero `target`</span></span>|<span data-ttu-id="38ac7-713">Gałęzi docelowych instrukcji w określonym if przesunięcia `false`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-713">Branches to a target instruction at the specified offset if `false`.</span></span>|  
  
 <span data-ttu-id="38ac7-714">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-714">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-715">`value` spoczywa na stosie przez poprzednią operację.</span><span class="sxs-lookup"><span data-stu-id="38ac7-715">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="38ac7-716">`value` jest zdjęte ze stosu ze stosu; Jeśli `value` jest `false`, gałęzi do `target`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-716">`value` is popped from the stack; if `value` is `false`, branch to `target`.</span></span>  
  
 <span data-ttu-id="38ac7-717">`brfalse` Instrukcji (i jego aliasy `brnull` i `brzero`) przekazuje sterowanie do instrukcji określonych docelowych, jeśli `value` (typu `int32`, `int64`, obiekt odwołania `O`zarządzane wskaźnika `&`, wskaźnik przejściowa `*`, `native int`) wynosi zero (`false`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-717">The `brfalse` instruction (and its aliases `brnull` and `brzero`) transfers control to the specified target instruction if `value` (of type `int32`, `int64`, object reference `O`, managed pointer `&`, transient pointer `*`, `native int`) is zero (`false`).</span></span> <span data-ttu-id="38ac7-718">Jeśli `value` jest niezerowa (`true`) wykonywania jest kontynuowane od następnej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-718">If `value` is non-zero (`true`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="38ac7-719">Instrukcja docelowy jest reprezentowany jako offset podpisem 4-bajtowych od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-719">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-720">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-720">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="38ac7-721">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-721">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-722">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `brfalse` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-722">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brfalse` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-723">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-723">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brfalse_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brfalse_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brfalse_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brfalse_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brfalse_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brfalse_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brfalse_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brfalse_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-724">Przekazuje sterowanie do instrukcji docelowych, jeśli <paramref name="value" /> jest <see langword="false" />, odwołanie o wartości null lub zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-724">Transfers control to a target instruction if <paramref name="value" /> is <see langword="false" />, a null reference, or zero.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-725">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-725">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-726">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-726">Format</span></span>|<span data-ttu-id="38ac7-727">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-727">Assembly Format</span></span>|<span data-ttu-id="38ac7-728">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-728">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-729">2C <`int8` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-729">2C <`int8` ></span></span>|<span data-ttu-id="38ac7-730">brfalse.s `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-730">brfalse.s `target`</span></span><br /><br /> <span data-ttu-id="38ac7-731">brnull.s `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-731">brnull.s `target`</span></span><br /><br /> <span data-ttu-id="38ac7-732">brzero.s `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-732">brzero.s `target`</span></span>|<span data-ttu-id="38ac7-733">Gałęzi docelowych instrukcji w określonym if przesunięcia `false`, krótka.</span><span class="sxs-lookup"><span data-stu-id="38ac7-733">Branches to a target instruction at the specified offset if `false`, short form.</span></span>|  
  
 <span data-ttu-id="38ac7-734">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-734">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-735">`value` spoczywa na stosie przez poprzednią operację.</span><span class="sxs-lookup"><span data-stu-id="38ac7-735">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="38ac7-736">`value` jest zdjęte ze stosu ze stosu; Jeśli `value` jest `false`, gałęzi do `target`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-736">`value` is popped from the stack; if `value` is `false`, branch to `target`.</span></span>  
  
 <span data-ttu-id="38ac7-737">`brfalse.s` Instrukcji (i jego aliasy `brnull` i `brzero`) przekazuje sterowanie do instrukcji określonych docelowych, jeśli `value` (typu `int32`, `int64`, obiekt odwołania `O`zarządzane wskaźnika `&`, wskaźnik przejściowa `*`, `native int`) wynosi zero (`false`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-737">The `brfalse.s` instruction (and its aliases `brnull` and `brzero`) transfers control to the specified target instruction if `value` (of type `int32`, `int64`, object reference `O`, managed pointer `&`, transient pointer `*`, `native int`) is zero (`false`).</span></span> <span data-ttu-id="38ac7-738">Jeśli `value` jest niezerowa (`true`) wykonywania jest kontynuowane od następnej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-738">If `value` is non-zero (`true`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="38ac7-739">Instrukcja docelowy jest reprezentowany jako offset podpisem 1-bajtowy od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-739">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-740">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-740">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="38ac7-741">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-741">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-742">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `brfalse.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-742">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brfalse.s` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-743">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-743">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brtrue">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brtrue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brtrue" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brtrue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brtrue As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brtrue;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brtrue : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brtrue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-744">Przekazuje sterowanie do instrukcji docelowych, jeśli <paramref name="value" /> jest <see langword="true" />, nie wartość null lub inną niż zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-744">Transfers control to a target instruction if <paramref name="value" /> is <see langword="true" />, not null, or non-zero.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-745">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-745">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-746">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-746">Format</span></span>|<span data-ttu-id="38ac7-747">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-747">Assembly Format</span></span>|<span data-ttu-id="38ac7-748">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-748">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-749">3A < `int32` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-749">3A < `int32` ></span></span>|<span data-ttu-id="38ac7-750">brtrue `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-750">brtrue `target`</span></span><br /><br /> <span data-ttu-id="38ac7-751">brinst `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-751">brinst `target`</span></span>|<span data-ttu-id="38ac7-752">Gałęzi do instrukcję docelowy od wskazanego przesunięcia, jeśli różna od zera (`true`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-752">Branch to a target instruction at the specified offset if non-zero (`true`).</span></span>|  
  
 <span data-ttu-id="38ac7-753">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-753">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-754">`value` spoczywa na stosie przez poprzednią operację.</span><span class="sxs-lookup"><span data-stu-id="38ac7-754">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="38ac7-755">`value` jest zdjęte ze stosu ze stosu; Jeśli `value` jest `true`, gałęzi do `target`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-755">`value` is popped from the stack; if `value` is `true`, branch to `target`.</span></span>  
  
 <span data-ttu-id="38ac7-756">`brtrue` Instrukcji przekazuje sterowanie do instrukcji określonych docelowych, jeśli `value` (typ `native int`) jest różna od zera (`true`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-756">The `brtrue` instruction transfers control to the specified target instruction if `value` (type `native int`) is nonzero (`true`).</span></span> <span data-ttu-id="38ac7-757">Jeśli `value` wynosi zero (`false`) wykonywania jest kontynuowane od następnej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-757">If `value` is zero (`false`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="38ac7-758">Jeśli `value` jest odwołanie do obiektu (typ `O`) następnie `brinst` (alias `brtrue`) przesyła formantu, jeśli reprezentuje wystąpienie obiektu (na przykład, jeśli nie jest odwołanie do obiektu null; zobacz <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span><span class="sxs-lookup"><span data-stu-id="38ac7-758">If `value` is an object reference (type `O`) then `brinst` (an alias for `brtrue`) transfers control if it represents an instance of an object (for example, if it is not the null object reference; see <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span></span>  
  
 <span data-ttu-id="38ac7-759">Instrukcja docelowy jest reprezentowany jako offset podpisem 4-bajtowych od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-759">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-760">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-760">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="38ac7-761">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-761">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-762">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `brtrue` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-762">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brtrue` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-763">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-763">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brtrue_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brtrue_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brtrue_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brtrue_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brtrue_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brtrue_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brtrue_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brtrue_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-764">Przekazuje sterowanie instrukcję docelowego (forma krótka /), jeśli <paramref name="value" /> jest <see langword="true" />, nie wartość null lub inną niż zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-764">Transfers control to a target instruction (short form) if <paramref name="value" /> is <see langword="true" />, not null, or non-zero.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-765">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-765">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-766">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-766">Format</span></span>|<span data-ttu-id="38ac7-767">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-767">Assembly Format</span></span>|<span data-ttu-id="38ac7-768">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-768">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-769">2D < `int8` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-769">2D < `int8` ></span></span>|<span data-ttu-id="38ac7-770">brtrue.s `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-770">brtrue.s `target`</span></span><br /><br /> <span data-ttu-id="38ac7-771">brinst.s `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-771">brinst.s `target`</span></span>|<span data-ttu-id="38ac7-772">Gałęzi do instrukcję docelowy od wskazanego przesunięcia, jeśli różna od zera (`true`), krótka.</span><span class="sxs-lookup"><span data-stu-id="38ac7-772">Branch to a target instruction at the specified offset if non-zero (`true`), short form.</span></span>|  
  
 <span data-ttu-id="38ac7-773">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-773">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-774">`value` spoczywa na stosie przez poprzednią operację.</span><span class="sxs-lookup"><span data-stu-id="38ac7-774">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="38ac7-775">`value` jest zdjęte ze stosu ze stosu; Jeśli `value` jest `true`, gałęzi do `target`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-775">`value` is popped from the stack; if `value` is `true`, branch to `target`.</span></span>  
  
 <span data-ttu-id="38ac7-776">`brtrue.s` Instrukcji przekazuje sterowanie do instrukcji określonych docelowych, jeśli `value` (typ `native int`) jest różna od zera (`true`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-776">The `brtrue.s` instruction transfers control to the specified target instruction if `value` (type `native int`) is nonzero (`true`).</span></span> <span data-ttu-id="38ac7-777">Jeśli `value` wynosi zero (`false`) wykonywania jest kontynuowane od następnej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-777">If `value` is zero (`false`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="38ac7-778">Jeśli `value` jest odwołanie do obiektu (typ `O`) następnie `brinst` (alias `brtrue`) przesyła formantu, jeśli reprezentuje wystąpienie obiektu (na przykład, jeśli nie jest odwołanie do obiektu null; zobacz <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span><span class="sxs-lookup"><span data-stu-id="38ac7-778">If `value` is an object reference (type `O`) then `brinst` (an alias for `brtrue`) transfers control if it represents an instance of an object (for example, if it is not the null object reference; see <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span></span>  
  
 <span data-ttu-id="38ac7-779">Instrukcja docelowy jest reprezentowany jako offset podpisem 1-bajtowy od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-779">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-780">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-780">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="38ac7-781">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-781">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-782">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `brtrue.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-782">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brtrue.s` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-783">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-783">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Call;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Call" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Call" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Call As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Call;" />
      <MemberSignature Language="F#" Value=" staticval mutable Call : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Call" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-784">Wywołuje metodę wskazywanym przez deskryptor metody przekazany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-784">Calls the method indicated by the passed method descriptor.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-785">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-785">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-786">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-786">Format</span></span>|<span data-ttu-id="38ac7-787">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-787">Assembly Format</span></span>|<span data-ttu-id="38ac7-788">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-788">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-789">28 < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-789">28 < `T` ></span></span>|<span data-ttu-id="38ac7-790">wywołania `methodDesc`</span><span class="sxs-lookup"><span data-stu-id="38ac7-790">call `methodDesc`</span></span>|<span data-ttu-id="38ac7-791">Wywołaj metodę opisanego przez `methodDesc`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-791">Call the method described by `methodDesc`.</span></span>|  
  
 <span data-ttu-id="38ac7-792">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-792">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-793">Argumenty metody `arg1` za pośrednictwem `argN` są przenoszone na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-793">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-794">Argumenty metody `arg1` za pośrednictwem `argN` są zdjęte ze stosu ze stosu; wywołania metody, które jest wykonywane z tymi argumentami i sterowanie jest przekazywane do metody odwołuje się deskryptor metody.</span><span class="sxs-lookup"><span data-stu-id="38ac7-794">Method arguments `arg1` through `argN` are popped from the stack; the method call is performed with these arguments and control is transferred to the method referred to by the method descriptor.</span></span> <span data-ttu-id="38ac7-795">Po zakończeniu wartości zwracanej jest generowany przez metodę wywoływany i wysyłane do obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="38ac7-795">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
3.  <span data-ttu-id="38ac7-796">Wartość zwracana spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-796">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-797">`call` Instrukcji wywołuje metodę wskazywanym przez deskryptor metody przekazaną za pomocą instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-797">The `call` instruction calls the method indicated by the method descriptor passed with the instruction.</span></span> <span data-ttu-id="38ac7-798">Deskryptor metody jest token metadanych, który wskazuje metodę do wywołania oraz liczbę, typ i kolejność argumentów, które zostały umieszczone na stosie, które mają być przekazane do tej metody, a także konwencji wywołania do użycia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-798">The method descriptor is a metadata token that indicates the method to call and the number, type, and order of the arguments that have been placed on the stack to be passed to that method as well as the calling convention to be used.</span></span> <span data-ttu-id="38ac7-799">`call` Instrukcji może być od razu poprzedzony `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) prefiksu instrukcji, aby określić, że bieżący stan metody powinny zostać zwolnione przed przeniesieniem formantu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-799">The `call` instruction can be immediately preceded by a `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) prefix instruction to specify that the current method state should be released before transferring control.</span></span> <span data-ttu-id="38ac7-800">Jeśli wywołanie przekazuje sterowanie metodę zaufania wyższe niż metoda źródła, nie jest zwalniany ramki stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-800">If the call transfers control to a method of higher trust than the origin method, the stack frame is not released.</span></span> <span data-ttu-id="38ac7-801">Zamiast tego kontynuuje wykonywanie dyskretnie tak, jakby `tail` nie został podany.</span><span class="sxs-lookup"><span data-stu-id="38ac7-801">Instead, the execution continues silently as if the `tail` had not been supplied.</span></span> <span data-ttu-id="38ac7-802">Token metadanych zawiera wystarczających informacji do ustalenia, czy połączenie ma metody statycznej metody wystąpienia, metoda wirtualna albo funkcją globalną.</span><span class="sxs-lookup"><span data-stu-id="38ac7-802">The metadata token carries sufficient information to determine whether the call is to a static method, an instance method, a virtual method, or a global function.</span></span> <span data-ttu-id="38ac7-803">We wszystkich tych przypadkach adres docelowy zależy całkowicie od deskryptor metody (kontrastu to z <xref:System.Reflection.Emit.OpCodes.Callvirt> instrukcji do wywoływania metody wirtualne, gdzie adres docelowy również zależy od typu środowiska uruchomieniowego wystąpienia Odwołanie wypychana przed <xref:System.Reflection.Emit.OpCodes.Callvirt>).</span><span class="sxs-lookup"><span data-stu-id="38ac7-803">In all of these cases the destination address is determined entirely from the method descriptor (contrast this with the <xref:System.Reflection.Emit.OpCodes.Callvirt> instruction for calling virtual methods, where the destination address also depends upon the runtime type of the instance reference pushed before the <xref:System.Reflection.Emit.OpCodes.Callvirt>).</span></span>  
  
 <span data-ttu-id="38ac7-804">Argumenty są umieszczane na stosie w kolejności od lewej do prawej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-804">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="38ac7-805">Oznacza to, że pierwszy argument jest obliczana i umieszczane na stosie, drugi argument, a następnie innych, dopóki wszystkie niezbędne argumenty mają nad stosu w kolejności malejącej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-805">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="38ac7-806">Istnieją trzy ważne szczególnych przypadkach:</span><span class="sxs-lookup"><span data-stu-id="38ac7-806">There are three important special cases:</span></span>  
  
 1. <span data-ttu-id="38ac7-807">Wywołania do wystąpienia (lub wirtualnymi) metoda musi push odwołania do tego wystąpienia przed każdą argumentów widoczny dla użytkownika.</span><span class="sxs-lookup"><span data-stu-id="38ac7-807">Calls to an instance (or virtual) method must push that instance reference before any of the user-visible arguments.</span></span> <span data-ttu-id="38ac7-808">Odwołania do wystąpienia nie może być odwołaniem o wartości zerowej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-808">The instance reference must not be a null reference.</span></span> <span data-ttu-id="38ac7-809">Podpis w metadanych nie zawiera wpis na liście parametrów dla `this` wskaźnika; zamiast tego wskazująca, czy metoda wymaga przekazywanie używa bit `this` wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="38ac7-809">The signature carried in the metadata does not contain an entry in the parameter list for the `this` pointer; instead, it uses a bit to indicate whether the method requires passing the `this` pointer.</span></span>  
  
 2. <span data-ttu-id="38ac7-810">Nieprawidłowe wywołanie metody wirtualnej przy użyciu jest `call` (zamiast `callvirt`); oznacza to, że metoda jest można rozwiązać za pomocą klasy określonej przez metodę, a nie jako określony obiekt wywoływany z.</span><span class="sxs-lookup"><span data-stu-id="38ac7-810">It is valid to call a virtual method using `call` (rather than `callvirt`); this indicates that the method is to be resolved using the class specified by method rather than as specified dynamically from the object being invoked.</span></span>  
  
 3. <span data-ttu-id="38ac7-811">Należy pamiętać, że delegata `Invoke` metodę można wywołać przy użyciu jednej `call` lub `callvirt` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-811">Note that a delegate's `Invoke` method can be called with either the `call` or `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="38ac7-812"><xref:System.Security.SecurityException> może zostać zgłoszony, gdy zabezpieczenia systemu nie powoduje przyznania dostępu wywołującego do wywołaną metodę.</span><span class="sxs-lookup"><span data-stu-id="38ac7-812"><xref:System.Security.SecurityException> may be thrown if system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="38ac7-813">Kontrola zabezpieczeń może wystąpić, gdy instrukcje Microsoft języka pośredniego (MSIL) są konwertowane do kodu natywnego, a nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-813">The security check may occur when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38ac7-814">Podczas wywoływania metody System.Object w typach wartości, należy rozważyć użycie `constrained` prefiks z `callvirt` instrukcji zamiast emitowanie `call` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-814">When calling methods of System.Object on value types, consider using the `constrained` prefix with the `callvirt` instruction instead of emitting a `call` instruction.</span></span> <span data-ttu-id="38ac7-815">Spowoduje to usunięcie potrzebę Emituj IL różne w zależności od tego, czy typ wartości zastępuje metodę, unikając potencjalny problem z kontroli wersji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-815">This removes the need to emit different IL depending on whether or not the value type overrides the method, avoiding a potential versioning problem.</span></span> <span data-ttu-id="38ac7-816">Należy rozważyć użycie `constrained` prefiks podczas wywoływania metody interfejsu dla typów wartości, ponieważ metodzie typu wartości implementacja metody interfejsu można zmienić za pomocą `MethodImpl`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-816">Consider using the `constrained` prefix when invoking interface methods on value types, since the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="38ac7-817">Te problemy opisane bardziej szczegółowo w <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span><span class="sxs-lookup"><span data-stu-id="38ac7-817">These issues are described in more detail in the <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span></span>  
  
 <span data-ttu-id="38ac7-818">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenia metody można użyć `call` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-818">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `call` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-819">ILGenerator.Emit(OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="38ac7-819">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="38ac7-820">ILGenerator.EmitCall (OpCode, MethodInfo, Type[])</span><span class="sxs-lookup"><span data-stu-id="38ac7-820">ILGenerator.EmitCall(OpCode, MethodInfo, Type[])</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38ac7-821"><xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> Przewidziana metoda `varargs` wywołania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-821">The <xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> method is provided for `varargs` calls.</span></span> <span data-ttu-id="38ac7-822">Użyj <xref:System.Reflection.Emit.ILGenerator.Emit%2A> normalne wywołanie metody.</span><span class="sxs-lookup"><span data-stu-id="38ac7-822">Use the <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method for normal calls.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Calli">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Calli;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Calli" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Calli" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Calli As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Calli;" />
      <MemberSignature Language="F#" Value=" staticval mutable Calli : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Calli" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-823">Wywołuje metodę sygnalizowane na stosie oceny (jako wskaźnik do punktu wejścia) z argumentami opisanego przez Konwencję wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-823">Calls the method indicated on the evaluation stack (as a pointer to an entry point) with arguments described by a calling convention.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-824">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-824">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-825">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-825">Format</span></span>|<span data-ttu-id="38ac7-826">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-826">Assembly Format</span></span>|<span data-ttu-id="38ac7-827">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-827">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-828">29 < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-828">29 < `T` ></span></span>|<span data-ttu-id="38ac7-829">calli `callSiteDescr`</span><span class="sxs-lookup"><span data-stu-id="38ac7-829">calli `callSiteDescr`</span></span>|<span data-ttu-id="38ac7-830">Wywołuje metodę wskazywał z argumentami opisanego przez Konwencję wywołania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-830">Calls the method pointed to with arguments described by the calling convention.</span></span>|  
  
 <span data-ttu-id="38ac7-831">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-831">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-832">Argumenty metody `arg1` za pośrednictwem `argN` są przenoszone na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-832">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-833">Metoda wskaźnika wejścia spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-833">The method entry pointer is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-834">Argumenty metody `arg1` za pośrednictwem `argN` i wskaźnika wejścia metody są zdjęte ze stosu ze stosu, jest wykonywane wywołanie do metody.</span><span class="sxs-lookup"><span data-stu-id="38ac7-834">Method arguments `arg1` through `argN` and the method entry pointer are popped from the stack; the call to the method is performed.</span></span> <span data-ttu-id="38ac7-835">Po zakończeniu wartości zwracanej jest generowany przez metodę wywoływany i wysyłane do obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="38ac7-835">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
4.  <span data-ttu-id="38ac7-836">Wartość zwracana spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-836">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-837">`calli` Instrukcji wywołuje wskaźnika wejścia metody z argumentami `arg1` za pośrednictwem `argN`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-837">The `calli` instruction calls the method entry pointer with the arguments `arg1` through `argN`.</span></span> <span data-ttu-id="38ac7-838">Typy tych argumentów, których dotyczą określonych konwencji wywołania (`callSiteDesc`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-838">The types of these arguments are described by the specific calling convention (`callSiteDesc`).</span></span> <span data-ttu-id="38ac7-839">`calli` Instrukcji może być od razu poprzedzony `tail` prefiksu (<xref:System.Reflection.Emit.OpCodes.Tailcall>) do określenia, że bieżący stan metody powinny zostać zwolnione przed przeniesieniem formantu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-839">The `calli` instruction may be immediately preceded by a `tail` prefix (<xref:System.Reflection.Emit.OpCodes.Tailcall>) to specify that the current method state should be released before transferring control.</span></span> <span data-ttu-id="38ac7-840">Wywołanie spowoduje transfer kontroli do metody zaufania wyższe niż metoda pochodzenia ramki stosu nie zostanie zwolnione; Zamiast tego wykonywania będzie dyskretnie tak, jakby `tail` nie został podany.</span><span class="sxs-lookup"><span data-stu-id="38ac7-840">If the call would transfer control to a method of higher trust than the origin method the stack frame will not be released; instead, the execution will continue silently as if the `tail` had not been supplied.</span></span>  
  
 <span data-ttu-id="38ac7-841">Metoda wskaźnika wejścia zakłada się, że określonych wskaźnik do kodu natywnego (of na docelowym komputerze), które może być legalnie wywołane z argumentami opisanego przez Konwencję wywołania (token metadanych dla autonomicznego podpis).</span><span class="sxs-lookup"><span data-stu-id="38ac7-841">The method entry pointer is assumed to be a specific pointer to native code (of the target machine) that can be legitimately called with the arguments described by the calling convention (a metadata token for a stand-alone signature).</span></span> <span data-ttu-id="38ac7-842">Wskaźnik takie mogą być tworzone przy użyciu <xref:System.Reflection.Emit.OpCodes.Ldftn> lub <xref:System.Reflection.Emit.OpCodes.Ldvirtftn> instrukcje, lub przekazaną z kodu macierzystego.</span><span class="sxs-lookup"><span data-stu-id="38ac7-842">Such a pointer can be created using the <xref:System.Reflection.Emit.OpCodes.Ldftn> or <xref:System.Reflection.Emit.OpCodes.Ldvirtftn> instructions, or passed in from native code.</span></span>  
  
 <span data-ttu-id="38ac7-843">Konwencja wywoływania nie jest zaznaczone dynamicznie, więc kod używa tego `calli` instrukcji nie działa prawidłowo, jeśli miejsce docelowe nie są rzeczywiście używane określonej konwencji wywoływania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-843">The calling convention is not checked dynamically, so code that uses a `calli` instruction does not work correctly if the destination does not actually use the specified calling convention.</span></span>  
  
 <span data-ttu-id="38ac7-844">Argumenty są umieszczane na stosie w kolejności od lewej do prawej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-844">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="38ac7-845">Oznacza to, że pierwszy argument jest obliczana i umieszczane na stosie, drugi argument, a następnie innych, dopóki wszystkie niezbędne argumenty mają nad stosu w kolejności malejącej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-845">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="38ac7-846">Kompilowanie argument sekwencji kodu dla wystąpień lub metody wirtualnej musi push odwołania do tego wystąpienia (który nie może być odwołaniem o wartości zerowej) przed każdą argumentów widoczny dla użytkownika.</span><span class="sxs-lookup"><span data-stu-id="38ac7-846">The argument-building code sequence for an instance or virtual method must push that instance reference (which must not be a null reference) before any of the user-visible arguments.</span></span>  
  
 <span data-ttu-id="38ac7-847"><xref:System.Security.SecurityException> może zostać zgłoszony, gdy zabezpieczenia systemu nie powoduje przyznania dostępu wywołującego do wywołaną metodę.</span><span class="sxs-lookup"><span data-stu-id="38ac7-847"><xref:System.Security.SecurityException> may be thrown if the system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="38ac7-848">Kontrola zabezpieczeń może wystąpić, gdy instrukcje Microsoft języka pośredniego (MSIL) są konwertowane do kodu natywnego, a nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-848">The security check can occur when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="38ac7-849">Następujące <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> metod można użyć do wykonania `calli` instrukcji na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-849">The following <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> methods can be used to perform a `calli` instruction on the stack.</span></span> <span data-ttu-id="38ac7-850">Należy pamiętać, że `calli` powinna być wywoływana za pomocą poniższych metod, a nie za pomocą <xref:System.Reflection.Emit.ILGenerator.Emit%2A> klasy można umieścić instrukcję bezpośrednio na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-850">Note that `calli` should be called through the below methods rather than using the <xref:System.Reflection.Emit.ILGenerator.Emit%2A> class to place the instruction directly on the stack.</span></span>  
  
-   <span data-ttu-id="38ac7-851">ILGenerator.EmitCalli (Opcode, CallingConventions, typu Type [], Type[]) dla połączeń przy użyciu zarządzanego konwencję wywołania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-851">ILGenerator.EmitCalli(Opcode, CallingConventions, Type, Type[], Type[]) for calls using a managed calling convention.</span></span>  
  
-   <span data-ttu-id="38ac7-852">ILGenerator.EmitCalli (Opcode Type[]) CallingConvention, typ, dla połączeń przy użyciu niezarządzana konwencja wywołania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-852">ILGenerator.EmitCalli(Opcode, CallingConvention, Type, Type[]) for calls using an unmanaged calling convention.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Callvirt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Callvirt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Callvirt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Callvirt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Callvirt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Callvirt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Callvirt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Callvirt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-853">Wywołuje metodę późnym wiązaniem dla obiekt wypychanie wartości zwracanej na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-853">Calls a late-bound method on an object, pushing the return value onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-854">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-854">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-855">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-855">Format</span></span>|<span data-ttu-id="38ac7-856">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-856">Assembly Format</span></span>|<span data-ttu-id="38ac7-857">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-857">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-858">6F < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-858">6F < `T` ></span></span>|<span data-ttu-id="38ac7-859">callvirt `method`</span><span class="sxs-lookup"><span data-stu-id="38ac7-859">callvirt `method`</span></span>|<span data-ttu-id="38ac7-860">Wywołuje metodę określonej skojarzone z `obj`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-860">Calls a specific method associated with `obj`.</span></span>|  
  
 <span data-ttu-id="38ac7-861">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-861">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-862">Odwołanie do obiektu `obj` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-862">An object reference `obj` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-863">Argumenty metody `arg1` za pośrednictwem `argN` są przenoszone na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-863">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-864">Argumenty metody `arg1` za pośrednictwem `argN` i odwołanie do obiektu `obj` są zdjęte ze stosu ze stosu; wywołania metody, które jest wykonywane z tymi argumentami i sterowanie jest przekazywane do metody w `obj` odwołuje się do metody token metadanych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-864">Method arguments `arg1` through `argN` and the object reference `obj` are popped from the stack; the method call is performed with these arguments and control is transferred to the method in `obj` referred to by the method metadata token.</span></span> <span data-ttu-id="38ac7-865">Po zakończeniu wartości zwracanej jest generowany przez metodę wywoływany i wysyłane do obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="38ac7-865">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
4.  <span data-ttu-id="38ac7-866">Wartość zwracana spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-866">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-867">`callvirt` Instrukcji wywołuje metodę późnym wiązaniem dla obiekt.</span><span class="sxs-lookup"><span data-stu-id="38ac7-867">The `callvirt` instruction calls a late-bound method on an object.</span></span> <span data-ttu-id="38ac7-868">Oznacza to, że metoda jest wybierany zależności od typu środowiska uruchomieniowego `obj` zamiast widoczne we wskaźniku metody klasy kompilacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-868">That is, the method is chosen based on the runtime type of `obj` rather than the compile-time class visible in the method pointer.</span></span> <span data-ttu-id="38ac7-869">`Callvirt` można wywołać metodę wirtualnych do wystąpienia metody.</span><span class="sxs-lookup"><span data-stu-id="38ac7-869">`Callvirt` can be used to call both virtual and instance methods.</span></span> <span data-ttu-id="38ac7-870">`callvirt` Instrukcji może być od razu poprzedzony `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) prefiksu, aby określić, że bieżącej ramki stosu, powinny zostać zwolnione przed przeniesieniem formantu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-870">The `callvirt` instruction may be immediately preceded by a `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) prefix to specify that the current stack frame should be released before transferring control.</span></span> <span data-ttu-id="38ac7-871">Wywołania spowoduje transfer kontroli do metody zaufania wyższe niż oryginalnej metody ramki stosu nie zostanie zwolnione.</span><span class="sxs-lookup"><span data-stu-id="38ac7-871">If the call would transfer control to a method of higher trust than the original method the stack frame will not be released.</span></span>  
  
 <span data-ttu-id="38ac7-872">Metoda token metadanych zawiera nazwę, klasy i podpis metody do wywołania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-872">The method metadata token provides the name, class and signature of the method to call.</span></span> <span data-ttu-id="38ac7-873">Skojarzonej z klasy `obj` jest klasa, który jest wystąpieniem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-873">The class associated with `obj` is the class of which it is an instance.</span></span> <span data-ttu-id="38ac7-874">Jeśli klasa definiuje Metoda niestatyczna, zgodny z nazwą metody wskazanej i podpis, ta metoda jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="38ac7-874">If the class defines a non-static method that matches the indicated method name and signature, this method is called.</span></span> <span data-ttu-id="38ac7-875">W przeciwnym razie wszystkie klasy w łańcuchu klasy podstawowej tej klasy są sprawdzane w kolejności.</span><span class="sxs-lookup"><span data-stu-id="38ac7-875">Otherwise all classes in the base class chain of this class are checked in order.</span></span> <span data-ttu-id="38ac7-876">Jeśli nie jest znaleziono metody, występuje błąd.</span><span class="sxs-lookup"><span data-stu-id="38ac7-876">It is an error if no method is found.</span></span>  
  
 <span data-ttu-id="38ac7-877">`Callvirt` POP obiekt i argumenty skojarzone z poszczególnymi stosu oceny przed wywołaniem metody.</span><span class="sxs-lookup"><span data-stu-id="38ac7-877">`Callvirt` pops the object and the associated arguments off the evaluation stack before calling the method.</span></span> <span data-ttu-id="38ac7-878">Jeśli metoda ma wartość zwracaną, spoczywa na stosie po zakończeniu metody.</span><span class="sxs-lookup"><span data-stu-id="38ac7-878">If the method has a return value, it is pushed on the stack upon method completion.</span></span> <span data-ttu-id="38ac7-879">Na stronie wywoływanej `obj` parametru jest dostępny jako argument 0, `arg1` jako argument 1 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-879">On the callee side, the `obj` parameter is accessed as argument 0, `arg1` as argument 1, and so on.</span></span>  
  
 <span data-ttu-id="38ac7-880">Argumenty są umieszczane na stosie w kolejności od lewej do prawej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-880">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="38ac7-881">Oznacza to, że pierwszy argument jest obliczana i umieszczane na stosie, drugi argument, a następnie innych, dopóki wszystkie niezbędne argumenty mają nad stosu w kolejności malejącej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-881">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="38ac7-882">Odwołanie do wystąpienia `obj` (zawsze wymagany do `callvirt`) musi zostać przesunięta przed każdą argumentów widoczny dla użytkownika.</span><span class="sxs-lookup"><span data-stu-id="38ac7-882">The instance reference `obj` (always required for `callvirt`) must be pushed before any of the user-visible arguments.</span></span> <span data-ttu-id="38ac7-883">Podpis (odbywa się w tokenie metadanych) nie musi zawierać wpis na liście parametrów dla tego wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="38ac7-883">The signature (carried in the metadata token) need not contain an entry in the parameter list for the this pointer.</span></span>  
  
 <span data-ttu-id="38ac7-884">Należy pamiętać, że metoda wirtualna można także wywoływać za pomocą <xref:System.Reflection.Emit.OpCodes.Call> instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-884">Note that a virtual method can also be called using the <xref:System.Reflection.Emit.OpCodes.Call> instruction.</span></span>  
  
 <span data-ttu-id="38ac7-885"><xref:System.MissingMethodException> jest generowany, jeśli nie można odnaleźć metody niestatycznej z określoną nazwę i sygnaturę w skojarzonej z klasy `obj` ani dla żadnej z jej klas podstawowych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-885"><xref:System.MissingMethodException> is thrown if a non-static method with the indicated name and signature could not be found in the class associated with `obj` or any of its base classes.</span></span> <span data-ttu-id="38ac7-886">To jest zwykle wykrycie instrukcje Microsoft języka pośredniego (MSIL) są konwertowane do kodu natywnego, a nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-886">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="38ac7-887"><xref:System.NullReferenceException> jest generowany, jeśli obj ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-887"><xref:System.NullReferenceException> is thrown if obj is null.</span></span>  
  
 <span data-ttu-id="38ac7-888"><xref:System.Security.SecurityException> jest generowany, jeśli zabezpieczenia systemu nie powoduje przyznania dostępu wywołującego do wywołaną metodę.</span><span class="sxs-lookup"><span data-stu-id="38ac7-888"><xref:System.Security.SecurityException> is thrown if system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="38ac7-889">Kontrola zabezpieczeń może wystąpić po przekonwertowaniu listę CIL do kodu natywnego, a nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-889">The security check may occur when the CIL is converted to native code rather than at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38ac7-890">Podczas wywoływania metody System.Object w typach wartości, należy rozważyć użycie `constrained` prefiks z `callvirt` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-890">When calling methods of System.Object on value types, consider using the `constrained` prefix with the `callvirt` instruction.</span></span> <span data-ttu-id="38ac7-891">Spowoduje to usunięcie potrzebę Emituj IL różne w zależności od tego, czy typ wartości zastępuje metodę, unikając potencjalny problem z kontroli wersji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-891">This removes the need to emit different IL depending on whether or not the value type overrides the method, avoiding a potential versioning problem.</span></span> <span data-ttu-id="38ac7-892">Należy rozważyć użycie `constrained` prefiks podczas wywoływania metody interfejsu dla typów wartości, ponieważ metodzie typu wartości implementacja metody interfejsu można zmienić za pomocą `MethodImpl`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-892">Consider using the `constrained` prefix when invoking interface methods on value types, since the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="38ac7-893">Te problemy opisane bardziej szczegółowo w <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span><span class="sxs-lookup"><span data-stu-id="38ac7-893">These issues are described in more detail in the <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span></span>  
  
 <span data-ttu-id="38ac7-894">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `callvirt` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-894">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `callvirt` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-895">ILGenerator.Emit(OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="38ac7-895">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="38ac7-896">ILGenerator.EmitCall (OpCode, MethodInfo, Type[])</span><span class="sxs-lookup"><span data-stu-id="38ac7-896">ILGenerator.EmitCall(OpCode, MethodInfo, Type[])</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Castclass">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Castclass;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Castclass" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Castclass" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Castclass As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Castclass;" />
      <MemberSignature Language="F#" Value=" staticval mutable Castclass : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Castclass" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-897">Próbuje rzutować obiekt przekazywany przez odwołanie do określonej klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-897">Attempts to cast an object passed by reference to the specified class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-898">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-898">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-899">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-899">Format</span></span>|<span data-ttu-id="38ac7-900">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-900">Assembly Format</span></span>|<span data-ttu-id="38ac7-901">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-901">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-902">74 < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-902">74 < `T` ></span></span>|<span data-ttu-id="38ac7-903">castclass `class`</span><span class="sxs-lookup"><span data-stu-id="38ac7-903">castclass `class`</span></span>|<span data-ttu-id="38ac7-904">Rzutuje obiektu nowy obiekt typu `class`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-904">Casts an object to a new object of type `class`.</span></span>|  
  
 <span data-ttu-id="38ac7-905">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-905">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-906">Odwołanie do obiektu spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-906">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-907">Odwołanie do obiektu jest zdjęte ze stosu ze stosu; odwołuje się do obiektu jest rzutowane jako określony `class`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-907">The object reference is popped from the stack; the referenced object is cast as the specified `class`.</span></span>  
  
3.  <span data-ttu-id="38ac7-908">W przypadku powodzenia nowego odwołania do obiektu spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-908">If successful, a new object reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-909">`castclass` Instrukcji próbuje rzutowania odwołanie do obiektu (typ `O`) nad stosu do określonej klasy.</span><span class="sxs-lookup"><span data-stu-id="38ac7-909">The `castclass` instruction attempts to cast the object reference (type `O`) atop the stack to a specified class.</span></span> <span data-ttu-id="38ac7-910">Nowa klasa jest określany przez token metadanych, wskazując odpowiednią klasę.</span><span class="sxs-lookup"><span data-stu-id="38ac7-910">The new class is specified by a metadata token indicating the desired class.</span></span> <span data-ttu-id="38ac7-911">Jeśli klasa obiektu wierzchołku stosu nie implementuje nową klasę (zakładając, że nowa klasa jest interfejsem) i nie jest klasa pochodna nowej klasy, a następnie <xref:System.InvalidCastException> jest generowany.</span><span class="sxs-lookup"><span data-stu-id="38ac7-911">If the class of the object on the top of the stack does not implement the new class (assuming the new class is an interface) and is not a derived class of the new class then an <xref:System.InvalidCastException> is thrown.</span></span> <span data-ttu-id="38ac7-912">Jeśli odwołanie do obiektu jest odwołanie o wartości null, `castclass` zakończy się pomyślnie i zwraca nowy obiekt jako odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-912">If the object reference is a null reference, `castclass` succeeds and returns the new object as a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-913"><xref:System.InvalidCastException> jest generowany, jeśli obj nie można rzutować klasy.</span><span class="sxs-lookup"><span data-stu-id="38ac7-913"><xref:System.InvalidCastException> is thrown if obj cannot be cast to class.</span></span>  
  
 <span data-ttu-id="38ac7-914"><xref:System.TypeLoadException> jest generowany, jeśli nie można odnaleźć klasy.</span><span class="sxs-lookup"><span data-stu-id="38ac7-914"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="38ac7-915">To zwykle wykryto po przekonwertowaniu instrukcji Microsoft języka pośredniego (MSIL) do kodu natywnego, a nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-915">This is typically detected when a Microsoft Intermediate Language (MSIL)instruction is converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="38ac7-916">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `castclass` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-916">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `castclass` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-917">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="38ac7-917">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceq">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ceq;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ceq" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ceq" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ceq As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ceq;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ceq : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ceq" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-918">Porównuje dwie wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-918">Compares two values.</span>
          </span>
          <span data-ttu-id="38ac7-919">Czy są równe, liczbę całkowitą wartość 1 <see langword="(int32" />) spoczywa na stosie oceny; w przeciwnym razie wartość 0 (<see langword="int32" />) spoczywa na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-919">If they are equal, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-920">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-920">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-921">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-921">Format</span></span>|<span data-ttu-id="38ac7-922">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-922">Assembly Format</span></span>|<span data-ttu-id="38ac7-923">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-923">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-924">FE 01</span><span class="sxs-lookup"><span data-stu-id="38ac7-924">FE 01</span></span>|<span data-ttu-id="38ac7-925">ceq</span><span class="sxs-lookup"><span data-stu-id="38ac7-925">ceq</span></span>|<span data-ttu-id="38ac7-926">Wypychanie 1, jeśli `value1` jest równe `value2`; w przeciwnym razie wypchnięcia 0.</span><span class="sxs-lookup"><span data-stu-id="38ac7-926">Pushes 1 if `value1` equals `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="38ac7-927">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-927">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-928">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-928">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-929">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-929">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-930">`value2` i `value1` są zdjęte ze stosu ze stosu; `value1` jest porównywany `value2`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-930">`value2` and `value1` are popped from the stack; `value1` is compared to `value2`.</span></span>  
  
4.  <span data-ttu-id="38ac7-931">Jeśli `value1` jest równa `value2`, 1 spoczywa na stosie; w przeciwnym razie 0 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-931">If `value1` is equal to `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-932">`ceq` Porównuje instrukcji `value1` i `value2`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-932">The `ceq` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="38ac7-933">Jeśli `value1` jest równa `value2`, następnie 1 (typu `int32`) spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-933">If `value1` is equal to `value2`, then 1 (of type `int32`) is pushed on the stack.</span></span> <span data-ttu-id="38ac7-934">W przeciwnym razie wartość 0 (typu `int32`) spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-934">Otherwise 0 (of type `int32`) is pushed on the stack.</span></span>  
  
 <span data-ttu-id="38ac7-935">Dla liczba zmiennoprzecinkowa `ceq` zwróci 0, jeśli są nieuporządkowane liczby (NaN są jednego lub obu).</span><span class="sxs-lookup"><span data-stu-id="38ac7-935">For floating-point number, `ceq` will return 0 if the numbers are unordered (either or both are NaN).</span></span> <span data-ttu-id="38ac7-936">Nieskończone wartości są równe do siebie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-936">The infinite values are equal to themselves.</span></span>  
  
 <span data-ttu-id="38ac7-937">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ceq` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-937">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ceq` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-938">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-938">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cgt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cgt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cgt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cgt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cgt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cgt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cgt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cgt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-939">Porównuje dwie wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-939">Compares two values.</span>
          </span>
          <span data-ttu-id="38ac7-940">Jeśli pierwsza wartość jest większa od drugiej, liczbę całkowitą wartość 1 <see langword="(int32" />) spoczywa na stosie oceny; w przeciwnym razie wartość 0 (<see langword="int32" />) spoczywa na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-940">If the first value is greater than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-941">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-941">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-942">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-942">Format</span></span>|<span data-ttu-id="38ac7-943">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-943">Assembly Format</span></span>|<span data-ttu-id="38ac7-944">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-944">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-945">FE 02</span><span class="sxs-lookup"><span data-stu-id="38ac7-945">FE 02</span></span>|<span data-ttu-id="38ac7-946">cgt</span><span class="sxs-lookup"><span data-stu-id="38ac7-946">cgt</span></span>|<span data-ttu-id="38ac7-947">Wypychanie 1, jeśli `value1` jest większa niż `value2`; w przeciwnym razie wypchnięcia 0.</span><span class="sxs-lookup"><span data-stu-id="38ac7-947">Pushes 1 if `value1` is greater than `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="38ac7-948">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-948">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-949">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-949">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-950">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-950">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-951">`value2` i `value1` są zdjęte ze stosu ze stosu; `cgt` testów, jeśli `value1` jest większa niż `value2`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-951">`value2` and `value1` are popped from the stack; `cgt` tests if `value1` is greater than `value2`.</span></span>  
  
4.  <span data-ttu-id="38ac7-952">Jeśli `value1` jest większa niż `value2`, 1 spoczywa na stosie; w przeciwnym razie 0 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-952">If `value1` is greater than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-953">`cgt` Porównuje instrukcji `value1` i `value2`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-953">The `cgt` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="38ac7-954">Jeśli `value1` jest większa niż `value2`, a następnie `int32` wartość 1 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-954">If `value1` is strictly greater than `value2`, then an `int32` value of 1 is pushed on the stack.</span></span> <span data-ttu-id="38ac7-955">W przeciwnym razie `int32` wartość 0 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-955">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
-   <span data-ttu-id="38ac7-956">Na liczby zmiennoprzecinkowe `cgt` zwraca wartość 0, jeśli liczby są nieuporządkowaną (to znaczy, jeśli co najmniej jeden z argumentów jest wartością typu NaN).</span><span class="sxs-lookup"><span data-stu-id="38ac7-956">For floating-point numbers, `cgt` returns 0 if the numbers are unordered (that is, if one or both of the arguments are NaN).</span></span>  
  
 <span data-ttu-id="38ac7-957">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `cgt` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-957">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cgt` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-958">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-958">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cgt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cgt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cgt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cgt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cgt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cgt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cgt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cgt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-959">Porównuje dwie wartości bez znaku lub nieuporządkowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-959">Compares two unsigned or unordered values.</span>
          </span>
          <span data-ttu-id="38ac7-960">Jeśli pierwsza wartość jest większa od drugiej, liczbę całkowitą wartość 1 <see langword="(int32" />) spoczywa na stosie oceny; w przeciwnym razie wartość 0 (<see langword="int32" />) spoczywa na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-960">If the first value is greater than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-961">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-961">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-962">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-962">Format</span></span>|<span data-ttu-id="38ac7-963">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-963">Assembly Format</span></span>|<span data-ttu-id="38ac7-964">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-964">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-965">FE 03</span><span class="sxs-lookup"><span data-stu-id="38ac7-965">FE 03</span></span>|<span data-ttu-id="38ac7-966">cgt.un</span><span class="sxs-lookup"><span data-stu-id="38ac7-966">cgt.un</span></span>|<span data-ttu-id="38ac7-967">Wypychanie 1, jeśli `value1` jest większa niż `value2`; w przeciwnym razie wypchnięcia 0 (wartości bez znaku).</span><span class="sxs-lookup"><span data-stu-id="38ac7-967">Pushes 1 if `value1` is greater than `value2`; else pushes 0 (unsigned values).</span></span>|  
  
 <span data-ttu-id="38ac7-968">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-968">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-969">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-969">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-970">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-970">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-971">`value2` i `value1` są zdjęte ze stosu ze stosu; `cgt.un` testów, jeśli `value1` jest większa niż `value2`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-971">`value2` and `value1` are popped from the stack; `cgt.un` tests if `value1` is greater than `value2`.</span></span>  
  
4.  <span data-ttu-id="38ac7-972">Jeśli `value1` jest większa niż `value2`, 1 spoczywa na stosie; w przeciwnym razie 0 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-972">If `value1` is greater than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-973">`int32` Wartość 1 spoczywa na stosie, jeśli dowolny z nich jest `true` :</span><span class="sxs-lookup"><span data-stu-id="38ac7-973">An `int32` value of 1 is pushed on the stack if any of the following is `true` :</span></span>  
  
 <span data-ttu-id="38ac7-974">Na liczby zmiennoprzecinkowe `value1` nie jest określona w odniesieniu do `value2`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-974">For floating-point numbers, `value1` is not ordered with respect to `value2`.</span></span>  
  
 <span data-ttu-id="38ac7-975">Dla wartości całkowitych `value1` jest większa niż `value2` rozpatrywane jako liczby bez znaku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-975">For integer values, `value1` is strictly greater than `value2` when considered as unsigned numbers.</span></span>  
  
 <span data-ttu-id="38ac7-976">W przeciwnym razie `int32` wartość 0 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-976">Otherwise an `int32` value of 0 is pushed on the stack.</span></span>  
  
 <span data-ttu-id="38ac7-977">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `cgt.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-977">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cgt.un` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-978">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-978">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ckfinite">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ckfinite;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ckfinite" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ckfinite" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ckfinite As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ckfinite;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ckfinite : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ckfinite" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-979">Zgłasza wyjątek <see cref="T:System.ArithmeticException" /> Jeśli wartość nie jest wartością skończoną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-979">Throws <see cref="T:System.ArithmeticException" /> if value is not a finite number.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-980">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-980">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-981">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-981">Format</span></span>|<span data-ttu-id="38ac7-982">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-982">Assembly Format</span></span>|<span data-ttu-id="38ac7-983">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-983">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-984">C3</span><span class="sxs-lookup"><span data-stu-id="38ac7-984">C3</span></span>|<span data-ttu-id="38ac7-985">ckfinite</span><span class="sxs-lookup"><span data-stu-id="38ac7-985">ckfinite</span></span>|<span data-ttu-id="38ac7-986">throw <xref:System.ArithmeticException> Jeśli wartość nie jest wartością skończoną.</span><span class="sxs-lookup"><span data-stu-id="38ac7-986">throw <xref:System.ArithmeticException> if value is not a finite number.</span></span>|  
  
 <span data-ttu-id="38ac7-987">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-987">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-988">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-988">`value` is pushed onto the stack..</span></span>  
  
2.  <span data-ttu-id="38ac7-989">`value` jest zdjęte ze stosu ze stosu i `ckfinite` instrukcji odbywa się na nim.</span><span class="sxs-lookup"><span data-stu-id="38ac7-989">`value` is popped from the stack and the `ckfinite` instruction is performed on it.</span></span>  
  
3.  <span data-ttu-id="38ac7-990">`value` spoczywa wstecz na stosie, jeśli nie jest wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-990">`value` is pushed back onto the stack if no exception is thrown.</span></span>  
  
 <span data-ttu-id="38ac7-991">`ckfinite instruction` Zgłasza <xref:System.ArithmeticException> Jeśli `value` (liczba zmiennoprzecinkowa) jest albo "not a number" wartość (NaN) lub `+-` wartości nieskończonej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-991">The `ckfinite instruction` throws <xref:System.ArithmeticException> if `value` (a floating-point number) is either a "not a number" value (NaN) or a `+-` infinity value.</span></span> <span data-ttu-id="38ac7-992">`Ckfinite` pozostawia wartości na stosie, jeśli nie jest wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-992">`Ckfinite` leaves the value on the stack if no exception is thrown.</span></span> <span data-ttu-id="38ac7-993">Wykonanie nie jest określona, jeśli `value` nie jest liczba zmiennoprzecinkowa.</span><span class="sxs-lookup"><span data-stu-id="38ac7-993">Execution is unspecified if `value` is not a floating-point number.</span></span>  
  
 <span data-ttu-id="38ac7-994"><xref:System.ArithmeticException> wygenerowany, jeśli `value` nie jest liczbą "normal".</span><span class="sxs-lookup"><span data-stu-id="38ac7-994"><xref:System.ArithmeticException> is thrown if `value` is not a 'normal' number.</span></span>  
  
 <span data-ttu-id="38ac7-995">Należy pamiętać, że specjalny wyjątek lub klasy pochodnej z <xref:System.ArithmeticException> może być bardziej odpowiednie, przekazywanie niepoprawną wartość do obsługi wyjątków.</span><span class="sxs-lookup"><span data-stu-id="38ac7-995">Note that a special exception or a derived class of <xref:System.ArithmeticException> may be more appropriate, passing the incorrect value to the exception handler.</span></span>  
  
 <span data-ttu-id="38ac7-996">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ckfinite` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-996">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ckfinite` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-997">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-997">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Clt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Clt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Clt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Clt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Clt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Clt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Clt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-998">Porównuje dwie wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-998">Compares two values.</span>
          </span>
          <span data-ttu-id="38ac7-999">Jeśli pierwsza wartość jest mniejsza od drugiej, liczbę całkowitą wartość 1 <see langword="(int32" />) spoczywa na stosie oceny; w przeciwnym razie wartość 0 (<see langword="int32" />) spoczywa na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-999">If the first value is less than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1000">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1000">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1001">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1001">Format</span></span>|<span data-ttu-id="38ac7-1002">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1002">Assembly Format</span></span>|<span data-ttu-id="38ac7-1003">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1003">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1004">FE 04</span><span class="sxs-lookup"><span data-stu-id="38ac7-1004">FE 04</span></span>|<span data-ttu-id="38ac7-1005">ClT</span><span class="sxs-lookup"><span data-stu-id="38ac7-1005">clt</span></span>|<span data-ttu-id="38ac7-1006">Wypychanie 1, jeśli `value1` jest mniejsza niż `value2`; w przeciwnym razie wypchnięcia 0.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1006">Pushes 1 if `value1` is less than `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="38ac7-1007">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, to: `value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1007">The stack transitional behavior, in sequential order, is: `value1` is pushed onto the stack.</span></span>  
  
1.  <span data-ttu-id="38ac7-1008">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1008">`value2` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1009">`value2` i `value1` są zdjęte ze stosu ze stosu; `clt` testów, jeśli `value1` jest mniejsza niż `value2`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1009">`value2` and `value1` are popped from the stack; `clt` tests if `value1` is less than `value2`.</span></span>  
  
3.  <span data-ttu-id="38ac7-1010">Jeśli `value1` jest mniejsza niż `value2`, 1 spoczywa na stosie; w przeciwnym razie 0 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1010">If `value1` is less than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1011">`clt` Porównuje instrukcji `value1` i `value2`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1011">The `clt` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="38ac7-1012">Jeśli `value1` jest mniejsza niż `value2`, a następnie `int32` wartość 1 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1012">If `value1` is strictly less than `value2`, then an `int32` value of 1 is pushed on the stack.</span></span> <span data-ttu-id="38ac7-1013">W przeciwnym razie `int32` wartość 0 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1013">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
-   <span data-ttu-id="38ac7-1014">Na liczby zmiennoprzecinkowe `clt` zwraca wartość 0, jeśli liczby są nieuporządkowaną (to znaczy, jeśli co najmniej jeden z argumentów jest wartością typu NaN).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1014">For floating-point numbers, `clt` returns 0 if the numbers are unordered (that is, if one or both of the arguments are NaN).</span></span>  
  
 <span data-ttu-id="38ac7-1015">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `clt` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1015">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `clt` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1016">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1016">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Clt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Clt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Clt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Clt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Clt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Clt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Clt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1017">Porównuje wartości bez znaku lub nieuporządkowaną <paramref name="value1" /> i <paramref name="value2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1017">Compares the unsigned or unordered values <paramref name="value1" /> and <paramref name="value2" />.</span>
          </span>
          <span data-ttu-id="38ac7-1018">Jeśli <paramref name="value1" /> jest mniejsza niż <paramref name="value2" />, następnie wartość całkowita 1 <see langword="(int32" />) spoczywa na obliczanie stosu; w przeciwnym razie 0 (<see langword="int32" />) spoczywa na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1018">If <paramref name="value1" /> is less than <paramref name="value2" />, then the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1019">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1019">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1020">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1020">Format</span></span>|<span data-ttu-id="38ac7-1021">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1021">Assembly Format</span></span>|<span data-ttu-id="38ac7-1022">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1022">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1023">FE 05</span><span class="sxs-lookup"><span data-stu-id="38ac7-1023">FE 05</span></span>|<span data-ttu-id="38ac7-1024">ClT.UN</span><span class="sxs-lookup"><span data-stu-id="38ac7-1024">clt.un</span></span>|<span data-ttu-id="38ac7-1025">Wypychanie 1, jeśli `value1` jest mniejsza niż `value2`; w przeciwnym razie wypchnięcia 0 (wartości bez znaku).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1025">Pushes 1 if `value1` is less than `value2`; else pushes 0 (unsigned values).</span></span>|  
  
 <span data-ttu-id="38ac7-1026">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1026">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1027">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1027">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1028">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1028">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-1029">`value2` i `value1` są zdjęte ze stosu ze stosu; `clt.un` testów, jeśli `value1` jest mniejsza niż `value2`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1029">`value2` and `value1` are popped from the stack; `clt.un` tests if `value1` is less than `value2`.</span></span>  
  
4.  <span data-ttu-id="38ac7-1030">Jeśli `value1` jest mniejsza niż `value2`, 1 spoczywa na stosie; w przeciwnym razie 0 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1030">If `value1` is less than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1031">`clt.un` Porównuje instrukcji `value1` i `value2`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1031">The `clt.un` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="38ac7-1032">`int32` Wartość 1 spoczywa na stosie, jeśli jest spełniony jeden z następujących czynności:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1032">An `int32` value of 1 is pushed on the stack if any of the following is true:</span></span>  
  
-   <span data-ttu-id="38ac7-1033">`value1` jest mniejsza niż `value2` (jak w przypadku `clt`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1033">`value1` is strictly less than `value2` (as for `clt`).</span></span>  
  
-   <span data-ttu-id="38ac7-1034">Na liczby zmiennoprzecinkowe `value1` nie jest określona w odniesieniu do `value2`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1034">For floating-point numbers, `value1` is not ordered with respect to `value2`.</span></span>  
  
-   <span data-ttu-id="38ac7-1035">Dla wartości całkowitych `value1` jest mniejsza niż `value2` rozpatrywane jako liczby bez znaku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1035">For integer values, `value1` is strictly less than `value2` when considered as unsigned numbers.</span></span>  
  
 <span data-ttu-id="38ac7-1036">W przeciwnym razie `int32` wartość 0 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1036">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1037">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `clt.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1037">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `clt.un` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1038">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1038">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Constrained">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Constrained;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Constrained" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Constrained" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Constrained As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Constrained;" />
      <MemberSignature Language="F#" Value=" staticval mutable Constrained : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Constrained" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1039">Ogranicza typ, na którym jest nawiązane połączenie metoda wirtualna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1039">Constrains the type on which a virtual method call is made.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1040">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu język pośredni (MSIL) firmy Microsoft, wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1040">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1041">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1041">Format</span></span>|<span data-ttu-id="38ac7-1042">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1042">Assembly Format</span></span>|<span data-ttu-id="38ac7-1043">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1043">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1044">FE 16 < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-1044">FE 16 < `T` ></span></span>|<span data-ttu-id="38ac7-1045">ograniczone.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1045">constrained.</span></span> `thisType`|<span data-ttu-id="38ac7-1046">Wywołanie metody wirtualnej dla takiego typu, jest ograniczona do typu `T`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1046">Call a virtual method on a type constrained to be type `T`.</span></span>|  
  
 <span data-ttu-id="38ac7-1047">`constrained` Prefiks jest dozwolone tylko w systemie `callvirt` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1047">The `constrained` prefix is permitted only on a `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="38ac7-1048">Stan, w tym momencie stosu MSIL musi być w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1048">The state of the MSIL stack at this point must be as follows:</span></span>  
  
1.  <span data-ttu-id="38ac7-1049">Wskaźnik zarządzanych, `ptr`, spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1049">A managed pointer, `ptr`, is pushed onto the stack.</span></span> <span data-ttu-id="38ac7-1050">Typ `ptr` musi być wskaźnikiem zarządzanych (`&`) do `thisType`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1050">The type of `ptr` must be a managed pointer (`&`) to `thisType`.</span></span> <span data-ttu-id="38ac7-1051">Należy pamiętać, że jest inny niż w przypadku unprefixed `callvirt` instrukcji, która oczekuje odwołania do elementu `thisType`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1051">Note that this is different from the case of an unprefixed `callvirt` instruction, which expects a reference of `thisType`.</span></span>  
  
2.  <span data-ttu-id="38ac7-1052">Argumenty metody `arg1` za pośrednictwem `argN` są przenoszone na stosie, tak jak w przypadku unprefixed `callvirt` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1052">Method arguments `arg1` through `argN` are pushed onto the stack, just as with an unprefixed `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="38ac7-1053">`constrained` Prefiks umożliwia `callvirt` instrukcje, które ma zostać wykonane w jednolity sposób niezależny od czy `thisType` jest typem wartości lub typem referencyjnym.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1053">The `constrained` prefix is designed to allow `callvirt` instructions to be made in a uniform way independent of whether `thisType` is a value type or a reference type.</span></span>  
  
 <span data-ttu-id="38ac7-1054">Gdy `callvirt` `method` poprzedzony instrukcji `constrained` `thisType`, instrukcja jest wykonywana w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1054">When a `callvirt` `method` instruction has been prefixed by `constrained` `thisType`, the instruction is executed as follows:</span></span>  
  
-   <span data-ttu-id="38ac7-1055">Jeśli `thisType` jest następnie typu odwołania (w przeciwieństwie do typu wartości) `ptr` jest wyłuskiwany i przekazane jako wskaźnik "this", aby `callvirt` z `method`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1055">If `thisType` is a reference type (as opposed to a value type) then `ptr` is dereferenced and passed as the 'this' pointer to the `callvirt` of `method`.</span></span>  
  
-   <span data-ttu-id="38ac7-1056">Jeśli `thisType` jest typem wartości i `thisType` implementuje `method` następnie `ptr` została przekazana bez modyfikacji jako wskaźnik "this", aby `call` `method` instrukcję do wykonania `method` przez `thisType`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1056">If `thisType` is a value type and `thisType` implements `method` then `ptr` is passed unmodified as the 'this' pointer to a `call` `method` instruction, for the implementation of `method` by `thisType`.</span></span>  
  
-   <span data-ttu-id="38ac7-1057">Jeśli `thisType` jest typem wartości i `thisType` nie implementuje `method` następnie `ptr` jest wyłuskiwany, opakowany i przekazane jako wskaźnik "this", aby `callvirt` `method` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1057">If `thisType` is a value type and `thisType` does not implement `method` then `ptr` is dereferenced, boxed, and passed as the 'this' pointer to the `callvirt` `method` instruction.</span></span>  
  
 <span data-ttu-id="38ac7-1058">Tym ostatnim przypadku może wystąpić tylko wtedy, gdy `method` została zdefiniowana w <xref:System.Object>, <xref:System.ValueType>, lub <xref:System.Enum> i nie jest zastępowana przez `thisType`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1058">This last case can occur only when `method` was defined on <xref:System.Object>, <xref:System.ValueType>, or <xref:System.Enum> and not overridden by `thisType`.</span></span> <span data-ttu-id="38ac7-1059">W takim przypadku opakowanie powoduje, że kopia oryginalnego obiektu ma zostać wykonane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1059">In this case, the boxing causes a copy of the original object to be made.</span></span> <span data-ttu-id="38ac7-1060">Jednak ponieważ żaden z metody <xref:System.Object>, <xref:System.ValueType>, i <xref:System.Enum> zmiany stanu obiektu, nie można wykryć tego faktów.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1060">However, because none of the methods of <xref:System.Object>, <xref:System.ValueType>, and <xref:System.Enum> modify the state of the object, this fact cannot be detected.</span></span>  
  
 <span data-ttu-id="38ac7-1061">`constrained` Prefiks obsługuje generatory IL, tworzonych przez kod rodzajowy.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1061">The `constrained` prefix supports IL generators that create generic code.</span></span> <span data-ttu-id="38ac7-1062">Zwykle `callvirt` instrukcji jest nieprawidłowy dla typów wartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1062">Normally the `callvirt` instruction is not valid on value types.</span></span> <span data-ttu-id="38ac7-1063">Zamiast tego jest to wymagane czy kompilatory IL skutecznie na przekształcenie "this" opisanych powyżej w czasie kompilacji, w zależności od typu `ptr` i wywołania metody.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1063">Instead it is required that IL compilers effectively perform the 'this' transformation outlined above at compile time, depending on the type of `ptr` and the method being called.</span></span> <span data-ttu-id="38ac7-1064">Jednakże, gdy `ptr` jest typu ogólnego, który jest nieznany w czasie kompilacji nie jest możliwe tej transformacji w czasie kompilacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1064">However, when `ptr` is a generic type that is unknown at compile time, it is not possible to make this transformation at compile time.</span></span>  
  
 <span data-ttu-id="38ac7-1065">`constrained` Opcode umożliwia kompilatory IL do wywoływania funkcji wirtualnych w jednolity sposób niezależny od czy `ptr` jest typem wartości lub typem referencyjnym.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1065">The `constrained` opcode allows IL compilers to make a call to a virtual function in a uniform way independent of whether `ptr` is a value type or a reference type.</span></span> <span data-ttu-id="38ac7-1066">Mimo że jest on przeznaczony do sprawę gdzie `thisType` jest zmienną typu ogólnego `constrained` prefiksu również działa dla typów nierodzajowe i może zmniejszyć złożoność Generowanie wywołania wirtualnej w językach, które Ukryj rozróżnienia typów wartości i typy referencyjne.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1066">Although it is intended for the case where `thisType` is a generic type variable, the `constrained` prefix also works for nongeneric types and can reduce the complexity of generating virtual calls in languages that hide the distinction between value types and reference types.</span></span>  
  
 <span data-ttu-id="38ac7-1067">Przy użyciu `constrained` prefiks pozwala uniknąć potencjalnych problemów versioning z typami wartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1067">Using the `constrained` prefix also avoids potential versioning problems with value types.</span></span> <span data-ttu-id="38ac7-1068">Jeśli `constrained` prefiks nie jest używany, różnych IL musi wysyłanego w zależności od tego, czy typ wartości zastępuje metodę System.Object.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1068">If the `constrained` prefix is not used, different IL must be emitted depending on whether or not a value type overrides a method of System.Object.</span></span> <span data-ttu-id="38ac7-1069">Na przykład, jeśli typ wartości `V` zastępuje metodę Object.ToString() `call` `V.ToString()` wysyłanego instrukcji; Jeśli nie, `box` instrukcji i `callvirt` `Object.ToString()` są emitowane instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1069">For example, if a value type `V` overrides the Object.ToString() method, a `call` `V.ToString()` instruction is emitted; if it does not, a `box` instruction and a `callvirt` `Object.ToString()` instruction are emitted.</span></span> <span data-ttu-id="38ac7-1070">Przechowywanie wersji może wystąpić problem w pierwszym przypadku, jeśli zastąpienie później zostanie usunięty, a w drugim przypadku jeśli zastąpienie później zostanie dodany.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1070">A versioning problem can arise in the former case if the override is later removed, and in the latter case if an override is later added.</span></span>  
  
 <span data-ttu-id="38ac7-1071">`constrained` Prefiks można również dla wywołania metody interfejsu dla typów wartości, ponieważ w metodzie typu wartości implementacja metody interfejsu można zmienić za pomocą `MethodImpl`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1071">The `constrained` prefix can also be used for invocation of interface methods on value types, because the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="38ac7-1072">Jeśli `constrained` prefiks nie jest używany, kompilator wymusza na wybranie wartości typu metody, aby powiązać w czasie kompilacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1072">If the `constrained` prefix is not used, the compiler is forced to choose which of the value type's methods to bind to at compile time.</span></span> <span data-ttu-id="38ac7-1073">Przy użyciu `constrained` prefiks umożliwia MSIL powiązać metodę, która implementuje metody interfejsu w czasie wykonywania, a nie w czasie kompilacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1073">Using the `constrained` prefix allows the MSIL to bind to the method that implements the interface method at run time, rather than at compile time.</span></span>  
  
 <span data-ttu-id="38ac7-1074">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `constrained` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1074">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `constrained` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1075">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1075">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1076">Konwertuje wartość na szczycie stosu oceny do <see langword="native int" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1076">Converts the value on top of the evaluation stack to <see langword="native int" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1077">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1077">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1078">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1078">Format</span></span>|<span data-ttu-id="38ac7-1079">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1079">Assembly Format</span></span>|<span data-ttu-id="38ac7-1080">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1080">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1081">D3</span><span class="sxs-lookup"><span data-stu-id="38ac7-1081">D3</span></span>|<span data-ttu-id="38ac7-1082">conv.i</span><span class="sxs-lookup"><span data-stu-id="38ac7-1082">conv.i</span></span>|<span data-ttu-id="38ac7-1083">Konwertuj na `native int`, położenia `native int` na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1083">Convert to `native int`, pushing `native int` on stack.</span></span>|  
  
 <span data-ttu-id="38ac7-1084">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1084">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1085">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1085">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1086">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1086">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="38ac7-1087">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1087">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1088">`conv.i` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i pozostaw, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1088">The `conv.i` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1089">Liczby całkowite z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.i` lub `conv.u` jest używany w takim przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1089">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="38ac7-1090">Wartości zmiennoprzecinkowe są konwertowane na `F` typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1090">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="38ac7-1091">Konwersja z liczby zmiennoprzecinkowe do całkowitych wartości obcina liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1091">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="38ac7-1092">Podczas konwertowania z `float64` do `float32`, dokładność, mogą zostać utracone.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1092">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="38ac7-1093">Jeśli `value` jest zbyt duży, aby zmieścić ją w `float32 (F)`, nieskończoności dodatniej (Jeśli `value` jest dodatnia) lub negatywną infinity (Jeśli `value` jest ujemna) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1093">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="38ac7-1094">Przepełnienie w przypadku konwertowania typu jeden argument do innej, najbardziej znaczących bitów są obcinane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1094">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="38ac7-1095">Jeśli wynik jest mniejsza niż `int32`, wartość jest znakiem do wypełnienia gniazda.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1095">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="38ac7-1096">Jeśli wystąpi przepełnienie konwertowanie typ zmiennoprzecinkowy na liczbę całkowitą wartość zwracana jest nieokreślony.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1096">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="38ac7-1097">Wyjątki nie są nigdy generowany, gdy za pomocą tego pola.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1097">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="38ac7-1098">Zobacz <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> i <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> równoważne instrukcje, które spowoduje zgłoszenie wyjątku, gdy typ wyniku nie można poprawnie reprezentują wartości wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1098">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="38ac7-1099">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.i` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1099">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1100">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1100">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1101">Konwertuje wartość na szczycie stosu oceny do <see langword="int8" />, stanowi rozszerzenie (PAD) do <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1101">Converts the value on top of the evaluation stack to <see langword="int8" />, then extends (pads) it to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1102">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1102">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1103">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1103">Format</span></span>|<span data-ttu-id="38ac7-1104">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1104">Assembly Format</span></span>|<span data-ttu-id="38ac7-1105">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1105">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1106">67</span><span class="sxs-lookup"><span data-stu-id="38ac7-1106">67</span></span>|<span data-ttu-id="38ac7-1107">conv.I1</span><span class="sxs-lookup"><span data-stu-id="38ac7-1107">conv.i1</span></span>|<span data-ttu-id="38ac7-1108">Konwertuj na `int8`, położenia `int32` na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1108">Convert to `int8`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="38ac7-1109">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1109">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1110">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1110">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1111">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1111">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="38ac7-1112">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1112">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1113">`conv.i1` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i pozostaw, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1113">The `conv.i1` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1114">Liczby całkowite z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.i` lub `conv.u` jest używany w takim przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1114">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="38ac7-1115">Wartości zmiennoprzecinkowe są konwertowane na `F` typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1115">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="38ac7-1116">Konwersja z liczby zmiennoprzecinkowe do całkowitych wartości obcina liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1116">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="38ac7-1117">Podczas konwertowania z `float64` do `float32`, dokładność, mogą zostać utracone.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1117">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="38ac7-1118">Jeśli `value` jest zbyt duży, aby zmieścić ją w `float32 (F)`, nieskończoności dodatniej (Jeśli `value` jest dodatnia) lub negatywną infinity (Jeśli `value` jest ujemna) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1118">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="38ac7-1119">Przepełnienie w przypadku konwertowania typu jeden argument do innej, najbardziej znaczących bitów są obcinane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1119">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="38ac7-1120">Jeśli wynik jest mniejsza niż `int32`, wartość jest znakiem do wypełnienia gniazda.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1120">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="38ac7-1121">Jeśli wystąpi przepełnienie konwertowanie typ zmiennoprzecinkowy na liczbę całkowitą wartość zwracana jest nieokreślony.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1121">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="38ac7-1122">Wyjątki nie są nigdy generowany, gdy za pomocą tego pola.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1122">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="38ac7-1123">Zobacz <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> i <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> równoważne instrukcje, które spowoduje zgłoszenie wyjątku, gdy typ wyniku nie można poprawnie reprezentują wartości wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1123">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="38ac7-1124">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.i1` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1124">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i1` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1125">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1125">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1126">Konwertuje wartość na szczycie stosu oceny do <see langword="int16" />, stanowi rozszerzenie (PAD) do <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1126">Converts the value on top of the evaluation stack to <see langword="int16" />, then extends (pads) it to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1127">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1127">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1128">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1128">Format</span></span>|<span data-ttu-id="38ac7-1129">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1129">Assembly Format</span></span>|<span data-ttu-id="38ac7-1130">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1130">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1131">68</span><span class="sxs-lookup"><span data-stu-id="38ac7-1131">68</span></span>|<span data-ttu-id="38ac7-1132">conv.i2</span><span class="sxs-lookup"><span data-stu-id="38ac7-1132">conv.i2</span></span>|<span data-ttu-id="38ac7-1133">Konwertuj na `int16`, położenia `int32` na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1133">Convert to `int16`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="38ac7-1134">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1134">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1135">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1135">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1136">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1136">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="38ac7-1137">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1137">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1138">`conv.i2` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i pozostaw, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1138">The `conv.i2` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1139">Liczby całkowite z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.i` lub `conv.u` jest używany w takim przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1139">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="38ac7-1140">Wartości zmiennoprzecinkowe są konwertowane na `F` typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1140">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="38ac7-1141">Konwersja z liczby zmiennoprzecinkowe do całkowitych wartości obcina liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1141">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="38ac7-1142">Podczas konwertowania z `float64` do `float32`, dokładność, mogą zostać utracone.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1142">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="38ac7-1143">Jeśli `value` jest zbyt duży, aby zmieścić ją w `float32 (F)`, nieskończoności dodatniej (Jeśli `value` jest dodatnia) lub negatywną infinity (Jeśli `value` jest ujemna) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1143">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="38ac7-1144">Przepełnienie w przypadku konwertowania typu jeden argument do innej, najbardziej znaczących bitów są obcinane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1144">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="38ac7-1145">Jeśli wynik jest mniejsza niż `int32`, wartość jest znakiem do wypełnienia gniazda.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1145">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="38ac7-1146">Jeśli wystąpi przepełnienie konwertowanie typ zmiennoprzecinkowy na liczbę całkowitą wartość zwracana jest nieokreślony.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1146">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="38ac7-1147">Wyjątki nie są nigdy generowany, gdy za pomocą tego pola.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1147">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="38ac7-1148">Zobacz <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> i <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> równoważne instrukcje, które spowoduje zgłoszenie wyjątku, gdy typ wyniku nie można poprawnie reprezentują wartości wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1148">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="38ac7-1149">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.i2` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1149">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i2` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1150">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1150">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1151">Konwertuje wartość na szczycie stosu oceny do <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1151">Converts the value on top of the evaluation stack to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1152">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1152">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1153">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1153">Format</span></span>|<span data-ttu-id="38ac7-1154">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1154">Assembly Format</span></span>|<span data-ttu-id="38ac7-1155">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1155">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1156">69</span><span class="sxs-lookup"><span data-stu-id="38ac7-1156">69</span></span>|<span data-ttu-id="38ac7-1157">conv.I4</span><span class="sxs-lookup"><span data-stu-id="38ac7-1157">conv.i4</span></span>|<span data-ttu-id="38ac7-1158">Konwertuj na `int32`, położenia `int32` na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1158">Convert to `int32`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="38ac7-1159">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1159">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1160">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1160">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1161">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1161">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="38ac7-1162">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1162">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1163">`conv.i4` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i pozostaw, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1163">The `conv.i4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1164">Liczby całkowite z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.i` lub `conv.u` jest używany w takim przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1164">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="38ac7-1165">Wartości zmiennoprzecinkowe są konwertowane na `F` typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1165">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="38ac7-1166">Konwersja z liczby zmiennoprzecinkowe do całkowitych wartości obcina liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1166">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="38ac7-1167">Podczas konwertowania z `float64` do `float32`, dokładność, mogą zostać utracone.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1167">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="38ac7-1168">Jeśli `value` jest zbyt duży, aby zmieścić ją w `float32 (F)`, nieskończoności dodatniej (Jeśli `value` jest dodatnia) lub negatywną infinity (Jeśli `value` jest ujemna) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1168">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="38ac7-1169">Przepełnienie w przypadku konwertowania typu jeden argument do innej, najbardziej znaczących bitów są obcinane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1169">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="38ac7-1170">Jeśli wynik jest mniejsza niż `int32`, wartość jest znakiem do wypełnienia gniazda.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1170">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="38ac7-1171">Jeśli wystąpi przepełnienie konwertowanie typ zmiennoprzecinkowy na liczbę całkowitą wartość zwracana jest nieokreślony.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1171">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="38ac7-1172">Wyjątki nie są nigdy generowany, gdy za pomocą tego pola.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1172">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="38ac7-1173">Zobacz <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> i <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> równoważne instrukcje, które spowoduje zgłoszenie wyjątku, gdy typ wyniku nie można poprawnie reprezentują wartości wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1173">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="38ac7-1174">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.i4` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1174">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i4` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1175">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1175">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1176">Konwertuje wartość na szczycie stosu oceny do <see langword="int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1176">Converts the value on top of the evaluation stack to <see langword="int64" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1177">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1177">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1178">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1178">Format</span></span>|<span data-ttu-id="38ac7-1179">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1179">Assembly Format</span></span>|<span data-ttu-id="38ac7-1180">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1180">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1181">6A</span><span class="sxs-lookup"><span data-stu-id="38ac7-1181">6A</span></span>|<span data-ttu-id="38ac7-1182">conv.I8</span><span class="sxs-lookup"><span data-stu-id="38ac7-1182">conv.i8</span></span>|<span data-ttu-id="38ac7-1183">Konwertuj na `int64`, położenia `int64` na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1183">Convert to `int64`, pushing `int64` on stack.</span></span>|  
  
 <span data-ttu-id="38ac7-1184">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1184">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1185">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1185">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1186">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1186">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="38ac7-1187">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1187">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1188">`conv.i8` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i pozostaw, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1188">The `conv.i8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1189">Liczby całkowite z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.i` lub `conv.u` jest używany w takim przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1189">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="38ac7-1190">Wartości zmiennoprzecinkowe są konwertowane na `F` typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1190">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="38ac7-1191">Konwersja z liczby zmiennoprzecinkowe do całkowitych wartości obcina liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1191">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="38ac7-1192">Podczas konwertowania z `float64` do `float32`, dokładność, mogą zostać utracone.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1192">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="38ac7-1193">Jeśli `value` jest zbyt duży, aby zmieścić ją w `float32 (F)`, nieskończoności dodatniej (Jeśli `value` jest dodatnia) lub negatywną infinity (Jeśli `value` jest ujemna) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1193">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="38ac7-1194">Przepełnienie w przypadku konwertowania typu jeden argument do innej, najbardziej znaczących bitów są obcinane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1194">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="38ac7-1195">Jeśli wynik jest mniejsza niż `int32`, wartość jest znakiem do wypełnienia gniazda.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1195">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="38ac7-1196">Jeśli wystąpi przepełnienie konwertowanie typ zmiennoprzecinkowy na liczbę całkowitą wartość zwracana jest nieokreślony.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1196">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="38ac7-1197">Wyjątki nie są nigdy generowany, gdy za pomocą tego pola.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1197">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="38ac7-1198">Zobacz <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> i <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> równoważne instrukcje, które spowoduje zgłoszenie wyjątku, gdy typ wyniku nie można poprawnie reprezentują wartości wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1198">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="38ac7-1199">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.i8` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1199">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i8` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1200">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1200">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1201">Konwertuje wartość podpisem na szczycie stosu oceny podpisane <see langword="native int" />, przerzucane <see cref="T:System.OverflowException" /> na przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1201">Converts the signed value on top of the evaluation stack to signed <see langword="native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1202">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1202">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1203">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1203">Format</span></span>|<span data-ttu-id="38ac7-1204">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1204">Assembly Format</span></span>|<span data-ttu-id="38ac7-1205">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1205">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1206">D4</span><span class="sxs-lookup"><span data-stu-id="38ac7-1206">D4</span></span>|<span data-ttu-id="38ac7-1207">conv.ovf.i</span><span class="sxs-lookup"><span data-stu-id="38ac7-1207">conv.ovf.i</span></span>|<span data-ttu-id="38ac7-1208">Konwertuj na `native int` (na stosie jako `native int`) i zgłosić wyjątek na przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1208">Convert to a `native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="38ac7-1209">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1209">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1210">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1210">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1211">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1211">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="38ac7-1212">Jeśli wystąpi przepełnienie, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1212">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="38ac7-1213">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1213">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1214">`conv.ovf.i` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i miejsca, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1214">The `conv.ovf.i` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1215">Jeśli wartość jest za duża albo za mała, aby mogły być reprezentowane przez typ docelowy, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1215">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="38ac7-1216">Konwersje z liczby zmiennoprzecinkowe do całkowitych wartości truncate liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1216">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="38ac7-1217">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1217">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="38ac7-1218"><xref:System.OverflowException> jest generowany, jeśli wynik nie można przedstawić w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1218"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-1219">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.ovf.i` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1219">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1220">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1220">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1221">Konwertuje wartość bez znaku na szczycie stosu oceny podpisane <see langword="native int" />, przerzucane <see cref="T:System.OverflowException" /> na przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1221">Converts the unsigned value on top of the evaluation stack to signed <see langword="native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1222">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1222">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1223">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1223">Format</span></span>|<span data-ttu-id="38ac7-1224">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1224">Assembly Format</span></span>|<span data-ttu-id="38ac7-1225">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1225">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1226">8A</span><span class="sxs-lookup"><span data-stu-id="38ac7-1226">8A</span></span>|<span data-ttu-id="38ac7-1227">conv.ovf.i.un</span><span class="sxs-lookup"><span data-stu-id="38ac7-1227">conv.ovf.i.un</span></span>|<span data-ttu-id="38ac7-1228">Konwertuje wartość bez znaku `native int` (na stosie jako `native int`) i zgłosić wyjątek na przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1228">Converts an unsigned value to a `native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="38ac7-1229">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1229">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1230">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1230">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1231">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1231">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="38ac7-1232">Jeśli wystąpi przepełnienie, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1232">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="38ac7-1233">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1233">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1234">`conv.ovf.i.un` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i miejsca, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1234">The `conv.ovf.i.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1235">Jeśli wartość jest za duża albo za mała, aby mogły być reprezentowane przez typ docelowy, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1235">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="38ac7-1236">Konwersje z liczby zmiennoprzecinkowe do całkowitych wartości truncate liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1236">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="38ac7-1237">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1237">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="38ac7-1238"><xref:System.OverflowException> jest generowany, jeśli wynik nie można przedstawić w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1238"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-1239">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.ovf.i.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1239">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i.un` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1240">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1240">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1241">Konwertuje wartość podpisem na szczycie stosu oceny podpisane <see langword="int8" /> i rozszerza się <see langword="int32" />, przerzucane <see cref="T:System.OverflowException" /> na przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1241">Converts the signed value on top of the evaluation stack to signed <see langword="int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1242">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1242">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1243">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1243">Format</span></span>|<span data-ttu-id="38ac7-1244">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1244">Assembly Format</span></span>|<span data-ttu-id="38ac7-1245">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1245">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1246">B3</span><span class="sxs-lookup"><span data-stu-id="38ac7-1246">B3</span></span>|<span data-ttu-id="38ac7-1247">conv.ovf.i1</span><span class="sxs-lookup"><span data-stu-id="38ac7-1247">conv.ovf.i1</span></span>|<span data-ttu-id="38ac7-1248">Konwertuj na `int8` (na stosie jako `int32`) i zgłosić wyjątek na przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1248">Convert to an `int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="38ac7-1249">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1249">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1250">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1250">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1251">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1251">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="38ac7-1252">Jeśli wystąpi przepełnienie, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1252">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="38ac7-1253">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1253">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1254">`conv.ovf.i1` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i miejsca, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1254">The `conv.ovf.i1` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1255">Jeśli wartość jest za duża albo za mała, aby mogły być reprezentowane przez typ docelowy, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1255">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="38ac7-1256">Konwersje z liczby zmiennoprzecinkowe do całkowitych wartości truncate liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1256">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="38ac7-1257">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1257">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="38ac7-1258"><xref:System.OverflowException> jest generowany, jeśli wynik nie można przedstawić w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1258"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-1259">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.ovf.i1` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1259">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i1` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1260">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1260">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I1_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I1_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I1_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I1_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I1_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1261">Konwertuje wartość bez znaku na szczycie stosu oceny podpisane <see langword="int8" /> i rozszerza się <see langword="int32" />, przerzucane <see cref="T:System.OverflowException" /> na przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1261">Converts the unsigned value on top of the evaluation stack to signed <see langword="int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1262">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1262">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1263">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1263">Format</span></span>|<span data-ttu-id="38ac7-1264">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1264">Assembly Format</span></span>|<span data-ttu-id="38ac7-1265">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1265">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1266">82</span><span class="sxs-lookup"><span data-stu-id="38ac7-1266">82</span></span>|<span data-ttu-id="38ac7-1267">conv.ovf.i1.un</span><span class="sxs-lookup"><span data-stu-id="38ac7-1267">conv.ovf.i1.un</span></span>|<span data-ttu-id="38ac7-1268">Konwertuje wartość bez znaku `int8` (na stosie jako `int32`) i zgłosić wyjątek na przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1268">Converts an unsigned value to an `int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="38ac7-1269">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1269">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1270">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1270">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1271">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1271">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="38ac7-1272">Jeśli wystąpi przepełnienie, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1272">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="38ac7-1273">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1273">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1274">`conv.ovf.i1.un` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i miejsca, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1274">The `conv.ovf.i1.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1275">Jeśli wartość jest za duża albo za mała, aby mogły być reprezentowane przez typ docelowy, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1275">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="38ac7-1276">Konwersje z liczby zmiennoprzecinkowe do całkowitych wartości truncate liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1276">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="38ac7-1277">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1277">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="38ac7-1278"><xref:System.OverflowException> jest generowany, jeśli wynik nie można przedstawić w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1278"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-1279">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.ovf.i1.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1279">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i1.un` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1280">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1280">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1281">Konwertuje wartość podpisem na szczycie stosu oceny podpisane <see langword="int16" /> i rozszerzanie jej <see langword="int32" />, przerzucane <see cref="T:System.OverflowException" /> na przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1281">Converts the signed value on top of the evaluation stack to signed <see langword="int16" /> and extending it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1282">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1282">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1283">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1283">Format</span></span>|<span data-ttu-id="38ac7-1284">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1284">Assembly Format</span></span>|<span data-ttu-id="38ac7-1285">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1285">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1286">B5</span><span class="sxs-lookup"><span data-stu-id="38ac7-1286">B5</span></span>|<span data-ttu-id="38ac7-1287">conv.ovf.i2</span><span class="sxs-lookup"><span data-stu-id="38ac7-1287">conv.ovf.i2</span></span>|<span data-ttu-id="38ac7-1288">Konwertuj na `int16` (na stosie jako `int32`) i zgłosić wyjątek na przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1288">Convert to an `int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="38ac7-1289">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1289">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1290">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1290">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1291">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1291">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="38ac7-1292">Jeśli wystąpi przepełnienie, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1292">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="38ac7-1293">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1293">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1294">`conv.ovf.i2` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i miejsca, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1294">The `conv.ovf.i2` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1295">Jeśli wartość jest za duża albo za mała, aby mogły być reprezentowane przez typ docelowy, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1295">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="38ac7-1296">Konwersje z liczby zmiennoprzecinkowe do całkowitych wartości truncate liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1296">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="38ac7-1297">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1297">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="38ac7-1298"><xref:System.OverflowException> jest generowany, jeśli wynik nie można przedstawić w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1298"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-1299">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.ovf.i2` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1299">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i2` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1300">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1300">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I2_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I2_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I2_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I2_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I2_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1301">Konwertuje wartość bez znaku na szczycie stosu oceny podpisane <see langword="int16" /> i rozszerza się <see langword="int32" />, przerzucane <see cref="T:System.OverflowException" /> na przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1301">Converts the unsigned value on top of the evaluation stack to signed <see langword="int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1302">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1302">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1303">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1303">Format</span></span>|<span data-ttu-id="38ac7-1304">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1304">Assembly Format</span></span>|<span data-ttu-id="38ac7-1305">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1305">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1306">83</span><span class="sxs-lookup"><span data-stu-id="38ac7-1306">83</span></span>|<span data-ttu-id="38ac7-1307">conv.ovf.i2.un</span><span class="sxs-lookup"><span data-stu-id="38ac7-1307">conv.ovf.i2.un</span></span>|<span data-ttu-id="38ac7-1308">Konwertuje wartość bez znaku `int16` (na stosie jako `int32`) i zgłosić wyjątek na przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1308">Converts an unsigned value to an `int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="38ac7-1309">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1309">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1310">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1310">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1311">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1311">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="38ac7-1312">Jeśli wystąpi przepełnienie, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1312">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="38ac7-1313">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1313">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1314">`conv.ovf.i2.un` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i miejsca, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1314">The `conv.ovf.i2.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1315">Jeśli wartość jest za duża albo za mała, aby mogły być reprezentowane przez typ docelowy, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1315">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="38ac7-1316">Konwersje z liczby zmiennoprzecinkowe do całkowitych wartości truncate liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1316">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="38ac7-1317">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1317">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="38ac7-1318"><xref:System.OverflowException> jest generowany, jeśli wynik nie można przedstawić w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1318"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-1319">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.ovf.i2.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1319">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i2.un` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1320">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1320">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1321">Konwertuje wartość podpisem na szczycie stosu oceny podpisane <see langword="int32" />, przerzucane <see cref="T:System.OverflowException" /> na przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1321">Converts the signed value on top of the evaluation stack to signed <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1322">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1322">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1323">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1323">Format</span></span>|<span data-ttu-id="38ac7-1324">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1324">Assembly Format</span></span>|<span data-ttu-id="38ac7-1325">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1325">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1326">B7</span><span class="sxs-lookup"><span data-stu-id="38ac7-1326">B7</span></span>|<span data-ttu-id="38ac7-1327">conv.ovf.i4</span><span class="sxs-lookup"><span data-stu-id="38ac7-1327">conv.ovf.i4</span></span>|<span data-ttu-id="38ac7-1328">Konwertuj na `int32` (na stosie jako `int32`) i zgłosić wyjątek na przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1328">Convert to an `int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="38ac7-1329">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1329">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1330">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1330">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1331">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1331">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="38ac7-1332">Jeśli wystąpi przepełnienie, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1332">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="38ac7-1333">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1333">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1334">`conv.ovf.i4` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i miejsca, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1334">The `conv.ovf.i4` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1335">Jeśli wartość jest za duża albo za mała, aby mogły być reprezentowane przez typ docelowy, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1335">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="38ac7-1336">Konwersje z liczby zmiennoprzecinkowe do całkowitych wartości truncate liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1336">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="38ac7-1337">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1337">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="38ac7-1338"><xref:System.OverflowException> jest generowany, jeśli wynik nie można przedstawić w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1338"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-1339">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.ovf.i4` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1339">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i4` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1340">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1340">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I4_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I4_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I4_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I4_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I4_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1341">Konwertuje wartość bez znaku na szczycie stosu oceny podpisane <see langword="int32" />, przerzucane <see cref="T:System.OverflowException" /> na przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1341">Converts the unsigned value on top of the evaluation stack to signed <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1342">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1342">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1343">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1343">Format</span></span>|<span data-ttu-id="38ac7-1344">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1344">Assembly Format</span></span>|<span data-ttu-id="38ac7-1345">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1345">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1346">84</span><span class="sxs-lookup"><span data-stu-id="38ac7-1346">84</span></span>|<span data-ttu-id="38ac7-1347">conv.ovf.i4.un</span><span class="sxs-lookup"><span data-stu-id="38ac7-1347">conv.ovf.i4.un</span></span>|<span data-ttu-id="38ac7-1348">Konwertuje wartość bez znaku `int32` (na stosie jako `int32`) i zgłosić wyjątek na przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1348">Converts an unsigned value to an `int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="38ac7-1349">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1349">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1350">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1350">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1351">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1351">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="38ac7-1352">Jeśli wystąpi przepełnienie, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1352">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="38ac7-1353">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1353">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1354">`conv.ovf.i4.un` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i miejsca, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1354">The `conv.ovf.i4.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1355">Jeśli wartość jest za duża albo za mała, aby mogły być reprezentowane przez typ docelowy, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1355">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="38ac7-1356">Konwersje z liczby zmiennoprzecinkowe do całkowitych wartości truncate liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1356">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="38ac7-1357">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1357">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="38ac7-1358"><xref:System.OverflowException> jest generowany, jeśli wynik nie można przedstawić w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1358"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-1359">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.ovf.i4.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1359">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i4.un` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1360">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1360">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1361">Konwertuje wartość podpisem na szczycie stosu oceny podpisane <see langword="int64" />, przerzucane <see cref="T:System.OverflowException" /> na przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1361">Converts the signed value on top of the evaluation stack to signed <see langword="int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1362">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1362">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1363">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1363">Format</span></span>|<span data-ttu-id="38ac7-1364">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1364">Assembly Format</span></span>|<span data-ttu-id="38ac7-1365">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1365">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1366">B9</span><span class="sxs-lookup"><span data-stu-id="38ac7-1366">B9</span></span>|<span data-ttu-id="38ac7-1367">conv.ovf.i8</span><span class="sxs-lookup"><span data-stu-id="38ac7-1367">conv.ovf.i8</span></span>|<span data-ttu-id="38ac7-1368">Konwertuj na `int64` (na stosie jako `int64`) i zgłosić wyjątek na przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1368">Convert to an `int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="38ac7-1369">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1369">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1370">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1370">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1371">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1371">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="38ac7-1372">Jeśli wystąpi przepełnienie, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1372">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="38ac7-1373">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1373">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1374">`conv.ovf.i8` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i miejsca, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1374">The `conv.ovf.i8` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1375">Jeśli wartość jest za duża albo za mała, aby mogły być reprezentowane przez typ docelowy, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1375">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="38ac7-1376">Konwersje z liczby zmiennoprzecinkowe do całkowitych wartości truncate liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1376">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="38ac7-1377">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1377">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="38ac7-1378"><xref:System.OverflowException> jest generowany, jeśli wynik nie można przedstawić w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1378"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-1379">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.ovf.i8` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1379">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i8` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1380">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1380">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I8_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I8_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I8_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I8_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I8_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1381">Konwertuje wartość bez znaku na szczycie stosu oceny podpisane <see langword="int64" />, przerzucane <see cref="T:System.OverflowException" /> na przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1381">Converts the unsigned value on top of the evaluation stack to signed <see langword="int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1382">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1382">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1383">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1383">Format</span></span>|<span data-ttu-id="38ac7-1384">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1384">Assembly Format</span></span>|<span data-ttu-id="38ac7-1385">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1385">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1386">85</span><span class="sxs-lookup"><span data-stu-id="38ac7-1386">85</span></span>|<span data-ttu-id="38ac7-1387">conv.ovf.i8.un</span><span class="sxs-lookup"><span data-stu-id="38ac7-1387">conv.ovf.i8.un</span></span>|<span data-ttu-id="38ac7-1388">Konwertuje wartość bez znaku `int64` (na stosie jako `int64`) i zgłosić wyjątek na przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1388">Converts an unsigned value to an `int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="38ac7-1389">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1389">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1390">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1390">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1391">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1391">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="38ac7-1392">Jeśli wystąpi przepełnienie, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1392">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="38ac7-1393">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1393">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1394">`conv.ovf.i8.un` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i miejsca, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1394">The `conv.ovf.i8.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1395">Jeśli wartość jest za duża albo za mała, aby mogły być reprezentowane przez typ docelowy, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1395">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="38ac7-1396">Konwersje z liczby zmiennoprzecinkowe do całkowitych wartości truncate liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1396">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="38ac7-1397">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1397">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="38ac7-1398"><xref:System.OverflowException> jest generowany, jeśli wynik nie można przedstawić w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1398"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-1399">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.ovf.i8.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1399">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i8.un` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1400">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1400">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1401">Konwertuje wartość podpisem na szczycie stosu oceny do <see langword="unsigned native int" />, przerzucane <see cref="T:System.OverflowException" /> na przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1401">Converts the signed value on top of the evaluation stack to <see langword="unsigned native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1402">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1402">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1403">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1403">Format</span></span>|<span data-ttu-id="38ac7-1404">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1404">Assembly Format</span></span>|<span data-ttu-id="38ac7-1405">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1405">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1406">D5</span><span class="sxs-lookup"><span data-stu-id="38ac7-1406">D5</span></span>|<span data-ttu-id="38ac7-1407">conv.ovf.u</span><span class="sxs-lookup"><span data-stu-id="38ac7-1407">conv.ovf.u</span></span>|<span data-ttu-id="38ac7-1408">Konwertuj na `unsigned native int` (na stosie jako `native int`) i zgłosić wyjątek na przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1408">Convert to an `unsigned native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="38ac7-1409">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1409">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1410">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1410">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1411">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1411">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="38ac7-1412">Jeśli wystąpi przepełnienie, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1412">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="38ac7-1413">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1413">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1414">`conv.ovf.u` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i miejsca, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1414">The `conv.ovf.u` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1415">Jeśli wartość jest za duża albo za mała, aby mogły być reprezentowane przez typ docelowy, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1415">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="38ac7-1416">Konwersje z liczby zmiennoprzecinkowe do całkowitych wartości truncate liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1416">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="38ac7-1417">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1417">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="38ac7-1418"><xref:System.OverflowException> jest generowany, jeśli wynik nie można przedstawić w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1418"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-1419">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.ovf.u` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1419">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1420">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1420">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1421">Konwertuje wartość bez znaku na szczycie stosu oceny do <see langword="unsigned native int" />, przerzucane <see cref="T:System.OverflowException" /> na przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1421">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1422">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1422">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1423">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1423">Format</span></span>|<span data-ttu-id="38ac7-1424">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1424">Assembly Format</span></span>|<span data-ttu-id="38ac7-1425">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1425">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1426">8B</span><span class="sxs-lookup"><span data-stu-id="38ac7-1426">8B</span></span>|<span data-ttu-id="38ac7-1427">conv.ovf.u.un</span><span class="sxs-lookup"><span data-stu-id="38ac7-1427">conv.ovf.u.un</span></span>|<span data-ttu-id="38ac7-1428">Wartość bez znaku un konwertuje `unsigned native int` (na stosie jako `native int`) i zgłosić wyjątek na przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1428">Converts un unsigned value to an `unsigned native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="38ac7-1429">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1429">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1430">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1430">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1431">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1431">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="38ac7-1432">Jeśli wystąpi przepełnienie, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1432">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="38ac7-1433">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1433">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1434">`conv.ovf.u.un` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i miejsca, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1434">The `conv.ovf.u.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1435">Jeśli wartość jest za duża albo za mała, aby mogły być reprezentowane przez typ docelowy, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1435">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="38ac7-1436">Konwersje z liczby zmiennoprzecinkowe do całkowitych wartości truncate liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1436">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="38ac7-1437">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1437">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="38ac7-1438"><xref:System.OverflowException> jest generowany, jeśli wynik nie można przedstawić w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1438"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-1439">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.uvf.u.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1439">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.uvf.u.un` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1440">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1440">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1441">Konwertuje wartość podpisem na szczycie stosu oceny do <see langword="unsigned int8" /> i rozszerza się <see langword="int32" />, przerzucane <see cref="T:System.OverflowException" /> na przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1441">Converts the signed value on top of the evaluation stack to <see langword="unsigned int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1442">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1442">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1443">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1443">Format</span></span>|<span data-ttu-id="38ac7-1444">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1444">Assembly Format</span></span>|<span data-ttu-id="38ac7-1445">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1445">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1446">B4</span><span class="sxs-lookup"><span data-stu-id="38ac7-1446">B4</span></span>|<span data-ttu-id="38ac7-1447">conv.ovf.u1</span><span class="sxs-lookup"><span data-stu-id="38ac7-1447">conv.ovf.u1</span></span>|<span data-ttu-id="38ac7-1448">Konwertuj na `unsigned int8` (na stosie jako `int32`) i zgłosić wyjątek na przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1448">Convert to an `unsigned int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="38ac7-1449">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1449">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1450">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1450">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1451">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1451">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="38ac7-1452">Jeśli wystąpi przepełnienie, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1452">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="38ac7-1453">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1453">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1454">`conv.ovf.u1` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i miejsca, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1454">The `conv.ovf.u1` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1455">Jeśli wartość jest za duża albo za mała, aby mogły być reprezentowane przez typ docelowy, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1455">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="38ac7-1456">Konwersje z liczby zmiennoprzecinkowe do całkowitych wartości truncate liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1456">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="38ac7-1457">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1457">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="38ac7-1458"><xref:System.OverflowException> jest generowany, jeśli wynik nie można przedstawić w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1458"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-1459">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.ovf.u1` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1459">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u1` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1460">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1460">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U1_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U1_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U1_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U1_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U1_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1461">Konwertuje wartość bez znaku na szczycie stosu oceny do <see langword="unsigned int8" /> i rozszerza się <see langword="int32" />, przerzucane <see cref="T:System.OverflowException" /> na przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1461">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1462">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1462">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1463">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1463">Format</span></span>|<span data-ttu-id="38ac7-1464">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1464">Assembly Format</span></span>|<span data-ttu-id="38ac7-1465">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1465">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1466">86</span><span class="sxs-lookup"><span data-stu-id="38ac7-1466">86</span></span>|<span data-ttu-id="38ac7-1467">conv.ovf.u1.un</span><span class="sxs-lookup"><span data-stu-id="38ac7-1467">conv.ovf.u1.un</span></span>|<span data-ttu-id="38ac7-1468">Konwertuje wartość bez znaku `unsigned int8` (na stosie jako `int32`) i zgłosić wyjątek na przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1468">Converts an unsigned value to an `unsigned int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="38ac7-1469">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1469">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1470">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1470">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1471">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1471">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="38ac7-1472">Jeśli wystąpi przepełnienie, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1472">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="38ac7-1473">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1473">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1474">`conv.ovf.u1.un` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i miejsca, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1474">The `conv.ovf.u1.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1475">Jeśli wartość jest za duża albo za mała, aby mogły być reprezentowane przez typ docelowy, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1475">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="38ac7-1476">Konwersje z liczby zmiennoprzecinkowe do całkowitych wartości truncate liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1476">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="38ac7-1477">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1477">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="38ac7-1478"><xref:System.OverflowException> jest generowany, jeśli wynik nie można przedstawić w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1478"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-1479">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.ovf.u1.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1479">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u1.un` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1480">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1480">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1481">Konwertuje wartość podpisem na szczycie stosu oceny do <see langword="unsigned int16" /> i rozszerza się <see langword="int32" />, przerzucane <see cref="T:System.OverflowException" /> na przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1481">Converts the signed value on top of the evaluation stack to <see langword="unsigned int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1482">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1482">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1483">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1483">Format</span></span>|<span data-ttu-id="38ac7-1484">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1484">Assembly Format</span></span>|<span data-ttu-id="38ac7-1485">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1485">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1486">B6</span><span class="sxs-lookup"><span data-stu-id="38ac7-1486">B6</span></span>|<span data-ttu-id="38ac7-1487">conv.ovf.u2</span><span class="sxs-lookup"><span data-stu-id="38ac7-1487">conv.ovf.u2</span></span>|<span data-ttu-id="38ac7-1488">Konwertuj na `unsigned int16` (na stosie jako `int32`) i zgłosić wyjątek na przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1488">Convert to an `unsigned int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="38ac7-1489">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1489">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1490">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1490">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1491">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1491">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="38ac7-1492">Jeśli wystąpi przepełnienie, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1492">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="38ac7-1493">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1493">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1494">`conv.ovf.u2` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i miejsca, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1494">The `conv.ovf.u2` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1495">Jeśli wartość jest za duża albo za mała, aby mogły być reprezentowane przez typ docelowy, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1495">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="38ac7-1496">Konwersje z liczby zmiennoprzecinkowe do całkowitych wartości truncate liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1496">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="38ac7-1497">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1497">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="38ac7-1498"><xref:System.OverflowException> jest generowany, jeśli wynik nie można przedstawić w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1498"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-1499">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.ovf.u2` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1499">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u2` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1500">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1500">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U2_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U2_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U2_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U2_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U2_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1501">Konwertuje wartość bez znaku na szczycie stosu oceny do <see langword="unsigned int16" /> i rozszerza się <see langword="int32" />, przerzucane <see cref="T:System.OverflowException" /> na przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1501">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1502">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1502">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1503">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1503">Format</span></span>|<span data-ttu-id="38ac7-1504">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1504">Assembly Format</span></span>|<span data-ttu-id="38ac7-1505">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1505">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1506">87</span><span class="sxs-lookup"><span data-stu-id="38ac7-1506">87</span></span>|<span data-ttu-id="38ac7-1507">conv.ovf.u2.un</span><span class="sxs-lookup"><span data-stu-id="38ac7-1507">conv.ovf.u2.un</span></span>|<span data-ttu-id="38ac7-1508">Konwertuje wartość bez znaku `unsigned int16` (na stosie jako `int32`) i zgłosić wyjątek na przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1508">Converts an unsigned value to an `unsigned int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="38ac7-1509">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1509">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1510">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1510">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1511">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1511">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="38ac7-1512">Jeśli wystąpi przepełnienie, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1512">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="38ac7-1513">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1513">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1514">`conv.ovf.u2.un` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i miejsca, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1514">The `conv.ovf.u2.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1515">Jeśli wartość jest za duża albo za mała, aby mogły być reprezentowane przez typ docelowy, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1515">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="38ac7-1516">Konwersje z liczby zmiennoprzecinkowe do całkowitych wartości truncate liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1516">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="38ac7-1517">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1517">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="38ac7-1518"><xref:System.OverflowException> jest generowany, jeśli wynik nie można przedstawić w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1518"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-1519">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.ovf.u2.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1519">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u2.un` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1520">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1520">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1521">Konwertuje wartość podpisem na szczycie stosu oceny do <see langword="unsigned int32" />, przerzucane <see cref="T:System.OverflowException" /> na przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1521">Converts the signed value on top of the evaluation stack to <see langword="unsigned int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1522">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1522">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1523">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1523">Format</span></span>|<span data-ttu-id="38ac7-1524">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1524">Assembly Format</span></span>|<span data-ttu-id="38ac7-1525">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1525">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1526">B8</span><span class="sxs-lookup"><span data-stu-id="38ac7-1526">B8</span></span>|<span data-ttu-id="38ac7-1527">conv.ovf.u4</span><span class="sxs-lookup"><span data-stu-id="38ac7-1527">conv.ovf.u4</span></span>|<span data-ttu-id="38ac7-1528">Konwertuj na `unsigned int32` (na stosie jako `int32`) i zgłosić wyjątek na przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1528">Convert to an `unsigned int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="38ac7-1529">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1529">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1530">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1530">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1531">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1531">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="38ac7-1532">Jeśli wystąpi przepełnienie, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1532">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="38ac7-1533">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1533">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1534">`conv.ovf.u4` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i miejsca, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1534">The `conv.ovf.u4` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1535">Jeśli wartość jest za duża albo za mała, aby mogły być reprezentowane przez typ docelowy, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1535">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="38ac7-1536">Konwersje z liczby zmiennoprzecinkowe do całkowitych wartości truncate liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1536">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="38ac7-1537">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1537">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="38ac7-1538"><xref:System.OverflowException> jest generowany, jeśli wynik nie można przedstawić w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1538"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-1539">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.ovf.u4` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1539">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u4` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1540">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1540">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U4_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U4_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U4_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U4_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U4_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1541">Konwertuje wartość bez znaku na szczycie stosu oceny do <see langword="unsigned int32" />, przerzucane <see cref="T:System.OverflowException" /> na przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1541">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1542">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1542">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1543">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1543">Format</span></span>|<span data-ttu-id="38ac7-1544">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1544">Assembly Format</span></span>|<span data-ttu-id="38ac7-1545">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1545">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1546">88</span><span class="sxs-lookup"><span data-stu-id="38ac7-1546">88</span></span>|<span data-ttu-id="38ac7-1547">conv.ovf.u4.un</span><span class="sxs-lookup"><span data-stu-id="38ac7-1547">conv.ovf.u4.un</span></span>|<span data-ttu-id="38ac7-1548">Konwertuje wartość bez znaku `unsigned int32` (na stosie jako `int32`) i zgłosić wyjątek na przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1548">Converts an unsigned value to an `unsigned int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="38ac7-1549">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1549">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1550">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1550">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1551">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1551">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="38ac7-1552">Jeśli wystąpi przepełnienie, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1552">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="38ac7-1553">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1553">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1554">`conv.ovf.u4.un` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i miejsca, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1554">The `conv.ovf.u4.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1555">Jeśli wartość jest za duża albo za mała, aby mogły być reprezentowane przez typ docelowy, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1555">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="38ac7-1556">Konwersje z liczby zmiennoprzecinkowe do całkowitych wartości truncate liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1556">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="38ac7-1557">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1557">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="38ac7-1558"><xref:System.OverflowException> jest generowany, jeśli wynik nie można przedstawić w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1558"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-1559">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.ovf.u4.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1559">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u4.un` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1560">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1560">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1561">Konwertuje wartość podpisem na szczycie stosu oceny do <see langword="unsigned int64" />, przerzucane <see cref="T:System.OverflowException" /> na przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1561">Converts the signed value on top of the evaluation stack to <see langword="unsigned int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1562">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1562">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1563">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1563">Format</span></span>|<span data-ttu-id="38ac7-1564">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1564">Assembly Format</span></span>|<span data-ttu-id="38ac7-1565">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1565">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1566">BA</span><span class="sxs-lookup"><span data-stu-id="38ac7-1566">BA</span></span>|<span data-ttu-id="38ac7-1567">conv.ovf.u8</span><span class="sxs-lookup"><span data-stu-id="38ac7-1567">conv.ovf.u8</span></span>|<span data-ttu-id="38ac7-1568">Konwertuj na `unsigned int64` (na stosie jako `int64`) i zgłosić wyjątek na przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1568">Convert to an `unsigned int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="38ac7-1569">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1569">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1570">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1570">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1571">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1571">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="38ac7-1572">Jeśli wystąpi przepełnienie, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1572">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="38ac7-1573">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1573">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1574">`conv.ovf.u8` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i miejsca, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1574">The `conv.ovf.u8` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1575">Jeśli wartość jest za duża albo za mała, aby mogły być reprezentowane przez typ docelowy, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1575">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="38ac7-1576">Konwersje z liczby zmiennoprzecinkowe do całkowitych wartości truncate liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1576">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="38ac7-1577">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1577">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="38ac7-1578"><xref:System.OverflowException> jest generowany, jeśli wynik nie można przedstawić w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1578"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-1579">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.ovf.u8` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1579">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u8` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1580">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1580">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U8_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U8_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U8_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U8_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U8_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1581">Konwertuje wartość bez znaku na szczycie stosu oceny do <see langword="unsigned int64" />, przerzucane <see cref="T:System.OverflowException" /> na przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1581">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1582">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1582">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1583">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1583">Format</span></span>|<span data-ttu-id="38ac7-1584">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1584">Assembly Format</span></span>|<span data-ttu-id="38ac7-1585">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1585">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1586">89</span><span class="sxs-lookup"><span data-stu-id="38ac7-1586">89</span></span>|<span data-ttu-id="38ac7-1587">conv.ovf.u8.un</span><span class="sxs-lookup"><span data-stu-id="38ac7-1587">conv.ovf.u8.un</span></span>|<span data-ttu-id="38ac7-1588">Konwertuje wartość bez znaku `unsigned int64` (na stosie jako `int64`) i zgłosić wyjątek na przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1588">Converts an unsigned value to an `unsigned int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="38ac7-1589">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1589">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1590">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1590">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1591">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1591">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="38ac7-1592">Jeśli wystąpi przepełnienie, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1592">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="38ac7-1593">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1593">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1594">`conv.ovf.u8.un` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i miejsca, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1594">The `conv.ovf.u8.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1595">Jeśli wartość jest za duża albo za mała, aby mogły być reprezentowane przez typ docelowy, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1595">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="38ac7-1596">Konwersje z liczby zmiennoprzecinkowe do całkowitych wartości truncate liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1596">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="38ac7-1597">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.ovf.i` lub `conv.ovf.u` są używane, w którym to przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1597">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="38ac7-1598"><xref:System.OverflowException> jest generowany, jeśli wynik nie można przedstawić w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1598"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-1599">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.ovf.u8.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1599">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u8.un` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1600">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1600">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1601">Konwertuje wartość liczby całkowitej bez znaku na szczycie stosu oceny do <see langword="float32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1601">Converts the unsigned integer value on top of the evaluation stack to <see langword="float32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1602">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1602">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1603">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1603">Format</span></span>|<span data-ttu-id="38ac7-1604">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1604">Assembly Format</span></span>|<span data-ttu-id="38ac7-1605">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1605">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1606">76</span><span class="sxs-lookup"><span data-stu-id="38ac7-1606">76</span></span>|<span data-ttu-id="38ac7-1607">conv.r.un</span><span class="sxs-lookup"><span data-stu-id="38ac7-1607">conv.r.un</span></span>|<span data-ttu-id="38ac7-1608">Konwertuj liczbę całkowitą bez znaku do liczb zmiennoprzecinkowych, wypychanie `F` na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1608">Convert unsigned integer to floating-point, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="38ac7-1609">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1609">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1610">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1610">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1611">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1611">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="38ac7-1612">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1612">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1613">`conv.r.un` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i pozostaw, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1613">The `conv.r.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1614">Liczby całkowite z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.i` lub `conv.u` jest używany w takim przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1614">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="38ac7-1615">Wartości zmiennoprzecinkowe są konwertowane na `F` typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1615">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="38ac7-1616">Konwersja z liczby zmiennoprzecinkowe do całkowitych wartości obcina liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1616">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="38ac7-1617">Podczas konwertowania z `float64` do `float32`, dokładność, mogą zostać utracone.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1617">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="38ac7-1618">Jeśli `value` jest zbyt duży, aby zmieścić ją w `float32 (F)`, nieskończoności dodatniej (Jeśli `value` jest dodatnia) lub negatywną infinity (Jeśli `value` jest ujemna) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1618">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="38ac7-1619">Przepełnienie w przypadku konwertowania typu jeden argument do innej, najbardziej znaczących bitów są obcinane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1619">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="38ac7-1620">Jeśli wynik jest mniejsza niż `int32`, wartość jest znakiem do wypełnienia gniazda.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1620">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="38ac7-1621">Jeśli wystąpi przepełnienie konwertowanie typ zmiennoprzecinkowy na liczbę całkowitą `result` zwracane jest nieokreślony.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1621">If overflow occurs converting a floating-point type to an integer the `result` returned is unspecified.</span></span> <span data-ttu-id="38ac7-1622">`conv.r.un` Operacji przyjmuje całkowitą ze stosu, zinterpretuje ją jako bez znaku i zastępuje je do reprezentowania liczba całkowita liczba zmiennoprzecinkowa: albo `float32`, jeżeli jest dostatecznie szerokie, aby reprezentować liczbę całkowitą bez utraty precyzji lub innego `float64`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1622">The `conv.r.un` operation takes an integer off the stack, interprets it as unsigned, and replaces it with a floating-point number to represent the integer: either a `float32`, if this is wide enough to represent the integer without loss of precision, or else a `float64`.</span></span>  
  
 <span data-ttu-id="38ac7-1623">Wyjątki nie są nigdy generowany, gdy za pomocą tego pola.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1623">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="38ac7-1624">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.r.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1624">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r.un` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1625">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1625">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1626">Konwertuje wartość na szczycie stosu oceny do <see langword="float32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1626">Converts the value on top of the evaluation stack to <see langword="float32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1627">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1627">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1628">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1628">Format</span></span>|<span data-ttu-id="38ac7-1629">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1629">Assembly Format</span></span>|<span data-ttu-id="38ac7-1630">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1630">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1631">6B</span><span class="sxs-lookup"><span data-stu-id="38ac7-1631">6B</span></span>|<span data-ttu-id="38ac7-1632">conv.R4</span><span class="sxs-lookup"><span data-stu-id="38ac7-1632">conv.r4</span></span>|<span data-ttu-id="38ac7-1633">Konwertuj na `float32`, położenia `F` na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1633">Convert to `float32`, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="38ac7-1634">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1634">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1635">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1635">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1636">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1636">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="38ac7-1637">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1637">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1638">`conv.r4` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i pozostaw, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1638">The `conv.r4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1639">Liczby całkowite z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.i` lub `conv.u` jest używany w takim przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1639">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="38ac7-1640">Wartości zmiennoprzecinkowe są konwertowane na `F` typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1640">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="38ac7-1641">Konwersja z liczby zmiennoprzecinkowe do całkowitych wartości obcina liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1641">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="38ac7-1642">Podczas konwertowania z `float64` do `float32`, dokładność, mogą zostać utracone.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1642">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="38ac7-1643">Jeśli `value` jest zbyt duży, aby zmieścić ją w `float32 (F)`, nieskończoności dodatniej (Jeśli `value` jest dodatnia) lub negatywną infinity (Jeśli `value` jest ujemna) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1643">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="38ac7-1644">Przepełnienie w przypadku konwertowania typu jeden argument do innej, najbardziej znaczących bitów są obcinane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1644">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="38ac7-1645">Jeśli wynik jest mniejsza niż `int32`, wartość jest znakiem do wypełnienia gniazda.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1645">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="38ac7-1646">Jeśli wystąpi przepełnienie konwertowanie typ zmiennoprzecinkowy na liczbę całkowitą wartość zwracana jest nieokreślony.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1646">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="38ac7-1647">Wyjątki nie są nigdy generowany, gdy za pomocą tego pola.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1647">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="38ac7-1648">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.r4` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1648">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r4` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1649">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1649">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1650">Konwertuje wartość na szczycie stosu oceny do <see langword="float64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1650">Converts the value on top of the evaluation stack to <see langword="float64" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1651">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1651">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1652">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1652">Format</span></span>|<span data-ttu-id="38ac7-1653">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1653">Assembly Format</span></span>|<span data-ttu-id="38ac7-1654">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1654">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1655">6C</span><span class="sxs-lookup"><span data-stu-id="38ac7-1655">6C</span></span>|<span data-ttu-id="38ac7-1656">conv.r8</span><span class="sxs-lookup"><span data-stu-id="38ac7-1656">conv.r8</span></span>|<span data-ttu-id="38ac7-1657">Konwertuj na `float64`, położenia `F` na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1657">Convert to `float64`, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="38ac7-1658">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1658">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1659">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1659">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1660">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1660">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="38ac7-1661">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1661">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1662">`conv.r8` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i pozostaw, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1662">The `conv.r8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1663">Liczby całkowite z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.i` lub `conv.u` jest używany w takim przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1663">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="38ac7-1664">Wartości zmiennoprzecinkowe są konwertowane na `F` typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1664">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="38ac7-1665">Konwersja z liczby zmiennoprzecinkowe do całkowitych wartości obcina liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1665">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="38ac7-1666">Podczas konwertowania z `float64` do `float32`, dokładność, mogą zostać utracone.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1666">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="38ac7-1667">Jeśli `value` jest zbyt duży, aby zmieścić ją w `float32 (F)`, nieskończoności dodatniej (Jeśli `value` jest dodatnia) lub negatywną infinity (Jeśli `value` jest ujemna) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1667">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="38ac7-1668">Przepełnienie w przypadku konwertowania typu jeden argument do innej, najbardziej znaczących bitów są obcinane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1668">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="38ac7-1669">Jeśli wynik jest mniejsza niż `int32`, wartość jest znakiem do wypełnienia gniazda.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1669">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="38ac7-1670">Jeśli wystąpi przepełnienie konwertowanie typ zmiennoprzecinkowy na liczbę całkowitą wartość zwracana jest nieokreślony.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1670">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="38ac7-1671">Wyjątki nie są nigdy generowany, gdy za pomocą tego pola.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1671">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="38ac7-1672">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.r8` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1672">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r8` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1673">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1673">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1674">Konwertuje wartość na szczycie stosu oceny do <see langword="unsigned native int" />, i zwiększa się <see langword="native int" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1674">Converts the value on top of the evaluation stack to <see langword="unsigned native int" />, and extends it to <see langword="native int" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1675">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1675">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1676">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1676">Format</span></span>|<span data-ttu-id="38ac7-1677">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1677">Assembly Format</span></span>|<span data-ttu-id="38ac7-1678">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1678">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1679">E0</span><span class="sxs-lookup"><span data-stu-id="38ac7-1679">E0</span></span>|<span data-ttu-id="38ac7-1680">conv.u</span><span class="sxs-lookup"><span data-stu-id="38ac7-1680">conv.u</span></span>|<span data-ttu-id="38ac7-1681">Konwertuj na `unsigned native int`, położenia `native int` na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1681">Convert to `unsigned native int`, pushing `native int` on stack.</span></span>|  
  
 <span data-ttu-id="38ac7-1682">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1682">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1683">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1683">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1684">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1684">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="38ac7-1685">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1685">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1686">`conv.u` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i pozostaw, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1686">The `conv.u` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1687">Liczby całkowite z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.i` lub `conv.u` jest używany w takim przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1687">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="38ac7-1688">Wartości zmiennoprzecinkowe są konwertowane na `F` typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1688">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="38ac7-1689">Konwersja z liczby zmiennoprzecinkowe do całkowitych wartości obcina liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1689">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="38ac7-1690">Podczas konwertowania z `float64` do `float32`, dokładność, mogą zostać utracone.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1690">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="38ac7-1691">Jeśli `value` jest zbyt duży, aby zmieścić ją w `float32 (F)`, nieskończoności dodatniej (Jeśli `value` jest dodatnia) lub negatywną infinity (Jeśli `value` jest ujemna) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1691">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="38ac7-1692">Przepełnienie w przypadku konwertowania typu jeden argument do innej, najbardziej znaczących bitów są obcinane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1692">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="38ac7-1693">Jeśli wynik jest mniejsza niż `int32`, wartość jest znakiem do wypełnienia gniazda.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1693">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="38ac7-1694">Jeśli wystąpi przepełnienie konwertowanie typ zmiennoprzecinkowy na liczbę całkowitą wartość zwracana jest nieokreślony.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1694">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="38ac7-1695">Wyjątki nie są nigdy generowany, gdy za pomocą tego pola.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1695">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="38ac7-1696">Zobacz <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> i <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> równoważne instrukcje, które spowoduje zgłoszenie wyjątku, gdy typ wyniku nie można poprawnie reprezentują wartości wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1696">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="38ac7-1697">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.u` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1697">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1698">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1698">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1699">Konwertuje wartość na szczycie stosu oceny do <see langword="unsigned int8" />, i zwiększa się <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1699">Converts the value on top of the evaluation stack to <see langword="unsigned int8" />, and extends it to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1700">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1700">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1701">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1701">Format</span></span>|<span data-ttu-id="38ac7-1702">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1702">Assembly Format</span></span>|<span data-ttu-id="38ac7-1703">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1703">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1704">D2</span><span class="sxs-lookup"><span data-stu-id="38ac7-1704">D2</span></span>|<span data-ttu-id="38ac7-1705">conv.U1</span><span class="sxs-lookup"><span data-stu-id="38ac7-1705">conv.u1</span></span>|<span data-ttu-id="38ac7-1706">Konwertuj na `int8`, położenia `int32` na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1706">Convert to `int8`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="38ac7-1707">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1707">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1708">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1708">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1709">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1709">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="38ac7-1710">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1710">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1711">`conv.u1` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i pozostaw, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1711">The `conv.u1` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1712">Liczby całkowite z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.i` lub `conv.u` jest używany w takim przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1712">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="38ac7-1713">Wartości zmiennoprzecinkowe są konwertowane na `F` typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1713">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="38ac7-1714">Konwersja z liczby zmiennoprzecinkowe do całkowitych wartości obcina liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1714">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="38ac7-1715">Podczas konwertowania z `float64` do `float32`, dokładność, mogą zostać utracone.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1715">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="38ac7-1716">Jeśli `value` jest zbyt duży, aby zmieścić ją w `float32 (F)`, nieskończoności dodatniej (Jeśli `value` jest dodatnia) lub negatywną infinity (Jeśli `value` jest ujemna) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1716">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="38ac7-1717">Przepełnienie w przypadku konwertowania typu jeden argument do innej, najbardziej znaczących bitów są obcinane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1717">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="38ac7-1718">Jeśli wynik jest mniejsza niż `int32`, wartość jest znakiem do wypełnienia gniazda.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1718">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="38ac7-1719">Jeśli wystąpi przepełnienie konwertowanie typ zmiennoprzecinkowy na liczbę całkowitą wartość zwracana jest nieokreślony.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1719">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="38ac7-1720">Wyjątki nie są nigdy generowany, gdy za pomocą tego pola.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1720">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="38ac7-1721">Zobacz <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> i <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> równoważne instrukcje, które spowoduje zgłoszenie wyjątku, gdy typ wyniku nie można poprawnie reprezentują wartości wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1721">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="38ac7-1722">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.u1` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1722">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u1` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1723">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1723">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1724">Konwertuje wartość na szczycie stosu oceny do <see langword="unsigned int16" />, i zwiększa się <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1724">Converts the value on top of the evaluation stack to <see langword="unsigned int16" />, and extends it to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1725">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1725">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1726">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1726">Format</span></span>|<span data-ttu-id="38ac7-1727">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1727">Assembly Format</span></span>|<span data-ttu-id="38ac7-1728">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1728">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1729">D1</span><span class="sxs-lookup"><span data-stu-id="38ac7-1729">D1</span></span>|<span data-ttu-id="38ac7-1730">conv.u2</span><span class="sxs-lookup"><span data-stu-id="38ac7-1730">conv.u2</span></span>|<span data-ttu-id="38ac7-1731">Konwertuj na `int16`, położenia `int32` na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1731">Convert to `int16`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="38ac7-1732">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1732">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1733">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1733">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1734">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1734">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="38ac7-1735">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1735">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1736">`conv.u2` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i pozostaw, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1736">The `conv.u2` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1737">Liczby całkowite z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.i` lub `conv.u` jest używany w takim przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1737">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="38ac7-1738">Wartości zmiennoprzecinkowe są konwertowane na `F` typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1738">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="38ac7-1739">Konwersja z liczby zmiennoprzecinkowe do całkowitych wartości obcina liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1739">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="38ac7-1740">Podczas konwertowania z `float64` do `float32`, dokładność, mogą zostać utracone.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1740">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="38ac7-1741">Jeśli `value` jest zbyt duży, aby zmieścić ją w `float32 (F)`, nieskończoności dodatniej (Jeśli `value` jest dodatnia) lub negatywną infinity (Jeśli `value` jest ujemna) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1741">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="38ac7-1742">Przepełnienie w przypadku konwertowania typu jeden argument do innej, najbardziej znaczących bitów są obcinane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1742">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="38ac7-1743">Jeśli wynik jest mniejsza niż `int32`, wartość jest znakiem do wypełnienia gniazda.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1743">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="38ac7-1744">Jeśli wystąpi przepełnienie konwertowanie typ zmiennoprzecinkowy na liczbę całkowitą wartość zwracana jest nieokreślony.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1744">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="38ac7-1745">Wyjątki nie są nigdy generowany, gdy za pomocą tego pola.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1745">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="38ac7-1746">Zobacz <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> i <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> równoważne instrukcje, które spowoduje zgłoszenie wyjątku, gdy typ wyniku nie można poprawnie reprezentują wartości wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1746">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="38ac7-1747">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.u2` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1747">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u2` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1748">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1748">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1749">Konwertuje wartość na szczycie stosu oceny do <see langword="unsigned int32" />, i zwiększa się <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1749">Converts the value on top of the evaluation stack to <see langword="unsigned int32" />, and extends it to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1750">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1750">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1751">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1751">Format</span></span>|<span data-ttu-id="38ac7-1752">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1752">Assembly Format</span></span>|<span data-ttu-id="38ac7-1753">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1753">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1754">6D</span><span class="sxs-lookup"><span data-stu-id="38ac7-1754">6D</span></span>|<span data-ttu-id="38ac7-1755">conv.U4</span><span class="sxs-lookup"><span data-stu-id="38ac7-1755">conv.u4</span></span>|<span data-ttu-id="38ac7-1756">Konwertuj na `unsigned int32`, położenia `int32` na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1756">Convert to `unsigned int32`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="38ac7-1757">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1757">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1758">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1758">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1759">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1759">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="38ac7-1760">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1760">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1761">`conv.u4` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i pozostaw, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1761">The `conv.u4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1762">Liczby całkowite z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.i` lub `conv.u` jest używany w takim przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1762">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="38ac7-1763">Wartości zmiennoprzecinkowe są konwertowane na `F` typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1763">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="38ac7-1764">Konwersja z liczby zmiennoprzecinkowe do całkowitych wartości obcina liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1764">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="38ac7-1765">Podczas konwertowania z `float64` do `float32`, dokładność, mogą zostać utracone.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1765">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="38ac7-1766">Jeśli `value` jest zbyt duży, aby zmieścić ją w `float32 (F)`, nieskończoności dodatniej (Jeśli `value` jest dodatnia) lub negatywną infinity (Jeśli `value` jest ujemna) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1766">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="38ac7-1767">Przepełnienie w przypadku konwertowania typu jeden argument do innej, najbardziej znaczących bitów są obcinane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1767">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="38ac7-1768">Jeśli wynik jest mniejsza niż `int32`, wartość jest znakiem do wypełnienia gniazda.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1768">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="38ac7-1769">Jeśli wystąpi przepełnienie konwertowanie typ zmiennoprzecinkowy na liczbę całkowitą wartość zwracana jest nieokreślony.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1769">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="38ac7-1770">Wyjątki nie są nigdy generowany, gdy za pomocą tego pola.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1770">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="38ac7-1771">Zobacz <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> i <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> równoważne instrukcje, które spowoduje zgłoszenie wyjątku, gdy typ wyniku nie można poprawnie reprezentują wartości wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1771">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="38ac7-1772">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.u4` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1772">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u4` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1773">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1773">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1774">Konwertuje wartość na szczycie stosu oceny do <see langword="unsigned int64" />, i zwiększa się <see langword="int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1774">Converts the value on top of the evaluation stack to <see langword="unsigned int64" />, and extends it to <see langword="int64" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1775">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1775">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1776">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1776">Format</span></span>|<span data-ttu-id="38ac7-1777">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1777">Assembly Format</span></span>|<span data-ttu-id="38ac7-1778">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1778">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1779">6E</span><span class="sxs-lookup"><span data-stu-id="38ac7-1779">6E</span></span>|<span data-ttu-id="38ac7-1780">conv.u8</span><span class="sxs-lookup"><span data-stu-id="38ac7-1780">conv.u8</span></span>|<span data-ttu-id="38ac7-1781">Konwertuj na `int64`, położenia `int64` na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1781">Convert to `int64`, pushing `int64` on stack.</span></span>|  
  
 <span data-ttu-id="38ac7-1782">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1782">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1783">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1783">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1784">`value` jest zdjęte ze stosu ze stosu i konwersji nastąpi próba wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1784">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="38ac7-1785">Jeśli konwersja zakończy się pomyślnie, wartość wynikową spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1785">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1786">`conv.u8` Konwertuje opcode `value` na szczycie stosu na typ określony w opcode i pozostaw, które konwertowane wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1786">The `conv.u8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="38ac7-1787">Liczby całkowite z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` , gdy są załadowane na stosie oceny (chyba że `conv.i` lub `conv.u` jest używany w takim przypadku wynik jest również `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1787">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="38ac7-1788">Wartości zmiennoprzecinkowe są konwertowane na `F` typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1788">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="38ac7-1789">Konwersja z liczby zmiennoprzecinkowe do całkowitych wartości obcina liczbę w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1789">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="38ac7-1790">Podczas konwertowania z `float64` do `float32`, dokładność, mogą zostać utracone.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1790">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="38ac7-1791">Jeśli `value` jest zbyt duży, aby zmieścić ją w `float32 (F)`, nieskończoności dodatniej (Jeśli `value` jest dodatnia) lub negatywną infinity (Jeśli `value` jest ujemna) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1791">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="38ac7-1792">Przepełnienie w przypadku konwertowania typu jeden argument do innej, najbardziej znaczących bitów są obcinane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1792">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="38ac7-1793">Jeśli wynik jest mniejsza niż `int32`, wartość jest znakiem do wypełnienia gniazda.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1793">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="38ac7-1794">Jeśli wystąpi przepełnienie konwertowanie typ zmiennoprzecinkowy na liczbę całkowitą wartość zwracana jest nieokreślony.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1794">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="38ac7-1795">Wyjątki nie są nigdy generowany, gdy za pomocą tego pola.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1795">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="38ac7-1796">Zobacz <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> i <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> równoważne instrukcje, które spowoduje zgłoszenie wyjątku, gdy typ wyniku nie można poprawnie reprezentują wartości wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1796">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="38ac7-1797">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `conv.u8` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1797">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u8` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1798">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1798">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cpblk">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cpblk;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cpblk" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cpblk" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cpblk As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cpblk;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cpblk : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cpblk" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1799">Kopiuje określona liczba bajtów z adresu źródłowego do docelowego adresu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1799">Copies a specified number bytes from a source address to a destination address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1800">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1800">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1801">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1801">Format</span></span>|<span data-ttu-id="38ac7-1802">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1802">Assembly Format</span></span>|<span data-ttu-id="38ac7-1803">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1803">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1804">FE 17</span><span class="sxs-lookup"><span data-stu-id="38ac7-1804">FE 17</span></span>|<span data-ttu-id="38ac7-1805">cpblk</span><span class="sxs-lookup"><span data-stu-id="38ac7-1805">cpblk</span></span>|<span data-ttu-id="38ac7-1806">Skopiuj dane z bloku pamięci do innego.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1806">Copy data from one memory block to another.</span></span>|  
  
 <span data-ttu-id="38ac7-1807">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1807">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1808">Adres docelowy spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1808">The destination address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1809">Źródłowy adres spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1809">The source address is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-1810">Liczba bajtów do skopiowania spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1810">The number of bytes to copy is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="38ac7-1811">Liczba bajtów, adresu źródłowego i docelowego adresu są zdjęte ze stosu ze stosu; określona liczba bajtów są kopiowane z adresu źródłowego do docelowego adresu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1811">The number of bytes, the source address, and the destination address are popped from the stack; the specified number of bytes are copied from the source address to the destination address.</span></span>  
  
 <span data-ttu-id="38ac7-1812">`cpblk` Instrukcji kopiuje liczbą (typ `unsigned int32`) bajtów z adresem źródłowym (typu `*`, `native int`, lub `&`) do docelowego adresu (typu `*`, `native int`, lub `&`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1812">The `cpblk` instruction copies a number (type `unsigned int32`) of bytes from a source address (of type `*`, `native int`, or `&`) to a destination address (of type `*`, `native int`, or `&`).</span></span> <span data-ttu-id="38ac7-1813">Zachowanie `cpblk` jest nieokreślony nakładania się obszarów źródłowym i docelowym.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1813">The behavior of `cpblk` is unspecified if the source and destination areas overlap.</span></span>  
  
 <span data-ttu-id="38ac7-1814">`cpblk` przyjęto założenie, że źródłowym i docelowym adresowane są wyrównane do fizycznych rozmiaru maszyny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1814">`cpblk` assumes that both the source and destination addressed are aligned to the natural size of the machine.</span></span> <span data-ttu-id="38ac7-1815">`cpblk` Instrukcji może być od razu poprzedzony `unaligned.<prefix>` instrukcjami, aby wskazać, że źródłowy lub docelowy jest niewyrównany.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1815">The `cpblk` instruction can be immediately preceded by the `unaligned.<prefix>` instruction to indicate that either the source or the destination is unaligned.</span></span>  
  
 <span data-ttu-id="38ac7-1816">Działanie `cpblk` instrukcji może być zmieniony przez poprzedzającego <xref:System.Reflection.Emit.OpCodes.Volatile> lub <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1816">The operation of the `cpblk` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="38ac7-1817"><xref:System.NullReferenceException> może zostać zgłoszony, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1817"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="38ac7-1818">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `cpblk` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1818">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cpblk` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1819">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1819">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cpobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cpobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cpobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cpobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cpobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cpobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cpobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cpobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1820">Typ wartości znajdujących się pod adresem obiektu kopie (typ <see langword="&amp;" />, <see langword="*" /> lub <see langword="native int" />) adres obiektu docelowego (typ <see langword="&amp;" />, <see langword="*" /> lub <see langword="native int" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1820">Copies the value type located at the address of an object (type <see langword="&amp;" />, <see langword="*" /> or <see langword="native int" />) to the address of the destination object (type <see langword="&amp;" />, <see langword="*" /> or <see langword="native int" />).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1821">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1821">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1822">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1822">Format</span></span>|<span data-ttu-id="38ac7-1823">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1823">Assembly Format</span></span>|<span data-ttu-id="38ac7-1824">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1824">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1825">70 < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-1825">70 < `T` ></span></span>|<span data-ttu-id="38ac7-1826">cpobj `classTok`</span><span class="sxs-lookup"><span data-stu-id="38ac7-1826">cpobj `classTok`</span></span>|<span data-ttu-id="38ac7-1827">Kopiuje wartość typu z obiektu źródłowego do obiektu docelowego.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1827">Copies a value type from a source object to a destination object.</span></span>|  
  
 <span data-ttu-id="38ac7-1828">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1828">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1829">Odwołanie do obiektu docelowego spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1829">The destination object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1830">Odwołanie do obiektu źródłowego spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1830">The source object reference is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-1831">Odwołania do dwóch obiektów są zdjęte ze stosu ze stosu; Typ wartości pod adresem obiektu źródłowego jest kopiowany do adresu obiektu docelowego.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1831">The two object references are popped from the stack; the value type at the address of the source object is copied to the address of the destination object.</span></span>  
  
 <span data-ttu-id="38ac7-1832">Zachowanie `cpobj` jest nieokreślony, jeśli źródłowy i docelowy obiekt odwołania nie są wskaźnikami do wystąpienia klasy reprezentowany przez class token `classTok` ( `typeref` lub `typedef`), lub jeśli `classTok` nie reprezentuje Typ wartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1832">The behavior of `cpobj` is unspecified if the source and destination object references are not pointers to instances of the class represented by the class token `classTok` (a `typeref` or `typedef`), or if `classTok` does not represent a value type.</span></span>  
  
 <span data-ttu-id="38ac7-1833"><xref:System.NullReferenceException> może zostać zgłoszony, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1833"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="38ac7-1834">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `cpobj` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1834">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cpobj` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1835">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1835">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Div">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Div;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Div" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Div" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Div As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Div;" />
      <MemberSignature Language="F#" Value=" staticval mutable Div : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Div" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1836">Dzieli dwie wartości i umieszcza wynik w postaci liczb zmiennoprzecinkowych (typ <see langword="F" />) lub iloraz (typ <see langword="int32" />) na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1836">Divides two values and pushes the result as a floating-point (type <see langword="F" />) or quotient (type <see langword="int32" />) onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1837">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1837">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1838">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1838">Format</span></span>|<span data-ttu-id="38ac7-1839">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1839">Assembly Format</span></span>|<span data-ttu-id="38ac7-1840">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1840">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1841">5B</span><span class="sxs-lookup"><span data-stu-id="38ac7-1841">5B</span></span>|<span data-ttu-id="38ac7-1842">div</span><span class="sxs-lookup"><span data-stu-id="38ac7-1842">div</span></span>|<span data-ttu-id="38ac7-1843">Dzieli dwie wartości do zwrócenia iloraz lub wynik zmiennoprzecinkowy.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1843">Divides two values to return a quotient or floating-point result.</span></span>|  
  
 <span data-ttu-id="38ac7-1844">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1844">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1845">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1845">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1846">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1846">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-1847">`value2` i `value1` są zdjęte ze stosu ze stosu; `value1` przez `value2`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1847">`value2` and `value1` are popped from the stack; `value1` is divided by `value2`.</span></span>  
  
4.  <span data-ttu-id="38ac7-1848">Wynik spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1848">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1849">`result` = `value1` DIV wartość2 spełnia następujące warunki:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1849">`result` = `value1` div value2 satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="38ac7-1850">&#124;`result` &#124; = &#124; `value1` &#124; / &#124; `value2` &#124;, oraz:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1850">&#124; `result` &#124; = &#124; `value1` &#124; / &#124; `value2` &#124;, and:</span></span>  
  
 <span data-ttu-id="38ac7-1851">znak (`result`) = +, jeśli podpisania (`value1`) = znak (`value2`), lub-, jeśli znak (`value1`) ~ = znak (`value2`)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1851">sign(`result`) = +, if sign(`value1`) = sign(`value2`), or -, if sign(`value1`) ~= sign(`value2`)</span></span>  
  
 <span data-ttu-id="38ac7-1852">`div` Instrukcji oblicza wynik i wypchnięcia jej na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1852">The `div` instruction computes the result and pushes it on the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1853">Dzielenie liczby całkowitej obcina kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1853">Integer division truncates towards zero.</span></span>  
  
 <span data-ttu-id="38ac7-1854">Dzielenie wartością skończoną przez zero tworzy poprawnie podpisane wartość nieskończona.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1854">Division of a finite number by zero produces the correctly signed infinite value.</span></span>  
  
 <span data-ttu-id="38ac7-1855">Podzielenie zero przez zero lub infinity w nieskończoność i tworzy wartości NaN (nie-A-liczba).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1855">Dividing zero by zero or infinity by infinity produces the NaN (Not-A-Number) value.</span></span> <span data-ttu-id="38ac7-1856">Dowolna liczba rozdzielonych nieskończoności utworzy wartość zero.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1856">Any number divided by infinity will produce a zero value.</span></span>  
  
 <span data-ttu-id="38ac7-1857">Operacje integralną throw <xref:System.ArithmeticException> Jeśli wynik nie może być reprezentowany w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1857">Integral operations throw <xref:System.ArithmeticException> if the result cannot be represented in the result type.</span></span> <span data-ttu-id="38ac7-1858">Może się to zdarzyć, jeśli `value1` maksymalna wartość ujemna, i `value2` wynosi -1.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1858">This can happen if `value1` is the maximum negative value, and `value2` is -1.</span></span>  
  
 <span data-ttu-id="38ac7-1859">Operacje integralną throw <xref:System.DivideByZeroException> Jeśli `value2` wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1859">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="38ac7-1860">Należy pamiętać, że na platformach opartych na Intel <xref:System.OverflowException> jest generowany, gdy obliczeniowych (minint div -1).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1860">Note that on Intel-based platforms an <xref:System.OverflowException> is thrown when computing (minint div -1).</span></span> <span data-ttu-id="38ac7-1861">Operacji zmiennoprzecinkowych nigdy nie zgłaszają wyjątek (wygenerowanie wartości NaN lub infinities zamiast niego).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1861">Floating-point operations never throw an exception (they produce NaNs or infinities instead).</span></span>  
  
 <span data-ttu-id="38ac7-1862">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `div` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1862">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `div` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1863">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1863">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Div_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Div_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Div_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Div_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Div_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Div_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Div_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Div_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1864">Dzieli dwie wartości całkowitej bez znaku i umieszcza wynik (<see langword="int32" />) na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1864">Divides two unsigned integer values and pushes the result (<see langword="int32" />) onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1865">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1865">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1866">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1866">Format</span></span>|<span data-ttu-id="38ac7-1867">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1867">Assembly Format</span></span>|<span data-ttu-id="38ac7-1868">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1868">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1869">5C</span><span class="sxs-lookup"><span data-stu-id="38ac7-1869">5C</span></span>|<span data-ttu-id="38ac7-1870">div.un</span><span class="sxs-lookup"><span data-stu-id="38ac7-1870">div.un</span></span>|<span data-ttu-id="38ac7-1871">Dzieli dwie wartości, bez znaku, Zwraca iloraz.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1871">Divides two values, unsigned, returning a quotient.</span></span>|  
  
 <span data-ttu-id="38ac7-1872">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1872">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1873">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1873">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1874">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1874">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-1875">`value2` i `value1` są zdjęte ze stosu ze stosu; `value1` przez `value2`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1875">`value2` and `value1` are popped from the stack; `value1` is divided by `value2`.</span></span>  
  
4.  <span data-ttu-id="38ac7-1876">Wynik spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1876">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1877">`div.un` Oblicza instrukcji `value1` rozdzielonych `value2`, zarówno jako liczb całkowitych bez znaku i wypchnięć `result` na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1877">The `div.un` instruction computes `value1` divided by `value2`, both taken as unsigned integers, and pushes the `result` on the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1878">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `div.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1878">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `div.un` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1879">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1879">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dup">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Dup;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Dup" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Dup" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Dup As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Dup;" />
      <MemberSignature Language="F#" Value=" staticval mutable Dup : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Dup" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1880">Kopiuje bieżącej wartości znajdujące się najwyżej na stosie oceny, a następnie wypchnięcia kopiowania na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1880">Copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1881">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1881">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1882">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1882">Format</span></span>|<span data-ttu-id="38ac7-1883">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1883">Assembly Format</span></span>|<span data-ttu-id="38ac7-1884">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1884">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1885">25</span><span class="sxs-lookup"><span data-stu-id="38ac7-1885">25</span></span>|<span data-ttu-id="38ac7-1886">Dup —</span><span class="sxs-lookup"><span data-stu-id="38ac7-1886">dup</span></span>|<span data-ttu-id="38ac7-1887">Duplikuje wartość górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1887">Duplicates the value on the top of the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-1888">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1888">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1889">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1889">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1890">`value` Wylogowuje stosu do duplikacji jest zdjęte ze stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1890">`value` is popped off of the stack for duplication.</span></span>  
  
3.  <span data-ttu-id="38ac7-1891">`value` spoczywa wstecz na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1891">`value` is pushed back onto the stack.</span></span>  
  
4.  <span data-ttu-id="38ac7-1892">Zduplikowana wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1892">A duplicate value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1893">`dup` Instrukcji duplikaty górnego elementu stosu i pozostawia dwie identyczne wartości nad go.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1893">The `dup` instruction duplicates the top element of the stack, and leaves two identical values atop it.</span></span>  
  
 <span data-ttu-id="38ac7-1894">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `dup` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1894">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `dup` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1895">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1895">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Endfilter">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Endfilter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Endfilter" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Endfilter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Endfilter As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Endfilter;" />
      <MemberSignature Language="F#" Value=" staticval mutable Endfilter : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Endfilter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1896">Transfery formantu z <see langword="filter" /> klauzuli wyjątek do obsługi wyjątków infrastruktury języka wspólnego (CLI).</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1896">Transfers control from the <see langword="filter" /> clause of an exception back to the Common Language Infrastructure (CLI) exception handler.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1897">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1897">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1898">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1898">Format</span></span>|<span data-ttu-id="38ac7-1899">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1899">Assembly Format</span></span>|<span data-ttu-id="38ac7-1900">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1900">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1901">FE 11</span><span class="sxs-lookup"><span data-stu-id="38ac7-1901">FE 11</span></span>|<span data-ttu-id="38ac7-1902">elementu Endfilter</span><span class="sxs-lookup"><span data-stu-id="38ac7-1902">endfilter</span></span>|<span data-ttu-id="38ac7-1903">Klauzula filtru zakończenia dla obsługi wyjątków SEH.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1903">End filter clause of SEH exception handling.</span></span>|  
  
 <span data-ttu-id="38ac7-1904">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1904">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1905">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1905">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1906">`value` jest zdjęte ze stosu ze stosu; `endfilter` jest wykonywany i sterowanie jest przekazywane do programu obsługi wyjątków.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1906">`value` is popped from the stack; `endfilter` is executed and control is transferred to the exception handler.</span></span>  
  
 <span data-ttu-id="38ac7-1907">`Value` (który musi być typu `int32` i to jedna z określonych wartości) jest zwracana z klauzuli filtru.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1907">`Value` (which must be of type `int32` and is one of a specific set of values) is returned from the filter clause.</span></span> <span data-ttu-id="38ac7-1908">Powinien być jednym z:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1908">It should be one of:</span></span>  
  
-   <span data-ttu-id="38ac7-1909">`exception_continue_search` (`value` = 0) aby kontynuować wyszukiwanie obsługi wyjątków</span><span class="sxs-lookup"><span data-stu-id="38ac7-1909">`exception_continue_search` (`value` = 0) to continue searching for an exception handler</span></span>  
  
-   <span data-ttu-id="38ac7-1910">`exception_execute_handler` (`value` = 1) aby uruchomić drugi znajduje się faza obsługi wyjątków, w której ostatecznie bloki są uruchamiane aż do obsługi skojarzone z tym klauzula filtru.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1910">`exception_execute_handler` (`value` = 1) to start the second phase of exception handling where finally blocks are run until the handler associated with this filter clause is located.</span></span> <span data-ttu-id="38ac7-1911">Podczas odnajdywania program obsługi jest wykonywany.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1911">Upon discovery, the handler is executed.</span></span>  
  
 <span data-ttu-id="38ac7-1912">Inne wartości całkowite da wyniki nieokreślony.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1912">Other integer values will produce unspecified results.</span></span>  
  
 <span data-ttu-id="38ac7-1913">Punkt wejścia filtru, jak pokazano w tabeli wyjątek metody, musi być pierwsza instrukcja w bloku kodu filtru.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1913">The entry point of a filter, as shown in the method's exception table, must be the first instruction in the filter's code block.</span></span> <span data-ttu-id="38ac7-1914">`endfilter` Instrukcji musi być ostatnim instrukcji w bloku kodu filtru (dlatego może istnieć tylko jedna `endfilter` dla bloku pojedynczy filtr).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1914">The `endfilter` instruction must be the last instruction in the filter's code block (hence there can only be one `endfilter` for any single filter block).</span></span> <span data-ttu-id="38ac7-1915">Po wykonaniu `endfilter` instrukcji kontroli przepływu logicznie do obsługi mechanizmu wyjątków interfejsu wiersza polecenia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1915">After executing the `endfilter` instruction, control logically flows back to the CLI exception handling mechanism.</span></span>  
  
 <span data-ttu-id="38ac7-1916">Formant nie można przenieść do bloku filtru, z wyjątkiem przez mechanizm wyjątków.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1916">Control cannot be transferred into a filter block except through the exception mechanism.</span></span> <span data-ttu-id="38ac7-1917">Nie można przenieść kontroli z bloku filtru z wyjątkiem za pośrednictwem `throw` instrukcji lub wykonując ostatecznych `endfilter` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1917">Control cannot be transferred out of a filter block except through the use of a `throw` instruction or by executing the final `endfilter` instruction.</span></span> <span data-ttu-id="38ac7-1918">Nie można osadzić `try` zablokować w `filter` bloku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1918">You cannot embed a `try` block within a `filter` block.</span></span> <span data-ttu-id="38ac7-1919">Jeśli wyjątek wewnątrz `filter` bloku, zostanie przechwycona, a wartość 0 (`exception_continue_search`) jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1919">If an exception is thrown inside the `filter` block, it is intercepted and a value of 0 (`exception_continue_search`) is returned.</span></span>  
  
 <span data-ttu-id="38ac7-1920">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `endfilter` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1920">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `endfilter` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1921">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1921">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Endfinally">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Endfinally;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Endfinally" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Endfinally" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Endfinally As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Endfinally;" />
      <MemberSignature Language="F#" Value=" staticval mutable Endfinally : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Endfinally" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1922">Transfery formantu z <see langword="fault" /> lub <see langword="finally" /> klauzuli bloku wyjątków do obsługi wyjątków infrastruktury języka wspólnego (CLI).</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1922">Transfers control from the <see langword="fault" /> or <see langword="finally" /> clause of an exception block back to the Common Language Infrastructure (CLI) exception handler.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1923">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1923">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1924">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1924">Format</span></span>|<span data-ttu-id="38ac7-1925">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1925">Assembly Format</span></span>|<span data-ttu-id="38ac7-1926">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1926">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1927">DC</span><span class="sxs-lookup"><span data-stu-id="38ac7-1927">DC</span></span>|<span data-ttu-id="38ac7-1928">Endfinally</span><span class="sxs-lookup"><span data-stu-id="38ac7-1928">endfinally</span></span><br /><br /> <span data-ttu-id="38ac7-1929">endfault</span><span class="sxs-lookup"><span data-stu-id="38ac7-1929">endfault</span></span>|<span data-ttu-id="38ac7-1930">Kończy się `finally` lub `fault` klauzuli blokiem wyjątku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1930">Ends the `finally` or `fault` clause of an exception block.</span></span>|  
  
 <span data-ttu-id="38ac7-1931">Nie ma żadnych stos zachowań przejścia dla tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1931">There are no stack transition behaviors for this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-1932">`Endfinally` i `endfault` sygnalizuje koniec `finally` lub `fault` klauzuli dzięki odwijanie stosu można kontynuować do momentu obsługi wyjątków jest wywoływany.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1932">`Endfinally` and `endfault` signal the end of the `finally` or `fault` clause so that stack unwinding can continue until the exception handler is invoked.</span></span> <span data-ttu-id="38ac7-1933">`endfinally` Lub `endfault` instrukcji przekazuje sterowanie do mechanizm wyjątków interfejsu wiersza polecenia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1933">The `endfinally` or `endfault` instruction transfers control back to the CLI exception mechanism.</span></span> <span data-ttu-id="38ac7-1934">Mechanizm, a następnie wyszukuje następne `finally` klauzuli w łańcuchu w przypadku bloku chronionym zostało zakończone przez instrukcję pozostaw.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1934">The mechanism then searches for the next `finally` clause in the chain if the protected block was exited with a leave instruction.</span></span> <span data-ttu-id="38ac7-1935">Jeśli bloku chronionym został zakończony z powodu wyjątku, interfejsu wiersza polecenia umożliwia wyszukiwanie następnego `finally` lub `fault`, lub wprowadź obsługi wyjątków podczas pierwszego przejścia programu obsługi wyjątków.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1935">If the protected block was exited with an exception, the CLI will search for the next `finally` or `fault`, or enter the exception handler chosen during the first pass of exception handling.</span></span>  
  
 <span data-ttu-id="38ac7-1936">`endfinally` Instrukcji może występować tylko lexically poziomu `finally` bloku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1936">An `endfinally` instruction might only appear lexically within a `finally` block.</span></span> <span data-ttu-id="38ac7-1937">W odróżnieniu od `endfilter` instrukcji, nie jest wymagane czy bloku kończą się `endfinally` instrukcji i mogą mieć dowolną liczbę `endfinally` instrukcje w bloku zgodnie z potrzebami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1937">Unlike the `endfilter` instruction, there is no requirement that the block end with an `endfinally` instruction, and there can be as many `endfinally` instructions within the block as required.</span></span> <span data-ttu-id="38ac7-1938">Tych samym ograniczeniom `endfault` instrukcji i `fault` bloku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1938">These same restrictions apply to the `endfault` instruction and the `fault` block.</span></span>  
  
 <span data-ttu-id="38ac7-1939">Kontrolki nie mogą zostać przeniesione do `finally` (lub `fault`) zablokować z wyjątkiem przez mechanizm wyjątków.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1939">Control cannot be transferred into a `finally` (or `fault`) block except through the exception mechanism.</span></span> <span data-ttu-id="38ac7-1940">Kontrolki nie mogą zostać przeniesione z `finally` (lub `fault`) zablokować z wyjątkiem za pośrednictwem `throw` instrukcji lub wykonywania `endfinally` (lub `endfault`) instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1940">Control cannot be transferred out of a `finally` (or `fault`) block except through the use of a `throw` instruction or executing the `endfinally` (or `endfault`) instruction.</span></span> <span data-ttu-id="38ac7-1941">W szczególności należy "nie mogą zostać objęte" z `finally` (lub `fault`) bloku lub wykonać <xref:System.Reflection.Emit.OpCodes.Ret> lub <xref:System.Reflection.Emit.OpCodes.Leave> instrukcji w `finally` (lub `fault`) bloku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1941">In particular, you cannot "fall out" of a `finally` (or `fault`) block or to execute a <xref:System.Reflection.Emit.OpCodes.Ret> or <xref:System.Reflection.Emit.OpCodes.Leave> instruction within a `finally` (or `fault`) block.</span></span>  
  
 <span data-ttu-id="38ac7-1942">Należy pamiętać, że `endfault` i `endfinally` instrukcje są aliasami — odnoszą się do tego samego kodu operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1942">Note that the `endfault` and `endfinally` instructions are aliases - they correspond to the same opcode.</span></span>  
  
 <span data-ttu-id="38ac7-1943">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `endfinally` (`endfault`) opcode, jak również `ILGenerator` metody <xref:System.Reflection.Emit.ILGenerator.EndExceptionBlock%2A>.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1943">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `endfinally` (`endfault`) opcode, as well as the `ILGenerator` method <xref:System.Reflection.Emit.ILGenerator.EndExceptionBlock%2A>.</span></span>  
  
-   <span data-ttu-id="38ac7-1944">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1944">ILGenerator.Emit(OpCode)</span></span>  
  
-   <span data-ttu-id="38ac7-1945">ILGenerator.EndExceptionBlock()</span><span class="sxs-lookup"><span data-stu-id="38ac7-1945">ILGenerator.EndExceptionBlock()</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initblk">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Initblk;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Initblk" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Initblk" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Initblk As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Initblk;" />
      <MemberSignature Language="F#" Value=" staticval mutable Initblk : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Initblk" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1946">Inicjuje określony blok pamięci pod określonym adresem na dany rozmiar i wartość początkową.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1946">Initializes a specified block of memory at a specific address to a given size and initial value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1947">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1947">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1948">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1948">Format</span></span>|<span data-ttu-id="38ac7-1949">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1949">Assembly Format</span></span>|<span data-ttu-id="38ac7-1950">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1950">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1951">FE 18</span><span class="sxs-lookup"><span data-stu-id="38ac7-1951">FE 18</span></span>|<span data-ttu-id="38ac7-1952">initblk</span><span class="sxs-lookup"><span data-stu-id="38ac7-1952">initblk</span></span>|<span data-ttu-id="38ac7-1953">Ustaw każdej lokalizacji w bloku pamięci do podanej wartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1953">Set each location in a block of memory to a given value.</span></span>|  
  
 <span data-ttu-id="38ac7-1954">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1954">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1955">Adres początkowy spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1955">A starting address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1956">Wartość inicjowania spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1956">An initialization value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-1957">Liczba bajtów do zainicjowania spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1957">The number of bytes to initialize is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="38ac7-1958">Liczba bajtów, wartość inicjowania i adres początkowy są zdjęte ze stosu ze stosu, a inicjowanie odbywa się zgodnie z ich wartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1958">The number of bytes, the initialization value, and the starting address are popped from the stack, and the initialization is performed as per their values.</span></span>  
  
 <span data-ttu-id="38ac7-1959">`initblk` Instrukcji Ustawia numer (`unsigned int32`) bajtów, zaczynając od określonego adresu (typu `native int`, `&`, lub `*`) na wartość inicjowania (typu `unsigned int8`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-1959">The `initblk` instruction sets the number (`unsigned int32`) of bytes starting at the specified address (of type `native int`, `&`, or `*`) to the initialization value (of type `unsigned int8`).</span></span> <span data-ttu-id="38ac7-1960">`initblk` przyjęto założenie, że adres początkowy jest wyrównany do fizycznych rozmiaru maszyny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1960">`initblk` assumes that the starting address is aligned to the natural size of the machine.</span></span>  
  
 <span data-ttu-id="38ac7-1961">Działanie `initblk` instrukcje może się zmienić w poprzedzającego <xref:System.Reflection.Emit.OpCodes.Volatile> lub <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1961">The operation of the `initblk` instructions can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="38ac7-1962"><xref:System.NullReferenceException> może zostać zgłoszony, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1962"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="38ac7-1963">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `initblk` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1963">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `initblk` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1964">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1964">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Initobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Initobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Initobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Initobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Initobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Initobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Initobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1965">Inicjuje każdego pola typu wartości na określony adres do odwołanie o wartości null lub 0 odpowiedniego typu pierwotnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1965">Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1966">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1966">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1967">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1967">Format</span></span>|<span data-ttu-id="38ac7-1968">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1968">Assembly Format</span></span>|<span data-ttu-id="38ac7-1969">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1969">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1970">FE 15 < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-1970">FE 15 < `T` ></span></span>|<span data-ttu-id="38ac7-1971">`initobj``typeTok`</span><span class="sxs-lookup"><span data-stu-id="38ac7-1971">`initobj` `typeTok`</span></span>|<span data-ttu-id="38ac7-1972">Inicjuje typu wartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1972">Initializes a value type.</span></span>|  
  
 <span data-ttu-id="38ac7-1973">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1973">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1974">Adres typu wartości zainicjować spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1974">The address of the value type to initialize is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1975">Ten adres jest zdjęte ze stosu ze stosu; Typ wartości na określony adres został zainicjowany jako typ `typeTok`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1975">The address is popped from the stack; the value type at the specified address is initialized as type `typeTok`.</span></span>  
  
 <span data-ttu-id="38ac7-1976">`initobj` Instrukcji inicjuje każdego pola typu wartości, określony przez adres wciśnięcia (typu `native int`, `&`, lub `*`) odwołanie o wartości null lub 0 odpowiedniego typu pierwotnego.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1976">The `initobj` instruction initializes each field of the value type specified by the pushed address (of type `native int`, `&`, or `*`) to a null reference or a 0 of the appropriate primitive type.</span></span> <span data-ttu-id="38ac7-1977">Po ta metoda jest wywoływana, wystąpienie jest gotowy do metodę można wywołać konstruktora.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1977">After this method is called, the instance is ready for a constructor method to be called.</span></span> <span data-ttu-id="38ac7-1978">Jeśli `typeTok` jest typem referencyjnym tej instrukcji ma ten sam efekt co `ldnull` następuje `stind.ref`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1978">If `typeTok` is a reference type, this instruction has the same effect as `ldnull` followed by `stind.ref`.</span></span>  
  
 <span data-ttu-id="38ac7-1979">W odróżnieniu od <xref:System.Reflection.Emit.OpCodes.Newobj>, `initobj` nie wywołuje metody konstruktora.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1979">Unlike <xref:System.Reflection.Emit.OpCodes.Newobj>, `initobj` does not call the constructor method.</span></span> <span data-ttu-id="38ac7-1980">`Initobj` jest przeznaczony do inicjowania typy wartości, podczas gdy `newobj` służy do przydzielenia i Inicjowanie obiektów.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1980">`Initobj` is intended for initializing value types, while `newobj` is used to allocate and initialize objects.</span></span>  
  
 <span data-ttu-id="38ac7-1981">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `initobj` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1981">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `initobj` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-1982">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="38ac7-1982">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Isinst">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Isinst;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Isinst" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Isinst" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Isinst As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Isinst;" />
      <MemberSignature Language="F#" Value=" staticval mutable Isinst : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Isinst" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-1983">Sprawdza, czy odwołanie do obiektu (typ <see langword="O" />) jest wystąpieniem konkretnej klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-1983">Tests whether an object reference (type <see langword="O" />) is an instance of a particular class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-1984">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1984">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-1985">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-1985">Format</span></span>|<span data-ttu-id="38ac7-1986">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-1986">Assembly Format</span></span>|<span data-ttu-id="38ac7-1987">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-1987">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-1988">75 < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-1988">75 < `T` ></span></span>|<span data-ttu-id="38ac7-1989">isinst `class`</span><span class="sxs-lookup"><span data-stu-id="38ac7-1989">isinst `class`</span></span>|<span data-ttu-id="38ac7-1990">Sprawdza, czy odwołanie do obiektu jest wystąpieniem `class`, zwracając odwołanie o wartości null lub wystąpienia tej klasy lub interfejsu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1990">Tests if an object reference is an instance of `class`, returning either a null reference or an instance of that class or interface.</span></span>|  
  
 <span data-ttu-id="38ac7-1991">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-1991">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-1992">Odwołanie do obiektu spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1992">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-1993">Odwołanie do obiektu jest zdjęte ze stosu ze stosu i przetestowane w celu ustalenia, czy jest wystąpienie klasy przekazano `class`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1993">The object reference is popped from the stack and tested to see if it is an instance of the class passed in `class`.</span></span>  
  
3.  <span data-ttu-id="38ac7-1994">Wynik (odwołanie do obiektu lub odwołanie o wartości null) spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1994">The result (either an object reference or a null reference) is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-1995">`Class` token metadanych wskazuje odpowiednią klasę.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1995">`Class` is a metadata token indicating the desired class.</span></span> <span data-ttu-id="38ac7-1996">Jeśli implementuje klasy obiektu wierzchołku stosu `class` (Jeśli `class` jest interfejsem) lub klasy pochodnej z `class` (Jeśli `class` jest klasą regularne), a następnie jest rzutowane na typ `class` i wynik spoczywa na stosie, dokładnie tak, jakby <xref:System.Reflection.Emit.OpCodes.Castclass> miał została wywołana.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1996">If the class of the object on the top of the stack implements `class` (if `class` is an interface) or is a derived class of `class` (if `class` is a regular class) then it is cast to type `class` and the result is pushed on the stack, exactly as though <xref:System.Reflection.Emit.OpCodes.Castclass> had been called.</span></span> <span data-ttu-id="38ac7-1997">W przeciwnym razie odwołanie o wartości null spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1997">Otherwise, a null reference is pushed on the stack.</span></span> <span data-ttu-id="38ac7-1998">Jeśli się odwołanie do obiektu jest odwołanie o wartości null, następnie `isinst` podobnie zwraca odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1998">If the object reference itself is a null reference, then `isinst` likewise returns a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-1999"><xref:System.TypeLoadException> jest generowany, jeśli nie można odnaleźć klasy.</span><span class="sxs-lookup"><span data-stu-id="38ac7-1999"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="38ac7-2000">To jest zwykle wykrycie instrukcje Microsoft języka pośredniego (MSIL) są konwertowane do kodu natywnego, a nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2000">This is typically detected when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="38ac7-2001">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `isinst` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2001">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `isinst` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2002">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2002">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Jmp">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Jmp;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Jmp" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Jmp" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Jmp As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Jmp;" />
      <MemberSignature Language="F#" Value=" staticval mutable Jmp : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Jmp" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2003">Zamyka bieżącej metody i przejdzie do określonej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2003">Exits current method and jumps to specified method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2004">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2004">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2005">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2005">Format</span></span>|<span data-ttu-id="38ac7-2006">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2006">Assembly Format</span></span>|<span data-ttu-id="38ac7-2007">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2007">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2008">27 < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-2008">27 < `T` ></span></span>|<span data-ttu-id="38ac7-2009">skok `method`</span><span class="sxs-lookup"><span data-stu-id="38ac7-2009">jmp `method`</span></span>|<span data-ttu-id="38ac7-2010">Zakończ bieżącą metodę i przeskoczyć do określonej metody.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2010">Exit current method and jump to specified method.</span></span>|  
  
 <span data-ttu-id="38ac7-2011">Nie ma żadnych stos zachowań przejścia dla tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2011">There are no stack transition behaviors for this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-2012">`jmp` (Przeskoku) instrukcji przekaże kontrolę z metodą określoną przez `method`, która jest token metadanych odwołania do metody.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2012">The `jmp` (jump) instruction transfers control to the method specified by `method`, which is a metadata token for a method reference.</span></span> <span data-ttu-id="38ac7-2013">Bieżące argumenty są przekazywane do metody docelowej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2013">The current arguments are transferred to the destination method.</span></span>  
  
 <span data-ttu-id="38ac7-2014">Stos oceny musi być pusty, podczas wykonywania tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2014">The evaluation stack must be empty when this instruction is executed.</span></span> <span data-ttu-id="38ac7-2015">Wywołania Konwencji, liczba i typ argumentów pod adresem docelowym musi być zgodna z bieżącą metodę.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2015">The calling convention, number and type of arguments at the destination address must match that of the current method.</span></span>  
  
 <span data-ttu-id="38ac7-2016">`jmp` Nie może być używana przesyłane kontroli z `try`, `filter`, `catch`, lub `finally` bloku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2016">The `jmp` instruction cannot be used to transferred control out of a `try`, `filter`, `catch`, or `finally` block.</span></span>  
  
 <span data-ttu-id="38ac7-2017">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `jmp` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2017">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `jmp` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2018">ILGenerator.Emit(OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2018">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2019">Ładuje argumentu (odwołuje się określona wartość indeksu) na stosie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2019">Loads an argument (referenced by a specified index value) onto the stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2020">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2020">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2021">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2021">Format</span></span>|<span data-ttu-id="38ac7-2022">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2022">Assembly Format</span></span>|<span data-ttu-id="38ac7-2023">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2023">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2024">FE 09 < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-2024">FE 09 < `unsigned int16` ></span></span>|<span data-ttu-id="38ac7-2025">ldarg `index`</span><span class="sxs-lookup"><span data-stu-id="38ac7-2025">ldarg `index`</span></span>|<span data-ttu-id="38ac7-2026">Ładowanie argument `index` na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2026">Load argument at `index` onto stack.</span></span>|  
  
 <span data-ttu-id="38ac7-2027">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2027">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2028">Wartość argumentu na `index` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2028">The argument value at `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2029">`ldarg` Instrukcji wypchnięcia argument w `index`, gdzie argumentami są indeksowane z, 0 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2029">The `ldarg` instruction pushes the argument indexed at `index`, where arguments are indexed from 0 onwards, onto the evaluation stack.</span></span> <span data-ttu-id="38ac7-2030">`ldarg` Instrukcji można załadować typu wartości lub wartością pierwotną na stosie, kopiując je z argumentem przychodzących.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2030">The `ldarg` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="38ac7-2031">Typ wartości argumentu jest taki sam jak typ argumentu, określony przez bieżącą metodę podpisu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2031">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="38ac7-2032">Dla procedury uwzględniające listy argumentów o zmiennej długości `ldarg` instrukcji mogą służyć tylko do początkowego stałej argumentów, nie wartości w zmiennej części podpisu (zobacz <xref:System.Reflection.Emit.OpCodes.Arglist> instrukcji, aby uzyskać więcej informacji).</span><span class="sxs-lookup"><span data-stu-id="38ac7-2032">For procedures that take a variable-length argument list, the `ldarg` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature (see the <xref:System.Reflection.Emit.OpCodes.Arglist> instruction for more details).</span></span>  
  
 <span data-ttu-id="38ac7-2033">Argumenty, które zawiera wartość całkowitą mniejszą niż 4 bajty zostaną rozwinięte na typ `int32` , gdy są załadowane na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2033">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="38ac7-2034">Wartości zmiennoprzecinkowych zostaną rozwinięte ich rozmiar natywnego (typ `F`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-2034">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="38ac7-2035">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldarg` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2035">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2036">ILGenerator.Emit (OpCode, krótki)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2036">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2037">Ładuje argument pod indeksem 0 na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2037">Loads the argument at index 0 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2038">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2038">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2039">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2039">Format</span></span>|<span data-ttu-id="38ac7-2040">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2040">Assembly Format</span></span>|<span data-ttu-id="38ac7-2041">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2041">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2042">02</span><span class="sxs-lookup"><span data-stu-id="38ac7-2042">02</span></span>|<span data-ttu-id="38ac7-2043">ldarg.0</span><span class="sxs-lookup"><span data-stu-id="38ac7-2043">ldarg.0</span></span>|<span data-ttu-id="38ac7-2044">Ładowanie argument 0 na stosie</span><span class="sxs-lookup"><span data-stu-id="38ac7-2044">Load argument 0 onto stack</span></span>|  
  
 <span data-ttu-id="38ac7-2045">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2045">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2046">Wartość argumentu pod indeksem 0 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2046">The argument value at index 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2047">`ldarg.0` Instrukcja to efektywne kodowanie ładowania wartość argumentu pod indeksem 0.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2047">The `ldarg.0` instruction is an efficient encoding for loading the argument value at index 0.</span></span>  
  
 <span data-ttu-id="38ac7-2048">`ldarg.0` Instrukcji wypchnięcia argument w 0 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2048">The `ldarg.0` instruction pushes the argument indexed at 0 onto the evaluation stack.</span></span> <span data-ttu-id="38ac7-2049">`ldarg.0` Instrukcji można załadować typu wartości lub wartością pierwotną na stosie, kopiując je z argumentem przychodzących.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2049">The `ldarg.0` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="38ac7-2050">Typ wartości argumentu jest taki sam jak typ argumentu, określony przez bieżącą metodę podpisu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2050">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="38ac7-2051">Argumenty, które zawiera wartość całkowitą mniejszą niż 4 bajty zostaną rozwinięte na typ `int32` , gdy są załadowane na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2051">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="38ac7-2052">Wartości zmiennoprzecinkowych zostaną rozwinięte ich rozmiar natywnego (typ `F`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-2052">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="38ac7-2053">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldarg.0` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2053">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.0` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2054">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2054">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2055">Ładuje argument pod indeksem 1 na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2055">Loads the argument at index 1 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2056">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2056">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2057">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2057">Format</span></span>|<span data-ttu-id="38ac7-2058">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2058">Assembly Format</span></span>|<span data-ttu-id="38ac7-2059">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2059">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2060">03</span><span class="sxs-lookup"><span data-stu-id="38ac7-2060">03</span></span>|<span data-ttu-id="38ac7-2061">ldarg.1</span><span class="sxs-lookup"><span data-stu-id="38ac7-2061">ldarg.1</span></span>|<span data-ttu-id="38ac7-2062">Załaduj argumentu 1 na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2062">Load argument 1 onto stack.</span></span>|  
  
 <span data-ttu-id="38ac7-2063">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2063">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2064">Wartość argumentu pod indeksem 1 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2064">The argument value at index 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2065">`ldarg.1` Instrukcja to efektywne kodowanie ładowania wartość argumentu pod indeksem 1.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2065">The `ldarg.1` instruction is an efficient encoding for loading the argument value at index 1.</span></span>  
  
 <span data-ttu-id="38ac7-2066">`ldarg.1` Instrukcji wypchnięcia argument w 1 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2066">The `ldarg.1` instruction pushes the argument indexed at 1 onto the evaluation stack.</span></span> <span data-ttu-id="38ac7-2067">`ldarg.1` Instrukcji można załadować typu wartości lub wartością pierwotną na stosie, kopiując je z argumentem przychodzących.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2067">The `ldarg.1` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="38ac7-2068">Typ wartości argumentu jest taki sam jak typ argumentu, określony przez bieżącą metodę podpisu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2068">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="38ac7-2069">Argumenty, które zawiera wartość całkowitą mniejszą niż 4 bajty zostaną rozwinięte na typ `int32` , gdy są załadowane na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2069">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="38ac7-2070">Wartości zmiennoprzecinkowych zostaną rozwinięte ich rozmiar natywnego (typ `F`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-2070">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="38ac7-2071">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldarg.1` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2071">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.1` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2072">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2072">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2073">Ładuje argument pod indeksem 2 na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2073">Loads the argument at index 2 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2074">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2074">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2075">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2075">Format</span></span>|<span data-ttu-id="38ac7-2076">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2076">Assembly Format</span></span>|<span data-ttu-id="38ac7-2077">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2077">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2078">04</span><span class="sxs-lookup"><span data-stu-id="38ac7-2078">04</span></span>|<span data-ttu-id="38ac7-2079">ldarg.2</span><span class="sxs-lookup"><span data-stu-id="38ac7-2079">ldarg.2</span></span>|<span data-ttu-id="38ac7-2080">Załaduj argumentu 2 na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2080">Load argument 2 onto stack.</span></span>|  
  
 <span data-ttu-id="38ac7-2081">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2081">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2082">Wartość argumentu pod indeksem 2 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2082">The argument value at index 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2083">`ldarg.2` Instrukcja to efektywne kodowanie ładowania wartość argumentu pod indeksem 2.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2083">The `ldarg.2` instruction is an efficient encoding for loading the argument value at index 2.</span></span>  
  
 <span data-ttu-id="38ac7-2084">`ldarg.2` Instrukcji wypchnięcia argument w 2 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2084">The `ldarg.2` instruction pushes the argument indexed at 2 onto the evaluation stack.</span></span> <span data-ttu-id="38ac7-2085">`ldarg.2` Instrukcji można załadować typu wartości lub wartością pierwotną na stosie, kopiując je z argumentem przychodzących.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2085">The `ldarg.2` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="38ac7-2086">Typ wartości argumentu jest taki sam jak typ argumentu, określony przez bieżącą metodę podpisu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2086">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="38ac7-2087">Argumenty, które zawiera wartość całkowitą mniejszą niż 4 bajty zostaną rozwinięte na typ `int32` , gdy są załadowane na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2087">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="38ac7-2088">Wartości zmiennoprzecinkowych zostaną rozwinięte ich rozmiar natywnego (typ `F`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-2088">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="38ac7-2089">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldarg.2` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2089">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.2` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2090">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2090">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2091">Ładuje argument w indeksie 3 na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2091">Loads the argument at index 3 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2092">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2092">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2093">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2093">Format</span></span>|<span data-ttu-id="38ac7-2094">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2094">Assembly Format</span></span>|<span data-ttu-id="38ac7-2095">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2095">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2096">05</span><span class="sxs-lookup"><span data-stu-id="38ac7-2096">05</span></span>|<span data-ttu-id="38ac7-2097">ldarg.3</span><span class="sxs-lookup"><span data-stu-id="38ac7-2097">ldarg.3</span></span>|<span data-ttu-id="38ac7-2098">Załaduj argumentu 3 na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2098">Load argument 3 onto stack.</span></span>|  
  
 <span data-ttu-id="38ac7-2099">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2099">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2100">Wartość argumentu w indeksie 3 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2100">The argument value at index 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2101">`ldarg.3` Instrukcja to efektywne kodowanie ładowania wartość argumentu w indeksie 3.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2101">The `ldarg.3` instruction is an efficient encoding for loading the argument value at index 3.</span></span>  
  
 <span data-ttu-id="38ac7-2102">`ldarg.3` Instrukcji wypchnięcia argument w 3 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2102">The `ldarg.3` instruction pushes the argument indexed at 3 onto the evaluation stack.</span></span> <span data-ttu-id="38ac7-2103">`ldarg.3` Instrukcji można załadować typu wartości lub wartością pierwotną na stosie, kopiując je z argumentem przychodzących.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2103">The `ldarg.3` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="38ac7-2104">Typ wartości argumentu jest taki sam jak typ argumentu, określony przez bieżącą metodę podpisu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2104">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="38ac7-2105">Argumenty, które zawiera wartość całkowitą mniejszą niż 4 bajty zostaną rozwinięte na typ `int32` , gdy są załadowane na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2105">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="38ac7-2106">Wartości zmiennoprzecinkowych zostaną rozwinięte ich rozmiar natywnego (typ `F`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-2106">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="38ac7-2107">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldarg.3` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2107">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.3` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2108">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2108">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2109">Ładuje argumentu (odwołuje się indeks określonej wydłużone) na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2109">Loads the argument (referenced by a specified short form index) onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2110">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2110">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2111">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2111">Format</span></span>|<span data-ttu-id="38ac7-2112">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2112">Assembly Format</span></span>|<span data-ttu-id="38ac7-2113">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2113">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2114">0E < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-2114">0E < `unsigned int8` ></span></span>|<span data-ttu-id="38ac7-2115">ldarg.s `index`</span><span class="sxs-lookup"><span data-stu-id="38ac7-2115">ldarg.s `index`</span></span>|<span data-ttu-id="38ac7-2116">Ładowanie argument `index` na stosie, krótka.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2116">Load argument at `index` onto stack, short form.</span></span>|  
  
 <span data-ttu-id="38ac7-2117">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2117">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2118">Wartość argumentu na `index` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2118">The argument value at `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2119">`ldarg.s` Instrukcja to efektywne kodowanie ładowania argumenty indeksowane od 4 do 255.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2119">The `ldarg.s` instruction is an efficient encoding for loading arguments indexed from 4 through 255.</span></span>  
  
 <span data-ttu-id="38ac7-2120">`ldarg.s` Instrukcji wypchnięcia argument w `index`, gdzie argumentami są indeksowane z, 0 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2120">The `ldarg.s` instruction pushes the argument indexed at `index`, where arguments are indexed from 0 onwards, onto the evaluation stack.</span></span> <span data-ttu-id="38ac7-2121">`ldarg.s` Instrukcji można załadować typu wartości lub wartością pierwotną na stosie, kopiując je z argumentem przychodzących.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2121">The `ldarg.s` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="38ac7-2122">Typ wartości argumentu jest taki sam jak typ argumentu, określony przez bieżącą metodę podpisu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2122">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="38ac7-2123">Dla procedury uwzględniające listy argumentów o zmiennej długości `ldarg.s` instrukcji mogą służyć tylko do początkowego stałej argumentów, nie wartości w zmiennej części podpisu (zobacz <xref:System.Reflection.Emit.OpCodes.Arglist> instrukcji, aby uzyskać więcej informacji).</span><span class="sxs-lookup"><span data-stu-id="38ac7-2123">For procedures that take a variable-length argument list, the `ldarg.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature (see the <xref:System.Reflection.Emit.OpCodes.Arglist> instruction for more details).</span></span>  
  
 <span data-ttu-id="38ac7-2124">Argumenty, które zawiera wartość całkowitą mniejszą niż 4 bajty zostaną rozwinięte na typ `int32` , gdy są załadowane na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2124">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="38ac7-2125">Wartości zmiennoprzecinkowych zostaną rozwinięte ich rozmiar natywnego (typ `F`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-2125">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="38ac7-2126">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldarg.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2126">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.s` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2127">ILGenerator.Emit (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2127">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarga">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarga;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarga" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarga" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarga As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarga;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarga : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarga" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2128">Ładowanie adresu argumentu na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2128">Load an argument address onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2129">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2129">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2130">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2130">Format</span></span>|<span data-ttu-id="38ac7-2131">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2131">Assembly Format</span></span>|<span data-ttu-id="38ac7-2132">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2132">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2133">FE 0A &LT; `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-2133">FE 0A < `unsigned int16` ></span></span>|<span data-ttu-id="38ac7-2134">ldarga `index`</span><span class="sxs-lookup"><span data-stu-id="38ac7-2134">ldarga `index`</span></span>|<span data-ttu-id="38ac7-2135">Pobierz adres argument indeksowane według `index`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2135">Fetch the address of argument indexed by `index`.</span></span>|  
  
 <span data-ttu-id="38ac7-2136">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2136">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2137">Adres `addr` argumentu indeksowane według `index` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2137">The address `addr` of the argument indexed by `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2138">`ldarga` Instrukcji pobiera adres (typu `*`) argumentu indeksowane według `index`, gdzie argumentami są indeksowane z zakresu od 0 i jego nowszych wersjach.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2138">The `ldarga` instruction fetches the address (of type `*`) of the argument indexed by `index`, where arguments are indexed from 0 onwards.</span></span> <span data-ttu-id="38ac7-2139">Adres `addr` zawsze jest wyrównany na granicy fizycznych na komputerze docelowym.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2139">The address `addr` is always aligned to a natural boundary on the target machine.</span></span>  
  
 <span data-ttu-id="38ac7-2140">Dla procedury uwzględniające listy argumentów o zmiennej długości `ldarga` instrukcji mogą służyć tylko do początkowego stałej argumentów, nie wartości w zmiennej części podpisu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2140">For procedures that take a variable-length argument list, the `ldarga` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="38ac7-2141">`ldarga` Służy do przekazywanie parametru-ref.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2141">`ldarga` is used for by-ref parameter passing.</span></span> <span data-ttu-id="38ac7-2142">W innych przypadkach <xref:System.Reflection.Emit.OpCodes.Ldarg> i <xref:System.Reflection.Emit.OpCodes.Starg> powinny być używane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2142">For other cases, <xref:System.Reflection.Emit.OpCodes.Ldarg> and <xref:System.Reflection.Emit.OpCodes.Starg> should be used.</span></span>  
  
 <span data-ttu-id="38ac7-2143">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldarga` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2143">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarga` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2144">ILGenerator.Emit (OpCode, krótki)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2144">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarga_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarga_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarga_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarga_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarga_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarga_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarga_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarga_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2145">Ładowanie adresu argumentu, w krótkich fragmentów na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2145">Load an argument address, in short form, onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2146">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2146">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2147">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2147">Format</span></span>|<span data-ttu-id="38ac7-2148">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2148">Assembly Format</span></span>|<span data-ttu-id="38ac7-2149">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2149">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2150">0F < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-2150">0F < `unsigned int8` ></span></span>|<span data-ttu-id="38ac7-2151">ldarga.s `index`</span><span class="sxs-lookup"><span data-stu-id="38ac7-2151">ldarga.s `index`</span></span>|<span data-ttu-id="38ac7-2152">Pobierz adres argument indeksowane według `index`, krótka.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2152">Fetch the address of argument indexed by `index`, short form.</span></span>|  
  
 <span data-ttu-id="38ac7-2153">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2153">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2154">Adres `addr` argumentu indeksowane według `index` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2154">The address `addr` of the argument indexed by `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2155">`ldarga.s` (forma krótka z `ldarga`) ma być używane jako argument cyfry od 0 do 255 i jest bardziej efektywne kodowanie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2155">`ldarga.s` (the short form of `ldarga`) should be used for argument numbers 0 through 255, and is a more efficient encoding.</span></span>  
  
 <span data-ttu-id="38ac7-2156">`ldarga.s` Instrukcji pobiera adres (typu`*`) argumentu indeksowane według `index`, gdzie argumentami są indeksowane z zakresu od 0 i jego nowszych wersjach.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2156">The `ldarga.s` instruction fetches the address (of type`*`) of the argument indexed by `index`, where arguments are indexed from 0 onwards.</span></span> <span data-ttu-id="38ac7-2157">Adres `addr` zawsze jest wyrównany na granicy fizycznych na komputerze docelowym.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2157">The address `addr` is always aligned to a natural boundary on the target machine.</span></span>  
  
 <span data-ttu-id="38ac7-2158">Dla procedury uwzględniające listy argumentów o zmiennej długości `ldarga.s` instrukcji mogą służyć tylko do początkowego stałej argumentów, nie wartości w zmiennej części podpisu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2158">For procedures that take a variable-length argument list, the `ldarga.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="38ac7-2159">`ldarga.s` Służy do przekazywanie parametru-ref.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2159">`ldarga.s` is used for by-ref parameter passing.</span></span> <span data-ttu-id="38ac7-2160">W innych przypadkach <xref:System.Reflection.Emit.OpCodes.Ldarg_S> i <xref:System.Reflection.Emit.OpCodes.Starg_S> powinny być używane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2160">For other cases, <xref:System.Reflection.Emit.OpCodes.Ldarg_S> and <xref:System.Reflection.Emit.OpCodes.Starg_S> should be used.</span></span>  
  
 <span data-ttu-id="38ac7-2161">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldarga.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2161">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarga.s` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2162">ILGenerator.Emit (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2162">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2163">Podana wartość typu wypchnięcia <see langword="int32" /> na stosie oceny jako <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2163">Pushes a supplied value of type <see langword="int32" /> onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2164">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2164">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2165">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2165">Format</span></span>|<span data-ttu-id="38ac7-2166">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2166">Assembly Format</span></span>|<span data-ttu-id="38ac7-2167">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2167">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2168">20 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-2168">20 < `int32` ></span></span>|<span data-ttu-id="38ac7-2169">ldc.I4 `num`</span><span class="sxs-lookup"><span data-stu-id="38ac7-2169">ldc.i4 `num`</span></span>|<span data-ttu-id="38ac7-2170">Wypychanie wartości `num` na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2170">Pushes the value `num` onto the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-2171">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2171">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2172">Wartość `num` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2172">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2173">Należy pamiętać, że specjalne kodowania krótkich (i dlatego jest bardziej wydajne) liczb całkowitych -128 do 127 i szczególnie krótkich kodowań na potrzeby -1 do 8.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2173">Note that there are special short (and hence more efficient) encodings for the integers -128 through 127, and especially short encodings for -1 through 8.</span></span> <span data-ttu-id="38ac7-2174">Wszystkie rodzaje kodowania krótki push 4-bajtowych liczb całkowitych na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2174">All short encodings push 4 byte integers on the stack.</span></span> <span data-ttu-id="38ac7-2175">Dłużej kodowania są używane do 8-bajtowych liczb całkowitych i 4 lub 8 bajtów liczb zmiennoprzecinkowych, a także 4-bajtowych wartości, które nie mieszczą się w krótkim formularzy.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2175">Longer encodings are used for 8 byte integers and 4 and 8 byte floating-point numbers, as well as 4-byte values that do not fit in the short forms.</span></span> <span data-ttu-id="38ac7-2176">Istnieją trzy sposoby przekazywania stałej całkowitej 8 bajtów na stosie</span><span class="sxs-lookup"><span data-stu-id="38ac7-2176">There are three ways to push an 8 byte integer constant onto the stack</span></span>  
  
 1. <span data-ttu-id="38ac7-2177">Użyj <xref:System.Reflection.Emit.OpCodes.Ldc_I8> instrukcję stałe, które muszą być wyrażone w więcej niż 32-bitowy.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2177">Use the <xref:System.Reflection.Emit.OpCodes.Ldc_I8> instruction for constants that must be expressed in more than 32 bits.</span></span>  
  
 2. <span data-ttu-id="38ac7-2178">Użyj <xref:System.Reflection.Emit.OpCodes.Ldc_I4> instrukcji następuje <xref:System.Reflection.Emit.OpCodes.Conv_I8> na stałe, które wymagają 9 do 32-bitowy.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2178">Use the <xref:System.Reflection.Emit.OpCodes.Ldc_I4> instruction followed by a <xref:System.Reflection.Emit.OpCodes.Conv_I8> for constants that require 9 to 32 bits.</span></span>  
  
 3. <span data-ttu-id="38ac7-2179">Użyj instrukcji Krótka forma, a następnie <xref:System.Reflection.Emit.OpCodes.Conv_I8> na stałe, które mogą być wyrażone w mniej lub 8 bitów.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2179">Use a short form instruction followed by a <xref:System.Reflection.Emit.OpCodes.Conv_I8> for constants that can be expressed in 8 or fewer bits.</span></span>  
  
 <span data-ttu-id="38ac7-2180">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldc.i4` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2180">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2181">ILGenerator.Emit (OpCode, int)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2181">ILGenerator.Emit(OpCode, int)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2182">Wypchnięcia wartość całkowita 0 na stosie oceny jako <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2182">Pushes the integer value of 0 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2183">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2183">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2184">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2184">Format</span></span>|<span data-ttu-id="38ac7-2185">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2185">Assembly Format</span></span>|<span data-ttu-id="38ac7-2186">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2186">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2187">16</span><span class="sxs-lookup"><span data-stu-id="38ac7-2187">16</span></span>|<span data-ttu-id="38ac7-2188">ldc.i4.0</span><span class="sxs-lookup"><span data-stu-id="38ac7-2188">ldc.i4.0</span></span>|<span data-ttu-id="38ac7-2189">Wypycha 0 na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2189">Pushes 0 onto the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-2190">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2190">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2191">Wartość 0 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2191">The value 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2192">Jest to specjalne krótkich kodowanie do wypychania wartości całkowitej 0.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2192">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="38ac7-2193">Wszystkie specjalne kodowania krótkich push 4-bajtowych liczb całkowitych na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2193">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2194">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldc.i4.0` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2194">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.0` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2195">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2195">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2196">Wypychanie 1 na stosie oceny jako wartość całkowita <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2196">Pushes the integer value of 1 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2197">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2197">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2198">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2198">Format</span></span>|<span data-ttu-id="38ac7-2199">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2199">Assembly Format</span></span>|<span data-ttu-id="38ac7-2200">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2200">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2201">17</span><span class="sxs-lookup"><span data-stu-id="38ac7-2201">17</span></span>|<span data-ttu-id="38ac7-2202">ldc.i4.1</span><span class="sxs-lookup"><span data-stu-id="38ac7-2202">ldc.i4.1</span></span>|<span data-ttu-id="38ac7-2203">Wypychanie 1 na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2203">Pushes 1 onto the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-2204">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2204">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2205">Wartość 1 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2205">The value 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2206">Jest to specjalne krótkich kodowanie do wypychania wartości całkowitej 0.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2206">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="38ac7-2207">Wszystkie specjalne kodowania krótkich push 4-bajtowych liczb całkowitych na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2207">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2208">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldc.i4.1` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2208">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.1` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2209">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2209">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2210">Wypchnięcia wartość całkowita 2 na stosie oceny jako <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2210">Pushes the integer value of 2 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2211">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2211">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2212">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2212">Format</span></span>|<span data-ttu-id="38ac7-2213">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2213">Assembly Format</span></span>|<span data-ttu-id="38ac7-2214">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2214">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2215">18</span><span class="sxs-lookup"><span data-stu-id="38ac7-2215">18</span></span>|<span data-ttu-id="38ac7-2216">ldc.I4.2</span><span class="sxs-lookup"><span data-stu-id="38ac7-2216">ldc.i4.2</span></span>|<span data-ttu-id="38ac7-2217">Wypycha 2 na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2217">Pushes 2 onto the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-2218">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2218">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2219">Wartość 2 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2219">The value 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2220">Jest to specjalne krótkich kodowanie do wypychania wartości całkowitej 0.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2220">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="38ac7-2221">Wszystkie specjalne kodowania krótkich push 4-bajtowych liczb całkowitych na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2221">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2222">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldc.i4.2` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2222">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.2` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2223">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2223">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2224">Wypchnięcia wartość całkowita 3 na stosie oceny jako <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2224">Pushes the integer value of 3 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2225">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2225">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2226">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2226">Format</span></span>|<span data-ttu-id="38ac7-2227">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2227">Assembly Format</span></span>|<span data-ttu-id="38ac7-2228">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2228">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2229">19</span><span class="sxs-lookup"><span data-stu-id="38ac7-2229">19</span></span>|<span data-ttu-id="38ac7-2230">ldc.I4.3</span><span class="sxs-lookup"><span data-stu-id="38ac7-2230">ldc.i4.3</span></span>|<span data-ttu-id="38ac7-2231">Wypycha 3 na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2231">Pushes 3 onto the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-2232">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2232">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2233">Wartość 3 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2233">The value 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2234">Jest to specjalne krótkich kodowanie do wypychania wartości całkowitej 0.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2234">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="38ac7-2235">Wszystkie specjalne kodowania krótkich push 4-bajtowych liczb całkowitych na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2235">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2236">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldc.i4.3` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2236">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.3` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2237">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2237">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2238">Wypchnięcia wartość całkowita 4 na stosie oceny jako <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2238">Pushes the integer value of 4 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2239">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2239">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2240">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2240">Format</span></span>|<span data-ttu-id="38ac7-2241">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2241">Assembly Format</span></span>|<span data-ttu-id="38ac7-2242">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2242">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2243">1A</span><span class="sxs-lookup"><span data-stu-id="38ac7-2243">1A</span></span>|<span data-ttu-id="38ac7-2244">ldc.I4.4</span><span class="sxs-lookup"><span data-stu-id="38ac7-2244">ldc.i4.4</span></span>|<span data-ttu-id="38ac7-2245">Wypycha 4 na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2245">Pushes 4 onto the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-2246">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2246">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2247">Wartość 4 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2247">The value 4 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2248">Jest to specjalne krótkich kodowanie do wypychania wartości całkowitej 0.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2248">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="38ac7-2249">Wszystkie specjalne kodowania krótkich push 4-bajtowych liczb całkowitych na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2249">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2250">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldc.i4.4` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2250">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.4` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2251">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2251">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_5">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_5;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_5" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_5" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_5 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_5;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_5 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_5" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2252">Wypchnięcia wartość całkowita z 5 na stosie oceny jako <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2252">Pushes the integer value of 5 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2253">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2253">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2254">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2254">Format</span></span>|<span data-ttu-id="38ac7-2255">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2255">Assembly Format</span></span>|<span data-ttu-id="38ac7-2256">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2256">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2257">1B</span><span class="sxs-lookup"><span data-stu-id="38ac7-2257">1B</span></span>|<span data-ttu-id="38ac7-2258">ldc.i4.5</span><span class="sxs-lookup"><span data-stu-id="38ac7-2258">ldc.i4.5</span></span>|<span data-ttu-id="38ac7-2259">Wypycha 5 na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2259">Pushes 5 onto the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-2260">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2260">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2261">Wartość 5 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2261">The value 5 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2262">Jest to specjalne krótkich kodowanie do wypychania wartości całkowitej 0.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2262">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="38ac7-2263">Wszystkie specjalne kodowania krótkich push 4-bajtowych liczb całkowitych na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2263">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2264">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldc.i4.5` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2264">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.5` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2265">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2265">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_6">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_6;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_6" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_6 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_6;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_6 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_6" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2266">Wypchnięcia wartość całkowita 6 na stosie oceny jako <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2266">Pushes the integer value of 6 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2267">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2267">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2268">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2268">Format</span></span>|<span data-ttu-id="38ac7-2269">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2269">Assembly Format</span></span>|<span data-ttu-id="38ac7-2270">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2270">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2271">1C</span><span class="sxs-lookup"><span data-stu-id="38ac7-2271">1C</span></span>|<span data-ttu-id="38ac7-2272">ldc.I4.6</span><span class="sxs-lookup"><span data-stu-id="38ac7-2272">ldc.i4.6</span></span>|<span data-ttu-id="38ac7-2273">Wypycha 6 na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2273">Pushes 6 onto the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-2274">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2274">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2275">Wartość 6 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2275">The value 6 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2276">Jest to specjalne krótkich kodowanie do wypychania wartości całkowitej 0.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2276">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="38ac7-2277">Wszystkie specjalne kodowania krótkich push 4-bajtowych liczb całkowitych na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2277">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2278">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldc.i4.6` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2278">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.6` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2279">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2279">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_7">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_7;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_7" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_7 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_7;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_7 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_7" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2280">Wypchnięcia wartość całkowita 7 na stosie oceny jako <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2280">Pushes the integer value of 7 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2281">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2281">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2282">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2282">Format</span></span>|<span data-ttu-id="38ac7-2283">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2283">Assembly Format</span></span>|<span data-ttu-id="38ac7-2284">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2284">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2285">1D</span><span class="sxs-lookup"><span data-stu-id="38ac7-2285">1D</span></span>|<span data-ttu-id="38ac7-2286">ldc.I4.7</span><span class="sxs-lookup"><span data-stu-id="38ac7-2286">ldc.i4.7</span></span>|<span data-ttu-id="38ac7-2287">Wypycha 7 na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2287">Pushes 7 onto the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-2288">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2288">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2289">Wartość 7 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2289">The value 7 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2290">Jest to specjalne krótkich kodowanie do wypychania wartości całkowitej 0.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2290">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="38ac7-2291">Wszystkie specjalne kodowania krótkich push 4-bajtowych liczb całkowitych na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2291">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2292">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldc.i4.7` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2292">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.7` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2293">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2293">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2294">Wypchnięcia wartość całkowita 8 na stosie oceny jako <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2294">Pushes the integer value of 8 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2295">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2295">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2296">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2296">Format</span></span>|<span data-ttu-id="38ac7-2297">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2297">Assembly Format</span></span>|<span data-ttu-id="38ac7-2298">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2298">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2299">1E</span><span class="sxs-lookup"><span data-stu-id="38ac7-2299">1E</span></span>|<span data-ttu-id="38ac7-2300">ldc.I4.8</span><span class="sxs-lookup"><span data-stu-id="38ac7-2300">ldc.i4.8</span></span>|<span data-ttu-id="38ac7-2301">Wypycha 8 na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2301">Pushes 8 onto the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-2302">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2302">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2303">Wartość 8 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2303">The value 8 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2304">Jest to specjalne krótkich kodowanie do wypychania wartości całkowitej 0.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2304">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="38ac7-2305">Wszystkie specjalne kodowania krótkich push 4-bajtowych liczb całkowitych na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2305">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2306">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldc.i4.8` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2306">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.8` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2307">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2307">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_M1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_M1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_M1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_M1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_M1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_M1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_M1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2308">Wartość całkowita-1 na stosie oceny jako wypchnięcia <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2308">Pushes the integer value of -1 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2309">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2309">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2310">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2310">Format</span></span>|<span data-ttu-id="38ac7-2311">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2311">Assembly Format</span></span>|<span data-ttu-id="38ac7-2312">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2312">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2313">15</span><span class="sxs-lookup"><span data-stu-id="38ac7-2313">15</span></span>|<span data-ttu-id="38ac7-2314">ldc.i4.m1</span><span class="sxs-lookup"><span data-stu-id="38ac7-2314">ldc.i4.m1</span></span>|<span data-ttu-id="38ac7-2315">Wypycha -1 na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2315">Pushes -1 onto the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-2316">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2316">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2317">Wartość -1 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2317">The value -1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2318">Jest to specjalne krótkich kodowanie do wypychania wartości całkowitej 0.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2318">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="38ac7-2319">Wszystkie specjalne kodowania krótkich push 4-bajtowych liczb całkowitych na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2319">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2320">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldc.i4.m1` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2320">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.m1` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2321">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2321">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2322">Wypchnięcia podane <see langword="int8" /> wartości na stosie oceny jako <see langword="int32" />, krótka.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2322">Pushes the supplied <see langword="int8" /> value onto the evaluation stack as an <see langword="int32" />, short form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2323">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2323">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2324">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2324">Format</span></span>|<span data-ttu-id="38ac7-2325">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2325">Assembly Format</span></span>|<span data-ttu-id="38ac7-2326">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2326">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2327">1F < `int8` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-2327">1F < `int8` ></span></span>|<span data-ttu-id="38ac7-2328">ldc.I4.s `num`</span><span class="sxs-lookup"><span data-stu-id="38ac7-2328">ldc.i4.s `num`</span></span>|<span data-ttu-id="38ac7-2329">Wypchnięcia `num` na stosie jako `int32`, krótka.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2329">Pushes `num` onto the stack as `int32`, short form.</span></span>|  
  
 <span data-ttu-id="38ac7-2330">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2330">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2331">Wartość `num` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2331">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2332">`ldc.i4.s` jest bardziej efektywne kodowanie do wypychania liczby całkowite od -128 do 127 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2332">`ldc.i4.s` is a more efficient encoding for pushing the integers from -128 to 127 onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="38ac7-2333">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldc.i4.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2333">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.s` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2334">ILGenerator.Emit (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2334">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2335">Podana wartość typu wypchnięcia <see langword="int64" /> na stosie oceny jako <see langword="int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2335">Pushes a supplied value of type <see langword="int64" /> onto the evaluation stack as an <see langword="int64" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2336">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2336">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2337">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2337">Format</span></span>|<span data-ttu-id="38ac7-2338">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2338">Assembly Format</span></span>|<span data-ttu-id="38ac7-2339">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2339">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2340">21 < `int64` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-2340">21 < `int64` ></span></span>|<span data-ttu-id="38ac7-2341">ldc.I8 `num`</span><span class="sxs-lookup"><span data-stu-id="38ac7-2341">ldc.i8 `num`</span></span>|<span data-ttu-id="38ac7-2342">Wypchnięcia `num` na stosie jako `int64`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2342">Pushes `num` onto the stack as `int64`.</span></span>|  
  
 <span data-ttu-id="38ac7-2343">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2343">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2344">Wartość `num` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2344">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2345">Ten typ kodowania wypchnięcia `int64` wartości na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2345">This encoding pushes an `int64` value onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2346">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldc.i8` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2346">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i8` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2347">ILGenerator.Emit (OpCode, długie)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2347">ILGenerator.Emit(OpCode, long)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2348">Podana wartość typu wypchnięcia <see langword="float32" /> na stosie oceny jako typ <see langword="F" /> (float).</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2348">Pushes a supplied value of type <see langword="float32" /> onto the evaluation stack as type <see langword="F" /> (float).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2349">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2349">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2350">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2350">Format</span></span>|<span data-ttu-id="38ac7-2351">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2351">Assembly Format</span></span>|<span data-ttu-id="38ac7-2352">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2352">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2353">22 < `float32` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-2353">22 < `float32` ></span></span>|<span data-ttu-id="38ac7-2354">ldc.R4 `num`</span><span class="sxs-lookup"><span data-stu-id="38ac7-2354">ldc.r4 `num`</span></span>|<span data-ttu-id="38ac7-2355">Wypchnięcia `num` na stosie jako `F`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2355">Pushes `num` onto the stack as `F`.</span></span>|  
  
 <span data-ttu-id="38ac7-2356">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2356">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2357">Wartość `num` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2357">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2358">Ten typ kodowania wypchnięcia `float32` wartości na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2358">This encoding pushes a `float32` value onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2359">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldc.r4` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2359">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.r4` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2360">ILGenerator.Emit (OpCode, pojedynczego)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2360">ILGenerator.Emit(OpCode, single)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2361">Podana wartość typu wypchnięcia <see langword="float64" /> na stosie oceny jako typ <see langword="F" /> (float).</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2361">Pushes a supplied value of type <see langword="float64" /> onto the evaluation stack as type <see langword="F" /> (float).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2362">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2362">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2363">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2363">Format</span></span>|<span data-ttu-id="38ac7-2364">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2364">Assembly Format</span></span>|<span data-ttu-id="38ac7-2365">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2365">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2366">23 < `float64` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-2366">23 < `float64` ></span></span>|<span data-ttu-id="38ac7-2367">ldc.r8 `num`</span><span class="sxs-lookup"><span data-stu-id="38ac7-2367">ldc.r8 `num`</span></span>|<span data-ttu-id="38ac7-2368">Wypchnięcia `num` na stosie jako `F`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2368">Pushes `num` onto the stack as `F`.</span></span>|  
  
 <span data-ttu-id="38ac7-2369">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2369">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2370">Wartość `num` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2370">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2371">Ten typ kodowania wypchnięcia `float64` wartości na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2371">This encoding pushes a `float64` value onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2372">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldc.r8` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2372">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.r8` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2373">ILGenerator.Emit (OpCode, double)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2373">ILGenerator.Emit(OpCode, double)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2374">Ładuje element pod indeksem określonej tablicy na wierzchu stosu oceny jako typ określony w instrukcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2374">Loads the element at a specified array index onto the top of the evaluation stack as the type specified in the instruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2375">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu język pośredni (MSIL) firmy Microsoft, wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2375">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2376">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2376">Format</span></span>|<span data-ttu-id="38ac7-2377">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2377">Assembly Format</span></span>|<span data-ttu-id="38ac7-2378">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2378">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2379">A3 < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-2379">A3 < `T` ></span></span>|<span data-ttu-id="38ac7-2380">ldelem `typeTok`</span><span class="sxs-lookup"><span data-stu-id="38ac7-2380">ldelem `typeTok`</span></span>|<span data-ttu-id="38ac7-2381">Ładuje elementu `index` na wierzchu stosu jako typ `typeTok`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2381">Loads the element at `index` onto the top of the stack as type `typeTok`.</span></span>|  
  
 <span data-ttu-id="38ac7-2382">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2382">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2383">Odwołanie do obiektu `array` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2383">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2384">Wartość indeksu `index` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2384">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-2385">`index` i `array` są zdjęte ze stosu ze stosu; wartość przechowywana w pozycji `index` w `array` będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2385">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="38ac7-2386">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2386">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2387">`ldelem` Instrukcji ładuje wartość elementu o indeksie `index` (typ `native int`) w liczony od zera jednowymiarową `array` i umieszcza je w górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2387">The `ldelem` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="38ac7-2388">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2388">Arrays are objects, and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="38ac7-2389">Typ wartości zwracanej jest określany przez token `typeTok` w instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2389">The type of the return value is specified by the token `typeTok` in the instruction.</span></span>  
  
 <span data-ttu-id="38ac7-2390"><xref:System.NullReferenceException> wygenerowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2390"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-2391"><xref:System.IndexOutOfRangeException> wygenerowany, jeśli `index` jest ujemna ani większa niż górna granica `array`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2391"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the upper bound of `array`.</span></span>  
  
 <span data-ttu-id="38ac7-2392">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldelem` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2392">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2393">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2393">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2394">Ładuje elementu z typu <see langword="native int" /> od indeksu określonej tablicy na wierzchu stosu oceny jako <see langword="native int" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2394">Loads the element with type <see langword="native int" /> at a specified array index onto the top of the evaluation stack as a <see langword="native int" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2395">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2395">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2396">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2396">Format</span></span>|<span data-ttu-id="38ac7-2397">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2397">Assembly Format</span></span>|<span data-ttu-id="38ac7-2398">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2398">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2399">97</span><span class="sxs-lookup"><span data-stu-id="38ac7-2399">97</span></span>|<span data-ttu-id="38ac7-2400">ldelem.i</span><span class="sxs-lookup"><span data-stu-id="38ac7-2400">ldelem.i</span></span>|<span data-ttu-id="38ac7-2401">Ładuje elementu z typu `native int` w `index` na wierzchu stosu jako `native int`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2401">Loads the element with type `native int` at `index` onto the top of the stack as a `native int`.</span></span>|  
  
 <span data-ttu-id="38ac7-2402">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2402">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2403">Odwołanie do obiektu `array` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2403">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2404">Wartość indeksu `index` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2404">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-2405">`index` i `array` są zdjęte ze stosu ze stosu; wartość przechowywana w pozycji `index` w `array` będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2405">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="38ac7-2406">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2406">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2407">`ldelem.i` Instrukcji ładuje wartość elementu o indeksie `index` (typ `native int`) w liczony od zera jednowymiarową `array` i umieszcza je w górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2407">The `ldelem.i` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="38ac7-2408">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2408">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="38ac7-2409">Wartość zwracana `ldelem.i` jest `native int`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2409">The return value for `ldelem.i` is `native int`.</span></span>  
  
 <span data-ttu-id="38ac7-2410">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` (nie `native int`), gdy są załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2410">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="38ac7-2411"><xref:System.NullReferenceException> wygenerowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2411"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-2412"><xref:System.ArrayTypeMismatchException> wygenerowany, jeśli `array` nie zawiera elementów wymaganego typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2412"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="38ac7-2413"><xref:System.IndexOutOfRangeException> wygenerowany, jeśli `index` ma ujemną lub większą niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2413"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="38ac7-2414">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldelem.i` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2414">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2415">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2415">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2416">Ładuje elementu z typu <see langword="int8" /> od indeksu określonej tablicy na wierzchu stosu oceny jako <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2416">Loads the element with type <see langword="int8" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2417">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2417">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2418">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2418">Format</span></span>|<span data-ttu-id="38ac7-2419">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2419">Assembly Format</span></span>|<span data-ttu-id="38ac7-2420">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2420">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2421">90</span><span class="sxs-lookup"><span data-stu-id="38ac7-2421">90</span></span>|<span data-ttu-id="38ac7-2422">ldelem.i1</span><span class="sxs-lookup"><span data-stu-id="38ac7-2422">ldelem.i1</span></span>|<span data-ttu-id="38ac7-2423">Ładuje elementu z typu `int8` w `index` na wierzchu stosu jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2423">Loads the element with type `int8` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="38ac7-2424">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2424">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2425">Odwołanie do obiektu `array` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2425">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2426">Wartość indeksu `index` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2426">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-2427">`index` i `array` są zdjęte ze stosu ze stosu; wartość przechowywana w pozycji `index` w `array` będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2427">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="38ac7-2428">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2428">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2429">`ldelem.i1` Instrukcji ładuje wartość elementu o indeksie `index` (typ `native int`) w liczony od zera jednowymiarową `array` i umieszcza je w górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2429">The `ldelem.i1` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="38ac7-2430">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2430">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="38ac7-2431">Wartość zwracana `ldelem.i1` jest `int8`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2431">The return value for `ldelem.i1` is `int8`.</span></span>  
  
 <span data-ttu-id="38ac7-2432">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` (nie `native int`), gdy są załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2432">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="38ac7-2433"><xref:System.NullReferenceException> wygenerowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2433"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-2434"><xref:System.ArrayTypeMismatchException> wygenerowany, jeśli `array` nie zawiera elementów wymaganego typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2434"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="38ac7-2435"><xref:System.IndexOutOfRangeException> wygenerowany, jeśli `index` ma ujemną lub większą niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2435"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="38ac7-2436">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldelem.i1` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2436">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i1` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2437">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2437">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2438">Ładuje elementu z typu <see langword="int16" /> od indeksu określonej tablicy na wierzchu stosu oceny jako <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2438">Loads the element with type <see langword="int16" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2439">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2439">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2440">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2440">Format</span></span>|<span data-ttu-id="38ac7-2441">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2441">Assembly Format</span></span>|<span data-ttu-id="38ac7-2442">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2442">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2443">92</span><span class="sxs-lookup"><span data-stu-id="38ac7-2443">92</span></span>|<span data-ttu-id="38ac7-2444">ldelem.i2</span><span class="sxs-lookup"><span data-stu-id="38ac7-2444">ldelem.i2</span></span>|<span data-ttu-id="38ac7-2445">Ładuje elementu z typu `int16` w `index` na wierzchu stosu jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2445">Loads the element with type `int16` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="38ac7-2446">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2446">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2447">Odwołanie do obiektu `array` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2447">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2448">Wartość indeksu `index` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2448">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-2449">`index` i `array` są zdjęte ze stosu ze stosu; wartość przechowywana w pozycji `index` w `array` będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2449">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="38ac7-2450">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2450">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2451">`ldelem.i2` Instrukcji ładuje wartość elementu o indeksie `index` (typ `native int`) w liczony od zera jednowymiarową `array` i umieszcza je w górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2451">The `ldelem.i2` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="38ac7-2452">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2452">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="38ac7-2453">Wartość zwracana `ldelem.i2` jest `int16`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2453">The return value for `ldelem.i2` is `int16`.</span></span>  
  
 <span data-ttu-id="38ac7-2454">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` (nie `native int`), gdy są załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2454">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="38ac7-2455"><xref:System.NullReferenceException> wygenerowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2455"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-2456"><xref:System.ArrayTypeMismatchException> wygenerowany, jeśli `array` nie zawiera elementów wymaganego typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2456"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="38ac7-2457"><xref:System.IndexOutOfRangeException> wygenerowany, jeśli `index` ma ujemną lub większą niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2457"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="38ac7-2458">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldelem.i2` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2458">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i2` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2459">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2459">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2460">Ładuje elementu z typu <see langword="int32" /> od indeksu określonej tablicy na wierzchu stosu oceny jako <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2460">Loads the element with type <see langword="int32" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2461">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2461">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2462">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2462">Format</span></span>|<span data-ttu-id="38ac7-2463">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2463">Assembly Format</span></span>|<span data-ttu-id="38ac7-2464">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2464">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2465">94</span><span class="sxs-lookup"><span data-stu-id="38ac7-2465">94</span></span>|<span data-ttu-id="38ac7-2466">ldelem.i4</span><span class="sxs-lookup"><span data-stu-id="38ac7-2466">ldelem.i4</span></span>|<span data-ttu-id="38ac7-2467">Ładuje elementu z typu `int32` w `index` na wierzchu stosu jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2467">Loads the element with type `int32` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="38ac7-2468">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2468">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2469">Odwołanie do obiektu `array` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2469">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2470">Wartość indeksu `index` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2470">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-2471">`index` i `array` są zdjęte ze stosu ze stosu; wartość przechowywana w pozycji `index` w `array` będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2471">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="38ac7-2472">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2472">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2473">`ldelem.i4` Instrukcji ładuje wartość elementu o indeksie `index` (typ `native int`) w liczony od zera jednowymiarową `array` i umieszcza je w górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2473">The `ldelem.i4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="38ac7-2474">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2474">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="38ac7-2475">Wartość zwracana `ldelem.i4` jest `int32`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2475">The return value for `ldelem.i4` is `int32`.</span></span>  
  
 <span data-ttu-id="38ac7-2476">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` (nie `native int`), gdy są załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2476">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="38ac7-2477"><xref:System.NullReferenceException> wygenerowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2477"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-2478"><xref:System.ArrayTypeMismatchException> wygenerowany, jeśli `array` nie zawiera elementów wymaganego typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2478"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="38ac7-2479"><xref:System.IndexOutOfRangeException> wygenerowany, jeśli `index` ma ujemną lub większą niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2479"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="38ac7-2480">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldelem.i4` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2480">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i4` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2481">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2481">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2482">Ładuje elementu z typu <see langword="int64" /> od indeksu określonej tablicy na wierzchu stosu oceny jako <see langword="int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2482">Loads the element with type <see langword="int64" /> at a specified array index onto the top of the evaluation stack as an <see langword="int64" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2483">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2483">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2484">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2484">Format</span></span>|<span data-ttu-id="38ac7-2485">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2485">Assembly Format</span></span>|<span data-ttu-id="38ac7-2486">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2486">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2487">96</span><span class="sxs-lookup"><span data-stu-id="38ac7-2487">96</span></span>|<span data-ttu-id="38ac7-2488">ldelem.i8</span><span class="sxs-lookup"><span data-stu-id="38ac7-2488">ldelem.i8</span></span>|<span data-ttu-id="38ac7-2489">Ładuje elementu z typu `int64` w `index` na wierzchu stosu jako `int64`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2489">Loads the element with type `int64` at `index` onto the top of the stack as an `int64`.</span></span>|  
  
 <span data-ttu-id="38ac7-2490">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2490">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2491">Odwołanie do obiektu `array` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2491">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2492">Wartość indeksu `index` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2492">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-2493">`index` i `array` są zdjęte ze stosu ze stosu; wartość przechowywana w pozycji `index` w `array` będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2493">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="38ac7-2494">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2494">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2495">`ldelem.i8` Instrukcji ładuje wartość elementu o indeksie `index` (typ `native int`) w liczony od zera jednowymiarową `array` i umieszcza je w górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2495">The `ldelem.i8` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="38ac7-2496">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2496">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="38ac7-2497">Wartość zwracana `ldelem.i8` jest `int64`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2497">The return value for `ldelem.i8` is `int64`.</span></span>  
  
 <span data-ttu-id="38ac7-2498">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` (nie `native int`), gdy są załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2498">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="38ac7-2499"><xref:System.NullReferenceException> wygenerowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2499"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-2500"><xref:System.ArrayTypeMismatchException> wygenerowany, jeśli `array` nie zawiera elementów wymaganego typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2500"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="38ac7-2501"><xref:System.IndexOutOfRangeException> wygenerowany, jeśli `index` ma ujemną lub większą niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2501"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="38ac7-2502">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldelem.i8` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2502">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i8` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2503">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2503">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2504">Ładuje elementu z typu <see langword="float32" /> od indeksu określonej tablicy na wierzchu stosu oceny jako typ <see langword="F" /> (float).</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2504">Loads the element with type <see langword="float32" /> at a specified array index onto the top of the evaluation stack as type <see langword="F" /> (float).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2505">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2505">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2506">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2506">Format</span></span>|<span data-ttu-id="38ac7-2507">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2507">Assembly Format</span></span>|<span data-ttu-id="38ac7-2508">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2508">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2509">98</span><span class="sxs-lookup"><span data-stu-id="38ac7-2509">98</span></span>|<span data-ttu-id="38ac7-2510">ldelem.r4</span><span class="sxs-lookup"><span data-stu-id="38ac7-2510">ldelem.r4</span></span>|<span data-ttu-id="38ac7-2511">Ładuje elementu z typu `float32` w `index` na wierzchu stosu jako typ `F`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2511">Loads the element with type `float32` at `index` onto the top of the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="38ac7-2512">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2512">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2513">Odwołanie do obiektu `array` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2513">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2514">Wartość indeksu `index` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2514">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-2515">`index` i `array` są zdjęte ze stosu ze stosu; wartość przechowywana w pozycji `index` w `array` będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2515">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="38ac7-2516">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2516">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2517">`ldelem.r4` Instrukcji ładuje wartość elementu o indeksie `index` (typ `native int`) w liczony od zera jednowymiarową `array` i umieszcza je w górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2517">The `ldelem.r4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="38ac7-2518">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2518">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="38ac7-2519">Wartość zwracana `ldelem.r4` jest `float32`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2519">The return value for `ldelem.r4` is `float32`.</span></span>  
  
 <span data-ttu-id="38ac7-2520">Wartości zmiennoprzecinkowe są konwertowane na typ `F` po załadowaniu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2520">Floating-point values are converted to type `F` when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="38ac7-2521"><xref:System.NullReferenceException> wygenerowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2521"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-2522"><xref:System.ArrayTypeMismatchException> wygenerowany, jeśli `array` nie zawiera elementów wymaganego typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2522"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="38ac7-2523"><xref:System.IndexOutOfRangeException> wygenerowany, jeśli `index` ma ujemną lub większą niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2523"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="38ac7-2524">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldelem.r4` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2524">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.r4` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2525">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2525">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2526">Ładuje elementu z typu <see langword="float64" /> od indeksu określonej tablicy na wierzchu stosu oceny jako typ <see langword="F" /> (float).</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2526">Loads the element with type <see langword="float64" /> at a specified array index onto the top of the evaluation stack as type <see langword="F" /> (float).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2527">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2527">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2528">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2528">Format</span></span>|<span data-ttu-id="38ac7-2529">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2529">Assembly Format</span></span>|<span data-ttu-id="38ac7-2530">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2530">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2531">99</span><span class="sxs-lookup"><span data-stu-id="38ac7-2531">99</span></span>|<span data-ttu-id="38ac7-2532">ldelem.r8</span><span class="sxs-lookup"><span data-stu-id="38ac7-2532">ldelem.r8</span></span>|<span data-ttu-id="38ac7-2533">Ładuje elementu z typu `float64` w `index` na wierzchu stosu jako typ `F`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2533">Loads the element with type `float64` at `index` onto the top of the stack as type `F`.</span></span>|  
  
 <span data-ttu-id="38ac7-2534">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2534">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2535">Odwołanie do obiektu `array` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2535">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2536">Wartość indeksu `index` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2536">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-2537">`index` i `array` są zdjęte ze stosu ze stosu; wartość przechowywana w pozycji `index` w `array` będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2537">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="38ac7-2538">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2538">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2539">`ldelem.r8` Instrukcji ładuje wartość elementu o indeksie `index` (typ `native int`) w liczony od zera jednowymiarową `array` i umieszcza je w górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2539">The `ldelem.r8` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="38ac7-2540">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2540">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="38ac7-2541">Wartość zwracana `ldelem.r8` jest `float64`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2541">The return value for `ldelem.r8` is `float64`.</span></span>  
  
 <span data-ttu-id="38ac7-2542">Wartości zmiennoprzecinkowe są konwertowane na typ `F` po załadowaniu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2542">Floating-point values are converted to type `F` when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="38ac7-2543"><xref:System.NullReferenceException> wygenerowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2543"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-2544"><xref:System.ArrayTypeMismatchException> wygenerowany, jeśli `array` nie zawiera elementów wymaganego typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2544"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="38ac7-2545"><xref:System.IndexOutOfRangeException> wygenerowany, jeśli `index` ma ujemną lub większą niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2545"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="38ac7-2546">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldelem.r8` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2546">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.r8` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2547">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2547">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2548">Ładuje element zawierający odwołanie do obiektu na indeks określonej tablicy na wierzchu stosu oceny jako typ <see langword="O" /> (odwołanie do obiektu).</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2548">Loads the element containing an object reference at a specified array index onto the top of the evaluation stack as type <see langword="O" /> (object reference).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2549">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2549">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2550">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2550">Format</span></span>|<span data-ttu-id="38ac7-2551">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2551">Assembly Format</span></span>|<span data-ttu-id="38ac7-2552">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2552">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2553">9A</span><span class="sxs-lookup"><span data-stu-id="38ac7-2553">9A</span></span>|<span data-ttu-id="38ac7-2554">ldelem.ref</span><span class="sxs-lookup"><span data-stu-id="38ac7-2554">ldelem.ref</span></span>|<span data-ttu-id="38ac7-2555">Ładuje elementu z odwołania do obiektu w `index` na wierzchu stosu jako typ `O`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2555">Loads the element with an object reference at `index` onto the top of the stack as type `O`.</span></span>|  
  
 <span data-ttu-id="38ac7-2556">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2556">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2557">Odwołanie do obiektu `array` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2557">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2558">Wartość indeksu `index` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2558">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-2559">`index` i `array` są zdjęte ze stosu ze stosu; wartość przechowywana w pozycji `index` w `array` będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2559">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="38ac7-2560">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2560">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2561">`ldelem.ref` Instrukcji ładuje wartość elementu o indeksie `index` (typ `native int`) w liczony od zera jednowymiarową `array` i umieszcza je w górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2561">The `ldelem.ref` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="38ac7-2562">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2562">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="38ac7-2563">Wartość zwracana `ldelem.ref` jest typem `O` (odwołanie do obiektu).</span><span class="sxs-lookup"><span data-stu-id="38ac7-2563">The return value for `ldelem.ref` is type `O` (object reference).</span></span>  
  
 <span data-ttu-id="38ac7-2564"><xref:System.NullReferenceException> wygenerowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2564"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-2565"><xref:System.ArrayTypeMismatchException> wygenerowany, jeśli `array` nie zawiera elementów wymaganego typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2565"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="38ac7-2566"><xref:System.IndexOutOfRangeException> wygenerowany, jeśli `index` ma ujemną lub większą niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2566"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="38ac7-2567">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldelem.ref` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2567">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.ref` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2568">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2568">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2569">Ładuje elementu z typu <see langword="unsigned int8" /> od indeksu określonej tablicy na wierzchu stosu oceny jako <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2569">Loads the element with type <see langword="unsigned int8" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2570">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2570">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2571">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2571">Format</span></span>|<span data-ttu-id="38ac7-2572">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2572">Assembly Format</span></span>|<span data-ttu-id="38ac7-2573">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2573">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2574">91</span><span class="sxs-lookup"><span data-stu-id="38ac7-2574">91</span></span>|<span data-ttu-id="38ac7-2575">ldelem.u1</span><span class="sxs-lookup"><span data-stu-id="38ac7-2575">ldelem.u1</span></span>|<span data-ttu-id="38ac7-2576">Ładuje elementu z typu `unsigned int8` w `index` na wierzchu stosu jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2576">Loads the element with type `unsigned int8` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="38ac7-2577">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2577">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2578">Odwołanie do obiektu `array` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2578">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2579">Wartość indeksu `index` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2579">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-2580">`index` i `array` są zdjęte ze stosu ze stosu; wartość przechowywana w pozycji `index` w `array` będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2580">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="38ac7-2581">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2581">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2582">`ldelem.u1` Instrukcji ładuje wartość elementu o indeksie `index` (typ `native int`) w liczony od zera jednowymiarową `array` i umieszcza je w górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2582">The `ldelem.u1` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="38ac7-2583">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2583">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="38ac7-2584">Wartość zwracana `ldelem.u1` jest `int8`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2584">The return value for `ldelem.u1` is `int8`.</span></span>  
  
 <span data-ttu-id="38ac7-2585">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` (nie `native int`), gdy są załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2585">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="38ac7-2586"><xref:System.NullReferenceException> wygenerowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2586"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-2587"><xref:System.ArrayTypeMismatchException> wygenerowany, jeśli `array` nie zawiera elementów wymaganego typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2587"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="38ac7-2588"><xref:System.IndexOutOfRangeException> wygenerowany, jeśli `index` ma ujemną lub większą niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2588"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="38ac7-2589">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldelem.u1` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2589">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u1` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2590">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2590">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2591">Ładuje elementu z typu <see langword="unsigned int16" /> od indeksu określonej tablicy na wierzchu stosu oceny jako <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2591">Loads the element with type <see langword="unsigned int16" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2592">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2592">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2593">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2593">Format</span></span>|<span data-ttu-id="38ac7-2594">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2594">Assembly Format</span></span>|<span data-ttu-id="38ac7-2595">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2595">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2596">93</span><span class="sxs-lookup"><span data-stu-id="38ac7-2596">93</span></span>|<span data-ttu-id="38ac7-2597">ldelem.u2</span><span class="sxs-lookup"><span data-stu-id="38ac7-2597">ldelem.u2</span></span>|<span data-ttu-id="38ac7-2598">Ładuje elementu z typu `unsigned int16` w indeksie na wierzchu stosu jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2598">Loads the element with type `unsigned int16` at index onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="38ac7-2599">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2599">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2600">Odwołanie do obiektu `array` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2600">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2601">Wartość indeksu `index` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2601">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-2602">`index` i `array` są zdjęte ze stosu ze stosu; wartość przechowywana w pozycji `index` w `array` będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2602">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="38ac7-2603">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2603">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2604">`ldelem.u2` Instrukcji ładuje wartość elementu o indeksie `index` (typ `native int`) w liczony od zera jednowymiarową `array` i umieszcza je w górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2604">The `ldelem.u2` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="38ac7-2605">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2605">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="38ac7-2606">Wartość zwracana `ldelem.u2` jest `int16`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2606">The return value for `ldelem.u2` is `int16`.</span></span>  
  
 <span data-ttu-id="38ac7-2607">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` (nie `native int`), gdy są załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2607">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="38ac7-2608"><xref:System.NullReferenceException> wygenerowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2608"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-2609"><xref:System.ArrayTypeMismatchException> wygenerowany, jeśli `array` nie zawiera elementów wymaganego typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2609"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="38ac7-2610"><xref:System.IndexOutOfRangeException> wygenerowany, jeśli `index` ma ujemną lub większą niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2610"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="38ac7-2611">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldelem.u2` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2611">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u2` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2612">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2612">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2613">Ładuje elementu z typu <see langword="unsigned int32" /> od indeksu określonej tablicy na wierzchu stosu oceny jako <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2613">Loads the element with type <see langword="unsigned int32" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2614">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2614">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2615">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2615">Format</span></span>|<span data-ttu-id="38ac7-2616">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2616">Assembly Format</span></span>|<span data-ttu-id="38ac7-2617">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2617">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2618">95</span><span class="sxs-lookup"><span data-stu-id="38ac7-2618">95</span></span>|<span data-ttu-id="38ac7-2619">ldelem.u4</span><span class="sxs-lookup"><span data-stu-id="38ac7-2619">ldelem.u4</span></span>|<span data-ttu-id="38ac7-2620">Ładuje elementu z typu `unsigned int32` w indeksie na wierzchu stosu jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2620">Loads the element with type `unsigned int32` at index onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="38ac7-2621">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2621">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2622">Odwołanie do obiektu `array` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2622">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2623">Wartość indeksu `index` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2623">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-2624">`index` i `array` są zdjęte ze stosu ze stosu; wartość przechowywana w pozycji `index` w `array` będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2624">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="38ac7-2625">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2625">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2626">`ldelem.u4` Instrukcji ładuje wartość elementu o indeksie `index` (typ `native int`) w liczony od zera jednowymiarową `array` i umieszcza je w górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2626">The `ldelem.u4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="38ac7-2627">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2627">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="38ac7-2628">Wartość zwracana `ldelem.u4` jest `int32`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2628">The return value for `ldelem.u4` is `int32`.</span></span>  
  
 <span data-ttu-id="38ac7-2629">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` (nie `native int`), gdy są załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2629">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="38ac7-2630"><xref:System.NullReferenceException> wygenerowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2630"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-2631"><xref:System.ArrayTypeMismatchException> jest generowany, jeśli tablica nie ma elementów typu wymagane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2631"><xref:System.ArrayTypeMismatchException> is thrown if array does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="38ac7-2632"><xref:System.IndexOutOfRangeException> wygenerowany, jeśli `index` ma ujemną lub większą niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2632"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="38ac7-2633">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldelem.u4` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2633">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u4` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2634">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2634">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelema">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelema;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelema" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelema" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelema As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelema;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelema : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelema" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2635">Ładuje adresu elementu tablicy, od indeksu określonej tablicy na wierzchu stosu oceny jako typ <see langword="&amp;" /> (wskaźnik zarządzane).</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2635">Loads the address of the array element at a specified array index onto the top of the evaluation stack as type <see langword="&amp;" /> (managed pointer).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2636">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2636">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2637">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2637">Format</span></span>|<span data-ttu-id="38ac7-2638">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2638">Assembly Format</span></span>|<span data-ttu-id="38ac7-2639">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2639">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2640">8F < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-2640">8F < `T` ></span></span>|<span data-ttu-id="38ac7-2641">ldelema `class`</span><span class="sxs-lookup"><span data-stu-id="38ac7-2641">ldelema `class`</span></span>|<span data-ttu-id="38ac7-2642">Ładuje adresu elementu tablicy w `index` na wierzchu stosu oceny jako typ `&` (wskaźnik zarządzane).</span><span class="sxs-lookup"><span data-stu-id="38ac7-2642">Loads the address of the array element at `index` onto the top of the evaluation stack as type `&` (managed pointer).</span></span>|  
  
 <span data-ttu-id="38ac7-2643">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2643">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2644">Odwołanie do obiektu `array` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2644">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2645">Wartość indeksu `index` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2645">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-2646">`index` i `array` są zdjęte ze stosu ze stosu; adres przechowywane na pozycji `index` w `array` będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2646">`index` and `array` are popped from the stack; the address stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="38ac7-2647">Adres spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2647">The address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2648">`ldelema` Służy do pobierania adresu obiektu od określonego indeksu tablicy obiektów (typu `class`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-2648">The `ldelema` is used to retrieve the address of an object at a particular index in an array of objects (of type `class`).</span></span> <span data-ttu-id="38ac7-2649">`ldelema` Instrukcji ładuje adres wartości w indeksie `index` (typ `native int`) w liczony od zera jednowymiarową `array` i umieszcza je w górnej części stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2649">The `ldelema` instruction loads the address of the value at index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="38ac7-2650">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2650">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="38ac7-2651">Wartość musi być typu `class` przekazaną za pomocą instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2651">The value must be of type `class` passed with the instruction.</span></span>  
  
 <span data-ttu-id="38ac7-2652">Wartość zwracana `ldelema` zarządzanych wskaźnika (typ `&`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-2652">The return value for `ldelema` is a managed pointer (type `&`).</span></span>  
  
 <span data-ttu-id="38ac7-2653">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` (nie `native int`), gdy są załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2653">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="38ac7-2654"><xref:System.NullReferenceException> wygenerowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2654"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-2655"><xref:System.ArrayTypeMismatchException> wygenerowany, jeśli `array` nie zawiera elementów wymaganego typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2655"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="38ac7-2656"><xref:System.IndexOutOfRangeException> wygenerowany, jeśli `index` ma ujemną lub większą niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2656"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="38ac7-2657">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldelema` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2657">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelema` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2658">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2658">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2659">Wyszukuje wartość pola w obiekcie, w której odwołanie jest obecnie na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2659">Finds the value of a field in the object whose reference is currently on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2660">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2660">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2661">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2661">Format</span></span>|<span data-ttu-id="38ac7-2662">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2662">Assembly Format</span></span>|<span data-ttu-id="38ac7-2663">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2663">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2664">7B < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-2664">7B < `T` ></span></span>|<span data-ttu-id="38ac7-2665">ldfld `field`</span><span class="sxs-lookup"><span data-stu-id="38ac7-2665">ldfld `field`</span></span>|<span data-ttu-id="38ac7-2666">Wypychanie wartości pola w określony obiekt na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2666">Pushes the value of a field in a specified object onto the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-2667">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2667">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2668">Odwołanie do obiektu (lub wskaźnika) spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2668">An object reference (or pointer) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2669">Odwołanie do obiektu (lub wskaźnika) ze stosu; zdjęte ze stosu jest Znaleziono wartość określonego pola w obiekcie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2669">The object reference (or pointer) is popped from the stack; the value of the specified field in the object is found.</span></span>  
  
3.  <span data-ttu-id="38ac7-2670">Wartość przechowywana w polu spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2670">The value stored in the field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2671">`ldfld` Instrukcji wypychanie wartości pola znajdującego się w obiekcie na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2671">The `ldfld` instruction pushes the value of a field located in an object onto the stack.</span></span> <span data-ttu-id="38ac7-2672">Obiekt musi być na stosie jako odwołanie do obiektu (typ `O`), wskaźnika zarządzanych (typu `&`), niezarządzanego wskaźnika (typu `native int`), przejściowa wskaźnika (typu `*`), lub wystąpienia typu wartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2672">The object must be on the stack as an object reference (type `O`), a managed pointer (type `&`), an unmanaged pointer (type `native int`), a transient pointer (type `*`), or an instance of a value type.</span></span> <span data-ttu-id="38ac7-2673">Korzystanie z niezarządzanego wskaźnika nie jest dozwolone w weryfikowalny kod.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2673">The use of an unmanaged pointer is not permitted in verifiable code.</span></span> <span data-ttu-id="38ac7-2674">Pole obiektu jest określone przez token metadanych, który musi odwoływać się do elementu członkowskiego pola.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2674">The object's field is specified by a metadata token that must refer to a field member.</span></span> <span data-ttu-id="38ac7-2675">Zwracany typ jest taka sama jak skojarzony z polem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2675">The return type is the same as the one associated with the field.</span></span> <span data-ttu-id="38ac7-2676">Pole może być polem wystąpienia (w takim przypadku obiekt nie może być odwołaniem o wartości zerowej) lub pola statycznego.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2676">The field may be either an instance field (in which case the object must not be a null reference) or a static field.</span></span>  
  
 <span data-ttu-id="38ac7-2677">`ldfld` Instrukcji może być poprzedzone jednego lub obu <xref:System.Reflection.Emit.OpCodes.Unaligned> i <xref:System.Reflection.Emit.OpCodes.Volatile> prefiksy.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2677">The `ldfld` instruction can be preceded by either or both of the <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile> prefixes.</span></span>  
  
 <span data-ttu-id="38ac7-2678"><xref:System.NullReferenceException> jest generowany, jeśli obiekt ma wartość null i nie jest statyczne.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2678"><xref:System.NullReferenceException> is thrown if the object is null and the field is not static.</span></span>  
  
 <span data-ttu-id="38ac7-2679"><xref:System.MissingFieldException> jest generowany, jeśli określone pole nie zostanie znaleziony w metadanych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2679"><xref:System.MissingFieldException> is thrown if the specified field is not found in the metadata.</span></span> <span data-ttu-id="38ac7-2680">Jest to zazwyczaj sprawdzana podczas konwertowania instrukcje Microsoft języka pośredniego (MSIL) do kodu macierzystego, nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2680">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="38ac7-2681">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldfld` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2681">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldfld` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2682">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2682">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldflda">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldflda;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldflda" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldflda" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldflda As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldflda;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldflda : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldflda" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2683">Wyszukuje adresu pola w obiekcie, w której odwołanie jest obecnie na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2683">Finds the address of a field in the object whose reference is currently on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2684">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2684">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2685">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2685">Format</span></span>|<span data-ttu-id="38ac7-2686">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2686">Assembly Format</span></span>|<span data-ttu-id="38ac7-2687">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2687">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2688">7C < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-2688">7C < `T` ></span></span>|<span data-ttu-id="38ac7-2689">ldflda `field`</span><span class="sxs-lookup"><span data-stu-id="38ac7-2689">ldflda `field`</span></span>|<span data-ttu-id="38ac7-2690">Wypchnięcia adres `field` w określony obiekt na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2690">Pushes the address of `field` in a specified object onto the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-2691">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2691">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2692">Odwołanie do obiektu (lub wskaźnika) spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2692">An object reference (or pointer) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2693">Odwołanie do obiektu (lub wskaźnika) ze stosu; zdjęte ze stosu jest Znaleziono adres określonego pola w obiekcie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2693">The object reference (or pointer) is popped from the stack; the address of the specified field in the object is found.</span></span>  
  
3.  <span data-ttu-id="38ac7-2694">Adres określone pole spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2694">The address of the specified field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2695">`ldflda` Instrukcji wypchnięcia adresu pola znajdującego się w obiekcie na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2695">The `ldflda` instruction pushes the address of a field located in an object onto the stack.</span></span> <span data-ttu-id="38ac7-2696">Obiekt musi być na stosie jako odwołanie do obiektu (typ `O`), wskaźnika zarządzanych (typu `&`), niezarządzanego wskaźnika (typu `native int`), przejściowa wskaźnika (typu `*`), lub wystąpienia typu wartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2696">The object must be on the stack as an object reference (type `O`), a managed pointer (type `&`), an unmanaged pointer (type `native int`), a transient pointer (type `*`), or an instance of a value type.</span></span> <span data-ttu-id="38ac7-2697">Korzystanie z niezarządzanego wskaźnika nie jest dozwolone w weryfikowalny kod.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2697">The use of an unmanaged pointer is not permitted in verifiable code.</span></span> <span data-ttu-id="38ac7-2698">Pole obiektu jest określone przez token metadanych, który musi odwoływać się do elementu członkowskiego pola.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2698">The object's field is specified by a metadata token that must refer to a field member.</span></span>  
  
 <span data-ttu-id="38ac7-2699">Wartość zwrócona przez `ldflda` zarządzanych wskaźnika (typ `&`), chyba że obiekt spoczywa na stosie jako niezarządzanego wskaźnika, w którym to przypadku środki adres zwrotny jest również niezarządzanego wskaźnika (typ `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-2699">The value returned by `ldflda` is a managed pointer (type `&`) unless the object is pushed onto the stack as an unmanaged pointer, in which case the return address is also an unmanaged pointer (type `native int`).</span></span>  
  
 <span data-ttu-id="38ac7-2700">`ldflda` Instrukcji może być poprzedzone jednego lub obu <xref:System.Reflection.Emit.OpCodes.Unaligned> i <xref:System.Reflection.Emit.OpCodes.Volatile> prefiksy.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2700">The `ldflda` instruction can be preceded by either or both of the <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile> prefixes.</span></span>  
  
 <span data-ttu-id="38ac7-2701"><xref:System.InvalidOperationException> jest generowany, jeśli obiekt nie jest w domenie aplikacji, z którego jest uzyskiwany.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2701"><xref:System.InvalidOperationException> is thrown if the object is not within the application domain from which it is being accessed.</span></span> <span data-ttu-id="38ac7-2702">Nie można załadować adresu pola, który nie znajduje się w domenie podczas uzyskiwania dostępu do aplikacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2702">The address of a field that is not inside the accessing application domain cannot be loaded.</span></span>  
  
 <span data-ttu-id="38ac7-2703"><xref:System.NullReferenceException> jest generowany, jeśli obiekt ma wartość null i nie jest statyczne.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2703"><xref:System.NullReferenceException> is thrown if the object is null and the field is not static.</span></span>  
  
 <span data-ttu-id="38ac7-2704"><xref:System.MissingFieldException> jest generowany, jeśli określone pole nie zostanie znaleziony w metadanych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2704"><xref:System.MissingFieldException> is thrown if the specified field is not found in the metadata.</span></span> <span data-ttu-id="38ac7-2705">Jest to zazwyczaj sprawdzana podczas konwertowania instrukcje Microsoft języka pośredniego (MSIL) do kodu macierzystego, nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2705">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="38ac7-2706">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldflda` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2706">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldflda` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2707">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2707">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldftn">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldftn;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldftn" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldftn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldftn As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldftn;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldftn : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldftn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2708">Wypchnięcia niezarządzanego wskaźnika (typ <see langword="native int" />) do kodu natywnego wykonania określonej metody na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2708">Pushes an unmanaged pointer (type <see langword="native int" />) to the native code implementing a specific method onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2709">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2709">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2710">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2710">Format</span></span>|<span data-ttu-id="38ac7-2711">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2711">Assembly Format</span></span>|<span data-ttu-id="38ac7-2712">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2712">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2713">FE 06 < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-2713">FE 06 < `T` ></span></span>|<span data-ttu-id="38ac7-2714">Elementy ldftn `method`</span><span class="sxs-lookup"><span data-stu-id="38ac7-2714">ldftn `method`</span></span>|<span data-ttu-id="38ac7-2715">Wypychanie wskaźnik do metody odwołuje się `method` na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2715">Pushes a pointer to a method referenced by `method` on the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-2716">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2716">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2717">Niezarządzany wskaźnik do określonej metody spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2717">The unmanaged pointer to a specific method is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2718">Określona metoda (`method`) można wywoływać za pomocą <xref:System.Reflection.Emit.OpCodes.Calli> instrukcji, jeśli odwołuje się ona zarządzanych — metoda (lub skrótowa, która przejścia z kodu zarządzanego do kodu niezarządzanego).</span><span class="sxs-lookup"><span data-stu-id="38ac7-2718">The specific method (`method`) can be called using the <xref:System.Reflection.Emit.OpCodes.Calli> instruction if it references a managed method (or a stub that transitions from managed to unmanaged code).</span></span>  
  
 <span data-ttu-id="38ac7-2719">Wartość zwracana punktów do kodu natywnego za pomocą konwencji wywoływania środowiska CLR.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2719">The value returned points to native code using the CLR calling convention.</span></span> <span data-ttu-id="38ac7-2720">Wskaźnik tej metody nie powinny być przekazywane do niezarządzanego kodu macierzystego jako procedura wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2720">This method pointer should not be passed to unmanaged native code as a callback routine.</span></span>  
  
 <span data-ttu-id="38ac7-2721">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldftn` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2721">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldftn` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2722">ILGenerator.Emit(OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2722">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2723">Ładuje wartości typu <see langword="native int" /> jako <see langword="native int" /> na obliczanie pośrednio stosu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2723">Loads a value of type <see langword="native int" /> as a <see langword="native int" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2724">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2724">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2725">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2725">Format</span></span>|<span data-ttu-id="38ac7-2726">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2726">Assembly Format</span></span>|<span data-ttu-id="38ac7-2727">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2727">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2728">4D</span><span class="sxs-lookup"><span data-stu-id="38ac7-2728">4D</span></span>|<span data-ttu-id="38ac7-2729">ldind.i</span><span class="sxs-lookup"><span data-stu-id="38ac7-2729">ldind.i</span></span>|<span data-ttu-id="38ac7-2730">Ładunki `native int` wartość pod adresem `addr` na stosie jako `native int`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2730">Loads the `native int` value at address `addr` onto the stack as a `native int`.</span></span>|  
  
 <span data-ttu-id="38ac7-2731">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2731">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2732">Adres spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2732">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2733">Ten adres jest zdjęte ze stosu ze stosu; wartość znajduje się pod adresem jest pobierane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2733">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="38ac7-2734">Wartość pobranych spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2734">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2735">`ldind.i` Instrukcji pośrednio ładuje `native int` wartości z określonego adresu (typu `native int`, `&`, lub \*) na stosie jako `native int`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2735">The `ldind.i` instruction indirectly loads a `native int` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a `native int`.</span></span>  
  
 <span data-ttu-id="38ac7-2736">Wszystkie `ldind` instrukcje są skróty klawiaturowe <xref:System.Reflection.Emit.OpCodes.Ldobj> instrukcji określający odpowiadającą klasę wartości wbudowanych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2736">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="38ac7-2737">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` (nie `native int`), gdy są załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2737">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="38ac7-2738">Wartości zmiennoprzecinkowe są konwertowane na `F` wpisz po załadowaniu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2738">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="38ac7-2739">Nieprawidłowo sformułowany Microsoft pośredniego Language (MSIL) zapewnia, że `ldind` instrukcje są używane w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2739">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="38ac7-2740">Adres przypisany początkowo na stosie muszą być wyrównane do fizycznych rozmiar obiektów na maszynie lub <xref:System.NullReferenceException> może wystąpić (zobacz <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcję zapobiegawczych).</span><span class="sxs-lookup"><span data-stu-id="38ac7-2740">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="38ac7-2741">Wyniki wszystkich instrukcji MSIL, które zwracają adresów (na przykład <xref:System.Reflection.Emit.OpCodes.Ldloca> i <xref:System.Reflection.Emit.OpCodes.Ldarga>) bezpiecznie są wyrównane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2741">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="38ac7-2742">Dla typów danych jest większa niż 1 bajt kolejność bajtów jest zależna od docelowego procesora CPU.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2742">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="38ac7-2743">Kod, który jest zależny od określanie kolejności bajtów nie może działać na wszystkich platformach.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2743">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="38ac7-2744"><xref:System.NullReferenceException> może zostać wygenerowany, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2744"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="38ac7-2745">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldind.i` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2745">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2746">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2746">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2747">Ładuje wartości typu <see langword="int8" /> jako <see langword="int32" /> na obliczanie pośrednio stosu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2747">Loads a value of type <see langword="int8" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2748">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2748">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2749">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2749">Format</span></span>|<span data-ttu-id="38ac7-2750">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2750">Assembly Format</span></span>|<span data-ttu-id="38ac7-2751">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2751">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2752">46</span><span class="sxs-lookup"><span data-stu-id="38ac7-2752">46</span></span>|<span data-ttu-id="38ac7-2753">ldind.I1</span><span class="sxs-lookup"><span data-stu-id="38ac7-2753">ldind.i1</span></span>|<span data-ttu-id="38ac7-2754">Ładunki `int8` wartość pod adresem `addr` na stosie jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2754">Loads the `int8` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="38ac7-2755">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2755">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2756">Adres spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2756">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2757">Ten adres jest zdjęte ze stosu ze stosu; wartość znajduje się pod adresem jest pobierane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2757">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="38ac7-2758">Wartość pobranych spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2758">The fetched value is pushed onto the stack..</span></span>  
  
 <span data-ttu-id="38ac7-2759">`ldind.i1` Instrukcji pośrednio ładuje `int8` wartości z określonego adresu (typu `native int`, `&`, lub \*) na stosie jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2759">The `ldind.i1` instruction indirectly loads an `int8` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="38ac7-2760">Wszystkie `ldind` instrukcje są skróty klawiaturowe <xref:System.Reflection.Emit.OpCodes.Ldobj> instrukcji określający odpowiadającą klasę wartości wbudowanych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2760">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="38ac7-2761">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` (nie `native int`), gdy są załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2761">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="38ac7-2762">Wartości zmiennoprzecinkowe są konwertowane na `F` wpisz po załadowaniu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2762">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="38ac7-2763">Nieprawidłowo sformułowany Microsoft pośredniego Language (MSIL) zapewnia, że `ldind` instrukcje są używane w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2763">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="38ac7-2764">Adres przypisany początkowo na stosie muszą być wyrównane do fizycznych rozmiar obiektów na maszynie lub <xref:System.NullReferenceException> może wystąpić (zobacz <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcję zapobiegawczych).</span><span class="sxs-lookup"><span data-stu-id="38ac7-2764">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="38ac7-2765">Wyniki wszystkich instrukcji MSIL, które zwracają adresów (na przykład <xref:System.Reflection.Emit.OpCodes.Ldloca> i <xref:System.Reflection.Emit.OpCodes.Ldarga>) bezpiecznie są wyrównane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2765">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="38ac7-2766">Dla typów danych jest większa niż 1 bajt kolejność bajtów jest zależna od docelowego procesora CPU.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2766">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="38ac7-2767">Kod, który jest zależny od określanie kolejności bajtów nie może działać na wszystkich platformach.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2767">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="38ac7-2768"><xref:System.NullReferenceException> może zostać wygenerowany, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2768"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="38ac7-2769">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldind.i1` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2769">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i1` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2770">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2770">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2771">Ładuje wartości typu <see langword="int16" /> jako <see langword="int32" /> na obliczanie pośrednio stosu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2771">Loads a value of type <see langword="int16" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2772">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2772">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2773">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2773">Format</span></span>|<span data-ttu-id="38ac7-2774">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2774">Assembly Format</span></span>|<span data-ttu-id="38ac7-2775">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2775">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2776">48</span><span class="sxs-lookup"><span data-stu-id="38ac7-2776">48</span></span>|<span data-ttu-id="38ac7-2777">ldind.I2</span><span class="sxs-lookup"><span data-stu-id="38ac7-2777">ldind.i2</span></span>|<span data-ttu-id="38ac7-2778">Ładunki `int16` wartość pod adresem `addr` na stosie jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2778">Loads the `int16` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="38ac7-2779">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2779">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2780">Adres spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2780">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2781">Ten adres jest zdjęte ze stosu ze stosu; wartość znajduje się pod adresem jest pobierane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2781">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="38ac7-2782">Wartość pobranych spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2782">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2783">`ldind.i2` Instrukcji pośrednio ładuje `int16` wartości z określonego adresu (typu `native int`, `&`, lub \*) na stosie jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2783">The `ldind.i2` instruction indirectly loads an `int16` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="38ac7-2784">Wszystkie `ldind` instrukcje są skróty klawiaturowe <xref:System.Reflection.Emit.OpCodes.Ldobj> instrukcji określający odpowiadającą klasę wartości wbudowanych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2784">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="38ac7-2785">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` (nie `native int`), gdy są załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2785">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="38ac7-2786">Wartości zmiennoprzecinkowe są konwertowane na `F` wpisz po załadowaniu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2786">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="38ac7-2787">Nieprawidłowo sformułowany Microsoft pośredniego Language (MSIL) zapewnia, że `ldind` instrukcje są używane w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2787">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="38ac7-2788">Adres przypisany początkowo na stosie muszą być wyrównane do fizycznych rozmiar obiektów na maszynie lub <xref:System.NullReferenceException> może wystąpić (zobacz <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcję zapobiegawczych).</span><span class="sxs-lookup"><span data-stu-id="38ac7-2788">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="38ac7-2789">Wyniki wszystkich instrukcji MSIL, które zwracają adresów (na przykład <xref:System.Reflection.Emit.OpCodes.Ldloca> i <xref:System.Reflection.Emit.OpCodes.Ldarga>) bezpiecznie są wyrównane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2789">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="38ac7-2790">Dla typów danych jest większa niż 1 bajt kolejność bajtów jest zależna od docelowego procesora CPU.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2790">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="38ac7-2791">Kod, który jest zależny od określanie kolejności bajtów nie może działać na wszystkich platformach.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2791">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="38ac7-2792"><xref:System.NullReferenceException> może zostać wygenerowany, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2792"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="38ac7-2793">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldind.i2` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2793">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i2` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2794">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2794">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2795">Ładuje wartości typu <see langword="int32" /> jako <see langword="int32" /> na obliczanie pośrednio stosu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2795">Loads a value of type <see langword="int32" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2796">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2796">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2797">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2797">Format</span></span>|<span data-ttu-id="38ac7-2798">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2798">Assembly Format</span></span>|<span data-ttu-id="38ac7-2799">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2799">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2800">4A</span><span class="sxs-lookup"><span data-stu-id="38ac7-2800">4A</span></span>|<span data-ttu-id="38ac7-2801">ldind.I4</span><span class="sxs-lookup"><span data-stu-id="38ac7-2801">ldind.i4</span></span>|<span data-ttu-id="38ac7-2802">Ładunki `int32` wartość pod adresem `addr` na stosie jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2802">Loads the `int32` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="38ac7-2803">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2803">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2804">Adres spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2804">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2805">Ten adres jest zdjęte ze stosu ze stosu; wartość znajduje się pod adresem jest pobierane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2805">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="38ac7-2806">Wartość pobranych spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2806">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2807">`ldind.i4` Instrukcji pośrednio ładuje `int32` wartości z określonego adresu (typu `native int`, `&`, lub \*) na stosie jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2807">The `ldind.i4` instruction indirectly loads an `int32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="38ac7-2808">Wszystkie `ldind` instrukcje są skróty klawiaturowe <xref:System.Reflection.Emit.OpCodes.Ldobj> instrukcji określający odpowiadającą klasę wartości wbudowanych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2808">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="38ac7-2809">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` (nie `native int`), gdy są załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2809">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="38ac7-2810">Wartości zmiennoprzecinkowe są konwertowane na `F` wpisz po załadowaniu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2810">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="38ac7-2811">Nieprawidłowo sformułowany Microsoft pośredniego Language (MSIL) zapewnia, że `ldind` instrukcje są używane w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2811">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="38ac7-2812">Adres przypisany początkowo na stosie muszą być wyrównane do fizycznych rozmiar obiektów na maszynie lub <xref:System.NullReferenceException> może wystąpić (zobacz <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcję zapobiegawczych).</span><span class="sxs-lookup"><span data-stu-id="38ac7-2812">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="38ac7-2813">Wyniki wszystkich instrukcji MSIL, które zwracają adresów (na przykład <xref:System.Reflection.Emit.OpCodes.Ldloca> i <xref:System.Reflection.Emit.OpCodes.Ldarga>) bezpiecznie są wyrównane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2813">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="38ac7-2814">Dla typów danych jest większa niż 1 bajt kolejność bajtów jest zależna od docelowego procesora CPU.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2814">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="38ac7-2815">Kod, który jest zależny od określanie kolejności bajtów nie może działać na wszystkich platformach.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2815">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="38ac7-2816"><xref:System.NullReferenceException> może zostać wygenerowany, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2816"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="38ac7-2817">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldind.i4` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2817">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i4` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2818">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2818">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2819">Ładuje wartości typu <see langword="int64" /> jako <see langword="int64" /> na obliczanie pośrednio stosu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2819">Loads a value of type <see langword="int64" /> as an <see langword="int64" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2820">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2820">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2821">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2821">Format</span></span>|<span data-ttu-id="38ac7-2822">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2822">Assembly Format</span></span>|<span data-ttu-id="38ac7-2823">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2823">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2824">4C</span><span class="sxs-lookup"><span data-stu-id="38ac7-2824">4C</span></span>|<span data-ttu-id="38ac7-2825">ldind.I8</span><span class="sxs-lookup"><span data-stu-id="38ac7-2825">ldind.i8</span></span>|<span data-ttu-id="38ac7-2826">Ładunki `int64` wartość pod adresem `addr` na stosie jako `int64`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2826">Loads the `int64` value at address `addr` onto the stack as an `int64`.</span></span>|  
  
 <span data-ttu-id="38ac7-2827">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2827">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2828">Adres spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2828">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2829">Ten adres jest zdjęte ze stosu ze stosu; wartość znajduje się pod adresem jest pobierane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2829">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="38ac7-2830">Wartość pobranych spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2830">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2831">`ldind.i8` Instrukcji pośrednio ładuje `int64` wartości z określonego adresu (typu `native int`, `&`, lub \*) na stosie jako `int64`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2831">The `ldind.i8` instruction indirectly loads an `int64` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int64`.</span></span>  
  
 <span data-ttu-id="38ac7-2832">Wszystkie `ldind` instrukcje są skróty klawiaturowe <xref:System.Reflection.Emit.OpCodes.Ldobj> instrukcji określający odpowiadającą klasę wartości wbudowanych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2832">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="38ac7-2833">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` (nie `native int`), gdy są załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2833">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="38ac7-2834">Wartości zmiennoprzecinkowe są konwertowane na `F` wpisz po załadowaniu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2834">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="38ac7-2835">Nieprawidłowo sformułowany Microsoft pośredniego Language (MSIL) zapewnia, że `ldind` instrukcje są używane w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2835">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="38ac7-2836">Adres przypisany początkowo na stosie muszą być wyrównane do fizycznych rozmiar obiektów na maszynie lub <xref:System.NullReferenceException> może wystąpić (zobacz <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcję zapobiegawczych).</span><span class="sxs-lookup"><span data-stu-id="38ac7-2836">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="38ac7-2837">Wyniki wszystkich instrukcji MSIL, które zwracają adresów (na przykład <xref:System.Reflection.Emit.OpCodes.Ldloca> i <xref:System.Reflection.Emit.OpCodes.Ldarga>) bezpiecznie są wyrównane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2837">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="38ac7-2838">Dla typów danych jest większa niż 1 bajt kolejność bajtów jest zależna od docelowego procesora CPU.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2838">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="38ac7-2839">Kod, który jest zależny od określanie kolejności bajtów nie może działać na wszystkich platformach.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2839">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="38ac7-2840"><xref:System.NullReferenceException> może zostać wygenerowany, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2840"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="38ac7-2841">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldind.i8` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2841">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i8` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2842">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2842">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2843">Ładuje wartości typu <see langword="float32" /> jako typ <see langword="F" /> (float) na stosie oceny pośrednio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2843">Loads a value of type <see langword="float32" /> as a type <see langword="F" /> (float) onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2844">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2844">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2845">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2845">Format</span></span>|<span data-ttu-id="38ac7-2846">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2846">Assembly Format</span></span>|<span data-ttu-id="38ac7-2847">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2847">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2848">4E</span><span class="sxs-lookup"><span data-stu-id="38ac7-2848">4E</span></span>|<span data-ttu-id="38ac7-2849">ldind.R4</span><span class="sxs-lookup"><span data-stu-id="38ac7-2849">ldind.r4</span></span>|<span data-ttu-id="38ac7-2850">Ładunki `float32` wartość pod adresem `addr` na stosie jako typ `F`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2850">Loads the `float32` value at address `addr` onto the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="38ac7-2851">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2851">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2852">Adres spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2852">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2853">Ten adres jest zdjęte ze stosu ze stosu; wartość znajduje się pod adresem jest pobierane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2853">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="38ac7-2854">Wartość pobranych spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2854">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2855">`ldind.r4` Instrukcji pośrednio ładuje `float32` wartości z określonego adresu (typu `native int`, `&`, lub \*) na stosie jako typ `F`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2855">The `ldind.r4` instruction indirectly loads a `float32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a type `F`.</span></span>  
  
 <span data-ttu-id="38ac7-2856">Wszystkie `ldind` instrukcje są skróty klawiaturowe <xref:System.Reflection.Emit.OpCodes.Ldobj> instrukcji określający odpowiadającą klasę wartości wbudowanych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2856">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="38ac7-2857">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` (nie `native int`), gdy są załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2857">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="38ac7-2858">Wartości zmiennoprzecinkowe są konwertowane na `F` wpisz po załadowaniu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2858">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="38ac7-2859">Nieprawidłowo sformułowany Microsoft pośredniego Language (MSIL) zapewnia, że `ldind` instrukcje są używane w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2859">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="38ac7-2860">Adres przypisany początkowo na stosie muszą być wyrównane do fizycznych rozmiar obiektów na maszynie lub <xref:System.NullReferenceException> może wystąpić (zobacz <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcję zapobiegawczych).</span><span class="sxs-lookup"><span data-stu-id="38ac7-2860">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="38ac7-2861">Wyniki wszystkich instrukcji MSIL, które zwracają adresów (na przykład <xref:System.Reflection.Emit.OpCodes.Ldloca> i <xref:System.Reflection.Emit.OpCodes.Ldarga>) bezpiecznie są wyrównane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2861">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="38ac7-2862">Dla typów danych jest większa niż 1 bajt kolejność bajtów jest zależna od docelowego procesora CPU.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2862">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="38ac7-2863">Kod, który jest zależny od określanie kolejności bajtów nie może działać na wszystkich platformach.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2863">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="38ac7-2864"><xref:System.NullReferenceException> może zostać wygenerowany, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2864"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="38ac7-2865">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldind.r4` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2865">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.r4` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2866">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2866">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2867">Ładuje wartości typu <see langword="float64" /> jako typ <see langword="F" /> (float) na stosie oceny pośrednio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2867">Loads a value of type <see langword="float64" /> as a type <see langword="F" /> (float) onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2868">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2868">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2869">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2869">Format</span></span>|<span data-ttu-id="38ac7-2870">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2870">Assembly Format</span></span>|<span data-ttu-id="38ac7-2871">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2871">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2872">4F</span><span class="sxs-lookup"><span data-stu-id="38ac7-2872">4F</span></span>|<span data-ttu-id="38ac7-2873">ldind.R8</span><span class="sxs-lookup"><span data-stu-id="38ac7-2873">ldind.r8</span></span>|<span data-ttu-id="38ac7-2874">Ładunki `float64` wartość pod adresem `addr` na stosie jako typ `F`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2874">Loads the `float64` value at address `addr` onto the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="38ac7-2875">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2875">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2876">Adres spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2876">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2877">Ten adres jest zdjęte ze stosu ze stosu; wartość znajduje się pod adresem jest pobierane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2877">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="38ac7-2878">Wartość pobranych spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2878">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2879">`ldind.r8` Instrukcji pośrednio ładuje `float64` wartości z określonego adresu (typu `native int`, `&`, lub \*) na stosie jako `float64`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2879">The `ldind.r8` instruction indirectly loads a `float64` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a `float64`.</span></span>  
  
 <span data-ttu-id="38ac7-2880">Wszystkie `ldind` instrukcje są skróty klawiaturowe <xref:System.Reflection.Emit.OpCodes.Ldobj> instrukcji określający odpowiadającą klasę wartości wbudowanych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2880">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="38ac7-2881">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` (nie `native int`), gdy są załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2881">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="38ac7-2882">Wartości zmiennoprzecinkowe są konwertowane na `F` wpisz po załadowaniu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2882">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="38ac7-2883">Nieprawidłowo sformułowany Microsoft pośredniego Language (MSIL) zapewnia, że `ldind` instrukcje są używane w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2883">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="38ac7-2884">Adres przypisany początkowo na stosie muszą być wyrównane do fizycznych rozmiar obiektów na maszynie lub <xref:System.NullReferenceException> może wystąpić (zobacz <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcję zapobiegawczych).</span><span class="sxs-lookup"><span data-stu-id="38ac7-2884">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="38ac7-2885">Wyniki wszystkich instrukcji MSIL, które zwracają adresów (na przykład <xref:System.Reflection.Emit.OpCodes.Ldloca> i <xref:System.Reflection.Emit.OpCodes.Ldarga>) bezpiecznie są wyrównane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2885">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="38ac7-2886">Dla typów danych jest większa niż 1 bajt kolejność bajtów jest zależna od docelowego procesora CPU.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2886">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="38ac7-2887">Kod, który jest zależny od określanie kolejności bajtów nie może działać na wszystkich platformach.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2887">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="38ac7-2888"><xref:System.NullReferenceException> może zostać wygenerowany, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2888"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="38ac7-2889">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldind.r8` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2889">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.r8` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2890">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2890">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2891">Ładuje odwołanie do obiektu o typie <see langword="O" /> (obiektu odwołania) do oceny pośrednio stosu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2891">Loads an object reference as a type <see langword="O" /> (object reference) onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2892">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2892">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2893">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2893">Format</span></span>|<span data-ttu-id="38ac7-2894">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2894">Assembly Format</span></span>|<span data-ttu-id="38ac7-2895">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2895">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2896">50</span><span class="sxs-lookup"><span data-stu-id="38ac7-2896">50</span></span>|<span data-ttu-id="38ac7-2897">ldind.ref</span><span class="sxs-lookup"><span data-stu-id="38ac7-2897">ldind.ref</span></span>|<span data-ttu-id="38ac7-2898">Ładuje odwołanie do obiektu pod adresem `addr` na stosie jako typu `O`</span><span class="sxs-lookup"><span data-stu-id="38ac7-2898">Loads the object reference at address `addr` onto the stack as a type `O`</span></span>|  
  
 <span data-ttu-id="38ac7-2899">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2899">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2900">Adres spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2900">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2901">Ten adres jest zdjęte ze stosu ze stosu; Odwołanie do obiektu znajdujący się pod adresem jest pobierane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2901">The address is popped from the stack; the object reference located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="38ac7-2902">Odwołanie pobranych spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2902">The fetched reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2903">`ldind.ref` Instrukcji ładuje pośrednie odwołanie do obiektu określony adres (typu `native int`, `&`, lub \*) na stosie jako typ `O`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2903">The `ldind.ref` instruction indirectly loads the object reference the specified address (of type `native int`, `&`, or \*) onto the stack as type `O`.</span></span>  
  
 <span data-ttu-id="38ac7-2904">Wszystkie `ldind` instrukcje są skróty klawiaturowe <xref:System.Reflection.Emit.OpCodes.Ldobj> instrukcji określający odpowiadającą klasę wartości wbudowanych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2904">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="38ac7-2905">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` (nie `native int`), gdy są załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2905">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="38ac7-2906">Wartości zmiennoprzecinkowe są konwertowane na `F` wpisz po załadowaniu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2906">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="38ac7-2907">Nieprawidłowo sformułowany Microsoft pośredniego Language (MSIL) zapewnia, że `ldind` instrukcje są używane w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2907">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="38ac7-2908">Adres przypisany początkowo na stosie muszą być wyrównane do fizycznych rozmiar obiektów na maszynie lub <xref:System.NullReferenceException> może wystąpić (zobacz <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcję zapobiegawczych).</span><span class="sxs-lookup"><span data-stu-id="38ac7-2908">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="38ac7-2909">Wyniki wszystkich instrukcji MSIL, które zwracają adresów (na przykład <xref:System.Reflection.Emit.OpCodes.Ldloca> i <xref:System.Reflection.Emit.OpCodes.Ldarga>) bezpiecznie są wyrównane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2909">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="38ac7-2910">Dla typów danych jest większa niż 1 bajt kolejność bajtów jest zależna od docelowego procesora CPU.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2910">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="38ac7-2911">Kod, który jest zależny od określanie kolejności bajtów nie może działać na wszystkich platformach.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2911">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="38ac7-2912"><xref:System.NullReferenceException> może zostać wygenerowany, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2912"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="38ac7-2913">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldind.ref` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2913">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.ref` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2914">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2914">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2915">Ładuje wartości typu <see langword="unsigned int8" /> jako <see langword="int32" /> na obliczanie pośrednio stosu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2915">Loads a value of type <see langword="unsigned int8" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2916">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2916">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2917">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2917">Format</span></span>|<span data-ttu-id="38ac7-2918">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2918">Assembly Format</span></span>|<span data-ttu-id="38ac7-2919">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2919">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2920">47</span><span class="sxs-lookup"><span data-stu-id="38ac7-2920">47</span></span>|<span data-ttu-id="38ac7-2921">ldind.U1</span><span class="sxs-lookup"><span data-stu-id="38ac7-2921">ldind.u1</span></span>|<span data-ttu-id="38ac7-2922">Ładunki `unsigned int8` wartość pod adresem `addr` na stosie jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2922">Loads the `unsigned int8` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="38ac7-2923">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2923">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2924">Adres spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2924">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2925">Ten adres jest zdjęte ze stosu ze stosu; wartość znajduje się pod adresem jest pobierane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2925">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="38ac7-2926">Wartość pobranych spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2926">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2927">`ldind.u1` Instrukcji pośrednio ładuje `unsigned int8` wartości z określonego adresu (typu`native int`, `&`, lub \*) na stosie jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2927">The `ldind.u1` instruction indirectly loads an `unsigned int8` value from the specified address (of type`native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="38ac7-2928">Wszystkie `ldind` instrukcje są skróty klawiaturowe <xref:System.Reflection.Emit.OpCodes.Ldobj> instrukcji określający odpowiadającą klasę wartości wbudowanych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2928">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="38ac7-2929">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` (nie `native int`), gdy są załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2929">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="38ac7-2930">Wartości zmiennoprzecinkowe są konwertowane na `F` wpisz po załadowaniu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2930">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="38ac7-2931">Nieprawidłowo sformułowany Microsoft pośredniego Language (MSIL) zapewnia, że `ldind` instrukcje są używane w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2931">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="38ac7-2932">Adres przypisany początkowo na stosie muszą być wyrównane do fizycznych rozmiar obiektów na maszynie lub <xref:System.NullReferenceException> może wystąpić (zobacz <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcję zapobiegawczych).</span><span class="sxs-lookup"><span data-stu-id="38ac7-2932">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="38ac7-2933">Wyniki wszystkich instrukcji MSIL, które zwracają adresów (na przykład <xref:System.Reflection.Emit.OpCodes.Ldloca> i <xref:System.Reflection.Emit.OpCodes.Ldarga>) bezpiecznie są wyrównane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2933">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="38ac7-2934">Dla typów danych jest większa niż 1 bajt kolejność bajtów jest zależna od docelowego procesora CPU.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2934">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="38ac7-2935">Kod, który jest zależny od określanie kolejności bajtów nie może działać na wszystkich platformach.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2935">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="38ac7-2936"><xref:System.NullReferenceException> może zostać wygenerowany, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2936"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="38ac7-2937">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldind.u1` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2937">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u1` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2938">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2938">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2939">Ładuje wartości typu <see langword="unsigned int16" /> jako <see langword="int32" /> na obliczanie pośrednio stosu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2939">Loads a value of type <see langword="unsigned int16" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2940">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2940">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2941">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2941">Format</span></span>|<span data-ttu-id="38ac7-2942">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2942">Assembly Format</span></span>|<span data-ttu-id="38ac7-2943">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2943">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2944">49</span><span class="sxs-lookup"><span data-stu-id="38ac7-2944">49</span></span>|<span data-ttu-id="38ac7-2945">ldind.U2</span><span class="sxs-lookup"><span data-stu-id="38ac7-2945">ldind.u2</span></span>|<span data-ttu-id="38ac7-2946">Ładunki `unsigned int16` wartość pod adresem `addr` na stosie jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2946">Loads the `unsigned int16` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="38ac7-2947">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2947">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2948">Adres spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2948">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2949">Ten adres jest zdjęte ze stosu ze stosu; wartość znajduje się pod adresem jest pobierane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2949">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="38ac7-2950">Wartość pobranych spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2950">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2951">`ldind.u2` Instrukcji pośrednio ładuje `unsigned int16` wartości z określonego adresu (typu `native int`, `&`, lub \*) na stosie jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2951">The `ldind.u2` instruction indirectly loads an `unsigned int16` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="38ac7-2952">Wszystkie `ldind` instrukcje są skróty klawiaturowe <xref:System.Reflection.Emit.OpCodes.Ldobj> instrukcji określający odpowiadającą klasę wartości wbudowanych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2952">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="38ac7-2953">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` (nie `native int`), gdy są załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2953">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="38ac7-2954">Wartości zmiennoprzecinkowe są konwertowane na `F` wpisz po załadowaniu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2954">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="38ac7-2955">Nieprawidłowo sformułowany Microsoft pośredniego Language (MSIL) zapewnia, że `ldind` instrukcje są używane w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2955">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="38ac7-2956">Adres przypisany początkowo na stosie muszą być wyrównane do fizycznych rozmiar obiektów na maszynie lub <xref:System.NullReferenceException> może wystąpić (zobacz <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcję zapobiegawczych).</span><span class="sxs-lookup"><span data-stu-id="38ac7-2956">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="38ac7-2957">Wyniki wszystkich instrukcji MSIL, które zwracają adresów (na przykład <xref:System.Reflection.Emit.OpCodes.Ldloca> i <xref:System.Reflection.Emit.OpCodes.Ldarga>) bezpiecznie są wyrównane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2957">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="38ac7-2958">Dla typów danych jest większa niż 1 bajt kolejność bajtów jest zależna od docelowego procesora CPU.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2958">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="38ac7-2959">Kod, który jest zależny od określanie kolejności bajtów nie może działać na wszystkich platformach.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2959">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="38ac7-2960"><xref:System.NullReferenceException> może zostać wygenerowany, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2960"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="38ac7-2961">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldind.u2` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2961">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u2` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2962">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2962">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2963">Ładuje wartości typu <see langword="unsigned int32" /> jako <see langword="int32" /> na obliczanie pośrednio stosu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2963">Loads a value of type <see langword="unsigned int32" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2964">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2964">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2965">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2965">Format</span></span>|<span data-ttu-id="38ac7-2966">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2966">Assembly Format</span></span>|<span data-ttu-id="38ac7-2967">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2967">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2968">4B</span><span class="sxs-lookup"><span data-stu-id="38ac7-2968">4B</span></span>|<span data-ttu-id="38ac7-2969">ldind.U4</span><span class="sxs-lookup"><span data-stu-id="38ac7-2969">ldind.u4</span></span>|<span data-ttu-id="38ac7-2970">Ładunki `unsigned int32` wartość pod adresem `addr` na stosie jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2970">Loads the `unsigned int32` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="38ac7-2971">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2971">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2972">Adres spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2972">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2973">Ten adres jest zdjęte ze stosu ze stosu; wartość znajduje się pod adresem jest pobierane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2973">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="38ac7-2974">Wartość pobranych spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2974">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2975">`ldind.u4` Instrukcji pośrednio ładuje `unsigned int32` wartości z określonego adresu (typu `native int`, `&`, lub \*) na stosie jako `int32`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2975">The `ldind.u4` instruction indirectly loads an `unsigned int32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="38ac7-2976">Wszystkie `ldind` instrukcje są skróty klawiaturowe <xref:System.Reflection.Emit.OpCodes.Ldobj> instrukcji określający odpowiadającą klasę wartości wbudowanych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2976">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="38ac7-2977">Należy pamiętać, że wartości będące liczbami całkowitymi z mniej niż 4 bajty zostały rozszerzone na potrzeby `int32` (nie `native int`), gdy są załadowane na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2977">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="38ac7-2978">Wartości zmiennoprzecinkowe są konwertowane na `F` wpisz po załadowaniu na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2978">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="38ac7-2979">Nieprawidłowo sformułowany Microsoft pośredniego Language (MSIL) zapewnia, że `ldind` instrukcje są używane w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2979">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="38ac7-2980">Adres przypisany początkowo na stosie muszą być wyrównane do fizycznych rozmiar obiektów na maszynie lub <xref:System.NullReferenceException> może wystąpić (zobacz <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcję zapobiegawczych).</span><span class="sxs-lookup"><span data-stu-id="38ac7-2980">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="38ac7-2981">Wyniki wszystkich instrukcji MSIL, które zwracają adresów (na przykład <xref:System.Reflection.Emit.OpCodes.Ldloca> i <xref:System.Reflection.Emit.OpCodes.Ldarga>) bezpiecznie są wyrównane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2981">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="38ac7-2982">Dla typów danych jest większa niż 1 bajt kolejność bajtów jest zależna od docelowego procesora CPU.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2982">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="38ac7-2983">Kod, który jest zależny od określanie kolejności bajtów nie może działać na wszystkich platformach.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2983">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="38ac7-2984"><xref:System.NullReferenceException> może zostać wygenerowany, jeśli zostanie wykryty nieprawidłowy adres.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2984"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="38ac7-2985">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldind.u4` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2985">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u4` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-2986">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-2986">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldlen">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldlen;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldlen" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldlen" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldlen As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldlen;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldlen : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldlen" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-2987">Wypycha liczba elementów nieujemną jednowymiarową tablicę na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-2987">Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-2988">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2988">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-2989">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-2989">Format</span></span>|<span data-ttu-id="38ac7-2990">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-2990">Assembly Format</span></span>|<span data-ttu-id="38ac7-2991">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-2991">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-2992">8E</span><span class="sxs-lookup"><span data-stu-id="38ac7-2992">8E</span></span>|<span data-ttu-id="38ac7-2993">ldlen</span><span class="sxs-lookup"><span data-stu-id="38ac7-2993">ldlen</span></span>|<span data-ttu-id="38ac7-2994">Wypchnięcia długość (typu `natural unsigned int`) tablicy na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2994">Pushes the length (of type `natural unsigned int`) of an array on the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-2995">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-2995">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-2996">Odwołanie do obiektu do tablicy spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2996">An object reference to an array is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-2997">Odwołanie do tablicy jest zdjęte ze stosu ze stosu, a długość jest kolumną obliczaną.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2997">The array reference is popped from the stack and the length is computed.</span></span>  
  
3.  <span data-ttu-id="38ac7-2998">Długość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2998">The length is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-2999">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-2999">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="38ac7-3000">Długość jest zwracana jako `natural unsigned int`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3000">The length is returned as a `natural unsigned int`.</span></span>  
  
 <span data-ttu-id="38ac7-3001"><xref:System.NullReferenceException> jest generowany, gdy odwołanie do tablicy jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3001"><xref:System.NullReferenceException> is thrown if the array reference is a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-3002">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldlen` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3002">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldlen` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3003">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3003">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3004">Ładuje zmiennej lokalnej o określonym indeksie na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3004">Loads the local variable at a specific index onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3005">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3005">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3006">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3006">Format</span></span>|<span data-ttu-id="38ac7-3007">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3007">Assembly Format</span></span>|<span data-ttu-id="38ac7-3008">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3008">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3009">FE 0C < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-3009">FE 0C < `unsigned int16` ></span></span>|<span data-ttu-id="38ac7-3010">ldloc `index`</span><span class="sxs-lookup"><span data-stu-id="38ac7-3010">ldloc `index`</span></span>|<span data-ttu-id="38ac7-3011">Ładuje zmiennej lokalnej o indeksie `index` na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3011">Loads the local variable at index `index` onto stack.</span></span>|  
  
 <span data-ttu-id="38ac7-3012">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3012">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3013">Wartości zmiennej lokalnej pod określonym indeksem spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3013">The local variable value at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3014">`ldloc` Instrukcji wypchnięcia zawartość numer zmiennej lokalnej o indeksie przekazany na stosie oceny, gdzie zmienne lokalne są numerowane 0 lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3014">The `ldloc` instruction pushes the contents of the local variable number at the passed index onto the evaluation stack, where the local variables are numbered 0 onwards.</span></span> <span data-ttu-id="38ac7-3015">Zmienne lokalne są inicjowane na 0, przed wprowadzeniem metody tylko wtedy, gdy flaga zainicjować metody ma wartość true.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3015">Local variables are initialized to 0 before entering the method only if the initialize flag on the method is true.</span></span> <span data-ttu-id="38ac7-3016">Brak 65 535 (2 ^ 16 - 1) zmienne lokalne możliwe (0-65 534).</span><span class="sxs-lookup"><span data-stu-id="38ac7-3016">There are 65,535 (2^16-1) local variables possible (0-65,534).</span></span> <span data-ttu-id="38ac7-3017">65 535 indeksu jest nieprawidłowy, ponieważ prawdopodobnie implementacje użyje 2-bajtowych liczb całkowitych do śledzenia indeksu zarówno lokalnych, oraz liczba zmiennych lokalnych dostępnych dla danej metody.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3017">Index 65,535 is not valid since likely implementations will use a 2-byte integer to track both a local's index, along with the total number of locals for a given method.</span></span> <span data-ttu-id="38ac7-3018">Indeks 65535 dokonano prawidłowe, wymagałoby szersze liczby całkowitej w celu śledzenia liczby zmiennych lokalnych w takiej metody.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3018">If an index of 65535 had been made valid, it would require a wider integer to track the number of locals in such a method.</span></span>  
  
 <span data-ttu-id="38ac7-3019">`ldloc.0`, `ldloc.1`, `ldloc.2`, I `ldloc.3` instrukcje zapewnić efektywne kodowanie do uzyskiwania dostępu do pierwsze cztery zmiennych lokalnych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3019">The `ldloc.0`, `ldloc.1`, `ldloc.2`, and `ldloc.3` instructions provide an efficient encoding for accessing the first four local variables.</span></span>  
  
 <span data-ttu-id="38ac7-3020">Typ wartości jest taki sam jak typ zmiennej lokalnej, która została określona w nagłówku metody.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3020">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="38ac7-3021">Zobacz partycji I. lokalnych zmiennych, które są mniejsze niż 4 bajty zostaną rozwinięte na typ `int32` , gdy są załadowane na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3021">See Partition I. Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="38ac7-3022">Wartości zmiennoprzecinkowych zostaną rozwinięte ich rozmiar natywnego (typ `F`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-3022">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="38ac7-3023">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenia metody można użyć `ldloc` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3023">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldloc` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3024">ILGenerator.Emit (OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3024">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="38ac7-3025">ILGenerator.Emit (OpCode, krótki)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3025">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3026">Ładuje zmiennej lokalnej pod indeksem 0 na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3026">Loads the local variable at index 0 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3027">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3027">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3028">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3028">Format</span></span>|<span data-ttu-id="38ac7-3029">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3029">Assembly Format</span></span>|<span data-ttu-id="38ac7-3030">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3030">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3031">06</span><span class="sxs-lookup"><span data-stu-id="38ac7-3031">06</span></span>|<span data-ttu-id="38ac7-3032">ldloc.0</span><span class="sxs-lookup"><span data-stu-id="38ac7-3032">ldloc.0</span></span>|<span data-ttu-id="38ac7-3033">Ładuje zmiennej lokalnej pod indeksem 0 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3033">Loads the local variable at index 0 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="38ac7-3034">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3034">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3035">Wartości zmiennej lokalnej pod indeksem 0 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3035">The local variable value at the index 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3036">`ldloc.0` jest szczególnie efektywne kodowanie <xref:System.Reflection.Emit.OpCodes.Ldloc>, umożliwiając dostęp do zmiennej lokalnej pod indeksem 0.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3036">`ldloc.0` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 0.</span></span>  
  
 <span data-ttu-id="38ac7-3037">Typ wartości jest taki sam jak typ zmiennej lokalnej, która została określona w nagłówku metody.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3037">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="38ac7-3038">Zmienne lokalne, które są mniejsze niż 4 bajty zostaną rozwinięte na typ `int32` , gdy są załadowane na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3038">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="38ac7-3039">Wartości zmiennoprzecinkowych zostaną rozwinięte ich rozmiar natywnego (typ `F`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-3039">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="38ac7-3040">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldloc.0` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3040">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.0` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3041">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3041">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3042">Ładuje zmiennej lokalnej pod indeksem 1 na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3042">Loads the local variable at index 1 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3043">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3043">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3044">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3044">Format</span></span>|<span data-ttu-id="38ac7-3045">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3045">Assembly Format</span></span>|<span data-ttu-id="38ac7-3046">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3046">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3047">07</span><span class="sxs-lookup"><span data-stu-id="38ac7-3047">07</span></span>|<span data-ttu-id="38ac7-3048">ldloc.1</span><span class="sxs-lookup"><span data-stu-id="38ac7-3048">ldloc.1</span></span>|<span data-ttu-id="38ac7-3049">Ładuje zmiennej lokalnej pod indeksem 1 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3049">Loads the local variable at index 1 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="38ac7-3050">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3050">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3051">Wartości zmiennej lokalnej pod indeksem 1 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3051">The local variable value at the index 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3052">`ldloc.1` jest szczególnie efektywne kodowanie <xref:System.Reflection.Emit.OpCodes.Ldloc>, umożliwiający dostęp do zmiennej lokalnej pod indeksem 1.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3052">`ldloc.1` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 1.</span></span>  
  
 <span data-ttu-id="38ac7-3053">Typ wartości jest taki sam jak typ zmiennej lokalnej, która została określona w nagłówku metody.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3053">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="38ac7-3054">Zmienne lokalne, które są mniejsze niż 4 bajty zostaną rozwinięte na typ `int32` , gdy są załadowane na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3054">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="38ac7-3055">Wartości zmiennoprzecinkowych zostaną rozwinięte ich rozmiar natywnego (typ `F`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-3055">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="38ac7-3056">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldloc.1` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3056">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.1` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3057">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3057">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3058">Ładuje zmiennej lokalnej pod indeksem 2 na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3058">Loads the local variable at index 2 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3059">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3059">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3060">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3060">Format</span></span>|<span data-ttu-id="38ac7-3061">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3061">Assembly Format</span></span>|<span data-ttu-id="38ac7-3062">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3062">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3063">08</span><span class="sxs-lookup"><span data-stu-id="38ac7-3063">08</span></span>|<span data-ttu-id="38ac7-3064">ldloc.2</span><span class="sxs-lookup"><span data-stu-id="38ac7-3064">ldloc.2</span></span>|<span data-ttu-id="38ac7-3065">Ładuje zmiennej lokalnej pod indeksem 2 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3065">Loads the local variable at index 2 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="38ac7-3066">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3066">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3067">Wartości zmiennej lokalnej pod indeksem 2 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3067">The local variable value at the index 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3068">`ldloc.2` jest szczególnie efektywne kodowanie <xref:System.Reflection.Emit.OpCodes.Ldloc>, umożliwiający dostęp do zmiennej lokalnej pod indeksem 2.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3068">`ldloc.2` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 2.</span></span>  
  
 <span data-ttu-id="38ac7-3069">Typ wartości jest taki sam jak typ zmiennej lokalnej, która została określona w nagłówku metody.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3069">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="38ac7-3070">Zmienne lokalne, które są mniejsze niż 4 bajty zostaną rozwinięte na typ `int32` , gdy są załadowane na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3070">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="38ac7-3071">Wartości zmiennoprzecinkowych zostaną rozwinięte ich rozmiar natywnego (typ `F`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-3071">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="38ac7-3072">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldloc.2` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3072">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.2` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3073">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3073">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3074">Ładuje zmiennej lokalnej o indeksie 3 na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3074">Loads the local variable at index 3 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3075">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3075">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3076">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3076">Format</span></span>|<span data-ttu-id="38ac7-3077">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3077">Assembly Format</span></span>|<span data-ttu-id="38ac7-3078">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3078">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3079">09</span><span class="sxs-lookup"><span data-stu-id="38ac7-3079">09</span></span>|<span data-ttu-id="38ac7-3080">ldloc.3</span><span class="sxs-lookup"><span data-stu-id="38ac7-3080">ldloc.3</span></span>|<span data-ttu-id="38ac7-3081">Ładuje zmiennej lokalnej o indeksie 3 na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3081">Loads the local variable at index 3 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="38ac7-3082">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3082">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3083">Wartości zmiennej lokalnej w indeksie 3 spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3083">The local variable value at the index 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3084">`ldloc.3` jest szczególnie efektywne kodowanie <xref:System.Reflection.Emit.OpCodes.Ldloc>, umożliwiający dostęp do zmiennej lokalnej o indeksie 3.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3084">`ldloc.3` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 3.</span></span>  
  
 <span data-ttu-id="38ac7-3085">Typ wartości jest taki sam jak typ zmiennej lokalnej, która została określona w nagłówku metody.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3085">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="38ac7-3086">Zmienne lokalne, które są mniejsze niż 4 bajty zostaną rozwinięte na typ `int32` , gdy są załadowane na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3086">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="38ac7-3087">Wartości zmiennoprzecinkowych zostaną rozwinięte ich rozmiar natywnego (typ `F`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-3087">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="38ac7-3088">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldloc.3` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3088">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.3` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3089">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3089">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3090">Ładuje zmiennej lokalnej o określonym indeksie na stosie oceny, krótka forma.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3090">Loads the local variable at a specific index onto the evaluation stack, short form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3091">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3091">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3092">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3092">Format</span></span>|<span data-ttu-id="38ac7-3093">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3093">Assembly Format</span></span>|<span data-ttu-id="38ac7-3094">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3094">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3095">11 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-3095">11 < `unsigned int8` ></span></span>|<span data-ttu-id="38ac7-3096">ldloc.s `index`</span><span class="sxs-lookup"><span data-stu-id="38ac7-3096">ldloc.s `index`</span></span>|<span data-ttu-id="38ac7-3097">Ładuje zmiennej lokalnej o indeksie `index` na stosie, krótka.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3097">Loads the local variable at index `index` onto stack, short form.</span></span>|  
  
 <span data-ttu-id="38ac7-3098">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3098">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3099">Wartości zmiennej lokalnej pod określonym indeksem spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3099">The local variable value at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3100">`ldloc.s` Instrukcji wypchnięcia zawartość numer zmiennej lokalnej o indeksie przekazany na stosie oceny, gdzie zmienne lokalne są numerowane 0 lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3100">The `ldloc.s` instruction pushes the contents of the local variable number at the passed index onto the evaluation stack, where the local variables are numbered 0 onwards.</span></span> <span data-ttu-id="38ac7-3101">Zmienne lokalne są inicjowane na 0, przed wprowadzeniem metody, jeśli flaga zainicjować metody ma wartość true.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3101">Local variables are initialized to 0 before entering the method if the initialize flag on the method is true.</span></span> <span data-ttu-id="38ac7-3102">Brak 256 (2 ^ 8) zmiennych lokalnych to możliwe (0 – 255) w formie skróconej, który jest bardziej efektywne kodowanie niż `ldloc`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3102">There are 256 (2^8) local variables possible (0-255) in the short form, which is a more efficient encoding than `ldloc`.</span></span>  
  
 <span data-ttu-id="38ac7-3103">Typ wartości jest taki sam jak typ zmiennej lokalnej, która została określona w nagłówku metody.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3103">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="38ac7-3104">Zobacz partycji I. lokalnych zmiennych, które są mniejsze niż 4 bajty zostaną rozwinięte na typ `int32` , gdy są załadowane na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3104">See Partition I. Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="38ac7-3105">Wartości zmiennoprzecinkowych zostaną rozwinięte ich rozmiar natywnego (typ `F`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-3105">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="38ac7-3106">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenia metody można użyć `ldloc.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3106">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldloc.s` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3107">ILGenerator.Emit (OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3107">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="38ac7-3108">ILGenerator.Emit (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3108">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloca">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloca;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloca" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloca" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloca As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloca;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloca : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloca" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3109">Ładuje adresu zmiennej lokalnej o określonym indeksie na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3109">Loads the address of the local variable at a specific index onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3110">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3110">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3111">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3111">Format</span></span>|<span data-ttu-id="38ac7-3112">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3112">Assembly Format</span></span>|<span data-ttu-id="38ac7-3113">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3113">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3114">FE OD &LT; `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-3114">FE OD < `unsigned int16` ></span></span>|<span data-ttu-id="38ac7-3115">ldloca `index`</span><span class="sxs-lookup"><span data-stu-id="38ac7-3115">ldloca `index`</span></span>|<span data-ttu-id="38ac7-3116">Ładuje adresu zmiennej lokalnej w `index` na stosie oceny.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3116">Loads the address of the local variable at `index` onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="38ac7-3117">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3117">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3118">Adres przechowywane w zmiennej lokalnej o określonym indeksie spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3118">The address stored in the local variable at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3119">`ldloca` Instrukcji wypchnięcia adres numer zmiennej lokalnej o indeksie przekazany na stosie, gdzie zmienne lokalne są numerowane 0 lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3119">The `ldloca` instruction pushes the address of the local variable number at the passed index onto the stack, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="38ac7-3120">Wartość wypychana na stosie jest już wyrównane poprawnie do użycia z instrukcjami, jak <xref:System.Reflection.Emit.OpCodes.Ldind_I> i <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3120">The value pushed on the stack is already aligned correctly for use with instructions like <xref:System.Reflection.Emit.OpCodes.Ldind_I> and <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span></span> <span data-ttu-id="38ac7-3121">Wynik jest przejściowy wskaźnika (typ `*`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-3121">The result is a transient pointer (type `*`).</span></span>  
  
 <span data-ttu-id="38ac7-3122">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldloca` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3122">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloca` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3123">ILGenerator.Emit (OpCode, krótki)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3123">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloca_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloca_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloca_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloca_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloca_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloca_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloca_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloca_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3124">Ładuje adresu zmiennej lokalnej o określonym indeksie na stosie oceny, krótka forma.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3124">Loads the address of the local variable at a specific index onto the evaluation stack, short form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3125">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3125">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3126">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3126">Format</span></span>|<span data-ttu-id="38ac7-3127">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3127">Assembly Format</span></span>|<span data-ttu-id="38ac7-3128">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3128">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3129">12 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-3129">12 < `unsigned int8` ></span></span>|<span data-ttu-id="38ac7-3130">ldloca.s `index`</span><span class="sxs-lookup"><span data-stu-id="38ac7-3130">ldloca.s `index`</span></span>|<span data-ttu-id="38ac7-3131">Ładuje adresu zmiennej lokalnej w `index` na stosie oceny krótka.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3131">Loads the address of the local variable at `index` onto the evaluation stack, short form.</span></span>|  
  
 <span data-ttu-id="38ac7-3132">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3132">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3133">Adres przechowywane w zmiennej lokalnej o określonym indeksie spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3133">The address stored in the local variable at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3134">`ldloca.s` Instrukcji wypchnięcia adres numer zmiennej lokalnej o indeksie przekazany na stosie, gdzie zmienne lokalne są numerowane 0 lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3134">The `ldloca.s` instruction pushes the address of the local variable number at the passed index onto the stack, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="38ac7-3135">Wartość wypychana na stosie jest już wyrównane poprawnie do użycia z instrukcjami, jak <xref:System.Reflection.Emit.OpCodes.Ldind_I> i <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3135">The value pushed on the stack is already aligned correctly for use with instructions like <xref:System.Reflection.Emit.OpCodes.Ldind_I> and <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span></span> <span data-ttu-id="38ac7-3136">Wynik jest przejściowy wskaźnika (typ `*`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-3136">The result is a transient pointer (type `*`).</span></span>  
  
 <span data-ttu-id="38ac7-3137">`ldloca.s` Instrukcji umożliwia efektywne kodowanie do użycia z zmiennych lokalnych 0 do 255.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3137">The `ldloca.s` instruction provides an efficient encoding for use with the local variables 0 through 255.</span></span>  
  
 <span data-ttu-id="38ac7-3138">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldloca.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3138">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloca.s` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3139">ILGenerator.Emit (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3139">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldnull">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldnull;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldnull" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldnull" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldnull As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldnull;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldnull : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldnull" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3140">Wypchnięcia odwołanie o wartości null (typ <see langword="O" />) na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3140">Pushes a null reference (type <see langword="O" />) onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3141">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3141">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3142">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3142">Format</span></span>|<span data-ttu-id="38ac7-3143">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3143">Assembly Format</span></span>|<span data-ttu-id="38ac7-3144">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3144">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3145">14</span><span class="sxs-lookup"><span data-stu-id="38ac7-3145">14</span></span>|<span data-ttu-id="38ac7-3146">elementu ldnull przy</span><span class="sxs-lookup"><span data-stu-id="38ac7-3146">ldnull</span></span>|<span data-ttu-id="38ac7-3147">Wypychanie odwołanie o wartości null na stosie</span><span class="sxs-lookup"><span data-stu-id="38ac7-3147">push a null reference onto the stack</span></span>|  
  
 <span data-ttu-id="38ac7-3148">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3148">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3149">Odwołanie obiektu null spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3149">A null object reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3150">`ldnull` wypchnięcia odwołanie o wartości null (typ `O`) na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3150">`ldnull` pushes a null reference (type `O`) on the stack.</span></span> <span data-ttu-id="38ac7-3151">Służy to zainicjować lokalizacje przed ich są wypełniane przy użyciu danych lub stają się one przestarzałe.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3151">This is used to initialize locations before they are populated with data, or when they become deprecated.</span></span>  
  
 <span data-ttu-id="38ac7-3152">`ldnull` zawiera odwołanie o wartości null, która jest niezależny od rozmiaru.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3152">`ldnull` provides a null reference that is size-independent.</span></span>  
  
 <span data-ttu-id="38ac7-3153">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldnull` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3153">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldnull` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3154">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3154">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3155">Kopie obiektu typu wartości wskazywana przez adres na wierzchu stosu oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3155">Copies the value type object pointed to by an address to the top of the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3156">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3156">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3157">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3157">Format</span></span>|<span data-ttu-id="38ac7-3158">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3158">Assembly Format</span></span>|<span data-ttu-id="38ac7-3159">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3159">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3160">71 < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-3160">71 < `T` ></span></span>|<span data-ttu-id="38ac7-3161">ldobj `class`</span><span class="sxs-lookup"><span data-stu-id="38ac7-3161">ldobj `class`</span></span>|<span data-ttu-id="38ac7-3162">Kopiuj wystąpienie typu wartości `class` stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3162">Copy instance of value type `class` to the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-3163">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3163">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3164">Adres obiektu typu wartościowego spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3164">The address of a value type object is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3165">Ten adres jest zdjęte ze stosu ze stosu i wyszukiwana jest wystąpienie pod tym adresem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3165">The address is popped from the stack and the instance at that particular address is looked up.</span></span>  
  
3.  <span data-ttu-id="38ac7-3166">Wartość obiektu przechowywane pod tym adresem spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3166">The value of the object stored at that address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3167">`ldobj` Instrukcji jest używany do przekazywania typu wartości jako parametr.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3167">The `ldobj` instruction is used to pass a value type as a parameter.</span></span>  
  
 <span data-ttu-id="38ac7-3168">`ldobj` Instrukcji kopiuje wartość wskazywana przez `addrOfValObj` (typu `&`, `*`, lub `native int`) na wierzchu stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3168">The `ldobj` instruction copies the value pointed to by `addrOfValObj` (of type `&`, `*`, or `native int`) to the top of the stack.</span></span> <span data-ttu-id="38ac7-3169">Liczba bajtów skopiowanych zależy od rozmiaru klasy (zgodnie z określonym `class` parametru).</span><span class="sxs-lookup"><span data-stu-id="38ac7-3169">The number of bytes copied depends on the size of the class (as specified by the `class` parameter).</span></span> <span data-ttu-id="38ac7-3170">`class` Parametr jest tokenem metadanych reprezentujący typ wartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3170">The `class` parameter is a metadata token representing the value type.</span></span>  
  
 <span data-ttu-id="38ac7-3171">Działanie `ldobj` instrukcji może być zmieniony przez poprzedzającego <xref:System.Reflection.Emit.OpCodes.Volatile> lub <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3171">The operation of the `ldobj` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="38ac7-3172"><xref:System.TypeLoadException> jest generowany, jeśli nie można odnaleźć klasy.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3172"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="38ac7-3173">To zwykle wykryto po przekonwertowaniu instrukcji Microsoft języka pośredniego (MSIL) do kodu natywnego, a nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3173">This is typically detected when the Microsoft Intermediate Language (MSIL) instruction is converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="38ac7-3174">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldobj` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3174">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldobj` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3175">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3175">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldsfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldsfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldsfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldsfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldsfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldsfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldsfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldsfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3176">Wypycha wartość pola statycznego na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3176">Pushes the value of a static field onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3177">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3177">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3178">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3178">Format</span></span>|<span data-ttu-id="38ac7-3179">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3179">Assembly Format</span></span>|<span data-ttu-id="38ac7-3180">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3180">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3181">7E < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-3181">7E < `T` ></span></span>|<span data-ttu-id="38ac7-3182">elementu ldsfld `field`</span><span class="sxs-lookup"><span data-stu-id="38ac7-3182">ldsfld `field`</span></span>|<span data-ttu-id="38ac7-3183">Wypychanie wartości `field` na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3183">Push the value of `field` on the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-3184">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3184">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3185">Wartość określonego pola spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3185">The value of the specific field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3186">`ldsfld` Instrukcji wypchnięcia wartość statyczna (współdzielona przez wszystkie wystąpienia klasy) na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3186">The `ldsfld` instruction pushes the value of a static (shared among all instances of a class) field on the stack.</span></span> <span data-ttu-id="38ac7-3187">Zwracany typ jest skojarzone z tokenem przekazany metadanych `field`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3187">The return type is that associated with the passed metadata token `field`.</span></span>  
  
 <span data-ttu-id="38ac7-3188">`ldsfld` Instrukcji może mieć <xref:System.Reflection.Emit.OpCodes.Volatile> prefiks.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3188">The `ldsfld` instruction can have a <xref:System.Reflection.Emit.OpCodes.Volatile> prefix.</span></span>  
  
 <span data-ttu-id="38ac7-3189">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldsfld` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3189">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldsfld` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3190">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3190">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldsflda">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldsflda;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldsflda" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldsflda" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldsflda As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldsflda;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldsflda : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldsflda" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3191">Wypycha adresu pola statycznego na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3191">Pushes the address of a static field onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3192">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3192">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3193">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3193">Format</span></span>|<span data-ttu-id="38ac7-3194">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3194">Assembly Format</span></span>|<span data-ttu-id="38ac7-3195">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3195">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3196">7F < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-3196">7F < `T` ></span></span>|<span data-ttu-id="38ac7-3197">ldsflda `field`</span><span class="sxs-lookup"><span data-stu-id="38ac7-3197">ldsflda `field`</span></span>|<span data-ttu-id="38ac7-3198">Wypychanie adres `field` na stosie</span><span class="sxs-lookup"><span data-stu-id="38ac7-3198">Push the address of `field` on the stack</span></span>|  
  
 <span data-ttu-id="38ac7-3199">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3199">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3200">Adres określonego pola spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3200">The address of a specific field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3201">`ldsflda` Instrukcji wypchnięcia adres statycznego (współdzielona przez wszystkie wystąpienia klasy) na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3201">The `ldsflda` instruction pushes the address of a static (shared among all instances of a class) field on the stack.</span></span> <span data-ttu-id="38ac7-3202">Adres może być reprezentowane jako wskaźnik przejściowy (typ `*`) Jeśli token metadanych `field` odwołuje się do typu, w których pamięci jest zarządzana.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3202">The address may be represented as a transient pointer (type `*`) if the metadata token `field` refers to a type whose memory is managed.</span></span> <span data-ttu-id="38ac7-3203">W przeciwnym razie wartość odpowiada do niezarządzanego wskaźnika (typ `native int`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-3203">Otherwise, it corresponds to an unmanaged pointer (type `native int`).</span></span> <span data-ttu-id="38ac7-3204">Należy pamiętać, że `field` może być statyczna globalnych z przypisanego adresu wirtualnego względnych (przesunięcie pola z adres podstawowy, w którym jego zawierającego plik PE jest ładowany do pamięci) pamięci w przypadku niezarządzanych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3204">Note that `field` may be a static global with an assigned relative virtual address (the offset of the field from the base address at which its containing PE file is loaded into memory) where the memory is unmanaged.</span></span>  
  
 <span data-ttu-id="38ac7-3205">`ldsflda` Instrukcji może mieć <xref:System.Reflection.Emit.OpCodes.Volatile> prefiks.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3205">The `ldsflda` instruction can have a <xref:System.Reflection.Emit.OpCodes.Volatile> prefix.</span></span>  
  
 <span data-ttu-id="38ac7-3206"><xref:System.MissingFieldException> jest generowany, jeśli nie można odnaleźć pola w metadanych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3206"><xref:System.MissingFieldException> is thrown if field is not found in the metadata.</span></span> <span data-ttu-id="38ac7-3207">Jest to zazwyczaj sprawdzana podczas konwertowania instrukcje Microsoft języka pośredniego (MSIL) do kodu natywnego, a nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3207">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at runtime.</span></span>  
  
 <span data-ttu-id="38ac7-3208">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldsflda` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3208">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldsflda` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3209">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3209">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldstr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldstr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldstr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldstr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldstr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldstr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldstr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldstr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3210">Wypycha nowe odwołanie obiektu do literału ciągu przechowywany w metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3210">Pushes a new object reference to a string literal stored in the metadata.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3211">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3211">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3212">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3212">Format</span></span>|<span data-ttu-id="38ac7-3213">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3213">Assembly Format</span></span>|<span data-ttu-id="38ac7-3214">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3214">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3215">72 < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-3215">72 < `T` ></span></span>|<span data-ttu-id="38ac7-3216">ldstr `mdToken`</span><span class="sxs-lookup"><span data-stu-id="38ac7-3216">ldstr `mdToken`</span></span>|<span data-ttu-id="38ac7-3217">Wypchnięcia obiekt ciągu dla tokenu ciągu metadanych `mdToken`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3217">Pushes a string object for the metadata string token `mdToken`.</span></span>|  
  
 <span data-ttu-id="38ac7-3218">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3218">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3219">Odwołanie do obiektu na ciąg spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3219">An object reference to a string is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3220">`ldstr` Instrukcji wypchnięcia odwołanie do obiektu (typ `O`) na obiekt ciągu reprezentujący określony ciąg literału przechowywany w metadanych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3220">The `ldstr` instruction pushes an object reference (type `O`) to a new string object representing the specific string literal stored in the metadata.</span></span> <span data-ttu-id="38ac7-3221">`ldstr` Instrukcji przydziela wymagane ilość pamięci i wykonuje wszystkie Konwersja formatu wymaganego do konwertowania literału ciągu z formularza w pliku formatu ciągu wymagane w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3221">The `ldstr` instruction allocates the requisite amount of memory and performs any format conversion required to convert the string literal from the form used in the file to the string format required at runtime.</span></span>  
  
 <span data-ttu-id="38ac7-3222">Infrastruktura języka wspólnego (CLI) gwarantuje, że wynik dwóch `ldstr` instrukcje odwołujące się do dwóch tokenów metadanych, które mają taką samą sekwencję znaków zwracać dokładnie tego samego ciągu obiektu (proces znany jako "interning ciąg").</span><span class="sxs-lookup"><span data-stu-id="38ac7-3222">The Common Language Infrastructure (CLI) guarantees that the result of two `ldstr` instructions referring to two metadata tokens that have the same sequence of characters return precisely the same string object (a process known as "string interning").</span></span>  
  
 <span data-ttu-id="38ac7-3223">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldstr` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3223">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldstr` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3224">ILGenerator.Emit (OpCode, ciąg)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3224">ILGenerator.Emit(OpCode, string)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldtoken">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldtoken;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldtoken" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldtoken" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldtoken As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldtoken;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldtoken : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldtoken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3225">Konwertuje token metadanych na jej reprezentację środowiska uruchomieniowego, wypychanie go na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3225">Converts a metadata token to its runtime representation, pushing it onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3226">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3226">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3227">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3227">Format</span></span>|<span data-ttu-id="38ac7-3228">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3228">Assembly Format</span></span>|<span data-ttu-id="38ac7-3229">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3229">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3230">D0 < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-3230">D0 < `T` ></span></span>|<span data-ttu-id="38ac7-3231">Ldtoken `token`</span><span class="sxs-lookup"><span data-stu-id="38ac7-3231">ldtoken `token`</span></span>|<span data-ttu-id="38ac7-3232">Konwertuje token metadanych na jej reprezentację środowiska wykonawczego.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3232">Converts a metadata token to its runtime representation.</span></span>|  
  
 <span data-ttu-id="38ac7-3233">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3233">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3234">Przekazany token jest konwertowana na `RuntimeHandle` i wypychana na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3234">The passed token is converted to a `RuntimeHandle` and pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3235">`ldtoken` Wypchnięć instrukcji `RuntimeHandle` dla tokenu określonych metadanych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3235">The `ldtoken` instruction pushes a `RuntimeHandle` for the specified metadata token.</span></span> <span data-ttu-id="38ac7-3236">A `RuntimeHandle` może być `fieldref/fielddef`, `methodref/methoddef`, lub `typeref/typedef`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3236">A `RuntimeHandle` can be a `fieldref/fielddef`, a `methodref/methoddef`, or a `typeref/typedef`.</span></span>  
  
 <span data-ttu-id="38ac7-3237">Wartość, o których wypychana na stosie, może być używana w wywołaniach `Reflection` metody w bibliotece klas systemu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3237">The value pushed on the stack can be used in calls to `Reflection` methods in the system class library.</span></span>  
  
 <span data-ttu-id="38ac7-3238">Uzyskać informacji na temat środowiska uruchomieniowego dojść, zobacz następujące klasy: <xref:System.RuntimeFieldHandle>, <xref:System.RuntimeTypeHandle>, i <xref:System.RuntimeMethodHandle>.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3238">For information on runtime handles, see the following classes: <xref:System.RuntimeFieldHandle>, <xref:System.RuntimeTypeHandle>, and <xref:System.RuntimeMethodHandle>.</span></span>  
  
 <span data-ttu-id="38ac7-3239">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenia metody można użyć `ldtoken` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3239">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldtoken` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3240">ILGenerator.Emit(OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3240">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="38ac7-3241">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3241">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
-   <span data-ttu-id="38ac7-3242">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3242">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldvirtftn">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldvirtftn;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldvirtftn" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldvirtftn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldvirtftn As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldvirtftn;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldvirtftn : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldvirtftn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3243">Wypchnięcia niezarządzanego wskaźnika (typ <see langword="native int" />) do kodu natywnego wykonania określonej metody wirtualnej skojarzone z określonego obiektu na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3243">Pushes an unmanaged pointer (type <see langword="native int" />) to the native code implementing a particular virtual method associated with a specified object onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3244">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3244">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3245">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3245">Format</span></span>|<span data-ttu-id="38ac7-3246">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3246">Assembly Format</span></span>|<span data-ttu-id="38ac7-3247">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3247">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3248">FE 07 &LT; `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-3248">FE 07 < `T` ></span></span>|<span data-ttu-id="38ac7-3249">ldvirtftn `method`</span><span class="sxs-lookup"><span data-stu-id="38ac7-3249">ldvirtftn `method`</span></span>|<span data-ttu-id="38ac7-3250">Wypychanie wskaźnik do obiektu metody wirtualnej `method` na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3250">Pushes the pointer to an object's virtual method `method` on the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-3251">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3251">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3252">Odwołanie do obiektu spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3252">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3253">Odwołanie do obiektu jest zdjęte ze stosu ze stosu i adres punktu wejścia do metody (określone przez token metadanych `method`) będą wyszukiwane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3253">The object reference is popped from the stack and the address of the entry point to the method (as specified by the metadata token `method`) is looked up.</span></span>  
  
3.  <span data-ttu-id="38ac7-3254">Wskaźnik do `method` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3254">The pointer to `method` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3255">Wynikowa niezarządzanego wskaźnika wypychana na stosie przez `ldvirtftn` instrukcji można wywołać za pomocą <xref:System.Reflection.Emit.OpCodes.Calli> instrukcji, jeśli odwołuje się ona zarządzanych — metoda (lub skrótowa, która przejścia z kodu zarządzanego do kodu niezarządzanego).</span><span class="sxs-lookup"><span data-stu-id="38ac7-3255">The resulting unmanaged pointer pushed onto the stack by the `ldvirtftn` instruction can be called using the <xref:System.Reflection.Emit.OpCodes.Calli> instruction if it references a managed method (or a stub that transitions from managed to unmanaged code).</span></span>  
  
 <span data-ttu-id="38ac7-3256">Niezarządzany wskaźnik wskazuje kodu natywnego za pomocą konwencji wywoływania środowiska CLR.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3256">The unmanaged pointer points to native code using the CLR calling convention.</span></span> <span data-ttu-id="38ac7-3257">Wskaźnik tej metody nie powinny być przekazywane do niezarządzanego kodu macierzystego jako procedura wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3257">This method pointer should not be passed to unmanaged native code as a callback routine.</span></span>  
  
 <span data-ttu-id="38ac7-3258">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ldvirtftn` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3258">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldvirtftn` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3259">ILGenerator.Emit(OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3259">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Leave">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Leave;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Leave" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Leave" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Leave As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Leave;" />
      <MemberSignature Language="F#" Value=" staticval mutable Leave : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Leave" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3260">Kończy działanie chronionego obszaru kodu bezwarunkowo transferowanie formantu do instrukcji określonych docelowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3260">Exits a protected region of code, unconditionally transferring control to a specific target instruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3261">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3261">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3262">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3262">Format</span></span>|<span data-ttu-id="38ac7-3263">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3263">Assembly Format</span></span>|<span data-ttu-id="38ac7-3264">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3264">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3265">DD < `int32` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-3265">DD < `int32` ></span></span>|<span data-ttu-id="38ac7-3266">Pozostaw `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-3266">leave `target`</span></span>|<span data-ttu-id="38ac7-3267">Kończy działanie chronionego obszaru kodu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3267">Exits a protected region of code.</span></span>|  
  
 <span data-ttu-id="38ac7-3268">Brak zachowania przejścia stosu określony dla tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3268">There is no stack transition behavior specified for this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-3269">`leave` Instrukcji bezwarunkowo przekazuje sterowanie do instrukcji określonych docelowych, reprezentowane jako 4-bajtowych offset podpisem od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3269">The `leave` instruction unconditionally transfers control to the specific target instruction, represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-3270">`leave` Jest podobna do instrukcji `br` instrukcji, ale można używać do kończenia `try`, `filter`, lub `catch` zablokować instrukcje gałęzi zwykłej tylko mogą być używane w takich bloku do przekazywania kontroli w ramach go.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3270">The `leave` instruction is similar to the `br` instruction, but it can be used to exit a `try`, `filter`, or `catch` block whereas the ordinary branch instructions can only be used in such a block to transfer control within it.</span></span> <span data-ttu-id="38ac7-3271">`leave` Instrukcji opróżnia stosu oceny i upewnia się, że odpowiednie otaczającego `finally` bloki są wykonywane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3271">The `leave` instruction empties the evaluation stack and ensures that the appropriate surrounding `finally` blocks are executed.</span></span>  
  
 <span data-ttu-id="38ac7-3272">Nie można użyć `leave` instrukcji, aby zakończyć `finally` bloku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3272">You cannot use a `leave` instruction to exit a `finally` block.</span></span> <span data-ttu-id="38ac7-3273">Aby ułatwić generowanie kodu dla obsługi wyjątków jest nieprawidłowy z wnętrza bloku catch do użycia `leave` instrukcji na transfer kontroli do żadnych instrukcji w skojarzonych `try` bloku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3273">To ease code generation for exception handlers it is valid from within a catch block to use a `leave` instruction to transfer control to any instruction within the associated `try` block.</span></span>  
  
 <span data-ttu-id="38ac7-3274">Jeśli instrukcja zawiera jeden lub więcej kodów prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3274">If an instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="38ac7-3275">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenia metody można użyć `leave` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3275">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `leave` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3276">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3276">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Leave_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Leave_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Leave_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Leave_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Leave_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Leave_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Leave_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Leave_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3277">Kończy działanie chronionego obszaru kodu bezwarunkowo transferowanie formantu do instrukcję docelowego (forma krótka /).</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3277">Exits a protected region of code, unconditionally transferring control to a target instruction (short form).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3278">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3278">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3279">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3279">Format</span></span>|<span data-ttu-id="38ac7-3280">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3280">Assembly Format</span></span>|<span data-ttu-id="38ac7-3281">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3281">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3282">DE < `int8` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-3282">DE < `int8` ></span></span>|<span data-ttu-id="38ac7-3283">instrukcją Leave.s `target`</span><span class="sxs-lookup"><span data-stu-id="38ac7-3283">leave.s `target`</span></span>|<span data-ttu-id="38ac7-3284">Zamknij chronionego obszaru krótkich fragmentów kodu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3284">Exit a protected region of code, short form.</span></span>|  
  
 <span data-ttu-id="38ac7-3285">Brak zachowania przejścia stosu określony dla tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3285">There is no stack transition behavior specified for this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-3286">`leave.s` Instrukcji bezwarunkowo przekazuje sterowanie instrukcji przekazany docelowej, reprezentowane jako 1-bajtowy offset podpisem od początku instrukcji po bieżącej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3286">The `leave.s` instruction unconditionally transfers control to the passed target instruction, represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="38ac7-3287">`leave.s` Jest podobna do instrukcji `br` instrukcji, ale można używać do kończenia `try`, `filter`, lub `catch` zablokować instrukcje gałęzi zwykłej tylko mogą być używane w takich bloku do przekazywania kontroli w ramach go.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3287">The `leave.s` instruction is similar to the `br` instruction, but it can be used to exit a `try`, `filter`, or `catch` block whereas the ordinary branch instructions can only be used in such a block to transfer control within it.</span></span> <span data-ttu-id="38ac7-3288">`leave.s` Instrukcji opróżnia stosu oceny i upewnia się, że odpowiednie otaczającego `finally` bloki są wykonywane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3288">The `leave.s` instruction empties the evaluation stack and ensures that the appropriate surrounding `finally` blocks are executed.</span></span>  
  
 <span data-ttu-id="38ac7-3289">Nie można użyć `leave.s` instrukcji, aby zakończyć `finally` bloku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3289">You cannot use a `leave.s` instruction to exit a `finally` block.</span></span> <span data-ttu-id="38ac7-3290">Aby ułatwić generowanie kodu dla obsługi wyjątków jest nieprawidłowy z wnętrza bloku catch do użycia `leave.s` instrukcji na transfer kontroli do żadnych instrukcji w skojarzonych `try` bloku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3290">To ease code generation for exception handlers it is valid from within a catch block to use a `leave.s` instruction to transfer control to any instruction within the associated `try` block.</span></span>  
  
 <span data-ttu-id="38ac7-3291">Jeśli instrukcja zawiera jeden lub więcej kodów prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3291">If an instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="38ac7-3292">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `leave.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3292">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `leave.s` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3293">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3293">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Localloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Localloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Localloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Localloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Localloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Localloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Localloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Localloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3294">Przydziela określoną liczbę bajtów z puli pamięci dynamicznej lokalnej i wypchnięcia adres (wskaźnik przejściowy, typ <see langword="*" />) pierwszego bajtu przydzielony na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3294">Allocates a certain number of bytes from the local dynamic memory pool and pushes the address (a transient pointer, type <see langword="*" />) of the first allocated byte onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3295">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3295">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3296">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3296">Format</span></span>|<span data-ttu-id="38ac7-3297">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3297">Assembly Format</span></span>|<span data-ttu-id="38ac7-3298">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3298">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3299">FE 0F</span><span class="sxs-lookup"><span data-stu-id="38ac7-3299">FE 0F</span></span>|<span data-ttu-id="38ac7-3300">operacji localloc</span><span class="sxs-lookup"><span data-stu-id="38ac7-3300">localloc</span></span>|<span data-ttu-id="38ac7-3301">Przydziel miejsca z lokalnego stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3301">Allocate space from the local heap.</span></span>|  
  
 <span data-ttu-id="38ac7-3302">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3302">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3303">Liczba bajtów do przydzielenia spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3303">The number of bytes to be allocated is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3304">Liczba bajtów jest zdjęte ze stosu ze stosu; ilość pamięci odpowiadający rozmiar jest przydzielony z lokalnego stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3304">The number of bytes is popped from the stack; an amount of memory corresponding to the size is allocated from the local heap.</span></span>  
  
3.  <span data-ttu-id="38ac7-3305">Wskaźnik do pierwszego bajtu alokacji pamięci spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3305">A pointer to the first byte of the allocated memory is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3306">`localloc` Przydziela instrukcji `size` (typ `natural unsigned int`) bajtów z lokalnej pamięci dynamicznej puli i zwraca adres (wskaźnik przejściowy, typ `*`) pierwszego bajtu przydzielone.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3306">The `localloc` instruction allocates `size` (type `natural unsigned int`) bytes from the local dynamic memory pool and returns the address (a transient pointer, type `*`) of the first allocated byte.</span></span> <span data-ttu-id="38ac7-3307">Blok pamięci zwracane jest ustawiana na 0, tylko wtedy, gdy flaga zainicjować metody `true`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3307">The block of memory returned is initialized to 0 only if the initialize flag on the method is `true`.</span></span> <span data-ttu-id="38ac7-3308">Podczas wykonywania bieżącej metody <xref:System.Reflection.Emit.OpCodes.Ret>, puli pamięci lokalnej jest udostępniana do ponownego użycia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3308">When the current method executes a <xref:System.Reflection.Emit.OpCodes.Ret>, the local memory pool is made available for reuse.</span></span>  
  
 <span data-ttu-id="38ac7-3309">Otrzymany adres jest wyrównywany tak, aby dowolny typ danych pierwotnych mogą znajdować się za pomocą `stind` instrukcje (takie jak <xref:System.Reflection.Emit.OpCodes.Stind_I4>) i ładowane przy użyciu `ldind` instrukcje (takie jak <xref:System.Reflection.Emit.OpCodes.Ldind_I4>).</span><span class="sxs-lookup"><span data-stu-id="38ac7-3309">The resulting address is aligned so that any primitive data type can be stored there using the `stind` instructions (such as <xref:System.Reflection.Emit.OpCodes.Stind_I4>) and loaded using the `ldind` instructions (such as <xref:System.Reflection.Emit.OpCodes.Ldind_I4>).</span></span>  
  
 <span data-ttu-id="38ac7-3310">`localloc` Instrukcji nie mogą występować w `filter`, `catch`, `finally`, lub `fault` bloku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3310">The `localloc` instruction cannot occur within a `filter`, `catch`, `finally`, or `fault` block.</span></span>  
  
 <span data-ttu-id="38ac7-3311"><xref:System.StackOverflowException> jest generowany, jeśli jest za mało pamięci do obsługi żądania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3311"><xref:System.StackOverflowException> is thrown if there is insufficient memory to service the request.</span></span>  
  
 <span data-ttu-id="38ac7-3312">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `localloc` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3312">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `localloc` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3313">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3313">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mkrefany">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mkrefany;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mkrefany" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mkrefany" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mkrefany As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mkrefany;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mkrefany : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mkrefany" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3314">Wypycha typu odwołania do wystąpienia określonego typu na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3314">Pushes a typed reference to an instance of a specific type onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3315">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3315">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3316">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3316">Format</span></span>|<span data-ttu-id="38ac7-3317">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3317">Assembly Format</span></span>|<span data-ttu-id="38ac7-3318">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3318">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3319">C6 < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-3319">C6 < `T` ></span></span>|<span data-ttu-id="38ac7-3320">Operacja Mkrefany `class`</span><span class="sxs-lookup"><span data-stu-id="38ac7-3320">mkrefany `class`</span></span>|<span data-ttu-id="38ac7-3321">Wypchnięcia typu odwołanie typu `class` na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3321">Pushes a typed reference of type `class` onto the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-3322">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3322">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3323">Wskaźnik do elementu danych spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3323">A pointer to piece of data is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3324">Wskaźnik jest zdjęte ze stosu i konwertowana do typu odwołania typu `class`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3324">The pointer is popped and converted to a typed reference of type `class`.</span></span>  
  
3.  <span data-ttu-id="38ac7-3325">Odwołanie do typu spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3325">The typed reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3326">`mkrefany` Instrukcji obsługuje przekazywanie o typach określanych dynamicznie odwołań.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3326">The `mkrefany` instruction supports the passing of dynamically typed references.</span></span> <span data-ttu-id="38ac7-3327">Wskaźnik musi być typu `&`, `*`, lub `native int`i przytrzymaj prawidłowy adres elementu danych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3327">The pointer must be of type `&`, `*`, or `native int`, and hold the valid address of a piece of data.</span></span> <span data-ttu-id="38ac7-3328">`Class` jest token klasy opisujące typ danych odwołuje się wskaźnik myszy.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3328">`Class` is the class token describing the type of the data referenced by the pointer.</span></span> <span data-ttu-id="38ac7-3329">`Mkrefany` wypchnięcia typu odwołania na stosie, zapewniając nieprzezroczyste deskryptora wskaźnik i typ `class`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3329">`Mkrefany` pushes a typed reference on the stack, providing an opaque descriptor of the pointer and the type `class`.</span></span>  
  
 <span data-ttu-id="38ac7-3330">Jedyne prawidłowe operacja dozwolone na odwołanie do typu jest przekazywany do metody, która wymaga odwołania typu jako parametr.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3330">The only valid operation permitted upon a typed reference is to pass it to a method that requires a typed reference as a parameter.</span></span> <span data-ttu-id="38ac7-3331">Wywoływany można następnie użyć <xref:System.Reflection.Emit.OpCodes.Refanytype> i <xref:System.Reflection.Emit.OpCodes.Refanyval> instrukcjami, aby pobrać odpowiednio typu (klasa) oraz adres.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3331">The callee can then use the <xref:System.Reflection.Emit.OpCodes.Refanytype> and <xref:System.Reflection.Emit.OpCodes.Refanyval> instructions to retrieve the type (class) and the address respectively.</span></span>  
  
 <span data-ttu-id="38ac7-3332"><xref:System.TypeLoadException> wygenerowany, jeśli `class` nie można odnaleźć.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3332"><xref:System.TypeLoadException> is thrown if `class` cannot be found.</span></span> <span data-ttu-id="38ac7-3333">To jest zwykle wykrycie instrukcje Microsoft języka pośredniego (MSIL) są konwertowane do kodu natywnego, a nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3333">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="38ac7-3334">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `mkrefany` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3334">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mkrefany` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3335">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3335">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3336">Mnoży dwie wartości i umieszcza wynik na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3336">Multiplies two values and pushes the result on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3337">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3337">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3338">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3338">Format</span></span>|<span data-ttu-id="38ac7-3339">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3339">Assembly Format</span></span>|<span data-ttu-id="38ac7-3340">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3340">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3341">5A</span><span class="sxs-lookup"><span data-stu-id="38ac7-3341">5A</span></span>|<span data-ttu-id="38ac7-3342">mul</span><span class="sxs-lookup"><span data-stu-id="38ac7-3342">mul</span></span>|<span data-ttu-id="38ac7-3343">Mnoży dwie wartości na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3343">Multiplies two values on the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-3344">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3344">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3345">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3345">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3346">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3346">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-3347">`value2` i `value1` są zdjęte ze stosu ze stosu; `value1` jest mnożona przez `value2`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3347">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`.</span></span>  
  
4.  <span data-ttu-id="38ac7-3348">Wynik spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3348">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3349">`mul` Mnoży instrukcji `value1` przez `value2` i umieszcza wynik na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3349">The `mul` instruction multiplies `value1` by `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="38ac7-3350">Operacje całkowitą obciąć dyskretnie górny usługi bits na przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3350">Integer operations silently truncate the upper bits on overflow.</span></span>  
  
 <span data-ttu-id="38ac7-3351">Zobacz <xref:System.Reflection.Emit.OpCodes.Mul_Ovf> określonych całkowitą mnożenia działania z obsługą przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3351">See <xref:System.Reflection.Emit.OpCodes.Mul_Ovf> for an integer-specific multiply operation with overflow handling.</span></span>  
  
 <span data-ttu-id="38ac7-3352">Dla typów zmiennoprzecinkowych 0 \* nieskończoności = NaN.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3352">For floating-point types, 0 \* infinity = NaN.</span></span>  
  
 <span data-ttu-id="38ac7-3353">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `mul` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3353">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3354">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3354">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3355">Mnoży dwie liczby całkowite, przeprowadza sprawdzanie przepełnienia, a wynik na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3355">Multiplies two integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3356">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3356">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3357">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3357">Format</span></span>|<span data-ttu-id="38ac7-3358">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3358">Assembly Format</span></span>|<span data-ttu-id="38ac7-3359">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3359">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3360">D8</span><span class="sxs-lookup"><span data-stu-id="38ac7-3360">D8</span></span>|<span data-ttu-id="38ac7-3361">mul.ovf</span><span class="sxs-lookup"><span data-stu-id="38ac7-3361">mul.ovf</span></span>|<span data-ttu-id="38ac7-3362">Mnoży dwie wartości całkowite na stosie ze sprawdzaniem przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3362">Multiplies two integer values on the stack with an overflow check.</span></span>|  
  
 <span data-ttu-id="38ac7-3363">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3363">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3364">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3364">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3365">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3365">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-3366">`value2` i `value1` są zdjęte ze stosu ze stosu; `value1` jest mnożona przez `value2`, ze sprawdzaniem przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3366">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`, with an overflow check.</span></span>  
  
4.  <span data-ttu-id="38ac7-3367">Wynik spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3367">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3368">`mul.ovf` Instrukcji mnoży całkowitą `value1` przez całkowitą `value2` i umieszcza wynik na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3368">The `mul.ovf` instruction multiplies integer `value1` by integer `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="38ac7-3369">Jeśli wynik nie mieści się w typie wyniku, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3369">An exception is thrown if the result will not fit in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-3370"><xref:System.OverflowException> jest generowany, jeśli wynik nie można przedstawić w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3370"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-3371">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `mul.ovf` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3371">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3372">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3372">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3373">Mnoży dwie wartości całkowitej bez znaku, przeprowadza sprawdzanie przepełnienia, a wynik na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3373">Multiplies two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3374">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3374">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3375">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3375">Format</span></span>|<span data-ttu-id="38ac7-3376">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3376">Assembly Format</span></span>|<span data-ttu-id="38ac7-3377">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3377">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3378">D9</span><span class="sxs-lookup"><span data-stu-id="38ac7-3378">D9</span></span>|<span data-ttu-id="38ac7-3379">mul.ovf.un</span><span class="sxs-lookup"><span data-stu-id="38ac7-3379">mul.ovf.un</span></span>|<span data-ttu-id="38ac7-3380">Mnoży dwie wartości bez znaku na stosie ze sprawdzaniem przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3380">Multiplies two unsigned values on the stack with an overflow check.</span></span>|  
  
 <span data-ttu-id="38ac7-3381">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3381">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3382">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3382">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3383">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3383">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-3384">`value2` i `value1` są zdjęte ze stosu ze stosu; `value1` jest mnożona przez `value2`, ze sprawdzaniem przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3384">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`, with an overflow check.</span></span>  
  
4.  <span data-ttu-id="38ac7-3385">Wynik spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3385">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3386">`mul.ovf.un` Instrukcji mnoży liczbę całkowitą bez znaku `value1` przez liczbę całkowitą bez znaku `value2` i umieszcza wynik na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3386">The `mul.ovf.un` instruction multiplies unsigned integer `value1` by unsigned integer `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="38ac7-3387">Jeśli wynik nie mieści się w typie wyniku, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3387">An exception is thrown if the result will not fit in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-3388"><xref:System.OverflowException> jest generowany, jeśli wynik nie można przedstawić w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3388"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-3389">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `mul.ovf.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3389">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3390">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3390">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Neg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Neg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Neg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Neg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Neg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Neg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Neg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Neg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3391">Negacja wartości i umieszcza wynik na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3391">Negates a value and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3392">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3392">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3393">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3393">Format</span></span>|<span data-ttu-id="38ac7-3394">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3394">Assembly Format</span></span>|<span data-ttu-id="38ac7-3395">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3395">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3396">65</span><span class="sxs-lookup"><span data-stu-id="38ac7-3396">65</span></span>|<span data-ttu-id="38ac7-3397">neg</span><span class="sxs-lookup"><span data-stu-id="38ac7-3397">neg</span></span>|<span data-ttu-id="38ac7-3398">Negacja wartości obecnie na szczycie stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3398">Negates the value currently on top of the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-3399">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3399">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3400">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3400">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3401">Wartość jest zdjęte ze stosu ze stosu i zanegowane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3401">A value is popped from the stack and negated.</span></span>  
  
3.  <span data-ttu-id="38ac7-3402">Wynik spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3402">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3403">`neg` Negacja wartości i umieszcza wynik na szczycie stosu w instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3403">The `neg` instruction negates value and pushes the result on top of the stack.</span></span> <span data-ttu-id="38ac7-3404">Zwracany typ jest taki sam jak typ argumentu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3404">The return type is the same as the operand type.</span></span>  
  
 <span data-ttu-id="38ac7-3405">Negacja wartości całkowitych na wartości jest standardem w dwóch uzupełniają negacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3405">Negation of integral values is standard two's complement negation.</span></span> <span data-ttu-id="38ac7-3406">W szczególności Negacja najbardziej ujemną (który nie ma odpowiednika dodatnią) daje najbardziej ujemną.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3406">In particular, negating the most negative number (which does not have a positive counterpart) yields the most negative number.</span></span> <span data-ttu-id="38ac7-3407">Aby wykryć tego użycia przepełnienia <xref:System.Reflection.Emit.OpCodes.Sub_Ovf> instrukcji zamiast (to znaczy odjąć od 0).</span><span class="sxs-lookup"><span data-stu-id="38ac7-3407">To detect this overflow use the <xref:System.Reflection.Emit.OpCodes.Sub_Ovf> instruction instead (that is, subtract from 0).</span></span>  
  
 <span data-ttu-id="38ac7-3408">Liczba zmiennoprzecinkowa Negacja nie przepełnienie i Negacja NaN zwraca NaN.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3408">Negating a floating-point number cannot overflow, and negating NaN returns NaN.</span></span>  
  
 <span data-ttu-id="38ac7-3409">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `neg` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3409">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `neg` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3410">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3410">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Newarr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Newarr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Newarr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Newarr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Newarr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Newarr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Newarr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Newarr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3411">Wypycha odwołanie obiektu do nowego nieujemną jednowymiarową tablicę wartości na stosie oceny określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3411">Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3412">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3412">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3413">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3413">Format</span></span>|<span data-ttu-id="38ac7-3414">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3414">Assembly Format</span></span>|<span data-ttu-id="38ac7-3415">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3415">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3416">8D < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-3416">8D < `T` ></span></span>|<span data-ttu-id="38ac7-3417">newarr `etype`</span><span class="sxs-lookup"><span data-stu-id="38ac7-3417">newarr `etype`</span></span>|<span data-ttu-id="38ac7-3418">Tworzy nową macierz elementami typu `etype`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3418">Creates a new array with elements of type `etype`.</span></span>|  
  
 <span data-ttu-id="38ac7-3419">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3419">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3420">Liczba elementów w tablicy spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3420">The number of elements in the array is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3421">Liczba elementów jest zdjęte ze stosu ze stosu i utworzeniu tablicy.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3421">The number of elements is popped from the stack and the array is created.</span></span>  
  
3.  <span data-ttu-id="38ac7-3422">Odwołanie obiektu do nowej tablicy spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3422">An object reference to the new array is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3423">`newarr` Instrukcji wypchnięcia odwołanie do obiektu (typ `O`) do nowej nieujemną jednowymiarową tablicę wartości typu `etype` (opisujące typ tokenu metadanych).</span><span class="sxs-lookup"><span data-stu-id="38ac7-3423">The `newarr` instruction pushes an object reference (type `O`) to a new zero-based, one-dimensional array whose elements are of type `etype` (a metadata token describing the type).</span></span> <span data-ttu-id="38ac7-3424">Liczba elementów w nowej tablicy powinny być określone jako `native int`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3424">The number of elements in the new array should be specified as a `native int`.</span></span> <span data-ttu-id="38ac7-3425">Zakres indeksy tablicy prawidłowy od zera do maksymalnej liczby elementów minus jeden.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3425">Valid array indexes range from zero to the maximum number of elements minus one.</span></span>  
  
 <span data-ttu-id="38ac7-3426">Elementy tablicy mogą być dowolnego typu, łącznie z typami wartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3426">The elements of an array can be any type, including value types.</span></span>  
  
 <span data-ttu-id="38ac7-3427">Liczony od zera, jednowymiarowe tablice liczb są tworzone za pomocą tokenu metadanych odwołania do typu odpowiednie wartości (<xref:System.Int32>i tak dalej).</span><span class="sxs-lookup"><span data-stu-id="38ac7-3427">Zero-based, one-dimensional arrays of numbers are created using a metadata token referencing the appropriate value type (<xref:System.Int32>, and so on).</span></span> <span data-ttu-id="38ac7-3428">Elementy tablicy są inicjowane 0 odpowiedniego typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3428">Elements of the array are initialized to 0 of the appropriate type.</span></span>  
  
 <span data-ttu-id="38ac7-3429">NonZero-oparte na tablice jednowymiarowe i tablic wielowymiarowych są tworzone przy użyciu <xref:System.Reflection.Emit.OpCodes.Newobj> zamiast `newarr`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3429">Nonzero-based one-dimensional arrays and multidimensional arrays are created using <xref:System.Reflection.Emit.OpCodes.Newobj> rather than `newarr`.</span></span> <span data-ttu-id="38ac7-3430">Zazwyczaj zostały utworzone przy użyciu metody <xref:System.Array> klasy w programie .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3430">More commonly, they are created using the methods of the <xref:System.Array> class in the .NET Framework.</span></span>  
  
 <span data-ttu-id="38ac7-3431"><xref:System.OutOfMemoryException> jest generowany, jeśli jest za mało pamięci do spełnienia żądania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3431"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="38ac7-3432"><xref:System.OverflowException> wygenerowany, jeśli `numElems` jest mniejszy niż 0.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3432"><xref:System.OverflowException> is thrown if `numElems` is less than 0.</span></span>  
  
 <span data-ttu-id="38ac7-3433">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `newarr` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3433">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `newarr` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3434">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3434">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Newobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Newobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Newobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Newobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Newobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Newobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Newobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Newobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3435">Tworzy nowy obiekt lub nowe wystąpienie typu wartości wypychanie odwołanie do obiektu (typ <see langword="O" />) na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3435">Creates a new object or a new instance of a value type, pushing an object reference (type <see langword="O" />) onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3436">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3436">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3437">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3437">Format</span></span>|<span data-ttu-id="38ac7-3438">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3438">Assembly Format</span></span>|<span data-ttu-id="38ac7-3439">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3439">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3440">73 < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-3440">73 < `T` ></span></span>|<span data-ttu-id="38ac7-3441">newobj `ctor`</span><span class="sxs-lookup"><span data-stu-id="38ac7-3441">newobj `ctor`</span></span>|<span data-ttu-id="38ac7-3442">Przydziela Niezainicjowany obiekt lub wartość typu i wywołuje metodę konstruktora `ctor`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3442">Allocates an uninitialized object or value type and calls the constructor method `ctor`.</span></span>|  
  
 <span data-ttu-id="38ac7-3443">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3443">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3444">Argumenty `arg1` za pośrednictwem `argn` są przenoszone na stosie w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3444">Arguments `arg1` through `argn` are pushed on the stack in sequence.</span></span>  
  
2.  <span data-ttu-id="38ac7-3445">Argumenty `argn` za pośrednictwem `arg1` zdjęte ze stosu ze stosu i przekazywane do `ctor` do utworzenia obiektu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3445">Arguments `argn` through `arg1` are popped from the stack and passed to `ctor` for object creation.</span></span>  
  
3.  <span data-ttu-id="38ac7-3446">Odwołanie do nowego obiektu spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3446">A reference to the new object is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3447">`newobj` Instrukcji tworzy nowy obiekt lub nowe wystąpienie typu wartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3447">The `newobj` instruction creates a new object or a new instance of a value type.</span></span> <span data-ttu-id="38ac7-3448">`Ctor` jest token metadanych ( `methodref` lub `methoddef` muszą być oznaczone jako konstruktora) wskazująca nazw, klasy i sygnatury konstruktora do wywołania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3448">`Ctor` is a metadata token (a `methodref` or `methoddef` that must be marked as a constructor) that indicates the name, class and signature of the constructor to call.</span></span>  
  
 <span data-ttu-id="38ac7-3449">`newobj` Instrukcji przydziela nowe wystąpienie klasy skojarzone z `ctor` i inicjuje wszystkie pola w tym nowym wystąpieniu na 0 (obiektem właściwego typu) lub puste odwołania zależnie od potrzeb.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3449">The `newobj` instruction allocates a new instance of the class associated with `ctor` and initializes all the fields in the new instance to 0 (of the proper type) or null references as appropriate.</span></span> <span data-ttu-id="38ac7-3450">Następnie wywołuje konstruktor `ctor` z argumentami danego wraz z nowo utworzone wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3450">It then calls the constructor `ctor` with the given arguments along with the newly created instance.</span></span> <span data-ttu-id="38ac7-3451">Po wywołaniu konstruktora obecnie zainicjować odwołania do obiektu (typ `O`) spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3451">After the constructor has been called, the now initialized object reference (type `O`) is pushed on the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3452">Z punktu widzenia konstruktora Niezainicjowany obiekt jest argumentem 0 i inne argumenty przekazane do zastosować element newobj wykonaj w kolejności.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3452">From the constructor's point of view, the uninitialized object is argument 0 and the other arguments passed to newobj follow in order.</span></span>  
  
 <span data-ttu-id="38ac7-3453">Wszystkie tablice liczony od zera, jednowymiarowa są tworzone przy użyciu <xref:System.Reflection.Emit.OpCodes.Newarr>, a nie `newobj`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3453">All zero-based, one-dimensional arrays are created using <xref:System.Reflection.Emit.OpCodes.Newarr>, not `newobj`.</span></span> <span data-ttu-id="38ac7-3454">Z drugiej strony wszystkie tablice (więcej niż jednym wymiarze lub w jednowymiarowa ale nie liczony od zera) są tworzone przy użyciu `newobj`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3454">On the other hand, all other arrays (more than one dimension, or one-dimensional but not zero-based) are created using `newobj`.</span></span>  
  
 <span data-ttu-id="38ac7-3455">Typy wartości nie są zwykle tworzone przy użyciu `newobj`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3455">Value types are not usually created using `newobj`.</span></span> <span data-ttu-id="38ac7-3456">Zazwyczaj są przydzielane jako argumentów lub zmiennych lokalnych, za pomocą `newarr` (dla tablic jednowymiarową, liczony od zera), lub jako pola obiektów.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3456">They are usually allocated either as arguments or local variables, using `newarr` (for zero-based, one-dimensional arrays), or as fields of objects.</span></span> <span data-ttu-id="38ac7-3457">Gdy przydzielone, są one inicjowane przy użyciu <xref:System.Reflection.Emit.OpCodes.Initobj>.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3457">Once allocated, they are initialized using <xref:System.Reflection.Emit.OpCodes.Initobj>.</span></span> <span data-ttu-id="38ac7-3458">Jednak `newobj` instrukcji może służyć do utworzenia nowego wystąpienia typu wartości na stosie, które następnie mogą być przekazywane jako argument, przechowywane lokalnie i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3458">However, the `newobj` instruction can be used to create a new instance of a value type on the stack, that can then be passed as an argument, stored in a local, and so on.</span></span>  
  
 <span data-ttu-id="38ac7-3459"><xref:System.OutOfMemoryException> jest generowany, jeśli jest za mało pamięci do spełnienia żądania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3459"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="38ac7-3460"><xref:System.MissingMethodException> jest generowany, jeśli metoda konstruktora `ctor` z określoną nazwą, klasy i podpis nie można odnaleźć.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3460"><xref:System.MissingMethodException> is thrown if a constructor method `ctor` with the indicated name, class and signature could not be found.</span></span> <span data-ttu-id="38ac7-3461">To jest zwykle wykrycie instrukcje Microsoft języka pośredniego (MSIL) są konwertowane do kodu natywnego, a nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3461">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="38ac7-3462">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `newobj` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3462">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `newobj` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3463">ILGenerator.Emit(OpCode, ConstructorInfo)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3463">ILGenerator.Emit(OpCode, ConstructorInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Nop">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Nop;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Nop" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Nop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Nop As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Nop;" />
      <MemberSignature Language="F#" Value=" staticval mutable Nop : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Nop" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3464">Wypełnia miejsce, jeśli używa się poprawkami.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3464">Fills space if opcodes are patched.</span>
          </span>
          <span data-ttu-id="38ac7-3465">Nie łatwy do rozpoznania operacja została wykonana, mimo że cykl przetwarzania, które mogą być używane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3465">No meaningful operation is performed although a processing cycle can be consumed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3466">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3466">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3467">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3467">Format</span></span>|<span data-ttu-id="38ac7-3468">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3468">Assembly Format</span></span>|<span data-ttu-id="38ac7-3469">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3469">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3470">00</span><span class="sxs-lookup"><span data-stu-id="38ac7-3470">00</span></span>|<span data-ttu-id="38ac7-3471">NOP</span><span class="sxs-lookup"><span data-stu-id="38ac7-3471">nop</span></span>|<span data-ttu-id="38ac7-3472">Wykonuje operację bez zachowania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3472">Performs an operation without behavior.</span></span>|  
  
 <span data-ttu-id="38ac7-3473">Brak zachowania przejściowe stosu zdefiniowane dla tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3473">There is no stack transitional behavior defined for this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-3474">`nop` Operacja nie przynosi żadnego efektu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3474">The `nop` operation does nothing.</span></span> <span data-ttu-id="38ac7-3475">Jest on przeznaczony do Wypełnij miejsce, jeśli są poprawiono kody operacji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3475">It is intended to fill in space if opcodes are patched.</span></span>  
  
 <span data-ttu-id="38ac7-3476">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `nop` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3476">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `nop` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3477">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3477">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Not;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Not" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Not" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Not As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Not;" />
      <MemberSignature Language="F#" Value=" staticval mutable Not : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Not" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3478">Oblicza dopełnienia bitowego wartości całkowitej na szczycie stosu i wynik na stosie oceny jako tego samego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3478">Computes the bitwise complement of the integer value on top of the stack and pushes the result onto the evaluation stack as the same type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3479">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3479">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3480">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3480">Format</span></span>|<span data-ttu-id="38ac7-3481">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3481">Assembly Format</span></span>|<span data-ttu-id="38ac7-3482">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3482">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3483">66</span><span class="sxs-lookup"><span data-stu-id="38ac7-3483">66</span></span>|<span data-ttu-id="38ac7-3484">not</span><span class="sxs-lookup"><span data-stu-id="38ac7-3484">not</span></span>|<span data-ttu-id="38ac7-3485">Oblicza dopełnienia bitowego wartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3485">Computes the bitwise complement of a value.</span></span>|  
  
 <span data-ttu-id="38ac7-3486">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3486">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3487">`value` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3487">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3488">`value` jest zdjęte ze stosu ze stosu i jego bitowe dopełnienia obliczana.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3488">`value` is popped from the stack and its bitwise complement computed.</span></span>  
  
3.  <span data-ttu-id="38ac7-3489">Wynik spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3489">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3490">`not` Instrukcji oblicza dopełnienia bitowego liczb całkowitych i umieszcza wynik na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3490">The `not` instruction computes the bitwise complement of an integer value and pushes the result onto the stack.</span></span> <span data-ttu-id="38ac7-3491">Zwracany typ jest taki sam jak typ argumentu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3491">The return type is the same as the operand type.</span></span>  
  
 <span data-ttu-id="38ac7-3492">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `not` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3492">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `not` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3493">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3493">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Or;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Or" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Or" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Or As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Or;" />
      <MemberSignature Language="F#" Value=" staticval mutable Or : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Or" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3494">Obliczenia bazy danych dopełnienia bitowego z dwóch liczb całkowitych wartości na szczycie stosu i umieszcza wynik na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3494">Compute the bitwise complement of the two integer values on top of the stack and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3495">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3495">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3496">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3496">Format</span></span>|<span data-ttu-id="38ac7-3497">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3497">Assembly Format</span></span>|<span data-ttu-id="38ac7-3498">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3498">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3499">60</span><span class="sxs-lookup"><span data-stu-id="38ac7-3499">60</span></span>|<span data-ttu-id="38ac7-3500">lub</span><span class="sxs-lookup"><span data-stu-id="38ac7-3500">or</span></span>|<span data-ttu-id="38ac7-3501">Oblicza bitowe lub z dwóch wartości całkowitych, zwraca liczbę całkowitą.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3501">Computes the bitwise OR of two integer values, returns an integer.</span></span>|  
  
 <span data-ttu-id="38ac7-3502">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3502">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3503">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3503">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3504">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3504">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-3505">`value2` i `value1` są zdjęte ze stosu ze stosu i ich bitowe lub obliczana.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3505">`value2` and `value1` are popped from the stack and their bitwise OR computed.</span></span>  
  
4.  <span data-ttu-id="38ac7-3506">Wynik spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3506">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3507">`or` Instrukcji oblicza bitowe lub dwie wartości nad stosu, wypychanie wyników na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3507">The `or` instruction computes the bitwise OR of two values atop the stack, pushing the result onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3508">`Or` jest operacją określonej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3508">`Or` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="38ac7-3509">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `or` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3509">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `or` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3510">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3510">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Pop;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Pop" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Pop As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Pop;" />
      <MemberSignature Language="F#" Value=" staticval mutable Pop : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Pop" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3511">Usuwa wartość aktualnie na szczycie stosu oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3511">Removes the value currently on top of the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3512">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3512">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3513">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3513">Format</span></span>|<span data-ttu-id="38ac7-3514">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3514">Assembly Format</span></span>|<span data-ttu-id="38ac7-3515">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3515">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3516">26</span><span class="sxs-lookup"><span data-stu-id="38ac7-3516">26</span></span>|<span data-ttu-id="38ac7-3517">POP</span><span class="sxs-lookup"><span data-stu-id="38ac7-3517">pop</span></span>|<span data-ttu-id="38ac7-3518">POP wysokiej wartości ze stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3518">Pops the top value from the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-3519">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3519">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3520">Wartość top jest zdjęte ze stosu ze stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3520">The top value is popped from the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3521">`pop` Instrukcji usuwa górnego elementu ze stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3521">The `pop` instruction removes the top element from the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3522">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `pop` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3522">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `pop` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3523">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3523">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3524">Jest to zarezerwowana instrukcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3524">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3525">Jest to zarezerwowana instrukcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3525">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3526">Jest to zarezerwowana instrukcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3526">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3527">Jest to zarezerwowana instrukcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3527">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix5">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix5;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix5" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix5" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix5 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix5;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix5 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix5" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3528">Jest to zarezerwowana instrukcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3528">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix6">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix6;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix6" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix6 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix6;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix6 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix6" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3529">Jest to zarezerwowana instrukcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3529">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix7">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix7;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix7" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix7 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix7;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix7 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix7" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3530">Jest to zarezerwowana instrukcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3530">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefixref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefixref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefixref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefixref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefixref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefixref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefixref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefixref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3531">Jest to zarezerwowana instrukcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3531">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Readonly">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Readonly;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Readonly" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Readonly" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Readonly As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Readonly;" />
      <MemberSignature Language="F#" Value=" staticval mutable Readonly : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Readonly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3532">Określa, czy operacja adres kolejnych tablicy sprawdza nie typu w czasie wykonywania i którego zmienność go zwraca wskaźnik zarządzanych jest ograniczony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3532">Specifies that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer whose mutability is restricted.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3533">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu język pośredni (MSIL) firmy Microsoft, wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3533">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3534">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3534">Format</span></span>|<span data-ttu-id="38ac7-3535">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3535">Assembly Format</span></span>|<span data-ttu-id="38ac7-3536">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3536">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3537">FE 1E</span><span class="sxs-lookup"><span data-stu-id="38ac7-3537">FE 1E</span></span>|<span data-ttu-id="38ac7-3538">tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3538">readonly.</span></span>|<span data-ttu-id="38ac7-3539">Określ, czy operacja adres kolejnych tablicy sprawdza nie typu w czasie wykonywania i zwraca wskaźnik zarządzanych, z ograniczeniami zmienność.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3539">Specify that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer with restricted mutability.</span></span>|  
  
 <span data-ttu-id="38ac7-3540">Ten prefiks może występować tylko bezpośrednio poprzednie `ldelema` instrukcji i wywołania specjalną `Address` metody dla tablic.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3540">This prefix can only appear immediately preceding the `ldelema` instruction and calls to the special `Address` method on arrays.</span></span> <span data-ttu-id="38ac7-3541">Jego wpływ na kolejne działanie ma dwa cele:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3541">Its effect on the subsequent operation is twofold:</span></span>  
  
1.  <span data-ttu-id="38ac7-3542">W czasie wykonywania wykonywana jest operacja wyboru nie typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3542">At run time, no type check operation is performed.</span></span> <span data-ttu-id="38ac7-3543">Należy pamiętać, że zwykle typu niejawnego sprawdzaj `ldelema` i `stelem` instrukcje stosowania na odwołanie do typu tablic.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3543">Note that there is normally an implicit type check for the `ldelema` and `stelem` instructions when used on reference type arrays.</span></span> <span data-ttu-id="38ac7-3544">Nigdy nie jest typu run-time Wyszukaj klasy wartości, więc `readonly` w takim przypadku jest pusta.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3544">There is never a run-time type check for value classes, so `readonly` is a no-op in that case.</span></span>  
  
2.  <span data-ttu-id="38ac7-3545">Kontroler traktuje wynik operacji adresu jako wskaźnik zarządzanego z ograniczeniami zmienność.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3545">The verifier treats the result of the address-of operation as a managed pointer with restricted mutability.</span></span>  
  
 <span data-ttu-id="38ac7-3546">Wskaźnik jest nazywany ograniczono zmienność, ponieważ typ definiujący kontroluje, czy wartość może ulegać mutacjom.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3546">The pointer is said to have restricted mutability because the defining type controls whether the value can be mutated.</span></span> <span data-ttu-id="38ac7-3547">Dla klas wartość, które udostępniają nie pola publiczne lub metod, które zaktualizuj tę wartość w miejscu, kursor jest tylko do odczytu (stąd nazwa prefiksu).</span><span class="sxs-lookup"><span data-stu-id="38ac7-3547">For value classes that expose no public fields or methods that update the value in place, the pointer is read-only (hence the name of the prefix).</span></span> <span data-ttu-id="38ac7-3548">W szczególności klas reprezentujących typy pierwotne (na przykład System.Int32) nie ujawniaj metod ustawiających i w związku z tym są tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3548">In particular, the classes representing primitive types (for example, System.Int32) do not expose mutators and thus are read-only.</span></span>  
  
 <span data-ttu-id="38ac7-3549">Wskaźnik zarządzanych ograniczony w ten sposób mogą być używane tylko w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3549">A managed pointer restricted in this fashion can be used only in the following ways:</span></span>  
  
-   <span data-ttu-id="38ac7-3550">Jako `object` parametr `ldfld`, `ldflda`, `stfld`, `call`, lub`constrained callvirt` instrukcje.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3550">As the `object` parameter for the `ldfld`, `ldflda`, `stfld`, `call`, or`constrained callvirt` instructions.</span></span>  
  
-   <span data-ttu-id="38ac7-3551">Jako `pointer` parametr `ldobj` instrukcji lub do jednego z `ldind` instrukcje.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3551">As the `pointer` parameter to the `ldobj` instruction or to one of the `ldind` instructions.</span></span>  
  
-   <span data-ttu-id="38ac7-3552">Jako `source` parametr `cpobj` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3552">As the `source` parameter to the `cpobj` instruction.</span></span>  
  
 <span data-ttu-id="38ac7-3553">Wszystkie inne operacje niedozwolone w tym `stobj`, `initobj`, lub `mkrefany` operacji lub dowolnym `stind` instrukcje.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3553">All other operations disallowed, including the `stobj`, `initobj`, or `mkrefany` operations, or any of the `stind` instructions.</span></span>  
  
 <span data-ttu-id="38ac7-3554">Celem `readonly` prefiks jest uniknięcie Sprawdzanie typu podczas pobierania elementu z tablicy w kodzie rodzajowym.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3554">The purpose of the `readonly` prefix is to avoid a type check when fetching an element from an array in generic code.</span></span> <span data-ttu-id="38ac7-3555">Na przykład, wyrażenie `arr[i].m()`, gdzie typ elementu tablicy `arr` jest typem ogólnym, która została ograniczona do ma interfejsu z metodą `m`, może być kompilacji do następującego MSIL.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3555">For example, the expression `arr[i].m()`, where the element type of the array `arr` is a generic type that has been constrained to have an interface with method `m`, might compile to the following MSIL.</span></span>  
  
```  
ldloc arr  
ldloc i  
readonly.  
ldelema !0    // Loads the pointer to the object.  
…             // Load the arguments to the call.  
constrained. !0  
callvirt m  
```  
  
 <span data-ttu-id="38ac7-3556">Bez `readonly` prefiksu, `ldelema` instrukcji przeprowadza sprawdzanie typu w przypadku których! 0 był typem referencyjnym.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3556">Without the `readonly` prefix, the `ldelema` instruction would perform a type check in the case where !0 was a reference type.</span></span> <span data-ttu-id="38ac7-3557">Nie tylko jest nieefektywne ten test typu, ale jest semantycznie nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3557">Not only is this type check inefficient, but it is semantically incorrect.</span></span> <span data-ttu-id="38ac7-3558">Sprawdzanie typu `ldelema` jest dokładnym odpowiednikiem, który jest za silne.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3558">The type check for `ldelema` is an exact match, which is too strong.</span></span> <span data-ttu-id="38ac7-3559">Jeżeli tablica podklasy typu! 0, powyższy kod spowoduje niepowodzenie sprawdzania typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3559">If the array held subclasses of type !0, the code above would fail the type check.</span></span>  
  
 <span data-ttu-id="38ac7-3560">Adresu elementu tablicy jest pobierana, zamiast elementu, aby uzyskać dojścia do `arr[i]` działa w przypadku oba typy wartości i typy referencyjne i w związku z tym mogą zostać przekazane do `constrained callvirt` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3560">The address of the array element is fetched, instead of the element itself, in order to have a handle for `arr[i]` that works for both value types and reference types, and thus can be passed to the `constrained callvirt` instruction.</span></span>  
  
 <span data-ttu-id="38ac7-3561">Ogólnie jest niebezpieczne pomijania sprawdzania czasu wykonywania, jeśli tablica przechowywać elementów typu referencyjnego.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3561">In general it would be unsafe to skip the run-time check if the array held elements of a reference type.</span></span> <span data-ttu-id="38ac7-3562">Jest jest niezbędne do zapewnienia, że żadnych zmian do tablicy są nawiązywane przy użyciu ten wskaźnik.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3562">To be safe, it is necessary to ensure that no modifications to the array are made through this pointer.</span></span> <span data-ttu-id="38ac7-3563">Reguły weryfikatora upewnij się, to.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3563">The verifier rules ensure this.</span></span> <span data-ttu-id="38ac7-3564">Ograniczone wskaźnika zarządzane mogą być przekazywane jako obiekt wywołania metody wystąpienia, tak nie jest mówiąc ściślej tylko do odczytu dla typów wartości, ale nie ma problemów bezpieczeństwa typu dla typów wartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3564">The restricted managed pointer can be passed as the object of instance method calls, so it is not strictly speaking read-only for value types, but there is no type safety problem for value types.</span></span>  
  
 <span data-ttu-id="38ac7-3565">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `readonly` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3565">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `readonly` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3566">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3566">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refanytype">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Refanytype;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Refanytype" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Refanytype" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Refanytype As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Refanytype;" />
      <MemberSignature Language="F#" Value=" staticval mutable Refanytype : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Refanytype" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3567">Pobiera token typu osadzonego w odwołaniu typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3567">Retrieves the type token embedded in a typed reference.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3568">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3568">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3569">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3569">Format</span></span>|<span data-ttu-id="38ac7-3570">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3570">Assembly Format</span></span>|<span data-ttu-id="38ac7-3571">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3571">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3572">FE 1D</span><span class="sxs-lookup"><span data-stu-id="38ac7-3572">FE 1D</span></span>|<span data-ttu-id="38ac7-3573">refanytype</span><span class="sxs-lookup"><span data-stu-id="38ac7-3573">refanytype</span></span>|<span data-ttu-id="38ac7-3574">Wypycha tokenu typu przechowywane w odwołaniu typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3574">Pushes the type token stored in a typed reference.</span></span>|  
  
 <span data-ttu-id="38ac7-3575">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3575">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3576">Odwołanie do typu wartości spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3576">A value type reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3577">Odwołanie do typu jest zdjęte ze stosu ze stosu i pobrać jego odpowiedniego tokenu typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3577">The typed reference is popped from the stack and its corresponding type token retrieved.</span></span>  
  
3.  <span data-ttu-id="38ac7-3578">Token typu spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3578">The type token is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3579">Odwołanie do typu zawiera token typu i adres na wystąpienie obiektu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3579">A typed reference contains a type token and an address to an object instance.</span></span>  
  
 <span data-ttu-id="38ac7-3580">`refanytype` Instrukcji pobiera token typu osadzonego typu odwołania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3580">The `refanytype` instruction retrieves the type token embedded in the typed reference.</span></span> <span data-ttu-id="38ac7-3581">Zobacz <xref:System.Reflection.Emit.OpCodes.Mkrefany> instrukcji, aby uzyskać informacje na temat tworzenia typu odwołania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3581">See the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction for information on creating typed references.</span></span>  
  
 <span data-ttu-id="38ac7-3582">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `refanytype` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3582">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `refanytype` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3583">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3583">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refanyval">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Refanyval;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Refanyval" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Refanyval" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Refanyval As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Refanyval;" />
      <MemberSignature Language="F#" Value=" staticval mutable Refanyval : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Refanyval" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3584">Pobiera adres (typ <see langword="&amp;" />) osadzonego w odwołaniu typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3584">Retrieves the address (type <see langword="&amp;" />) embedded in a typed reference.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3585">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3585">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3586">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3586">Format</span></span>|<span data-ttu-id="38ac7-3587">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3587">Assembly Format</span></span>|<span data-ttu-id="38ac7-3588">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3588">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3589">C2 < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-3589">C2 < `T` ></span></span>|<span data-ttu-id="38ac7-3590">refanyval `type`</span><span class="sxs-lookup"><span data-stu-id="38ac7-3590">refanyval `type`</span></span>|<span data-ttu-id="38ac7-3591">Wypycha dane przechowywane w odwołaniu do typu adresu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3591">Pushes the address stored in a typed reference.</span></span>|  
  
 <span data-ttu-id="38ac7-3592">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3592">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3593">Odwołanie do typu wartości spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3593">A value type reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3594">Odwołanie do typu jest zdjęte ze stosu ze stosu i pobrać odpowiedni adres.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3594">The typed reference is popped from the stack and the corresponding address retrieved.</span></span>  
  
3.  <span data-ttu-id="38ac7-3595">Adres spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3595">The address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3596">Odwołanie do typu zawiera token typu i adres na wystąpienie obiektu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3596">A typed reference contains a type token and an address to an object instance.</span></span>  
  
 <span data-ttu-id="38ac7-3597">`refanyval` Instrukcji pobiera adres osadzone w typu odwołania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3597">The `refanyval` instruction retrieves the address embedded in the a typed reference.</span></span> <span data-ttu-id="38ac7-3598">Typu osadzonego w typizowanych odwołania podane na stosie musi być zgodna z typem określonym przez `type` (token metadanych, albo `typedef` lub `typeref`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-3598">The type embedded in the typed reference supplied on the stack must match the type specified by `type` (a metadata token, either a `typedef` or a `typeref`).</span></span> <span data-ttu-id="38ac7-3599">Zobacz <xref:System.Reflection.Emit.OpCodes.Mkrefany> instrukcję powiązanej zawartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3599">See the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction for related content.</span></span>  
  
 <span data-ttu-id="38ac7-3600"><xref:System.InvalidCastException> wygenerowany, jeśli `type` nie jest taki sam jak typ przechowywane w odwołaniu typu (w tym przypadku `type` jest klasa dostarczonego do <xref:System.Reflection.Emit.OpCodes.Mkrefany> instrukcji skonstruowany powiedział typu odwołania).</span><span class="sxs-lookup"><span data-stu-id="38ac7-3600"><xref:System.InvalidCastException> is thrown if `type` is not identical to the type stored in the type reference (in this case, `type` is the class supplied to the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction that constructed said typed reference).</span></span>  
  
 <span data-ttu-id="38ac7-3601"><xref:System.TypeLoadException> wygenerowany, jeśli `type` nie można odnaleźć.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3601"><xref:System.TypeLoadException> is thrown if `type` cannot be found.</span></span>  
  
 <span data-ttu-id="38ac7-3602">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `refanyval` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3602">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `refanyval` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3603">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3603">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3604">Dzieli dwie wartości i wypchnięcia pozostałe na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3604">Divides two values and pushes the remainder onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3605">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3605">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3606">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3606">Format</span></span>|<span data-ttu-id="38ac7-3607">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3607">Assembly Format</span></span>|<span data-ttu-id="38ac7-3608">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3608">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3609">5D</span><span class="sxs-lookup"><span data-stu-id="38ac7-3609">5D</span></span>|<span data-ttu-id="38ac7-3610">rem</span><span class="sxs-lookup"><span data-stu-id="38ac7-3610">rem</span></span>|<span data-ttu-id="38ac7-3611">Wypchnięcia resztę z dzielenia `value1` przez `value2` na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3611">Pushes the remainder of dividing `value1` by `value2` onto the stack.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="38ac7-3612">ReplaceThisText</span><span class="sxs-lookup"><span data-stu-id="38ac7-3612">ReplaceThisText</span></span>  
  
 <span data-ttu-id="38ac7-3613">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3613">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3614">A `value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3614">A `value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3615">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3615">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-3616">`value2` i `value1` są zdjęte ze stosu ze stosu i pozostałej części `value1` `div` `value2` obliczana.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3616">`value2` and `value1` are popped from the stack and the remainder of `value1` `div` `value2` computed.</span></span>  
  
4.  <span data-ttu-id="38ac7-3617">Wynik spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3617">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3618">`result` = `value1` `rem` `value2` spełnia następujące warunki:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3618">`result` = `value1` `rem` `value2` satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="38ac7-3619">`result` = `value1` - `value2` `×` (`value1` `div` `value2`), oraz:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3619">`result` = `value1` - `value2` `×` (`value1` `div` `value2`), and:</span></span>  
  
 <span data-ttu-id="38ac7-3620">0 = &#124; `result` &#124; < &#124; `value2` &#124;, logowania (`result`) = znak (`value1`), gdzie `div` jest instrukcji dzielenia obcina kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3620">0 = &#124; `result` &#124; < &#124; `value2` &#124;, sign(`result`) = sign(`value1`), where `div` is the division instruction that truncates towards zero.</span></span>  
  
 <span data-ttu-id="38ac7-3621">Jeśli `value2` wynosi zero lub `value1` jest nieskończoność wynik jest wartością typu NaN.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3621">If `value2` is zero or `value1` is infinity the result is NaN.</span></span> <span data-ttu-id="38ac7-3622">Jeśli `value2` jest nieskończoność, wynikiem jest `value1` (zanegowane dla `-infinity`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-3622">If `value2` is infinity, the result is `value1` (negated for `-infinity`).</span></span>  
  
 <span data-ttu-id="38ac7-3623">Operacje integralną throw <xref:System.DivideByZeroException> Jeśli `value2` wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3623">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="38ac7-3624">Należy pamiętać, że na platformach opartych na Intel <xref:System.OverflowException> jest generowany, gdy obliczeniowych (minint `rem` -1).</span><span class="sxs-lookup"><span data-stu-id="38ac7-3624">Note that on the Intel-based platforms an <xref:System.OverflowException> is thrown when computing (minint `rem` -1).</span></span>  
  
 <span data-ttu-id="38ac7-3625">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `rem` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3625">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rem` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3626">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3626">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rem_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rem_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rem_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rem_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rem_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rem_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rem_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rem_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3627">Dzieli dwie wartości bez znaku i wypchnięcia pozostałe na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3627">Divides two unsigned values and pushes the remainder onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3628">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3628">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3629">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3629">Format</span></span>|<span data-ttu-id="38ac7-3630">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3630">Assembly Format</span></span>|<span data-ttu-id="38ac7-3631">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3631">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3632">5E</span><span class="sxs-lookup"><span data-stu-id="38ac7-3632">5E</span></span>|<span data-ttu-id="38ac7-3633">rem.un</span><span class="sxs-lookup"><span data-stu-id="38ac7-3633">rem.un</span></span>|<span data-ttu-id="38ac7-3634">Wypchnięcia resztę z dzielenia niepodpisane `value1` przez niepodpisane `value2` na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3634">Pushes the remainder of dividing unsigned `value1` by unsigned `value2` onto the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-3635">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3635">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3636">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3636">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3637">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3637">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-3638">`value2` i `value1` są zdjęte ze stosu ze stosu i pozostałej części `value1` `div` `value2` obliczana.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3638">`value2` and `value1` are popped from the stack and the remainder of `value1` `div` `value2` computed.</span></span>  
  
4.  <span data-ttu-id="38ac7-3639">Wynik spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3639">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3640">`result` = `value1` `rem.un` `value2` spełnia następujące warunki:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3640">`result` = `value1` `rem.un` `value2` satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="38ac7-3641">`result` = `value1` - `value2` x (`value1` `div.un` `value2`), oraz:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3641">`result` = `value1` - `value2` x(`value1` `div.un` `value2`), and:</span></span>  
  
 <span data-ttu-id="38ac7-3642">0 = `result`  <  `value2`, gdzie `div.un` jest instrukcją dzielenia bez znaku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3642">0 = `result` < `value2`, where `div.un` is the unsigned division instruction.</span></span>  
  
 <span data-ttu-id="38ac7-3643">`rem.un` Oblicza instrukcji `result` i wypchnięcia jej na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3643">The `rem.un` instruction computes `result` and pushes it on the stack.</span></span> <span data-ttu-id="38ac7-3644">`Rem.un` traktuje argumenty jak liczb całkowitych bez znaku, podczas gdy <xref:System.Reflection.Emit.OpCodes.Rem> traktowane jako podpisane liczby całkowite.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3644">`Rem.un` treats its arguments as unsigned integers, while <xref:System.Reflection.Emit.OpCodes.Rem> treats them as signed integers.</span></span>  
  
 <span data-ttu-id="38ac7-3645">`Rem.un` określono liczb zmiennoprzecinkowych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3645">`Rem.un` is unspecified for floating-point numbers.</span></span>  
  
 <span data-ttu-id="38ac7-3646">Operacje integralną throw <xref:System.DivideByZeroException> Jeśli `value2` wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3646">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="38ac7-3647">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `rem.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3647">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rem.un` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3648">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3648">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ret">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ret;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ret" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ret" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ret As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ret;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ret : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ret" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3649">Zwraca z bieżącej metody wypychanie wartości zwracanej (jeśli istnieje) ze stosu oceny wywołującej na stos oceny obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3649">Returns from the current method, pushing a return value (if present) from the callee's evaluation stack onto the caller's evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3650">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3650">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3651">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3651">Format</span></span>|<span data-ttu-id="38ac7-3652">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3652">Assembly Format</span></span>|<span data-ttu-id="38ac7-3653">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3653">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3654">2A</span><span class="sxs-lookup"><span data-stu-id="38ac7-3654">2A</span></span>|<span data-ttu-id="38ac7-3655">RET</span><span class="sxs-lookup"><span data-stu-id="38ac7-3655">ret</span></span>|<span data-ttu-id="38ac7-3656">Zwraca metodę, prawdopodobnie zwracanie wartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3656">Returns from method, possibly returning a value.</span></span>|  
  
 <span data-ttu-id="38ac7-3657">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3657">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3658">Wartość zwracana jest zdjęte ze stosu ze stosu oceny wywoływany.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3658">The return value is popped from the callee evaluation stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3659">Zwracana wartość uzyskaną w kroku 1 spoczywa na stosie oceny wywołującego.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3659">The return value obtained in step 1 is pushed onto the caller evaluation stack.</span></span>  
  
 <span data-ttu-id="38ac7-3660">Jeśli na stosie oceny wywoływanego nie ma wartości zwracanej, zwracana jest wartość nie (Brak stosu zachowania wywoływany albo obiekt wywołujący metody).</span><span class="sxs-lookup"><span data-stu-id="38ac7-3660">If the return value is not present on the callee evaluation stack, no value is returned (no stack transition behaviors for either the callee or caller method).</span></span>  
  
 <span data-ttu-id="38ac7-3661">Typ zwracanej wartości, bieżącej metody Określa typ wartości do pobrania z góry stosu i skopiowany na stosie metody, która wywołuje bieżącej metody.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3661">The type of the return value, if any, of the current method determines the type of value to be fetched from the top of the stack and copied onto the stack of the method that called the current method.</span></span> <span data-ttu-id="38ac7-3662">Stos oceny dla bieżącej metody może być pusta, z wyjątkiem wartość zwracaną.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3662">The evaluation stack for the current method must be empty except for the value to be returned.</span></span>  
  
 <span data-ttu-id="38ac7-3663">`ret` Nie może być używana do przekazywania kontroli z`try`, `filter`, `catch`, lub `finally` bloku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3663">The `ret` instruction cannot be used to transfer control out of a`try`, `filter`, `catch`, or `finally` block.</span></span> <span data-ttu-id="38ac7-3664">Z poziomu `try` lub `catch`, użyj <xref:System.Reflection.Emit.OpCodes.Leave> instrukcji, których miejscem docelowym `ret` instrukcji znajdującego się poza otaczającego wszystkie bloki wyjątków.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3664">From within a `try` or `catch`, use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction with a destination of a `ret` instruction that is outside all enclosing exception blocks.</span></span> <span data-ttu-id="38ac7-3665">Ponieważ `filter` i `finally` bloki są logicznie część wyjątków i nie metody, w którym ich kod jest osadzony, poprawnie wygenerowany instrukcje Microsoft języka pośredniego (MSIL) nie należy wykonywać zwrócone z wewnątrz metody `filter` lub `finally`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3665">Because the `filter` and `finally` blocks are logically part of exception handling and not the method in which their code is embedded, correctly generated Microsoft Intermediate Language (MSIL) instructions do not perform a method return from within a `filter` or `finally`.</span></span>  
  
 <span data-ttu-id="38ac7-3666">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `ret` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3666">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ret` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3667">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3667">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rethrow;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rethrow" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rethrow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rethrow As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rethrow;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rethrow : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rethrow" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3668">Ponownie zgłasza bieżącego wyjątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3668">Rethrows the current exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3669">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3669">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3670">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3670">Format</span></span>|<span data-ttu-id="38ac7-3671">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3671">Assembly Format</span></span>|<span data-ttu-id="38ac7-3672">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3672">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3673">FE 1A</span><span class="sxs-lookup"><span data-stu-id="38ac7-3673">FE 1A</span></span>|<span data-ttu-id="38ac7-3674">rethrow</span><span class="sxs-lookup"><span data-stu-id="38ac7-3674">rethrow</span></span>|<span data-ttu-id="38ac7-3675">Ponownie zgłasza bieżący wyjątek</span><span class="sxs-lookup"><span data-stu-id="38ac7-3675">Rethrows the current exception</span></span>|  
  
 <span data-ttu-id="38ac7-3676">Nie zachowania przejścia stosu jest zdefiniowany dla tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3676">No stack transition behavior is defined for this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-3677">`rethrow` Instrukcji jest dozwolona tylko w treści `catch` obsługi.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3677">The `rethrow` instruction is only permitted within the body of a `catch` handler.</span></span> <span data-ttu-id="38ac7-3678">Zgłasza ten sam wyjątek, który został zgłoszony przez ten program obsługi.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3678">It throws the same exception that was caught by this handler.</span></span>  
  
 <span data-ttu-id="38ac7-3679">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `rethrow` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3679">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rethrow` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3680">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3680">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shl">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shl;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shl" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shl As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shl;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shl : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3681">Przesuwa całkowitą w lewo (w zera) przez określoną liczbę bitów, wypychanie wyników na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3681">Shifts an integer value to the left (in zeroes) by a specified number of bits, pushing the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3682">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3682">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3683">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3683">Format</span></span>|<span data-ttu-id="38ac7-3684">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3684">Assembly Format</span></span>|<span data-ttu-id="38ac7-3685">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3685">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3686">62</span><span class="sxs-lookup"><span data-stu-id="38ac7-3686">62</span></span>|<span data-ttu-id="38ac7-3687">shl</span><span class="sxs-lookup"><span data-stu-id="38ac7-3687">shl</span></span>|<span data-ttu-id="38ac7-3688">Przesuwa całkowitą w lewo (przesunięcie w zera).</span><span class="sxs-lookup"><span data-stu-id="38ac7-3688">Shifts an integer to the left (shifting in zeros).</span></span>|  
  
 <span data-ttu-id="38ac7-3689">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3689">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3690">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3690">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3691">Liczba bitów, które mają zostać przesunięte spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3691">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-3692">Liczba bitów lekkie i wartości ze stosu; zdjęte ze stosu są wartość zostanie przesunięty w lewo przez określoną liczbę bitów.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3692">The number of bits to be shifted and the value are popped from the stack; the value is shifted left by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="38ac7-3693">Wynik spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3693">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3694">`shl` Instrukcji przewiduje wartość (typu `int32`, `int64` lub `native int`) przez określoną liczbę bitów w lewo.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3694">The `shl` instruction shifts the value (type `int32`, `int64` or `native int`) left by the specified number of bits.</span></span> <span data-ttu-id="38ac7-3695">Liczba bitów jest wartością typu `int32` lub `native int`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3695">The number of bits is a value of type `int32` or `native int`.</span></span> <span data-ttu-id="38ac7-3696">Wartość zwracana jest nieokreślony, jeśli liczba bitów lekkie jest większa niż lub równa szerokość (w bitach) podana wartość.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3696">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="38ac7-3697">`Shl` Wstawia zero bit najniżej na każdej zmianie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3697">`Shl` inserts a zero bit in the lowest position on each shift.</span></span>  
  
 <span data-ttu-id="38ac7-3698">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `shl` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3698">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shl` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3699">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3699">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3700">Przenosi całkowitą (w znak) po prawej stronie przez określoną liczbę bitów, wypychanie wyników na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3700">Shifts an integer value (in sign) to the right by a specified number of bits, pushing the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3701">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3701">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3702">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3702">Format</span></span>|<span data-ttu-id="38ac7-3703">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3703">Assembly Format</span></span>|<span data-ttu-id="38ac7-3704">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3704">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3705">63</span><span class="sxs-lookup"><span data-stu-id="38ac7-3705">63</span></span>|<span data-ttu-id="38ac7-3706">shr</span><span class="sxs-lookup"><span data-stu-id="38ac7-3706">shr</span></span>|<span data-ttu-id="38ac7-3707">Przenosi całkowitą w prawo (zmiany w znaku).</span><span class="sxs-lookup"><span data-stu-id="38ac7-3707">Shifts an integer to the right (shifting in sign).</span></span>|  
  
 <span data-ttu-id="38ac7-3708">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3708">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3709">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3709">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3710">Liczba bitów, które mają zostać przesunięte spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3710">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-3711">Liczba bitów lekkie i wartości ze stosu; zdjęte ze stosu są wartość zostanie przesunięty w prawo o określoną liczbę bitów.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3711">The number of bits to be shifted and the value are popped from the stack; the value is shifted right by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="38ac7-3712">Wynik spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3712">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3713">`shr.un` Instrukcji przewiduje wartość (typu `int32`, `int64` lub `native int`) bezpośrednio przez określoną liczbę bitów.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3713">The `shr.un` instruction shifts the value (type `int32`, `int64` or `native int`) right by the specified number of bits.</span></span> <span data-ttu-id="38ac7-3714">Liczba bitów jest wartością typu `int32` lub `native int`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3714">The number of bits is a value of type `int32` or `native int`.</span></span> <span data-ttu-id="38ac7-3715">Wartość zwracana jest nieokreślony, jeśli liczba bitów lekkie jest większa niż lub równa szerokość (w bitach) podana wartość.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3715">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="38ac7-3716">`Shr` replikowane najbardziej znaczących bitów na każdej zmiany, zachowując znak oryginalnej wartości w `result`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3716">`Shr` replicates the high order bit on each shift, preserving the sign of the original value in the `result`.</span></span>  
  
 <span data-ttu-id="38ac7-3717">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `shr` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3717">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shr` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3718">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3718">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shr_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shr_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shr_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shr_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shr_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shr_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shr_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shr_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3719">Przenosi wartość całkowitą bez znaku (w zera) po prawej stronie przez określoną liczbę bitów, wypychanie wyników na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3719">Shifts an unsigned integer value (in zeroes) to the right by a specified number of bits, pushing the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3720">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3720">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3721">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3721">Format</span></span>|<span data-ttu-id="38ac7-3722">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3722">Assembly Format</span></span>|<span data-ttu-id="38ac7-3723">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3723">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3724">64</span><span class="sxs-lookup"><span data-stu-id="38ac7-3724">64</span></span>|<span data-ttu-id="38ac7-3725">shr.UN</span><span class="sxs-lookup"><span data-stu-id="38ac7-3725">shr.un</span></span>|<span data-ttu-id="38ac7-3726">Przenosi całkowitą w prawo (przesunięcie w zera).</span><span class="sxs-lookup"><span data-stu-id="38ac7-3726">Shifts an integer to the right (shifting in zeroes).</span></span>|  
  
 <span data-ttu-id="38ac7-3727">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3727">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3728">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3728">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3729">Liczba bitów, które mają zostać przesunięte spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3729">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-3730">Liczba bitów lekkie i wartości ze stosu; zdjęte ze stosu są wartość zostanie przesunięty w prawo o określoną liczbę bitów.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3730">The number of bits to be shifted and the value are popped from the stack; the value is shifted right by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="38ac7-3731">Wynik spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3731">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3732">`shr.un` Instrukcji przewiduje wartość (typu `int32`, `int64` lub `native int`) bezpośrednio przez określoną liczbę bitów.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3732">The `shr.un` instruction shifts the value (type `int32`, `int64` or `native int`) right by the specified number of bits.</span></span> <span data-ttu-id="38ac7-3733">Liczba bitów jest wartością typu `int32`, `int64` lub `native int`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3733">The number of bits is a value of type `int32`, `int64` or `native int`.</span></span> <span data-ttu-id="38ac7-3734">Wartość zwracana jest nieokreślony, jeśli liczba bitów lekkie jest większa niż lub równa szerokość (w bitach) podana wartość.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3734">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="38ac7-3735">`Shr.un` Wstawia zero bit na szczycie każdej zmiany.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3735">`Shr.un` inserts a zero bit in the highest position on each shift.</span></span>  
  
 <span data-ttu-id="38ac7-3736">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `shr.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3736">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shr.un` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3737">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3737">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sizeof">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sizeof;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sizeof" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sizeof" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sizeof As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sizeof;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sizeof : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sizeof" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3738">Wypycha rozmiar w bajtach, podana wartość typu na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3738">Pushes the size, in bytes, of a supplied value type onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3739">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3739">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3740">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3740">Format</span></span>|<span data-ttu-id="38ac7-3741">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3741">Assembly Format</span></span>|<span data-ttu-id="38ac7-3742">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3742">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3743">FE 1C < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-3743">FE 1C < `T` ></span></span>|<span data-ttu-id="38ac7-3744">sizeof `valType`</span><span class="sxs-lookup"><span data-stu-id="38ac7-3744">sizeof `valType`</span></span>|<span data-ttu-id="38ac7-3745">Wypychanie rozmiar w bajtach typu wartości jako `unsigned int32`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3745">Push the size, in bytes, of a value type as an `unsigned int32`.</span></span>|  
  
 <span data-ttu-id="38ac7-3746">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3746">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3747">Rozmiar (w bajtach) typu podana wartość (`valType`) spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3747">The size (in bytes) of the supplied value type (`valType`) is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3748">`valType` musi być token metadanych ( `typeref` lub `typedef`), który określa typ wartości, typu odwołania lub parametr typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3748">`valType` must be a metadata token (a `typeref` or `typedef`) that specifies a value type, reference type, or generic type parameter.</span></span>  
  
 <span data-ttu-id="38ac7-3749">Dla typu odwołania rozmiar zwrócony jest rozmiar wartości odwołania odpowiadającego wpisz (4 bajty w systemie 32-bitowym), nie rozmiar danych przechowywanych w obiektach określone przez wartość odniesienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3749">For a reference type, the size returned is the size of a reference value of the corresponding type (4 bytes on 32-bit systems), not the size of the data stored in objects referred to by the reference value.</span></span> <span data-ttu-id="38ac7-3750">Parametr typu ogólnego może służyć tylko w treści typu lub metody definiującej go.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3750">A generic type parameter can be used only in the body of the type or method that defines it.</span></span> <span data-ttu-id="38ac7-3751">W przypadku wystąpienia tego typu lub metody parametr typu ogólnego jest zastępowany przez wartość typu lub typów referencyjnych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3751">When that type or method is instantiated, the generic type parameter is replaced by a value type or reference type.</span></span>  
  
 <span data-ttu-id="38ac7-3752">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `sizeof` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3752">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sizeof` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3753">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3753">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Starg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Starg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Starg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Starg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Starg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Starg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Starg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Starg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3754">Przechowuje wartość na szczycie stosu oceny w gnieździe argument pod określonym indeksem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3754">Stores the value on top of the evaluation stack in the argument slot at a specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3755">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3755">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3756">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3756">Format</span></span>|<span data-ttu-id="38ac7-3757">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3757">Assembly Format</span></span>|<span data-ttu-id="38ac7-3758">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3758">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3759">FE 0B < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-3759">FE 0B < `unsigned int16` ></span></span>|<span data-ttu-id="38ac7-3760">starg `num`</span><span class="sxs-lookup"><span data-stu-id="38ac7-3760">starg `num`</span></span>|<span data-ttu-id="38ac7-3761">POP wysokiej wartości ze stosu i zapisuje go w miejscu argument `num`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3761">Pops the top value from the stack and stores it in argument slot `num`.</span></span>|  
  
 <span data-ttu-id="38ac7-3762">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3762">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3763">Wartość aktualnie na szczycie stosu jest zdjęte ze stosu i umieścić w gnieździe argument `num`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3763">The value currently on top of the stack is popped and placed in argument slot `num`.</span></span>  
  
 <span data-ttu-id="38ac7-3764">`starg` Instrukcji będzie wyświetlana wartość ze stosu i umieszcza je w gnieździe argument `num`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3764">The `starg` instruction pops a value from the stack and places it in argument slot `num`.</span></span> <span data-ttu-id="38ac7-3765">Typ wartości musi odpowiadać typowi argumentu, jak określono w podpisie metody bieżącej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3765">The type of the value must match the type of the argument, as specified in the current method's signature.</span></span>  
  
 <span data-ttu-id="38ac7-3766">Dla procedury uwzględniające listy zmiennych argumentów `starg` instrukcji mogą służyć tylko do początkowego stałej argumentów, nie wartości w zmiennej części podpisu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3766">For procedures that take a variable argument list, the `starg` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="38ac7-3767">Wykonywanie magazynem do argumentów zawierających wartość całkowitą mniejszą niż 4 bajty obcina wartość przesyłane do argumentu ze stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3767">Performing a store into arguments that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the argument.</span></span> <span data-ttu-id="38ac7-3768">Zmiennoprzecinkowe wartości są zaokrąglane z ich rozmiar natywnego (typ `F`) do rozmiaru skojarzonych z argumentem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3768">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="38ac7-3769">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `starg` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3769">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `starg` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3770">ILGenerator.Emit (OpCode, krótki)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3770">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Starg_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Starg_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Starg_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Starg_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Starg_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Starg_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Starg_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Starg_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3771">Przechowuje wartość na szczycie stosu oceny w gnieździe argument od określonego indeksu, krótka forma.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3771">Stores the value on top of the evaluation stack in the argument slot at a specified index, short form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3772">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3772">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3773">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3773">Format</span></span>|<span data-ttu-id="38ac7-3774">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3774">Assembly Format</span></span>|<span data-ttu-id="38ac7-3775">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3775">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3776">10 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-3776">10 < `unsigned int8` ></span></span>|<span data-ttu-id="38ac7-3777">starg.s `num`</span><span class="sxs-lookup"><span data-stu-id="38ac7-3777">starg.s `num`</span></span>|<span data-ttu-id="38ac7-3778">POP wysokiej wartości ze stosu i zapisuje go w miejscu argument `num`, krótka.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3778">Pops the top value from the stack and stores it in argument slot `num`, short form.</span></span>|  
  
 <span data-ttu-id="38ac7-3779">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3779">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3780">Wartość aktualnie na szczycie stosu jest zdjęte ze stosu i umieścić w gnieździe argument `num`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3780">The value currently on top of the stack is popped and placed in argument slot `num`.</span></span>  
  
 <span data-ttu-id="38ac7-3781">`starg.s` Instrukcji będzie wyświetlana wartość ze stosu i umieszcza je w gnieździe argument `num`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3781">The `starg.s` instruction pops a value from the stack and places it in argument slot `num`.</span></span> <span data-ttu-id="38ac7-3782">Typ wartości musi odpowiadać typowi argumentu, jak określono w podpisie metody bieżącej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3782">The type of the value must match the type of the argument, as specified in the current method's signature.</span></span>  
  
 <span data-ttu-id="38ac7-3783">`starg.s` Instrukcji umożliwia efektywne kodowanie do użycia z argumentami najpierw 256.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3783">The `starg.s` instruction provides an efficient encoding for use with the first 256 arguments.</span></span>  
  
 <span data-ttu-id="38ac7-3784">Dla procedury uwzględniające listy zmiennych argumentów `starg.s` instrukcji mogą służyć tylko do początkowego stałej argumentów, nie wartości w zmiennej części podpisu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3784">For procedures that take a variable argument list, the `starg.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="38ac7-3785">Wykonywanie magazynem do argumentów zawierających wartość całkowitą mniejszą niż 4 bajty obcina wartość przesyłane do argumentu ze stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3785">Performing a store into arguments that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the argument.</span></span> <span data-ttu-id="38ac7-3786">Zmiennoprzecinkowe wartości są zaokrąglane z ich rozmiar natywnego (typ `F`) do rozmiaru skojarzonych z argumentem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3786">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="38ac7-3787">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `starg.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3787">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `starg.s` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3788">ILGenerator.Emit (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3788">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3789">Zamienia element tablicy pod danym indeksem o wartości na stosie oceny, którego typ jest określony w instrukcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3789">Replaces the array element at a given index with the value on the evaluation stack, whose type is specified in the instruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3790">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu język pośredni (MSIL) firmy Microsoft, wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3790">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3791">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3791">Format</span></span>|<span data-ttu-id="38ac7-3792">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3792">Assembly Format</span></span>|<span data-ttu-id="38ac7-3793">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3793">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3794">A4 &LT; `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-3794">A4 < `T` ></span></span>|<span data-ttu-id="38ac7-3795">stelem `typeTok`</span><span class="sxs-lookup"><span data-stu-id="38ac7-3795">stelem `typeTok`</span></span>|<span data-ttu-id="38ac7-3796">Zamienia wartości typu elementu tablicy w indeksie dostarczony `typeTok` na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3796">Replaces the array element at the supplied index with a value of type `typeTok` on the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-3797">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3797">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3798">Odwołanie do obiektu do tablicy, `array`, spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3798">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3799">Wartość indeksu `index`, aby element `array` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3799">An index value, `index`, to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-3800">Wartość typu określonego w instrukcji spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3800">A value of the type specified in the instruction is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="38ac7-3801">Wartość indeksu i odwołanie do tablicy ze stosu; zdjęte ze stosu są wartości są umieszczane w elemencie tablicy pod danym indeksem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3801">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="38ac7-3802">`stelem` Instrukcji zastępuje wartość elementu podany liczony od zera indeks w tablicy jednowymiarowej tablicy `array` o wartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3802">The `stelem` instruction replaces the value of the element at the supplied zero-based index in the one-dimensional array `array` with the value.</span></span> <span data-ttu-id="38ac7-3803">Wartość ma typ określony token `typeTok` w instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3803">The value has the type specified by the token `typeTok` in the instruction.</span></span>  
  
 <span data-ttu-id="38ac7-3804">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3804">Arrays are objects, and hence represented by a value of type `O`.</span></span> <span data-ttu-id="38ac7-3805">Indeks jest typu `native int`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3805">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="38ac7-3806"><xref:System.NullReferenceException> wygenerowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3806"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-3807"><xref:System.IndexOutOfRangeException> wygenerowany, jeśli `index` ma ujemną lub większą niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3807"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="38ac7-3808"><xref:System.ArrayTypeMismatchException> wygenerowany, jeśli `array` nie zawiera elementów wymaganego typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3808"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="38ac7-3809">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `stelem` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3809">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3810">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3810">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3811">Zamienia element tablicy w danym indeksie z <see langword="native int" /> wartości na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3811">Replaces the array element at a given index with the <see langword="native int" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3812">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3812">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3813">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3813">Format</span></span>|<span data-ttu-id="38ac7-3814">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3814">Assembly Format</span></span>|<span data-ttu-id="38ac7-3815">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3815">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3816">9B</span><span class="sxs-lookup"><span data-stu-id="38ac7-3816">9B</span></span>|<span data-ttu-id="38ac7-3817">stelem.i</span><span class="sxs-lookup"><span data-stu-id="38ac7-3817">stelem.i</span></span>|<span data-ttu-id="38ac7-3818">Zamienia element tablicy w indeksie dostarczonego z `native int` wartości na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3818">Replaces an array element at the supplied index with the `native int` value on the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-3819">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3819">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3820">Odwołanie do obiektu do tablicy, `array`, spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3820">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3821">Nieprawidłowy indeks do elementu `array` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3821">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-3822">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3822">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="38ac7-3823">Wartość indeksu i odwołanie do tablicy ze stosu; zdjęte ze stosu są wartości są umieszczane w elemencie tablicy pod danym indeksem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3823">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="38ac7-3824">`stelem.i` Instrukcji zastępuje wartość elementu `index` w Jednowymiarowa tablica `array` z `native int` wartość wypychana na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3824">The `stelem.i` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `native int` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3825">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3825">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="38ac7-3826">Indeks jest typu `native int`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3826">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="38ac7-3827"><xref:System.NullReferenceException> wygenerowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3827"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-3828"><xref:System.IndexOutOfRangeException> wygenerowany, jeśli `index` ma ujemną lub większą niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3828"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="38ac7-3829"><xref:System.ArrayTypeMismatchException> wygenerowany, jeśli `array` nie zawiera elementów wymaganego typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3829"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="38ac7-3830">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `stelem.i` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3830">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3831">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3831">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3832">Zamienia element tablicy w danym indeksie z <see langword="int8" /> wartości na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3832">Replaces the array element at a given index with the <see langword="int8" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3833">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3833">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3834">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3834">Format</span></span>|<span data-ttu-id="38ac7-3835">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3835">Assembly Format</span></span>|<span data-ttu-id="38ac7-3836">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3836">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3837">9C</span><span class="sxs-lookup"><span data-stu-id="38ac7-3837">9C</span></span>|<span data-ttu-id="38ac7-3838">stelem.i1</span><span class="sxs-lookup"><span data-stu-id="38ac7-3838">stelem.i1</span></span>|<span data-ttu-id="38ac7-3839">Zamienia element tablicy w indeksie dostarczonego z `int8` wartości na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3839">Replaces an array element at the supplied index with the `int8` value on the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-3840">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3840">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3841">Odwołanie do obiektu do tablicy, `array`, spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3841">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3842">Nieprawidłowy indeks do elementu `array` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3842">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-3843">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3843">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="38ac7-3844">Wartość indeksu i odwołanie do tablicy ze stosu; zdjęte ze stosu są wartości są umieszczane w elemencie tablicy pod danym indeksem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3844">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="38ac7-3845">`stelem.i1` Instrukcji zastępuje wartość elementu `index` w Jednowymiarowa tablica `array` z `int8` wartość wypychana na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3845">The `stelem.i1` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int8` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3846">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3846">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="38ac7-3847">Indeks jest typu `native int`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3847">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="38ac7-3848"><xref:System.NullReferenceException> wygenerowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3848"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-3849"><xref:System.IndexOutOfRangeException> wygenerowany, jeśli `index` ma ujemną lub większą niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3849"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="38ac7-3850"><xref:System.ArrayTypeMismatchException> wygenerowany, jeśli `array` nie zawiera elementów wymaganego typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3850"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="38ac7-3851">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `stelem.i1` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3851">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i1` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3852">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3852">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3853">Zamienia element tablicy w danym indeksie z <see langword="int16" /> wartości na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3853">Replaces the array element at a given index with the <see langword="int16" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3854">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3854">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3855">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3855">Format</span></span>|<span data-ttu-id="38ac7-3856">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3856">Assembly Format</span></span>|<span data-ttu-id="38ac7-3857">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3857">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3858">9D</span><span class="sxs-lookup"><span data-stu-id="38ac7-3858">9D</span></span>|<span data-ttu-id="38ac7-3859">stelem.i2</span><span class="sxs-lookup"><span data-stu-id="38ac7-3859">stelem.i2</span></span>|<span data-ttu-id="38ac7-3860">Zamienia element tablicy w indeksie dostarczonego z `int16` wartości na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3860">Replaces an array element at the supplied index with the `int16` value on the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-3861">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3861">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3862">Odwołanie do obiektu do tablicy, `array`, spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3862">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3863">Nieprawidłowy indeks do elementu `array` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3863">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-3864">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3864">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="38ac7-3865">Wartość indeksu i odwołanie do tablicy ze stosu; zdjęte ze stosu są wartości są umieszczane w elemencie tablicy pod danym indeksem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3865">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="38ac7-3866">`stelem.i2` Instrukcji zastępuje wartość elementu `index` w Jednowymiarowa tablica `array` z `int16` wartość wypychana na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3866">The `stelem.i2` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int16` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3867">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3867">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="38ac7-3868">Indeks jest typu `native int`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3868">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="38ac7-3869"><xref:System.NullReferenceException> wygenerowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3869"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-3870"><xref:System.IndexOutOfRangeException> wygenerowany, jeśli `index` ma ujemną lub większą niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3870"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="38ac7-3871"><xref:System.ArrayTypeMismatchException> wygenerowany, jeśli `array` nie zawiera elementów wymaganego typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3871"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="38ac7-3872">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `stelem.i2` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3872">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i2` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3873">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3873">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3874">Zamienia element tablicy w danym indeksie z <see langword="int32" /> wartości na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3874">Replaces the array element at a given index with the <see langword="int32" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3875">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3875">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3876">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3876">Format</span></span>|<span data-ttu-id="38ac7-3877">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3877">Assembly Format</span></span>|<span data-ttu-id="38ac7-3878">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3878">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3879">9E</span><span class="sxs-lookup"><span data-stu-id="38ac7-3879">9E</span></span>|<span data-ttu-id="38ac7-3880">stelem.i4</span><span class="sxs-lookup"><span data-stu-id="38ac7-3880">stelem.i4</span></span>|<span data-ttu-id="38ac7-3881">Zamienia element tablicy w indeksie dostarczonego z `int32` wartości na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3881">Replaces an array element at the supplied index with the `int32` value on the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-3882">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3882">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3883">Odwołanie do obiektu do tablicy, `array`, spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3883">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3884">Nieprawidłowy indeks do elementu `array` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3884">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-3885">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3885">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="38ac7-3886">Wartość indeksu i odwołanie do tablicy ze stosu; zdjęte ze stosu są wartości są umieszczane w elemencie tablicy pod danym indeksem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3886">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="38ac7-3887">`stelem.i4` Instrukcji zastępuje wartość elementu `index` w Jednowymiarowa tablica `array` z `int32` wartość wypychana na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3887">The `stelem.i4` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int32` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3888">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3888">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="38ac7-3889">Indeks jest typu `native int`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3889">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="38ac7-3890"><xref:System.NullReferenceException> wygenerowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3890"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-3891"><xref:System.IndexOutOfRangeException> wygenerowany, jeśli `index` ma ujemną lub większą niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3891"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="38ac7-3892"><xref:System.ArrayTypeMismatchException> wygenerowany, jeśli `array` nie zawiera elementów wymaganego typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3892"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="38ac7-3893">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `stelem.i4` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3893">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i4` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3894">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3894">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3895">Zamienia element tablicy w danym indeksie z <see langword="int64" /> wartości na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3895">Replaces the array element at a given index with the <see langword="int64" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3896">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3896">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3897">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3897">Format</span></span>|<span data-ttu-id="38ac7-3898">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3898">Assembly Format</span></span>|<span data-ttu-id="38ac7-3899">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3899">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3900">9F</span><span class="sxs-lookup"><span data-stu-id="38ac7-3900">9F</span></span>|<span data-ttu-id="38ac7-3901">stelem.i8</span><span class="sxs-lookup"><span data-stu-id="38ac7-3901">stelem.i8</span></span>|<span data-ttu-id="38ac7-3902">Zamienia element tablicy w indeksie dostarczonego z `int64` wartości na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3902">Replaces an array element at the supplied index with the `int64` value on the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-3903">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3903">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3904">Odwołanie do obiektu do tablicy, `array`, spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3904">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3905">Nieprawidłowy indeks do elementu `array` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3905">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-3906">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3906">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="38ac7-3907">Wartość indeksu i odwołanie do tablicy ze stosu; zdjęte ze stosu są wartości są umieszczane w elemencie tablicy pod danym indeksem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3907">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="38ac7-3908">`stelem.i8` Instrukcji zastępuje wartość elementu `index` w Jednowymiarowa tablica `array` z `int64` wartość wypychana na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3908">The `stelem.i8` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int64` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3909">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3909">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="38ac7-3910">Indeks jest typu `native int`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3910">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="38ac7-3911"><xref:System.NullReferenceException> wygenerowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3911"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-3912"><xref:System.IndexOutOfRangeException> wygenerowany, jeśli `index` ma ujemną lub większą niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3912"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="38ac7-3913"><xref:System.ArrayTypeMismatchException> wygenerowany, jeśli `array` nie zawiera elementów wymaganego typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3913"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="38ac7-3914">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `stelem.i8` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3914">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i8` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3915">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3915">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3916">Zamienia element tablicy w danym indeksie z <see langword="float32" /> wartości na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3916">Replaces the array element at a given index with the <see langword="float32" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3917">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3917">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3918">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3918">Format</span></span>|<span data-ttu-id="38ac7-3919">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3919">Assembly Format</span></span>|<span data-ttu-id="38ac7-3920">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3920">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3921">A0</span><span class="sxs-lookup"><span data-stu-id="38ac7-3921">A0</span></span>|<span data-ttu-id="38ac7-3922">stelem.r4</span><span class="sxs-lookup"><span data-stu-id="38ac7-3922">stelem.r4</span></span>|<span data-ttu-id="38ac7-3923">Zamienia element tablicy w indeksie dostarczonego z `float32` wartości na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3923">Replaces an array element at the supplied index with the `float32` value on the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-3924">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3924">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3925">Odwołanie do obiektu do tablicy, `array`, spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3925">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3926">Nieprawidłowy indeks do elementu `array` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3926">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-3927">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3927">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="38ac7-3928">Wartość indeksu i odwołanie do tablicy ze stosu; zdjęte ze stosu są wartości są umieszczane w elemencie tablicy pod danym indeksem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3928">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="38ac7-3929">`stelem.r4` Instrukcji zastępuje wartość elementu `index` w Jednowymiarowa tablica `array` z `float32` wartość wypychana na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3929">The `stelem.r4` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `float32` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3930">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3930">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="38ac7-3931">Indeks jest typu `native int`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3931">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="38ac7-3932"><xref:System.NullReferenceException> wygenerowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3932"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-3933"><xref:System.IndexOutOfRangeException> wygenerowany, jeśli `index` ma ujemną lub większą niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3933"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="38ac7-3934"><xref:System.ArrayTypeMismatchException> wygenerowany, jeśli `array` nie zawiera elementów wymaganego typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3934"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="38ac7-3935">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `stelem.r4` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3935">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.r4` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3936">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3936">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3937">Zamienia element tablicy w danym indeksie z <see langword="float64" /> wartości na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3937">Replaces the array element at a given index with the <see langword="float64" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3938">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3938">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3939">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3939">Format</span></span>|<span data-ttu-id="38ac7-3940">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3940">Assembly Format</span></span>|<span data-ttu-id="38ac7-3941">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3941">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3942">A1</span><span class="sxs-lookup"><span data-stu-id="38ac7-3942">A1</span></span>|<span data-ttu-id="38ac7-3943">stelem.r8</span><span class="sxs-lookup"><span data-stu-id="38ac7-3943">stelem.r8</span></span>|<span data-ttu-id="38ac7-3944">Zamienia element tablicy w indeksie dostarczonego z `float64` wartości na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3944">Replaces an array element at the supplied index with the `float64` value on the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-3945">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3945">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3946">Odwołanie do obiektu do tablicy, `array`, spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3946">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3947">Nieprawidłowy indeks do elementu `array` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3947">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-3948">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3948">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="38ac7-3949">Wartość indeksu i odwołanie do tablicy ze stosu; zdjęte ze stosu są wartości są umieszczane w elemencie tablicy pod danym indeksem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3949">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="38ac7-3950">`stelem.r8` Instrukcji zastępuje wartość elementu `index` w Jednowymiarowa tablica `array` z `float64` wartość wypychana na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3950">The `stelem.r8` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `float64` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3951">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3951">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="38ac7-3952">Indeks jest typu `native int`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3952">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="38ac7-3953"><xref:System.NullReferenceException> wygenerowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3953"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-3954"><xref:System.IndexOutOfRangeException> wygenerowany, jeśli `index` ma ujemną lub większą niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3954"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="38ac7-3955"><xref:System.ArrayTypeMismatchException> wygenerowany, jeśli `array` nie zawiera elementów wymaganego typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3955"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="38ac7-3956">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `stelem.r8` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3956">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.r8` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3957">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3957">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3958">Zamienia element tablicy w danym indeksie wartość ref obiektu (typ <see langword="O" />) na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3958">Replaces the array element at a given index with the object ref value (type <see langword="O" />) on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3959">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3959">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3960">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3960">Format</span></span>|<span data-ttu-id="38ac7-3961">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3961">Assembly Format</span></span>|<span data-ttu-id="38ac7-3962">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3962">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3963">A2</span><span class="sxs-lookup"><span data-stu-id="38ac7-3963">A2</span></span>|<span data-ttu-id="38ac7-3964">stelem.ref</span><span class="sxs-lookup"><span data-stu-id="38ac7-3964">stelem.ref</span></span>|<span data-ttu-id="38ac7-3965">Zamienia element tablicy w indeksie dostarczonego z `ref` wartość (typu `O`) na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3965">Replaces an array element at the supplied index with the `ref` value (type `O`) on the stack.</span></span>|  
  
 <span data-ttu-id="38ac7-3966">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3966">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3967">Odwołanie do obiektu do tablicy, `array`, spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3967">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3968">Nieprawidłowy indeks do elementu `array` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3968">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-3969">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3969">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="38ac7-3970">Wartość indeksu i odwołanie do tablicy ze stosu; zdjęte ze stosu są wartości są umieszczane w elemencie tablicy pod danym indeksem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3970">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="38ac7-3971">`stelem.ref` Instrukcji zastępuje wartość elementu podany indeks w tablicy jednowymiarowej tablicy `array` z `ref` (typ `O`) wartość wypychana na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3971">The `stelem.ref` instruction replaces the value of the element at the supplied index in the one-dimensional array `array` with the `ref` (type `O`) value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-3972">Tablice obiektów i dlatego jest reprezentowany przez wartość typu `O`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3972">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="38ac7-3973">Indeks jest typu `native int`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3973">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="38ac7-3974">Należy pamiętać, że `stelem.ref` niejawnie rzutuje podana wartość do typu elementu `array` przed przypisanie wartości do elementu tablicy.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3974">Note that `stelem.ref` implicitly casts the supplied value to the element type of `array` before assigning the value to the array element.</span></span> <span data-ttu-id="38ac7-3975">To rzutowanie może zakończyć się niepowodzeniem, nawet w przypadku Zweryfikowano kod.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3975">This cast can fail, even for verified code.</span></span> <span data-ttu-id="38ac7-3976">W związku z tym `stelem.ref` instrukcji może zgłosić <xref:System.InvalidCastException>.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3976">Thus the `stelem.ref` instruction can throw <xref:System.InvalidCastException>.</span></span> <span data-ttu-id="38ac7-3977">Tablice jednowymiarowe, które nie są liczony od zera i tablice wielowymiarowe <xref:System.Array> klasa udostępnia <xref:System.Array.SetValue%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3977">For one-dimensional arrays that aren't zero-based and for multidimensional arrays, the <xref:System.Array> class provides a <xref:System.Array.SetValue%2A> method.</span></span>  
  
 <span data-ttu-id="38ac7-3978"><xref:System.NullReferenceException> wygenerowany, jeśli `array` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3978"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-3979"><xref:System.IndexOutOfRangeException> wygenerowany, jeśli `index` ma ujemną lub większą niż granica `array`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3979"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="38ac7-3980"><xref:System.ArrayTypeMismatchException> wygenerowany, jeśli `array` nie zawiera elementów wymaganego typu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3980"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="38ac7-3981">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `stelem.ref` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3981">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.ref` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-3982">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-3982">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-3983">Zamienia wartość przechowywana w polu odwołania do obiektu lub wskaźnik z nową wartością.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-3983">Replaces the value stored in the field of an object reference or pointer with a new value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-3984">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3984">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-3985">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-3985">Format</span></span>|<span data-ttu-id="38ac7-3986">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-3986">Assembly Format</span></span>|<span data-ttu-id="38ac7-3987">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-3987">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-3988">7D < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-3988">7D < `T` ></span></span>|<span data-ttu-id="38ac7-3989">stfld `field`</span><span class="sxs-lookup"><span data-stu-id="38ac7-3989">stfld `field`</span></span>|<span data-ttu-id="38ac7-3990">Zamienia wartości `field` obiektu na nową wartość.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3990">Replaces the value of `field` of the object with a new value.</span></span>|  
  
 <span data-ttu-id="38ac7-3991">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-3991">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-3992">Odwołanie do obiektu lub wskaźnikiem spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3992">An object reference or pointer is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-3993">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3993">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-3994">Wartość i odwołanie/wskaźnika obiektu ze stosu; zdjęte ze stosu są wartość `field` w obiekcie jest zastępowany podana wartość.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3994">The value and the object reference/pointer are popped from the stack; the value of `field` in the object is replaced with the supplied value.</span></span>  
  
 <span data-ttu-id="38ac7-3995">`stfld` Instrukcji zastępuje wartość pola obiektu (typ `O`) lub za pomocą wskaźnika (typ `native int`, `&`, lub `*`) z danej wartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3995">The `stfld` instruction replaces the value of a field of an object (type `O`) or via a pointer (type `native int`, `&`, or `*`) with a given value.</span></span> <span data-ttu-id="38ac7-3996">`Field` to token metadanych, który odwołuje się do odwołania elementu członkowskiego pola.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3996">`Field` is a metadata token that refers to a field member reference.</span></span> <span data-ttu-id="38ac7-3997">`stfld` Instrukcji może mieć prefiks z jednego lub obu <xref:System.Reflection.Emit.OpCodes.Unaligned> i <xref:System.Reflection.Emit.OpCodes.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3997">The `stfld` instruction can have a prefix of either or both of <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile>.</span></span>  
  
 <span data-ttu-id="38ac7-3998"><xref:System.NullReferenceException> jest generowany, jeśli odwołania do obiektu lub wskaźnika jest odwołanie o wartości null i pola nie jest statyczne.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3998"><xref:System.NullReferenceException> is thrown if the object reference or pointer is a null reference and the field isn't static.</span></span>  
  
 <span data-ttu-id="38ac7-3999"><xref:System.MissingFieldException> wygenerowany, jeśli `field` nie znaleziono w metadanych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-3999"><xref:System.MissingFieldException> is thrown if `field` is not found in the metadata.</span></span> <span data-ttu-id="38ac7-4000">Jest to zazwyczaj sprawdzana po przekonwertowaniu do kodu natywnego, a nie w czasie wykonywania instrukcji Microsoft języka pośredniego (MSIL).</span><span class="sxs-lookup"><span data-stu-id="38ac7-4000">This is typically checked when the Microsoft Intermediate Language (MSIL) instruction is converted to native code, not at runtime.</span></span>  
  
 <span data-ttu-id="38ac7-4001">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `stfld` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4001">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stfld` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4002">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4002">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4003">Przechowuje wartość typu <see langword="native int" /> na podany adres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4003">Stores a value of type <see langword="native int" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4004">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4004">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4005">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4005">Format</span></span>|<span data-ttu-id="38ac7-4006">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4006">Assembly Format</span></span>|<span data-ttu-id="38ac7-4007">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4007">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4008">DF</span><span class="sxs-lookup"><span data-stu-id="38ac7-4008">DF</span></span>|<span data-ttu-id="38ac7-4009">stind.i</span><span class="sxs-lookup"><span data-stu-id="38ac7-4009">stind.i</span></span>|<span data-ttu-id="38ac7-4010">Magazyny `native int` wartość pod danym adresem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4010">Stores a `native int` value at a given address.</span></span>|  
  
 <span data-ttu-id="38ac7-4011">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4011">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-4012">Adres spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4012">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-4013">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4013">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-4014">Wartość i adres ze stosu; zdjęte ze stosu są wartość znajduje się pod adresem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4014">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="38ac7-4015">`stind.i` Magazynów instrukcji `native int` wartość na podany adres (typ `native int`, `*`, lub `&`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-4015">The `stind.i` instruction stores a `native int` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="38ac7-4016">Typ bezpiecznego działania wymaga, aby `stind.i` instrukcji można użyć w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4016">Type safe operation requires that the `stind.i` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="38ac7-4017">Działanie `stind.i` instrukcji może być zmieniony przez poprzedzającego <xref:System.Reflection.Emit.OpCodes.Volatile> lub <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4017">The operation of the `stind.i` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="38ac7-4018"><xref:System.NullReferenceException> wygenerowany, jeśli `addr` naturalnie nie jest wyrównany dla typu argumentu niejawnego sufiksem instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4018"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="38ac7-4019">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `stind.i` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4019">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4020">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4020">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4021">Przechowuje wartość typu <see langword="int8" /> na podany adres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4021">Stores a value of type <see langword="int8" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4022">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4022">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4023">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4023">Format</span></span>|<span data-ttu-id="38ac7-4024">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4024">Assembly Format</span></span>|<span data-ttu-id="38ac7-4025">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4025">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4026">52</span><span class="sxs-lookup"><span data-stu-id="38ac7-4026">52</span></span>|<span data-ttu-id="38ac7-4027">stind.I1</span><span class="sxs-lookup"><span data-stu-id="38ac7-4027">stind.i1</span></span>|<span data-ttu-id="38ac7-4028">Magazyny `int8` wartość pod danym adresem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4028">Stores an `int8` value at a given address.</span></span>|  
  
 <span data-ttu-id="38ac7-4029">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4029">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-4030">Adres spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4030">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-4031">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4031">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-4032">Wartość i adres ze stosu; zdjęte ze stosu są wartość znajduje się pod adresem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4032">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="38ac7-4033">`stind.i1` Magazynów instrukcji `int8` wartość na podany adres (typ `native int`, `*`, lub `&`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-4033">The `stind.i1` instruction stores an `int8` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="38ac7-4034">Typ bezpiecznego działania wymaga, aby `stind.i1` instrukcji można użyć w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4034">Type safe operation requires that the `stind.i1` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="38ac7-4035">Działanie `stind.i1` instrukcji może być zmieniony przez poprzedzającego <xref:System.Reflection.Emit.OpCodes.Volatile> lub <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4035">The operation of the `stind.i1` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="38ac7-4036"><xref:System.NullReferenceException> wygenerowany, jeśli `addr` naturalnie nie jest wyrównany dla typu argumentu niejawnego sufiksem instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4036"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="38ac7-4037">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `stind.i1` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4037">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i1` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4038">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4038">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4039">Przechowuje wartość typu <see langword="int16" /> na podany adres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4039">Stores a value of type <see langword="int16" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4040">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4040">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4041">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4041">Format</span></span>|<span data-ttu-id="38ac7-4042">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4042">Assembly Format</span></span>|<span data-ttu-id="38ac7-4043">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4043">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4044">53</span><span class="sxs-lookup"><span data-stu-id="38ac7-4044">53</span></span>|<span data-ttu-id="38ac7-4045">stind.I2</span><span class="sxs-lookup"><span data-stu-id="38ac7-4045">stind.i2</span></span>|<span data-ttu-id="38ac7-4046">Magazyny `int16` wartość pod danym adresem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4046">Stores an `int16` value at a given address.</span></span>|  
  
 <span data-ttu-id="38ac7-4047">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4047">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-4048">Adres spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4048">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-4049">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4049">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-4050">Wartość i adres ze stosu; zdjęte ze stosu są wartość znajduje się pod adresem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4050">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="38ac7-4051">`stind.i2` Magazynów instrukcji `int16` wartość na podany adres (typ `native int`, `*`, lub `&`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-4051">The `stind.i2` instruction stores an `int16` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="38ac7-4052">Typ bezpiecznego działania wymaga, aby `stind.2i` instrukcji można użyć w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4052">Type safe operation requires that the `stind.2i` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="38ac7-4053">Działanie `stind.i2` instrukcji może być zmieniony przez poprzedzającego <xref:System.Reflection.Emit.OpCodes.Volatile> lub <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4053">The operation of the `stind.i2` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="38ac7-4054"><xref:System.NullReferenceException> wygenerowany, jeśli `addr` naturalnie nie jest wyrównany dla typu argumentu niejawnego sufiksem instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4054"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="38ac7-4055">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `stind.i2` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4055">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i2` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4056">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4056">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4057">Przechowuje wartość typu <see langword="int32" /> na podany adres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4057">Stores a value of type <see langword="int32" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4058">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4058">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4059">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4059">Format</span></span>|<span data-ttu-id="38ac7-4060">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4060">Assembly Format</span></span>|<span data-ttu-id="38ac7-4061">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4061">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4062">54</span><span class="sxs-lookup"><span data-stu-id="38ac7-4062">54</span></span>|<span data-ttu-id="38ac7-4063">stind.i4</span><span class="sxs-lookup"><span data-stu-id="38ac7-4063">stind.i4</span></span>|<span data-ttu-id="38ac7-4064">Magazyny `int32` wartość pod danym adresem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4064">Stores an `int32` value at a given address.</span></span>|  
  
 <span data-ttu-id="38ac7-4065">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4065">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-4066">Adres spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4066">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-4067">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4067">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-4068">Wartość i adres ze stosu; zdjęte ze stosu są wartość znajduje się pod adresem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4068">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="38ac7-4069">`stind.i4` Magazynów instrukcji `int32` wartość na podany adres (typ `native int`, `*`, lub `&`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-4069">The `stind.i4` instruction stores an `int32` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="38ac7-4070">Typ bezpiecznego działania wymaga, aby `stind.i4` instrukcji można użyć w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4070">Type safe operation requires that the `stind.i4` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="38ac7-4071">Działanie `stind.i4` instrukcji może być zmieniony przez poprzedzającego <xref:System.Reflection.Emit.OpCodes.Volatile> lub <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4071">The operation of the `stind.i4` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="38ac7-4072"><xref:System.NullReferenceException> wygenerowany, jeśli `addr` naturalnie nie jest wyrównany dla typu argumentu niejawnego sufiksem instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4072"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="38ac7-4073">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `stind.i4` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4073">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i4` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4074">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4074">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4075">Przechowuje wartość typu <see langword="int64" /> na podany adres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4075">Stores a value of type <see langword="int64" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4076">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4076">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4077">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4077">Format</span></span>|<span data-ttu-id="38ac7-4078">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4078">Assembly Format</span></span>|<span data-ttu-id="38ac7-4079">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4079">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4080">55</span><span class="sxs-lookup"><span data-stu-id="38ac7-4080">55</span></span>|<span data-ttu-id="38ac7-4081">stind.i8</span><span class="sxs-lookup"><span data-stu-id="38ac7-4081">stind.i8</span></span>|<span data-ttu-id="38ac7-4082">Magazyny `int64` wartość pod danym adresem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4082">Stores an `int64` value at a given address.</span></span>|  
  
 <span data-ttu-id="38ac7-4083">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4083">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-4084">Adres spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4084">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-4085">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4085">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-4086">Wartość i adres ze stosu; zdjęte ze stosu są wartość znajduje się pod adresem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4086">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="38ac7-4087">`stind.i8` Magazynów instrukcji `int64` wartość na podany adres (typ `native int`, `*`, lub `&`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-4087">The `stind.i8` instruction stores an `int64` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="38ac7-4088">Typ bezpiecznego działania wymaga, aby `stind.i8` instrukcji można użyć w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4088">Type safe operation requires that the `stind.i8` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="38ac7-4089">Działanie `stind.i` instrukcji może być zmieniony przez poprzedzającego <xref:System.Reflection.Emit.OpCodes.Volatile> lub <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4089">The operation of the `stind.i` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="38ac7-4090"><xref:System.NullReferenceException> wygenerowany, jeśli `addr` naturalnie nie jest wyrównany dla typu argumentu niejawnego sufiksem instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4090"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="38ac7-4091">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `stind.i8` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4091">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i8` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4092">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4092">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4093">Przechowuje wartość typu <see langword="float32" /> na podany adres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4093">Stores a value of type <see langword="float32" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4094">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4094">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4095">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4095">Format</span></span>|<span data-ttu-id="38ac7-4096">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4096">Assembly Format</span></span>|<span data-ttu-id="38ac7-4097">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4097">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4098">56</span><span class="sxs-lookup"><span data-stu-id="38ac7-4098">56</span></span>|<span data-ttu-id="38ac7-4099">stind.r4</span><span class="sxs-lookup"><span data-stu-id="38ac7-4099">stind.r4</span></span>|<span data-ttu-id="38ac7-4100">Magazyny `float32` wartość pod danym adresem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4100">Stores a `float32` value at a given address.</span></span>|  
  
 <span data-ttu-id="38ac7-4101">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4101">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-4102">Adres spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4102">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-4103">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4103">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-4104">Wartość i adres ze stosu; zdjęte ze stosu są wartość znajduje się pod adresem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4104">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="38ac7-4105">`stind.r4` Magazynów instrukcji `float32` wartość na podany adres (typ `native int`, `*`, lub `&`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-4105">The `stind.r4` instruction stores a `float32` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="38ac7-4106">Typ bezpiecznego działania wymaga, aby `stind.r4` instrukcji można użyć w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4106">Type safe operation requires that the `stind.r4` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="38ac7-4107">Działanie `stind.r4` instrukcji może być zmieniony przez poprzedzającego <xref:System.Reflection.Emit.OpCodes.Volatile> lub <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4107">The operation of the `stind.r4` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="38ac7-4108"><xref:System.NullReferenceException> wygenerowany, jeśli `addr` naturalnie nie jest wyrównany dla typu argumentu niejawnego sufiksem instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4108"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="38ac7-4109">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `stind.r4` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4109">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.r4` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4110">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4110">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4111">Przechowuje wartość typu <see langword="float64" /> na podany adres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4111">Stores a value of type <see langword="float64" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4112">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4112">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4113">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4113">Format</span></span>|<span data-ttu-id="38ac7-4114">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4114">Assembly Format</span></span>|<span data-ttu-id="38ac7-4115">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4115">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4116">57</span><span class="sxs-lookup"><span data-stu-id="38ac7-4116">57</span></span>|<span data-ttu-id="38ac7-4117">stind.r8</span><span class="sxs-lookup"><span data-stu-id="38ac7-4117">stind.r8</span></span>|<span data-ttu-id="38ac7-4118">Magazyny `float64` wartość pod danym adresem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4118">Stores a `float64` value at a given address.</span></span>|  
  
 <span data-ttu-id="38ac7-4119">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4119">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-4120">Adres spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4120">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-4121">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4121">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-4122">Wartość i adres ze stosu; zdjęte ze stosu są wartość znajduje się pod adresem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4122">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="38ac7-4123">`stind.r8` Magazynów instrukcji `float64` wartość na podany adres (typ `native int`, `*`, lub `&`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-4123">The `stind.r8` instruction stores a `float64` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="38ac7-4124">Typ bezpiecznego działania wymaga, aby `stind.r8` instrukcji można użyć w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4124">Type safe operation requires that the `stind.r8` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="38ac7-4125">Działanie `stind.r8` instrukcji może być zmieniony przez poprzedzającego <xref:System.Reflection.Emit.OpCodes.Volatile> lub <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4125">The operation of the `stind.r8` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="38ac7-4126"><xref:System.NullReferenceException> wygenerowany, jeśli `addr` naturalnie nie jest wyrównany dla typu argumentu niejawnego sufiksem instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4126"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="38ac7-4127">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `stind.r8` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4127">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.r8` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4128">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4128">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4129">Przechowuje wartość odwołanie do obiektu na podany adres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4129">Stores a object reference value at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4130">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4130">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4131">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4131">Format</span></span>|<span data-ttu-id="38ac7-4132">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4132">Assembly Format</span></span>|<span data-ttu-id="38ac7-4133">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4133">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4134">51</span><span class="sxs-lookup"><span data-stu-id="38ac7-4134">51</span></span>|<span data-ttu-id="38ac7-4135">stind.ref</span><span class="sxs-lookup"><span data-stu-id="38ac7-4135">stind.ref</span></span>|<span data-ttu-id="38ac7-4136">Przechowuje odwołanie do obiektu (typ `O`) wartość pod danym adresem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4136">Stores an object reference (type `O`) value at a given address.</span></span>|  
  
 <span data-ttu-id="38ac7-4137">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4137">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-4138">Adres spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4138">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-4139">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4139">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-4140">Wartość i adres ze stosu; zdjęte ze stosu są wartość znajduje się pod adresem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4140">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="38ac7-4141">`stind.ref` Instrukcji przechowuje wartość odwołania obiektu na podany adres (typ `native int`, `*`, lub `&`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-4141">The `stind.ref` instruction stores an object reference value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="38ac7-4142">Typ bezpiecznego działania wymaga, aby `stind.ref` instrukcji można użyć w sposób zgodny z typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4142">Type safe operation requires that the `stind.ref` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="38ac7-4143">Działanie `stind.ref` instrukcji może być zmieniony przez poprzedzającego <xref:System.Reflection.Emit.OpCodes.Volatile> lub <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4143">The operation of the `stind.ref` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="38ac7-4144"><xref:System.NullReferenceException> wygenerowany, jeśli `addr` naturalnie nie jest wyrównany dla typu argumentu niejawnego sufiksem instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4144"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="38ac7-4145">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `stind.ref` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4145">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.ref` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4146">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4146">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4147">Bieżąca wartość z góry stosu oceny POP i zapisuje je w zmiennej lokalnej listy od określonego indeksu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4147">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at a specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4148">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4148">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4149">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4149">Format</span></span>|<span data-ttu-id="38ac7-4150">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4150">Assembly Format</span></span>|<span data-ttu-id="38ac7-4151">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4151">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4152">FE 0E < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-4152">FE 0E < `unsigned int16` ></span></span>|<span data-ttu-id="38ac7-4153">stloc `index`</span><span class="sxs-lookup"><span data-stu-id="38ac7-4153">stloc `index`</span></span>|<span data-ttu-id="38ac7-4154">POP wartość ze stosu i zapisuje go w zmiennej lokalnej `index`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4154">Pops a value from the stack and stores it in local variable `index`.</span></span>|  
  
 <span data-ttu-id="38ac7-4155">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4155">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-4156">Wartość jest zdjęte ze stosu wylogowuje na stosie i umieszczane w zmiennej lokalnej `index`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4156">A value is popped off of the stack and placed in local variable `index`.</span></span>  
  
 <span data-ttu-id="38ac7-4157">`stloc` Instrukcji będzie wyświetlana wartość top stosu oceny i przenosi ją do numer zmiennej lokalnej `index`, gdzie zmienne lokalne są numerowane 0 lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4157">The `stloc` instruction pops the top value off the evaluation stack and moves it into local variable number `index`, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="38ac7-4158">Typ wartości musi odpowiadać typowi zmiennej lokalnej zgodnie z bieżącą metodę podpisu lokalnego.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4158">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="38ac7-4159">Zapisywanie do zmiennych lokalnych, zawierających wartość całkowitą mniejszą niż 4 bajty obcina wartość przesyłane ze stosu do zmiennej lokalnej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4159">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="38ac7-4160">Zmiennoprzecinkowe wartości są zaokrąglane z ich rozmiar natywnego (typ `F`) do rozmiaru skojarzonych z argumentem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4160">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="38ac7-4161">Poprawne instrukcje Microsoft języka pośredniego (MSIL) wymaga, aby `index` jest prawidłowym indeksem lokalnego.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4161">Correct Microsoft Intermediate Language (MSIL) instructions require that `index` be a valid local index.</span></span> <span data-ttu-id="38ac7-4162">Dla `stloc` instrukcji `index` musi znajdować się w zakresie od 0 do 65534 włącznie (w szczególności 65535 jest nieprawidłowy).</span><span class="sxs-lookup"><span data-stu-id="38ac7-4162">For the `stloc` instruction, `index` must lie in the range 0 to 65534 inclusive (specifically, 65535 is not valid).</span></span> <span data-ttu-id="38ac7-4163">Z wyjątkiem 65535 przyczyna to pragmatyczne: implementacje prawdopodobnie użyje 2-bajtowych liczb całkowitych do śledzenia zarówno indeksu na komputerze lokalnym, a także łączna liczba zmiennych lokalnych dostępnych dla danej metody.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4163">The reason for excluding 65535 is pragmatic: likely implementations will use a 2-byte integer to track both a local's index, as well as the total number of locals for a given method.</span></span> <span data-ttu-id="38ac7-4164">Indeks 65535 dokonano prawidłowe, wymagałoby szersze liczby całkowitej w celu śledzenia liczby zmiennych lokalnych w takiej metody.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4164">If an index of 65535 had been made valid, it would require a wider integer to track the number of locals in such a method.</span></span>  
  
 <span data-ttu-id="38ac7-4165">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenia metody można użyć `stloc` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4165">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `stloc` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4166">ILGenerator.Emit (OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4166">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="38ac7-4167">ILGenerator.Emit (OpCode, krótki)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4167">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4168">Bieżąca wartość z góry stosu oceny POP i zapisuje je w zmiennej lokalnej listy pod indeksem 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4168">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 0.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4169">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4169">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4170">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4170">Format</span></span>|<span data-ttu-id="38ac7-4171">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4171">Assembly Format</span></span>|<span data-ttu-id="38ac7-4172">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4172">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4173">0A</span><span class="sxs-lookup"><span data-stu-id="38ac7-4173">0A</span></span>|<span data-ttu-id="38ac7-4174">stloc.0</span><span class="sxs-lookup"><span data-stu-id="38ac7-4174">stloc.0</span></span>|<span data-ttu-id="38ac7-4175">Do zmiennej lokalnej 0 będzie wyświetlana wartość ze stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4175">Pops a value from the stack into local variable 0.</span></span>|  
  
 <span data-ttu-id="38ac7-4176">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4176">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-4177">Wartość jest zdjęte ze stosu wylogowuje na stosie i umieszczane w zmiennej lokalnej indeksowany przez 0.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4177">A value is popped off of the stack and placed in the local variable indexed by 0.</span></span>  
  
 <span data-ttu-id="38ac7-4178">`stloc.0` Instrukcji będzie wyświetlana wartość top stosu oceny i przenosi ją do zmiennej lokalnej indeksowany przez 0.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4178">The `stloc.0` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 0.</span></span> <span data-ttu-id="38ac7-4179">Typ wartości musi odpowiadać typowi zmiennej lokalnej zgodnie z bieżącą metodę podpisu lokalnego.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4179">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="38ac7-4180">`stloc.0` jest szczególnie efektywne kodowanie do przechowywania wartości w zmiennej lokalnej 0.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4180">`stloc.0` is an especially efficient encoding for storing values in local variable 0.</span></span>  
  
 <span data-ttu-id="38ac7-4181">Zapisywanie do zmiennych lokalnych, zawierających wartość całkowitą mniejszą niż 4 bajty obcina wartość przesyłane ze stosu do zmiennej lokalnej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4181">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="38ac7-4182">Zmiennoprzecinkowe wartości są zaokrąglane z ich rozmiar natywnego (typ `F`) do rozmiaru skojarzonych z argumentem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4182">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="38ac7-4183">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `stloc.0` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4183">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.0` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4184">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4184">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4185">Bieżąca wartość z góry stosu oceny POP i zapisuje je w zmiennej lokalnej listy pod indeksem 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4185">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 1.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4186">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4186">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4187">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4187">Format</span></span>|<span data-ttu-id="38ac7-4188">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4188">Assembly Format</span></span>|<span data-ttu-id="38ac7-4189">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4189">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4190">0B</span><span class="sxs-lookup"><span data-stu-id="38ac7-4190">0B</span></span>|<span data-ttu-id="38ac7-4191">stloc.1</span><span class="sxs-lookup"><span data-stu-id="38ac7-4191">stloc.1</span></span>|<span data-ttu-id="38ac7-4192">Do zmiennej lokalnej 1 będzie wyświetlana wartość ze stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4192">Pops a value from the stack into local variable 1.</span></span>|  
  
 <span data-ttu-id="38ac7-4193">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4193">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-4194">Wartość jest zdjęte ze stosu wylogowuje na stosie i umieszczane w zmiennej lokalnej indeksowane według 1.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4194">A value is popped off of the stack and placed in the local variable indexed by 1.</span></span>  
  
 <span data-ttu-id="38ac7-4195">`stloc.1` Instrukcji będzie wyświetlana wartość top stosu oceny i przenosi ją do zmiennej lokalnej indeksowane według 1.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4195">The `stloc.1` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 1.</span></span> <span data-ttu-id="38ac7-4196">Typ wartości musi odpowiadać typowi zmiennej lokalnej zgodnie z bieżącą metodę podpisu lokalnego.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4196">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="38ac7-4197">`stloc.1` jest szczególnie efektywne kodowanie do przechowywania wartości w zmiennej lokalnej 1.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4197">`stloc.1` is an especially efficient encoding for storing values in local variable 1.</span></span>  
  
 <span data-ttu-id="38ac7-4198">Zapisywanie do zmiennych lokalnych, zawierających wartość całkowitą mniejszą niż 4 bajty obcina wartość przesyłane ze stosu do zmiennej lokalnej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4198">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="38ac7-4199">Zmiennoprzecinkowe wartości są zaokrąglane z ich rozmiar natywnego (typ `F`) do rozmiaru skojarzonych z argumentem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4199">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="38ac7-4200">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `stloc.1` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4200">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.1` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4201">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4201">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4202">Bieżąca wartość z góry stosu oceny POP i zapisuje je w zmiennej lokalnej listy pod indeksem 2.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4202">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 2.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4203">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4203">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4204">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4204">Format</span></span>|<span data-ttu-id="38ac7-4205">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4205">Assembly Format</span></span>|<span data-ttu-id="38ac7-4206">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4206">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4207">0C</span><span class="sxs-lookup"><span data-stu-id="38ac7-4207">0C</span></span>|<span data-ttu-id="38ac7-4208">stloc.2</span><span class="sxs-lookup"><span data-stu-id="38ac7-4208">stloc.2</span></span>|<span data-ttu-id="38ac7-4209">POP wartość ze stosu do zmiennej lokalnej 2</span><span class="sxs-lookup"><span data-stu-id="38ac7-4209">Pops a value from the stack into local variable 2</span></span>|  
  
 <span data-ttu-id="38ac7-4210">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4210">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-4211">Wartość jest zdjęte ze stosu wylogowuje na stosie i umieszczane w zmiennej lokalnej indeksowane według 2.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4211">A value is popped off of the stack and placed in the local variable indexed by 2.</span></span>  
  
 <span data-ttu-id="38ac7-4212">`stloc.2` Instrukcji będzie wyświetlana wartość top stosu oceny i przenosi ją do zmiennej lokalnej indeksowane według 2.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4212">The `stloc.2` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 2.</span></span> <span data-ttu-id="38ac7-4213">Typ wartości musi odpowiadać typowi zmiennej lokalnej zgodnie z bieżącą metodę podpisu lokalnego.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4213">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="38ac7-4214">`stloc.2` jest szczególnie efektywne kodowanie do przechowywania wartości w zmiennej lokalnej 2.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4214">`stloc.2` is an especially efficient encoding for storing values in local variable 2.</span></span>  
  
 <span data-ttu-id="38ac7-4215">Zapisywanie do zmiennych lokalnych, zawierających wartość całkowitą mniejszą niż 4 bajty obcina wartość przesyłane ze stosu do zmiennej lokalnej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4215">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="38ac7-4216">Zmiennoprzecinkowe wartości są zaokrąglane z ich rozmiar natywnego (typ `F`) do rozmiaru skojarzonych z argumentem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4216">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="38ac7-4217">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `stloc.2` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4217">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.2` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4218">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4218">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4219">Bieżąca wartość z góry stosu oceny POP i przechowuje ją w liście zmiennych lokalnych w indeksie 3.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4219">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 3.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4220">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4220">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4221">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4221">Format</span></span>|<span data-ttu-id="38ac7-4222">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4222">Assembly Format</span></span>|<span data-ttu-id="38ac7-4223">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4223">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4224">0D</span><span class="sxs-lookup"><span data-stu-id="38ac7-4224">0D</span></span>|<span data-ttu-id="38ac7-4225">stloc.3</span><span class="sxs-lookup"><span data-stu-id="38ac7-4225">stloc.3</span></span>|<span data-ttu-id="38ac7-4226">Do zmiennej lokalnej 3 będzie wyświetlana wartość ze stosu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4226">Pops a value from the stack into local variable 3</span></span>|  
  
 <span data-ttu-id="38ac7-4227">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4227">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-4228">Wartość jest zdjęte ze stosu wylogowuje na stosie i umieszczane w zmiennej lokalnej indeksowany przez 3.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4228">A value is popped off of the stack and placed in the local variable indexed by 3.</span></span>  
  
 <span data-ttu-id="38ac7-4229">`stloc.3` Instrukcji będzie wyświetlana wartość top stosu oceny i przenosi ją do zmiennej lokalnej indeksowany przez 3.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4229">The `stloc.3` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 3.</span></span> <span data-ttu-id="38ac7-4230">Typ wartości musi odpowiadać typowi zmiennej lokalnej zgodnie z bieżącą metodę podpisu lokalnego.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4230">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="38ac7-4231">`stloc.3` jest szczególnie efektywne kodowanie do przechowywania wartości w zmiennej lokalnej 3.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4231">`stloc.3` is an especially efficient encoding for storing values in local variable 3.</span></span>  
  
 <span data-ttu-id="38ac7-4232">Zapisywanie do zmiennych lokalnych, zawierających wartość całkowitą mniejszą niż 4 bajty obcina wartość przesyłane ze stosu do zmiennej lokalnej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4232">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="38ac7-4233">Zmiennoprzecinkowe wartości są zaokrąglane z ich rozmiar natywnego (typ `F`) do rozmiaru skojarzonych z argumentem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4233">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="38ac7-4234">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `stloc.3` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4234">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.3` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4235">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4235">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4236">Bieżąca wartość z góry stosu oceny POP i przechowuje ją w liście zmiennych lokalnych w <paramref name="index" /> (forma krótka).</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4236">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at <paramref name="index" /> (short form).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4237">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4237">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4238">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4238">Format</span></span>|<span data-ttu-id="38ac7-4239">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4239">Assembly Format</span></span>|<span data-ttu-id="38ac7-4240">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4240">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4241">13 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-4241">13 < `unsigned int8` ></span></span>|<span data-ttu-id="38ac7-4242">stloc.s `index`</span><span class="sxs-lookup"><span data-stu-id="38ac7-4242">stloc.s `index`</span></span>|<span data-ttu-id="38ac7-4243">POP wartość ze stosu i zapisuje go w zmiennej lokalnej `index`, krótka.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4243">Pops a value from the stack and stores it in local variable `index`, short form.</span></span>|  
  
 <span data-ttu-id="38ac7-4244">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4244">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-4245">Wartość jest zdjęte ze stosu wylogowuje na stosie i umieszczane w zmiennej lokalnej `index`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4245">A value is popped off of the stack and placed in local variable `index`.</span></span>  
  
 <span data-ttu-id="38ac7-4246">`stloc.s` Instrukcji będzie wyświetlana wartość top stosu oceny i przenosi ją do numer zmiennej lokalnej `index`, gdzie zmienne lokalne są numerowane 0 lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4246">The `stloc.s` instruction pops the top value off the evaluation stack and moves it into local variable number `index`, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="38ac7-4247">Typ wartości musi odpowiadać typowi zmiennej lokalnej zgodnie z bieżącą metodę podpisu lokalnego.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4247">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="38ac7-4248">`stloc.s` Instrukcji zapewnia wydajne kodowania dla zmiennych lokalnych 0 do 255.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4248">The `stloc.s` instruction provides an efficient encoding for local variables 0 through 255.</span></span>  
  
 <span data-ttu-id="38ac7-4249">Zapisywanie do zmiennych lokalnych, zawierających wartość całkowitą mniejszą niż 4 bajty obcina wartość przesyłane ze stosu do zmiennej lokalnej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4249">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="38ac7-4250">Zmiennoprzecinkowe wartości są zaokrąglane z ich rozmiar natywnego (typ `F`) do rozmiaru skojarzonych z argumentem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4250">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="38ac7-4251">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenia metody można użyć `stloc.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4251">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `stloc.s` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4252">ILGenerator.Emit (OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4252">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="38ac7-4253">ILGenerator.Emit (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4253">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4254">Kopiuje wartość o określonym typie ze stosu oceny na adres podany pamięci.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4254">Copies a value of a specified type from the evaluation stack into a supplied memory address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4255">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4255">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4256">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4256">Format</span></span>|<span data-ttu-id="38ac7-4257">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4257">Assembly Format</span></span>|<span data-ttu-id="38ac7-4258">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4258">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4259">81 < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-4259">81 < `T` ></span></span>|<span data-ttu-id="38ac7-4260">stobj `class`</span><span class="sxs-lookup"><span data-stu-id="38ac7-4260">stobj `class`</span></span>|<span data-ttu-id="38ac7-4261">Przechowuje wartość typu `class` ze stosu w pamięci.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4261">Stores a value of type `class` from the stack into memory.</span></span>|  
  
 <span data-ttu-id="38ac7-4262">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4262">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-4263">Adres spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4263">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-4264">Obiekt typu wartości typu `class` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4264">A value type object of type `class` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-4265">Obiekt i adres ze stosu; zdjęte ze stosu są obiekt typu wartość znajduje się pod adresem.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4265">The object and the address are popped from the stack; the value type object is stored at the address.</span></span>  
  
 <span data-ttu-id="38ac7-4266">`stobj` Instrukcji kopiuje obiekt typu wartości na adres określony adres (wskaźnik typu `native int`, `*`, lub `&`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-4266">The `stobj` instruction copies the value type object into the address specified by the address (a pointer of type `native int`, `*`, or `&`).</span></span> <span data-ttu-id="38ac7-4267">Liczba bajtów skopiowanych zależy od rozmiaru klasy reprezentowany przez `class`, token metadanych reprezentujący typ wartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4267">The number of bytes copied depends on the size of the class represented by `class`, a metadata token representing a value type.</span></span>  
  
 <span data-ttu-id="38ac7-4268">Działanie `stobj` instrukcji może być zmieniony przez poprzedzającego <xref:System.Reflection.Emit.OpCodes.Volatile> lub <xref:System.Reflection.Emit.OpCodes.Unaligned> prefiksu instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4268">The operation of the `stobj` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="38ac7-4269"><xref:System.TypeLoadException> jest generowany, jeśli nie można odnaleźć klasy.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4269"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="38ac7-4270">To jest zwykle wykrycie instrukcje Microsoft języka pośredniego (MSIL) są konwertowane do kodu natywnego, a nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4270">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at run time.</span></span>  
  
 <span data-ttu-id="38ac7-4271">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `stobj` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4271">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stobj` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4272">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4272">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stsfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stsfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stsfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stsfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stsfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stsfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stsfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stsfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4273">Zamienia wartość pola statycznego wartość ze stosu oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4273">Replaces the value of a static field with a value from the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4274">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4274">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4275">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4275">Format</span></span>|<span data-ttu-id="38ac7-4276">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4276">Assembly Format</span></span>|<span data-ttu-id="38ac7-4277">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4277">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4278">80 < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-4278">80 < `T` ></span></span>|<span data-ttu-id="38ac7-4279">stsfld `field`</span><span class="sxs-lookup"><span data-stu-id="38ac7-4279">stsfld `field`</span></span>|<span data-ttu-id="38ac7-4280">Zamienia wartość `field` o podanej wartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4280">Replaces the value in `field` with a supplied value.</span></span>|  
  
 <span data-ttu-id="38ac7-4281">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4281">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-4282">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4282">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-4283">Wartość jest zdjęte ze stosu ze stosu i przechowywane w `field`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4283">A value is popped from the stack and stored in `field`.</span></span>  
  
 <span data-ttu-id="38ac7-4284">`stsfld` Instrukcji zamienia wartość pola statycznego wartość ze stosu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4284">The `stsfld` instruction replaces the value of a static field with a value from the stack.</span></span> <span data-ttu-id="38ac7-4285">`field` to token metadanych, który musi odwoływać się do pola statycznego elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4285">`field` is a metadata token that must refer to a static field member.</span></span>  
  
 <span data-ttu-id="38ac7-4286">`stsfld` Instrukcji może być poprzedzony <xref:System.Reflection.Emit.OpCodes.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4286">The `stsfld` instruction may be prefixed by <xref:System.Reflection.Emit.OpCodes.Volatile>.</span></span>  
  
 <span data-ttu-id="38ac7-4287"><xref:System.MissingFieldException> jest generowany, jeśli nie można odnaleźć pola w metadanych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4287"><xref:System.MissingFieldException> is thrown if field is not found in the metadata.</span></span> <span data-ttu-id="38ac7-4288">Jest to zazwyczaj sprawdzana podczas konwertowania instrukcje Microsoft języka pośredniego (MSIL) do kodu macierzystego, nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4288">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="38ac7-4289">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `stsfld` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4289">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stsfld` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4290">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4290">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4291">Odejmuje jedną wartość z innej i umieszcza wynik na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4291">Subtracts one value from another and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4292">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4292">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4293">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4293">Format</span></span>|<span data-ttu-id="38ac7-4294">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4294">Assembly Format</span></span>|<span data-ttu-id="38ac7-4295">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4295">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4296">59</span><span class="sxs-lookup"><span data-stu-id="38ac7-4296">59</span></span>|<span data-ttu-id="38ac7-4297">Sub</span><span class="sxs-lookup"><span data-stu-id="38ac7-4297">sub</span></span>|<span data-ttu-id="38ac7-4298">Odejmuje jedną wartość z innej zwraca wartość liczbową.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4298">Subtracts one value from another, returning a new numeric value.</span></span>|  
  
 <span data-ttu-id="38ac7-4299">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4299">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-4300">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4300">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-4301">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4301">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-4302">`value2` i `value1` są zdjęte ze stosu ze stosu; `value2` jest odejmowany od `value1`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4302">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1`.</span></span>  
  
4.  <span data-ttu-id="38ac7-4303">Wynik spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4303">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-4304">Nie wykryto przepełnienia dla operacji liczba całkowita (przepełnienie prawidłowego obsługi, zobacz <xref:System.Reflection.Emit.OpCodes.Sub_Ovf>).</span><span class="sxs-lookup"><span data-stu-id="38ac7-4304">Overflow is not detected for integer operations (for proper overflow handling, see <xref:System.Reflection.Emit.OpCodes.Sub_Ovf>).</span></span>  
  
 <span data-ttu-id="38ac7-4305">Liczba całkowita odejmowania zawijany, a nie zmienia nasycenie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4305">Integer subtraction wraps, rather than saturates.</span></span> <span data-ttu-id="38ac7-4306">Na przykład: przy założeniu, 8-bitowych liczb całkowitych, gdzie `value1` jest równa 0 i `value2` jest ustawiona na 1, "zawinięty" wynik będzie 255.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4306">For example: assuming 8-bit integers, where `value1` is set to 0 and `value2` is set to 1, the "wrapped" result will be 255.</span></span>  
  
 <span data-ttu-id="38ac7-4307">Przepełnienie zmiennoprzecinkowej zwraca `+inf` (`PositiveInfinity`) lub `-inf` (`NegativeInfinity`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-4307">Floating-point overflow returns `+inf` (`PositiveInfinity`) or `-inf` (`NegativeInfinity`).</span></span>  
  
 <span data-ttu-id="38ac7-4308">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `sub` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4308">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4309">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4309">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4310">Odejmuje jedną liczbę całkowitą z innego, przeprowadza sprawdzanie przepełnienia, a wynik na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4310">Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4311">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4311">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4312">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4312">Format</span></span>|<span data-ttu-id="38ac7-4313">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4313">Assembly Format</span></span>|<span data-ttu-id="38ac7-4314">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4314">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4315">DA</span><span class="sxs-lookup"><span data-stu-id="38ac7-4315">DA</span></span>|<span data-ttu-id="38ac7-4316">sub.ovf</span><span class="sxs-lookup"><span data-stu-id="38ac7-4316">sub.ovf</span></span>|<span data-ttu-id="38ac7-4317">Odejmuje jedną liczbę całkowitą z innego ze sprawdzaniem przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4317">Subtracts one integer value from another with an overflow check.</span></span>|  
  
 <span data-ttu-id="38ac7-4318">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4318">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-4319">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4319">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-4320">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4320">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-4321">`value2` i `value1` są zdjęte ze stosu ze stosu; `value2` jest odejmowany od `value1` z sprawdzaj przepełnienie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4321">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="38ac7-4322">Wynik spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4322">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-4323"><xref:System.OverflowException> jest generowany, jeśli wynik nie można przedstawić w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4323"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-4324">Ta operacja jest wykonywana na liczb całkowitych ze znakiem; Użyj wartości zmiennoprzecinkowych <xref:System.Reflection.Emit.OpCodes.Sub>.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4324">This operation is performed on signed integers; for floating-point values, use <xref:System.Reflection.Emit.OpCodes.Sub>.</span></span>  
  
 <span data-ttu-id="38ac7-4325">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `sub.ovf` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4325">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4326">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4326">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4327">Odejmuje jedną wartość całkowitą bez znaku od siebie, przeprowadza sprawdzanie przepełnienia i wynik na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4327">Subtracts one unsigned integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4328">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4328">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4329">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4329">Format</span></span>|<span data-ttu-id="38ac7-4330">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4330">Assembly Format</span></span>|<span data-ttu-id="38ac7-4331">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4331">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4332">DB</span><span class="sxs-lookup"><span data-stu-id="38ac7-4332">DB</span></span>|<span data-ttu-id="38ac7-4333">sub.ovf.un</span><span class="sxs-lookup"><span data-stu-id="38ac7-4333">sub.ovf.un</span></span>|<span data-ttu-id="38ac7-4334">Odejmuje jedną wartość całkowitą bez znaku od siebie ze sprawdzaniem przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4334">Subtracts one unsigned integer value from another with an overflow check.</span></span>|  
  
 <span data-ttu-id="38ac7-4335">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4335">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-4336">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4336">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-4337">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4337">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-4338">`value2` i `value1` są zdjęte ze stosu ze stosu; `value2` jest odejmowany od `value1` z sprawdzaj przepełnienie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4338">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="38ac7-4339">Wynik spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4339">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-4340"><xref:System.OverflowException> jest generowany, jeśli wynik nie można przedstawić w typie wyniku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4340"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="38ac7-4341">Ta operacja jest wykonywana na liczb całkowitych ze znakiem; Użyj wartości zmiennoprzecinkowych <xref:System.Reflection.Emit.OpCodes.Sub>.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4341">This operation is performed on signed integers; for floating-point values, use <xref:System.Reflection.Emit.OpCodes.Sub>.</span></span>  
  
 <span data-ttu-id="38ac7-4342">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `sub.ovf.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4342">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4343">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4343">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Switch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Switch" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Switch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Switch As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Switch;" />
      <MemberSignature Language="F#" Value=" staticval mutable Switch : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Switch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4344">Implementuje tabeli przeskoku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4344">Implements a jump table.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4345">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4345">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4346">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4346">Format</span></span>|<span data-ttu-id="38ac7-4347">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4347">Assembly Format</span></span>|<span data-ttu-id="38ac7-4348">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4348">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4349">45 < `unsigned int32` >< `int32` >... < `int32` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-4349">45 < `unsigned int32` > < `int32` >... < `int32` ></span></span>|<span data-ttu-id="38ac7-4350">Przełącz (`N`, `t1`, `t2`... `tN`)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4350">switch (`N`, `t1`, `t2`... `tN`)</span></span>|<span data-ttu-id="38ac7-4351">Przechodzi do jednego z `N` wartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4351">Jumps to one of `N` values.</span></span>|  
  
 <span data-ttu-id="38ac7-4352">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4352">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-4353">Wartość spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4353">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-4354">Wartość jest zdjęte ze stosu ze stosu i wykonywania jest przekazywany do instrukcji przy przesunięciu indeksowane według wartości, gdy wartość jest mniejsza niż `N`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4354">The value is popped off the stack and execution is transferred to the instruction at the offset indexed by the value, where the value is less than `N`.</span></span>  
  
 <span data-ttu-id="38ac7-4355">`switch` Instrukcji implementuje tabeli przeskoku.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4355">The `switch` instruction implements a jump table.</span></span> <span data-ttu-id="38ac7-4356">Format instrukcji jest `unsigned int32` reprezentujący liczbę elementów docelowych `N`, a następnie `N` określania wartości int32 przejść elementów docelowych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4356">The format of the instruction is an `unsigned int32` representing the number of targets `N`, followed by `N` int32 values specifying jump targets.</span></span> <span data-ttu-id="38ac7-4357">Te cele są reprezentowane jako przesunięcia (dodatnie lub ujemne) od początku instrukcji czynności opisane w tym `switch` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4357">These targets are represented as offsets (positive or negative) from the beginning of the instruction following this `switch` instruction.</span></span>  
  
 <span data-ttu-id="38ac7-4358">`switch` Instrukcji będzie wyświetlana wartość ze stosu i porównuje, liczbą całkowitą bez znaku do `N`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4358">The `switch` instruction pops a value off the stack and compares it, as an unsigned integer, to `N`.</span></span> <span data-ttu-id="38ac7-4359">Jeśli wartość jest mniejsza niż `N`, wykonanie jest przenoszona do docelowego indeksowane według wartości, której elementy docelowe są ponumerowane od 0 (na przykład pierwszy element docelowy ma wartość 0, przyjmuje wartość 1, drugi docelowych i tak dalej).</span><span class="sxs-lookup"><span data-stu-id="38ac7-4359">If value is less than `N`, execution is transferred to the target indexed by value, where targets are numbered from 0 (for example, a value of 0 takes the first target, a value of 1 takes the second target, and so on).</span></span> <span data-ttu-id="38ac7-4360">Jeśli wartość jest większa niż lub równa `N`, wykonywanie będzie kontynuowane przy następnej instrukcji (poniżej).</span><span class="sxs-lookup"><span data-stu-id="38ac7-4360">If the value is greater than or equal to `N`, execution continues at the next instruction (fall through).</span></span>  
  
 <span data-ttu-id="38ac7-4361">Jeśli instrukcja docelowy ma co najmniej jeden kod prefiksu, formantu można przesłać tylko jako pierwszy z tymi prefiksami.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4361">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="38ac7-4362">Kontroli transferu do i z `try`, `catch`, `filter`, i `finally` bloków nie może zostać wykonana przez tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4362">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span> <span data-ttu-id="38ac7-4363">(Przeniesienie są znacznie ograniczone i musi użyć instrukcji pozostaw).</span><span class="sxs-lookup"><span data-stu-id="38ac7-4363">(Such transfers are severely restricted and must use the leave instruction instead).</span></span>  
  
 <span data-ttu-id="38ac7-4364">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `switch` opcode.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4364">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `switch` opcode.</span></span> <span data-ttu-id="38ac7-4365">`Label[]` Argument jest tablicą reprezentujący 32-bitowe przesunięcia etykiety.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4365">The `Label[]` argument is an array of Labels representing 32-bit offsets.</span></span>  
  
-   <span data-ttu-id="38ac7-4366">ILGenerator.Emit (OpCode, Label[])</span><span class="sxs-lookup"><span data-stu-id="38ac7-4366">ILGenerator.Emit(OpCode, Label[])</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38ac7-4367">Poniższy przykładowy kod przedstawia użycie `Switch` opcode, aby wygenerować skok użycie tablicy <xref:System.Reflection.Emit.Label>.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4367">The following code sample illustrates the use of the `Switch` opcode to generate a jump table using an array of <xref:System.Reflection.Emit.Label>.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tailcall">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Tailcall;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Tailcall" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Tailcall" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Tailcall As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Tailcall;" />
      <MemberSignature Language="F#" Value=" staticval mutable Tailcall : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Tailcall" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4368">Wykonuje instrukcję wywołania metody mieć sufiks taki sposób, że metoda bieżącej ramki stosu zostanie usunięty przed wykonaniem instrukcji rzeczywistego wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4368">Performs a postfixed method call instruction such that the current method's stack frame is removed before the actual call instruction is executed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4369">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4369">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4370">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4370">Format</span></span>|<span data-ttu-id="38ac7-4371">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4371">Assembly Format</span></span>|<span data-ttu-id="38ac7-4372">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4372">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4373">FE 14</span><span class="sxs-lookup"><span data-stu-id="38ac7-4373">FE 14</span></span>|<span data-ttu-id="38ac7-4374">tail.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4374">tail.</span></span>|<span data-ttu-id="38ac7-4375">Kolejne wywołania kończy bieżącej metody</span><span class="sxs-lookup"><span data-stu-id="38ac7-4375">Subsequent call terminates current methods</span></span>|  
  
 <span data-ttu-id="38ac7-4376">Brak zachowania przejścia stosu zdefiniowane dla tej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4376">There is no stack transition behavior defined for this instruction.</span></span>  
  
 <span data-ttu-id="38ac7-4377">`tail` Instrukcji prefiksu musi bezpośrednio poprzedzać <xref:System.Reflection.Emit.OpCodes.Call>, <xref:System.Reflection.Emit.OpCodes.Calli>, lub <xref:System.Reflection.Emit.OpCodes.Callvirt> instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4377">The `tail` prefix instruction must immediately precede a <xref:System.Reflection.Emit.OpCodes.Call>, <xref:System.Reflection.Emit.OpCodes.Calli>, or <xref:System.Reflection.Emit.OpCodes.Callvirt> instruction.</span></span> <span data-ttu-id="38ac7-4378">Oznacza to, że ramka stosu bieżącej metody powinny zostać usunięte przed wykonaniem instrukcji wywołania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4378">It indicates that the current method's stack frame should be removed before the call instruction is executed.</span></span> <span data-ttu-id="38ac7-4379">On również oznacza to, że wartość zwracana z wywołania następujące jest również wartość zwracaną przez metodę bieżącego, wywołanie może zostać przekształcone skoku cross-method.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4379">It also implies that the value returned from the following call is also the value returned by the current method, and the call can therefore be converted into a cross-method jump.</span></span>  
  
 <span data-ttu-id="38ac7-4380">Stos musi być pusty, z wyjątkiem argumenty przesyłanych przez następujące wywołanie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4380">The stack must be empty except for the arguments being transferred by the following call.</span></span> <span data-ttu-id="38ac7-4381">Instrukcja według instrukcji wywołania musi być ret. W związku z tym jest tylko prawidłowy kod sekwencji `tail. call` (lub `calli` lub `callvirt`).</span><span class="sxs-lookup"><span data-stu-id="38ac7-4381">The instruction following the call instruction must be a ret. Thus the only valid code sequence is `tail. call` (or `calli` or `callvirt`).</span></span> <span data-ttu-id="38ac7-4382">Poprawne instrukcje Microsoft języka pośredniego (MSIL) nie musi utworzyć gałąź do `call` instrukcji, ale może tworzyć gałęzi do kolejnego <xref:System.Reflection.Emit.OpCodes.Ret>.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4382">Correct Microsoft Intermediate Language (MSIL) instructions must not branch to the `call` instruction, but they may branch to the subsequent <xref:System.Reflection.Emit.OpCodes.Ret>.</span></span>  
  
 <span data-ttu-id="38ac7-4383">Nie można odrzucić bieżącej ramki, gdy formant jest przenoszone z kodzie niezaufanym zaufanego kodu, ponieważ może to zagrozić kodu tożsamości zabezpieczeń.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4383">The current frame cannot be discarded when control is transferred from untrusted code to trusted code, since this would jeopardize code identity security.</span></span> <span data-ttu-id="38ac7-4384">Sprawdza zabezpieczeń .NET Framework, w związku z tym może spowodować `tail` mają być ignorowane, pozostawiając standard <xref:System.Reflection.Emit.OpCodes.Call> instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4384">The .NET Framework security checks can therefore cause the `tail` to be ignored, leaving a standard <xref:System.Reflection.Emit.OpCodes.Call> instruction.</span></span> <span data-ttu-id="38ac7-4385">Podobnie, aby umożliwić zakończenia zsynchronizowane regionu wykonywane po wywołaniu zwraca, `tail` prefiks jest ignorowane w przypadku używać do kończenia metodę, która jest oznaczony jako zsynchronizowane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4385">Similarly, in order to allow the exit of a synchronized region to occur after the call returns, the `tail` prefix is ignored when used to exit a method that is marked synchronized.</span></span>  
  
 <span data-ttu-id="38ac7-4386">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `tail` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4386">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `tail` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4387">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4387">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TakesSingleByteArgument">
      <MemberSignature Language="C#" Value="public static bool TakesSingleByteArgument (System.Reflection.Emit.OpCode inst);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TakesSingleByteArgument(valuetype System.Reflection.Emit.OpCode inst) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TakesSingleByteArgument (inst As OpCode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TakesSingleByteArgument(System::Reflection::Emit::OpCode inst);" />
      <MemberSignature Language="F#" Value="static member TakesSingleByteArgument : System.Reflection.Emit.OpCode -&gt; bool" Usage="System.Reflection.Emit.OpCodes.TakesSingleByteArgument inst" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inst" Type="System.Reflection.Emit.OpCode" />
      </Parameters>
      <Docs>
        <param name="inst">
          <span data-ttu-id="38ac7-4388">Wystąpienie obiektu Opcode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4388">An instance of an Opcode object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="38ac7-4389">Zwraca wartość PRAWDA lub FAŁSZ, jeśli podany kod operacji przyjmuje argument pojedynczy bajt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4389">Returns true or false if the supplied opcode takes a single byte argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="38ac7-4390">
            <see langword="True" /> lub <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4390">
              <see langword="True" /> or <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4391">Tej metody można znaleźć, które używa MSIL są "Krótka forma", do użycia w zoptymalizowanym kodzie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4391">This method can be used to find which MSIL opcodes are "short form", for use in optimized code.</span></span>  
  
 <span data-ttu-id="38ac7-4392">`TakesSingleByteArgument` Zwraca `true` Jeśli <xref:System.Reflection.Emit.OpCode> wystąpienia pobiera argument jednobajtowych w następujących przypadkach:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4392">`TakesSingleByteArgument` returns `true` if the <xref:System.Reflection.Emit.OpCode> instance takes a single byte argument in the following cases:</span></span>  
  
-   <span data-ttu-id="38ac7-4393">Kod operacji wykonuje instrukcję gałęzi adresu o rozmiarze bajtów (na przykład <xref:System.Reflection.Emit.OpCodes.Br_S> i <xref:System.Reflection.Emit.OpCodes.Bgt_S>).</span><span class="sxs-lookup"><span data-stu-id="38ac7-4393">The opcode performs a branch instruction to a byte-sized address (for example, <xref:System.Reflection.Emit.OpCodes.Br_S> and <xref:System.Reflection.Emit.OpCodes.Bgt_S>).</span></span>  
  
-   <span data-ttu-id="38ac7-4394">Kod operacji wypchnięcia wartość bajtu na stosie (na przykład <xref:System.Reflection.Emit.OpCodes.Ldc_I4_S>).</span><span class="sxs-lookup"><span data-stu-id="38ac7-4394">The opcode pushes a byte value onto the stack (for example, <xref:System.Reflection.Emit.OpCodes.Ldc_I4_S>).</span></span>  
  
-   <span data-ttu-id="38ac7-4395">Kod operacji odwołuje się do zmiennej lub argumentu za pośrednictwem o rozmiarze bajtów "Krótka forma" (na przykład <xref:System.Reflection.Emit.OpCodes.Ldloc_S> i <xref:System.Reflection.Emit.OpCodes.Stloc_S>).</span><span class="sxs-lookup"><span data-stu-id="38ac7-4395">The opcode references a variable or argument via the byte-sized "short form" (for example, <xref:System.Reflection.Emit.OpCodes.Ldloc_S> and <xref:System.Reflection.Emit.OpCodes.Stloc_S>).</span></span>  
  
 <span data-ttu-id="38ac7-4396">W przeciwnym razie zwraca `false`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4396">Otherwise, it returns `false`.</span></span>  
  
 <span data-ttu-id="38ac7-4397">Na poniższym przykładzie przedstawiono użycie `TakesSingleByteArgument` w czasie wykonywania odbicia do `OpCodes` klasy i przetestowania czy każdego `OpCode` pola przyjmuje argument jednobajtowe.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4397">The example below demonstrates the use of `TakesSingleByteArgument` by reflecting on to the `OpCodes` class and testing to see whether each `OpCode` field takes a single-byte argument.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Throw;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Throw" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Throw" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Throw As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Throw;" />
      <MemberSignature Language="F#" Value=" staticval mutable Throw : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Throw" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4398">Obecnie zwraca obiekt wyjątku na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4398">Throws the exception object currently on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4399">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4399">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4400">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4400">Format</span></span>|<span data-ttu-id="38ac7-4401">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4401">Assembly Format</span></span>|<span data-ttu-id="38ac7-4402">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4402">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4403">7A</span><span class="sxs-lookup"><span data-stu-id="38ac7-4403">7A</span></span>|<span data-ttu-id="38ac7-4404">throw</span><span class="sxs-lookup"><span data-stu-id="38ac7-4404">throw</span></span>|<span data-ttu-id="38ac7-4405">Zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4405">Throws an exception.</span></span>|  
  
 <span data-ttu-id="38ac7-4406">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4406">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-4407">Odwołanie do obiektu (w celu wyjątek) spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4407">An object reference (to an exception) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-4408">Odwołanie do obiektu jest zdjęte ze stosu ze stosu i został zwrócony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4408">The object reference is popped from the stack and the exception thrown.</span></span>  
  
 <span data-ttu-id="38ac7-4409">`throw` Instrukcji zgłasza obiekt wyjątku (typ `O`) aktualnie na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4409">The `throw` instruction throws the exception object (type `O`) currently on the stack.</span></span>  
  
 <span data-ttu-id="38ac7-4410"><xref:System.NullReferenceException> jest generowany, gdy odwołanie do obiektu jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4410"><xref:System.NullReferenceException> is thrown if the object reference is a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-4411">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `throw` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4411">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `throw` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4412">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4412">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unaligned">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unaligned;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unaligned" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unaligned" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unaligned As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unaligned;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unaligned : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unaligned" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4413">Wskazuje, czy adres obecnie nad stosu oceny nie może być wyrównane fizycznych rozmiar bezpośrednio po <see langword="ldind" />, <see langword="stind" />, <see langword="ldfld" />, <see langword="stfld" />, <see langword="ldobj" />, <see langword="stobj" />, <see langword="initblk" />, lub <see langword="cpblk" /> instrukcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4413">Indicates that an address currently atop the evaluation stack might not be aligned to the natural size of the immediately following <see langword="ldind" />, <see langword="stind" />, <see langword="ldfld" />, <see langword="stfld" />, <see langword="ldobj" />, <see langword="stobj" />, <see langword="initblk" />, or <see langword="cpblk" /> instruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4414">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4414">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4415">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4415">Format</span></span>|<span data-ttu-id="38ac7-4416">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4416">Assembly Format</span></span>|<span data-ttu-id="38ac7-4417">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4417">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4418">FE 12 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-4418">FE 12 < `unsigned int8` ></span></span>|<span data-ttu-id="38ac7-4419">niewyrównany.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4419">unaligned.</span></span> `alignment`|<span data-ttu-id="38ac7-4420">Wskazuje, że kolejne wskaźnik instrukcji może być niewyrównany.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4420">Indicates that the subsequent pointer instruction may be unaligned.</span></span>|  
  
 <span data-ttu-id="38ac7-4421">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4421">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-4422">Adres spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4422">An address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-4423">`Unaligned` Określa, że adres (niezarządzany wskaźnik `native int`) na stosie nie może być wyrównany do fizycznych rozmiar bezpośrednio po `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, lub `cpblk` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4423">`Unaligned` specifies that the address (an unmanaged pointer, `native int`) on the stack might not be aligned to the natural size of the immediately following `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="38ac7-4424">Oznacza to aby uzyskać <xref:System.Reflection.Emit.OpCodes.Ldind_I4> instrukcji wyrównanie adres nie może być do granicy 4-bajtowych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4424">That is, for a <xref:System.Reflection.Emit.OpCodes.Ldind_I4> instruction the alignment of the address may not be to a 4-byte boundary.</span></span> <span data-ttu-id="38ac7-4425">Aby uzyskać `initblk` i `cpblk` domyślne wyrównanie to architektura zależne (4-bajtowych na 32-bitowych procesorach, 8-bajtowych na 64-bitowych procesorach).</span><span class="sxs-lookup"><span data-stu-id="38ac7-4425">For `initblk` and `cpblk` the default alignment is architecture dependent (4-byte on 32-bit CPUs, 8-byte on 64-bit CPUs).</span></span> <span data-ttu-id="38ac7-4426">Generatory kodu, które nie ograniczają ich dane wyjściowe do rozmiaru 32-bitowego programu word, należy użyć `unaligned` Jeśli wyrównanie nie jest znane w czasie kompilacji z 8-bajtowych.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4426">Code generators that do not restrict their output to a 32-bit word size must use `unaligned` if the alignment is not known at compile time to be 8-byte.</span></span>  
  
 <span data-ttu-id="38ac7-4427">Wartość wyrównania musi być 1, 2 lub 4 i oznacza, że wygenerowany kod powinien wniosku, że adres jest byte, znaków dwubajtowych lub odpowiednio quad bajtowych wyrównane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4427">The value of alignment must be 1, 2, or 4 and means that the generated code should assume that the address is byte, double-byte, or quad-byte aligned, respectively.</span></span> <span data-ttu-id="38ac7-4428">Należy pamiętać, że przejściowy wskaźników (typ `*`) zawsze są wyrównane.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4428">Note that transient pointers (type `*`) are always aligned.</span></span>  
  
 <span data-ttu-id="38ac7-4429">Podczas wyrównanie `cpblk` instrukcji logicznie wymaga dwóch liczb (jeden dla źródła) i jeden dla miejsca docelowego, nie ma żadnego zauważalnego wpływu na wydajność jeśli tylko określono liczby.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4429">While the alignment for a `cpblk` instruction would logically require two numbers (one for the source and one for the destination), there is no noticeable impact on performance if only the lower number is specified.</span></span>  
  
 <span data-ttu-id="38ac7-4430">`unaligned` i `volatile` prefiksy można łączyć w jednej kolejności.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4430">The `unaligned` and `volatile` prefixes can be combined in either order.</span></span> <span data-ttu-id="38ac7-4431">Musi bezpośrednio poprzedzać `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, lub `cpblk` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4431">They must immediately precede a `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="38ac7-4432">Tylko <xref:System.Reflection.Emit.OpCodes.Volatile> prefiks jest dozwolony dla <xref:System.Reflection.Emit.OpCodes.Ldsfld> i <xref:System.Reflection.Emit.OpCodes.Stsfld> instrukcje.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4432">Only the <xref:System.Reflection.Emit.OpCodes.Volatile> prefix is allowed for the <xref:System.Reflection.Emit.OpCodes.Ldsfld> and <xref:System.Reflection.Emit.OpCodes.Stsfld> instructions.</span></span>  
  
 <span data-ttu-id="38ac7-4433">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenia metody można użyć `unaligned` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4433">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `unaligned` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4434">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4434">ILGenerator.Emit(OpCode, Label)</span></span>  
  
-   <span data-ttu-id="38ac7-4435">ILGenerator.Emit (Opcode, Byte)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4435">ILGenerator.Emit(Opcode, Byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unbox;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unbox" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unbox" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unbox As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unbox;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unbox : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unbox" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4436">Konwertuje opakowanego reprezentacja typu wartości do postaci rozpakowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4436">Converts the boxed representation of a value type to its unboxed form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4437">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4437">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4438">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4438">Format</span></span>|<span data-ttu-id="38ac7-4439">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4439">Assembly Format</span></span>|<span data-ttu-id="38ac7-4440">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4440">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4441">79 < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-4441">79 < `T` ></span></span>|<span data-ttu-id="38ac7-4442">unbox — `valType`</span><span class="sxs-lookup"><span data-stu-id="38ac7-4442">unbox `valType`</span></span>|<span data-ttu-id="38ac7-4443">Wyodrębnia dane typu wartość z `obj`, jego reprezentacja ramce.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4443">Extracts the value type data from `obj`, its boxed representation.</span></span>|  
  
 <span data-ttu-id="38ac7-4444">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4444">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-4445">Odwołanie do obiektu spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4445">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-4446">Odwołanie do obiektu jest zdjęte ze stosu ze stosu i rozpakowany do wskaźnika typu wartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4446">The object reference is popped from the stack and unboxed to a value type pointer.</span></span>  
  
3.  <span data-ttu-id="38ac7-4447">Wartość wskaźnika typu spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4447">The value type pointer is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-4448">Typ wartości ma dwa oddzielne reprezentacje w ramach wspólnej infrastruktury języka (CLI):</span><span class="sxs-lookup"><span data-stu-id="38ac7-4448">A value type has two separate representations within the Common Language Infrastructure (CLI):</span></span>  
  
-   <span data-ttu-id="38ac7-4449">"Raw" formularz używany, gdy typ wartości jest osadzony w innym obiekcie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4449">A 'raw' form used when a value type is embedded within another object.</span></span>  
  
-   <span data-ttu-id="38ac7-4450">Formy "opakowanej", gdzie dane w typ wartości jest opakowana (opakowany) do obiektu, może istnieć jako niezależne jednostki.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4450">A 'boxed' form, where the data in the value type is wrapped (boxed) into an object so it can exist as an independent entity.</span></span>  
  
 <span data-ttu-id="38ac7-4451">`unbox` Instrukcji konwertuje odwołanie do obiektu (typ `O`), opakowany reprezentacja typu wartości na wartość typu wskaźnik (wskaźnik zarządzanego typu `&`), jego rozpakowany formularza.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4451">The `unbox` instruction converts the object reference (type `O`), the boxed representation of a value type, to a value type pointer (a managed pointer, type `&`), its unboxed form.</span></span> <span data-ttu-id="38ac7-4452">Podana wartość typu (`valType`) jest token metadanych wskazujący typ zawartych w ramce obiektu typu wartości.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4452">The supplied value type (`valType`) is a metadata token indicating the type of value type contained within the boxed object.</span></span>  
  
 <span data-ttu-id="38ac7-4453">W odróżnieniu od <xref:System.Reflection.Emit.OpCodes.Box>, wymaganego do skopiowania typu wartości do użycia w obiekcie, `unbox` nie jest wymagane do skopiowania na wartość typu obiektu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4453">Unlike <xref:System.Reflection.Emit.OpCodes.Box>, which is required to make a copy of a value type for use in the object, `unbox` is not required to copy the value type from the object.</span></span> <span data-ttu-id="38ac7-4454">Zwykle po prostu oblicza adresu typu wartości, który jest już obecny w ramce obiektu.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4454">Typically it simply computes the address of the value type that is already present inside of the boxed object.</span></span>  
  
 <span data-ttu-id="38ac7-4455"><xref:System.InvalidCastException> jest generowany, jeśli obiekt nie jest opakowany jako `valType`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4455"><xref:System.InvalidCastException> is thrown if the object is not boxed as `valType`.</span></span>  
  
 <span data-ttu-id="38ac7-4456"><xref:System.NullReferenceException> jest generowany, gdy odwołanie do obiektu jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4456"><xref:System.NullReferenceException> is thrown if the object reference is a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-4457"><xref:System.TypeLoadException> jest generowany, jeśli typ wartości `valType` nie można odnaleźć.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4457"><xref:System.TypeLoadException> is thrown if the value type `valType` cannot be found.</span></span> <span data-ttu-id="38ac7-4458">To jest zwykle wykrycie instrukcje Microsoft języka pośredniego (MSIL) są konwertowane do kodu natywnego, a nie w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4458">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="38ac7-4459">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `unbox` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4459">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `unbox` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4460">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4460">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox_Any">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unbox_Any;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unbox_Any" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unbox_Any" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unbox_Any As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unbox_Any;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unbox_Any : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unbox_Any" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4461">Konwertuje opakowanego reprezentacja typu określonego w instrukcji do postaci rozpakowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4461">Converts the boxed representation of a type specified in the instruction to its unboxed form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4462">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu język pośredni (MSIL) firmy Microsoft, wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4462">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4463">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4463">Format</span></span>|<span data-ttu-id="38ac7-4464">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4464">Assembly Format</span></span>|<span data-ttu-id="38ac7-4465">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4465">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4466">A5 < `T` ></span><span class="sxs-lookup"><span data-stu-id="38ac7-4466">A5 < `T` ></span></span>|<span data-ttu-id="38ac7-4467">unbox.any `typeTok`</span><span class="sxs-lookup"><span data-stu-id="38ac7-4467">unbox.any `typeTok`</span></span>|<span data-ttu-id="38ac7-4468">Wyodrębnianie danych z `obj`, jego reprezentacja ramce.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4468">Extract the data from `obj`, its boxed representation.</span></span>|  
  
 <span data-ttu-id="38ac7-4469">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4469">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-4470">Odwołanie do obiektu `obj` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4470">An object reference `obj` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-4471">Odwołanie do obiektu jest zdjęte ze stosu ze stosu i rozpakowany na typ określony w instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4471">The object reference is popped from the stack and unboxed to the type specified in the instruction.</span></span>  
  
3.  <span data-ttu-id="38ac7-4472">Wynikowy typ odwołanie lub wartość obiektu spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4472">The resulting object reference or value type is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-4473">Gdy jest stosowany do formy opakowanej typu wartości `unbox.any` instrukcji wyodrębnianie wartości zawartych w `obj` (typu `O`) i dlatego jest odpowiednikiem `unbox` następuje `ldobj`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4473">When applied to the boxed form of a value type, the `unbox.any` instruction extracts the value contained within `obj` (of type `O`), and is therefore equivalent to `unbox` followed by `ldobj`.</span></span>  
  
 <span data-ttu-id="38ac7-4474">Gdy jest stosowany do typu odwołania `unbox.any` instrukcji ma ten sam efekt co `castclass` `typeTok`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4474">When applied to a reference type, the `unbox.any` instruction has the same effect as `castclass` `typeTok`.</span></span>  
  
 <span data-ttu-id="38ac7-4475">Jeśli argument `typeTok` jest parametr typu ogólnego, a następnie zachowania w czasie wykonywania jest określana przez typ określony dla parametru typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4475">If the operand `typeTok` is a generic type parameter, then the runtime behavior is determined by the type that is specified for that generic type parameter.</span></span>  
  
 <span data-ttu-id="38ac7-4476"><xref:System.InvalidCastException> wygenerowany, jeśli `obj` nie jest typem ramce.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4476"><xref:System.InvalidCastException> is thrown if `obj` is not a boxed type.</span></span>  
  
 <span data-ttu-id="38ac7-4477"><xref:System.NullReferenceException> wygenerowany, jeśli `obj` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4477"><xref:System.NullReferenceException> is thrown if `obj` is a null reference.</span></span>  
  
 <span data-ttu-id="38ac7-4478">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `unbox.any` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4478">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `unbox.any` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4479">ILGenerator.Emit (OpCode, typ)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4479">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Volatile">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Volatile;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Volatile" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Volatile" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Volatile As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Volatile;" />
      <MemberSignature Language="F#" Value=" staticval mutable Volatile : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Volatile" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4480">Określa, że adres obecnie nad stosu oceny może być nietrwałe i wyników odczytu lokalizacji nie można buforować lub w wielu sklepach do tej lokalizacji nie można pominąć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4480">Specifies that an address currently atop the evaluation stack might be volatile, and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4481">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4481">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4482">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4482">Format</span></span>|<span data-ttu-id="38ac7-4483">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4483">Assembly Format</span></span>|<span data-ttu-id="38ac7-4484">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4484">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4485">FE 13</span><span class="sxs-lookup"><span data-stu-id="38ac7-4485">FE 13</span></span>|<span data-ttu-id="38ac7-4486">volatile.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4486">volatile.</span></span>|<span data-ttu-id="38ac7-4487">Wskazuje, że odwołanie do wskaźnika kolejnych jest nietrwały.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4487">Indicates that the subsequent pointer reference is volatile.</span></span>|  
  
 <span data-ttu-id="38ac7-4488">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4488">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-4489">Adres spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4489">An address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-4490">`volatile`.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4490">`volatile`.</span></span> <span data-ttu-id="38ac7-4491">Określa, czy adres jest adresem volatile (to znaczy go można odwoływać się zewnętrznie w bieżącym wątku wykonywania) oraz wynikiem odczytu lokalizacji nie można buforować lub w wielu sklepach do tej lokalizacji nie można pominąć.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4491">specifies that the address is a volatile address (that is, it can be referenced externally to the current thread of execution) and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</span></span> <span data-ttu-id="38ac7-4492">Oznaczenie dostępu zgodnie z `volatile` ma wpływ tylko z jednym dostępu; innych operacji uzyskania dostępu do tej samej lokalizacji, które muszą być oznaczone oddzielnie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4492">Marking an access as `volatile` affects only that single access; other accesses to the same location must be marked separately.</span></span> <span data-ttu-id="38ac7-4493">Dostęp do lokalizacji nietrwałe nie trzeba przeprowadzać atomowo.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4493">Access to volatile locations need not be performed atomically.</span></span>  
  
 <span data-ttu-id="38ac7-4494"><xref:System.Reflection.Emit.OpCodes.Unaligned> i `volatile` prefiksy można łączyć w jednej kolejności.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4494">The <xref:System.Reflection.Emit.OpCodes.Unaligned> and `volatile` prefixes can be combined in either order.</span></span> <span data-ttu-id="38ac7-4495">Musi bezpośrednio poprzedzać `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, lub `cpblk` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4495">They must immediately precede a `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="38ac7-4496">Tylko `volatile` prefiks jest dozwolony dla <xref:System.Reflection.Emit.OpCodes.Ldsfld> i <xref:System.Reflection.Emit.OpCodes.Stsfld> instrukcje.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4496">Only the `volatile` prefix is allowed for the <xref:System.Reflection.Emit.OpCodes.Ldsfld> and <xref:System.Reflection.Emit.OpCodes.Stsfld> instructions.</span></span>  
  
 <span data-ttu-id="38ac7-4497">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `volatile` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4497">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `volatile` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4498">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4498">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Xor;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Xor" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Xor" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Xor As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Xor;" />
      <MemberSignature Language="F#" Value=" staticval mutable Xor : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Xor" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="38ac7-4499">Oblicza iloczynu bitowego XOR górnej wartości na stosie oceny wypychanie wyników na stosie oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38ac7-4499">Computes the bitwise XOR of the top two values on the evaluation stack, pushing the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38ac7-4500">W poniższej tabeli wymieniono szesnastkowy instrukcję i plik formatu zestawu Microsoft języka pośredniego (MSIL), wraz z podsumowaniem krótki odwołania:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4500">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="38ac7-4501">Format</span><span class="sxs-lookup"><span data-stu-id="38ac7-4501">Format</span></span>|<span data-ttu-id="38ac7-4502">Format zestawu</span><span class="sxs-lookup"><span data-stu-id="38ac7-4502">Assembly Format</span></span>|<span data-ttu-id="38ac7-4503">Opis</span><span class="sxs-lookup"><span data-stu-id="38ac7-4503">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="38ac7-4504">61</span><span class="sxs-lookup"><span data-stu-id="38ac7-4504">61</span></span>|<span data-ttu-id="38ac7-4505">xor</span><span class="sxs-lookup"><span data-stu-id="38ac7-4505">xor</span></span>|<span data-ttu-id="38ac7-4506">Oblicza iloczynu bitowego XOR z dwóch wartości liczby całkowitej i zwraca liczbę całkowitą.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4506">Computes the bitwise XOR of two integer values and returns an integer.</span></span>|  
  
 <span data-ttu-id="38ac7-4507">Zachowanie przejściowe stosu, w kolejności sekwencyjnej, jest:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4507">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="38ac7-4508">`value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4508">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="38ac7-4509">`value2` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4509">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="38ac7-4510">`value2` i `value1` są zdjęte ze stosu ze stosu i ich bitowego XOR obliczana.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4510">`value2` and `value1` are popped from the stack and their bitwise XOR computed.</span></span>  
  
4.  <span data-ttu-id="38ac7-4511">Iloczynu bitowego XOR z `value2` i `value1` spoczywa na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4511">The bitwise XOR of `value2` and `value1` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="38ac7-4512">`xor` Instrukcji oblicza iloczynu bitowego XOR z dwóch pierwszych wartości na stosie i pozostawienie wynik na stosie.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4512">The `xor` instruction computes the bitwise XOR of the top two values on the stack and leaves the result on the stack.</span></span>  
  
 <span data-ttu-id="38ac7-4513">`Xor` jest operacją określonej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="38ac7-4513">`Xor` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="38ac7-4514">Następujące <xref:System.Reflection.Emit.ILGenerator.Emit%2A> przeciążenie metody można użyć `xor` opcode:</span><span class="sxs-lookup"><span data-stu-id="38ac7-4514">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `xor` opcode:</span></span>  
  
-   <span data-ttu-id="38ac7-4515">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="38ac7-4515">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>