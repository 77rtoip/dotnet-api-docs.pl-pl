<Type Name="DynamicMethod" FullName="System.Reflection.Emit.DynamicMethod">
  <Metadata><Meta Name="ms.openlocfilehash" Value="13b1d9daf4a4d7aae5b5478565ec2459bbd08759" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69070983" /></Metadata><TypeSignature Language="C#" Value="public sealed class DynamicMethod : System.Reflection.MethodInfo" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DynamicMethod extends System.Reflection.MethodInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.DynamicMethod" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DynamicMethod&#xA;Inherits MethodInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicMethod sealed : System::Reflection::MethodInfo" />
  <TypeSignature Language="F#" Value="type DynamicMethod = class&#xA;    inherit MethodInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MethodInfo</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="81a83-101">Definiuje i reprezentuje metodę dynamiczną, którą można kompilować, wykonać i odrzucić.</span><span class="sxs-lookup"><span data-stu-id="81a83-101">Defines and represents a dynamic method that can be compiled, executed, and discarded.</span></span> <span data-ttu-id="81a83-102">Metody odrzucane są dostępne do wyrzucania elementów bezużytecznych.</span><span class="sxs-lookup"><span data-stu-id="81a83-102">Discarded methods are available for garbage collection.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-103">Można użyć <xref:System.Reflection.Emit.DynamicMethod> klasy do generowania i wykonywania metody w czasie wykonywania bez konieczności generowania dynamicznego zestawu i typu dynamicznego, aby zawierał metodę.</span><span class="sxs-lookup"><span data-stu-id="81a83-103">You can use the <xref:System.Reflection.Emit.DynamicMethod> class to generate and execute a method at run time, without having to generate a dynamic assembly and a dynamic type to contain the method.</span></span> <span data-ttu-id="81a83-104">Kod wykonywalny utworzony przez kompilator just-in-Time (JIT) jest odzyskiwany w momencie <xref:System.Reflection.Emit.DynamicMethod> odzyskiwania obiektu.</span><span class="sxs-lookup"><span data-stu-id="81a83-104">The executable code created by the just-in-time (JIT) compiler is reclaimed when the <xref:System.Reflection.Emit.DynamicMethod> object is reclaimed.</span></span> <span data-ttu-id="81a83-105">Metody dynamiczne to najbardziej wydajny sposób generowania i wykonywania małych ilości kodu.</span><span class="sxs-lookup"><span data-stu-id="81a83-105">Dynamic methods are the most efficient way to generate and execute small amounts of code.</span></span>  
  
 <span data-ttu-id="81a83-106">Metoda dynamiczna może być anonimowo hostowana lub może być logicznie skojarzona z modułem lub typem.</span><span class="sxs-lookup"><span data-stu-id="81a83-106">A dynamic method can be anonymously hosted, or it can be logically associated with a module or with a type.</span></span>  
  
-   <span data-ttu-id="81a83-107">Jeśli metoda dynamiczna jest anonimowo hostowana, znajduje się w zestawie dostarczonym przez system i dlatego jest odizolowana od innego kodu.</span><span class="sxs-lookup"><span data-stu-id="81a83-107">If the dynamic method is anonymously hosted, it is located in a system-provided assembly, and therefore is isolated from other code.</span></span> <span data-ttu-id="81a83-108">Domyślnie nie ma dostępu do żadnych danych niepublicznych.</span><span class="sxs-lookup"><span data-stu-id="81a83-108">By default, it does not have access to any non-public data.</span></span> <span data-ttu-id="81a83-109">Anonimowo obsługiwana metoda dynamiczna może mieć ograniczoną zdolność do pomijania sprawdzania widoczności kompilatora JIT, jeśli został on udzielony <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> z flagą.</span><span class="sxs-lookup"><span data-stu-id="81a83-109">An anonymously hosted dynamic method can have restricted ability to skip the JIT compiler's visibility checks, if it has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="81a83-110">Poziom zaufania zestawu, którego niepubliczne składowe są dostępne przez metodę dynamiczną, musi być równy lub podzestawem poziomu zaufania stosu wywołań, który emituje metodę dynamiczną.</span><span class="sxs-lookup"><span data-stu-id="81a83-110">The trust level of the assembly whose non-public members are accessed by the dynamic method must be equal to, or a subset of, the trust level of the call stack that emitted the dynamic method.</span></span> <span data-ttu-id="81a83-111">Aby uzyskać więcej informacji na temat anonimowo obsługiwanych metod dynamicznych [, zobacz Przewodnik: Emitowanie kodu w scenariuszach](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md)częściowej relacji zaufania.</span><span class="sxs-lookup"><span data-stu-id="81a83-111">For more information about anonymously hosted dynamic methods, see [Walkthrough: Emitting Code in Partial Trust Scenarios](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md).</span></span>  
  
-   <span data-ttu-id="81a83-112">Jeśli metoda dynamiczna jest skojarzona z określonym modułem, metoda dynamiczna jest efektywnie globalnie dla tego modułu.</span><span class="sxs-lookup"><span data-stu-id="81a83-112">If the dynamic method is associated with a module that you specify, the dynamic method is effectively global to that module.</span></span> <span data-ttu-id="81a83-113">Może uzyskać dostęp do wszystkich typów w module i wszystkich `internal` elementów`Friend` członkowskich (w Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="81a83-113">It can access all types in the module and all `internal` (`Friend` in Visual Basic) members of the types.</span></span> <span data-ttu-id="81a83-114">Można skojarzyć metodę dynamiczną z dowolnym modułem, niezależnie od tego, czy utworzono moduł, pod warunkiem, że żądanie <xref:System.Security.Permissions.ReflectionPermission> dla <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> z flagą może być spełnione przez stos wywołań, który zawiera kod.</span><span class="sxs-lookup"><span data-stu-id="81a83-114">You can associate a dynamic method with any module, regardless of whether you created the module, provided that a demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag can be satisfied by the call stack that includes your code.</span></span> <span data-ttu-id="81a83-115"><xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> Jeśli flaga jest uwzględniona w przystawce, metoda dynamiczna może pominąć sprawdzanie widoczności kompilatora JIT i uzyskać dostęp do prywatnych danych wszystkich typów zadeklarowanych w module lub w dowolnym innym module w dowolnym zestawie.</span><span class="sxs-lookup"><span data-stu-id="81a83-115">If the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag is included in the grant, the dynamic method can skip the JIT compiler's visibility checks and access the private data of all types declared in the module or in any other module in any assembly.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="81a83-116">Po określeniu modułu, z którym skojarzona jest metoda dynamiczna, ten moduł nie może znajdować się w zestawie dostarczonym przez system, który jest używany do anonimowego hostingu.</span><span class="sxs-lookup"><span data-stu-id="81a83-116">When you specify the module with which a dynamic method is associated, that module must not be in the system-provided assembly that is used for anonymous hosting.</span></span>  
  
-   <span data-ttu-id="81a83-117">Jeśli metoda dynamiczna jest skojarzona z określonym typem, ma dostęp do wszystkich elementów członkowskich tego typu, niezależnie od poziomu dostępu.</span><span class="sxs-lookup"><span data-stu-id="81a83-117">If the dynamic method is associated with a type that you specify, it has access to all members of the type, regardless of access level.</span></span> <span data-ttu-id="81a83-118">Ponadto sprawdzanie widoczności JIT można pominąć.</span><span class="sxs-lookup"><span data-stu-id="81a83-118">In addition, JIT visibility checks can be skipped.</span></span> <span data-ttu-id="81a83-119">Dzięki temu metoda dynamiczna uzyskuje dostęp do prywatnych danych innych typów zadeklarowanych w tym samym module lub w dowolnym innym module w dowolnym zestawie.</span><span class="sxs-lookup"><span data-stu-id="81a83-119">This gives the dynamic method access to the private data of other types declared in the same module or in any other module in any assembly.</span></span> <span data-ttu-id="81a83-120">Można skojarzyć metodę dynamiczną z dowolnym typem, ale kod musi być przyznany <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> zarówno flagom, jak <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> i.</span><span class="sxs-lookup"><span data-stu-id="81a83-120">You can associate a dynamic method with any type, but your code must be granted <xref:System.Security.Permissions.ReflectionPermission> with both the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> and <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flags.</span></span>  
  
 <span data-ttu-id="81a83-121">W poniższej tabeli przedstawiono, które typy i elementy członkowskie są dostępne dla anonimowo hostowanej metody dynamicznej z i bez kontroli widoczności JIT, w zależności od <xref:System.Security.Permissions.ReflectionPermission> tego <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> , czy flaga jest przyznana.</span><span class="sxs-lookup"><span data-stu-id="81a83-121">The following table shows which types and members are accessible to an anonymously hosted dynamic method, with and without JIT visibility checks, depending on whether <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag is granted.</span></span>  
  
||<span data-ttu-id="81a83-122">Konieczności<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span><span class="sxs-lookup"><span data-stu-id="81a83-122">Without <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span></span>|<span data-ttu-id="81a83-123">Się<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span><span class="sxs-lookup"><span data-stu-id="81a83-123">With <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span></span>|  
|-|-|-|  
|<span data-ttu-id="81a83-124">Bez pomijania sprawdzania widoczności JIT</span><span class="sxs-lookup"><span data-stu-id="81a83-124">Without skipping JIT visibility checks</span></span>|<span data-ttu-id="81a83-125">Publiczne składowe typów publicznych w dowolnym zestawie.</span><span class="sxs-lookup"><span data-stu-id="81a83-125">Public members of public types in any assembly.</span></span>|<span data-ttu-id="81a83-126">Publiczne składowe typów publicznych w dowolnym zestawie.</span><span class="sxs-lookup"><span data-stu-id="81a83-126">Public members of public types in any assembly.</span></span>|  
|<span data-ttu-id="81a83-127">Pomijanie sprawdzania widoczności JIT, z ograniczeniami</span><span class="sxs-lookup"><span data-stu-id="81a83-127">Skipping JIT visibility checks, with restrictions</span></span>|<span data-ttu-id="81a83-128">Publiczne składowe typów publicznych w dowolnym zestawie.</span><span class="sxs-lookup"><span data-stu-id="81a83-128">Public members of public types in any assembly.</span></span>|<span data-ttu-id="81a83-129">Wszystkie elementy członkowskie wszystkich typów, tylko w zestawach, których poziomy zaufania są równe lub mniejsze niż poziom zaufania zestawu, który emituje metodę dynamiczną.</span><span class="sxs-lookup"><span data-stu-id="81a83-129">All members of all types, only in assemblies whose trust levels are equal to or less than the trust level of the assembly that emitted the dynamic method.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="81a83-130">Przed, emitujący kod wymagany <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flagą. [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</span><span class="sxs-lookup"><span data-stu-id="81a83-130">Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], emitting code required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="81a83-131">To uprawnienie jest uwzględniane domyślnie w zestawach uprawnień o nazwie FullTrust i LocalIntranet, ale nie w zestawie uprawnień internetowych.</span><span class="sxs-lookup"><span data-stu-id="81a83-131">This permission is included by default in the FullTrust and LocalIntranet named permission sets, but not in the Internet permission set.</span></span> <span data-ttu-id="81a83-132">W związku z tym, we wcześniejszych [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] wersjach biblioteki można używać tylko z uprawnieniami internetowymi, jeśli <xref:System.Security.SecurityCriticalAttribute> ma ona <xref:System.Security.PermissionSet.Assert%2A> atrybut i wykonuje także dla <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>.</span><span class="sxs-lookup"><span data-stu-id="81a83-132">Therefore, in earlier versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] a library can be used with Internet permissions only if it has the <xref:System.Security.SecurityCriticalAttribute> attribute and also executes an <xref:System.Security.PermissionSet.Assert%2A> for <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>.</span></span> <span data-ttu-id="81a83-133">Takie biblioteki wymagają starannej oceny zabezpieczeń, ponieważ błędy kodowania mogą spowodować powstanie luk w zabezpieczeniach.</span><span class="sxs-lookup"><span data-stu-id="81a83-133">Such libraries require careful security review because coding errors could result in security holes.</span></span> <span data-ttu-id="81a83-134">[!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] Zezwala na emitowanie kodu w scenariuszach częściowej relacji zaufania bez wydawania żadnych wymagań dotyczących zabezpieczeń, ponieważ generowanie kodu nie jest z założenia uprzywilejowanej operacji.</span><span class="sxs-lookup"><span data-stu-id="81a83-134">The [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] allows code to be emitted in partial trust scenarios without issuing any security demands, because generating code is not inherently a privileged operation.</span></span> <span data-ttu-id="81a83-135">Oznacza to, że wygenerowany kod nie ma więcej uprawnień niż zestaw, który emituje go.</span><span class="sxs-lookup"><span data-stu-id="81a83-135">That is, the generated code has no more permissions than the assembly that emits it.</span></span> <span data-ttu-id="81a83-136">Pozwala to na używanie bibliotek, które emitują kod jako przezroczysty i eliminuje konieczność potwierdzenia <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>, co upraszcza zadanie pisania bezpiecznej biblioteki.</span><span class="sxs-lookup"><span data-stu-id="81a83-136">This allows libraries that emit code to be security transparent and removes the need to assert <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>, which simplifies the task of writing a secure library.</span></span> <span data-ttu-id="81a83-137">Aby można było korzystać z tej funkcji, aplikacja powinna [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] być ukierunkowana na lub później.</span><span class="sxs-lookup"><span data-stu-id="81a83-137">To use this feature, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 <span data-ttu-id="81a83-138">W poniższej tabeli przedstawiono, które typy i elementy członkowskie są dostępne dla metody dynamicznej skojarzonej z modułem lub z typem w module.</span><span class="sxs-lookup"><span data-stu-id="81a83-138">The following table shows which types and members are accessible to a dynamic method that is associated with a module or with a type in a module.</span></span>  
  
||<span data-ttu-id="81a83-139">Skojarzone z modułem</span><span class="sxs-lookup"><span data-stu-id="81a83-139">Associated with module</span></span>|<span data-ttu-id="81a83-140">Skojarzone z typem</span><span class="sxs-lookup"><span data-stu-id="81a83-140">Associated with type</span></span>|  
|-|-|-|  
|<span data-ttu-id="81a83-141">Bez pomijania sprawdzania widoczności JIT</span><span class="sxs-lookup"><span data-stu-id="81a83-141">Without skipping JIT visibility checks</span></span>|<span data-ttu-id="81a83-142">Publiczne i wewnętrzne składowe publicznych, wewnętrznych i prywatnych typów w module.</span><span class="sxs-lookup"><span data-stu-id="81a83-142">Public and internal members of public, internal, and private types in the module.</span></span><br /><br /> <span data-ttu-id="81a83-143">Publiczne składowe typów publicznych w dowolnym zestawie.</span><span class="sxs-lookup"><span data-stu-id="81a83-143">Public members of public types in any assembly.</span></span>|<span data-ttu-id="81a83-144">Wszystkie elementy członkowskie skojarzonego typu.</span><span class="sxs-lookup"><span data-stu-id="81a83-144">All members of the associated type.</span></span> <span data-ttu-id="81a83-145">Publiczne i wewnętrzne elementy członkowskie wszystkich innych typów w module.</span><span class="sxs-lookup"><span data-stu-id="81a83-145">Public and internal members of all the other types in the module.</span></span><br /><br /> <span data-ttu-id="81a83-146">Publiczne składowe typów publicznych w dowolnym zestawie.</span><span class="sxs-lookup"><span data-stu-id="81a83-146">Public members of public types in any assembly.</span></span>|  
|<span data-ttu-id="81a83-147">Pomijanie sprawdzania widoczności JIT</span><span class="sxs-lookup"><span data-stu-id="81a83-147">Skipping JIT visibility checks</span></span>|<span data-ttu-id="81a83-148">Wszystkie elementy członkowskie wszystkich typów w dowolnym zestawie.</span><span class="sxs-lookup"><span data-stu-id="81a83-148">All members of all types in any assembly.</span></span>|<span data-ttu-id="81a83-149">Wszystkie elementy członkowskie wszystkich typów w dowolnym zestawie.</span><span class="sxs-lookup"><span data-stu-id="81a83-149">All members of all types in any assembly.</span></span>|  
  
 <span data-ttu-id="81a83-150">Metoda dynamiczna, która jest skojarzona z modułem, ma uprawnienia tego modułu.</span><span class="sxs-lookup"><span data-stu-id="81a83-150">A dynamic method that is associated with a module has the permissions of that module.</span></span> <span data-ttu-id="81a83-151">Metoda dynamiczna, która jest skojarzona z typem, ma uprawnienia do modułu zawierającego ten typ.</span><span class="sxs-lookup"><span data-stu-id="81a83-151">A dynamic method that is associated with a type has the permissions of the module containing that type.</span></span>  
  
 <span data-ttu-id="81a83-152">Metody dynamiczne i ich parametry nie muszą być nazwane, ale można określić nazwy, które mają być pomocne w debugowaniu.</span><span class="sxs-lookup"><span data-stu-id="81a83-152">Dynamic methods and their parameters do not have to be named, but you can specify names to assist in debugging.</span></span> <span data-ttu-id="81a83-153">Atrybuty niestandardowe nie są obsługiwane w metodach dynamicznych ani ich parametrach.</span><span class="sxs-lookup"><span data-stu-id="81a83-153">Custom attributes are not supported on dynamic methods or their parameters.</span></span>  
  
 <span data-ttu-id="81a83-154">Chociaż metody dynamiczne są `static` metodami`Shared` (metodami w Visual Basic), reguły swobodne dla powiązania [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] delegata wprowadzone w metodzie Zezwalaj, aby można było powiązać metodę dynamiczną z obiektem, tak że działa jak metoda wystąpienia, gdy wywoływana przy użyciu tego wystąpienia delegata.</span><span class="sxs-lookup"><span data-stu-id="81a83-154">Although dynamic methods are `static` methods (`Shared` methods in Visual Basic), the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] allow a dynamic method to be bound to an object, so that it acts like an instance method when called using that delegate instance.</span></span> <span data-ttu-id="81a83-155">Przykład pokazujący, że jest to przewidziane dla <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> przeciążenia metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-155">An example that demonstrates this is provided for the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81a83-156">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]W metodach dynamicznych nie obsługują informacji o symbolach, takich jak nazwy zmiennych lokalnych i mapowanie numerów wierszy.</span><span class="sxs-lookup"><span data-stu-id="81a83-156">In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], dynamic methods do not support symbol information, that is, local variable names and line-number mapping.</span></span> <span data-ttu-id="81a83-157">To ograniczenie może zostać usunięte w przyszłej wersji.</span><span class="sxs-lookup"><span data-stu-id="81a83-157">This limitation might be removed in a future version.</span></span> <span data-ttu-id="81a83-158">Podczas programowania można <xref:System.Reflection.Emit.AssemblyBuilder> użyć programu, aby uprościć debugowanie wygenerowanego języka pośredniego firmy Microsoft (MSIL), a następnie przełączyć się na metody <xref:System.Reflection.Emit.ILGenerator> dynamiczne podczas końcowego wdrażania, ponieważ wywołania są takie same w obu przypadkach.</span><span class="sxs-lookup"><span data-stu-id="81a83-158">You can use <xref:System.Reflection.Emit.AssemblyBuilder> during development to simplify debugging the generated Microsoft intermediate language (MSIL), and then switch to dynamic methods during final deployment, because the <xref:System.Reflection.Emit.ILGenerator> calls are the same in both cases.</span></span>  
  
## <a name="verification"></a><span data-ttu-id="81a83-159">Weryfikacja</span><span class="sxs-lookup"><span data-stu-id="81a83-159">Verification</span></span>  
 <span data-ttu-id="81a83-160">Poniższa lista zawiera podsumowanie warunków, w których metody dynamiczne mogą zawierać kod niemożliwy do zweryfikowania.</span><span class="sxs-lookup"><span data-stu-id="81a83-160">The following list summarizes the conditions under which dynamic methods can contain unverifiable code.</span></span> <span data-ttu-id="81a83-161">(Na przykład metoda dynamiczna jest niemożliwy do sprawdzenia, jeśli <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> jej właściwość jest ustawiona `false`na.)</span><span class="sxs-lookup"><span data-stu-id="81a83-161">(For example, a dynamic method is unverifiable if its <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property is set to `false`.)</span></span>  
  
-   <span data-ttu-id="81a83-162">Metoda dynamiczna, która jest skojarzona z zestawem o znaczeniu krytycznym, ma również krytyczne znaczenie dla zabezpieczeń i może pominąć weryfikację.</span><span class="sxs-lookup"><span data-stu-id="81a83-162">A dynamic method that is associated with a security-critical assembly is also security-critical, and can skip verification.</span></span> <span data-ttu-id="81a83-163">Na przykład zestaw bez atrybutów zabezpieczeń, który jest uruchamiany jako aplikacja klasyczna, jest traktowany jako krytyczny dla zabezpieczeń przez środowisko uruchomieniowe.</span><span class="sxs-lookup"><span data-stu-id="81a83-163">For example, an assembly without security attributes that is run as a desktop application is treated as security-critical by the runtime.</span></span> <span data-ttu-id="81a83-164">W przypadku kojarzenia metody dynamicznej z zestawem metoda dynamiczna może zawierać kod niemożliwy do zweryfikowania.</span><span class="sxs-lookup"><span data-stu-id="81a83-164">If you associate a dynamic method with the assembly, the dynamic method can contain unverifiable code.</span></span>  
  
-   <span data-ttu-id="81a83-165">Jeśli metoda dynamiczna, która zawiera kod niemożliwy do zweryfikowania, jest skojarzona z zestawem z przezroczystością poziomu 1, kompilator just-in-Time (JIT) wprowadza żądanie zabezpieczeń.</span><span class="sxs-lookup"><span data-stu-id="81a83-165">If a dynamic method that contains unverifiable code is associated with an assembly that has level 1 transparency, the just-in-time (JIT) compiler injects a security demand.</span></span> <span data-ttu-id="81a83-166">Żądanie powiedzie się tylko wtedy, gdy metoda dynamiczna jest wykonywana przez w pełni zaufany kod.</span><span class="sxs-lookup"><span data-stu-id="81a83-166">The demand succeeds only if the dynamic method is executed by fully trusted code.</span></span> <span data-ttu-id="81a83-167">Zobacz [kod przezroczysty zabezpieczeń, poziom 1](~/docs/framework/misc/security-transparent-code-level-1.md).</span><span class="sxs-lookup"><span data-stu-id="81a83-167">See [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md).</span></span>  
  
-   <span data-ttu-id="81a83-168">Jeśli metoda dynamiczna, która zawiera kod niemożliwy do zweryfikowania, jest skojarzona z zestawem, który ma przezroczystość poziomu 2 (na przykład mscorlib. dll), zgłasza wyjątek (wprowadzony przez kompilator JIT), zamiast korzystać z żądania zabezpieczeń.</span><span class="sxs-lookup"><span data-stu-id="81a83-168">If a dynamic method that contains unverifiable code is associated with an assembly that has level 2 transparency (such as mscorlib.dll), it throws an exception (injected by the JIT compiler) instead of making a security demand.</span></span> <span data-ttu-id="81a83-169">Zobacz [kod przezroczysty zabezpieczeń, poziom 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="81a83-169">See [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
-   <span data-ttu-id="81a83-170">Anonimowo obsługiwana metoda dynamiczna, która zawiera kod niemożliwy do zweryfikowania zawsze zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="81a83-170">An anonymously hosted dynamic method that contains unverifiable code always throws an exception.</span></span> <span data-ttu-id="81a83-171">Może nigdy nie pominąć weryfikacji, nawet jeśli jest tworzona i wykonywana przez w pełni zaufany kod.</span><span class="sxs-lookup"><span data-stu-id="81a83-171">It can never skip verification, even if it is created and executed by fully trusted code.</span></span>  
  
 <span data-ttu-id="81a83-172">Wyjątek, który jest generowany dla kodu niemożliwego do sprawdzenia, różni się w zależności od sposobu wywołania metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-172">The exception that is thrown for unverifiable code varies depending on the way the dynamic method is invoked.</span></span> <span data-ttu-id="81a83-173">Jeśli wywołasz metodę dynamiczną przy użyciu delegata zwróconego z <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> metody <xref:System.Security.VerificationException> , jest zgłaszany.</span><span class="sxs-lookup"><span data-stu-id="81a83-173">If you invoke a dynamic method by using a delegate returned from the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method, a <xref:System.Security.VerificationException> is thrown.</span></span> <span data-ttu-id="81a83-174">W przypadku wywołania metody dynamicznej przy użyciu <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metody element <xref:System.Reflection.TargetInvocationException> jest generowany z wewnętrznym <xref:System.Security.VerificationException>.</span><span class="sxs-lookup"><span data-stu-id="81a83-174">If you invoke the dynamic method by using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, a <xref:System.Reflection.TargetInvocationException> is thrown with an inner <xref:System.Security.VerificationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81a83-175">Poniższy przykład kodu tworzy metodę dynamiczną, która przyjmuje dwa parametry.</span><span class="sxs-lookup"><span data-stu-id="81a83-175">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="81a83-176">Przykład emituje prostą treść funkcji, która drukuje pierwszy parametr do konsoli, a w przykładzie używa drugiego parametru jako wartości zwracanej metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-176">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="81a83-177">Przykład uzupełnia metodę przez utworzenie delegata, wywołuje delegata z różnymi parametrami i wreszcie wywołuje metodę dynamiczną przy użyciu <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-177">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.All#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.All#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="81a83-178">Instrukcje: Definiowanie i wykonywanie metod dynamicznych</span><span class="sxs-lookup"><span data-stu-id="81a83-178">How to: Define and Execute Dynamic Methods</span></span></related>
    <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="81a83-179">Problemy związane z zabezpieczeniami w emisji odbicia</span><span class="sxs-lookup"><span data-stu-id="81a83-179">Security Issues in Reflection Emit</span></span></related>
    <related type="Article" href="~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md"><span data-ttu-id="81a83-180">Przewodnik: Emitowanie kodu w scenariuszach częściowo zaufanych</span><span class="sxs-lookup"><span data-stu-id="81a83-180">Walkthrough: Emitting Code in Partial Trust Scenarios</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="81a83-181">Tworzy metodę dynamiczną.</span><span class="sxs-lookup"><span data-stu-id="81a83-181">Creates a dynamic method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="81a83-182">Nazwa metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-182">The name of the dynamic method.</span></span> <span data-ttu-id="81a83-183">Może to być ciąg o zerowej długości, ale nie może być <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-183">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="81a83-184">Obiekt, który określa zwracany typ metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma zwracanego typu. <see cref="T:System.Type" /></span><span class="sxs-lookup"><span data-stu-id="81a83-184">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="81a83-185">Tablica <see cref="T:System.Type" /> obiektów określająca typy parametrów metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma parametrów.</span><span class="sxs-lookup"><span data-stu-id="81a83-185">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <summary><span data-ttu-id="81a83-186">Inicjuje anonimowo hostowaną metodę dynamiczną, określając nazwę metody, typ zwracany i typy parametrów.</span><span class="sxs-lookup"><span data-stu-id="81a83-186">Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-187">Metoda dynamiczna tworzona przez ten konstruktor jest skojarzona z zestawem anonimowym, a nie istniejącym typem lub modułem.</span><span class="sxs-lookup"><span data-stu-id="81a83-187">The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</span></span> <span data-ttu-id="81a83-188">Zestaw anonimowy istnieje tylko w celu zapewnienia środowiska piaskownicy dla metod dynamicznych, czyli do izolowania ich od innego kodu.</span><span class="sxs-lookup"><span data-stu-id="81a83-188">The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</span></span> <span data-ttu-id="81a83-189">To środowisko umożliwia bezpieczne emitowanie i wykonywanie metody dynamicznej przy użyciu częściowo zaufanego kodu.</span><span class="sxs-lookup"><span data-stu-id="81a83-189">This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</span></span>  
  
 <span data-ttu-id="81a83-190">Ten konstruktor określa, że sprawdzanie widoczności just-in-Time (JIT) będzie wymuszane dla języka pośredniego firmy Microsoft (MSIL) metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-190">This constructor specifies that just-in-time (JIT) visibility checks will be enforced for the Microsoft intermediate language (MSIL) of the dynamic method.</span></span> <span data-ttu-id="81a83-191">Oznacza to, że kod w metodzie dynamicznej ma dostęp do publicznych metod klas publicznych.</span><span class="sxs-lookup"><span data-stu-id="81a83-191">That is, the code in the dynamic method has access to public methods of public classes.</span></span> <span data-ttu-id="81a83-192">Wyjątki są generowane, jeśli metoda próbuje uzyskać dostęp do typów lub elementów `private`członkowskich `protected`, które są`Friend` , lub `internal` (w Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="81a83-192">Exceptions are thrown if the method tries to access types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="81a83-193">Aby utworzyć metodę dynamiczną, która ma ograniczoną możliwość pomijania sprawdzania widoczności JIT, użyj <xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="81a83-193">To create a dynamic method that has restricted ability to skip JIT visibility checks, use the <xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29> constructor.</span></span>  
  
 <span data-ttu-id="81a83-194">Gdy tworzona jest anonimowo obsługiwana metoda dynamiczna, zostanie dołączony stos wywołań zestawu emitującego.</span><span class="sxs-lookup"><span data-stu-id="81a83-194">When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</span></span> <span data-ttu-id="81a83-195">Gdy wywoływana jest metoda, uprawnienia do emitowanego zestawu są używane zamiast uprawnień rzeczywistego obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="81a83-195">When the method is invoked, the permissions of the emitting assembly are used instead of the permissions of the actual caller.</span></span> <span data-ttu-id="81a83-196">W ten sposób metoda dynamiczna nie może zostać wykonana na wyższym poziomie uprawnień niż zestaw, który emituje go, nawet jeśli jest przenoszona do i wykonywany przez zestaw o wyższym poziomie zaufania.</span><span class="sxs-lookup"><span data-stu-id="81a83-196">Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</span></span>  
  
 <span data-ttu-id="81a83-197">Ten konstruktor określa atrybuty <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> metody i <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>i Konwencję <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>wywoływania.</span><span class="sxs-lookup"><span data-stu-id="81a83-197">This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and the calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81a83-198">Ten konstruktor został wprowadzony w [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub później.</span><span class="sxs-lookup"><span data-stu-id="81a83-198">This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81a83-199">Element <paramref name="parameterTypes" /> jest <see langword="null" /> lub. <see cref="T:System.Void" /></span><span class="sxs-lookup"><span data-stu-id="81a83-199">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="81a83-200"><paramref name="name" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-200"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="81a83-201"><paramref name="returnType" />jest typem, dla którego <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />wartość.</span><span class="sxs-lookup"><span data-stu-id="81a83-201"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="81a83-202">Instrukcje: Definiowanie i wykonywanie metod dynamicznych</span><span class="sxs-lookup"><span data-stu-id="81a83-202">How to: Define and Execute Dynamic Methods</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="81a83-203">Problemy związane z zabezpieczeniami w emisji odbicia</span><span class="sxs-lookup"><span data-stu-id="81a83-203">Security Issues in Reflection Emit</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md"><span data-ttu-id="81a83-204">Przewodnik: Emitowanie kodu w scenariuszach częściowo zaufanych</span><span class="sxs-lookup"><span data-stu-id="81a83-204">Walkthrough: Emitting Code in Partial Trust Scenarios</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, bool restrictedSkipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, bool restrictedSkipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), restrictedSkipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, bool restrictedSkipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, restrictedSkipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="restrictedSkipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="81a83-205">Nazwa metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-205">The name of the dynamic method.</span></span> <span data-ttu-id="81a83-206">Może to być ciąg o zerowej długości, ale nie może być <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-206">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="81a83-207">Obiekt, który określa zwracany typ metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma zwracanego typu. <see cref="T:System.Type" /></span><span class="sxs-lookup"><span data-stu-id="81a83-207">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="81a83-208">Tablica <see cref="T:System.Type" /> obiektów określająca typy parametrów metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma parametrów.</span><span class="sxs-lookup"><span data-stu-id="81a83-208">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="restrictedSkipVisibility"><span data-ttu-id="81a83-209"><see langword="true" />Aby pominąć sprawdzanie widoczności JIT dla typów i elementów członkowskich, do których uzyskuje dostęp MSIL metoda dynamiczna, z tym ograniczeniem: poziom zaufania zestawów, które zawierają te typy i elementy członkowskie, muszą być równe lub mniejsze niż poziom zaufania stosu wywołań, który emituje dynamiczne c — Metoda; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="81a83-209"><see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method, with this restriction: the trust level of the assemblies that contain those types and members must be equal to or less than the trust level of the call stack that emits the dynamic method; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="81a83-210">Inicjuje anonimowo hostowaną metodę dynamiczną, określając nazwę metody, zwracany typ, typy parametrów i czy testy widoczności just-in-Time (JIT) powinny zostać pominięte dla typów i elementów członkowskich, do których uzyskuje się dostęp za pomocą języka pośredniego firmy Microsoft (MSIL) Metoda dynamiczna.</span><span class="sxs-lookup"><span data-stu-id="81a83-210">Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-211">Metoda dynamiczna tworzona przez ten konstruktor jest skojarzona z zestawem anonimowym, a nie istniejącym typem lub modułem.</span><span class="sxs-lookup"><span data-stu-id="81a83-211">The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</span></span> <span data-ttu-id="81a83-212">Zestaw anonimowy istnieje tylko w celu zapewnienia środowiska piaskownicy dla metod dynamicznych, czyli do izolowania ich od innego kodu.</span><span class="sxs-lookup"><span data-stu-id="81a83-212">The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</span></span> <span data-ttu-id="81a83-213">To środowisko umożliwia bezpieczne emitowanie i wykonywanie metody dynamicznej przy użyciu częściowo zaufanego kodu.</span><span class="sxs-lookup"><span data-stu-id="81a83-213">This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</span></span>  
  
 <span data-ttu-id="81a83-214">Anonimowo hostowane metody dynamiczne nie mają automatycznego dostępu do żadnych typów lub elementów członkowskich, `private`które `protected`są, `internal` lub`Friend` (w Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="81a83-214">Anonymously hosted dynamic methods do not have automatic access to any types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="81a83-215">Różni się to od metod dynamicznych, które są skojarzone z istniejącym typem lub modułem, który ma dostęp do ukrytych elementów członkowskich w ich skojarzonym zakresie.</span><span class="sxs-lookup"><span data-stu-id="81a83-215">This is different from dynamic methods that are associated with an existing type or module, which have access to hidden members in their associated scope.</span></span>  
  
 <span data-ttu-id="81a83-216">`true` `private` `protected` `internal`Określ, czymetodadynamicznamauzyskiwaćdostępdotypówlubczłonków,któresą,lub.`restrictedSkipVisibility`</span><span class="sxs-lookup"><span data-stu-id="81a83-216">Specify `true` for `restrictedSkipVisibility` if your dynamic method has to access types or members that are `private`, `protected`, or `internal`.</span></span> <span data-ttu-id="81a83-217">Zapewnia to metodzie dynamicznej ograniczony dostęp do tych elementów członkowskich.</span><span class="sxs-lookup"><span data-stu-id="81a83-217">This gives the dynamic method restricted access to these members.</span></span> <span data-ttu-id="81a83-218">Oznacza to, że członkowie mogą uzyskać dostęp tylko w przypadku spełnienia następujących warunków:</span><span class="sxs-lookup"><span data-stu-id="81a83-218">That is, the members can be accessed only if the following conditions are met:</span></span>  
  
-   <span data-ttu-id="81a83-219">Elementy docelowe należą do zestawu, który ma poziom zaufania równy lub niższy niż stos wywołań, który emituje metodę dynamiczną.</span><span class="sxs-lookup"><span data-stu-id="81a83-219">The target members belong to an assembly that has a level of trust equal to or lower than the call stack that emits the dynamic method.</span></span>  
  
-   <span data-ttu-id="81a83-220">Stos wywołań, który emituje metodę dynamiczną, jest <xref:System.Security.Permissions.ReflectionPermission> przyznawany <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> z flagą.</span><span class="sxs-lookup"><span data-stu-id="81a83-220">The call stack that emits the dynamic method is granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="81a83-221">Jest to zawsze prawdziwe, gdy kod jest wykonywany z pełnym zaufaniem.</span><span class="sxs-lookup"><span data-stu-id="81a83-221">This is always true when the code is executed with full trust.</span></span> <span data-ttu-id="81a83-222">W przypadku częściowo zaufanego kodu ma to wartość true tylko wtedy, gdy host jawnie przyznaje uprawnienia.</span><span class="sxs-lookup"><span data-stu-id="81a83-222">For partially trusted code, it is true only if the host explicitly grants the permission.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="81a83-223">Jeśli uprawnienie nie zostało przyznane, wyjątek zabezpieczeń jest zgłaszany, gdy <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> jest wywoływana lub gdy wywoływana jest metoda dynamiczna, nie gdy ten konstruktor jest wywoływany.</span><span class="sxs-lookup"><span data-stu-id="81a83-223">If the permission has not been granted, a security exception is thrown when <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> is called or when the dynamic method is invoked, not when this constructor is called.</span></span> <span data-ttu-id="81a83-224">Do emisji metody dynamicznej nie są wymagane żadne specjalne uprawnienia.</span><span class="sxs-lookup"><span data-stu-id="81a83-224">No special permissions are required to emit the dynamic method.</span></span>  
  
 <span data-ttu-id="81a83-225">Na przykład metoda dynamiczna, która jest tworzona przy `restrictedSkipVisibility` użyciu zestawu `true` do, ma dostęp do prywatnego elementu członkowskiego dowolnego zestawu w stosie wywołań, jeśli przydzielono dostęp do elementu członkowskiego w ramach stosu wywołań.</span><span class="sxs-lookup"><span data-stu-id="81a83-225">For example, a dynamic method that is created with `restrictedSkipVisibility` set to `true` can access a private member of any assembly on the call stack if the call stack has been granted restricted member access.</span></span> <span data-ttu-id="81a83-226">Jeśli metoda dynamiczna jest tworzona przy użyciu częściowo zaufanego kodu w stosie wywołań, nie może uzyskać dostępu do prywatnej składowej typu [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] w zestawie, ponieważ takie zestawy są w pełni zaufane.</span><span class="sxs-lookup"><span data-stu-id="81a83-226">If the dynamic method is created with partially trusted code on the call stack, it cannot access a private member of a type in a [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] assembly, because such assemblies are fully trusted.</span></span>  
  
 <span data-ttu-id="81a83-227">Jeśli `restrictedSkipVisibility` jest`false`, sprawdzanie widoczności JIT jest wymuszane.</span><span class="sxs-lookup"><span data-stu-id="81a83-227">If `restrictedSkipVisibility` is `false`, JIT visibility checks are enforced.</span></span> <span data-ttu-id="81a83-228">Kod w metodzie dynamicznej ma dostęp do publicznych metod klas publicznych, a wyjątki są generowane, jeśli próbuje uzyskać dostęp do typów lub członków, które `private`są `protected`, lub `internal`.</span><span class="sxs-lookup"><span data-stu-id="81a83-228">The code in the dynamic method has access to public methods of public classes, and exceptions are thrown if it tries to access types or members that are `private`, `protected`, or `internal`.</span></span>  
  
 <span data-ttu-id="81a83-229">Gdy tworzona jest anonimowo obsługiwana metoda dynamiczna, zostanie dołączony stos wywołań zestawu emitującego.</span><span class="sxs-lookup"><span data-stu-id="81a83-229">When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</span></span> <span data-ttu-id="81a83-230">Gdy metoda jest wywoływana, są używane uprawnienia wysyłanego stosu wywołań zamiast uprawnień rzeczywistego obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="81a83-230">When the method is invoked, the permissions of the emitting call stack are used instead of the permissions of the actual caller.</span></span> <span data-ttu-id="81a83-231">W ten sposób metoda dynamiczna nie może zostać wykonana na wyższym poziomie uprawnień niż zestaw, który emituje go, nawet jeśli jest przenoszona do i wykonywany przez zestaw o wyższym poziomie zaufania.</span><span class="sxs-lookup"><span data-stu-id="81a83-231">Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</span></span>  
  
 <span data-ttu-id="81a83-232">Ten konstruktor określa atrybuty <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> metody i <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>i Konwencję <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>wywoływania.</span><span class="sxs-lookup"><span data-stu-id="81a83-232">This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and the calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81a83-233">Ten konstruktor został wprowadzony w [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub później.</span><span class="sxs-lookup"><span data-stu-id="81a83-233">This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81a83-234">Element <paramref name="parameterTypes" /> jest <see langword="null" /> lub. <see cref="T:System.Void" /></span><span class="sxs-lookup"><span data-stu-id="81a83-234">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="81a83-235"><paramref name="name" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-235"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="81a83-236"><paramref name="returnType" />jest typem, dla którego <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />wartość.</span><span class="sxs-lookup"><span data-stu-id="81a83-236"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="81a83-237">Instrukcje: Definiowanie i wykonywanie metod dynamicznych</span><span class="sxs-lookup"><span data-stu-id="81a83-237">How to: Define and Execute Dynamic Methods</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="81a83-238">Problemy związane z zabezpieczeniami w emisji odbicia</span><span class="sxs-lookup"><span data-stu-id="81a83-238">Security Issues in Reflection Emit</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md"><span data-ttu-id="81a83-239">Przewodnik: Emitowanie kodu w scenariuszach częściowo zaufanych</span><span class="sxs-lookup"><span data-stu-id="81a83-239">Walkthrough: Emitting Code in Partial Trust Scenarios</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), m As Module)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * System.Reflection.Module -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, m)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="81a83-240">Nazwa metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-240">The name of the dynamic method.</span></span> <span data-ttu-id="81a83-241">Może to być ciąg o zerowej długości, ale nie może być <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-241">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="81a83-242">Obiekt, który określa zwracany typ metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma zwracanego typu. <see cref="T:System.Type" /></span><span class="sxs-lookup"><span data-stu-id="81a83-242">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="81a83-243">Tablica <see cref="T:System.Type" /> obiektów określająca typy parametrów metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma parametrów.</span><span class="sxs-lookup"><span data-stu-id="81a83-243">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="m"><span data-ttu-id="81a83-244"><see cref="T:System.Reflection.Module" /> Reprezentujący moduł, z którym metoda dynamiczna ma być logicznie skojarzona.</span><span class="sxs-lookup"><span data-stu-id="81a83-244">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span></span></param>
        <summary><span data-ttu-id="81a83-245">Tworzy metodę dynamiczną, która jest globalnym względem modułu, określając nazwę metody, typ zwracany, typy parametrów i moduł.</span><span class="sxs-lookup"><span data-stu-id="81a83-245">Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-246">Ten konstruktor określa atrybuty <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> metody i <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, Konwencję <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>wywoływania i nie pomija sprawdzania widoczności just-in-Time (JIT).</span><span class="sxs-lookup"><span data-stu-id="81a83-246">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>, and does not skip just-in-time (JIT) visibility checks.</span></span>  
  
 <span data-ttu-id="81a83-247">Metoda dynamiczna utworzona za pomocą tego konstruktora ma dostęp do publicznych `internal` i`Friend` (w Visual Basic) elementów członkowskich wszystkich typów zawartych w module `m`.</span><span class="sxs-lookup"><span data-stu-id="81a83-247">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types contained in module `m`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81a83-248">W celu <xref:System.Security.Permissions.SecurityPermission> zapewnienia zgodności <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> z poprzednimi wersjami Konstruktor wymaga flagi z flagą, jeśli spełnione `m` są następujące warunki: jest modułem innym niż <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> moduł wywołujący, <xref:System.Security.Permissions.ReflectionPermission> a zapotrzebowanie dla z flagą nie powiodło się.</span><span class="sxs-lookup"><span data-stu-id="81a83-248">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="81a83-249">Jeśli żądanie <xref:System.Security.Permissions.SecurityPermission> zakończy się pomyślnie, operacja jest dozwolona.</span><span class="sxs-lookup"><span data-stu-id="81a83-249">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81a83-250">Począwszy od <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> , ten element członkowski nie jest już wymagany z flagą. [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</span><span class="sxs-lookup"><span data-stu-id="81a83-250">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="81a83-251">(Zobacz [problemy z zabezpieczeniami w emisji odbicia](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)). Aby można było korzystać z tej funkcji, aplikacja powinna [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] być ukierunkowana na lub później.</span><span class="sxs-lookup"><span data-stu-id="81a83-251">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81a83-252">Poniższy przykład kodu tworzy metodę dynamiczną, która przyjmuje dwa parametry.</span><span class="sxs-lookup"><span data-stu-id="81a83-252">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="81a83-253">Przykład emituje prostą treść funkcji, która drukuje pierwszy parametr do konsoli, a w przykładzie używa drugiego parametru jako wartości zwracanej metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-253">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="81a83-254">Przykład uzupełnia metodę przez utworzenie delegata, wywołuje delegata z różnymi parametrami i wreszcie wywołuje metodę dynamiczną przy użyciu <xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-254">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81a83-255">Element <paramref name="parameterTypes" /> jest <see langword="null" /> lub. <see cref="T:System.Void" /></span><span class="sxs-lookup"><span data-stu-id="81a83-255">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
<span data-ttu-id="81a83-256">—lub—</span><span class="sxs-lookup"><span data-stu-id="81a83-256">-or-</span></span> 
 <span data-ttu-id="81a83-257"><paramref name="m" />jest modułem, który zapewnia anonimowe hosting dla metod dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="81a83-257"><paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="81a83-258"><paramref name="name" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-258"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81a83-259">—lub—</span><span class="sxs-lookup"><span data-stu-id="81a83-259">-or-</span></span> 
 <span data-ttu-id="81a83-260"><paramref name="m" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-260"><paramref name="m" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="81a83-261"><paramref name="returnType" />jest typem, dla którego <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />wartość.</span><span class="sxs-lookup"><span data-stu-id="81a83-261"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="81a83-262">Aby skojarzyć metodę dynamiczną z modułem innym niż moduł wywołujący.</span><span class="sxs-lookup"><span data-stu-id="81a83-262">to associate the dynamic method with a module other than the calling module.</span></span> <span data-ttu-id="81a83-263">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-263">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="81a83-264">Instrukcje: Definiowanie i wykonywanie metod dynamicznych</span><span class="sxs-lookup"><span data-stu-id="81a83-264">How to: Define and Execute Dynamic Methods</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="81a83-265">Problemy związane z zabezpieczeniami w emisji odbicia</span><span class="sxs-lookup"><span data-stu-id="81a83-265">Security Issues in Reflection Emit</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), owner As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * Type -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, owner)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="81a83-266">Nazwa metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-266">The name of the dynamic method.</span></span> <span data-ttu-id="81a83-267">Może to być ciąg o zerowej długości, ale nie może być <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-267">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="81a83-268">Obiekt, który określa zwracany typ metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma zwracanego typu. <see cref="T:System.Type" /></span><span class="sxs-lookup"><span data-stu-id="81a83-268">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="81a83-269">Tablica <see cref="T:System.Type" /> obiektów określająca typy parametrów metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma parametrów.</span><span class="sxs-lookup"><span data-stu-id="81a83-269">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="owner"><span data-ttu-id="81a83-270">A <see cref="T:System.Type" /> , z którym metoda dynamiczna jest skojarzona logicznie.</span><span class="sxs-lookup"><span data-stu-id="81a83-270">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span></span> <span data-ttu-id="81a83-271">Metoda dynamiczna ma dostęp do wszystkich elementów członkowskich typu.</span><span class="sxs-lookup"><span data-stu-id="81a83-271">The dynamic method has access to all members of the type.</span></span></param>
        <summary><span data-ttu-id="81a83-272">Tworzy metodę dynamiczną, określając nazwę metody, zwracany typ, typy parametrów i typ, z którym metoda dynamiczna jest skojarzona logicznie.</span><span class="sxs-lookup"><span data-stu-id="81a83-272">Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-273">Metoda dynamiczna utworzona za pomocą tego konstruktora ma dostęp do wszystkich elementów członkowskich typu `owner`oraz do publicznych i `internal` (`Friend` w Visual Basic) elementów członkowskich wszystkich innych typów w module, który zawiera `owner`.</span><span class="sxs-lookup"><span data-stu-id="81a83-273">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`.</span></span>  
  
 <span data-ttu-id="81a83-274">Ten konstruktor określa atrybuty <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> metody i <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, Konwencję <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>wywoływania i nie pomija sprawdzania widoczności just-in-Time (JIT).</span><span class="sxs-lookup"><span data-stu-id="81a83-274">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>, and does not skip just-in-time (JIT) visibility checks.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81a83-275">W celu <xref:System.Security.Permissions.SecurityPermission> zapewnienia zgodności <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> z poprzednimi wersjami ten Konstruktor wymaga flagi, jeśli oba warunki są `owner` spełnione: jest w module innym niż <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> moduł wywołujący, a żądanie dla <xref:System.Security.Permissions.ReflectionPermission> z Flaga zakończyła się niepowodzeniem.</span><span class="sxs-lookup"><span data-stu-id="81a83-275">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="81a83-276">Jeśli żądanie <xref:System.Security.Permissions.SecurityPermission> zakończy się pomyślnie, operacja jest dozwolona.</span><span class="sxs-lookup"><span data-stu-id="81a83-276">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81a83-277">Począwszy od <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> , ten element członkowski nie jest już wymagany z flagą. [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</span><span class="sxs-lookup"><span data-stu-id="81a83-277">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="81a83-278">(Zobacz [problemy z zabezpieczeniami w emisji odbicia](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)). Aby można było korzystać z tej funkcji, aplikacja powinna [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] być ukierunkowana na lub później.</span><span class="sxs-lookup"><span data-stu-id="81a83-278">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81a83-279">Poniższy przykład kodu tworzy obiekt <xref:System.Reflection.Emit.DynamicMethod> , który jest logicznie skojarzony z typem.</span><span class="sxs-lookup"><span data-stu-id="81a83-279">The following code example creates a <xref:System.Reflection.Emit.DynamicMethod> that is logically associated with a type.</span></span> <span data-ttu-id="81a83-280">To skojarzenie zapewnia dostęp do prywatnych elementów członkowskich tego typu.</span><span class="sxs-lookup"><span data-stu-id="81a83-280">This association gives it access to the private members of that type.</span></span>  
  
 <span data-ttu-id="81a83-281">Przykładowy kod definiuje klasę o nazwie `Example` z polem prywatnym, klasy o nazwie `DerivedFromExample` pochodzącej od pierwszej klasy, typ delegata o nazwie `UseLikeStatic` , który zwraca <xref:System.Int32> i ma parametry typu `Example` i <xref:System.Int32>i typ delegata o nazwie `UseLikeInstance` , który <xref:System.Int32> zwraca i ma jeden parametr typu <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="81a83-281">The code example defines a class named `Example` with a private field, a class named `DerivedFromExample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="81a83-282">Następnie przykładowy kod tworzy <xref:System.Reflection.Emit.DynamicMethod> , który zmienia pole prywatne `Example` wystąpienia i zwraca poprzednią wartość.</span><span class="sxs-lookup"><span data-stu-id="81a83-282">The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81a83-283">Ogólnie rzecz biorąc, zmiana wewnętrznych pól klas nie jest dobrym sposobem programowania zorientowanego obiektowo.</span><span class="sxs-lookup"><span data-stu-id="81a83-283">In general, changing the internal fields of classes is not good object-oriented coding practice.</span></span>  
  
 <span data-ttu-id="81a83-284">Przykładowy kod tworzy wystąpienie `Example` , a następnie tworzy dwa Delegaty.</span><span class="sxs-lookup"><span data-stu-id="81a83-284">The example code creates an instance of `Example` and then creates two delegates.</span></span> <span data-ttu-id="81a83-285">Pierwszy jest typu `UseLikeStatic`, który ma te same parametry co metoda dynamiczna.</span><span class="sxs-lookup"><span data-stu-id="81a83-285">The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method.</span></span> <span data-ttu-id="81a83-286">Sekunda jest typu `UseLikeInstance`, który nie ma pierwszego parametru (typu `Example`).</span><span class="sxs-lookup"><span data-stu-id="81a83-286">The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`).</span></span> <span data-ttu-id="81a83-287">Ten delegat jest tworzony przy użyciu <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> przeciążenia metody; drugi parametr tego przeciążenia metody jest `Example`wystąpieniem, w tym przypadku wystąpienia właśnie utworzone, które jest powiązane z nowo utworzonym delegatem.</span><span class="sxs-lookup"><span data-stu-id="81a83-287">This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate.</span></span> <span data-ttu-id="81a83-288">Za każdym razem, gdy obiekt delegowany jest wywoływany, metoda dynamiczna `Example`działa w wystąpieniu związanym.</span><span class="sxs-lookup"><span data-stu-id="81a83-288">Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81a83-289">Jest to przykład reguł swobodnych dla powiązania delegata wprowadzonych w, [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]a także nowych przeciążeń <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-289">This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="81a83-290">Aby uzyskać więcej informacji, zobacz <xref:System.Delegate> Klasa.</span><span class="sxs-lookup"><span data-stu-id="81a83-290">For more information, see the <xref:System.Delegate> class.</span></span>  
  
 <span data-ttu-id="81a83-291">Obiekt delegowany jest wywoływany, przekazując w `Example` wystąpieniu, `UseLikeInstance` które jest powiązane z delegatem. `UseLikeStatic`</span><span class="sxs-lookup"><span data-stu-id="81a83-291">The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate.</span></span> <span data-ttu-id="81a83-292">Następnie obiekt delegowany jest wywoływany, aby oba Delegaty działały w tym `Example`samym wystąpieniu. `UseLikeInstance`</span><span class="sxs-lookup"><span data-stu-id="81a83-292">Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`.</span></span> <span data-ttu-id="81a83-293">Zmiany wartości pola wewnętrznego są wyświetlane po każdym wywołaniu.</span><span class="sxs-lookup"><span data-stu-id="81a83-293">The changes in the values of the internal field are displayed after each call.</span></span> <span data-ttu-id="81a83-294">Na `UseLikeInstance` koniec delegat jest powiązany z `DerivedFromExample`wystąpieniem, a wywołania delegatów są powtarzane.</span><span class="sxs-lookup"><span data-stu-id="81a83-294">Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromExample`, and the delegate calls are repeated.</span></span>  
  
 [!code-csharp[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/cs/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81a83-295">Element <paramref name="parameterTypes" /> jest <see langword="null" /> lub. <see cref="T:System.Void" /></span><span class="sxs-lookup"><span data-stu-id="81a83-295">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
<span data-ttu-id="81a83-296">—lub—</span><span class="sxs-lookup"><span data-stu-id="81a83-296">-or-</span></span> 
 <span data-ttu-id="81a83-297"><paramref name="owner" />jest interfejsem, tablicą, otwartym typem ogólnym lub parametrem typu ogólnego typu lub metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-297"><paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="81a83-298"><paramref name="name" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-298"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81a83-299">—lub—</span><span class="sxs-lookup"><span data-stu-id="81a83-299">-or-</span></span> 
 <span data-ttu-id="81a83-300"><paramref name="owner" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-300"><paramref name="owner" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="81a83-301"><paramref name="returnType" />is <see langword="null" />lub jest typem, dla którego <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-301"><paramref name="returnType" /> is <see langword="null" />, or is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="81a83-302">Aby skojarzyć metodę dynamiczną z typem w module innym niż moduł wywołujący.</span><span class="sxs-lookup"><span data-stu-id="81a83-302">to associate the dynamic method with a type in a module other than the calling module.</span></span> <span data-ttu-id="81a83-303">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-303">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="81a83-304">Instrukcje: Definiowanie i wykonywanie metod dynamicznych</span><span class="sxs-lookup"><span data-stu-id="81a83-304">How to: Define and Execute Dynamic Methods</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="81a83-305">Problemy związane z zabezpieczeniami w emisji odbicia</span><span class="sxs-lookup"><span data-stu-id="81a83-305">Security Issues in Reflection Emit</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), m As Module, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * System.Reflection.Module * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, m, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="81a83-306">Nazwa metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-306">The name of the dynamic method.</span></span> <span data-ttu-id="81a83-307">Może to być ciąg o zerowej długości, ale nie może być <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-307">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="81a83-308">Obiekt, który określa zwracany typ metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma zwracanego typu. <see cref="T:System.Type" /></span><span class="sxs-lookup"><span data-stu-id="81a83-308">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="81a83-309">Tablica <see cref="T:System.Type" /> obiektów określająca typy parametrów metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma parametrów.</span><span class="sxs-lookup"><span data-stu-id="81a83-309">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="m"><span data-ttu-id="81a83-310"><see cref="T:System.Reflection.Module" /> Reprezentujący moduł, z którym metoda dynamiczna ma być logicznie skojarzona.</span><span class="sxs-lookup"><span data-stu-id="81a83-310">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span></span></param>
        <param name="skipVisibility"><span data-ttu-id="81a83-311"><see langword="true" />Aby pominąć sprawdzanie widoczności JIT dla typów i elementów członkowskich, do których można uzyskać dostęp za pomocą MSIL metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-311"><see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method.</span></span></param>
        <summary><span data-ttu-id="81a83-312">Tworzy metodę dynamiczną Global dla modułu, określając nazwę metody, zwracany typ, typy parametrów, moduł i czy testy widoczności just-in-Time (JIT) powinny zostać pominięte dla typów i członków, do których uzyskuje dostęp za pomocą języka pośredniego firmy Microsoft (MSIL). metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-312">Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-313">Ten konstruktor określa atrybuty <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> metody i <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>i Konwencję <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>wywoływania.</span><span class="sxs-lookup"><span data-stu-id="81a83-313">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="81a83-314">Metoda dynamiczna utworzona za pomocą tego konstruktora ma dostęp do publicznych `internal` i`Friend` (w Visual Basic) elementów członkowskich wszystkich typów w zawartym `m`module.</span><span class="sxs-lookup"><span data-stu-id="81a83-314">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types in contained module `m`.</span></span> <span data-ttu-id="81a83-315">Pomijanie sprawdzania widoczności kompilatora JIT umożliwia dynamiczną metodę dostępu do prywatnych i chronionych elementów członkowskich wszystkich innych typów.</span><span class="sxs-lookup"><span data-stu-id="81a83-315">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="81a83-316">Jest to przydatne, na przykład podczas pisania kodu do serializacji obiektów.</span><span class="sxs-lookup"><span data-stu-id="81a83-316">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81a83-317">W celu <xref:System.Security.Permissions.SecurityPermission> zapewnienia zgodności <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> z poprzednimi wersjami Konstruktor wymaga flagi z flagą, jeśli spełnione `m` są następujące warunki: jest modułem innym niż <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> moduł wywołujący, <xref:System.Security.Permissions.ReflectionPermission> a zapotrzebowanie dla z flagą nie powiodło się.</span><span class="sxs-lookup"><span data-stu-id="81a83-317">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="81a83-318">Jeśli żądanie <xref:System.Security.Permissions.SecurityPermission> zakończy się pomyślnie, operacja jest dozwolona.</span><span class="sxs-lookup"><span data-stu-id="81a83-318">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81a83-319">Począwszy od <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> , ten element członkowski nie jest już wymagany z flagą. [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</span><span class="sxs-lookup"><span data-stu-id="81a83-319">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="81a83-320">(Zobacz [problemy z zabezpieczeniami w emisji odbicia](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)). Aby można było korzystać z tej funkcji, aplikacja powinna [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] być ukierunkowana na lub później.</span><span class="sxs-lookup"><span data-stu-id="81a83-320">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81a83-321">Element <paramref name="parameterTypes" /> jest <see langword="null" /> lub. <see cref="T:System.Void" /></span><span class="sxs-lookup"><span data-stu-id="81a83-321">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
<span data-ttu-id="81a83-322">—lub—</span><span class="sxs-lookup"><span data-stu-id="81a83-322">-or-</span></span> 
 <span data-ttu-id="81a83-323"><paramref name="m" />jest modułem, który zapewnia anonimowe hosting dla metod dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="81a83-323"><paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="81a83-324"><paramref name="name" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-324"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81a83-325">—lub—</span><span class="sxs-lookup"><span data-stu-id="81a83-325">-or-</span></span> 
 <span data-ttu-id="81a83-326"><paramref name="m" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-326"><paramref name="m" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="81a83-327"><paramref name="returnType" />jest typem, dla którego <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />wartość.</span><span class="sxs-lookup"><span data-stu-id="81a83-327"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="81a83-328">Aby skojarzyć metodę dynamiczną z modułem innym niż moduł wywołujący.</span><span class="sxs-lookup"><span data-stu-id="81a83-328">to associate the dynamic method with a module other than the calling module.</span></span> <span data-ttu-id="81a83-329">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-329">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="81a83-330">Instrukcje: Definiowanie i wykonywanie metod dynamicznych</span><span class="sxs-lookup"><span data-stu-id="81a83-330">How to: Define and Execute Dynamic Methods</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="81a83-331">Problemy związane z zabezpieczeniami w emisji odbicia</span><span class="sxs-lookup"><span data-stu-id="81a83-331">Security Issues in Reflection Emit</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * Type * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, owner, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="81a83-332">Nazwa metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-332">The name of the dynamic method.</span></span> <span data-ttu-id="81a83-333">Może to być ciąg o zerowej długości, ale nie może być <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-333">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="81a83-334">Obiekt, który określa zwracany typ metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma zwracanego typu. <see cref="T:System.Type" /></span><span class="sxs-lookup"><span data-stu-id="81a83-334">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="81a83-335">Tablica <see cref="T:System.Type" /> obiektów określająca typy parametrów metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma parametrów.</span><span class="sxs-lookup"><span data-stu-id="81a83-335">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="owner"><span data-ttu-id="81a83-336">A <see cref="T:System.Type" /> , z którym metoda dynamiczna jest skojarzona logicznie.</span><span class="sxs-lookup"><span data-stu-id="81a83-336">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span></span> <span data-ttu-id="81a83-337">Metoda dynamiczna ma dostęp do wszystkich elementów członkowskich typu.</span><span class="sxs-lookup"><span data-stu-id="81a83-337">The dynamic method has access to all members of the type.</span></span></param>
        <param name="skipVisibility"><span data-ttu-id="81a83-338"><see langword="true" />Aby pominąć sprawdzanie widoczności JIT dla typów i elementów członkowskich, do których można uzyskać dostęp za pomocą MSIL metody dynamicznej; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="81a83-338"><see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="81a83-339">Tworzy metodę dynamiczną, określając nazwę metody, zwracany typ, typy parametrów, typ, z którym metoda dynamiczna jest skojarzona logicznie, i czy testy widoczności just-in-Time (JIT) powinny zostać pominięte dla typów i członków, do których uzyskuje dostęp firma Microsoft język pośredni (MSIL) metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-339">Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-340">Metoda dynamiczna utworzona za pomocą tego konstruktora ma dostęp do wszystkich elementów członkowskich typu `owner`oraz do publicznych i `internal` (`Friend` w Visual Basic) elementów członkowskich wszystkich innych typów w module, który zawiera `owner`.</span><span class="sxs-lookup"><span data-stu-id="81a83-340">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`.</span></span> <span data-ttu-id="81a83-341">Pomijanie sprawdzania widoczności kompilatora JIT umożliwia dynamiczną metodę dostępu do prywatnych i chronionych elementów członkowskich wszystkich innych typów.</span><span class="sxs-lookup"><span data-stu-id="81a83-341">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="81a83-342">Jest to przydatne, na przykład podczas pisania kodu do serializacji obiektów.</span><span class="sxs-lookup"><span data-stu-id="81a83-342">This is useful, for example, when writing code to serialize objects.</span></span>  
  
 <span data-ttu-id="81a83-343">Ten konstruktor określa atrybuty <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> metody i <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>i Konwencję <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>wywoływania.</span><span class="sxs-lookup"><span data-stu-id="81a83-343">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81a83-344">W celu <xref:System.Security.Permissions.SecurityPermission> zapewnienia zgodności <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> z poprzednimi wersjami ten Konstruktor wymaga flagi, jeśli oba warunki są `owner` spełnione: jest w module innym niż <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> moduł wywołujący, a żądanie dla <xref:System.Security.Permissions.ReflectionPermission> z Flaga zakończyła się niepowodzeniem.</span><span class="sxs-lookup"><span data-stu-id="81a83-344">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="81a83-345">Jeśli żądanie <xref:System.Security.Permissions.SecurityPermission> zakończy się pomyślnie, operacja jest dozwolona.</span><span class="sxs-lookup"><span data-stu-id="81a83-345">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81a83-346">Począwszy od <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> , ten element członkowski nie jest już wymagany z flagą. [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</span><span class="sxs-lookup"><span data-stu-id="81a83-346">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="81a83-347">(Zobacz [problemy z zabezpieczeniami w emisji odbicia](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)). Aby można było korzystać z tej funkcji, aplikacja powinna [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] być ukierunkowana na lub później.</span><span class="sxs-lookup"><span data-stu-id="81a83-347">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81a83-348">Element <paramref name="parameterTypes" /> jest <see langword="null" /> lub. <see cref="T:System.Void" /></span><span class="sxs-lookup"><span data-stu-id="81a83-348">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
<span data-ttu-id="81a83-349">—lub—</span><span class="sxs-lookup"><span data-stu-id="81a83-349">-or-</span></span> 
 <span data-ttu-id="81a83-350"><paramref name="owner" />jest interfejsem, tablicą, otwartym typem ogólnym lub parametrem typu ogólnego typu lub metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-350"><paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="81a83-351"><paramref name="name" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-351"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81a83-352">—lub—</span><span class="sxs-lookup"><span data-stu-id="81a83-352">-or-</span></span> 
 <span data-ttu-id="81a83-353"><paramref name="owner" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-353"><paramref name="owner" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="81a83-354"><paramref name="returnType" />is <see langword="null" />lub jest typem, dla którego <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-354"><paramref name="returnType" /> is <see langword="null" />, or is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="81a83-355">Aby skojarzyć metodę dynamiczną z typem w module innym niż moduł wywołujący.</span><span class="sxs-lookup"><span data-stu-id="81a83-355">to associate the dynamic method with a type in a module other than the calling module.</span></span> <span data-ttu-id="81a83-356">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-356">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="81a83-357">Instrukcje: Definiowanie i wykonywanie metod dynamicznych</span><span class="sxs-lookup"><span data-stu-id="81a83-357">How to: Define and Execute Dynamic Methods</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="81a83-358">Problemy związane z zabezpieczeniami w emisji odbicia</span><span class="sxs-lookup"><span data-stu-id="81a83-358">Security Issues in Reflection Emit</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), m As Module, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * System.Reflection.MethodAttributes * System.Reflection.CallingConventions * Type * Type[] * System.Reflection.Module * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, attributes, callingConvention, returnType, parameterTypes, m, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="81a83-359">Nazwa metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-359">The name of the dynamic method.</span></span> <span data-ttu-id="81a83-360">Może to być ciąg o zerowej długości, ale nie może być <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-360">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="attributes"><span data-ttu-id="81a83-361">Bitowa kombinacja <see cref="T:System.Reflection.MethodAttributes" /> wartości, która określa atrybuty metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-361">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method.</span></span> <span data-ttu-id="81a83-362">Jedyna dozwolona kombinacja to <see cref="F:System.Reflection.MethodAttributes.Public" /> i <see cref="F:System.Reflection.MethodAttributes.Static" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-362">The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="81a83-363">Konwencja wywoływania dla metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-363">The calling convention for the dynamic method.</span></span> <span data-ttu-id="81a83-364">Musi być <see cref="F:System.Reflection.CallingConventions.Standard" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-364">Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="81a83-365">Obiekt, który określa zwracany typ metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma zwracanego typu. <see cref="T:System.Type" /></span><span class="sxs-lookup"><span data-stu-id="81a83-365">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="81a83-366">Tablica <see cref="T:System.Type" /> obiektów określająca typy parametrów metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma parametrów.</span><span class="sxs-lookup"><span data-stu-id="81a83-366">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="m"><span data-ttu-id="81a83-367"><see cref="T:System.Reflection.Module" /> Reprezentujący moduł, z którym metoda dynamiczna ma być logicznie skojarzona.</span><span class="sxs-lookup"><span data-stu-id="81a83-367">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span></span></param>
        <param name="skipVisibility"><span data-ttu-id="81a83-368"><see langword="true" />Aby pominąć sprawdzanie widoczności JIT dla typów i elementów członkowskich, do których można uzyskać dostęp za pomocą MSIL metody dynamicznej; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="81a83-368"><see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="81a83-369">Tworzy metodę dynamiczną Global dla modułu, określając nazwę metody, atrybuty, konwencję wywoływania, zwracany typ, typy parametrów, moduł i czy testy widoczności just-in-Time (JIT) powinny zostać pominięte dla typów i członków, do których uzyskuje dostęp Język pośredni Microsoft (MSIL) metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-369">Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-370">Metoda dynamiczna utworzona za pomocą tego konstruktora ma dostęp do publicznych `internal` i`Friend` (w Visual Basic) członków wszystkich typów publicznych i wewnętrznych zawartych w module `m`.</span><span class="sxs-lookup"><span data-stu-id="81a83-370">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the public and internal types contained in module `m`.</span></span>  
  
 <span data-ttu-id="81a83-371">Pomijanie sprawdzania widoczności kompilatora JIT pozwala metodzie dynamicznej uzyskiwać dostęp do prywatnych i chronionych elementów członkowskich wszystkich innych typów w module i we wszystkich innych zestawach.</span><span class="sxs-lookup"><span data-stu-id="81a83-371">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types in the module and in all other assemblies as well.</span></span> <span data-ttu-id="81a83-372">Jest to przydatne, na przykład podczas pisania kodu do serializacji obiektów.</span><span class="sxs-lookup"><span data-stu-id="81a83-372">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81a83-373">W celu <xref:System.Security.Permissions.SecurityPermission> zapewnienia zgodności <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> z poprzednimi wersjami Konstruktor wymaga flagi z flagą, jeśli spełnione `m` są następujące warunki: jest modułem innym niż <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> moduł wywołujący, <xref:System.Security.Permissions.ReflectionPermission> a zapotrzebowanie dla z flagą nie powiodło się.</span><span class="sxs-lookup"><span data-stu-id="81a83-373">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="81a83-374">Jeśli żądanie <xref:System.Security.Permissions.SecurityPermission> zakończy się pomyślnie, operacja jest dozwolona.</span><span class="sxs-lookup"><span data-stu-id="81a83-374">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81a83-375">Począwszy od <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> , ten element członkowski nie jest już wymagany z flagą. [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</span><span class="sxs-lookup"><span data-stu-id="81a83-375">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="81a83-376">(Zobacz [problemy z zabezpieczeniami w emisji odbicia](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)). Aby można było korzystać z tej funkcji, aplikacja powinna [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] być ukierunkowana na lub później.</span><span class="sxs-lookup"><span data-stu-id="81a83-376">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81a83-377">Element <paramref name="parameterTypes" /> jest <see langword="null" /> lub. <see cref="T:System.Void" /></span><span class="sxs-lookup"><span data-stu-id="81a83-377">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
<span data-ttu-id="81a83-378">—lub—</span><span class="sxs-lookup"><span data-stu-id="81a83-378">-or-</span></span> 
 <span data-ttu-id="81a83-379"><paramref name="m" />jest modułem, który zapewnia anonimowe hosting dla metod dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="81a83-379"><paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="81a83-380"><paramref name="name" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-380"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81a83-381">—lub—</span><span class="sxs-lookup"><span data-stu-id="81a83-381">-or-</span></span> 
 <span data-ttu-id="81a83-382"><paramref name="m" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-382"><paramref name="m" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="81a83-383"><paramref name="attributes" />jest kombinacją flag innych niż <see cref="F:System.Reflection.MethodAttributes.Public" /> i. <see cref="F:System.Reflection.MethodAttributes.Static" /></span><span class="sxs-lookup"><span data-stu-id="81a83-383"><paramref name="attributes" /> is a combination of flags other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span></span>  
  
<span data-ttu-id="81a83-384">—lub—</span><span class="sxs-lookup"><span data-stu-id="81a83-384">-or-</span></span> 
 <span data-ttu-id="81a83-385"><paramref name="callingConvention" />nie <see cref="F:System.Reflection.CallingConventions.Standard" />jest.</span><span class="sxs-lookup"><span data-stu-id="81a83-385"><paramref name="callingConvention" /> is not <see cref="F:System.Reflection.CallingConventions.Standard" />.</span></span>  
  
<span data-ttu-id="81a83-386">—lub—</span><span class="sxs-lookup"><span data-stu-id="81a83-386">-or-</span></span> 
 <span data-ttu-id="81a83-387"><paramref name="returnType" />jest typem, dla którego <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />wartość.</span><span class="sxs-lookup"><span data-stu-id="81a83-387"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="81a83-388">Aby skojarzyć metodę dynamiczną z modułem innym niż moduł wywołujący.</span><span class="sxs-lookup"><span data-stu-id="81a83-388">to associate the dynamic method with a module other than the calling module.</span></span> <span data-ttu-id="81a83-389">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-389">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="81a83-390">Instrukcje: Definiowanie i wykonywanie metod dynamicznych</span><span class="sxs-lookup"><span data-stu-id="81a83-390">How to: Define and Execute Dynamic Methods</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="81a83-391">Problemy związane z zabezpieczeniami w emisji odbicia</span><span class="sxs-lookup"><span data-stu-id="81a83-391">Security Issues in Reflection Emit</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * System.Reflection.MethodAttributes * System.Reflection.CallingConventions * Type * Type[] * Type * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, attributes, callingConvention, returnType, parameterTypes, owner, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="81a83-392">Nazwa metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-392">The name of the dynamic method.</span></span> <span data-ttu-id="81a83-393">Może to być ciąg o zerowej długości, ale nie może być <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-393">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="attributes"><span data-ttu-id="81a83-394">Bitowa kombinacja <see cref="T:System.Reflection.MethodAttributes" /> wartości, która określa atrybuty metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-394">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method.</span></span> <span data-ttu-id="81a83-395">Jedyna dozwolona kombinacja to <see cref="F:System.Reflection.MethodAttributes.Public" /> i <see cref="F:System.Reflection.MethodAttributes.Static" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-395">The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="81a83-396">Konwencja wywoływania dla metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-396">The calling convention for the dynamic method.</span></span> <span data-ttu-id="81a83-397">Musi być <see cref="F:System.Reflection.CallingConventions.Standard" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-397">Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="81a83-398">Obiekt, który określa zwracany typ metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma zwracanego typu. <see cref="T:System.Type" /></span><span class="sxs-lookup"><span data-stu-id="81a83-398">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="81a83-399">Tablica <see cref="T:System.Type" /> obiektów określająca typy parametrów metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma parametrów.</span><span class="sxs-lookup"><span data-stu-id="81a83-399">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="owner"><span data-ttu-id="81a83-400">A <see cref="T:System.Type" /> , z którym metoda dynamiczna jest skojarzona logicznie.</span><span class="sxs-lookup"><span data-stu-id="81a83-400">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span></span> <span data-ttu-id="81a83-401">Metoda dynamiczna ma dostęp do wszystkich elementów członkowskich typu.</span><span class="sxs-lookup"><span data-stu-id="81a83-401">The dynamic method has access to all members of the type.</span></span></param>
        <param name="skipVisibility"><span data-ttu-id="81a83-402"><see langword="true" />Aby pominąć sprawdzanie widoczności JIT dla typów i elementów członkowskich, do których można uzyskać dostęp za pomocą MSIL metody dynamicznej; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="81a83-402"><see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="81a83-403">Tworzy metodę dynamiczną, określając nazwę metody, atrybuty, konwencję wywoływania, zwracany typ, typy parametrów, typ, z którym metoda dynamiczna jest skojarzona logicznie i czy testy widoczności just-in-Time (JIT) powinny być pomijane dla typów i elementy członkowskie z dostępem do języka pośredniego firmy Microsoft (MSIL) metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-403">Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-404">Metoda dynamiczna jest globalna dla modułu, który zawiera typ `owner`.</span><span class="sxs-lookup"><span data-stu-id="81a83-404">The dynamic method is global to the module that contains the type `owner`.</span></span> <span data-ttu-id="81a83-405">Ma dostęp do wszystkich elementów członkowskich typu `owner`.</span><span class="sxs-lookup"><span data-stu-id="81a83-405">It has access to all members of the type `owner`.</span></span>  
  
 <span data-ttu-id="81a83-406">Metoda dynamiczna utworzona za pomocą tego konstruktora ma dostęp do wszystkich elementów członkowskich typu `owner`oraz do publicznych i `internal` (`Friend` w Visual Basic) członków wszystkich typów zawartych w module, który zawiera `owner`.</span><span class="sxs-lookup"><span data-stu-id="81a83-406">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the types contained in the module that contains `owner`.</span></span> <span data-ttu-id="81a83-407">Pomijanie sprawdzania widoczności kompilatora JIT umożliwia dynamiczną metodę dostępu do prywatnych i chronionych elementów członkowskich wszystkich innych typów.</span><span class="sxs-lookup"><span data-stu-id="81a83-407">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="81a83-408">Jest to przydatne, na przykład podczas pisania kodu do serializacji obiektów.</span><span class="sxs-lookup"><span data-stu-id="81a83-408">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81a83-409">W celu <xref:System.Security.Permissions.SecurityPermission> zapewnienia zgodności <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> z poprzednimi wersjami ten Konstruktor wymaga flagi, jeśli oba warunki są `owner` spełnione: jest w module innym niż <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> moduł wywołujący, a żądanie dla <xref:System.Security.Permissions.ReflectionPermission> z Flaga zakończyła się niepowodzeniem.</span><span class="sxs-lookup"><span data-stu-id="81a83-409">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="81a83-410">Jeśli żądanie <xref:System.Security.Permissions.SecurityPermission> zakończy się pomyślnie, operacja jest dozwolona.</span><span class="sxs-lookup"><span data-stu-id="81a83-410">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81a83-411">Począwszy od <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> , ten element członkowski nie jest już wymagany z flagą. [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</span><span class="sxs-lookup"><span data-stu-id="81a83-411">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="81a83-412">(Zobacz [problemy z zabezpieczeniami w emisji odbicia](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)). Aby można było korzystać z tej funkcji, aplikacja powinna [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] być ukierunkowana na lub później.</span><span class="sxs-lookup"><span data-stu-id="81a83-412">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81a83-413">Element <paramref name="parameterTypes" /> jest <see langword="null" /> lub. <see cref="T:System.Void" /></span><span class="sxs-lookup"><span data-stu-id="81a83-413">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
<span data-ttu-id="81a83-414">—lub—</span><span class="sxs-lookup"><span data-stu-id="81a83-414">-or-</span></span> 
 <span data-ttu-id="81a83-415"><paramref name="owner" />jest interfejsem, tablicą, otwartym typem ogólnym lub parametrem typu ogólnego typu lub metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-415"><paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="81a83-416"><paramref name="name" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-416"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81a83-417">—lub—</span><span class="sxs-lookup"><span data-stu-id="81a83-417">-or-</span></span> 
 <span data-ttu-id="81a83-418"><paramref name="owner" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-418"><paramref name="owner" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="81a83-419"><paramref name="attributes" />jest kombinacją flag innych niż <see cref="F:System.Reflection.MethodAttributes.Public" /> i. <see cref="F:System.Reflection.MethodAttributes.Static" /></span><span class="sxs-lookup"><span data-stu-id="81a83-419"><paramref name="attributes" /> is a combination of flags other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span></span>  
  
<span data-ttu-id="81a83-420">—lub—</span><span class="sxs-lookup"><span data-stu-id="81a83-420">-or-</span></span> 
 <span data-ttu-id="81a83-421"><paramref name="callingConvention" />nie <see cref="F:System.Reflection.CallingConventions.Standard" />jest.</span><span class="sxs-lookup"><span data-stu-id="81a83-421"><paramref name="callingConvention" /> is not <see cref="F:System.Reflection.CallingConventions.Standard" />.</span></span>  
  
<span data-ttu-id="81a83-422">—lub—</span><span class="sxs-lookup"><span data-stu-id="81a83-422">-or-</span></span> 
 <span data-ttu-id="81a83-423"><paramref name="returnType" />jest typem, dla którego <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />wartość.</span><span class="sxs-lookup"><span data-stu-id="81a83-423"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="81a83-424">Aby skojarzyć metodę dynamiczną z typem w module innym niż moduł wywołujący.</span><span class="sxs-lookup"><span data-stu-id="81a83-424">to associate the dynamic method with a type in a module other than the calling module.</span></span> <span data-ttu-id="81a83-425">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-425">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="81a83-426">Instrukcje: Definiowanie i wykonywanie metod dynamicznych</span><span class="sxs-lookup"><span data-stu-id="81a83-426">How to: Define and Execute Dynamic Methods</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="81a83-427">Problemy związane z zabezpieczeniami w emisji odbicia</span><span class="sxs-lookup"><span data-stu-id="81a83-427">Security Issues in Reflection Emit</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Attributes As MethodAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodAttributes Attributes { System::Reflection::MethodAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.MethodAttributes" Usage="System.Reflection.Emit.DynamicMethod.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81a83-428">Pobiera atrybuty określone podczas tworzenia metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-428">Gets the attributes specified when the dynamic method was created.</span></span></summary>
        <value><span data-ttu-id="81a83-429">Bitowa kombinacja <see cref="T:System.Reflection.MethodAttributes" /> wartości reprezentujących atrybuty dla metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-429">A bitwise combination of the <see cref="T:System.Reflection.MethodAttributes" /> values representing the attributes for the method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-430">Obecnie atrybuty metody dla metody dynamicznej są zawsze <xref:System.Reflection.MethodAttributes.Public> i. <xref:System.Reflection.MethodAttributes.Static></span><span class="sxs-lookup"><span data-stu-id="81a83-430">Currently, the method attributes for a dynamic method are always <xref:System.Reflection.MethodAttributes.Public> and <xref:System.Reflection.MethodAttributes.Static>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81a83-431">Poniższy przykład kodu wyświetla atrybuty metody metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-431">The following code example displays the method attributes of a dynamic method.</span></span> <span data-ttu-id="81a83-432">Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="81a83-432">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#21](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#21)]
 [!code-csharp[Reflection.DynamicMethod.All#21](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#21)]
 [!code-vb[Reflection.DynamicMethod.All#21](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public override System.Reflection.CallingConventions CallingConvention { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.CallingConventions CallingConvention" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CallingConvention As CallingConventions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::CallingConventions CallingConvention { System::Reflection::CallingConventions get(); };" />
      <MemberSignature Language="F#" Value="member this.CallingConvention : System.Reflection.CallingConventions" Usage="System.Reflection.Emit.DynamicMethod.CallingConvention" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.CallingConventions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81a83-433">Pobiera konwencję wywoływania określoną podczas tworzenia metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-433">Gets the calling convention specified when the dynamic method was created.</span></span></summary>
        <value><span data-ttu-id="81a83-434">Jedna z <see cref="T:System.Reflection.CallingConventions" /> wartości, która wskazuje konwencję wywoływania metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-434">One of the <see cref="T:System.Reflection.CallingConventions" /> values that indicates the calling convention of the method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-435">Obecnie konwencja wywoływania dla metody dynamicznej jest zawsze <xref:System.Reflection.CallingConventions.Standard>.</span><span class="sxs-lookup"><span data-stu-id="81a83-435">Currently, the calling convention for a dynamic method is always <xref:System.Reflection.CallingConventions.Standard>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81a83-436">Poniższy przykład kodu wyświetla konwencję wywoływania metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-436">The following code example displays the calling convention of a dynamic method.</span></span> <span data-ttu-id="81a83-437">Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="81a83-437">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#22](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#22)]
 [!code-csharp[Reflection.DynamicMethod.All#22](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#22)]
 [!code-vb[Reflection.DynamicMethod.All#22](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDelegate">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="81a83-438">Kończy metodę dynamiczną i tworzy delegata, który może służyć do jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="81a83-438">Completes the dynamic method and creates a delegate that can be used to execute it.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public override sealed Delegate CreateDelegate (Type delegateType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Delegate CreateDelegate(class System.Type delegateType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CreateDelegate (delegateType As Type) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Delegate ^ CreateDelegate(Type ^ delegateType);" />
      <MemberSignature Language="F#" Value="override this.CreateDelegate : Type -&gt; Delegate" Usage="dynamicMethod.CreateDelegate delegateType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="81a83-439">Typ delegata, którego sygnatura pasuje do metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-439">A delegate type whose signature matches that of the dynamic method.</span></span></param>
        <summary><span data-ttu-id="81a83-440">Kończy metodę dynamiczną i tworzy delegata, który może służyć do jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="81a83-440">Completes the dynamic method and creates a delegate that can be used to execute it.</span></span></summary>
        <returns><span data-ttu-id="81a83-441">Delegat określonego typu, który może służyć do wykonywania metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-441">A delegate of the specified type, which can be used to execute the dynamic method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-442"><xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> Wywołanie metody<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> lub metody uzupełnia metodę dynamiczną.</span><span class="sxs-lookup"><span data-stu-id="81a83-442">Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method.</span></span> <span data-ttu-id="81a83-443">Wszelkie dalsze próby zmiany metody dynamicznej, takie jak modyfikowanie definicji parametrów lub emitowanie większej wersji języka pośredniego firmy Microsoft (MSIL), są ignorowane; nie zgłoszono żadnego wyjątku.</span><span class="sxs-lookup"><span data-stu-id="81a83-443">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="81a83-444">Aby utworzyć treść metody dla metody dynamicznej w przypadku posiadania własnego generatora MSIL, wywołaj metodę, <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> aby <xref:System.Reflection.Emit.DynamicILInfo> uzyskać obiekt.</span><span class="sxs-lookup"><span data-stu-id="81a83-444">To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="81a83-445">Jeśli nie masz własnego generatora MSIL, wywołaj <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> metodę, aby <xref:System.Reflection.Emit.ILGenerator> uzyskać obiekt, którego można użyć do wygenerowania treści metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-445">If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81a83-446">Poniższy przykład kodu tworzy metodę dynamiczną, która przyjmuje dwa parametry.</span><span class="sxs-lookup"><span data-stu-id="81a83-446">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="81a83-447">Przykład emituje prostą treść funkcji, która drukuje pierwszy parametr do konsoli, a w przykładzie używa drugiego parametru jako wartości zwracanej metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-447">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="81a83-448">Przykład uzupełnia metodę przez utworzenie delegata, wywołuje delegata z różnymi parametrami i wreszcie wywołuje metodę dynamiczną przy użyciu <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-448">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="81a83-449">Metoda dynamiczna nie ma treści metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-449">The dynamic method has no method body.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81a83-450"><paramref name="delegateType" />ma nieprawidłową liczbę parametrów lub nieprawidłowe typy parametrów.</span><span class="sxs-lookup"><span data-stu-id="81a83-450"><paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</span></span></exception>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="81a83-451">Instrukcje: Definiowanie i wykonywanie metod dynamicznych</span><span class="sxs-lookup"><span data-stu-id="81a83-451">How to: Define and Execute Dynamic Methods</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public override sealed Delegate CreateDelegate (Type delegateType, object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Delegate CreateDelegate(class System.Type delegateType, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CreateDelegate (delegateType As Type, target As Object) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Delegate ^ CreateDelegate(Type ^ delegateType, System::Object ^ target);" />
      <MemberSignature Language="F#" Value="override this.CreateDelegate : Type * obj -&gt; Delegate" Usage="dynamicMethod.CreateDelegate (delegateType, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="81a83-452">Typ delegata, którego sygnatura pasuje do metody dynamicznej, minus pierwszy parametr.</span><span class="sxs-lookup"><span data-stu-id="81a83-452">A delegate type whose signature matches that of the dynamic method, minus the first parameter.</span></span></param>
        <param name="target"><span data-ttu-id="81a83-453">Obiekt, z którym jest powiązany delegat.</span><span class="sxs-lookup"><span data-stu-id="81a83-453">An object the delegate is bound to.</span></span> <span data-ttu-id="81a83-454">Musi być tego samego typu co pierwszy parametr metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-454">Must be of the same type as the first parameter of the dynamic method.</span></span></param>
        <summary><span data-ttu-id="81a83-455">Kończy metodę dynamiczną i tworzy delegata, który może służyć do jego wykonywania, określając typ delegata i obiekt, z którym jest powiązany delegat.</span><span class="sxs-lookup"><span data-stu-id="81a83-455">Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.</span></span></summary>
        <returns><span data-ttu-id="81a83-456">Delegat określonego typu, który może służyć do wykonywania metody dynamicznej z określonym obiektem docelowym.</span><span class="sxs-lookup"><span data-stu-id="81a83-456">A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-457">To Przeciążenie metody tworzy delegata powiązanego z określonym obiektem.</span><span class="sxs-lookup"><span data-stu-id="81a83-457">This method overload creates a delegate bound to a particular object.</span></span> <span data-ttu-id="81a83-458">Delegat ten jest określany jako zamknięty w pierwszym argumencie.</span><span class="sxs-lookup"><span data-stu-id="81a83-458">Such a delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="81a83-459">Chociaż metoda jest statyczna, działa tak, jakby była metodą wystąpienia; wystąpienie jest `target`.</span><span class="sxs-lookup"><span data-stu-id="81a83-459">Although the method is static, it acts as if it were an instance method; the instance is `target`.</span></span>  
  
 <span data-ttu-id="81a83-460">To Przeciążenie metody musi `target` być tego samego typu co pierwszy parametr metody dynamicznej lub do przypisania do tego typu (na przykład klasy pochodnej).</span><span class="sxs-lookup"><span data-stu-id="81a83-460">This method overload requires `target` to be of the same type as the first parameter of the dynamic method, or to be assignable to that type (for example, a derived class).</span></span>  <span data-ttu-id="81a83-461">Sygnatura `delegateType` zawiera wszystkie parametry metody dynamicznej z wyjątkiem pierwszej.</span><span class="sxs-lookup"><span data-stu-id="81a83-461">The signature of `delegateType` has all the parameters of the dynamic method except the first.</span></span> <span data-ttu-id="81a83-462">Na przykład <xref:System.String>Jeśli metoda dynamiczna ma parametry, <xref:System.Int32>, i <xref:System.Byte>, `delegateType` zawiera parametry <xref:System.Int32> i <xref:System.Byte>; `target` jest typu <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="81a83-462">For example, if the dynamic method has the parameters <xref:System.String>, <xref:System.Int32>, and <xref:System.Byte>, then `delegateType` has the parameters <xref:System.Int32> and <xref:System.Byte>; `target` is of type <xref:System.String>.</span></span>  
  
 <span data-ttu-id="81a83-463"><xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> Wywołanie metody<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> lub metody uzupełnia metodę dynamiczną.</span><span class="sxs-lookup"><span data-stu-id="81a83-463">Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method.</span></span> <span data-ttu-id="81a83-464">Wszelkie dalsze próby zmiany metody dynamicznej, takie jak modyfikowanie definicji parametrów lub emitowanie większej wersji języka pośredniego firmy Microsoft (MSIL), są ignorowane; nie zgłoszono żadnego wyjątku.</span><span class="sxs-lookup"><span data-stu-id="81a83-464">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="81a83-465">Aby utworzyć treść metody dla metody dynamicznej w przypadku posiadania własnego generatora MSIL, wywołaj metodę, <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> aby <xref:System.Reflection.Emit.DynamicILInfo> uzyskać obiekt.</span><span class="sxs-lookup"><span data-stu-id="81a83-465">To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="81a83-466">Jeśli nie masz własnego generatora MSIL, wywołaj <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> metodę, aby <xref:System.Reflection.Emit.ILGenerator> uzyskać obiekt, którego można użyć do wygenerowania treści metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-466">If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81a83-467">Poniższy przykład kodu tworzy delegata, który wiąże <xref:System.Reflection.Emit.DynamicMethod> z wystąpieniem typu, tak aby metoda działała na tym samym wystąpieniu przy każdym wywołaniu.</span><span class="sxs-lookup"><span data-stu-id="81a83-467">The following code example creates delegate that binds a <xref:System.Reflection.Emit.DynamicMethod> to an instance of a type, so that the method acts on the same instance each time it is invoked.</span></span>  
  
 <span data-ttu-id="81a83-468">Przykładowy kod definiuje klasę o nazwie `Example` z polem prywatnym, klasy o nazwie `DerivedFromExample` pochodzącej od pierwszej klasy, typ delegata o nazwie `UseLikeStatic` , który zwraca <xref:System.Int32> i ma parametry typu `Example` i <xref:System.Int32>i typ delegata o nazwie `UseLikeInstance` , który <xref:System.Int32> zwraca i ma jeden parametr typu <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="81a83-468">The code example defines a class named `Example` with a private field, a class named `DerivedFromExample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="81a83-469">Następnie przykładowy kod tworzy <xref:System.Reflection.Emit.DynamicMethod> , który zmienia pole prywatne `Example` wystąpienia i zwraca poprzednią wartość.</span><span class="sxs-lookup"><span data-stu-id="81a83-469">The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81a83-470">Ogólnie rzecz biorąc, zmiana wewnętrznych pól klas nie jest dobrym sposobem programowania zorientowanego obiektowo.</span><span class="sxs-lookup"><span data-stu-id="81a83-470">In general, changing the internal fields of classes is not good object-oriented coding practice.</span></span>  
  
 <span data-ttu-id="81a83-471">Przykładowy kod tworzy wystąpienie `Example` , a następnie tworzy dwa Delegaty.</span><span class="sxs-lookup"><span data-stu-id="81a83-471">The example code creates an instance of `Example` and then creates two delegates.</span></span> <span data-ttu-id="81a83-472">Pierwszy jest typu `UseLikeStatic`, który ma te same parametry co metoda dynamiczna.</span><span class="sxs-lookup"><span data-stu-id="81a83-472">The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method.</span></span> <span data-ttu-id="81a83-473">Sekunda jest typu `UseLikeInstance`, który nie ma pierwszego parametru (typu `Example`).</span><span class="sxs-lookup"><span data-stu-id="81a83-473">The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`).</span></span> <span data-ttu-id="81a83-474">Ten delegat jest tworzony przy użyciu <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> przeciążenia metody; drugi parametr tego przeciążenia metody jest `Example`wystąpieniem, w tym przypadku wystąpienia właśnie utworzone, które jest powiązane z nowo utworzonym delegatem.</span><span class="sxs-lookup"><span data-stu-id="81a83-474">This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate.</span></span> <span data-ttu-id="81a83-475">Za każdym razem, gdy obiekt delegowany jest wywoływany, metoda dynamiczna `Example`działa w wystąpieniu związanym.</span><span class="sxs-lookup"><span data-stu-id="81a83-475">Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81a83-476">Jest to przykład reguł swobodnych dla powiązania delegata wprowadzonych w, [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]a także nowych przeciążeń <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-476">This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="81a83-477">Aby uzyskać więcej informacji, zobacz <xref:System.Delegate> Klasa.</span><span class="sxs-lookup"><span data-stu-id="81a83-477">For more information, see the <xref:System.Delegate> class.</span></span>  
  
 <span data-ttu-id="81a83-478">Obiekt delegowany jest wywoływany, przekazując w `Example` wystąpieniu, `UseLikeInstance` które jest powiązane z delegatem. `UseLikeStatic`</span><span class="sxs-lookup"><span data-stu-id="81a83-478">The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate.</span></span> <span data-ttu-id="81a83-479">Następnie obiekt delegowany jest wywoływany, aby oba Delegaty działały w tym `Example`samym wystąpieniu. `UseLikeInstance`</span><span class="sxs-lookup"><span data-stu-id="81a83-479">Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`.</span></span> <span data-ttu-id="81a83-480">Zmiany wartości pola wewnętrznego są wyświetlane po każdym wywołaniu.</span><span class="sxs-lookup"><span data-stu-id="81a83-480">The changes in the values of the internal field are displayed after each call.</span></span> <span data-ttu-id="81a83-481">Na `UseLikeInstance` koniec delegat jest powiązany z `DerivedFromExample`wystąpieniem, a wywołania delegatów są powtarzane.</span><span class="sxs-lookup"><span data-stu-id="81a83-481">Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromExample`, and the delegate calls are repeated.</span></span>  
  
 [!code-csharp[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/cs/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="81a83-482">Metoda dynamiczna nie ma treści metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-482">The dynamic method has no method body.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81a83-483"><paramref name="target" />nie jest tym samym typem co pierwszy parametr metody dynamicznej i nie można go przypisać do tego typu.</span><span class="sxs-lookup"><span data-stu-id="81a83-483"><paramref name="target" /> is not the same type as the first parameter of the dynamic method, and is not assignable to that type.</span></span>  
  
<span data-ttu-id="81a83-484">—lub—</span><span class="sxs-lookup"><span data-stu-id="81a83-484">-or-</span></span> 
 <span data-ttu-id="81a83-485"><paramref name="delegateType" />ma nieprawidłową liczbę parametrów lub nieprawidłowe typy parametrów.</span><span class="sxs-lookup"><span data-stu-id="81a83-485"><paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Reflection.Emit.DynamicMethod.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81a83-486">Pobiera typ, który deklaruje metodę, która jest zawsze <see langword="null" /> dla metod dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="81a83-486">Gets the type that declares the method, which is always <see langword="null" /> for dynamic methods.</span></span></summary>
        <value><span data-ttu-id="81a83-487">Zawsze <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-487">Always <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-488">Ta właściwość zawsze zwraca `null` dla metod dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="81a83-488">This property always returns `null` for dynamic methods.</span></span> <span data-ttu-id="81a83-489">Nawet wtedy, gdy metoda dynamiczna jest logicznie skojarzona z typem, nie jest deklarowana przez typ.</span><span class="sxs-lookup"><span data-stu-id="81a83-489">Even when a dynamic method is logically associated with a type, it is not declared by the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81a83-490">Poniższy przykład kodu wyświetla typ deklarujący metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-490">The following code example displays the declaring type of a dynamic method.</span></span> <span data-ttu-id="81a83-491">Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="81a83-491">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#23](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#23)]
 [!code-csharp[Reflection.DynamicMethod.All#23](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#23)]
 [!code-vb[Reflection.DynamicMethod.All#23](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineParameter">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ParameterBuilder DefineParameter (int position, System.Reflection.ParameterAttributes attributes, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ParameterBuilder DefineParameter(int32 position, valuetype System.Reflection.ParameterAttributes attributes, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineParameter (position As Integer, attributes As ParameterAttributes, parameterName As String) As ParameterBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ParameterBuilder ^ DefineParameter(int position, System::Reflection::ParameterAttributes attributes, System::String ^ parameterName);" />
      <MemberSignature Language="F#" Value="member this.DefineParameter : int * System.Reflection.ParameterAttributes * string -&gt; System.Reflection.Emit.ParameterBuilder" Usage="dynamicMethod.DefineParameter (position, attributes, parameterName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="attributes" Type="System.Reflection.ParameterAttributes" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="parameterName" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="position"><span data-ttu-id="81a83-492">Pozycja parametru na liście parametrów.</span><span class="sxs-lookup"><span data-stu-id="81a83-492">The position of the parameter in the parameter list.</span></span> <span data-ttu-id="81a83-493">Parametry są indeksowane Zaczynając od liczby 1 pierwszego parametru.</span><span class="sxs-lookup"><span data-stu-id="81a83-493">Parameters are indexed beginning with the number 1 for the first parameter.</span></span></param>
        <param name="attributes"><span data-ttu-id="81a83-494">Bitowa kombinacja <see cref="T:System.Reflection.ParameterAttributes" /> wartości, która określa atrybuty parametru.</span><span class="sxs-lookup"><span data-stu-id="81a83-494">A bitwise combination of <see cref="T:System.Reflection.ParameterAttributes" /> values that specifies the attributes of the parameter.</span></span></param>
        <param name="parameterName"><span data-ttu-id="81a83-495">Nazwa parametru.</span><span class="sxs-lookup"><span data-stu-id="81a83-495">The name of the parameter.</span></span> <span data-ttu-id="81a83-496">Nazwa może być ciągiem o zerowej długości.</span><span class="sxs-lookup"><span data-stu-id="81a83-496">The name can be a zero-length string.</span></span></param>
        <summary><span data-ttu-id="81a83-497">Definiuje parametr metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-497">Defines a parameter of the dynamic method.</span></span></summary>
        <returns><span data-ttu-id="81a83-498">Zawsze zwraca <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-498">Always returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-499">Jeśli `position` jest równa 0 <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> , Metoda odwołuje się do wartości zwracanej.</span><span class="sxs-lookup"><span data-stu-id="81a83-499">If `position` is 0, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method refers to the return value.</span></span> <span data-ttu-id="81a83-500">Ustawianie informacji o parametrach nie ma wpływu na wartość zwracaną.</span><span class="sxs-lookup"><span data-stu-id="81a83-500">Setting parameter information has no effect on the return value.</span></span>  
  
 <span data-ttu-id="81a83-501">Jeśli metoda dynamiczna została już ukończona, przez wywołanie <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> metody lub <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> Metoda nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="81a83-501">If the dynamic method has already been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method has no effect.</span></span> <span data-ttu-id="81a83-502">Nie zgłoszono żadnego wyjątku.</span><span class="sxs-lookup"><span data-stu-id="81a83-502">No exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81a83-503">Poniższy przykład kodu pokazuje, jak zdefiniować informacje o parametrach dla metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-503">The following code example shows how to define parameter information for a dynamic method.</span></span> <span data-ttu-id="81a83-504">Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="81a83-504">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#33](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#33)]
 [!code-csharp[Reflection.DynamicMethod.All#33](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#33)]
 [!code-vb[Reflection.DynamicMethod.All#33](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="81a83-505">Metoda nie ma parametrów.</span><span class="sxs-lookup"><span data-stu-id="81a83-505">The method has no parameters.</span></span>  
  
<span data-ttu-id="81a83-506">—lub—</span><span class="sxs-lookup"><span data-stu-id="81a83-506">-or-</span></span> 
 <span data-ttu-id="81a83-507"><paramref name="position" />jest mniejsza niż 0.</span><span class="sxs-lookup"><span data-stu-id="81a83-507"><paramref name="position" /> is less than 0.</span></span>  
  
<span data-ttu-id="81a83-508">—lub—</span><span class="sxs-lookup"><span data-stu-id="81a83-508">-or-</span></span> 
 <span data-ttu-id="81a83-509"><paramref name="position" />jest większa niż liczba parametrów metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-509"><paramref name="position" /> is greater than the number of the method's parameters.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetBaseDefinition">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo GetBaseDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo GetBaseDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBaseDefinition () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodInfo ^ GetBaseDefinition();" />
      <MemberSignature Language="F#" Value="override this.GetBaseDefinition : unit -&gt; System.Reflection.MethodInfo" Usage="dynamicMethod.GetBaseDefinition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="81a83-510">Zwraca podstawową implementację metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-510">Returns the base implementation for the method.</span></span></summary>
        <returns><span data-ttu-id="81a83-511">Podstawowa implementacja metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-511">The base implementation of the method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-512">Ta metoda zawsze zwraca bieżący `DynamicMethod` obiekt.</span><span class="sxs-lookup"><span data-stu-id="81a83-512">This method always returns the current `DynamicMethod` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="81a83-513">Zwraca atrybuty niestandardowe zastosowane do metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-513">Returns the custom attributes applied to the method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : bool -&gt; obj[]" Usage="dynamicMethod.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="inherit"><span data-ttu-id="81a83-514"><see langword="true" />Aby wyszukać łańcuch dziedziczenia metody w celu znalezienia atrybutów niestandardowych; <see langword="false" /> aby sprawdzić tylko bieżącą metodę.</span><span class="sxs-lookup"><span data-stu-id="81a83-514"><see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span></span></param>
        <summary><span data-ttu-id="81a83-515">Zwraca wszystkie atrybuty niestandardowe zdefiniowane dla metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-515">Returns all the custom attributes defined for the method.</span></span></summary>
        <returns><span data-ttu-id="81a83-516">Tablica obiektów reprezentująca wszystkie atrybuty niestandardowe metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-516">An array of objects representing all the custom attributes of the method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-517">Dla metod dynamicznych, określanie `true` dla `inherit` nie ma wpływu, ponieważ metoda nie jest zadeklarowana w typie.</span><span class="sxs-lookup"><span data-stu-id="81a83-517">For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81a83-518">Atrybuty niestandardowe nie są obecnie obsługiwane w metodach dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="81a83-518">Custom attributes are not currently supported on dynamic methods.</span></span> <span data-ttu-id="81a83-519">Jedynym zwracanym atrybutem <xref:System.Runtime.CompilerServices.MethodImplAttribute>jest; można łatwo uzyskać flagi implementacji metody <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> za pomocą metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-519">The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : Type * bool -&gt; obj[]" Usage="dynamicMethod.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="inherit" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="81a83-520"><see cref="T:System.Type" /> Reprezentujący typ atrybutu niestandardowego do zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="81a83-520">A <see cref="T:System.Type" /> representing the type of custom attribute to return.</span></span></param>
        <param name="inherit"><span data-ttu-id="81a83-521"><see langword="true" />Aby wyszukać łańcuch dziedziczenia metody w celu znalezienia atrybutów niestandardowych; <see langword="false" /> aby sprawdzić tylko bieżącą metodę.</span><span class="sxs-lookup"><span data-stu-id="81a83-521"><see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span></span></param>
        <summary><span data-ttu-id="81a83-522">Zwraca atrybuty niestandardowe określonego typu, które zostały zastosowane do metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-522">Returns the custom attributes of the specified type that have been applied to the method.</span></span></summary>
        <returns><span data-ttu-id="81a83-523">Tablica obiektów reprezentująca atrybuty metody typu <paramref name="attributeType" /> lub pochodne od typu. <paramref name="attributeType" /></span><span class="sxs-lookup"><span data-stu-id="81a83-523">An array of objects representing the attributes of the method that are of type <paramref name="attributeType" /> or derive from type <paramref name="attributeType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-524">Dla metod dynamicznych, określanie `true` dla `inherit` nie ma wpływu, ponieważ metoda nie jest zadeklarowana w typie.</span><span class="sxs-lookup"><span data-stu-id="81a83-524">For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81a83-525">Atrybuty niestandardowe nie są obecnie obsługiwane w metodach dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="81a83-525">Custom attributes are not currently supported on dynamic methods.</span></span> <span data-ttu-id="81a83-526">Jedynym zwracanym atrybutem <xref:System.Runtime.CompilerServices.MethodImplAttribute>jest; można łatwo uzyskać flagi implementacji metody <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> za pomocą metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-526">The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="81a83-527"><paramref name="attributeType" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-527"><paramref name="attributeType" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetDynamicILInfo">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.DynamicILInfo GetDynamicILInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.DynamicILInfo GetDynamicILInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDynamicILInfo () As DynamicILInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::DynamicILInfo ^ GetDynamicILInfo();" />
      <MemberSignature Language="F#" Value="member this.GetDynamicILInfo : unit -&gt; System.Reflection.Emit.DynamicILInfo" Usage="dynamicMethod.GetDynamicILInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.DynamicILInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="81a83-528"><see cref="T:System.Reflection.Emit.DynamicILInfo" /> Zwraca obiekt, którego można użyć do wygenerowania treści metody z tokenów metadanych, zakresów i strumieni języka pośredniego firmy Microsoft (MSIL).</span><span class="sxs-lookup"><span data-stu-id="81a83-528">Returns a <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object that can be used to generate a method body from metadata tokens, scopes, and Microsoft intermediate language (MSIL) streams.</span></span></summary>
        <returns><span data-ttu-id="81a83-529"><see cref="T:System.Reflection.Emit.DynamicILInfo" /> Obiekt, którego można użyć do wygenerowania treści metody z tokenów metadanych, zakresów i strumieni MSIL.</span><span class="sxs-lookup"><span data-stu-id="81a83-529">A <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object that can be used to generate a method body from metadata tokens, scopes, and MSIL streams.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-530"><xref:System.Reflection.Emit.DynamicILInfo> Klasa jest dostarczana do obsługi generowania kodu niezarządzanego.</span><span class="sxs-lookup"><span data-stu-id="81a83-530">The <xref:System.Reflection.Emit.DynamicILInfo> class is provided to support unmanaged code generation.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="81a83-531">Aby wykonać kod niezarządzany.</span><span class="sxs-lookup"><span data-stu-id="81a83-531">to execute unmanaged code.</span></span> <span data-ttu-id="81a83-532">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-532">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
        <altmember cref="T:System.Reflection.Emit.DynamicILInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetILGenerator">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="81a83-533">Zwraca generator MSIL, który może być używany do emitowania treści metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-533">Returns an MSIL generator that can be used to emit a body for the dynamic method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetILGenerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator () As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator();" />
      <MemberSignature Language="F#" Value="member this.GetILGenerator : unit -&gt; System.Reflection.Emit.ILGenerator" Usage="dynamicMethod.GetILGenerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="81a83-534">Zwraca generator języka pośredniego firmy Microsoft (MSIL) dla metody z domyślnym rozmiarem strumienia MSIL wynoszącym 64 bajtów.</span><span class="sxs-lookup"><span data-stu-id="81a83-534">Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.</span></span></summary>
        <returns><span data-ttu-id="81a83-535"><see cref="T:System.Reflection.Emit.ILGenerator" /> Obiekt dla metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-535">An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-536">Po ukończeniu metody dynamicznej przez wywołanie <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> metody lub <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> jakakolwiek kolejna próba dodania MSIL jest ignorowana.</span><span class="sxs-lookup"><span data-stu-id="81a83-536">After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored.</span></span> <span data-ttu-id="81a83-537">Nie zgłoszono żadnego wyjątku.</span><span class="sxs-lookup"><span data-stu-id="81a83-537">No exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81a83-538">Istnieją ograniczenia dotyczące niemożliwego do zweryfikowania kodu w metodach dynamicznych, nawet w niektórych scenariuszach z pełnym zaufaniem.</span><span class="sxs-lookup"><span data-stu-id="81a83-538">There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</span></span> <span data-ttu-id="81a83-539">Zobacz sekcję "weryfikacja" w artykule uwagi dla <xref:System.Reflection.Emit.DynamicMethod>.</span><span class="sxs-lookup"><span data-stu-id="81a83-539">See the "Verification" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81a83-540">Poniższy przykład kodu tworzy metodę dynamiczną, która przyjmuje dwa parametry.</span><span class="sxs-lookup"><span data-stu-id="81a83-540">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="81a83-541">Przykład emituje prostą treść funkcji, która drukuje pierwszy parametr do konsoli, a w przykładzie używa drugiego parametru jako wartości zwracanej metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-541">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="81a83-542">Przykład uzupełnia metodę przez utworzenie delegata, wywołuje delegata z różnymi parametrami i wreszcie wywołuje metodę dynamiczną przy użyciu <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-542">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="81a83-543">Instrukcje: Definiowanie i wykonywanie metod dynamicznych</span><span class="sxs-lookup"><span data-stu-id="81a83-543">How to: Define and Execute Dynamic Methods</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator (int streamSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator(int32 streamSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator (streamSize As Integer) As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator(int streamSize);" />
      <MemberSignature Language="F#" Value="member this.GetILGenerator : int -&gt; System.Reflection.Emit.ILGenerator" Usage="dynamicMethod.GetILGenerator streamSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="streamSize"><span data-ttu-id="81a83-544">Rozmiar strumienia MSIL w bajtach.</span><span class="sxs-lookup"><span data-stu-id="81a83-544">The size of the MSIL stream, in bytes.</span></span></param>
        <summary><span data-ttu-id="81a83-545">Zwraca generator języka pośredniego firmy Microsoft (MSIL) dla metody z określonym rozmiarem strumienia MSIL.</span><span class="sxs-lookup"><span data-stu-id="81a83-545">Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.</span></span></summary>
        <returns><span data-ttu-id="81a83-546"><see cref="T:System.Reflection.Emit.ILGenerator" /> Obiekt dla metody z określonym rozmiarem strumienia MSIL.</span><span class="sxs-lookup"><span data-stu-id="81a83-546">An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method, with the specified MSIL stream size.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-547">Po ukończeniu metody dynamicznej przez wywołanie <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> metody lub <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> jakakolwiek kolejna próba dodania MSIL jest ignorowana.</span><span class="sxs-lookup"><span data-stu-id="81a83-547">After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored.</span></span> <span data-ttu-id="81a83-548">Nie zgłoszono żadnego wyjątku.</span><span class="sxs-lookup"><span data-stu-id="81a83-548">No exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81a83-549">Istnieją ograniczenia dotyczące niemożliwego do zweryfikowania kodu w metodach dynamicznych, nawet w niektórych scenariuszach z pełnym zaufaniem.</span><span class="sxs-lookup"><span data-stu-id="81a83-549">There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</span></span> <span data-ttu-id="81a83-550">Zobacz sekcję "weryfikacja" w artykule uwagi dla <xref:System.Reflection.Emit.DynamicMethod>.</span><span class="sxs-lookup"><span data-stu-id="81a83-550">See the "Verification" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81a83-551">Poniższy przykład kodu demonstruje Przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-551">The following code example demonstrates this method overload.</span></span> <span data-ttu-id="81a83-552">Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="81a83-552">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#2](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#2)]
 [!code-csharp[Reflection.DynamicMethod.All#2](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#2)]
 [!code-vb[Reflection.DynamicMethod.All#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="81a83-553">Instrukcje: Definiowanie i wykonywanie metod dynamicznych</span><span class="sxs-lookup"><span data-stu-id="81a83-553">How to: Define and Execute Dynamic Methods</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Reflection.MethodImplAttributes GetMethodImplementationFlags() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMethodImplementationFlags () As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodImplAttributes GetMethodImplementationFlags();" />
      <MemberSignature Language="F#" Value="override this.GetMethodImplementationFlags : unit -&gt; System.Reflection.MethodImplAttributes" Usage="dynamicMethod.GetMethodImplementationFlags " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="81a83-554">Zwraca flagi implementacji dla metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-554">Returns the implementation flags for the method.</span></span></summary>
        <returns><span data-ttu-id="81a83-555">Bitowa kombinacja <see cref="T:System.Reflection.MethodImplAttributes" /> wartości reprezentujących flagi implementacji dla metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-555">A bitwise combination of <see cref="T:System.Reflection.MethodImplAttributes" /> values representing the implementation flags for the method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-556">Obecnie atrybuty implementacji metody dla metod dynamicznych są zawsze <xref:System.Reflection.MethodImplAttributes.IL> i. <xref:System.Reflection.MethodImplAttributes.NoInlining></span><span class="sxs-lookup"><span data-stu-id="81a83-556">Currently, method implementation attributes for dynamic methods are always <xref:System.Reflection.MethodImplAttributes.IL> and <xref:System.Reflection.MethodImplAttributes.NoInlining>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameters">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo[] GetParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ParameterInfo[] GetParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetParameters () As ParameterInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::ParameterInfo ^&gt; ^ GetParameters();" />
      <MemberSignature Language="F#" Value="override this.GetParameters : unit -&gt; System.Reflection.ParameterInfo[]" Usage="dynamicMethod.GetParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="81a83-557">Zwraca parametry metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-557">Returns the parameters of the dynamic method.</span></span></summary>
        <returns><span data-ttu-id="81a83-558">Tablica <see cref="T:System.Reflection.ParameterInfo" /> obiektów, która reprezentuje parametry metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-558">An array of <see cref="T:System.Reflection.ParameterInfo" /> objects that represent the parameters of the dynamic method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-559"><xref:System.Reflection.ParameterInfo> Obiekty zwracane przez tę metodę są wyłącznie do celów informacyjnych.</span><span class="sxs-lookup"><span data-stu-id="81a83-559">The <xref:System.Reflection.ParameterInfo> objects returned by this method are for information only.</span></span> <span data-ttu-id="81a83-560">Użyj metody <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> , aby ustawić lub zmienić charakterystyki parametrów.</span><span class="sxs-lookup"><span data-stu-id="81a83-560">Use the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method to set or change the characteristics of the parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81a83-561">Poniższy przykład kodu wyświetla parametry metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-561">The following code example displays the parameters of a dynamic method.</span></span> <span data-ttu-id="81a83-562">Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="81a83-562">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#34](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#34)]
 [!code-csharp[Reflection.DynamicMethod.All#34](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#34)]
 [!code-vb[Reflection.DynamicMethod.All#34](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="InitLocals">
      <MemberSignature Language="C#" Value="public bool InitLocals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InitLocals" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.InitLocals" />
      <MemberSignature Language="VB.NET" Value="Public Property InitLocals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InitLocals { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.InitLocals : bool with get, set" Usage="System.Reflection.Emit.DynamicMethod.InitLocals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81a83-563">Pobiera lub ustawia wartość wskazującą, czy zmienne lokalne w metodzie są inicjowane od zera.</span><span class="sxs-lookup"><span data-stu-id="81a83-563">Gets or sets a value indicating whether the local variables in the method are zero-initialized.</span></span></summary>
        <value><span data-ttu-id="81a83-564"><see langword="true" />Jeśli zmienne lokalne w metodzie są inicjowane od zera; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="81a83-564"><see langword="true" /> if the local variables in the method are zero-initialized; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="81a83-565">Wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-565">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-566">Jeśli ta właściwość jest ustawiona na `true`, emitowane języka pośredniego firmy Microsoft (MSIL) obejmuje inicjalizację zmiennych lokalnych.</span><span class="sxs-lookup"><span data-stu-id="81a83-566">If this property is set to `true`, the emitted Microsoft intermediate language (MSIL) includes initialization of local variables.</span></span> <span data-ttu-id="81a83-567">Jeśli jest ustawiona na `false`, zmienne lokalne nie są inicjowane, a wygenerowany kod jest niemożliwy do zweryfikowania.</span><span class="sxs-lookup"><span data-stu-id="81a83-567">If it is set to `false`, local variables are not initialized and the generated code is unverifiable.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81a83-568">Poniższy przykład kodu wyświetla <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> Właściwość metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-568">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property of a dynamic method.</span></span> <span data-ttu-id="81a83-569">Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="81a83-569">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#24](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#24)]
 [!code-csharp[Reflection.DynamicMethod.All#24](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#24)]
 [!code-vb[Reflection.DynamicMethod.All#24](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public override object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object Invoke(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ Invoke(System::Object ^ obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ parameters, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="override this.Invoke : obj * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="dynamicMethod.Invoke (obj, invokeAttr, binder, parameters, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Reflection.Binder" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="parameters" Type="System.Object[]" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="81a83-570">Ten parametr jest ignorowany dla metod dynamicznych, ponieważ są statyczne.</span><span class="sxs-lookup"><span data-stu-id="81a83-570">This parameter is ignored for dynamic methods, because they are static.</span></span> <span data-ttu-id="81a83-571">Określ <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-571">Specify <see langword="null" />.</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="81a83-572">Bitowa kombinacja <see cref="T:System.Reflection.BindingFlags" /> wartości.</span><span class="sxs-lookup"><span data-stu-id="81a83-572">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values.</span></span></param>
        <param name="binder"><span data-ttu-id="81a83-573">Obiekt, który umożliwia powiązanie, przekształcenie typów argumentów, wywoływanie elementów członkowskich oraz <see cref="T:System.Reflection.MemberInfo" /> pobieranie obiektów poprzez odbicie. <see cref="T:System.Reflection.Binder" /></span><span class="sxs-lookup"><span data-stu-id="81a83-573">A <see cref="T:System.Reflection.Binder" /> object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span></span> <span data-ttu-id="81a83-574">Jeśli <paramref name="binder" /> jest<see langword="null" />, używany jest domyślny spinacz.</span><span class="sxs-lookup"><span data-stu-id="81a83-574">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span></span> <span data-ttu-id="81a83-575">Aby uzyskać więcej informacji, <see cref="T:System.Reflection.Binder" />Zobacz.</span><span class="sxs-lookup"><span data-stu-id="81a83-575">For more details, see <see cref="T:System.Reflection.Binder" />.</span></span></param>
        <param name="parameters"><span data-ttu-id="81a83-576">Lista argumentów.</span><span class="sxs-lookup"><span data-stu-id="81a83-576">An argument list.</span></span> <span data-ttu-id="81a83-577">Jest to tablica argumentów o tej samej liczbie, kolejności i typie co parametry metody do wywołania.</span><span class="sxs-lookup"><span data-stu-id="81a83-577">This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked.</span></span> <span data-ttu-id="81a83-578">Jeśli nie ma żadnych parametrów, ten parametr powinien <see langword="null" />być.</span><span class="sxs-lookup"><span data-stu-id="81a83-578">If there are no parameters this parameter should be <see langword="null" />.</span></span></param>
        <param name="culture"><span data-ttu-id="81a83-579">Wystąpienie <see cref="T:System.Globalization.CultureInfo" /> używane do zarządzania przymusem typów.</span><span class="sxs-lookup"><span data-stu-id="81a83-579">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types.</span></span> <span data-ttu-id="81a83-580">Jeśli tak <see langword="null" /> <see cref="T:System.Globalization.CultureInfo" /> , jest używany dla bieżącego wątku.</span><span class="sxs-lookup"><span data-stu-id="81a83-580">If this is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span> <span data-ttu-id="81a83-581">Na przykład te informacje są konieczne do prawidłowej konwersji a <see cref="T:System.String" /> , która reprezentuje 1000 <see cref="T:System.Double" /> do wartości, ponieważ 1000 jest reprezentowane inaczej przez różne kultury.</span><span class="sxs-lookup"><span data-stu-id="81a83-581">For example, this information is needed to correctly convert a <see cref="T:System.String" /> that represents 1000 to a <see cref="T:System.Double" /> value, because 1000 is represented differently by different cultures.</span></span></param>
        <summary><span data-ttu-id="81a83-582">Wywołuje metodę dynamiczną przy użyciu określonych parametrów w ramach ograniczeń określonego spinacza z określonymi informacjami o kulturze.</span><span class="sxs-lookup"><span data-stu-id="81a83-582">Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.</span></span></summary>
        <returns><span data-ttu-id="81a83-583">A <see cref="T:System.Object" /> zawierająca wartość zwracaną wywołanej metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-583">A <see cref="T:System.Object" /> containing the return value of the invoked method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-584">Oprócz wymienionych wyjątków, kod wywołujący powinien zostać przygotowany do przechwytywania wszelkich wyjątków zgłoszonych przez metodę dynamiczną.</span><span class="sxs-lookup"><span data-stu-id="81a83-584">In addition to the listed exceptions, the calling code should be prepared to catch any exceptions thrown by the dynamic method.</span></span>  
  
 <span data-ttu-id="81a83-585">Wykonywanie metody dynamicznej z delegatem utworzonym przez <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> metodę jest wydajniejsze niż wykonywanie <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> przy użyciu metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-585">Executing a dynamic method with a delegate created by the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method is more efficient than executing it with the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 <span data-ttu-id="81a83-586"><xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> Wywołanie metody<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> lub metody uzupełnia metodę dynamiczną.</span><span class="sxs-lookup"><span data-stu-id="81a83-586">Calling the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method completes the dynamic method.</span></span> <span data-ttu-id="81a83-587">Wszelkie dalsze próby zmiany metody dynamicznej, takie jak modyfikowanie definicji parametrów lub emitowanie większej wersji języka pośredniego firmy Microsoft (MSIL), są ignorowane; nie zgłoszono żadnego wyjątku.</span><span class="sxs-lookup"><span data-stu-id="81a83-587">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="81a83-588">Wszystkie metody dynamiczne są statyczne, więc `obj` parametr jest zawsze ignorowany.</span><span class="sxs-lookup"><span data-stu-id="81a83-588">All dynamic methods are static, so the `obj` parameter is always ignored.</span></span> <span data-ttu-id="81a83-589">Aby traktować metodę dynamiczną tak, jakby była metodą wystąpienia, należy użyć <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> przeciążenia, które przyjmuje wystąpienie obiektu.</span><span class="sxs-lookup"><span data-stu-id="81a83-589">To treat a dynamic method as if it were an instance method, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> overload that takes an object instance.</span></span>  
  
 <span data-ttu-id="81a83-590">Jeśli metoda dynamiczna nie ma parametrów, wartość `parameters` powinna być. `null`</span><span class="sxs-lookup"><span data-stu-id="81a83-590">If the dynamic method has no parameters, the value of `parameters` should be `null`.</span></span> <span data-ttu-id="81a83-591">W przeciwnym razie liczba, typ i kolejność elementów w tablicy parametrów powinna być taka sama jak liczba, typ i kolejność parametrów metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-591">Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters of the dynamic method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81a83-592">To Przeciążenie metody jest wywoływane przez <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29> Przeciążenie metody dziedziczone <xref:System.Reflection.MethodBase> z klasy, więc powyższe uwagi dotyczą obu przeciążeń.</span><span class="sxs-lookup"><span data-stu-id="81a83-592">This method overload is called by the <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29> method overload inherited from the <xref:System.Reflection.MethodBase> class, so the preceding remarks apply to both overloads.</span></span>  
  
 <span data-ttu-id="81a83-593">Ta metoda nie wymaga bezpośredniego uprawnienia, ale wywołanie metody dynamicznej może skutkować zapotrzebowań na zabezpieczenia w zależności od metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-593">This method does not demand permissions directly, but invoking the dynamic method can result in security demands, depending on the method.</span></span> <span data-ttu-id="81a83-594">Na przykład nie są wykonywane żadne żądania dla anonimowo obsługiwanych metod dynamicznych, które są tworzone z `restrictedSkipVisibility` parametrem ustawionym na `false`.</span><span class="sxs-lookup"><span data-stu-id="81a83-594">For example, no demands are made for anonymously hosted dynamic methods that are created with the `restrictedSkipVisibility` parameter set to `false`.</span></span> <span data-ttu-id="81a83-595">Z drugiej strony, jeśli `restrictedSkipVisibility` utworzysz metodę z ustawionym na `true` tak, aby mógł uzyskać dostęp do ukrytego elementu członkowskiego zestawu docelowego, metoda spowoduje żądanie uprawnień zestawu <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> docelowego Plus <xref:System.Security.Permissions.ReflectionPermission> z flagą.</span><span class="sxs-lookup"><span data-stu-id="81a83-595">On the other hand, if you create a method with `restrictedSkipVisibility` set to `true` so it can access a hidden member of a target assembly, the method will cause a demand for the permissions of the target assembly plus <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81a83-596">Przed, ta metoda jest wymagana <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flagą. [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</span><span class="sxs-lookup"><span data-stu-id="81a83-596">Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flag.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81a83-597">Poniższy przykład kodu wywołuje metodę dynamiczną z dokładnym wiązaniem przy użyciu kultury US-English.</span><span class="sxs-lookup"><span data-stu-id="81a83-597">The following code example invokes a dynamic method with exact binding, using the US-English culture.</span></span> <span data-ttu-id="81a83-598">Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="81a83-598">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#4](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#4)]
 [!code-csharp[Reflection.DynamicMethod.All#4](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#4)]
 [!code-vb[Reflection.DynamicMethod.All#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="81a83-599">Konwencja <see cref="F:System.Reflection.CallingConventions.VarArgs" /> wywoływania nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="81a83-599">The <see cref="F:System.Reflection.CallingConventions.VarArgs" /> calling convention is not supported.</span></span></exception>
        <exception cref="T:System.Reflection.TargetParameterCountException"><span data-ttu-id="81a83-600">Liczba elementów w <paramref name="parameters" /> jest niezgodna z liczbą parametrów w metodzie dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-600">The number of elements in <paramref name="parameters" /> does not match the number of parameters in the dynamic method.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81a83-601">Typ co najmniej jednego elementu <paramref name="parameters" /> nie jest zgodny z typem odpowiedniego parametru metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-601">The type of one or more elements of <paramref name="parameters" /> does not match the type of the corresponding parameter of the dynamic method.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="81a83-602">Metoda dynamiczna jest skojarzona z modułem, nie jest hostowana anonimowo i została skonstruowana przy <see langword="false" />użyciu <paramref name="skipVisibility" /> wartości ustawionej na, ale metoda dynamiczna uzyskuje <see langword="internal" /> dostęp do elementów członkowskich, które nie <see langword="public" /> są lub (<see langword="Friend" /> w Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="81a83-602">The dynamic method is associated with a module, is not anonymously hosted, and was constructed with <paramref name="skipVisibility" /> set to <see langword="false" />, but the dynamic method accesses members that are not <see langword="public" /> or <see langword="internal" /> (<see langword="Friend" /> in Visual Basic).</span></span>  
  
<span data-ttu-id="81a83-603">—lub—</span><span class="sxs-lookup"><span data-stu-id="81a83-603">-or-</span></span> 
<span data-ttu-id="81a83-604">Metoda dynamiczna jest anonimowo hostowana i została zbudowana <paramref name="skipVisibility" /> z ustawioną na <see langword="false" />, ale uzyskuje dostęp do elementów <see langword="public" />Członkowskich, które nie są.</span><span class="sxs-lookup"><span data-stu-id="81a83-604">The dynamic method is anonymously hosted and was constructed with <paramref name="skipVisibility" /> set to <see langword="false" />, but it accesses members that are not <see langword="public" />.</span></span>  
  
<span data-ttu-id="81a83-605">—lub—</span><span class="sxs-lookup"><span data-stu-id="81a83-605">-or-</span></span> 
<span data-ttu-id="81a83-606">Metoda dynamiczna zawiera kod niemożliwy do zweryfikowania.</span><span class="sxs-lookup"><span data-stu-id="81a83-606">The dynamic method contains unverifiable code.</span></span> <span data-ttu-id="81a83-607">Zobacz sekcję "weryfikacja" w artykule uwagi dla <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-607">See the "Verification" section in Remarks for <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.IsDefined : Type * bool -&gt; bool" Usage="dynamicMethod.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="inherit" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="81a83-608"><see cref="T:System.Type" /> Reprezentujący typ atrybutu niestandardowego do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="81a83-608">A <see cref="T:System.Type" /> representing the type of custom attribute to search for.</span></span></param>
        <param name="inherit"><span data-ttu-id="81a83-609"><see langword="true" />Aby wyszukać łańcuch dziedziczenia metody w celu znalezienia atrybutów niestandardowych; <see langword="false" /> aby sprawdzić tylko bieżącą metodę.</span><span class="sxs-lookup"><span data-stu-id="81a83-609"><see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span></span></param>
        <summary><span data-ttu-id="81a83-610">Wskazuje, czy określony typ atrybutu niestandardowego jest zdefiniowany.</span><span class="sxs-lookup"><span data-stu-id="81a83-610">Indicates whether the specified custom attribute type is defined.</span></span></summary>
        <returns><span data-ttu-id="81a83-611"><see langword="true" />Jeśli określony typ atrybutu niestandardowego jest zdefiniowany; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="81a83-611"><see langword="true" /> if the specified custom attribute type is defined; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-612">Dla metod dynamicznych, określanie `true` dla `inherit` nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="81a83-612">For dynamic methods, specifying `true` for `inherit` has no effect.</span></span> <span data-ttu-id="81a83-613">Metody dynamiczne nie mają łańcucha dziedziczenia.</span><span class="sxs-lookup"><span data-stu-id="81a83-613">Dynamic methods have no inheritance chain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81a83-614">Atrybuty niestandardowe nie są obecnie obsługiwane w metodach dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="81a83-614">Custom attributes are not currently supported on dynamic methods.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityCritical : bool" Usage="System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81a83-615">Pobiera wartość wskazującą, czy bieżąca metoda dynamiczna ma krytyczne znaczenie dla zabezpieczeń lub zabezpieczenia-krytycznie, i w związku z tym może wykonywać krytyczne operacje.</span><span class="sxs-lookup"><span data-stu-id="81a83-615">Gets a value that indicates whether the current dynamic method is security-critical or security-safe-critical, and therefore can perform critical operations.</span></span></summary>
        <value><span data-ttu-id="81a83-616"><see langword="true" />Jeśli bieżąca metoda dynamiczna jest krytyczna dla zabezpieczeń lub bezpieczna-krytyczna; <see langword="false" /> jeśli jest przezroczysty.</span><span class="sxs-lookup"><span data-stu-id="81a83-616"><see langword="true" /> if the current dynamic method is security-critical or security-safe-critical; <see langword="false" /> if it is transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-617">Właściwości <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A> i<xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> raportują poziom przezroczystości metody dynamicznej zgodnie z definicją w środowisku uruchomieniowym języka wspólnego (CLR).</span><span class="sxs-lookup"><span data-stu-id="81a83-617">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="81a83-618">W poniższej tabeli przedstawiono kombinacje tych właściwości:</span><span class="sxs-lookup"><span data-stu-id="81a83-618">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="81a83-619">Poziom zabezpieczeń</span><span class="sxs-lookup"><span data-stu-id="81a83-619">Security level</span></span>|<span data-ttu-id="81a83-620">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="81a83-620">IsSecurityCritical</span></span>|<span data-ttu-id="81a83-621">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="81a83-621">IsSecuritySafeCritical</span></span>|<span data-ttu-id="81a83-622">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="81a83-622">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="81a83-623">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="81a83-623">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="81a83-624">Bezpieczne krytyczne</span><span class="sxs-lookup"><span data-stu-id="81a83-624">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="81a83-625">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="81a83-625">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="81a83-626">Korzystanie z tych właściwości jest znacznie prostsze niż badanie adnotacji zabezpieczeń zestawu i jego typów, sprawdzanie bieżącego poziomu zaufania i próba duplikowania reguł środowiska uruchomieniowego.</span><span class="sxs-lookup"><span data-stu-id="81a83-626">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="81a83-627">Przezroczystość metody dynamicznej zależy od modułu, z którym jest skojarzony.</span><span class="sxs-lookup"><span data-stu-id="81a83-627">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="81a83-628">Jeśli metoda dynamiczna jest skojarzona z typem, a nie modułem, jego przezroczystość zależy od modułu, który zawiera typ.</span><span class="sxs-lookup"><span data-stu-id="81a83-628">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="81a83-629">Metody dynamiczne nie mają adnotacji zabezpieczeń, dlatego są przypisywane domyślne ustawienia przezroczystości dla skojarzonego modułu.</span><span class="sxs-lookup"><span data-stu-id="81a83-629">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="81a83-630">Anonimowo hostowane metody dynamiczne są zawsze niewidoczne, ponieważ moduł udostępniany przez system jest przezroczysty.</span><span class="sxs-lookup"><span data-stu-id="81a83-630">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="81a83-631">Przezroczystość metody dynamicznej, która jest skojarzona z zaufanym zestawem (czyli zestaw o silnej nazwie, który jest zainstalowany w globalnej pamięci podręcznej zestawów), jest opisany w poniższej tabeli.</span><span class="sxs-lookup"><span data-stu-id="81a83-631">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="81a83-632">Adnotacja zestawu</span><span class="sxs-lookup"><span data-stu-id="81a83-632">Assembly annotation</span></span>|<span data-ttu-id="81a83-633">Przezroczystość poziomu 1</span><span class="sxs-lookup"><span data-stu-id="81a83-633">Level 1 transparency</span></span>|<span data-ttu-id="81a83-634">Przezroczystość poziomu 2</span><span class="sxs-lookup"><span data-stu-id="81a83-634">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="81a83-635">W pełni przezroczyste</span><span class="sxs-lookup"><span data-stu-id="81a83-635">Fully transparent</span></span>|<span data-ttu-id="81a83-636">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="81a83-636">Transparent</span></span>|<span data-ttu-id="81a83-637">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="81a83-637">Transparent</span></span>|  
    |<span data-ttu-id="81a83-638">W pełni krytyczne</span><span class="sxs-lookup"><span data-stu-id="81a83-638">Fully critical</span></span>|<span data-ttu-id="81a83-639">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="81a83-639">Critical</span></span>|<span data-ttu-id="81a83-640">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="81a83-640">Critical</span></span>|  
    |<span data-ttu-id="81a83-641">Przezroczystość mieszana</span><span class="sxs-lookup"><span data-stu-id="81a83-641">Mixed transparency</span></span>|<span data-ttu-id="81a83-642">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="81a83-642">Transparent</span></span>|<span data-ttu-id="81a83-643">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="81a83-643">Transparent</span></span>|  
    |<span data-ttu-id="81a83-644">Security-agnostic</span><span class="sxs-lookup"><span data-stu-id="81a83-644">Security-agnostic</span></span>|<span data-ttu-id="81a83-645">Bezpieczny-krytyczny</span><span class="sxs-lookup"><span data-stu-id="81a83-645">Safe-critical</span></span>|<span data-ttu-id="81a83-646">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="81a83-646">Critical</span></span>|  
  
     <span data-ttu-id="81a83-647">Na przykład, jeśli skojarzesz metodę dynamiczną z typem, który znajduje się w bibliotece Mscorlib. dll, która ma poziom 2 przezroczystość, metoda dynamiczna jest przezroczysta i nie można wykonać kodu krytycznego.</span><span class="sxs-lookup"><span data-stu-id="81a83-647">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="81a83-648">Aby uzyskać informacje na temat poziomów przezroczystości, zobacz [kod przezroczysty pod względem zabezpieczeń, poziom 1](~/docs/framework/misc/security-transparent-code-level-1.md) i [kod przezroczysty pod względem zabezpieczeń, poziom 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="81a83-648">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="81a83-649">Kojarzenie metody dynamicznej z modułem w zestawie zaufanych poziomów 1, który jest niezależny od zabezpieczeń, takich jak system. dll, nie zezwala na podniesienie zaufania.</span><span class="sxs-lookup"><span data-stu-id="81a83-649">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="81a83-650">Jeśli zestaw przyznany kod, który wywołuje metodę dynamiczną, nie zawiera zestawu przydzielenia system. dll (czyli pełnego zaufania), jest generowany, <xref:System.Security.SecurityException> gdy wywoływana jest metoda dynamiczna.</span><span class="sxs-lookup"><span data-stu-id="81a83-650">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="81a83-651">Przezroczystość metody dynamicznej, która jest skojarzona z częściowo zaufanym zestawem, zależy od sposobu ładowania zestawu.</span><span class="sxs-lookup"><span data-stu-id="81a83-651">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="81a83-652">Jeśli zestaw jest ładowany z częściowym zaufaniem (na przykład do domeny aplikacji w trybie piaskownicy), środowisko uruchomieniowe ignoruje adnotacje zabezpieczeń zestawu.</span><span class="sxs-lookup"><span data-stu-id="81a83-652">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="81a83-653">Zestaw i wszystkie jego typy i elementy członkowskie, w tym metody dynamiczne, są traktowane jako przezroczyste.</span><span class="sxs-lookup"><span data-stu-id="81a83-653">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="81a83-654">Środowisko uruchomieniowe płaci zwrócić uwagę na adnotacje zabezpieczeń tylko wtedy, gdy zestaw częściowego zaufania jest ładowany z pełnym zaufaniem (na przykład do domyślnej domeny aplikacji klasycznej).</span><span class="sxs-lookup"><span data-stu-id="81a83-654">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="81a83-655">W takim przypadku środowisko uruchomieniowe przypisuje metodę dynamiczną domyślną przezroczystość dla metod zgodnie z adnotacjami zestawu.</span><span class="sxs-lookup"><span data-stu-id="81a83-655">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="81a83-656">Aby uzyskać więcej informacji na temat emisji odbicia i przezroczystości, zobacz [problemy z zabezpieczeniami w emisji odbicia](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="81a83-656">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="81a83-657">Aby uzyskać informacje na temat przejrzystości, zobacz [zmiany zabezpieczeń](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="81a83-657">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="81a83-658">Metoda dynamiczna nie ma treści metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-658">The dynamic method doesn't have a method body.</span></span></exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="81a83-659">Problemy związane z zabezpieczeniami w emisji odbicia</span><span class="sxs-lookup"><span data-stu-id="81a83-659">Security Issues in Reflection Emit</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="81a83-660">Zagadnienia dotyczące zabezpieczeń dla odbicia</span><span class="sxs-lookup"><span data-stu-id="81a83-660">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="81a83-661">Zmiany zabezpieczeń w .NET Framework w wersji 4,0</span><span class="sxs-lookup"><span data-stu-id="81a83-661">Security Changes in the .NET Framework Version 4.0</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/5fd8f46d-3961-46a7-84af-2eb1f48e75cf"><span data-ttu-id="81a83-662">Kod przezroczysty pod względem zabezpieczeń, poziom 1</span><span class="sxs-lookup"><span data-stu-id="81a83-662">Security-Transparent Code, Level 1</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/4d05610a-0da6-4f08-acea-d54c9d6143c0"><span data-ttu-id="81a83-663">Kod o przezroczystym poziomie bezpieczeństwa, poziom 2</span><span class="sxs-lookup"><span data-stu-id="81a83-663">Security-Transparent Code, Level 2</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecuritySafeCritical : bool" Usage="System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81a83-664">Pobiera wartość wskazującą, czy bieżąca metoda dynamiczna jest w bezpiecznym stanie krytycznym na bieżącym poziomie zaufania; oznacza to, czy może wykonywać krytyczne operacje i można uzyskać do nich dostęp za pomocą przezroczystego kodu.</span><span class="sxs-lookup"><span data-stu-id="81a83-664">Gets a value that indicates whether the current dynamic method is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</span></span></summary>
        <value><span data-ttu-id="81a83-665"><see langword="true" />Jeśli metoda dynamiczna jest bezpieczna — zabezpieczenia krytyczne na bieżącym poziomie zaufania; <see langword="false" /> jeśli jest to zabezpieczenia krytyczne lub przezroczyste.</span><span class="sxs-lookup"><span data-stu-id="81a83-665"><see langword="true" /> if the dynamic method is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-666">Właściwości <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A> i<xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> raportują poziom przezroczystości metody dynamicznej zgodnie z definicją w środowisku uruchomieniowym języka wspólnego (CLR).</span><span class="sxs-lookup"><span data-stu-id="81a83-666">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="81a83-667">W poniższej tabeli przedstawiono kombinacje tych właściwości:</span><span class="sxs-lookup"><span data-stu-id="81a83-667">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="81a83-668">Poziom zabezpieczeń</span><span class="sxs-lookup"><span data-stu-id="81a83-668">Security level</span></span>|<span data-ttu-id="81a83-669">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="81a83-669">IsSecurityCritical</span></span>|<span data-ttu-id="81a83-670">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="81a83-670">IsSecuritySafeCritical</span></span>|<span data-ttu-id="81a83-671">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="81a83-671">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="81a83-672">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="81a83-672">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="81a83-673">Bezpieczne krytyczne</span><span class="sxs-lookup"><span data-stu-id="81a83-673">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="81a83-674">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="81a83-674">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="81a83-675">Korzystanie z tych właściwości jest znacznie prostsze niż badanie adnotacji zabezpieczeń zestawu i jego typów, sprawdzanie bieżącego poziomu zaufania i próba duplikowania reguł środowiska uruchomieniowego.</span><span class="sxs-lookup"><span data-stu-id="81a83-675">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="81a83-676">Przezroczystość metody dynamicznej zależy od modułu, z którym jest skojarzony.</span><span class="sxs-lookup"><span data-stu-id="81a83-676">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="81a83-677">Jeśli metoda dynamiczna jest skojarzona z typem, a nie modułem, jego przezroczystość zależy od modułu, który zawiera typ.</span><span class="sxs-lookup"><span data-stu-id="81a83-677">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="81a83-678">Metody dynamiczne nie mają adnotacji zabezpieczeń, dlatego są przypisywane domyślne ustawienia przezroczystości dla skojarzonego modułu.</span><span class="sxs-lookup"><span data-stu-id="81a83-678">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="81a83-679">Anonimowo hostowane metody dynamiczne są zawsze niewidoczne, ponieważ moduł udostępniany przez system jest przezroczysty.</span><span class="sxs-lookup"><span data-stu-id="81a83-679">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="81a83-680">Przezroczystość metody dynamicznej, która jest skojarzona z zaufanym zestawem (czyli zestaw o silnej nazwie, który jest zainstalowany w globalnej pamięci podręcznej zestawów), jest opisany w poniższej tabeli.</span><span class="sxs-lookup"><span data-stu-id="81a83-680">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="81a83-681">Adnotacja zestawu</span><span class="sxs-lookup"><span data-stu-id="81a83-681">Assembly annotation</span></span>|<span data-ttu-id="81a83-682">Przezroczystość poziomu 1</span><span class="sxs-lookup"><span data-stu-id="81a83-682">Level 1 transparency</span></span>|<span data-ttu-id="81a83-683">Przezroczystość poziomu 2</span><span class="sxs-lookup"><span data-stu-id="81a83-683">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="81a83-684">W pełni przezroczyste</span><span class="sxs-lookup"><span data-stu-id="81a83-684">Fully transparent</span></span>|<span data-ttu-id="81a83-685">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="81a83-685">Transparent</span></span>|<span data-ttu-id="81a83-686">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="81a83-686">Transparent</span></span>|  
    |<span data-ttu-id="81a83-687">W pełni krytyczne</span><span class="sxs-lookup"><span data-stu-id="81a83-687">Fully critical</span></span>|<span data-ttu-id="81a83-688">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="81a83-688">Critical</span></span>|<span data-ttu-id="81a83-689">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="81a83-689">Critical</span></span>|  
    |<span data-ttu-id="81a83-690">Przezroczystość mieszana</span><span class="sxs-lookup"><span data-stu-id="81a83-690">Mixed transparency</span></span>|<span data-ttu-id="81a83-691">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="81a83-691">Transparent</span></span>|<span data-ttu-id="81a83-692">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="81a83-692">Transparent</span></span>|  
    |<span data-ttu-id="81a83-693">Security-agnostic</span><span class="sxs-lookup"><span data-stu-id="81a83-693">Security-agnostic</span></span>|<span data-ttu-id="81a83-694">Bezpieczny-krytyczny</span><span class="sxs-lookup"><span data-stu-id="81a83-694">Safe-critical</span></span>|<span data-ttu-id="81a83-695">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="81a83-695">Critical</span></span>|  
  
     <span data-ttu-id="81a83-696">Na przykład, jeśli skojarzesz metodę dynamiczną z typem, który znajduje się w bibliotece Mscorlib. dll, która ma poziom 2 przezroczystość, metoda dynamiczna jest przezroczysta i nie można wykonać kodu krytycznego.</span><span class="sxs-lookup"><span data-stu-id="81a83-696">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="81a83-697">Aby uzyskać informacje na temat poziomów przezroczystości, zobacz [kod przezroczysty pod względem zabezpieczeń, poziom 1](~/docs/framework/misc/security-transparent-code-level-1.md) i [kod przezroczysty pod względem zabezpieczeń, poziom 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="81a83-697">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="81a83-698">Kojarzenie metody dynamicznej z modułem w zestawie zaufanych poziomów 1, który jest niezależny od zabezpieczeń, takich jak system. dll, nie zezwala na podniesienie zaufania.</span><span class="sxs-lookup"><span data-stu-id="81a83-698">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="81a83-699">Jeśli zestaw przyznany kod, który wywołuje metodę dynamiczną, nie zawiera zestawu przydzielenia system. dll (czyli pełnego zaufania), jest generowany, <xref:System.Security.SecurityException> gdy wywoływana jest metoda dynamiczna.</span><span class="sxs-lookup"><span data-stu-id="81a83-699">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="81a83-700">Przezroczystość metody dynamicznej, która jest skojarzona z częściowo zaufanym zestawem, zależy od sposobu ładowania zestawu.</span><span class="sxs-lookup"><span data-stu-id="81a83-700">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="81a83-701">Jeśli zestaw jest ładowany z częściowym zaufaniem (na przykład do domeny aplikacji w trybie piaskownicy), środowisko uruchomieniowe ignoruje adnotacje zabezpieczeń zestawu.</span><span class="sxs-lookup"><span data-stu-id="81a83-701">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="81a83-702">Zestaw i wszystkie jego typy i elementy członkowskie, w tym metody dynamiczne, są traktowane jako przezroczyste.</span><span class="sxs-lookup"><span data-stu-id="81a83-702">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="81a83-703">Środowisko uruchomieniowe płaci zwrócić uwagę na adnotacje zabezpieczeń tylko wtedy, gdy zestaw częściowego zaufania jest ładowany z pełnym zaufaniem (na przykład do domyślnej domeny aplikacji klasycznej).</span><span class="sxs-lookup"><span data-stu-id="81a83-703">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="81a83-704">W takim przypadku środowisko uruchomieniowe przypisuje metodę dynamiczną domyślną przezroczystość dla metod zgodnie z adnotacjami zestawu.</span><span class="sxs-lookup"><span data-stu-id="81a83-704">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="81a83-705">Aby uzyskać więcej informacji na temat emisji odbicia i przezroczystości, zobacz [problemy z zabezpieczeniami w emisji odbicia](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="81a83-705">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="81a83-706">Aby uzyskać informacje na temat przejrzystości, zobacz [zmiany zabezpieczeń](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="81a83-706">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="81a83-707">Metoda dynamiczna nie ma treści metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-707">The dynamic method doesn't have a method body.</span></span></exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="81a83-708">Problemy związane z zabezpieczeniami w emisji odbicia</span><span class="sxs-lookup"><span data-stu-id="81a83-708">Security Issues in Reflection Emit</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="81a83-709">Zagadnienia dotyczące zabezpieczeń dla odbicia</span><span class="sxs-lookup"><span data-stu-id="81a83-709">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="81a83-710">Zmiany zabezpieczeń w .NET Framework w wersji 4,0</span><span class="sxs-lookup"><span data-stu-id="81a83-710">Security Changes in the .NET Framework Version 4.0</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/5fd8f46d-3961-46a7-84af-2eb1f48e75cf"><span data-ttu-id="81a83-711">Kod przezroczysty pod względem zabezpieczeń, poziom 1</span><span class="sxs-lookup"><span data-stu-id="81a83-711">Security-Transparent Code, Level 1</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/4d05610a-0da6-4f08-acea-d54c9d6143c0"><span data-ttu-id="81a83-712">Kod o przezroczystym poziomie bezpieczeństwa, poziom 2</span><span class="sxs-lookup"><span data-stu-id="81a83-712">Security-Transparent Code, Level 2</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public override bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityTransparent : bool" Usage="System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81a83-713">Pobiera wartość wskazującą, czy bieżąca metoda dynamiczna jest przezroczysta na bieżącym poziomie zaufania, w związku z czym nie można wykonać operacji krytycznych.</span><span class="sxs-lookup"><span data-stu-id="81a83-713">Gets a value that indicates whether the current dynamic method is transparent at the current trust level, and therefore cannot perform critical operations.</span></span></summary>
        <value><span data-ttu-id="81a83-714"><see langword="true" />Jeśli metoda dynamiczna jest przezroczysta pod względem zabezpieczeń na bieżącym poziomie zaufania; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="81a83-714"><see langword="true" /> if the dynamic method is security-transparent at the current trust level; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-715">Właściwości <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A> i<xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> raportują poziom przezroczystości metody dynamicznej zgodnie z definicją w środowisku uruchomieniowym języka wspólnego (CLR).</span><span class="sxs-lookup"><span data-stu-id="81a83-715">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="81a83-716">W poniższej tabeli przedstawiono kombinacje tych właściwości:</span><span class="sxs-lookup"><span data-stu-id="81a83-716">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="81a83-717">Poziom zabezpieczeń</span><span class="sxs-lookup"><span data-stu-id="81a83-717">Security level</span></span>|<span data-ttu-id="81a83-718">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="81a83-718">IsSecurityCritical</span></span>|<span data-ttu-id="81a83-719">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="81a83-719">IsSecuritySafeCritical</span></span>|<span data-ttu-id="81a83-720">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="81a83-720">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="81a83-721">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="81a83-721">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="81a83-722">Bezpieczne krytyczne</span><span class="sxs-lookup"><span data-stu-id="81a83-722">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="81a83-723">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="81a83-723">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="81a83-724">Korzystanie z tych właściwości jest znacznie prostsze niż badanie adnotacji zabezpieczeń zestawu i jego typów, sprawdzanie bieżącego poziomu zaufania i próba duplikowania reguł środowiska uruchomieniowego.</span><span class="sxs-lookup"><span data-stu-id="81a83-724">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="81a83-725">Przezroczystość metody dynamicznej zależy od modułu, z którym jest skojarzony.</span><span class="sxs-lookup"><span data-stu-id="81a83-725">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="81a83-726">Jeśli metoda dynamiczna jest skojarzona z typem, a nie modułem, jego przezroczystość zależy od modułu, który zawiera typ.</span><span class="sxs-lookup"><span data-stu-id="81a83-726">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="81a83-727">Metody dynamiczne nie mają adnotacji zabezpieczeń, dlatego są przypisywane domyślne ustawienia przezroczystości dla skojarzonego modułu.</span><span class="sxs-lookup"><span data-stu-id="81a83-727">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="81a83-728">Anonimowo hostowane metody dynamiczne są zawsze niewidoczne, ponieważ moduł udostępniany przez system jest przezroczysty.</span><span class="sxs-lookup"><span data-stu-id="81a83-728">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="81a83-729">Przezroczystość metody dynamicznej, która jest skojarzona z zaufanym zestawem (czyli zestaw o silnej nazwie, który jest zainstalowany w globalnej pamięci podręcznej zestawów), jest opisany w poniższej tabeli.</span><span class="sxs-lookup"><span data-stu-id="81a83-729">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="81a83-730">Adnotacja zestawu</span><span class="sxs-lookup"><span data-stu-id="81a83-730">Assembly annotation</span></span>|<span data-ttu-id="81a83-731">Przezroczystość poziomu 1</span><span class="sxs-lookup"><span data-stu-id="81a83-731">Level 1 transparency</span></span>|<span data-ttu-id="81a83-732">Przezroczystość poziomu 2</span><span class="sxs-lookup"><span data-stu-id="81a83-732">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="81a83-733">W pełni przezroczyste</span><span class="sxs-lookup"><span data-stu-id="81a83-733">Fully transparent</span></span>|<span data-ttu-id="81a83-734">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="81a83-734">Transparent</span></span>|<span data-ttu-id="81a83-735">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="81a83-735">Transparent</span></span>|  
    |<span data-ttu-id="81a83-736">W pełni krytyczne</span><span class="sxs-lookup"><span data-stu-id="81a83-736">Fully critical</span></span>|<span data-ttu-id="81a83-737">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="81a83-737">Critical</span></span>|<span data-ttu-id="81a83-738">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="81a83-738">Critical</span></span>|  
    |<span data-ttu-id="81a83-739">Przezroczystość mieszana</span><span class="sxs-lookup"><span data-stu-id="81a83-739">Mixed transparency</span></span>|<span data-ttu-id="81a83-740">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="81a83-740">Transparent</span></span>|<span data-ttu-id="81a83-741">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="81a83-741">Transparent</span></span>|  
    |<span data-ttu-id="81a83-742">Security-agnostic</span><span class="sxs-lookup"><span data-stu-id="81a83-742">Security-agnostic</span></span>|<span data-ttu-id="81a83-743">Bezpieczny-krytyczny</span><span class="sxs-lookup"><span data-stu-id="81a83-743">Safe-critical</span></span>|<span data-ttu-id="81a83-744">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="81a83-744">Critical</span></span>|  
  
     <span data-ttu-id="81a83-745">Na przykład, jeśli skojarzesz metodę dynamiczną z typem, który znajduje się w bibliotece Mscorlib. dll, która ma poziom 2 przezroczystość, metoda dynamiczna jest przezroczysta i nie można wykonać kodu krytycznego.</span><span class="sxs-lookup"><span data-stu-id="81a83-745">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="81a83-746">Aby uzyskać informacje na temat poziomów przezroczystości, zobacz [kod przezroczysty pod względem zabezpieczeń, poziom 1](~/docs/framework/misc/security-transparent-code-level-1.md) i [kod przezroczysty pod względem zabezpieczeń, poziom 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="81a83-746">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="81a83-747">Kojarzenie metody dynamicznej z modułem w zestawie zaufanych poziomów 1, który jest niezależny od zabezpieczeń, takich jak system. dll, nie zezwala na podniesienie zaufania.</span><span class="sxs-lookup"><span data-stu-id="81a83-747">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="81a83-748">Jeśli zestaw przyznany kod, który wywołuje metodę dynamiczną, nie zawiera zestawu przydzielenia system. dll (czyli pełnego zaufania), jest generowany, <xref:System.Security.SecurityException> gdy wywoływana jest metoda dynamiczna.</span><span class="sxs-lookup"><span data-stu-id="81a83-748">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="81a83-749">Przezroczystość metody dynamicznej, która jest skojarzona z częściowo zaufanym zestawem, zależy od sposobu ładowania zestawu.</span><span class="sxs-lookup"><span data-stu-id="81a83-749">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="81a83-750">Jeśli zestaw jest ładowany z częściowym zaufaniem (na przykład do domeny aplikacji w trybie piaskownicy), środowisko uruchomieniowe ignoruje adnotacje zabezpieczeń zestawu.</span><span class="sxs-lookup"><span data-stu-id="81a83-750">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="81a83-751">Zestaw i wszystkie jego typy i elementy członkowskie, w tym metody dynamiczne, są traktowane jako przezroczyste.</span><span class="sxs-lookup"><span data-stu-id="81a83-751">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="81a83-752">Środowisko uruchomieniowe płaci zwrócić uwagę na adnotacje zabezpieczeń tylko wtedy, gdy zestaw częściowego zaufania jest ładowany z pełnym zaufaniem (na przykład do domyślnej domeny aplikacji klasycznej).</span><span class="sxs-lookup"><span data-stu-id="81a83-752">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="81a83-753">W takim przypadku środowisko uruchomieniowe przypisuje metodę dynamiczną domyślną przezroczystość dla metod zgodnie z adnotacjami zestawu.</span><span class="sxs-lookup"><span data-stu-id="81a83-753">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="81a83-754">Aby uzyskać więcej informacji na temat emisji odbicia i przezroczystości, zobacz [problemy z zabezpieczeniami w emisji odbicia](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="81a83-754">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="81a83-755">Aby uzyskać informacje na temat przejrzystości, zobacz [zmiany zabezpieczeń](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="81a83-755">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="81a83-756">Metoda dynamiczna nie ma treści metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-756">The dynamic method doesn't have a method body.</span></span></exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="81a83-757">Problemy związane z zabezpieczeniami w emisji odbicia</span><span class="sxs-lookup"><span data-stu-id="81a83-757">Security Issues in Reflection Emit</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="81a83-758">Zagadnienia dotyczące zabezpieczeń dla odbicia</span><span class="sxs-lookup"><span data-stu-id="81a83-758">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="81a83-759">Zmiany zabezpieczeń w .NET Framework w wersji 4,0</span><span class="sxs-lookup"><span data-stu-id="81a83-759">Security Changes in the .NET Framework Version 4.0</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/5fd8f46d-3961-46a7-84af-2eb1f48e75cf"><span data-ttu-id="81a83-760">Kod przezroczysty pod względem zabezpieczeń, poziom 1</span><span class="sxs-lookup"><span data-stu-id="81a83-760">Security-Transparent Code, Level 1</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/4d05610a-0da6-4f08-acea-d54c9d6143c0"><span data-ttu-id="81a83-761">Kod o przezroczystym poziomie bezpieczeństwa, poziom 2</span><span class="sxs-lookup"><span data-stu-id="81a83-761">Security-Transparent Code, Level 2</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MethodHandle">
      <MemberSignature Language="C#" Value="public override RuntimeMethodHandle MethodHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeMethodHandle MethodHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.MethodHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodHandle As RuntimeMethodHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeMethodHandle MethodHandle { RuntimeMethodHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.MethodHandle : RuntimeMethodHandle" Usage="System.Reflection.Emit.DynamicMethod.MethodHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeMethodHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81a83-762">Nieobsługiwane w metodach dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="81a83-762">Not supported for dynamic methods.</span></span></summary>
        <value><span data-ttu-id="81a83-763">Nieobsługiwane w metodach dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="81a83-763">Not supported for dynamic methods.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="81a83-764">Niedozwolone dla metod dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="81a83-764">Not allowed for dynamic methods.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes MethodImplementationFlags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodImplAttributes MethodImplementationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.MethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodImplementationFlags As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodImplAttributes MethodImplementationFlags { System::Reflection::MethodImplAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.MethodImplementationFlags : System.Reflection.MethodImplAttributes" Usage="System.Reflection.Emit.DynamicMethod.MethodImplementationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Reflection.Emit.DynamicMethod.Module" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81a83-765">Pobiera moduł, z którym metoda dynamiczna jest skojarzona logicznie.</span><span class="sxs-lookup"><span data-stu-id="81a83-765">Gets the module with which the dynamic method is logically associated.</span></span></summary>
        <value><span data-ttu-id="81a83-766"><see cref="T:System.Reflection.Module" /> Z którym jest skojarzona bieżąca metoda dynamiczna.</span><span class="sxs-lookup"><span data-stu-id="81a83-766">The <see cref="T:System.Reflection.Module" /> with which the current dynamic method is associated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-767">Jeśli moduł został określony podczas tworzenia metody dynamicznej, ta właściwość zwraca ten moduł.</span><span class="sxs-lookup"><span data-stu-id="81a83-767">If a module was specified when the dynamic method was created, this property returns that module.</span></span> <span data-ttu-id="81a83-768">Jeśli typ został określony jako właściciel podczas tworzenia metody dynamicznej, ta właściwość zwraca moduł, który zawiera ten typ.</span><span class="sxs-lookup"><span data-stu-id="81a83-768">If a type was specified as the owner when the dynamic method was created, this property returns the module which contains that type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81a83-769">Poniższy przykład kodu wyświetla <xref:System.Reflection.Emit.DynamicMethod.Module%2A> Właściwość metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-769">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.Module%2A> property of a dynamic method.</span></span> <span data-ttu-id="81a83-770">Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="81a83-770">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#26](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#26)]
 [!code-csharp[Reflection.DynamicMethod.All#26](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#26)]
 [!code-vb[Reflection.DynamicMethod.All#26](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Reflection.Emit.DynamicMethod.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81a83-771">Pobiera nazwę metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-771">Gets the name of the dynamic method.</span></span></summary>
        <value><span data-ttu-id="81a83-772">Prosta nazwa metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-772">The simple name of the method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="81a83-773">Nazwy metod dynamicznych nie są konieczne.</span><span class="sxs-lookup"><span data-stu-id="81a83-773">It is not necessary to name dynamic methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81a83-774">Poniższy przykład kodu wyświetla nazwę metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-774">The following code example displays the name of a dynamic method.</span></span> <span data-ttu-id="81a83-775">Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="81a83-775">This code example is part of a larger example provided for  the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#27](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#27)]
 [!code-csharp[Reflection.DynamicMethod.All#27](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#27)]
 [!code-vb[Reflection.DynamicMethod.All#27](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Reflection.Emit.DynamicMethod.ReflectedType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81a83-776">Pobiera klasę, która została użyta w odbiciu w celu uzyskania metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-776">Gets the class that was used in reflection to obtain the method.</span></span></summary>
        <value><span data-ttu-id="81a83-777">Zawsze <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-777">Always <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-778">Ta właściwość zawsze zwraca `null` dla metod dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="81a83-778">This property always returns `null` for dynamic methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81a83-779">Poniższy przykład kodu wyświetla typ odbicia metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-779">The following code example displays the reflected type of a dynamic method.</span></span> <span data-ttu-id="81a83-780">Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="81a83-780">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#28](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#28)]
 [!code-csharp[Reflection.DynamicMethod.All#28](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#28)]
 [!code-vb[Reflection.DynamicMethod.All#28](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnParameter">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo ReturnParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo ReturnParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnParameter As ParameterInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ParameterInfo ^ ReturnParameter { System::Reflection::ParameterInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnParameter : System.Reflection.ParameterInfo" Usage="System.Reflection.Emit.DynamicMethod.ReturnParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81a83-781">Pobiera parametr Return metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-781">Gets the return parameter of the dynamic method.</span></span></summary>
        <value><span data-ttu-id="81a83-782">Zawsze <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="81a83-782">Always <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-783">Ta właściwość zawsze zwraca `null` dla metod dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="81a83-783">This property always returns `null` for dynamic methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnType">
      <MemberSignature Language="C#" Value="public override Type ReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReturnType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReturnType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnType : Type" Usage="System.Reflection.Emit.DynamicMethod.ReturnType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81a83-784">Pobiera typ wartości zwracanej dla metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-784">Gets the type of return value for the dynamic method.</span></span></summary>
        <value><span data-ttu-id="81a83-785"><see cref="T:System.Type" /> Reprezentujący typ wartości zwracanej przez bieżącą metodę; <see cref="T:System.Void" /> Jeśli metoda nie ma zwracanego typu.</span><span class="sxs-lookup"><span data-stu-id="81a83-785">A <see cref="T:System.Type" /> representing the type of the return value of the current method; <see cref="T:System.Void" /> if the method has no return type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-786">Jeśli `null` została określona dla typu zwracanego podczas tworzenia metody dynamicznej, ta właściwość zwraca <xref:System.Void?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="81a83-786">If `null` was specified for the return type when the dynamic method was created, this property returns <xref:System.Void?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81a83-787">Poniższy przykład kodu wyświetla zwracany typ metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-787">The following code example displays the return type of a dynamic method.</span></span> <span data-ttu-id="81a83-788">Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="81a83-788">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#30](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#30)]
 [!code-csharp[Reflection.DynamicMethod.All#30](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#30)]
 [!code-vb[Reflection.DynamicMethod.All#30](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnTypeCustomAttributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnTypeCustomAttributes As ICustomAttributeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ICustomAttributeProvider ^ ReturnTypeCustomAttributes { System::Reflection::ICustomAttributeProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnTypeCustomAttributes : System.Reflection.ICustomAttributeProvider" Usage="System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81a83-789">Pobiera atrybuty niestandardowe typu zwracanego dla metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-789">Gets the custom attributes of the return type for the dynamic method.</span></span></summary>
        <value><span data-ttu-id="81a83-790"><see cref="T:System.Reflection.ICustomAttributeProvider" /> Reprezentujący atrybuty niestandardowe zwracanego typu dla metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-790">An <see cref="T:System.Reflection.ICustomAttributeProvider" /> representing the custom attributes of the return type for the dynamic method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-791">Atrybuty niestandardowe nie są obsługiwane w zwracanym typie metody dynamicznej, dlatego tablica atrybutów niestandardowych zwracanych przez <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A> metodę jest zawsze pusta.</span><span class="sxs-lookup"><span data-stu-id="81a83-791">Custom attributes are not supported on the return type of a dynamic method, so the array of custom attributes returned by the <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A> method is always empty.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81a83-792">Poniższy przykład kodu pokazuje, jak wyświetlić niestandardowe atrybuty typu zwracanego metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-792">The following code example shows how to display the custom attributes of the return type of a dynamic method.</span></span> <span data-ttu-id="81a83-793">Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="81a83-793">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#31](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#31)]
 [!code-csharp[Reflection.DynamicMethod.All#31](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#31)]
 [!code-vb[Reflection.DynamicMethod.All#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.ReturnType" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dynamicMethod.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="81a83-794">Zwraca sygnaturę metody reprezentowanej jako ciąg.</span><span class="sxs-lookup"><span data-stu-id="81a83-794">Returns the signature of the method, represented as a string.</span></span></summary>
        <returns><span data-ttu-id="81a83-795">Ciąg reprezentujący sygnaturę metody.</span><span class="sxs-lookup"><span data-stu-id="81a83-795">A string representing the method signature.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81a83-796">Sygnatura zawiera tylko typy i nazwę metody, jeśli istnieje.</span><span class="sxs-lookup"><span data-stu-id="81a83-796">The signature includes only types and the method name, if any.</span></span> <span data-ttu-id="81a83-797">Nazwy parametrów nie są uwzględniane.</span><span class="sxs-lookup"><span data-stu-id="81a83-797">Parameter names are not included.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81a83-798">Poniższy przykład kodu wyświetla <xref:System.Reflection.Emit.DynamicMethod.ToString%2A> metodę metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="81a83-798">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.ToString%2A> method of a dynamic method.</span></span> <span data-ttu-id="81a83-799">Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="81a83-799">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#32](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#32)]
 [!code-csharp[Reflection.DynamicMethod.All#32](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#32)]
 [!code-vb[Reflection.DynamicMethod.All#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
