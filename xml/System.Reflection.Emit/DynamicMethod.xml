<Type Name="DynamicMethod" FullName="System.Reflection.Emit.DynamicMethod">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1bd4c32b39444d8bae0938e364893b4e9b22d0bd" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52591105" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DynamicMethod : System.Reflection.MethodInfo" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DynamicMethod extends System.Reflection.MethodInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.DynamicMethod" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DynamicMethod&#xA;Inherits MethodInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicMethod sealed : System::Reflection::MethodInfo" />
  <TypeSignature Language="F#" Value="type DynamicMethod = class&#xA;    inherit MethodInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MethodInfo</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ddad6-101">Definiuje i reprezentuje metodę dynamiczną, która zostanie skompilowany, wykonywane i odrzucone.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ddad6-101">Defines and represents a dynamic method that can be compiled, executed, and discarded.</span>
      </span>
      <span data-ttu-id="ddad6-102">Odrzucono metody są dostępne do wyrzucania elementów bezużytecznych.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ddad6-102">Discarded methods are available for garbage collection.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-103">Możesz użyć <xref:System.Reflection.Emit.DynamicMethod> klasy do generowania i wykonać metodę w czasie wykonywania, bez konieczności Generowanie zestawu dynamicznego i typu dynamicznego, które zawierają metody.</span><span class="sxs-lookup"><span data-stu-id="ddad6-103">You can use the <xref:System.Reflection.Emit.DynamicMethod> class to generate and execute a method at run time, without having to generate a dynamic assembly and a dynamic type to contain the method.</span></span> <span data-ttu-id="ddad6-104">Kod wykonywalny utworzony przez kompilator just-in-time (JIT) są odzyskiwane podczas <xref:System.Reflection.Emit.DynamicMethod> obiektu są odzyskiwane.</span><span class="sxs-lookup"><span data-stu-id="ddad6-104">The executable code created by the just-in-time (JIT) compiler is reclaimed when the <xref:System.Reflection.Emit.DynamicMethod> object is reclaimed.</span></span> <span data-ttu-id="ddad6-105">Metody dynamiczne są najbardziej efektywny sposób, aby wygenerować i wykonać niewielką ilość kodu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-105">Dynamic methods are the most efficient way to generate and execute small amounts of code.</span></span>  
  
 <span data-ttu-id="ddad6-106">Anonimowo hostowane metody dynamiczne, lub może być logicznie powiązanych z modułu lub typu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-106">A dynamic method can be anonymously hosted, or it can be logically associated with a module or with a type.</span></span>  
  
-   <span data-ttu-id="ddad6-107">Jeśli anonimowo jest obsługiwana metoda dynamiczna, znajduje się w zestawie dostarczane przez system i dlatego jest odizolowane od innego kodu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-107">If the dynamic method is anonymously hosted, it is located in a system-provided assembly, and therefore is isolated from other code.</span></span> <span data-ttu-id="ddad6-108">Domyślnie go nie ma dostępu do żadnych danych bez publicznego.</span><span class="sxs-lookup"><span data-stu-id="ddad6-108">By default, it does not have access to any non-public data.</span></span> <span data-ttu-id="ddad6-109">Anonimowo obsługiwana metoda dynamiczna może ograniczone zdolności do pominięcia widoczności kompilator JIT, jeśli ma udzielonego <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flagi.</span><span class="sxs-lookup"><span data-stu-id="ddad6-109">An anonymously hosted dynamic method can have restricted ability to skip the JIT compiler's visibility checks, if it has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="ddad6-110">Poziom zaufania zestawu, którego niepubliczne składowe są dostępne przez metodę dynamiczną, musi być równy lub być podzbiorem wartości, stos wywołań, który emitowane metody dynamicznej poziom zaufania.</span><span class="sxs-lookup"><span data-stu-id="ddad6-110">The trust level of the assembly whose non-public members are accessed by the dynamic method must be equal to, or a subset of, the trust level of the call stack that emitted the dynamic method.</span></span> <span data-ttu-id="ddad6-111">Aby uzyskać więcej informacji na temat anonimowo obsługiwane metody dynamiczne, zobacz [wskazówki: emitowanie kodu w scenariuszach zaufania częściowego](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md).</span><span class="sxs-lookup"><span data-stu-id="ddad6-111">For more information about anonymously hosted dynamic methods, see [Walkthrough: Emitting Code in Partial Trust Scenarios](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md).</span></span>  
  
-   <span data-ttu-id="ddad6-112">Jeśli metoda dynamiczna jest skojarzony z modułem, który określisz, metoda dynamiczna jest skutecznie globalne do tego modułu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-112">If the dynamic method is associated with a module that you specify, the dynamic method is effectively global to that module.</span></span> <span data-ttu-id="ddad6-113">Będzie miał dostęp do wszystkich typów w module i wszystkie `internal` (`Friend` w języku Visual Basic) elementy członkowskie typu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-113">It can access all types in the module and all `internal` (`Friend` in Visual Basic) members of the types.</span></span> <span data-ttu-id="ddad6-114">Możesz skojarzyć dynamiczny metody z każdego modułu, niezależnie od tego, czy utworzony moduł, pod warunkiem, że popyt na <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flagi mogą być spełnione przez stos wywołań, który zawiera kod.</span><span class="sxs-lookup"><span data-stu-id="ddad6-114">You can associate a dynamic method with any module, regardless of whether you created the module, provided that a demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag can be satisfied by the call stack that includes your code.</span></span> <span data-ttu-id="ddad6-115">Jeśli <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flagi są objęte Przydziel, pominąć kontrole widoczność kompilator JIT i dostęp do prywatnych danych wszystkich typów zadeklarowane w module lub w inny moduł, w dowolnym zestawie metodę dynamiczną.</span><span class="sxs-lookup"><span data-stu-id="ddad6-115">If the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag is included in the grant, the dynamic method can skip the JIT compiler's visibility checks and access the private data of all types declared in the module or in any other module in any assembly.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="ddad6-116">Po określeniu modułu, z którym jest skojarzona metoda dynamiczna, ten moduł nie może być w zestawie dostarczane przez system, który jest używany do hostowania anonimowe.</span><span class="sxs-lookup"><span data-stu-id="ddad6-116">When you specify the module with which a dynamic method is associated, that module must not be in the system-provided assembly that is used for anonymous hosting.</span></span>  
  
-   <span data-ttu-id="ddad6-117">Jeśli metoda dynamiczna jest skojarzony z typem, który określisz, ma dostęp do wszystkich elementów członkowskich tego typu, niezależnie od tego poziomu dostępu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-117">If the dynamic method is associated with a type that you specify, it has access to all members of the type, regardless of access level.</span></span> <span data-ttu-id="ddad6-118">Ponadto możesz pominąć kontrole widoczność JIT.</span><span class="sxs-lookup"><span data-stu-id="ddad6-118">In addition, JIT visibility checks can be skipped.</span></span> <span data-ttu-id="ddad6-119">Daje to dynamicznej metody dostępu do prywatnych danych innych typów zadeklarowane w tym samym module lub w inny moduł, w dowolnym zestawie.</span><span class="sxs-lookup"><span data-stu-id="ddad6-119">This gives the dynamic method access to the private data of other types declared in the same module or in any other module in any assembly.</span></span> <span data-ttu-id="ddad6-120">Możesz skojarzyć metodę dynamiczną z dowolnego typu, ale Twój kod musi mieć przyznane <xref:System.Security.Permissions.ReflectionPermission> zarówno <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> i <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flag.</span><span class="sxs-lookup"><span data-stu-id="ddad6-120">You can associate a dynamic method with any type, but your code must be granted <xref:System.Security.Permissions.ReflectionPermission> with both the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> and <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flags.</span></span>  
  
 <span data-ttu-id="ddad6-121">W poniższej tabeli przedstawiono typy i elementy członkowskie są dostępne anonimowo obsługiwane metody dynamiczne, z lub bez kontroli widoczności JIT, w zależności od tego, czy <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> otrzymuje flagi.</span><span class="sxs-lookup"><span data-stu-id="ddad6-121">The following table shows which types and members are accessible to an anonymously hosted dynamic method, with and without JIT visibility checks, depending on whether <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag is granted.</span></span>  
  
||<span data-ttu-id="ddad6-122">Bez <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span><span class="sxs-lookup"><span data-stu-id="ddad6-122">Without <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span></span>|<span data-ttu-id="ddad6-123">za pomocą <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span><span class="sxs-lookup"><span data-stu-id="ddad6-123">With <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span></span>|  
|-|-|-|  
|<span data-ttu-id="ddad6-124">Bez pominięcia testów widoczności JIT</span><span class="sxs-lookup"><span data-stu-id="ddad6-124">Without skipping JIT visibility checks</span></span>|<span data-ttu-id="ddad6-125">Publiczne elementy członkowskie typów publicznych w każdym zestawie.</span><span class="sxs-lookup"><span data-stu-id="ddad6-125">Public members of public types in any assembly.</span></span>|<span data-ttu-id="ddad6-126">Publiczne elementy członkowskie typów publicznych w każdym zestawie.</span><span class="sxs-lookup"><span data-stu-id="ddad6-126">Public members of public types in any assembly.</span></span>|  
|<span data-ttu-id="ddad6-127">Pomijanie JIT sprawdzenie widoczność, bez ograniczeń</span><span class="sxs-lookup"><span data-stu-id="ddad6-127">Skipping JIT visibility checks, with restrictions</span></span>|<span data-ttu-id="ddad6-128">Publiczne elementy członkowskie typów publicznych w każdym zestawie.</span><span class="sxs-lookup"><span data-stu-id="ddad6-128">Public members of public types in any assembly.</span></span>|<span data-ttu-id="ddad6-129">Wszyscy członkowie wszystkich typów, tylko w zestawach, w których poziomy zaufania są równe lub mniejsze niż poziom zaufania zestawu, który jest emitowane metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="ddad6-129">All members of all types, only in assemblies whose trust levels are equal to or less than the trust level of the assembly that emitted the dynamic method.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-130">Przed [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], wymagany kod emisji <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flagi.</span><span class="sxs-lookup"><span data-stu-id="ddad6-130">Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], emitting code required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="ddad6-131">To uprawnienie jest zawarte domyślnie w FullTrust i LocalIntranet nazwane zestawy uprawnień, ale nie uprawnień internetowych zbioru.</span><span class="sxs-lookup"><span data-stu-id="ddad6-131">This permission is included by default in the FullTrust and LocalIntranet named permission sets, but not in the Internet permission set.</span></span> <span data-ttu-id="ddad6-132">Dlatego we wcześniejszych wersjach programu [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] biblioteki mogą być używane z Internetu uprawnień, tylko wtedy, gdy ma ona <xref:System.Security.SecurityCriticalAttribute> atrybutu i wykonuje również <xref:System.Security.PermissionSet.Assert%2A> dla <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>.</span><span class="sxs-lookup"><span data-stu-id="ddad6-132">Therefore, in earlier versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] a library can be used with Internet permissions only if it has the <xref:System.Security.SecurityCriticalAttribute> attribute and also executes an <xref:System.Security.PermissionSet.Assert%2A> for <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>.</span></span> <span data-ttu-id="ddad6-133">Takie biblioteki wymagają weryfikacji zabezpieczeń zachowania ostrożność, ponieważ kodowanie błędów może spowodować luki w zabezpieczeniach.</span><span class="sxs-lookup"><span data-stu-id="ddad6-133">Such libraries require careful security review because coding errors could result in security holes.</span></span> <span data-ttu-id="ddad6-134">[!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] Pozwala kod był emitowany w scenariuszach częściowej relacji zaufania, bez wydawania żadnych wymogów bezpieczeństwa, ponieważ generowanie kodu nie jest z natury uprzywilejowaną operacją.</span><span class="sxs-lookup"><span data-stu-id="ddad6-134">The [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] allows code to be emitted in partial trust scenarios without issuing any security demands, because generating code is not inherently a privileged operation.</span></span> <span data-ttu-id="ddad6-135">Oznacza to, że wygenerowany kod nie ma więcej uprawnień niż zestaw, który emituje go.</span><span class="sxs-lookup"><span data-stu-id="ddad6-135">That is, the generated code has no more permissions than the assembly that emits it.</span></span> <span data-ttu-id="ddad6-136">Dzięki temu biblioteki, które emitują kod, aby być przezroczyste dla zabezpieczeń i usuwa potrzebę zapewnienia <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>, która upraszcza proces bezpieczna biblioteka.</span><span class="sxs-lookup"><span data-stu-id="ddad6-136">This allows libraries that emit code to be security transparent and removes the need to assert <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>, which simplifies the task of writing a secure library.</span></span> <span data-ttu-id="ddad6-137">Aby użyć tej funkcji, powinien dotyczyć aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="ddad6-137">To use this feature, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 <span data-ttu-id="ddad6-138">W poniższej tabeli przedstawiono typy i elementy członkowskie są dostępne dla metodę dynamiczną, która jest skojarzona z modułu lub typu w module.</span><span class="sxs-lookup"><span data-stu-id="ddad6-138">The following table shows which types and members are accessible to a dynamic method that is associated with a module or with a type in a module.</span></span>  
  
||<span data-ttu-id="ddad6-139">Skojarzone z modułem</span><span class="sxs-lookup"><span data-stu-id="ddad6-139">Associated with module</span></span>|<span data-ttu-id="ddad6-140">Skojarzone z typem</span><span class="sxs-lookup"><span data-stu-id="ddad6-140">Associated with type</span></span>|  
|-|-|-|  
|<span data-ttu-id="ddad6-141">Bez pominięcia testów widoczności JIT</span><span class="sxs-lookup"><span data-stu-id="ddad6-141">Without skipping JIT visibility checks</span></span>|<span data-ttu-id="ddad6-142">Public i internal składowych typu publiczne, wewnętrzne i prywatne w module.</span><span class="sxs-lookup"><span data-stu-id="ddad6-142">Public and internal members of public, internal, and private types in the module.</span></span><br /><br /> <span data-ttu-id="ddad6-143">Publiczne elementy członkowskie typów publicznych w każdym zestawie.</span><span class="sxs-lookup"><span data-stu-id="ddad6-143">Public members of public types in any assembly.</span></span>|<span data-ttu-id="ddad6-144">Wszyscy członkowie skojarzonego typu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-144">All members of the associated type.</span></span> <span data-ttu-id="ddad6-145">Publicznych i wewnętrznych członków innych typów w module.</span><span class="sxs-lookup"><span data-stu-id="ddad6-145">Public and internal members of all the other types in the module.</span></span><br /><br /> <span data-ttu-id="ddad6-146">Publiczne elementy członkowskie typów publicznych w każdym zestawie.</span><span class="sxs-lookup"><span data-stu-id="ddad6-146">Public members of public types in any assembly.</span></span>|  
|<span data-ttu-id="ddad6-147">Pomijanie kontrole widoczność JIT</span><span class="sxs-lookup"><span data-stu-id="ddad6-147">Skipping JIT visibility checks</span></span>|<span data-ttu-id="ddad6-148">Wszyscy członkowie wszystkich typów w każdym zestawie.</span><span class="sxs-lookup"><span data-stu-id="ddad6-148">All members of all types in any assembly.</span></span>|<span data-ttu-id="ddad6-149">Wszyscy członkowie wszystkich typów w każdym zestawie.</span><span class="sxs-lookup"><span data-stu-id="ddad6-149">All members of all types in any assembly.</span></span>|  
  
 <span data-ttu-id="ddad6-150">Metoda dynamiczna, która jest skojarzona z modułem uprawnieniami tego modułu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-150">A dynamic method that is associated with a module has the permissions of that module.</span></span> <span data-ttu-id="ddad6-151">Metoda dynamiczna, która jest skojarzona z typem uprawnieniami moduł zawierający tego typu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-151">A dynamic method that is associated with a type has the permissions of the module containing that type.</span></span>  
  
 <span data-ttu-id="ddad6-152">Dynamicznych metod i ich parametrów nie muszą mieć nazwy, ale można określić nazwy, aby pomóc w debugowaniu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-152">Dynamic methods and their parameters do not have to be named, but you can specify names to assist in debugging.</span></span> <span data-ttu-id="ddad6-153">Atrybutów niestandardowych, które nie są obsługiwane w przypadku dynamicznych metod lub ich parametrów.</span><span class="sxs-lookup"><span data-stu-id="ddad6-153">Custom attributes are not supported on dynamic methods or their parameters.</span></span>  
  
 <span data-ttu-id="ddad6-154">Mimo że metody dynamiczne są `static` metody (`Shared` metod w języku Visual Basic), luźniejsze reguły dla powiązaniach delegatów wprowadzona w [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] dającą metodę dynamiczną, która ma być powiązana z obiektem, zachowuje się jak metoda wystąpienia podczas wywołuje się za pomocą tego wystąpienia delegata.</span><span class="sxs-lookup"><span data-stu-id="ddad6-154">Although dynamic methods are `static` methods (`Shared` methods in Visual Basic), the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] allow a dynamic method to be bound to an object, so that it acts like an instance method when called using that delegate instance.</span></span> <span data-ttu-id="ddad6-155">Przykład demonstrujący, to jest przewidziane <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="ddad6-155">An example that demonstrates this is provided for the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-156">W [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], nie obsługują metod dynamicznych, informacji o symbolach, który jest, nazwy zmiennych lokalnych i mapowanie numer wiersza.</span><span class="sxs-lookup"><span data-stu-id="ddad6-156">In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], dynamic methods do not support symbol information, that is, local variable names and line-number mapping.</span></span> <span data-ttu-id="ddad6-157">To ograniczenie może zostać usunięta w przyszłych wersjach.</span><span class="sxs-lookup"><span data-stu-id="ddad6-157">This limitation might be removed in a future version.</span></span> <span data-ttu-id="ddad6-158">Możesz użyć <xref:System.Reflection.Emit.AssemblyBuilder> podczas programowania do upraszczaj debugowanie wygenerowanego języka Microsoft intermediate language (MSIL), a następnie przełączyć się do metody dynamiczne podczas wdrażania końcowego, ponieważ <xref:System.Reflection.Emit.ILGenerator> wywołania są takie same w obu przypadkach.</span><span class="sxs-lookup"><span data-stu-id="ddad6-158">You can use <xref:System.Reflection.Emit.AssemblyBuilder> during development to simplify debugging the generated Microsoft intermediate language (MSIL), and then switch to dynamic methods during final deployment, because the <xref:System.Reflection.Emit.ILGenerator> calls are the same in both cases.</span></span>  
  
## <a name="verification"></a><span data-ttu-id="ddad6-159">Weryfikacja</span><span class="sxs-lookup"><span data-stu-id="ddad6-159">Verification</span></span>  
 <span data-ttu-id="ddad6-160">Poniższa lista zawiera podsumowanie warunków, w jakich metody dynamiczne mogą zawierać nieweryfikowalny kod.</span><span class="sxs-lookup"><span data-stu-id="ddad6-160">The following list summarizes the conditions under which dynamic methods can contain unverifiable code.</span></span> <span data-ttu-id="ddad6-161">(Na przykład nie jest metoda dynamiczna jeśli jego <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> właściwość jest ustawiona na `false`.)</span><span class="sxs-lookup"><span data-stu-id="ddad6-161">(For example, a dynamic method is unverifiable if its <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property is set to `false`.)</span></span>  
  
-   <span data-ttu-id="ddad6-162">Metoda dynamiczna, która jest skojarzona z zestawem zabezpieczenia krytyczny jest również zabezpieczenia krytyczny i można pominąć weryfikację.</span><span class="sxs-lookup"><span data-stu-id="ddad6-162">A dynamic method that is associated with a security-critical assembly is also security-critical, and can skip verification.</span></span> <span data-ttu-id="ddad6-163">Na przykład zestaw bez atrybuty zabezpieczeń, która działa jako aplikacja jest traktowany jako krytyczne dla bezpieczeństwa w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="ddad6-163">For example, an assembly without security attributes that is run as a desktop application is treated as security-critical by the runtime.</span></span> <span data-ttu-id="ddad6-164">Jeśli możesz skojarzyć metodę dynamiczną z zestawem, metoda dynamiczna może zawierać zweryfikowanie kodu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-164">If you associate a dynamic method with the assembly, the dynamic method can contain unverifiable code.</span></span>  
  
-   <span data-ttu-id="ddad6-165">Jeśli metoda dynamiczna, która zawiera nieweryfikowalny kod jest skojarzony z zestawu, który ma poziom 1 przejrzystości, kompilator just-in-time (JIT) wprowadza żądania zabezpieczeń.</span><span class="sxs-lookup"><span data-stu-id="ddad6-165">If a dynamic method that contains unverifiable code is associated with an assembly that has level 1 transparency, the just-in-time (JIT) compiler injects a security demand.</span></span> <span data-ttu-id="ddad6-166">Żądanie zakończy się powodzeniem, tylko wtedy, gdy metoda dynamiczna jest wykonywana przez całkowicie zaufanego kodu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-166">The demand succeeds only if the dynamic method is executed by fully trusted code.</span></span> <span data-ttu-id="ddad6-167">Zobacz [kod o przezroczystym poziomie bezpieczeństwa, poziom 1](~/docs/framework/misc/security-transparent-code-level-1.md).</span><span class="sxs-lookup"><span data-stu-id="ddad6-167">See [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md).</span></span>  
  
-   <span data-ttu-id="ddad6-168">Jeśli metoda dynamiczna, która zawiera nieweryfikowalny kod jest skojarzony z zestawu, który ma poziom 2 przezroczystości (mscorlib.dll), zgłasza wyjątek (wprowadzonym przez kompilator JIT) zamiast wywołania żądania zabezpieczeń.</span><span class="sxs-lookup"><span data-stu-id="ddad6-168">If a dynamic method that contains unverifiable code is associated with an assembly that has level 2 transparency (such as mscorlib.dll), it throws an exception (injected by the JIT compiler) instead of making a security demand.</span></span> <span data-ttu-id="ddad6-169">Zobacz [kod o przezroczystym poziomie bezpieczeństwa, poziom 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="ddad6-169">See [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
-   <span data-ttu-id="ddad6-170">Anonimowo obsługiwana metoda dynamiczna, która zawiera nieweryfikowalny kod zawsze zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="ddad6-170">An anonymously hosted dynamic method that contains unverifiable code always throws an exception.</span></span> <span data-ttu-id="ddad6-171">Można nigdy nie pominąć weryfikację, nawet jeśli jest tworzona i wykonywane przez całkowicie zaufanego kodu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-171">It can never skip verification, even if it is created and executed by fully trusted code.</span></span>  
  
 <span data-ttu-id="ddad6-172">Wyjątek, który jest generowany dla nieweryfikowalny kod zmienia się zależnie od sposobu, w których zostanie wywołana metoda dynamiczna.</span><span class="sxs-lookup"><span data-stu-id="ddad6-172">The exception that is thrown for unverifiable code varies depending on the way the dynamic method is invoked.</span></span> <span data-ttu-id="ddad6-173">Jeśli wywołujesz metodę dynamiczną za pomocą delegata zwróciło <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> metody <xref:System.Security.VerificationException> zgłaszany.</span><span class="sxs-lookup"><span data-stu-id="ddad6-173">If you invoke a dynamic method by using a delegate returned from the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method, a <xref:System.Security.VerificationException> is thrown.</span></span> <span data-ttu-id="ddad6-174">Jeśli wywołujesz metodę dynamiczną za pomocą <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metody <xref:System.Reflection.TargetInvocationException> jest generowany przy użyciu wewnętrznego <xref:System.Security.VerificationException>.</span><span class="sxs-lookup"><span data-stu-id="ddad6-174">If you invoke the dynamic method by using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, a <xref:System.Reflection.TargetInvocationException> is thrown with an inner <xref:System.Security.VerificationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddad6-175">Poniższy przykład kodu tworzy metodę dynamiczną, która przyjmuje dwa parametry.</span><span class="sxs-lookup"><span data-stu-id="ddad6-175">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="ddad6-176">Przykład emituje treści prostej funkcji, który wyświetla pierwszy parametr do konsoli, a w przykładzie użyto drugi parametr jako wartość zwracaną metody.</span><span class="sxs-lookup"><span data-stu-id="ddad6-176">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="ddad6-177">Przykład stanowi zakończenie metody dotyczy tworzenia delegata, wywołuje delegata z innymi parametrami i na koniec wywołuje metodę dynamiczną, przy użyciu <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="ddad6-177">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.All#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.All#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md">
      <span data-ttu-id="ddad6-178">Porady: definiowanie i wykonywanie metod dynamicznych</span>
      <span class="sxs-lookup">
        <span data-stu-id="ddad6-178">How to: Define and Execute Dynamic Methods</span>
      </span>
    </related>
    <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md">
      <span data-ttu-id="ddad6-179">Problemy związane z zabezpieczeniami w emisji odbicia</span>
      <span class="sxs-lookup">
        <span data-stu-id="ddad6-179">Security Issues in Reflection Emit</span>
      </span>
    </related>
    <related type="Article" href="~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md">
      <span data-ttu-id="ddad6-180">Wskazówki: emitowanie kodu w scenariuszach częściowo zaufanych</span>
      <span class="sxs-lookup">
        <span data-stu-id="ddad6-180">Walkthrough: Emitting Code in Partial Trust Scenarios</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ddad6-181">Tworzy metodę dynamiczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-181">Creates a dynamic method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ddad6-182">Nazwa metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-182">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="ddad6-183">Może to być ciągiem o zerowej długości, ale nie może być <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-183">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="ddad6-184">A <see cref="T:System.Type" /> obiekt, który określa zwracany typ metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma zwracanego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-184">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="ddad6-185">Tablica <see cref="T:System.Type" /> obiekty, określając typy parametrów metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-185">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ddad6-186">Inicjuje anonimowo obsługiwana metoda dynamiczna, określając nazwę metody, typ zwracany i typy parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-186">Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-187">Metoda dynamiczna, która jest tworzona przez ten konstruktor jest skojarzony z anonimowych zestawu, zamiast istniejącego typu lub modułu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-187">The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</span></span> <span data-ttu-id="ddad6-188">Anonimowy zestaw istnieje tylko w celu udostępnienia w środowisku piaskownicy dla metody dynamiczne, to znaczy, odizolowane od innego kodu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-188">The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</span></span> <span data-ttu-id="ddad6-189">Środowisko to sprawia, że bezpieczne dynamicznej metody, która ma być emitowane i wykonywane przez częściowo zaufany kod.</span><span class="sxs-lookup"><span data-stu-id="ddad6-189">This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</span></span>  
  
 <span data-ttu-id="ddad6-190">Ten konstruktor Określa, czy just-in-time (JIT) sprawdzenie widoczność zostaną wymuszone dla języka Microsoft intermediate language (MSIL) metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="ddad6-190">This constructor specifies that just-in-time (JIT) visibility checks will be enforced for the Microsoft intermediate language (MSIL) of the dynamic method.</span></span> <span data-ttu-id="ddad6-191">Oznacza to, że kod w metodzie dynamiczna ma dostęp do metod publicznych klas publicznych.</span><span class="sxs-lookup"><span data-stu-id="ddad6-191">That is, the code in the dynamic method has access to public methods of public classes.</span></span> <span data-ttu-id="ddad6-192">Są zgłaszane wyjątki, jeśli metoda próbuje uzyskać dostęp do typów lub elementów członkowskich, które są `private`, `protected`, lub `internal` (`Friend` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="ddad6-192">Exceptions are thrown if the method tries to access types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="ddad6-193">Aby utworzyć metodę dynamiczną, która ma ograniczone możliwości pominięcia testów widoczności JIT, należy użyć <xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="ddad6-193">To create a dynamic method that has restricted ability to skip JIT visibility checks, use the <xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29> constructor.</span></span>  
  
 <span data-ttu-id="ddad6-194">Gdy jest konstruowany anonimowo obsługiwana metoda dynamiczna, stos wywołań, emitującymi zgromadzenie jest dołączony.</span><span class="sxs-lookup"><span data-stu-id="ddad6-194">When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</span></span> <span data-ttu-id="ddad6-195">Gdy metoda jest wywoływana, uprawnieniami emitującymi zgromadzenie są używane zamiast uprawnień obiektu wywołującego rzeczywiste.</span><span class="sxs-lookup"><span data-stu-id="ddad6-195">When the method is invoked, the permissions of the emitting assembly are used instead of the permissions of the actual caller.</span></span> <span data-ttu-id="ddad6-196">Dlatego metoda dynamiczna nie można wykonać na wyższym poziomie uprawnień niż zestaw, do którego została wyemitowana, nawet jeśli jest przekazywany do i wykonywane przez zestaw, który ma wyższego poziomu zaufania.</span><span class="sxs-lookup"><span data-stu-id="ddad6-196">Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</span></span>  
  
 <span data-ttu-id="ddad6-197">Ten konstruktor określa atrybuty metody <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> i <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>i konwencji wywoływania <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="ddad6-197">This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and the calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-198">Ten konstruktor została wprowadzona w systemie [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="ddad6-198">This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ddad6-199">Element <paramref name="parameterTypes" /> jest <see langword="null" /> lub <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-199">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ddad6-200">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-200">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ddad6-201">
            <paramref name="returnType" /> jest to typ, dla którego <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-201">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md">
          <span data-ttu-id="ddad6-202">Porady: definiowanie i wykonywanie metod dynamicznych</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-202">How to: Define and Execute Dynamic Methods</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md">
          <span data-ttu-id="ddad6-203">Problemy związane z zabezpieczeniami w emisji odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-203">Security Issues in Reflection Emit</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md">
          <span data-ttu-id="ddad6-204">Wskazówki: emitowanie kodu w scenariuszach częściowo zaufanych</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-204">Walkthrough: Emitting Code in Partial Trust Scenarios</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, bool restrictedSkipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, bool restrictedSkipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), restrictedSkipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, bool restrictedSkipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, restrictedSkipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="restrictedSkipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ddad6-205">Nazwa metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-205">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="ddad6-206">Może to być ciągiem o zerowej długości, ale nie może być <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-206">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="ddad6-207">A <see cref="T:System.Type" /> obiekt, który określa zwracany typ metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma zwracanego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-207">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="ddad6-208">Tablica <see cref="T:System.Type" /> obiekty, określając typy parametrów metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-208">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="restrictedSkipVisibility">
          <span data-ttu-id="ddad6-209">
            <see langword="true" /> Aby pominąć JIT widoczność kontroli typów i elementów członkowskich uzyskiwał dostęp do MSIL metody dynamiczne, z tym ograniczeniem: poziom zaufania zestawów, które zawierają te typy i elementy członkowskie muszą być równe lub mniejsze niż poziom zaufania stosu wywołań, który emituje dynamiczne Metoda c; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-209">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method, with this restriction: the trust level of the assemblies that contain those types and members must be equal to or less than the trust level of the call stack that emits the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ddad6-210">Inicjuje anonimowo obsługiwana metoda dynamiczna, określając nazwę metody, zwracany typ, typy parametrów i tego, czy ma być pomijana just-in-time (JIT) widoczności dla typów i elementów członkowskich uzyskują języka Microsoft intermediate language (MSIL) z Metoda dynamiczna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-210">Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-211">Metoda dynamiczna, która jest tworzona przez ten konstruktor jest skojarzony z anonimowych zestawu, zamiast istniejącego typu lub modułu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-211">The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</span></span> <span data-ttu-id="ddad6-212">Anonimowy zestaw istnieje tylko w celu udostępnienia w środowisku piaskownicy dla metody dynamiczne, to znaczy, odizolowane od innego kodu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-212">The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</span></span> <span data-ttu-id="ddad6-213">Środowisko to sprawia, że bezpieczne dynamicznej metody, która ma być emitowane i wykonywane przez częściowo zaufany kod.</span><span class="sxs-lookup"><span data-stu-id="ddad6-213">This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</span></span>  
  
 <span data-ttu-id="ddad6-214">Anonimowo obsługiwane metody dynamiczne bez automatycznego dostępu do żadnych typów ani elementów członkowskich, które są `private`, `protected`, lub `internal` (`Friend` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="ddad6-214">Anonymously hosted dynamic methods do not have automatic access to any types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="ddad6-215">To różni się od metod dynamicznych, które są skojarzone z istniejącego typu lub modułu, które nie mają dostępu do ukrytych członków w ich skojarzone zakresie.</span><span class="sxs-lookup"><span data-stu-id="ddad6-215">This is different from dynamic methods that are associated with an existing type or module, which have access to hidden members in their associated scope.</span></span>  
  
 <span data-ttu-id="ddad6-216">Określ `true` dla `restrictedSkipVisibility` Jeśli metoda dynamiczna ma dostęp do typów lub elementów członkowskich, które są `private`, `protected`, lub `internal`.</span><span class="sxs-lookup"><span data-stu-id="ddad6-216">Specify `true` for `restrictedSkipVisibility` if your dynamic method has to access types or members that are `private`, `protected`, or `internal`.</span></span> <span data-ttu-id="ddad6-217">Daje to dostęp metodę dynamiczną, ograniczone do tych członków.</span><span class="sxs-lookup"><span data-stu-id="ddad6-217">This gives the dynamic method restricted access to these members.</span></span> <span data-ttu-id="ddad6-218">Oznacza to elementów członkowskich jest możliwy tylko wtedy, gdy są spełnione następujące warunki:</span><span class="sxs-lookup"><span data-stu-id="ddad6-218">That is, the members can be accessed only if the following conditions are met:</span></span>  
  
-   <span data-ttu-id="ddad6-219">Członków docelowych należy do zestawu, który ma poziom zaufania, równa lub mniejsza niż stos wywołań, który emituje metodę dynamiczną.</span><span class="sxs-lookup"><span data-stu-id="ddad6-219">The target members belong to an assembly that has a level of trust equal to or lower than the call stack that emits the dynamic method.</span></span>  
  
-   <span data-ttu-id="ddad6-220">Stos wywołań, który emituje metodę dynamiczną otrzymuje <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flagi.</span><span class="sxs-lookup"><span data-stu-id="ddad6-220">The call stack that emits the dynamic method is granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="ddad6-221">Jest to wartość true, zawsze wtedy, gdy kod jest wykonywany z pełnym zaufaniem.</span><span class="sxs-lookup"><span data-stu-id="ddad6-221">This is always true when the code is executed with full trust.</span></span> <span data-ttu-id="ddad6-222">Dla częściowo zaufanego kodu jest wartość true tylko wtedy, gdy host powoduje przyznanie uprawnień.</span><span class="sxs-lookup"><span data-stu-id="ddad6-222">For partially trusted code, it is true only if the host explicitly grants the permission.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="ddad6-223">Jeśli nie przyznano uprawnienia, wyjątek zabezpieczeń jest generowany, gdy <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> nosi nazwę lub gdy zostanie wywołana metoda dynamiczna, nie gdy ten konstruktor jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="ddad6-223">If the permission has not been granted, a security exception is thrown when <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> is called or when the dynamic method is invoked, not when this constructor is called.</span></span> <span data-ttu-id="ddad6-224">Żadne specjalne ustawienia nie są wymagane do emitowania metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="ddad6-224">No special permissions are required to emit the dynamic method.</span></span>  
  
 <span data-ttu-id="ddad6-225">Na przykład metodę dynamiczną, która jest tworzona przy użyciu `restrictedSkipVisibility` równa `true` można uzyskać dostęp do od prywatnej składowej każdy zespół w stosie wywołań gdy stos wywołań udzielono ograniczonego dostępu elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="ddad6-225">For example, a dynamic method that is created with `restrictedSkipVisibility` set to `true` can access a private member of any assembly on the call stack if the call stack has been granted restricted member access.</span></span> <span data-ttu-id="ddad6-226">Jeśli metoda dynamiczna jest tworzona przy użyciu częściowo zaufany kod w stosie wywołań, nie można uzyskać dostępu od prywatnej składowej typu w [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] zestawu, ponieważ takie zestawy są w pełni zaufane.</span><span class="sxs-lookup"><span data-stu-id="ddad6-226">If the dynamic method is created with partially trusted code on the call stack, it cannot access a private member of a type in a [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] assembly, because such assemblies are fully trusted.</span></span>  
  
 <span data-ttu-id="ddad6-227">Jeśli `restrictedSkipVisibility` jest `false`, sprawdzenie widoczność JIT są wymuszane.</span><span class="sxs-lookup"><span data-stu-id="ddad6-227">If `restrictedSkipVisibility` is `false`, JIT visibility checks are enforced.</span></span> <span data-ttu-id="ddad6-228">Kod w metodzie dynamiczna ma dostęp do metod publicznych klas publicznych oraz zgłaszania wyjątków, jeśli próbuje uzyskać dostęp do typów lub elementów członkowskich, które są `private`, `protected`, lub `internal`.</span><span class="sxs-lookup"><span data-stu-id="ddad6-228">The code in the dynamic method has access to public methods of public classes, and exceptions are thrown if it tries to access types or members that are `private`, `protected`, or `internal`.</span></span>  
  
 <span data-ttu-id="ddad6-229">Gdy jest konstruowany anonimowo obsługiwana metoda dynamiczna, stos wywołań, emitującymi zgromadzenie jest dołączony.</span><span class="sxs-lookup"><span data-stu-id="ddad6-229">When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</span></span> <span data-ttu-id="ddad6-230">Po wywołaniu metody uprawnienia emitowanie stosu wywołań są używane zamiast uprawnień rzeczywistego obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="ddad6-230">When the method is invoked, the permissions of the emitting call stack are used instead of the permissions of the actual caller.</span></span> <span data-ttu-id="ddad6-231">Dlatego metoda dynamiczna nie można wykonać na wyższym poziomie uprawnień niż zestaw, do którego została wyemitowana, nawet jeśli jest przekazywany do i wykonywane przez zestaw, który ma wyższego poziomu zaufania.</span><span class="sxs-lookup"><span data-stu-id="ddad6-231">Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</span></span>  
  
 <span data-ttu-id="ddad6-232">Ten konstruktor określa atrybuty metody <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> i <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>i konwencji wywoływania <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="ddad6-232">This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and the calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-233">Ten konstruktor została wprowadzona w systemie [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="ddad6-233">This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ddad6-234">Element <paramref name="parameterTypes" /> jest <see langword="null" /> lub <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-234">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ddad6-235">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-235">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ddad6-236">
            <paramref name="returnType" /> jest to typ, dla którego <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-236">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md">
          <span data-ttu-id="ddad6-237">Porady: definiowanie i wykonywanie metod dynamicznych</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-237">How to: Define and Execute Dynamic Methods</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md">
          <span data-ttu-id="ddad6-238">Problemy związane z zabezpieczeniami w emisji odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-238">Security Issues in Reflection Emit</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md">
          <span data-ttu-id="ddad6-239">Wskazówki: emitowanie kodu w scenariuszach częściowo zaufanych</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-239">Walkthrough: Emitting Code in Partial Trust Scenarios</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), m As Module)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * System.Reflection.Module -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, m)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ddad6-240">Nazwa metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-240">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="ddad6-241">Może to być ciągiem o zerowej długości, ale nie może być <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-241">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="ddad6-242">A <see cref="T:System.Type" /> obiekt, który określa zwracany typ metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma zwracanego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-242">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="ddad6-243">Tablica <see cref="T:System.Type" /> obiekty, określając typy parametrów metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-243">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="m">
          <span data-ttu-id="ddad6-244">A <see cref="T:System.Reflection.Module" /> reprezentujący modułu, z którym ma być logicznie powiązanych metodę dynamiczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-244">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ddad6-245">Tworzy metodę dynamiczną, która jest globalna do modułu, określając nazwę metody, zwracany typ, typy parametrów i moduł.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-245">Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-246">Ten konstruktor określa atrybuty metody <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> i <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, Konwencja wywoływania <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>i nie powoduje pominięcia testów widoczności usługi just-in-time (JIT).</span><span class="sxs-lookup"><span data-stu-id="ddad6-246">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>, and does not skip just-in-time (JIT) visibility checks.</span></span>  
  
 <span data-ttu-id="ddad6-247">Metoda dynamiczna utworzonych za pomocą tego konstruktora ma dostęp do publicznego i `internal` (`Friend` w języku Visual Basic) elementy członkowskie wszystkich typów, które są zawarte w module `m`.</span><span class="sxs-lookup"><span data-stu-id="ddad6-247">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types contained in module `m`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-248">W celu zapewnienia zgodności z poprzednimi wersjami zażąda tego konstruktora <xref:System.Security.Permissions.SecurityPermission> z <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flagę, jeśli są oba następujące warunki true: `m` jest modułem innych niż modułu wywołującego i popytu na <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flagi nie powiodło się.</span><span class="sxs-lookup"><span data-stu-id="ddad6-248">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="ddad6-249">Jeśli zapotrzebowanie na <xref:System.Security.Permissions.SecurityPermission> zakończy się powodzeniem, ta operacja jest dozwolona.</span><span class="sxs-lookup"><span data-stu-id="ddad6-249">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-250">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ten element członkowski nie wymaga już <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flagi.</span><span class="sxs-lookup"><span data-stu-id="ddad6-250">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="ddad6-251">(Zobacz [problemy związane z zabezpieczeniami, w odbiciu emisji](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Aby używać tej funkcji, powinien dotyczyć aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="ddad6-251">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddad6-252">Poniższy przykład kodu tworzy metodę dynamiczną, która przyjmuje dwa parametry.</span><span class="sxs-lookup"><span data-stu-id="ddad6-252">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="ddad6-253">Przykład emituje treści prostej funkcji, który wyświetla pierwszy parametr do konsoli, a w przykładzie użyto drugi parametr jako wartość zwracaną metody.</span><span class="sxs-lookup"><span data-stu-id="ddad6-253">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="ddad6-254">Przykład stanowi zakończenie metody dotyczy tworzenia delegata, wywołuje delegata z innymi parametrami i na koniec wywołuje metodę dynamiczną, przy użyciu <xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> metody.</span><span class="sxs-lookup"><span data-stu-id="ddad6-254">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ddad6-255">Element <paramref name="parameterTypes" /> jest <see langword="null" /> lub <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-255">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="ddad6-256">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-256">-or-</span>
          </span>
          <span data-ttu-id="ddad6-257">
            <paramref name="m" /> jest to moduł, który zapewnia hosting anonimowo dla metod dynamicznych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-257">
              <paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ddad6-258">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-258">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ddad6-259">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-259">-or-</span>
          </span>
          <span data-ttu-id="ddad6-260">
            <paramref name="m" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-260">
              <paramref name="m" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ddad6-261">
            <paramref name="returnType" /> jest to typ, dla którego <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-261">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ddad6-262">Aby skojarzyć metodę dynamiczną z modułu innej niż moduł wywoływania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-262">to associate the dynamic method with a module other than the calling module.</span>
          </span>
          <span data-ttu-id="ddad6-263">Powiązane wyliczenie: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-263">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md">
          <span data-ttu-id="ddad6-264">Porady: definiowanie i wykonywanie metod dynamicznych</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-264">How to: Define and Execute Dynamic Methods</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md">
          <span data-ttu-id="ddad6-265">Problemy związane z zabezpieczeniami w emisji odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-265">Security Issues in Reflection Emit</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), owner As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * Type -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, owner)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ddad6-266">Nazwa metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-266">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="ddad6-267">Może to być ciągiem o zerowej długości, ale nie może być <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-267">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="ddad6-268">A <see cref="T:System.Type" /> obiekt, który określa zwracany typ metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma zwracanego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-268">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="ddad6-269">Tablica <see cref="T:System.Type" /> obiekty, określając typy parametrów metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-269">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="owner">
          <span data-ttu-id="ddad6-270">A <see cref="T:System.Type" /> za pomocą którego metoda dynamiczna jest logicznie powiązanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-270">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span>
          </span>
          <span data-ttu-id="ddad6-271">Metoda dynamiczna ma dostęp do wszystkich elementów członkowskich tego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-271">The dynamic method has access to all members of the type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ddad6-272">Tworzy metodę dynamiczną, określając nazwę metody, zwracany typ, typy parametrów i typ za pomocą którego metoda dynamiczna jest logicznie powiązanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-272">Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-273">Metoda dynamiczna utworzonych za pomocą tego konstruktora ma dostęp do wszystkich elementów członkowskich typu `owner`i na publiczne i `internal` (`Friend` w języku Visual Basic) innych typów w module, który zawiera `owner`.</span><span class="sxs-lookup"><span data-stu-id="ddad6-273">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`.</span></span>  
  
 <span data-ttu-id="ddad6-274">Ten konstruktor określa atrybuty metody <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> i <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, Konwencja wywoływania <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>i nie powoduje pominięcia testów widoczności usługi just-in-time (JIT).</span><span class="sxs-lookup"><span data-stu-id="ddad6-274">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>, and does not skip just-in-time (JIT) visibility checks.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-275">W celu zapewnienia zgodności z poprzednimi wersjami zażąda tego konstruktora <xref:System.Security.Permissions.SecurityPermission> z <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flagę, jeśli są oba następujące warunki true: `owner` jest w module innych niż modułu wywołującego i popytu na <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> Flaga nie powiodło się.</span><span class="sxs-lookup"><span data-stu-id="ddad6-275">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="ddad6-276">Jeśli zapotrzebowanie na <xref:System.Security.Permissions.SecurityPermission> zakończy się powodzeniem, ta operacja jest dozwolona.</span><span class="sxs-lookup"><span data-stu-id="ddad6-276">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-277">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ten element członkowski nie wymaga już <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flagi.</span><span class="sxs-lookup"><span data-stu-id="ddad6-277">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="ddad6-278">(Zobacz [problemy związane z zabezpieczeniami, w odbiciu emisji](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Aby używać tej funkcji, powinien dotyczyć aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="ddad6-278">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddad6-279">Poniższy przykład kodu tworzy <xref:System.Reflection.Emit.DynamicMethod> logicznie skojarzony z typem.</span><span class="sxs-lookup"><span data-stu-id="ddad6-279">The following code example creates a <xref:System.Reflection.Emit.DynamicMethod> that is logically associated with a type.</span></span> <span data-ttu-id="ddad6-280">To skojarzenie udostępnia ona prywatnych elementów członkowskich tego typu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-280">This association gives it access to the private members of that type.</span></span>  
  
 <span data-ttu-id="ddad6-281">Przykładowy kod definiuje klasę o nazwie `Example` za pomocą pola prywatnego, klasę o nazwie `DerivedFromxample` pochodząca z pierwszej klasy, typ delegata, o nazwie `UseLikeStatic` zwracającego <xref:System.Int32> i ma następujące parametry typu `Example` i <xref:System.Int32>, a typ delegata, o nazwie `UseLikeInstance` zwracającego <xref:System.Int32> i ma jeden parametr typu <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="ddad6-281">The code example defines a class named `Example` with a private field, a class named `DerivedFromxample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="ddad6-282">Następnie kod przykładowy tworzy <xref:System.Reflection.Emit.DynamicMethod> zmienia się pole private wystąpienia `Example` i zwraca poprzednią wartość.</span><span class="sxs-lookup"><span data-stu-id="ddad6-282">The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-283">Ogólnie rzecz biorąc zmiana wewnętrznego pól klasy nie jest dobry obiektowe rozwiązaniem kodowania.</span><span class="sxs-lookup"><span data-stu-id="ddad6-283">In general, changing the internal fields of classes is not good object-oriented coding practice.</span></span>  
  
 <span data-ttu-id="ddad6-284">Przykładowy kod tworzy wystąpienie `Example` , a następnie tworzy dwa delegaty.</span><span class="sxs-lookup"><span data-stu-id="ddad6-284">The example code creates an instance of `Example` and then creates two delegates.</span></span> <span data-ttu-id="ddad6-285">Pierwszy jest typu `UseLikeStatic`, który ma te same parametry jako metodę dynamiczną.</span><span class="sxs-lookup"><span data-stu-id="ddad6-285">The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method.</span></span> <span data-ttu-id="ddad6-286">Drugą jest wartość typu `UseLikeInstance`, który nie ma pierwszy parametr (typu `Example`).</span><span class="sxs-lookup"><span data-stu-id="ddad6-286">The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`).</span></span> <span data-ttu-id="ddad6-287">Ten delegat jest tworzony przy użyciu <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> przeciążenie metody; drugi parametr przeciążenia tej metody jest wystąpieniem `Example`, w tym przypadku wystąpienie został właśnie utworzony, który jest powiązany z nowo utworzonego obiektu delegowanego.</span><span class="sxs-lookup"><span data-stu-id="ddad6-287">This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate.</span></span> <span data-ttu-id="ddad6-288">Zawsze, gdy ten obiekt delegowany jest wywoływany, metodę dynamiczną działa na komputerze z wystąpieniem powiązanej `Example`.</span><span class="sxs-lookup"><span data-stu-id="ddad6-288">Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-289">To przykład swobodna reguł powiązaniach delegatów wprowadzona w [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], wraz z nowe przeciążenia <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="ddad6-289">This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="ddad6-290">Aby uzyskać więcej informacji, zobacz <xref:System.Delegate> klasy.</span><span class="sxs-lookup"><span data-stu-id="ddad6-290">For more information, see the <xref:System.Delegate> class.</span></span>  
  
 <span data-ttu-id="ddad6-291">`UseLikeStatic` Obiekt delegowany jest wywoływany, przekazując wystąpienie elementu `Example` , jest powiązany z `UseLikeInstance` delegować.</span><span class="sxs-lookup"><span data-stu-id="ddad6-291">The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate.</span></span> <span data-ttu-id="ddad6-292">A następnie `UseLikeInstance` obiekt delegowany jest wywoływany tak, aby obie delegatów działa na tym samym wystąpieniu programu `Example`.</span><span class="sxs-lookup"><span data-stu-id="ddad6-292">Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`.</span></span> <span data-ttu-id="ddad6-293">Zmiany w wartościach wewnętrzne pola są wyświetlane po każdym wywołaniu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-293">The changes in the values of the internal field are displayed after each call.</span></span> <span data-ttu-id="ddad6-294">Na koniec `UseLikeInstance` delegata jest powiązany do wystąpienia `DerivedFromxample`, rok i wywołuje delegata.</span><span class="sxs-lookup"><span data-stu-id="ddad6-294">Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromxample`, and the delegate calls are repeated.</span></span>  
  
 [!code-csharp[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/cs/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ddad6-295">Element <paramref name="parameterTypes" /> jest <see langword="null" /> lub <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-295">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="ddad6-296">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-296">-or-</span>
          </span>
          <span data-ttu-id="ddad6-297">
            <paramref name="owner" /> to interfejs, tablica, to otwarty typ ogólny lub parametr typu ogólnego lub metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-297">
              <paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ddad6-298">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-298">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ddad6-299">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-299">-or-</span>
          </span>
          <span data-ttu-id="ddad6-300">
            <paramref name="owner" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-300">
              <paramref name="owner" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ddad6-301">
            <paramref name="returnType" /> jest <see langword="null" />, lub jest to typ, dla którego <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-301">
              <paramref name="returnType" /> is <see langword="null" />, or is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ddad6-302">Aby skojarzyć metodę dynamiczną z typem w module niż modułu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-302">to associate the dynamic method with a type in a module other than the calling module.</span>
          </span>
          <span data-ttu-id="ddad6-303">Powiązane wyliczenie: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-303">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md">
          <span data-ttu-id="ddad6-304">Porady: definiowanie i wykonywanie metod dynamicznych</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-304">How to: Define and Execute Dynamic Methods</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md">
          <span data-ttu-id="ddad6-305">Problemy związane z zabezpieczeniami w emisji odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-305">Security Issues in Reflection Emit</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), m As Module, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * System.Reflection.Module * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, m, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ddad6-306">Nazwa metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-306">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="ddad6-307">Może to być ciągiem o zerowej długości, ale nie może być <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-307">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="ddad6-308">A <see cref="T:System.Type" /> obiekt, który określa zwracany typ metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma zwracanego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-308">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="ddad6-309">Tablica <see cref="T:System.Type" /> obiekty, określając typy parametrów metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-309">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="m">
          <span data-ttu-id="ddad6-310">A <see cref="T:System.Reflection.Module" /> reprezentujący modułu, z którym ma być logicznie powiązanych metodę dynamiczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-310">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span>
          </span>
        </param>
        <param name="skipVisibility">
          <span data-ttu-id="ddad6-311">
            <see langword="true" /> Aby pominąć JIT widoczność kontroli typów i elementów członkowskich uzyskiwał dostęp do MSIL metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-311">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ddad6-312">Tworzy dynamiczny metodę, która jest globalne do modułu, określając nazwę metody zwracają typ, typy parametrów, moduł i czy widoczności just-in-time (JIT) — sprawdza, czy ma być pomijana dla typów i elementów członkowskich uzyskiwał dostęp do języka Microsoft intermediate language (MSIL) metody dynamiczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-312">Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-313">Ten konstruktor określa atrybuty metody <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> i <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>i konwencji wywoływania <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="ddad6-313">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="ddad6-314">Metoda dynamiczna utworzonych za pomocą tego konstruktora ma dostęp do publicznego i `internal` (`Friend` w języku Visual Basic) elementy członkowskie wszystkich typów w module zawarte `m`.</span><span class="sxs-lookup"><span data-stu-id="ddad6-314">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types in contained module `m`.</span></span> <span data-ttu-id="ddad6-315">Pomijanie JIT kompilatora widoczności umożliwia metodę dynamiczną dostęp do prywatnych i chronionych elementów członkowskich wszystkie pozostałe typy także.</span><span class="sxs-lookup"><span data-stu-id="ddad6-315">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="ddad6-316">Jest to przydatne, na przykład podczas pisania kodu do wykonywania serializacji obiektów.</span><span class="sxs-lookup"><span data-stu-id="ddad6-316">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-317">W celu zapewnienia zgodności z poprzednimi wersjami zażąda tego konstruktora <xref:System.Security.Permissions.SecurityPermission> z <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flagę, jeśli są oba następujące warunki true: `m` jest modułem innych niż modułu wywołującego i popytu na <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flagi nie powiodło się.</span><span class="sxs-lookup"><span data-stu-id="ddad6-317">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="ddad6-318">Jeśli zapotrzebowanie na <xref:System.Security.Permissions.SecurityPermission> zakończy się powodzeniem, ta operacja jest dozwolona.</span><span class="sxs-lookup"><span data-stu-id="ddad6-318">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-319">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ten element członkowski nie wymaga już <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flagi.</span><span class="sxs-lookup"><span data-stu-id="ddad6-319">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="ddad6-320">(Zobacz [problemy związane z zabezpieczeniami, w odbiciu emisji](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Aby używać tej funkcji, powinien dotyczyć aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="ddad6-320">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ddad6-321">Element <paramref name="parameterTypes" /> jest <see langword="null" /> lub <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-321">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="ddad6-322">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-322">-or-</span>
          </span>
          <span data-ttu-id="ddad6-323">
            <paramref name="m" /> jest to moduł, który zapewnia hosting anonimowo dla metod dynamicznych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-323">
              <paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ddad6-324">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-324">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ddad6-325">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-325">-or-</span>
          </span>
          <span data-ttu-id="ddad6-326">
            <paramref name="m" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-326">
              <paramref name="m" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ddad6-327">
            <paramref name="returnType" /> jest to typ, dla którego <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-327">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ddad6-328">Aby skojarzyć metodę dynamiczną z modułu innej niż moduł wywoływania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-328">to associate the dynamic method with a module other than the calling module.</span>
          </span>
          <span data-ttu-id="ddad6-329">Powiązane wyliczenie: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-329">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md">
          <span data-ttu-id="ddad6-330">Porady: definiowanie i wykonywanie metod dynamicznych</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-330">How to: Define and Execute Dynamic Methods</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md">
          <span data-ttu-id="ddad6-331">Problemy związane z zabezpieczeniami w emisji odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-331">Security Issues in Reflection Emit</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * Type * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, owner, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ddad6-332">Nazwa metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-332">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="ddad6-333">Może to być ciągiem o zerowej długości, ale nie może być <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-333">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="ddad6-334">A <see cref="T:System.Type" /> obiekt, który określa zwracany typ metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma zwracanego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-334">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="ddad6-335">Tablica <see cref="T:System.Type" /> obiekty, określając typy parametrów metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-335">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="owner">
          <span data-ttu-id="ddad6-336">A <see cref="T:System.Type" /> za pomocą którego metoda dynamiczna jest logicznie powiązanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-336">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span>
          </span>
          <span data-ttu-id="ddad6-337">Metoda dynamiczna ma dostęp do wszystkich elementów członkowskich tego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-337">The dynamic method has access to all members of the type.</span>
          </span>
        </param>
        <param name="skipVisibility">
          <span data-ttu-id="ddad6-338">
            <see langword="true" /> Aby pominąć JIT widoczność kontroli typów i elementów członkowskich uzyskiwał dostęp do MSIL metody dynamicznej; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-338">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ddad6-339">Tworzy metodę dynamiczną, określając nazwę metody, zwracany typ, typy parametrów, typ za pomocą którego metoda dynamiczna jest logicznie powiązanych i tego, czy dla typów i elementów członkowskich uzyskiwał dostęp do firmy Microsoft, w którym ma być pomijana just-in-time (JIT) widoczności Intermediate language (MSIL) metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-339">Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-340">Metoda dynamiczna utworzonych za pomocą tego konstruktora ma dostęp do wszystkich elementów członkowskich typu `owner`i na publiczne i `internal` (`Friend` w języku Visual Basic) innych typów w module, który zawiera `owner`.</span><span class="sxs-lookup"><span data-stu-id="ddad6-340">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`.</span></span> <span data-ttu-id="ddad6-341">Pomijanie JIT kompilatora widoczności umożliwia metodę dynamiczną dostęp do prywatnych i chronionych elementów członkowskich wszystkie pozostałe typy także.</span><span class="sxs-lookup"><span data-stu-id="ddad6-341">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="ddad6-342">Jest to przydatne, na przykład podczas pisania kodu do wykonywania serializacji obiektów.</span><span class="sxs-lookup"><span data-stu-id="ddad6-342">This is useful, for example, when writing code to serialize objects.</span></span>  
  
 <span data-ttu-id="ddad6-343">Ten konstruktor określa atrybuty metody <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> i <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>i konwencji wywoływania <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="ddad6-343">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-344">W celu zapewnienia zgodności z poprzednimi wersjami zażąda tego konstruktora <xref:System.Security.Permissions.SecurityPermission> z <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flagę, jeśli są oba następujące warunki true: `owner` jest w module innych niż modułu wywołującego i popytu na <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> Flaga nie powiodło się.</span><span class="sxs-lookup"><span data-stu-id="ddad6-344">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="ddad6-345">Jeśli zapotrzebowanie na <xref:System.Security.Permissions.SecurityPermission> zakończy się powodzeniem, ta operacja jest dozwolona.</span><span class="sxs-lookup"><span data-stu-id="ddad6-345">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-346">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ten element członkowski nie wymaga już <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flagi.</span><span class="sxs-lookup"><span data-stu-id="ddad6-346">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="ddad6-347">(Zobacz [problemy związane z zabezpieczeniami, w odbiciu emisji](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Aby używać tej funkcji, powinien dotyczyć aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="ddad6-347">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ddad6-348">Element <paramref name="parameterTypes" /> jest <see langword="null" /> lub <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-348">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="ddad6-349">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-349">-or-</span>
          </span>
          <span data-ttu-id="ddad6-350">
            <paramref name="owner" /> to interfejs, tablica, to otwarty typ ogólny lub parametr typu ogólnego lub metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-350">
              <paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ddad6-351">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-351">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ddad6-352">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-352">-or-</span>
          </span>
          <span data-ttu-id="ddad6-353">
            <paramref name="owner" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-353">
              <paramref name="owner" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ddad6-354">
            <paramref name="returnType" /> jest <see langword="null" />, lub jest to typ, dla którego <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-354">
              <paramref name="returnType" /> is <see langword="null" />, or is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ddad6-355">Aby skojarzyć metodę dynamiczną z typem w module niż modułu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-355">to associate the dynamic method with a type in a module other than the calling module.</span>
          </span>
          <span data-ttu-id="ddad6-356">Powiązane wyliczenie: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-356">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md">
          <span data-ttu-id="ddad6-357">Porady: definiowanie i wykonywanie metod dynamicznych</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-357">How to: Define and Execute Dynamic Methods</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md">
          <span data-ttu-id="ddad6-358">Problemy związane z zabezpieczeniami w emisji odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-358">Security Issues in Reflection Emit</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), m As Module, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * System.Reflection.MethodAttributes * System.Reflection.CallingConventions * Type * Type[] * System.Reflection.Module * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, attributes, callingConvention, returnType, parameterTypes, m, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ddad6-359">Nazwa metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-359">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="ddad6-360">Może to być ciągiem o zerowej długości, ale nie może być <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-360">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="ddad6-361">Bitowa kombinacja <see cref="T:System.Reflection.MethodAttributes" /> wartości, które określa atrybuty metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-361">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method.</span>
          </span>
          <span data-ttu-id="ddad6-362">Dozwolona tylko kombinacji <see cref="F:System.Reflection.MethodAttributes.Public" /> i <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-362">The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
        </param>
        <param name="callingConvention">
          <span data-ttu-id="ddad6-363">Konwencja wywoływania metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-363">The calling convention for the dynamic method.</span>
          </span>
          <span data-ttu-id="ddad6-364">Musi być <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-364">Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="ddad6-365">A <see cref="T:System.Type" /> obiekt, który określa zwracany typ metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma zwracanego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-365">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="ddad6-366">Tablica <see cref="T:System.Type" /> obiekty, określając typy parametrów metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-366">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="m">
          <span data-ttu-id="ddad6-367">A <see cref="T:System.Reflection.Module" /> reprezentujący modułu, z którym ma być logicznie powiązanych metodę dynamiczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-367">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span>
          </span>
        </param>
        <param name="skipVisibility">
          <span data-ttu-id="ddad6-368">
            <see langword="true" /> Aby pominąć JIT widoczność kontroli typów i elementów członkowskich uzyskiwał dostęp do MSIL metody dynamicznej; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-368">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ddad6-369">Tworzy metodę dynamiczną, która jest globalna do modułu, określający nazwę metody, atrybuty, Konwencja wywoływania, zwraca typ, typy parametrów, moduł i czy widoczności just-in-time (JIT) — sprawdza, czy ma być pomijana dla typów i elementów członkowskich uzyskiwał dostęp do Języka Microsoft intermediate language (MSIL) metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-369">Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-370">Metoda dynamiczna utworzonych za pomocą tego konstruktora ma dostęp do publicznego i `internal` (`Friend` w języku Visual Basic) elementy członkowskie wszystkich typów publicznych i wewnętrznych zawarte w module `m`.</span><span class="sxs-lookup"><span data-stu-id="ddad6-370">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the public and internal types contained in module `m`.</span></span>  
  
 <span data-ttu-id="ddad6-371">Pomijanie JIT kompilatora widoczności umożliwia metoda dynamiczna na dostęp do prywatnych i chronionych członków innych typów w module i wszystkich innych zestawów także.</span><span class="sxs-lookup"><span data-stu-id="ddad6-371">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types in the module and in all other assemblies as well.</span></span> <span data-ttu-id="ddad6-372">Jest to przydatne, na przykład podczas pisania kodu do wykonywania serializacji obiektów.</span><span class="sxs-lookup"><span data-stu-id="ddad6-372">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-373">W celu zapewnienia zgodności z poprzednimi wersjami zażąda tego konstruktora <xref:System.Security.Permissions.SecurityPermission> z <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flagę, jeśli są oba następujące warunki true: `m` jest modułem innych niż modułu wywołującego i popytu na <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flagi nie powiodło się.</span><span class="sxs-lookup"><span data-stu-id="ddad6-373">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="ddad6-374">Jeśli zapotrzebowanie na <xref:System.Security.Permissions.SecurityPermission> zakończy się powodzeniem, ta operacja jest dozwolona.</span><span class="sxs-lookup"><span data-stu-id="ddad6-374">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-375">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ten element członkowski nie wymaga już <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flagi.</span><span class="sxs-lookup"><span data-stu-id="ddad6-375">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="ddad6-376">(Zobacz [problemy związane z zabezpieczeniami, w odbiciu emisji](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Aby używać tej funkcji, powinien dotyczyć aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="ddad6-376">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ddad6-377">Element <paramref name="parameterTypes" /> jest <see langword="null" /> lub <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-377">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="ddad6-378">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-378">-or-</span>
          </span>
          <span data-ttu-id="ddad6-379">
            <paramref name="m" /> jest to moduł, który zapewnia hosting anonimowo dla metod dynamicznych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-379">
              <paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ddad6-380">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-380">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ddad6-381">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-381">-or-</span>
          </span>
          <span data-ttu-id="ddad6-382">
            <paramref name="m" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-382">
              <paramref name="m" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ddad6-383">
            <paramref name="attributes" /> inne niż to kombinacja flag <see cref="F:System.Reflection.MethodAttributes.Public" /> i <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-383">
              <paramref name="attributes" /> is a combination of flags other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
          <span data-ttu-id="ddad6-384">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-384">-or-</span>
          </span>
          <span data-ttu-id="ddad6-385">
            <paramref name="callingConvention" /> nie jest <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-385">
              <paramref name="callingConvention" /> is not <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
          <span data-ttu-id="ddad6-386">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-386">-or-</span>
          </span>
          <span data-ttu-id="ddad6-387">
            <paramref name="returnType" /> jest to typ, dla którego <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-387">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ddad6-388">Aby skojarzyć metodę dynamiczną z modułu innej niż moduł wywoływania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-388">to associate the dynamic method with a module other than the calling module.</span>
          </span>
          <span data-ttu-id="ddad6-389">Powiązane wyliczenie: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-389">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md">
          <span data-ttu-id="ddad6-390">Porady: definiowanie i wykonywanie metod dynamicznych</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-390">How to: Define and Execute Dynamic Methods</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md">
          <span data-ttu-id="ddad6-391">Problemy związane z zabezpieczeniami w emisji odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-391">Security Issues in Reflection Emit</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * System.Reflection.MethodAttributes * System.Reflection.CallingConventions * Type * Type[] * Type * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, attributes, callingConvention, returnType, parameterTypes, owner, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ddad6-392">Nazwa metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-392">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="ddad6-393">Może to być ciągiem o zerowej długości, ale nie może być <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-393">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="ddad6-394">Bitowa kombinacja <see cref="T:System.Reflection.MethodAttributes" /> wartości, które określa atrybuty metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-394">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method.</span>
          </span>
          <span data-ttu-id="ddad6-395">Dozwolona tylko kombinacji <see cref="F:System.Reflection.MethodAttributes.Public" /> i <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-395">The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
        </param>
        <param name="callingConvention">
          <span data-ttu-id="ddad6-396">Konwencja wywoływania metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-396">The calling convention for the dynamic method.</span>
          </span>
          <span data-ttu-id="ddad6-397">Musi być <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-397">Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="ddad6-398">A <see cref="T:System.Type" /> obiekt, który określa zwracany typ metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma zwracanego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-398">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="ddad6-399">Tablica <see cref="T:System.Type" /> obiekty, określając typy parametrów metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-399">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="owner">
          <span data-ttu-id="ddad6-400">A <see cref="T:System.Type" /> za pomocą którego metoda dynamiczna jest logicznie powiązanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-400">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span>
          </span>
          <span data-ttu-id="ddad6-401">Metoda dynamiczna ma dostęp do wszystkich elementów członkowskich tego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-401">The dynamic method has access to all members of the type.</span>
          </span>
        </param>
        <param name="skipVisibility">
          <span data-ttu-id="ddad6-402">
            <see langword="true" /> Aby pominąć JIT widoczność kontroli typów i elementów członkowskich uzyskiwał dostęp do MSIL metody dynamicznej; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-402">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ddad6-403">Tworzy metodę dynamiczną, określając nazwę metody, atrybuty, wywołanie Konwencji, zwracany typ, typy parametrów typu za pomocą którego metoda dynamiczna jest logicznie powiązanych i tego, czy dla typów, w którym ma być pomijana just-in-time (JIT) widoczności i dostęp do języka Microsoft intermediate language (MSIL) metody dynamiczne elementy członkowskie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-403">Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-404">Metoda dynamiczna jest globalne moduł, który zawiera typ `owner`.</span><span class="sxs-lookup"><span data-stu-id="ddad6-404">The dynamic method is global to the module that contains the type `owner`.</span></span> <span data-ttu-id="ddad6-405">Ma dostęp do wszystkich elementów członkowskich typu `owner`.</span><span class="sxs-lookup"><span data-stu-id="ddad6-405">It has access to all members of the type `owner`.</span></span>  
  
 <span data-ttu-id="ddad6-406">Metoda dynamiczna utworzonych za pomocą tego konstruktora ma dostęp do wszystkich elementów członkowskich typu `owner`i publicznego i `internal` (`Friend` w języku Visual Basic) elementy członkowskie wszystkich typów, które są zawarte w module, który zawiera `owner`.</span><span class="sxs-lookup"><span data-stu-id="ddad6-406">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the types contained in the module that contains `owner`.</span></span> <span data-ttu-id="ddad6-407">Pomijanie JIT kompilatora widoczności umożliwia metodę dynamiczną dostęp do prywatnych i chronionych elementów członkowskich wszystkie pozostałe typy także.</span><span class="sxs-lookup"><span data-stu-id="ddad6-407">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="ddad6-408">Jest to przydatne, na przykład podczas pisania kodu do wykonywania serializacji obiektów.</span><span class="sxs-lookup"><span data-stu-id="ddad6-408">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-409">W celu zapewnienia zgodności z poprzednimi wersjami zażąda tego konstruktora <xref:System.Security.Permissions.SecurityPermission> z <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flagę, jeśli są oba następujące warunki true: `owner` jest w module innych niż modułu wywołującego i popytu na <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> Flaga nie powiodło się.</span><span class="sxs-lookup"><span data-stu-id="ddad6-409">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="ddad6-410">Jeśli zapotrzebowanie na <xref:System.Security.Permissions.SecurityPermission> zakończy się powodzeniem, ta operacja jest dozwolona.</span><span class="sxs-lookup"><span data-stu-id="ddad6-410">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-411">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ten element członkowski nie wymaga już <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flagi.</span><span class="sxs-lookup"><span data-stu-id="ddad6-411">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="ddad6-412">(Zobacz [problemy związane z zabezpieczeniami, w odbiciu emisji](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Aby używać tej funkcji, powinien dotyczyć aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="ddad6-412">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ddad6-413">Element <paramref name="parameterTypes" /> jest <see langword="null" /> lub <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-413">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="ddad6-414">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-414">-or-</span>
          </span>
          <span data-ttu-id="ddad6-415">
            <paramref name="owner" /> to interfejs, tablica, to otwarty typ ogólny lub parametr typu ogólnego lub metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-415">
              <paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ddad6-416">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-416">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ddad6-417">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-417">-or-</span>
          </span>
          <span data-ttu-id="ddad6-418">
            <paramref name="owner" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-418">
              <paramref name="owner" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ddad6-419">
            <paramref name="attributes" /> inne niż to kombinacja flag <see cref="F:System.Reflection.MethodAttributes.Public" /> i <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-419">
              <paramref name="attributes" /> is a combination of flags other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
          <span data-ttu-id="ddad6-420">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-420">-or-</span>
          </span>
          <span data-ttu-id="ddad6-421">
            <paramref name="callingConvention" /> nie jest <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-421">
              <paramref name="callingConvention" /> is not <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
          <span data-ttu-id="ddad6-422">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-422">-or-</span>
          </span>
          <span data-ttu-id="ddad6-423">
            <paramref name="returnType" /> jest to typ, dla którego <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-423">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ddad6-424">Aby skojarzyć metodę dynamiczną z typem w module niż modułu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-424">to associate the dynamic method with a type in a module other than the calling module.</span>
          </span>
          <span data-ttu-id="ddad6-425">Powiązane wyliczenie: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-425">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md">
          <span data-ttu-id="ddad6-426">Porady: definiowanie i wykonywanie metod dynamicznych</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-426">How to: Define and Execute Dynamic Methods</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md">
          <span data-ttu-id="ddad6-427">Problemy związane z zabezpieczeniami w emisji odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-427">Security Issues in Reflection Emit</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Attributes As MethodAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodAttributes Attributes { System::Reflection::MethodAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.MethodAttributes" Usage="System.Reflection.Emit.DynamicMethod.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ddad6-428">Pobiera atrybuty określone podczas tworzenia metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-428">Gets the attributes specified when the dynamic method was created.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ddad6-429">Bitowa kombinacja <see cref="T:System.Reflection.MethodAttributes" /> wartości reprezentujących atrybuty dla metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-429">A bitwise combination of the <see cref="T:System.Reflection.MethodAttributes" /> values representing the attributes for the method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-430">Obecnie atrybuty metody dla metody dynamiczne są zawsze <xref:System.Reflection.MethodAttributes.Public> i <xref:System.Reflection.MethodAttributes.Static>.</span><span class="sxs-lookup"><span data-stu-id="ddad6-430">Currently, the method attributes for a dynamic method are always <xref:System.Reflection.MethodAttributes.Public> and <xref:System.Reflection.MethodAttributes.Static>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddad6-431">Poniższy przykład kodu wyświetla atrybuty metody dynamicznej metody.</span><span class="sxs-lookup"><span data-stu-id="ddad6-431">The following code example displays the method attributes of a dynamic method.</span></span> <span data-ttu-id="ddad6-432">Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="ddad6-432">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#21](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#21)]
 [!code-csharp[Reflection.DynamicMethod.All#21](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#21)]
 [!code-vb[Reflection.DynamicMethod.All#21](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public override System.Reflection.CallingConventions CallingConvention { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.CallingConventions CallingConvention" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CallingConvention As CallingConventions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::CallingConventions CallingConvention { System::Reflection::CallingConventions get(); };" />
      <MemberSignature Language="F#" Value="member this.CallingConvention : System.Reflection.CallingConventions" Usage="System.Reflection.Emit.DynamicMethod.CallingConvention" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.CallingConventions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ddad6-433">Pobiera konwencja wywołania określona podczas tworzenia metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-433">Gets the calling convention specified when the dynamic method was created.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ddad6-434">Jedną z <see cref="T:System.Reflection.CallingConventions" /> wartości wskazujących konwencja wywołania metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-434">One of the <see cref="T:System.Reflection.CallingConventions" /> values that indicates the calling convention of the method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-435">Obecnie jest konwencja wywołania metody dynamicznej zawsze <xref:System.Reflection.CallingConventions.Standard>.</span><span class="sxs-lookup"><span data-stu-id="ddad6-435">Currently, the calling convention for a dynamic method is always <xref:System.Reflection.CallingConventions.Standard>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddad6-436">Poniższy przykład kodu wyświetla konwencja wywołania metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="ddad6-436">The following code example displays the calling convention of a dynamic method.</span></span> <span data-ttu-id="ddad6-437">Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="ddad6-437">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#22](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#22)]
 [!code-csharp[Reflection.DynamicMethod.All#22](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#22)]
 [!code-vb[Reflection.DynamicMethod.All#22](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDelegate">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ddad6-438">Wykonuje metodę dynamiczną i tworzy delegata, który może służyć do wykonywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-438">Completes the dynamic method and creates a delegate that can be used to execute it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public override sealed Delegate CreateDelegate (Type delegateType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Delegate CreateDelegate(class System.Type delegateType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CreateDelegate (delegateType As Type) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Delegate ^ CreateDelegate(Type ^ delegateType);" />
      <MemberSignature Language="F#" Value="override this.CreateDelegate : Type -&gt; Delegate" Usage="dynamicMethod.CreateDelegate delegateType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="ddad6-439">Typ obiektu delegowanego, którego podpis jest zgodny z typem metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-439">A delegate type whose signature matches that of the dynamic method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ddad6-440">Wykonuje metodę dynamiczną i tworzy delegata, który może służyć do wykonywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-440">Completes the dynamic method and creates a delegate that can be used to execute it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ddad6-441">Delegat określonego typu, który może służyć do wykonywania metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-441">A delegate of the specified type, which can be used to execute the dynamic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-442">Wywoływanie <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> metody lub <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metoda wykonuje metodę dynamiczną.</span><span class="sxs-lookup"><span data-stu-id="ddad6-442">Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method.</span></span> <span data-ttu-id="ddad6-443">Dowolne dalsze próby zmienić metodę dynamiczną, takie jak modyfikowanie definicji parametrów lub emitowania więcej języka Microsoft intermediate language (MSIL), są ignorowane; jest zgłaszany żaden wyjątek.</span><span class="sxs-lookup"><span data-stu-id="ddad6-443">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="ddad6-444">Aby utworzyć treści metody dynamicznej metody, gdy masz własnego generator MSIL, wywołaj <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> metodę, aby uzyskać <xref:System.Reflection.Emit.DynamicILInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-444">To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="ddad6-445">Jeśli nie masz własnego generator MSIL, wywołaj <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> metodę, aby uzyskać <xref:System.Reflection.Emit.ILGenerator> obiektu, który może służyć do generowania treści metody.</span><span class="sxs-lookup"><span data-stu-id="ddad6-445">If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddad6-446">Poniższy przykład kodu tworzy metodę dynamiczną, która przyjmuje dwa parametry.</span><span class="sxs-lookup"><span data-stu-id="ddad6-446">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="ddad6-447">Przykład emituje treści prostej funkcji, który wyświetla pierwszy parametr do konsoli, a w przykładzie użyto drugi parametr jako wartość zwracaną metody.</span><span class="sxs-lookup"><span data-stu-id="ddad6-447">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="ddad6-448">Przykład stanowi zakończenie metody dotyczy tworzenia delegata, wywołuje delegata z innymi parametrami i na koniec wywołuje metodę dynamiczną, przy użyciu <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="ddad6-448">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ddad6-449">Metoda dynamiczna ma bez treści metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-449">The dynamic method has no method body.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ddad6-450">
            <paramref name="delegateType" /> ma nieprawidłową liczbę typów niewłaściwego parametru lub parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-450">
              <paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md">
          <span data-ttu-id="ddad6-451">Porady: definiowanie i wykonywanie metod dynamicznych</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-451">How to: Define and Execute Dynamic Methods</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public override sealed Delegate CreateDelegate (Type delegateType, object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Delegate CreateDelegate(class System.Type delegateType, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CreateDelegate (delegateType As Type, target As Object) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Delegate ^ CreateDelegate(Type ^ delegateType, System::Object ^ target);" />
      <MemberSignature Language="F#" Value="override this.CreateDelegate : Type * obj -&gt; Delegate" Usage="dynamicMethod.CreateDelegate (delegateType, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="ddad6-452">Typ obiektu delegowanego, którego podpis jest zgodny z typem metodę dynamiczną, minus pierwszy parametr.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-452">A delegate type whose signature matches that of the dynamic method, minus the first parameter.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="ddad6-453">Obiekt delegowany jest powiązany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-453">An object the delegate is bound to.</span>
          </span>
          <span data-ttu-id="ddad6-454">Musi być tego samego typu jako pierwszy parametr metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-454">Must be of the same type as the first parameter of the dynamic method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ddad6-455">Wykonuje metodę dynamiczną i tworzy delegata, który może służyć do wykonania, określając typ delegata i obiektu, który delegata jest powiązany z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-455">Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ddad6-456">Delegat określonego typu, który może służyć do wykonywania metodę dynamiczną z wskazanym obiekcie docelowym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-456">A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-457">Tego przeciążenia metody tworzy delegata, powiązany z określonego obiektu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-457">This method overload creates a delegate bound to a particular object.</span></span> <span data-ttu-id="ddad6-458">Taki obiekt delegowany jest zamknięte w ciągu pierwszego argumentu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-458">Such a delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="ddad6-459">Mimo że metoda jest statyczna, działa tak, jakby był metodą instancji; wystąpienie jest `target`.</span><span class="sxs-lookup"><span data-stu-id="ddad6-459">Although the method is static, it acts as if it were an instance method; the instance is `target`.</span></span>  
  
 <span data-ttu-id="ddad6-460">Wymaga tego przeciążenia metody `target` być tego samego typu jako pierwszy parametr metody dynamiczne lub przypisane do tego typu (na przykład klasy pochodnej).</span><span class="sxs-lookup"><span data-stu-id="ddad6-460">This method overload requires `target` to be of the same type as the first parameter of the dynamic method, or to be assignable to that type (for example, a derived class).</span></span>  <span data-ttu-id="ddad6-461">Podpis `delegateType` ma wszystkie parametry dynamiczne metody oprócz pierwszego.</span><span class="sxs-lookup"><span data-stu-id="ddad6-461">The signature of `delegateType` has all the parameters of the dynamic method except the first.</span></span> <span data-ttu-id="ddad6-462">Na przykład, jeśli metoda dynamiczna ma następujące parametry <xref:System.String>, <xref:System.Int32>, i <xref:System.Byte>, następnie `delegateType` ma następujące parametry <xref:System.Int32> i <xref:System.Byte>; `target` typu <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="ddad6-462">For example, if the dynamic method has the parameters <xref:System.String>, <xref:System.Int32>, and <xref:System.Byte>, then `delegateType` has the parameters <xref:System.Int32> and <xref:System.Byte>; `target` is of type <xref:System.String>.</span></span>  
  
 <span data-ttu-id="ddad6-463">Wywoływanie <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> metody lub <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metoda wykonuje metodę dynamiczną.</span><span class="sxs-lookup"><span data-stu-id="ddad6-463">Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method.</span></span> <span data-ttu-id="ddad6-464">Dowolne dalsze próby zmienić metodę dynamiczną, takie jak modyfikowanie definicji parametrów lub emitowania więcej języka Microsoft intermediate language (MSIL), są ignorowane; jest zgłaszany żaden wyjątek.</span><span class="sxs-lookup"><span data-stu-id="ddad6-464">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="ddad6-465">Aby utworzyć treści metody dynamicznej metody, gdy masz własnego generator MSIL, wywołaj <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> metodę, aby uzyskać <xref:System.Reflection.Emit.DynamicILInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-465">To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="ddad6-466">Jeśli nie masz własnego generator MSIL, wywołaj <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> metodę, aby uzyskać <xref:System.Reflection.Emit.ILGenerator> obiektu, który może służyć do generowania treści metody.</span><span class="sxs-lookup"><span data-stu-id="ddad6-466">If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddad6-467">Poniższy przykład kodu tworzy delegata, która jest powiązywana <xref:System.Reflection.Emit.DynamicMethod> do wystąpienia typu, tak aby metoda działa na tym samym wystąpieniu każdorazowo jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="ddad6-467">The following code example creates delegate that binds a <xref:System.Reflection.Emit.DynamicMethod> to an instance of a type, so that the method acts on the same instance each time it is invoked.</span></span>  
  
 <span data-ttu-id="ddad6-468">Przykładowy kod definiuje klasę o nazwie `Example` za pomocą pola prywatnego, klasę o nazwie `DerivedFromxample` pochodząca z pierwszej klasy, typ delegata, o nazwie `UseLikeStatic` zwracającego <xref:System.Int32> i ma następujące parametry typu `Example` i <xref:System.Int32>, a typ delegata, o nazwie `UseLikeInstance` zwracającego <xref:System.Int32> i ma jeden parametr typu <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="ddad6-468">The code example defines a class named `Example` with a private field, a class named `DerivedFromxample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="ddad6-469">Następnie kod przykładowy tworzy <xref:System.Reflection.Emit.DynamicMethod> zmienia się pole private wystąpienia `Example` i zwraca poprzednią wartość.</span><span class="sxs-lookup"><span data-stu-id="ddad6-469">The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-470">Ogólnie rzecz biorąc zmiana wewnętrznego pól klasy nie jest dobry obiektowe rozwiązaniem kodowania.</span><span class="sxs-lookup"><span data-stu-id="ddad6-470">In general, changing the internal fields of classes is not good object-oriented coding practice.</span></span>  
  
 <span data-ttu-id="ddad6-471">Przykładowy kod tworzy wystąpienie `Example` , a następnie tworzy dwa delegaty.</span><span class="sxs-lookup"><span data-stu-id="ddad6-471">The example code creates an instance of `Example` and then creates two delegates.</span></span> <span data-ttu-id="ddad6-472">Pierwszy jest typu `UseLikeStatic`, który ma te same parametry jako metodę dynamiczną.</span><span class="sxs-lookup"><span data-stu-id="ddad6-472">The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method.</span></span> <span data-ttu-id="ddad6-473">Drugą jest wartość typu `UseLikeInstance`, który nie ma pierwszy parametr (typu `Example`).</span><span class="sxs-lookup"><span data-stu-id="ddad6-473">The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`).</span></span> <span data-ttu-id="ddad6-474">Ten delegat jest tworzony przy użyciu <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> przeciążenie metody; drugi parametr przeciążenia tej metody jest wystąpieniem `Example`, w tym przypadku wystąpienie został właśnie utworzony, który jest powiązany z nowo utworzonego obiektu delegowanego.</span><span class="sxs-lookup"><span data-stu-id="ddad6-474">This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate.</span></span> <span data-ttu-id="ddad6-475">Zawsze, gdy ten obiekt delegowany jest wywoływany, metodę dynamiczną działa na komputerze z wystąpieniem powiązanej `Example`.</span><span class="sxs-lookup"><span data-stu-id="ddad6-475">Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-476">To przykład swobodna reguł powiązaniach delegatów wprowadzona w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], wraz z nowe przeciążenia <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="ddad6-476">This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="ddad6-477">Aby uzyskać więcej informacji, zobacz <xref:System.Delegate> klasy.</span><span class="sxs-lookup"><span data-stu-id="ddad6-477">For more information, see the <xref:System.Delegate> class.</span></span>  
  
 <span data-ttu-id="ddad6-478">`UseLikeStatic` Obiekt delegowany jest wywoływany, przekazując wystąpienie elementu `Example` , jest powiązany z `UseLikeInstance` delegować.</span><span class="sxs-lookup"><span data-stu-id="ddad6-478">The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate.</span></span> <span data-ttu-id="ddad6-479">A następnie `UseLikeInstance` obiekt delegowany jest wywoływany tak, aby obie delegatów działa na tym samym wystąpieniu programu `Example`.</span><span class="sxs-lookup"><span data-stu-id="ddad6-479">Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`.</span></span> <span data-ttu-id="ddad6-480">Zmiany w wartościach wewnętrzne pola są wyświetlane po każdym wywołaniu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-480">The changes in the values of the internal field are displayed after each call.</span></span> <span data-ttu-id="ddad6-481">Na koniec `UseLikeInstance` delegata jest powiązany do wystąpienia `DerivedFromxample`, rok i wywołuje delegata.</span><span class="sxs-lookup"><span data-stu-id="ddad6-481">Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromxample`, and the delegate calls are repeated.</span></span>  
  
 [!code-csharp[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/cs/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ddad6-482">Metoda dynamiczna ma bez treści metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-482">The dynamic method has no method body.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ddad6-483">
            <paramref name="target" /> nie jest ten sam typ jako pierwszy parametr metody dynamicznej, a nie jest możliwy do przypisania do tego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-483">
              <paramref name="target" /> is not the same type as the first parameter of the dynamic method, and is not assignable to that type.</span>
          </span>
          <span data-ttu-id="ddad6-484">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-484">-or-</span>
          </span>
          <span data-ttu-id="ddad6-485">
            <paramref name="delegateType" /> ma nieprawidłową liczbę typów niewłaściwego parametru lub parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-485">
              <paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Reflection.Emit.DynamicMethod.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ddad6-486">Pobiera typ, który deklaruje metodę, która jest zawsze <see langword="null" /> dla metod dynamicznych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-486">Gets the type that declares the method, which is always <see langword="null" /> for dynamic methods.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ddad6-487">Zawsze <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-487">Always <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-488">Właściwość ta zwraca zawsze `null` dla metod dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="ddad6-488">This property always returns `null` for dynamic methods.</span></span> <span data-ttu-id="ddad6-489">Nawet wtedy, gdy metoda dynamiczna jest logicznie skojarzone z typem, nie jest deklarowana przez typ.</span><span class="sxs-lookup"><span data-stu-id="ddad6-489">Even when a dynamic method is logically associated with a type, it is not declared by the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddad6-490">Poniższy przykład kodu przedstawia metodę dynamiczną typ deklarujący.</span><span class="sxs-lookup"><span data-stu-id="ddad6-490">The following code example displays the declaring type of a dynamic method.</span></span> <span data-ttu-id="ddad6-491">Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="ddad6-491">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#23](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#23)]
 [!code-csharp[Reflection.DynamicMethod.All#23](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#23)]
 [!code-vb[Reflection.DynamicMethod.All#23](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineParameter">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ParameterBuilder DefineParameter (int position, System.Reflection.ParameterAttributes attributes, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ParameterBuilder DefineParameter(int32 position, valuetype System.Reflection.ParameterAttributes attributes, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineParameter (position As Integer, attributes As ParameterAttributes, parameterName As String) As ParameterBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ParameterBuilder ^ DefineParameter(int position, System::Reflection::ParameterAttributes attributes, System::String ^ parameterName);" />
      <MemberSignature Language="F#" Value="member this.DefineParameter : int * System.Reflection.ParameterAttributes * string -&gt; System.Reflection.Emit.ParameterBuilder" Usage="dynamicMethod.DefineParameter (position, attributes, parameterName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="attributes" Type="System.Reflection.ParameterAttributes" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="position">
          <span data-ttu-id="ddad6-492">Pozycja parametru na liście parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-492">The position of the parameter in the parameter list.</span>
          </span>
          <span data-ttu-id="ddad6-493">Parametry są indeksowane począwszy od numeru 1 jako pierwszy parametr.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-493">Parameters are indexed beginning with the number 1 for the first parameter.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="ddad6-494">Bitowa kombinacja <see cref="T:System.Reflection.ParameterAttributes" /> wartości, które określa atrybuty parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-494">A bitwise combination of <see cref="T:System.Reflection.ParameterAttributes" /> values that specifies the attributes of the parameter.</span>
          </span>
        </param>
        <param name="parameterName">
          <span data-ttu-id="ddad6-495">Nazwa parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-495">The name of the parameter.</span>
          </span>
          <span data-ttu-id="ddad6-496">Nazwa może być ciągiem o zerowej długości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-496">The name can be a zero-length string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ddad6-497">Określa parametr metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-497">Defines a parameter of the dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ddad6-498">Zawsze zwraca <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-498">Always returns <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-499">Jeśli `position` ma wartość 0, <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> metoda odwołuje się do wartości zwracanej.</span><span class="sxs-lookup"><span data-stu-id="ddad6-499">If `position` is 0, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method refers to the return value.</span></span> <span data-ttu-id="ddad6-500">Ustawianie informacji o parametrach nie ma wpływu na wartość zwracaną.</span><span class="sxs-lookup"><span data-stu-id="ddad6-500">Setting parameter information has no effect on the return value.</span></span>  
  
 <span data-ttu-id="ddad6-501">Jeśli metoda dynamiczna zostało już zakończone, wywołując <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> lub <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metody <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> metoda nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-501">If the dynamic method has already been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method has no effect.</span></span> <span data-ttu-id="ddad6-502">Jest zgłaszany żaden wyjątek.</span><span class="sxs-lookup"><span data-stu-id="ddad6-502">No exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddad6-503">Poniższy przykład kodu pokazuje jak zdefiniować informacje o parametrach metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="ddad6-503">The following code example shows how to define parameter information for a dynamic method.</span></span> <span data-ttu-id="ddad6-504">Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="ddad6-504">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#33](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#33)]
 [!code-csharp[Reflection.DynamicMethod.All#33](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#33)]
 [!code-vb[Reflection.DynamicMethod.All#33](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ddad6-505">Metoda nie ma parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-505">The method has no parameters.</span>
          </span>
          <span data-ttu-id="ddad6-506">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-506">-or-</span>
          </span>
          <span data-ttu-id="ddad6-507">
            <paramref name="position" /> jest mniejsza niż 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-507">
              <paramref name="position" /> is less than 0.</span>
          </span>
          <span data-ttu-id="ddad6-508">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-508">-or-</span>
          </span>
          <span data-ttu-id="ddad6-509">
            <paramref name="position" /> jest większa niż liczba parametrów metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-509">
              <paramref name="position" /> is greater than the number of the method's parameters.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetBaseDefinition">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo GetBaseDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo GetBaseDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBaseDefinition () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodInfo ^ GetBaseDefinition();" />
      <MemberSignature Language="F#" Value="override this.GetBaseDefinition : unit -&gt; System.Reflection.MethodInfo" Usage="dynamicMethod.GetBaseDefinition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ddad6-510">Zwraca implementację podstawową metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-510">Returns the base implementation for the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ddad6-511">Podstawowa implementacja metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-511">The base implementation of the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-512">Ta metoda zawsze zwraca bieżącą `DynamicMethod` obiektu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-512">This method always returns the current `DynamicMethod` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ddad6-513">Zwraca atrybuty niestandardowe zastosowane do metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-513">Returns the custom attributes applied to the method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : bool -&gt; obj[]" Usage="dynamicMethod.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="ddad6-514">
            <see langword="true" /> Aby przeszukać łańcuch dziedziczenia metody w celu znalezienia atrybutów niestandardowych; <see langword="false" /> do sprawdzania bieżącej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-514">
              <see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ddad6-515">Zwraca atrybuty niestandardowe zdefiniowane dla metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-515">Returns all the custom attributes defined for the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ddad6-516">Tablica obiektów reprezentujących atrybuty niestandardowe metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-516">An array of objects representing all the custom attributes of the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-517">Dla metody dynamiczne, określając `true` dla `inherit` nie ma wpływu, ponieważ metoda nie jest zadeklarowana w typie.</span><span class="sxs-lookup"><span data-stu-id="ddad6-517">For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-518">Atrybutów niestandardowych, które nie są obecnie obsługiwane dla metod dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="ddad6-518">Custom attributes are not currently supported on dynamic methods.</span></span> <span data-ttu-id="ddad6-519">Zwrócony to jedyny atrybut <xref:System.Runtime.CompilerServices.MethodImplAttribute>; zawiera metody flagi implementacji łatwiej przy użyciu <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="ddad6-519">The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : Type * bool -&gt; obj[]" Usage="dynamicMethod.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="ddad6-520">A <see cref="T:System.Type" /> reprezentujący typ atrybutów niestandardowych do zwrócenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-520">A <see cref="T:System.Type" /> representing the type of custom attribute to return.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="ddad6-521">
            <see langword="true" /> Aby przeszukać łańcuch dziedziczenia metody w celu znalezienia atrybutów niestandardowych; <see langword="false" /> do sprawdzania bieżącej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-521">
              <see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ddad6-522">Zwraca atrybuty niestandardowe określonego typu, które zostały zastosowane do metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-522">Returns the custom attributes of the specified type that have been applied to the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ddad6-523">Tablica obiektów reprezentująca atrybuty metody, które są typu <paramref name="attributeType" /> lub pochodzić od typu <paramref name="attributeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-523">An array of objects representing the attributes of the method that are of type <paramref name="attributeType" /> or derive from type <paramref name="attributeType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-524">Dla metody dynamiczne, określając `true` dla `inherit` nie ma wpływu, ponieważ metoda nie jest zadeklarowana w typie.</span><span class="sxs-lookup"><span data-stu-id="ddad6-524">For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-525">Atrybutów niestandardowych, które nie są obecnie obsługiwane dla metod dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="ddad6-525">Custom attributes are not currently supported on dynamic methods.</span></span> <span data-ttu-id="ddad6-526">Zwrócony to jedyny atrybut <xref:System.Runtime.CompilerServices.MethodImplAttribute>; zawiera metody flagi implementacji łatwiej przy użyciu <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="ddad6-526">The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ddad6-527">
            <paramref name="attributeType" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-527">
              <paramref name="attributeType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetDynamicILInfo">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.DynamicILInfo GetDynamicILInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.DynamicILInfo GetDynamicILInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDynamicILInfo () As DynamicILInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::DynamicILInfo ^ GetDynamicILInfo();" />
      <MemberSignature Language="F#" Value="member this.GetDynamicILInfo : unit -&gt; System.Reflection.Emit.DynamicILInfo" Usage="dynamicMethod.GetDynamicILInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.DynamicILInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ddad6-528">Zwraca <see cref="T:System.Reflection.Emit.DynamicILInfo" /> obiektu, który może służyć do generowania treści metody z tokeny metadanych, zakresy i strumieni intermediate language (MSIL) firmy Microsoft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-528">Returns a <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object that can be used to generate a method body from metadata tokens, scopes, and Microsoft intermediate language (MSIL) streams.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ddad6-529">Element <see cref="T:System.Reflection.Emit.DynamicILInfo" /> obiektu, który może służyć do generowania treści metody z tokeny metadanych, zakresy i strumieni MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-529">A <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object that can be used to generate a method body from metadata tokens, scopes, and MSIL streams.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-530"><xref:System.Reflection.Emit.DynamicILInfo> Klasy jest dostarczany do obsługi generowania kodu niezarządzanego.</span><span class="sxs-lookup"><span data-stu-id="ddad6-530">The <xref:System.Reflection.Emit.DynamicILInfo> class is provided to support unmanaged code generation.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="ddad6-531">do wykonywania kodu niezarządzanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-531">to execute unmanaged code.</span>
          </span>
          <span data-ttu-id="ddad6-532">Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-532">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.Emit.DynamicILInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetILGenerator">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ddad6-533">Zwraca generator MSIL, który może służyć do wysyłania treści metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-533">Returns an MSIL generator that can be used to emit a body for the dynamic method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetILGenerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator () As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator();" />
      <MemberSignature Language="F#" Value="member this.GetILGenerator : unit -&gt; System.Reflection.Emit.ILGenerator" Usage="dynamicMethod.GetILGenerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ddad6-534">Zwraca generator języka intermediate language (MSIL) firmy Microsoft dla danej metody domyślny rozmiar strumienia MSIL 64 bajtów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-534">Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ddad6-535">
            <see cref="T:System.Reflection.Emit.ILGenerator" /> Obiektu dla metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-535">An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-536">Po zakończeniu metodę dynamiczną, wywołując <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> lub <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metody, dowolny dalsze próby dodania MSIL jest ignorowana.</span><span class="sxs-lookup"><span data-stu-id="ddad6-536">After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored.</span></span> <span data-ttu-id="ddad6-537">Jest zgłaszany żaden wyjątek.</span><span class="sxs-lookup"><span data-stu-id="ddad6-537">No exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-538">Ma ograniczeń dotyczących nieweryfikowalny kod w metody dynamiczne, nawet w niektórych scenariuszach pełnego zaufania.</span><span class="sxs-lookup"><span data-stu-id="ddad6-538">There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</span></span> <span data-ttu-id="ddad6-539">Sekcja "Weryfikacja" w uwagi dla <xref:System.Reflection.Emit.DynamicMethod>.</span><span class="sxs-lookup"><span data-stu-id="ddad6-539">See the "Verification" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddad6-540">Poniższy przykład kodu tworzy metodę dynamiczną, która przyjmuje dwa parametry.</span><span class="sxs-lookup"><span data-stu-id="ddad6-540">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="ddad6-541">Przykład emituje treści prostej funkcji, który wyświetla pierwszy parametr do konsoli, a w przykładzie użyto drugi parametr jako wartość zwracaną metody.</span><span class="sxs-lookup"><span data-stu-id="ddad6-541">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="ddad6-542">Przykład stanowi zakończenie metody dotyczy tworzenia delegata, wywołuje delegata z innymi parametrami i na koniec wywołuje metodę dynamiczną, przy użyciu <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="ddad6-542">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md">
          <span data-ttu-id="ddad6-543">Porady: definiowanie i wykonywanie metod dynamicznych</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-543">How to: Define and Execute Dynamic Methods</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator (int streamSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator(int32 streamSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator (streamSize As Integer) As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator(int streamSize);" />
      <MemberSignature Language="F#" Value="member this.GetILGenerator : int -&gt; System.Reflection.Emit.ILGenerator" Usage="dynamicMethod.GetILGenerator streamSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="streamSize">
          <span data-ttu-id="ddad6-544">Rozmiar strumienia MSIL, w bajtach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-544">The size of the MSIL stream, in bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ddad6-545">Zwraca generator języka intermediate language (MSIL) firmy Microsoft dla metody z określonym rozmiarem strumienia MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-545">Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ddad6-546">
            <see cref="T:System.Reflection.Emit.ILGenerator" /> Obiektu dla metody, z określonym rozmiarem strumienia MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-546">An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method, with the specified MSIL stream size.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-547">Po zakończeniu metodę dynamiczną, wywołując <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> lub <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metody, dowolny dalsze próby dodania MSIL jest ignorowana.</span><span class="sxs-lookup"><span data-stu-id="ddad6-547">After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored.</span></span> <span data-ttu-id="ddad6-548">Jest zgłaszany żaden wyjątek.</span><span class="sxs-lookup"><span data-stu-id="ddad6-548">No exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-549">Ma ograniczeń dotyczących nieweryfikowalny kod w metody dynamiczne, nawet w niektórych scenariuszach pełnego zaufania.</span><span class="sxs-lookup"><span data-stu-id="ddad6-549">There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</span></span> <span data-ttu-id="ddad6-550">Sekcja "Weryfikacja" w uwagi dla <xref:System.Reflection.Emit.DynamicMethod>.</span><span class="sxs-lookup"><span data-stu-id="ddad6-550">See the "Verification" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddad6-551">Poniższy przykład kodu demonstruje tego przeciążenia metody.</span><span class="sxs-lookup"><span data-stu-id="ddad6-551">The following code example demonstrates this method overload.</span></span> <span data-ttu-id="ddad6-552">Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="ddad6-552">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#2](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#2)]
 [!code-csharp[Reflection.DynamicMethod.All#2](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#2)]
 [!code-vb[Reflection.DynamicMethod.All#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md">
          <span data-ttu-id="ddad6-553">Porady: definiowanie i wykonywanie metod dynamicznych</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-553">How to: Define and Execute Dynamic Methods</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Reflection.MethodImplAttributes GetMethodImplementationFlags() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMethodImplementationFlags () As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodImplAttributes GetMethodImplementationFlags();" />
      <MemberSignature Language="F#" Value="override this.GetMethodImplementationFlags : unit -&gt; System.Reflection.MethodImplAttributes" Usage="dynamicMethod.GetMethodImplementationFlags " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ddad6-554">Zwraca wartość flagi implementacji metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-554">Returns the implementation flags for the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ddad6-555">Bitowa kombinacja <see cref="T:System.Reflection.MethodImplAttributes" /> wartości flagi implementacji metody reprezentująca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-555">A bitwise combination of <see cref="T:System.Reflection.MethodImplAttributes" /> values representing the implementation flags for the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-556">Obecnie atrybuty implementacji metody dla metod dynamicznych są zawsze <xref:System.Reflection.MethodImplAttributes.IL> i <xref:System.Reflection.MethodImplAttributes.NoInlining>.</span><span class="sxs-lookup"><span data-stu-id="ddad6-556">Currently, method implementation attributes for dynamic methods are always <xref:System.Reflection.MethodImplAttributes.IL> and <xref:System.Reflection.MethodImplAttributes.NoInlining>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameters">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo[] GetParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ParameterInfo[] GetParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetParameters () As ParameterInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::ParameterInfo ^&gt; ^ GetParameters();" />
      <MemberSignature Language="F#" Value="override this.GetParameters : unit -&gt; System.Reflection.ParameterInfo[]" Usage="dynamicMethod.GetParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ddad6-557">Zwraca parametry metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-557">Returns the parameters of the dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ddad6-558">Tablica <see cref="T:System.Reflection.ParameterInfo" /> obiektami, które reprezentują parametry metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-558">An array of <see cref="T:System.Reflection.ParameterInfo" /> objects that represent the parameters of the dynamic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-559"><xref:System.Reflection.ParameterInfo> Obiektów zwróconych przez tę metodę są wyłącznie w celach informacyjnych.</span><span class="sxs-lookup"><span data-stu-id="ddad6-559">The <xref:System.Reflection.ParameterInfo> objects returned by this method are for information only.</span></span> <span data-ttu-id="ddad6-560">Użyj <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> metodę, aby ustawić lub zmienić właściwości parametrów.</span><span class="sxs-lookup"><span data-stu-id="ddad6-560">Use the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method to set or change the characteristics of the parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddad6-561">Poniższy przykład kodu przedstawia parametry metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="ddad6-561">The following code example displays the parameters of a dynamic method.</span></span> <span data-ttu-id="ddad6-562">Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="ddad6-562">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#34](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#34)]
 [!code-csharp[Reflection.DynamicMethod.All#34](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#34)]
 [!code-vb[Reflection.DynamicMethod.All#34](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="InitLocals">
      <MemberSignature Language="C#" Value="public bool InitLocals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InitLocals" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.InitLocals" />
      <MemberSignature Language="VB.NET" Value="Public Property InitLocals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InitLocals { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.InitLocals : bool with get, set" Usage="System.Reflection.Emit.DynamicMethod.InitLocals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ddad6-563">Pobiera lub ustawia wartość wskazującą, czy zmiennych lokalnych w metodzie są inicjowane od zera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-563">Gets or sets a value indicating whether the local variables in the method are zero-initialized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ddad6-564">
            <see langword="true" /> w przypadku zmiennych lokalnych w metodzie inicjowany z wartością zerową; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-564">
              <see langword="true" /> if the local variables in the method are zero-initialized; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="ddad6-565">Wartość domyślna to <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-565">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-566">Jeśli ta właściwość jest ustawiona `true`, emitowany języka Microsoft intermediate language (MSIL) zawiera inicjowanie zmiennych lokalnych.</span><span class="sxs-lookup"><span data-stu-id="ddad6-566">If this property is set to `true`, the emitted Microsoft intermediate language (MSIL) includes initialization of local variables.</span></span> <span data-ttu-id="ddad6-567">Jeśli jest równa `false`, zmienne lokalne nie jest zainicjowany i nie jest wygenerowany kod.</span><span class="sxs-lookup"><span data-stu-id="ddad6-567">If it is set to `false`, local variables are not initialized and the generated code is unverifiable.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddad6-568">Poniższy kod przedstawia przykład <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> właściwość metodę dynamiczną.</span><span class="sxs-lookup"><span data-stu-id="ddad6-568">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property of a dynamic method.</span></span> <span data-ttu-id="ddad6-569">Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="ddad6-569">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#24](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#24)]
 [!code-csharp[Reflection.DynamicMethod.All#24](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#24)]
 [!code-vb[Reflection.DynamicMethod.All#24](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public override object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object Invoke(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ Invoke(System::Object ^ obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ parameters, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="override this.Invoke : obj * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="dynamicMethod.Invoke (obj, invokeAttr, binder, parameters, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="ddad6-570">Ten parametr jest ignorowany dla metody dynamiczne, ponieważ są to statyczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-570">This parameter is ignored for dynamic methods, because they are static.</span>
          </span>
          <span data-ttu-id="ddad6-571">Określ <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-571">Specify <see langword="null" />.</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="ddad6-572">Bitowa kombinacja <see cref="T:System.Reflection.BindingFlags" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-572">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="ddad6-573">A <see cref="T:System.Reflection.Binder" /> typów obiektu, który umożliwia wiązanie, wymuszanie argumentów, wywoływania członków i pobieranie <see cref="T:System.Reflection.MemberInfo" /> obiektów przy użyciu odbicia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-573">A <see cref="T:System.Reflection.Binder" /> object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span>
          </span>
          <span data-ttu-id="ddad6-574">Jeśli <paramref name="binder" /> jest <see langword="null" />, jest używany domyślny integrator.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-574">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span>
          </span>
          <span data-ttu-id="ddad6-575">Aby uzyskać więcej informacji, zobacz <see cref="T:System.Reflection.Binder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-575">For more details, see <see cref="T:System.Reflection.Binder" />.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="ddad6-576">Listy argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-576">An argument list.</span>
          </span>
          <span data-ttu-id="ddad6-577">Jest to tablica argumentów za pomocą tego samego liczbę, kolejność i typ jako parametry metody do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-577">This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked.</span>
          </span>
          <span data-ttu-id="ddad6-578">Jeśli nie ma żadnych parametrów tego parametru powinna być <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-578">If there are no parameters this parameter should be <see langword="null" />.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="ddad6-579">Wystąpienie <see cref="T:System.Globalization.CultureInfo" /> używane do sterowania wymuszanie typów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-579">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types.</span>
          </span>
          <span data-ttu-id="ddad6-580">Jeśli jest to <see langword="null" />, <see cref="T:System.Globalization.CultureInfo" /> dla bieżącego wątku jest używana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-580">If this is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span>
          </span>
          <span data-ttu-id="ddad6-581">Na przykład, te informacje są potrzebne do przekonwertowania poprawnie <see cref="T:System.String" /> reprezentujący 1000- <see cref="T:System.Double" /> wartości, ponieważ 1000 jest reprezentowana w inny sposób przez różnych kultur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-581">For example, this information is needed to correctly convert a <see cref="T:System.String" /> that represents 1000 to a <see cref="T:System.Double" /> value, because 1000 is represented differently by different cultures.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ddad6-582">Wywołuje metodę dynamiczną, przy użyciu określonych parametrów, w ramach ograniczeń określony obiekt wiążący z informacjami o określonej kultury.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-582">Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ddad6-583">Element <see cref="T:System.Object" /> zawierający wartość zwracaną wywoływanej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-583">A <see cref="T:System.Object" /> containing the return value of the invoked method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-584">Oprócz wymienionych wyjątki kod wywołujący powinna być przygotowana do przechwytywać wyjątki zgłaszane przez metodę dynamiczną.</span><span class="sxs-lookup"><span data-stu-id="ddad6-584">In addition to the listed exceptions, the calling code should be prepared to catch any exceptions thrown by the dynamic method.</span></span>  
  
 <span data-ttu-id="ddad6-585">Wykonywanie metody dynamiczne z delegatem, utworzone przez <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> metody jest bardziej wydajne niż wykonywanie ją za pomocą <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="ddad6-585">Executing a dynamic method with a delegate created by the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method is more efficient than executing it with the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 <span data-ttu-id="ddad6-586">Wywoływanie <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metody lub <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> metoda wykonuje metodę dynamiczną.</span><span class="sxs-lookup"><span data-stu-id="ddad6-586">Calling the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method completes the dynamic method.</span></span> <span data-ttu-id="ddad6-587">Dowolne dalsze próby zmienić metodę dynamiczną, takie jak modyfikowanie definicji parametrów lub emitowania więcej języka Microsoft intermediate language (MSIL), są ignorowane; jest zgłaszany żaden wyjątek.</span><span class="sxs-lookup"><span data-stu-id="ddad6-587">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="ddad6-588">Wszystkie metody dynamiczne są statyczne, więc `obj` parametr zawsze jest ignorowany.</span><span class="sxs-lookup"><span data-stu-id="ddad6-588">All dynamic methods are static, so the `obj` parameter is always ignored.</span></span> <span data-ttu-id="ddad6-589">Aby traktować metodę dynamiczną, tak jakby był metodą instancji, należy użyć <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> przeciążenia przyjmującego wystąpienia obiektu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-589">To treat a dynamic method as if it were an instance method, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> overload that takes an object instance.</span></span>  
  
 <span data-ttu-id="ddad6-590">Jeśli metoda dynamiczna nie ma parametrów, wartość `parameters` powinien być `null`.</span><span class="sxs-lookup"><span data-stu-id="ddad6-590">If the dynamic method has no parameters, the value of `parameters` should be `null`.</span></span> <span data-ttu-id="ddad6-591">W przeciwnym razie liczbę, typ i kolejność elementów w tablicy parametrów powinna być taka sama jak liczba, typ i kolejność parametrów metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="ddad6-591">Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters of the dynamic method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-592">Tego przeciążenia metody jest wywoływana przez <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29> przeciążenie metody dziedziczone z <xref:System.Reflection.MethodBase> klasy, więc poprzedniego uwagi dotyczą oba przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="ddad6-592">This method overload is called by the <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29> method overload inherited from the <xref:System.Reflection.MethodBase> class, so the preceding remarks apply to both overloads.</span></span>  
  
 <span data-ttu-id="ddad6-593">Ta metoda nie wymagać uprawnień bezpośrednio, ale wywołania metody dynamicznej może spowodować wymogów bezpieczeństwa, w zależności od metody.</span><span class="sxs-lookup"><span data-stu-id="ddad6-593">This method does not demand permissions directly, but invoking the dynamic method can result in security demands, depending on the method.</span></span> <span data-ttu-id="ddad6-594">Na przykład, nie wymagania wprowadzono anonimowo obsługiwane metody dynamiczne, które zostały utworzone z `restrictedSkipVisibility` parametr `false`.</span><span class="sxs-lookup"><span data-stu-id="ddad6-594">For example, no demands are made for anonymously hosted dynamic methods that are created with the `restrictedSkipVisibility` parameter set to `false`.</span></span> <span data-ttu-id="ddad6-595">Z drugiej strony, jeśli tworzysz metodę z `restrictedSkipVisibility` równa `true` więc może uzyskać dostęp ukrytego elementu członkowskiego zestawu docelowego, metoda spowoduje, że żądanie uprawnienia oraz zestaw docelowy <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flagi.</span><span class="sxs-lookup"><span data-stu-id="ddad6-595">On the other hand, if you create a method with `restrictedSkipVisibility` set to `true` so it can access a hidden member of a target assembly, the method will cause a demand for the permissions of the target assembly plus <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-596">Przed [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ta metoda wymagane <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flagi.</span><span class="sxs-lookup"><span data-stu-id="ddad6-596">Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flag.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddad6-597">Poniższy kod wywołuje metodę dynamiczną z powiązaniem dokładnie, przy użyciu kultury angielski (US).</span><span class="sxs-lookup"><span data-stu-id="ddad6-597">The following code example invokes a dynamic method with exact binding, using the US-English culture.</span></span> <span data-ttu-id="ddad6-598">Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="ddad6-598">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#4](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#4)]
 [!code-csharp[Reflection.DynamicMethod.All#4](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#4)]
 [!code-vb[Reflection.DynamicMethod.All#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ddad6-599">
            <see cref="F:System.Reflection.CallingConventions.VarArgs" /> Konwencji wywoływania nie jest obsługiwana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-599">The <see cref="F:System.Reflection.CallingConventions.VarArgs" /> calling convention is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetParameterCountException">
          <span data-ttu-id="ddad6-600">Liczba elementów w <paramref name="parameters" /> jest niezgodna z liczbą parametrów metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-600">The number of elements in <paramref name="parameters" /> does not match the number of parameters in the dynamic method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ddad6-601">Wpisz jeden lub więcej elementów <paramref name="parameters" /> nie jest zgodny z typem odpowiedniego parametru metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-601">The type of one or more elements of <paramref name="parameters" /> does not match the type of the corresponding parameter of the dynamic method.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="ddad6-602">Metoda dynamiczna jest skojarzony z modułem, nie jest hostowana anonimowo i został skonstruowany przy użyciu <paramref name="skipVisibility" /> równa <see langword="false" />, ale metoda dynamiczna uzyskuje dostęp do elementów członkowskich, które nie są <see langword="public" /> lub <see langword="internal" /> (<see langword="Friend" /> w języku Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-602">The dynamic method is associated with a module, is not anonymously hosted, and was constructed with <paramref name="skipVisibility" /> set to <see langword="false" />, but the dynamic method accesses members that are not <see langword="public" /> or <see langword="internal" /> (<see langword="Friend" /> in Visual Basic).</span>
          </span>
          <span data-ttu-id="ddad6-603">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-603">-or-</span>
          </span>
          <span data-ttu-id="ddad6-604">Metoda dynamiczna znajduje się anonimowo i został skonstruowany przy użyciu <paramref name="skipVisibility" /> równa <see langword="false" />, ale uzyskuje dostęp do elementów członkowskich, które nie są <see langword="public" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-604">The dynamic method is anonymously hosted and was constructed with <paramref name="skipVisibility" /> set to <see langword="false" />, but it accesses members that are not <see langword="public" />.</span>
          </span>
          <span data-ttu-id="ddad6-605">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-605">-or-</span>
          </span>
          <span data-ttu-id="ddad6-606">Dynamiczna metoda zawiera nieweryfikowalny kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-606">The dynamic method contains unverifiable code.</span>
          </span>
          <span data-ttu-id="ddad6-607">Sekcja "Weryfikacja" w uwagi dla <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-607">See the "Verification" section in Remarks for <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.IsDefined : Type * bool -&gt; bool" Usage="dynamicMethod.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="ddad6-608">A <see cref="T:System.Type" /> reprezentujący typ atrybutu niestandardowego, aby wyszukać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-608">A <see cref="T:System.Type" /> representing the type of custom attribute to search for.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="ddad6-609">
            <see langword="true" /> Aby przeszukać łańcuch dziedziczenia metody w celu znalezienia atrybutów niestandardowych; <see langword="false" /> do sprawdzania bieżącej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-609">
              <see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ddad6-610">Wskazuje, czy zdefiniowano typ określonego atrybutu niestandardowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-610">Indicates whether the specified custom attribute type is defined.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ddad6-611">
            <see langword="true" /> Jeśli nie zdefiniowano typu określonego atrybutu niestandardowego; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-611">
              <see langword="true" /> if the specified custom attribute type is defined; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-612">Dla metody dynamiczne, określając `true` dla `inherit` nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-612">For dynamic methods, specifying `true` for `inherit` has no effect.</span></span> <span data-ttu-id="ddad6-613">Metody dynamiczne mają nie łańcuch dziedziczenia.</span><span class="sxs-lookup"><span data-stu-id="ddad6-613">Dynamic methods have no inheritance chain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-614">Atrybutów niestandardowych, które nie są obecnie obsługiwane dla metod dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="ddad6-614">Custom attributes are not currently supported on dynamic methods.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityCritical : bool" Usage="System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ddad6-615">Pobiera wartość wskazującą, czy bieżąca metoda dynamiczna jest krytyczne dla bezpieczeństwa lub zabezpieczenia bezpieczny krytyczny i w związku z tym można wykonywać krytyczne operacje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-615">Gets a value that indicates whether the current dynamic method is security-critical or security-safe-critical, and therefore can perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ddad6-616">
            <see langword="true" /> Jeśli bieżąca metoda dynamiczna jest krytyczne dla bezpieczeństwa lub zabezpieczenia bezpieczny krytyczny; <see langword="false" /> , gdy jest za przezroczysty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-616">
              <see langword="true" /> if the current dynamic method is security-critical or security-safe-critical; <see langword="false" /> if it is transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-617"><xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, I <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> właściwości raportu poziom przezroczystości metodę dynamiczną, zgodnie z ustaleniami środowisko uruchomieniowe języka wspólnego (CLR).</span><span class="sxs-lookup"><span data-stu-id="ddad6-617">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="ddad6-618">W poniższej tabeli przedstawiono kombinacje tych właściwości:</span><span class="sxs-lookup"><span data-stu-id="ddad6-618">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="ddad6-619">Poziom zabezpieczeń</span><span class="sxs-lookup"><span data-stu-id="ddad6-619">Security level</span></span>|<span data-ttu-id="ddad6-620">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="ddad6-620">IsSecurityCritical</span></span>|<span data-ttu-id="ddad6-621">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="ddad6-621">IsSecuritySafeCritical</span></span>|<span data-ttu-id="ddad6-622">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="ddad6-622">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="ddad6-623">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="ddad6-623">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="ddad6-624">Bezpieczne krytyczne</span><span class="sxs-lookup"><span data-stu-id="ddad6-624">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="ddad6-625">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="ddad6-625">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="ddad6-626">Korzystanie z tych właściwości jest znacznie prostsze niż badanie adnotacje zabezpieczeń zestawu i jego typów, sprawdzania bieżącego poziomu zaufania i próby zduplikowania reguł w środowisku uruchomieniowym.</span><span class="sxs-lookup"><span data-stu-id="ddad6-626">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="ddad6-627">Przezroczystość metodę dynamiczną, zależy od moduł, który jest skojarzony.</span><span class="sxs-lookup"><span data-stu-id="ddad6-627">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="ddad6-628">Jeśli metoda dynamiczna jest skojarzony z typem, a nie modułu, jego przezroczystość zależy od moduł, który zawiera typu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-628">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="ddad6-629">Metody dynamiczne ma adnotacje zabezpieczeń, więc są przypisane przezroczystość domyślne skojarzonego modułu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-629">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="ddad6-630">Anonimowo obsługiwane metody dynamiczne są zawsze przezroczyste, ponieważ moduł dostarczane przez system, który je zawiera jest przezroczysty.</span><span class="sxs-lookup"><span data-stu-id="ddad6-630">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="ddad6-631">W poniższej tabeli opisano przezroczystość metodę dynamiczną, która jest skojarzona z zaufanym zestawie (czyli zestawu z silną nazwą zainstalowaną w globalnej pamięci podręcznej).</span><span class="sxs-lookup"><span data-stu-id="ddad6-631">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="ddad6-632">Adnotacja zestawu</span><span class="sxs-lookup"><span data-stu-id="ddad6-632">Assembly annotation</span></span>|<span data-ttu-id="ddad6-633">Poziom 1 przejrzystości</span><span class="sxs-lookup"><span data-stu-id="ddad6-633">Level 1 transparency</span></span>|<span data-ttu-id="ddad6-634">Poziom 2 przezroczystości</span><span class="sxs-lookup"><span data-stu-id="ddad6-634">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="ddad6-635">W pełni przezroczyste</span><span class="sxs-lookup"><span data-stu-id="ddad6-635">Fully transparent</span></span>|<span data-ttu-id="ddad6-636">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="ddad6-636">Transparent</span></span>|<span data-ttu-id="ddad6-637">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="ddad6-637">Transparent</span></span>|  
    |<span data-ttu-id="ddad6-638">W pełni krytyczne</span><span class="sxs-lookup"><span data-stu-id="ddad6-638">Fully critical</span></span>|<span data-ttu-id="ddad6-639">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="ddad6-639">Critical</span></span>|<span data-ttu-id="ddad6-640">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="ddad6-640">Critical</span></span>|  
    |<span data-ttu-id="ddad6-641">Mieszane przezroczystości</span><span class="sxs-lookup"><span data-stu-id="ddad6-641">Mixed transparency</span></span>|<span data-ttu-id="ddad6-642">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="ddad6-642">Transparent</span></span>|<span data-ttu-id="ddad6-643">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="ddad6-643">Transparent</span></span>|  
    |<span data-ttu-id="ddad6-644">Security-agnostic</span><span class="sxs-lookup"><span data-stu-id="ddad6-644">Security-agnostic</span></span>|<span data-ttu-id="ddad6-645">Bezpieczny krytyczny</span><span class="sxs-lookup"><span data-stu-id="ddad6-645">Safe-critical</span></span>|<span data-ttu-id="ddad6-646">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="ddad6-646">Critical</span></span>|  
  
     <span data-ttu-id="ddad6-647">Na przykład jeśli metoda dynamiczna jest skojarzona z typem, który znajduje się w mscorlib.dll, który ma poziom 2 przezroczystości mieszany, metoda dynamiczna jest niewidoczna i nie można wykonać kod krytyczny.</span><span class="sxs-lookup"><span data-stu-id="ddad6-647">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="ddad6-648">Aby uzyskać informacji na temat poziomów przezroczystości, zobacz [kod o przezroczystym poziomie bezpieczeństwa, poziom 1](~/docs/framework/misc/security-transparent-code-level-1.md) i [kod o przezroczystym poziomie bezpieczeństwa, poziom 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="ddad6-648">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="ddad6-649">Kojarzenie metodę dynamiczną za pomocą modułu w zestawie zaufanego poziomu 1, który jest zabezpieczeń, niezależnie od takich jak System.dll, nie zezwala na podniesienie poziomu zaufania.</span><span class="sxs-lookup"><span data-stu-id="ddad6-649">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="ddad6-650">Jeśli zestaw uprawnień kodu, który wywołuje metodę dynamiczną nie obejmuje zestaw uprawnień System.dll (czyli pełne zaufanie) <xref:System.Security.SecurityException> jest generowany, gdy wywoływana jest metoda dynamiczna.</span><span class="sxs-lookup"><span data-stu-id="ddad6-650">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="ddad6-651">Przezroczystość metodę dynamiczną, która jest skojarzona z częściowo zaufanym zestawem zależy od tego, jak zestaw jest ładowany.</span><span class="sxs-lookup"><span data-stu-id="ddad6-651">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="ddad6-652">Jeśli zestaw jest ładowany z częściowej relacji zaufania (na przykład w domenie aplikacji w trybie piaskownicy), środowisko wykonawcze ignoruje adnotacje zabezpieczeń zestawu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-652">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="ddad6-653">Zestaw i jego typów i członków, łącznie z metody dynamiczne są traktowane jako przezroczyste.</span><span class="sxs-lookup"><span data-stu-id="ddad6-653">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="ddad6-654">Środowisko wykonawcze zwraca uwagę na adnotacje zabezpieczeń, tylko wtedy, gdy zestaw częściowego zaufania jest ładowany z pełnym zaufaniem (na przykład do domyślnej domeny aplikacji klasycznych aplikacji).</span><span class="sxs-lookup"><span data-stu-id="ddad6-654">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="ddad6-655">W takim przypadku środowiska uruchomieniowego przypisuje metodę dynamiczną, domyślną przezroczystość dla metod, zgodnie z adnotacje zestawu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-655">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="ddad6-656">Aby uzyskać więcej informacji na temat odbicia emisji i przejrzystości, zobacz [problemy z zabezpieczeniami w emisji odbicia](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="ddad6-656">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="ddad6-657">Aby uzyskać informacje o przezroczystości, zobacz [zmiany zabezpieczeń](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="ddad6-657">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ddad6-658">Metoda dynamiczna nie ma treści metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-658">The dynamic method doesn't have a method body.</span>
          </span>
        </exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md">
          <span data-ttu-id="ddad6-659">Problemy związane z zabezpieczeniami w emisji odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-659">Security Issues in Reflection Emit</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md">
          <span data-ttu-id="ddad6-660">Zagadnienia dotyczące zabezpieczeń dla odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-660">Security Considerations for Reflection</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/security/security-changes.md">
          <span data-ttu-id="ddad6-661">Zmiany zabezpieczeń w programie .NET Framework w wersji 4.0</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-661">Security Changes in the .NET Framework Version 4.0</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/5fd8f46d-3961-46a7-84af-2eb1f48e75cf">
          <span data-ttu-id="ddad6-662">Kod o przezroczystym poziomie bezpieczeństwa, poziom 1</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-662">Security-Transparent Code, Level 1</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/4d05610a-0da6-4f08-acea-d54c9d6143c0">
          <span data-ttu-id="ddad6-663">Kod o przezroczystym poziomie bezpieczeństwa, poziom 2</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-663">Security-Transparent Code, Level 2</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecuritySafeCritical : bool" Usage="System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ddad6-664">Pobiera wartość wskazującą, czy bieżąca metoda dynamiczna to zabezpieczenia bezpieczny krytyczny bieżącym poziomie zaufania. oznacza to, czy go może wykonywać krytyczne operacje i może zostać oceniony przez kod przezroczysty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-664">Gets a value that indicates whether the current dynamic method is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ddad6-665">
            <see langword="true" /> Jeśli metoda dynamiczna jest zabezpieczenia bezpieczny krytyczny bieżącym poziomie zaufania. <see langword="false" /> przypadku krytyczne dla bezpieczeństwa lub przezroczyste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-665">
              <see langword="true" /> if the dynamic method is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-666"><xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, I <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> właściwości raportu poziom przezroczystości metodę dynamiczną, zgodnie z ustaleniami środowisko uruchomieniowe języka wspólnego (CLR).</span><span class="sxs-lookup"><span data-stu-id="ddad6-666">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="ddad6-667">W poniższej tabeli przedstawiono kombinacje tych właściwości:</span><span class="sxs-lookup"><span data-stu-id="ddad6-667">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="ddad6-668">Poziom zabezpieczeń</span><span class="sxs-lookup"><span data-stu-id="ddad6-668">Security level</span></span>|<span data-ttu-id="ddad6-669">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="ddad6-669">IsSecurityCritical</span></span>|<span data-ttu-id="ddad6-670">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="ddad6-670">IsSecuritySafeCritical</span></span>|<span data-ttu-id="ddad6-671">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="ddad6-671">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="ddad6-672">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="ddad6-672">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="ddad6-673">Bezpieczne krytyczne</span><span class="sxs-lookup"><span data-stu-id="ddad6-673">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="ddad6-674">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="ddad6-674">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="ddad6-675">Korzystanie z tych właściwości jest znacznie prostsze niż badanie adnotacje zabezpieczeń zestawu i jego typów, sprawdzania bieżącego poziomu zaufania i próby zduplikowania reguł w środowisku uruchomieniowym.</span><span class="sxs-lookup"><span data-stu-id="ddad6-675">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="ddad6-676">Przezroczystość metodę dynamiczną, zależy od moduł, który jest skojarzony.</span><span class="sxs-lookup"><span data-stu-id="ddad6-676">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="ddad6-677">Jeśli metoda dynamiczna jest skojarzony z typem, a nie modułu, jego przezroczystość zależy od moduł, który zawiera typu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-677">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="ddad6-678">Metody dynamiczne ma adnotacje zabezpieczeń, więc są przypisane przezroczystość domyślne skojarzonego modułu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-678">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="ddad6-679">Anonimowo obsługiwane metody dynamiczne są zawsze przezroczyste, ponieważ moduł dostarczane przez system, który je zawiera jest przezroczysty.</span><span class="sxs-lookup"><span data-stu-id="ddad6-679">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="ddad6-680">W poniższej tabeli opisano przezroczystość metodę dynamiczną, która jest skojarzona z zaufanym zestawie (czyli zestawu z silną nazwą zainstalowaną w globalnej pamięci podręcznej).</span><span class="sxs-lookup"><span data-stu-id="ddad6-680">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="ddad6-681">Adnotacja zestawu</span><span class="sxs-lookup"><span data-stu-id="ddad6-681">Assembly annotation</span></span>|<span data-ttu-id="ddad6-682">Poziom 1 przejrzystości</span><span class="sxs-lookup"><span data-stu-id="ddad6-682">Level 1 transparency</span></span>|<span data-ttu-id="ddad6-683">Poziom 2 przezroczystości</span><span class="sxs-lookup"><span data-stu-id="ddad6-683">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="ddad6-684">W pełni przezroczyste</span><span class="sxs-lookup"><span data-stu-id="ddad6-684">Fully transparent</span></span>|<span data-ttu-id="ddad6-685">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="ddad6-685">Transparent</span></span>|<span data-ttu-id="ddad6-686">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="ddad6-686">Transparent</span></span>|  
    |<span data-ttu-id="ddad6-687">W pełni krytyczne</span><span class="sxs-lookup"><span data-stu-id="ddad6-687">Fully critical</span></span>|<span data-ttu-id="ddad6-688">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="ddad6-688">Critical</span></span>|<span data-ttu-id="ddad6-689">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="ddad6-689">Critical</span></span>|  
    |<span data-ttu-id="ddad6-690">Mieszane przezroczystości</span><span class="sxs-lookup"><span data-stu-id="ddad6-690">Mixed transparency</span></span>|<span data-ttu-id="ddad6-691">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="ddad6-691">Transparent</span></span>|<span data-ttu-id="ddad6-692">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="ddad6-692">Transparent</span></span>|  
    |<span data-ttu-id="ddad6-693">Security-agnostic</span><span class="sxs-lookup"><span data-stu-id="ddad6-693">Security-agnostic</span></span>|<span data-ttu-id="ddad6-694">Bezpieczny krytyczny</span><span class="sxs-lookup"><span data-stu-id="ddad6-694">Safe-critical</span></span>|<span data-ttu-id="ddad6-695">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="ddad6-695">Critical</span></span>|  
  
     <span data-ttu-id="ddad6-696">Na przykład jeśli metoda dynamiczna jest skojarzona z typem, który znajduje się w mscorlib.dll, który ma poziom 2 przezroczystości mieszany, metoda dynamiczna jest niewidoczna i nie można wykonać kod krytyczny.</span><span class="sxs-lookup"><span data-stu-id="ddad6-696">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="ddad6-697">Aby uzyskać informacji na temat poziomów przezroczystości, zobacz [kod o przezroczystym poziomie bezpieczeństwa, poziom 1](~/docs/framework/misc/security-transparent-code-level-1.md) i [kod o przezroczystym poziomie bezpieczeństwa, poziom 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="ddad6-697">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="ddad6-698">Kojarzenie metodę dynamiczną za pomocą modułu w zestawie zaufanego poziomu 1, który jest zabezpieczeń, niezależnie od takich jak System.dll, nie zezwala na podniesienie poziomu zaufania.</span><span class="sxs-lookup"><span data-stu-id="ddad6-698">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="ddad6-699">Jeśli zestaw uprawnień kodu, który wywołuje metodę dynamiczną nie obejmuje zestaw uprawnień System.dll (czyli pełne zaufanie) <xref:System.Security.SecurityException> jest generowany, gdy wywoływana jest metoda dynamiczna.</span><span class="sxs-lookup"><span data-stu-id="ddad6-699">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="ddad6-700">Przezroczystość metodę dynamiczną, która jest skojarzona z częściowo zaufanym zestawem zależy od tego, jak zestaw jest ładowany.</span><span class="sxs-lookup"><span data-stu-id="ddad6-700">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="ddad6-701">Jeśli zestaw jest ładowany z częściowej relacji zaufania (na przykład w domenie aplikacji w trybie piaskownicy), środowisko wykonawcze ignoruje adnotacje zabezpieczeń zestawu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-701">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="ddad6-702">Zestaw i jego typów i członków, łącznie z metody dynamiczne są traktowane jako przezroczyste.</span><span class="sxs-lookup"><span data-stu-id="ddad6-702">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="ddad6-703">Środowisko wykonawcze zwraca uwagę na adnotacje zabezpieczeń, tylko wtedy, gdy zestaw częściowego zaufania jest ładowany z pełnym zaufaniem (na przykład do domyślnej domeny aplikacji klasycznych aplikacji).</span><span class="sxs-lookup"><span data-stu-id="ddad6-703">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="ddad6-704">W takim przypadku środowiska uruchomieniowego przypisuje metodę dynamiczną, domyślną przezroczystość dla metod, zgodnie z adnotacje zestawu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-704">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="ddad6-705">Aby uzyskać więcej informacji na temat odbicia emisji i przejrzystości, zobacz [problemy z zabezpieczeniami w emisji odbicia](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="ddad6-705">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="ddad6-706">Aby uzyskać informacje o przezroczystości, zobacz [zmiany zabezpieczeń](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="ddad6-706">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ddad6-707">Metoda dynamiczna nie ma treści metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-707">The dynamic method doesn't have a method body.</span>
          </span>
        </exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md">
          <span data-ttu-id="ddad6-708">Problemy związane z zabezpieczeniami w emisji odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-708">Security Issues in Reflection Emit</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md">
          <span data-ttu-id="ddad6-709">Zagadnienia dotyczące zabezpieczeń dla odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-709">Security Considerations for Reflection</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/security/security-changes.md">
          <span data-ttu-id="ddad6-710">Zmiany zabezpieczeń w programie .NET Framework w wersji 4.0</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-710">Security Changes in the .NET Framework Version 4.0</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/5fd8f46d-3961-46a7-84af-2eb1f48e75cf">
          <span data-ttu-id="ddad6-711">Kod o przezroczystym poziomie bezpieczeństwa, poziom 1</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-711">Security-Transparent Code, Level 1</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/4d05610a-0da6-4f08-acea-d54c9d6143c0">
          <span data-ttu-id="ddad6-712">Kod o przezroczystym poziomie bezpieczeństwa, poziom 2</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-712">Security-Transparent Code, Level 2</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public override bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityTransparent : bool" Usage="System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ddad6-713">Pobiera wartość wskazującą, czy bieżąca metoda dynamiczna jest niewidoczne na bieżącym poziomie zaufania, a w związku z tym nie można wykonać operacji krytycznych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-713">Gets a value that indicates whether the current dynamic method is transparent at the current trust level, and therefore cannot perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ddad6-714">
            <see langword="true" /> Jeśli metoda dynamiczna jest przezroczyste dla zabezpieczeń na bieżącym poziomie zaufania; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-714">
              <see langword="true" /> if the dynamic method is security-transparent at the current trust level; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-715"><xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, I <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> właściwości raportu poziom przezroczystości metodę dynamiczną, zgodnie z ustaleniami środowisko uruchomieniowe języka wspólnego (CLR).</span><span class="sxs-lookup"><span data-stu-id="ddad6-715">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="ddad6-716">W poniższej tabeli przedstawiono kombinacje tych właściwości:</span><span class="sxs-lookup"><span data-stu-id="ddad6-716">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="ddad6-717">Poziom zabezpieczeń</span><span class="sxs-lookup"><span data-stu-id="ddad6-717">Security level</span></span>|<span data-ttu-id="ddad6-718">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="ddad6-718">IsSecurityCritical</span></span>|<span data-ttu-id="ddad6-719">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="ddad6-719">IsSecuritySafeCritical</span></span>|<span data-ttu-id="ddad6-720">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="ddad6-720">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="ddad6-721">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="ddad6-721">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="ddad6-722">Bezpieczne krytyczne</span><span class="sxs-lookup"><span data-stu-id="ddad6-722">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="ddad6-723">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="ddad6-723">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="ddad6-724">Korzystanie z tych właściwości jest znacznie prostsze niż badanie adnotacje zabezpieczeń zestawu i jego typów, sprawdzania bieżącego poziomu zaufania i próby zduplikowania reguł w środowisku uruchomieniowym.</span><span class="sxs-lookup"><span data-stu-id="ddad6-724">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="ddad6-725">Przezroczystość metodę dynamiczną, zależy od moduł, który jest skojarzony.</span><span class="sxs-lookup"><span data-stu-id="ddad6-725">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="ddad6-726">Jeśli metoda dynamiczna jest skojarzony z typem, a nie modułu, jego przezroczystość zależy od moduł, który zawiera typu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-726">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="ddad6-727">Metody dynamiczne ma adnotacje zabezpieczeń, więc są przypisane przezroczystość domyślne skojarzonego modułu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-727">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="ddad6-728">Anonimowo obsługiwane metody dynamiczne są zawsze przezroczyste, ponieważ moduł dostarczane przez system, który je zawiera jest przezroczysty.</span><span class="sxs-lookup"><span data-stu-id="ddad6-728">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="ddad6-729">W poniższej tabeli opisano przezroczystość metodę dynamiczną, która jest skojarzona z zaufanym zestawie (czyli zestawu z silną nazwą zainstalowaną w globalnej pamięci podręcznej).</span><span class="sxs-lookup"><span data-stu-id="ddad6-729">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="ddad6-730">Adnotacja zestawu</span><span class="sxs-lookup"><span data-stu-id="ddad6-730">Assembly annotation</span></span>|<span data-ttu-id="ddad6-731">Poziom 1 przejrzystości</span><span class="sxs-lookup"><span data-stu-id="ddad6-731">Level 1 transparency</span></span>|<span data-ttu-id="ddad6-732">Poziom 2 przezroczystości</span><span class="sxs-lookup"><span data-stu-id="ddad6-732">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="ddad6-733">W pełni przezroczyste</span><span class="sxs-lookup"><span data-stu-id="ddad6-733">Fully transparent</span></span>|<span data-ttu-id="ddad6-734">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="ddad6-734">Transparent</span></span>|<span data-ttu-id="ddad6-735">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="ddad6-735">Transparent</span></span>|  
    |<span data-ttu-id="ddad6-736">W pełni krytyczne</span><span class="sxs-lookup"><span data-stu-id="ddad6-736">Fully critical</span></span>|<span data-ttu-id="ddad6-737">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="ddad6-737">Critical</span></span>|<span data-ttu-id="ddad6-738">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="ddad6-738">Critical</span></span>|  
    |<span data-ttu-id="ddad6-739">Mieszane przezroczystości</span><span class="sxs-lookup"><span data-stu-id="ddad6-739">Mixed transparency</span></span>|<span data-ttu-id="ddad6-740">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="ddad6-740">Transparent</span></span>|<span data-ttu-id="ddad6-741">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="ddad6-741">Transparent</span></span>|  
    |<span data-ttu-id="ddad6-742">Security-agnostic</span><span class="sxs-lookup"><span data-stu-id="ddad6-742">Security-agnostic</span></span>|<span data-ttu-id="ddad6-743">Bezpieczny krytyczny</span><span class="sxs-lookup"><span data-stu-id="ddad6-743">Safe-critical</span></span>|<span data-ttu-id="ddad6-744">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="ddad6-744">Critical</span></span>|  
  
     <span data-ttu-id="ddad6-745">Na przykład jeśli metoda dynamiczna jest skojarzona z typem, który znajduje się w mscorlib.dll, który ma poziom 2 przezroczystości mieszany, metoda dynamiczna jest niewidoczna i nie można wykonać kod krytyczny.</span><span class="sxs-lookup"><span data-stu-id="ddad6-745">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="ddad6-746">Aby uzyskać informacji na temat poziomów przezroczystości, zobacz [kod o przezroczystym poziomie bezpieczeństwa, poziom 1](~/docs/framework/misc/security-transparent-code-level-1.md) i [kod o przezroczystym poziomie bezpieczeństwa, poziom 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="ddad6-746">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="ddad6-747">Kojarzenie metodę dynamiczną za pomocą modułu w zestawie zaufanego poziomu 1, który jest zabezpieczeń, niezależnie od takich jak System.dll, nie zezwala na podniesienie poziomu zaufania.</span><span class="sxs-lookup"><span data-stu-id="ddad6-747">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="ddad6-748">Jeśli zestaw uprawnień kodu, który wywołuje metodę dynamiczną nie obejmuje zestaw uprawnień System.dll (czyli pełne zaufanie) <xref:System.Security.SecurityException> jest generowany, gdy wywoływana jest metoda dynamiczna.</span><span class="sxs-lookup"><span data-stu-id="ddad6-748">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="ddad6-749">Przezroczystość metodę dynamiczną, która jest skojarzona z częściowo zaufanym zestawem zależy od tego, jak zestaw jest ładowany.</span><span class="sxs-lookup"><span data-stu-id="ddad6-749">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="ddad6-750">Jeśli zestaw jest ładowany z częściowej relacji zaufania (na przykład w domenie aplikacji w trybie piaskownicy), środowisko wykonawcze ignoruje adnotacje zabezpieczeń zestawu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-750">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="ddad6-751">Zestaw i jego typów i członków, łącznie z metody dynamiczne są traktowane jako przezroczyste.</span><span class="sxs-lookup"><span data-stu-id="ddad6-751">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="ddad6-752">Środowisko wykonawcze zwraca uwagę na adnotacje zabezpieczeń, tylko wtedy, gdy zestaw częściowego zaufania jest ładowany z pełnym zaufaniem (na przykład do domyślnej domeny aplikacji klasycznych aplikacji).</span><span class="sxs-lookup"><span data-stu-id="ddad6-752">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="ddad6-753">W takim przypadku środowiska uruchomieniowego przypisuje metodę dynamiczną, domyślną przezroczystość dla metod, zgodnie z adnotacje zestawu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-753">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="ddad6-754">Aby uzyskać więcej informacji na temat odbicia emisji i przejrzystości, zobacz [problemy z zabezpieczeniami w emisji odbicia](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="ddad6-754">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="ddad6-755">Aby uzyskać informacje o przezroczystości, zobacz [zmiany zabezpieczeń](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="ddad6-755">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ddad6-756">Metoda dynamiczna nie ma treści metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-756">The dynamic method doesn't have a method body.</span>
          </span>
        </exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md">
          <span data-ttu-id="ddad6-757">Problemy związane z zabezpieczeniami w emisji odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-757">Security Issues in Reflection Emit</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md">
          <span data-ttu-id="ddad6-758">Zagadnienia dotyczące zabezpieczeń dla odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-758">Security Considerations for Reflection</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/security/security-changes.md">
          <span data-ttu-id="ddad6-759">Zmiany zabezpieczeń w programie .NET Framework w wersji 4.0</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-759">Security Changes in the .NET Framework Version 4.0</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/5fd8f46d-3961-46a7-84af-2eb1f48e75cf">
          <span data-ttu-id="ddad6-760">Kod o przezroczystym poziomie bezpieczeństwa, poziom 1</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-760">Security-Transparent Code, Level 1</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/4d05610a-0da6-4f08-acea-d54c9d6143c0">
          <span data-ttu-id="ddad6-761">Kod o przezroczystym poziomie bezpieczeństwa, poziom 2</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-761">Security-Transparent Code, Level 2</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="MethodHandle">
      <MemberSignature Language="C#" Value="public override RuntimeMethodHandle MethodHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeMethodHandle MethodHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.MethodHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodHandle As RuntimeMethodHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeMethodHandle MethodHandle { RuntimeMethodHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.MethodHandle : RuntimeMethodHandle" Usage="System.Reflection.Emit.DynamicMethod.MethodHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeMethodHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ddad6-762">Nie jest obsługiwane dla metod dynamicznych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-762">Not supported for dynamic methods.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ddad6-763">Nie jest obsługiwane dla metod dynamicznych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-763">Not supported for dynamic methods.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ddad6-764">Niedozwolone dla metod dynamicznych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-764">Not allowed for dynamic methods.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes MethodImplementationFlags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodImplAttributes MethodImplementationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.MethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodImplementationFlags As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodImplAttributes MethodImplementationFlags { System::Reflection::MethodImplAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.MethodImplementationFlags : System.Reflection.MethodImplAttributes" Usage="System.Reflection.Emit.DynamicMethod.MethodImplementationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Reflection.Emit.DynamicMethod.Module" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ddad6-765">Pobiera moduł za pomocą którego metoda dynamiczna jest logicznie powiązanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-765">Gets the module with which the dynamic method is logically associated.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ddad6-766">
            <see cref="T:System.Reflection.Module" /> z bieżącej metody dynamiczne jest skojarzony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-766">The <see cref="T:System.Reflection.Module" /> with which the current dynamic method is associated.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-767">Jeśli moduł został określony podczas tworzenia metodę dynamiczną, ta właściwość zwraca ten moduł.</span><span class="sxs-lookup"><span data-stu-id="ddad6-767">If a module was specified when the dynamic method was created, this property returns that module.</span></span> <span data-ttu-id="ddad6-768">Jeśli typ został określony jako właściciela podczas tworzenia metodę dynamiczną, ta właściwość zwraca modułu, który zawiera tego typu.</span><span class="sxs-lookup"><span data-stu-id="ddad6-768">If a type was specified as the owner when the dynamic method was created, this property returns the module which contains that type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddad6-769">Poniższy kod przedstawia przykład <xref:System.Reflection.Emit.DynamicMethod.Module%2A> właściwość metodę dynamiczną.</span><span class="sxs-lookup"><span data-stu-id="ddad6-769">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.Module%2A> property of a dynamic method.</span></span> <span data-ttu-id="ddad6-770">Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="ddad6-770">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#26](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#26)]
 [!code-csharp[Reflection.DynamicMethod.All#26](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#26)]
 [!code-vb[Reflection.DynamicMethod.All#26](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Reflection.Emit.DynamicMethod.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ddad6-771">Pobiera nazwę metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-771">Gets the name of the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ddad6-772">Prosta nazwa metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-772">The simple name of the method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="ddad6-773">Nie jest niezbędne do nazw metod dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="ddad6-773">It is not necessary to name dynamic methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddad6-774">Poniższy przykład kodu przedstawia nazwę metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="ddad6-774">The following code example displays the name of a dynamic method.</span></span> <span data-ttu-id="ddad6-775">Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="ddad6-775">This code example is part of a larger example provided for  the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#27](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#27)]
 [!code-csharp[Reflection.DynamicMethod.All#27](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#27)]
 [!code-vb[Reflection.DynamicMethod.All#27](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Reflection.Emit.DynamicMethod.ReflectedType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ddad6-776">Pobiera klasę, który został użyty w odbiciu do uzyskania metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-776">Gets the class that was used in reflection to obtain the method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ddad6-777">Zawsze <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-777">Always <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-778">Właściwość ta zwraca zawsze `null` dla metod dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="ddad6-778">This property always returns `null` for dynamic methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddad6-779">Poniższy przykład kodu wyświetla typ odbitych metodę dynamiczną.</span><span class="sxs-lookup"><span data-stu-id="ddad6-779">The following code example displays the reflected type of a dynamic method.</span></span> <span data-ttu-id="ddad6-780">Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="ddad6-780">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#28](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#28)]
 [!code-csharp[Reflection.DynamicMethod.All#28](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#28)]
 [!code-vb[Reflection.DynamicMethod.All#28](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnParameter">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo ReturnParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo ReturnParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnParameter As ParameterInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ParameterInfo ^ ReturnParameter { System::Reflection::ParameterInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnParameter : System.Reflection.ParameterInfo" Usage="System.Reflection.Emit.DynamicMethod.ReturnParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ddad6-781">Pobiera parametru zwracanego metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-781">Gets the return parameter of the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ddad6-782">Zawsze <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-782">Always <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-783">Właściwość ta zwraca zawsze `null` dla metod dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="ddad6-783">This property always returns `null` for dynamic methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnType">
      <MemberSignature Language="C#" Value="public override Type ReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReturnType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReturnType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnType : Type" Usage="System.Reflection.Emit.DynamicMethod.ReturnType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ddad6-784">Pobiera typ zwracanej wartości dla metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-784">Gets the type of return value for the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ddad6-785">A <see cref="T:System.Type" /> reprezentujący typ zwracanej wartości bieżącej metody; <see cref="T:System.Void" /> Jeśli metoda nie ma zwracanego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-785">A <see cref="T:System.Type" /> representing the type of the return value of the current method; <see cref="T:System.Void" /> if the method has no return type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-786">Jeśli `null` został określony dla zwracanego typu podczas tworzenia metodę dynamiczną, właściwość ta zwraca <xref:System.Void?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="ddad6-786">If `null` was specified for the return type when the dynamic method was created, this property returns <xref:System.Void?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddad6-787">Poniższy przykład kodu wyświetla typ zwracany metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="ddad6-787">The following code example displays the return type of a dynamic method.</span></span> <span data-ttu-id="ddad6-788">Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="ddad6-788">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#30](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#30)]
 [!code-csharp[Reflection.DynamicMethod.All#30](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#30)]
 [!code-vb[Reflection.DynamicMethod.All#30](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnTypeCustomAttributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnTypeCustomAttributes As ICustomAttributeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ICustomAttributeProvider ^ ReturnTypeCustomAttributes { System::Reflection::ICustomAttributeProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnTypeCustomAttributes : System.Reflection.ICustomAttributeProvider" Usage="System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ddad6-789">Pobiera atrybuty niestandardowe zwracany typ metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-789">Gets the custom attributes of the return type for the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ddad6-790">
            <see cref="T:System.Reflection.ICustomAttributeProvider" /> Reprezentujący atrybuty niestandardowe zwracany typ metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-790">An <see cref="T:System.Reflection.ICustomAttributeProvider" /> representing the custom attributes of the return type for the dynamic method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-791">Atrybutów niestandardowych, które nie są obsługiwane w zwracanym typie metodę dynamiczną, więc tablicę atrybutów niestandardowych, które są zwracane przez <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A> metody jest zawsze puste.</span><span class="sxs-lookup"><span data-stu-id="ddad6-791">Custom attributes are not supported on the return type of a dynamic method, so the array of custom attributes returned by the <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A> method is always empty.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddad6-792">Poniższy przykład kodu pokazuje sposób wyświetlania atrybutów niestandardowych, zwracany typ metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="ddad6-792">The following code example shows how to display the custom attributes of the return type of a dynamic method.</span></span> <span data-ttu-id="ddad6-793">Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="ddad6-793">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#31](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#31)]
 [!code-csharp[Reflection.DynamicMethod.All#31](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#31)]
 [!code-vb[Reflection.DynamicMethod.All#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.ReturnType" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dynamicMethod.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ddad6-794">Zwraca podpis metody, reprezentowane jako ciąg.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-794">Returns the signature of the method, represented as a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ddad6-795">Ciąg reprezentujący podpis metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddad6-795">A string representing the method signature.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddad6-796">Podpis zawiera tylko typy i nazwę metody, jeśli istnieje.</span><span class="sxs-lookup"><span data-stu-id="ddad6-796">The signature includes only types and the method name, if any.</span></span> <span data-ttu-id="ddad6-797">Nazwy parametrów nie są uwzględniane.</span><span class="sxs-lookup"><span data-stu-id="ddad6-797">Parameter names are not included.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ddad6-798">Poniższy kod przedstawia przykład <xref:System.Reflection.Emit.DynamicMethod.ToString%2A> metoda metodę dynamiczną.</span><span class="sxs-lookup"><span data-stu-id="ddad6-798">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.ToString%2A> method of a dynamic method.</span></span> <span data-ttu-id="ddad6-799">Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="ddad6-799">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#32](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#32)]
 [!code-csharp[Reflection.DynamicMethod.All#32](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#32)]
 [!code-vb[Reflection.DynamicMethod.All#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>