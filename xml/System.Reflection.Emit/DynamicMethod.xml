<Type Name="DynamicMethod" FullName="System.Reflection.Emit.DynamicMethod">
  <TypeSignature Language="C#" Value="public sealed class DynamicMethod : System.Reflection.MethodInfo" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DynamicMethod extends System.Reflection.MethodInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.DynamicMethod" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DynamicMethod&#xA;Inherits MethodInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicMethod sealed : System::Reflection::MethodInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MethodInfo</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="71825-101">Definiuje i reprezentuje dynamiczne metodę, która może być skompilowany, wykonywane i odrzucone.</span><span class="sxs-lookup"><span data-stu-id="71825-101">Defines and represents a dynamic method that can be compiled, executed, and discarded.</span></span> <span data-ttu-id="71825-102">Odrzuconych dostępnych metod wyrzucanie elementów bezużytecznych.</span><span class="sxs-lookup"><span data-stu-id="71825-102">Discarded methods are available for garbage collection.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-103">Można użyć <xref:System.Reflection.Emit.DynamicMethod> klasy do generowania i wykonania metody w czasie wykonywania, bez konieczności generowania dynamicznego zestawu i typu dynamicznego zawiera metody.</span><span class="sxs-lookup"><span data-stu-id="71825-103">You can use the <xref:System.Reflection.Emit.DynamicMethod> class to generate and execute a method at run time, without having to generate a dynamic assembly and a dynamic type to contain the method.</span></span> <span data-ttu-id="71825-104">Kod wykonywalny utworzone za pomocą kompilatora just-in-time (JIT) jest odzyskana po <xref:System.Reflection.Emit.DynamicMethod> obiektu jest odzyskana.</span><span class="sxs-lookup"><span data-stu-id="71825-104">The executable code created by the just-in-time (JIT) compiler is reclaimed when the <xref:System.Reflection.Emit.DynamicMethod> object is reclaimed.</span></span> <span data-ttu-id="71825-105">Metody dynamiczne są najbardziej wydajny sposób, aby wygenerować i wykonaj niewielkich ilości kodu.</span><span class="sxs-lookup"><span data-stu-id="71825-105">Dynamic methods are the most efficient way to generate and execute small amounts of code.</span></span>  
  
 <span data-ttu-id="71825-106">Anonimowo hostowane metody dynamiczne lub może być logicznie powiązanych z modułem lub typem.</span><span class="sxs-lookup"><span data-stu-id="71825-106">A dynamic method can be anonymously hosted, or it can be logically associated with a module or with a type.</span></span>  
  
-   <span data-ttu-id="71825-107">Jeśli znajduje się anonimowo metody dynamicznej, znajduje się w zestawie dostarczane przez system, a w związku z tym jest odizolowana od innego kodu.</span><span class="sxs-lookup"><span data-stu-id="71825-107">If the dynamic method is anonymously hosted, it is located in a system-provided assembly, and therefore is isolated from other code.</span></span> <span data-ttu-id="71825-108">Domyślnie go nie ma dostępu do dowolnych danych niepubliczne.</span><span class="sxs-lookup"><span data-stu-id="71825-108">By default, it does not have access to any non-public data.</span></span> <span data-ttu-id="71825-109">Hostowanej anonimowo metody dynamicznej można ograniczyć możliwość pominąć kontroli widoczność kompilatora JIT, jeśli zostały przyznane <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flagi.</span><span class="sxs-lookup"><span data-stu-id="71825-109">An anonymously hosted dynamic method can have restricted ability to skip the JIT compiler's visibility checks, if it has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="71825-110">Poziom zaufania zestawu, którego niepubliczne elementy członkowskie są dostępne dla metody dynamicznej musi być równa lub podzbiór, poziom zaufania stos wywołań, który emitowane metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-110">The trust level of the assembly whose non-public members are accessed by the dynamic method must be equal to, or a subset of, the trust level of the call stack that emitted the dynamic method.</span></span> <span data-ttu-id="71825-111">Aby uzyskać więcej informacji na temat hostowanej anonimowo metody dynamicznej, zobacz [wskazówki: emitowanie kodu w scenariuszach zaufania częściowego](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md).</span><span class="sxs-lookup"><span data-stu-id="71825-111">For more information about anonymously hosted dynamic methods, see [Walkthrough: Emitting Code in Partial Trust Scenarios](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md).</span></span>  
  
-   <span data-ttu-id="71825-112">Jeśli metody dynamicznej jest skojarzony z modułu, który określisz, metody dynamicznej jest skutecznie globalny tego modułu.</span><span class="sxs-lookup"><span data-stu-id="71825-112">If the dynamic method is associated with a module that you specify, the dynamic method is effectively global to that module.</span></span> <span data-ttu-id="71825-113">Będzie miał dostęp do wszystkich typów w module i wszystkie `internal` (`Friend` w języku Visual Basic) elementy członkowskie typów.</span><span class="sxs-lookup"><span data-stu-id="71825-113">It can access all types in the module and all `internal` (`Friend` in Visual Basic) members of the types.</span></span> <span data-ttu-id="71825-114">Możesz skojarzyć dynamicznym metodę o module, niezależnie od tego, czy utworzony moduł, pod warunkiem, że popyt na <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flagi można spełnić przez stos wywołań, który zawiera kod.</span><span class="sxs-lookup"><span data-stu-id="71825-114">You can associate a dynamic method with any module, regardless of whether you created the module, provided that a demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag can be satisfied by the call stack that includes your code.</span></span> <span data-ttu-id="71825-115">Jeśli <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flaga jest uwzględniona w przyznanie, pominąć kontroli widoczność kompilatora JIT i uzyskać dostęp do danych prywatnych wszystkie typy zadeklarowany w module lub w innym module w dowolnym zestawie metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-115">If the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag is included in the grant, the dynamic method can skip the JIT compiler's visibility checks and access the private data of all types declared in the module or in any other module in any assembly.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="71825-116">Po określeniu modułu, z którym jest skojarzona metoda dynamiczne tego modułu nie może być w zestawie dostarczane przez system, który jest używany do hostowania anonimowy.</span><span class="sxs-lookup"><span data-stu-id="71825-116">When you specify the module with which a dynamic method is associated, that module must not be in the system-provided assembly that is used for anonymous hosting.</span></span>  
  
-   <span data-ttu-id="71825-117">Jeśli metody dynamicznej jest skojarzona z typem, który określisz, ma dostęp do wszystkich elementów członkowskich tego typu, niezależnie od poziomu dostępu.</span><span class="sxs-lookup"><span data-stu-id="71825-117">If the dynamic method is associated with a type that you specify, it has access to all members of the type, regardless of access level.</span></span> <span data-ttu-id="71825-118">Ponadto można pominięte kontroli widoczność JIT.</span><span class="sxs-lookup"><span data-stu-id="71825-118">In addition, JIT visibility checks can be skipped.</span></span> <span data-ttu-id="71825-119">Daje dynamiczne metody dostępu do danych z innych typów zadeklarowany w tym samym module lub inny moduł, w dowolnym zestawie.</span><span class="sxs-lookup"><span data-stu-id="71825-119">This gives the dynamic method access to the private data of other types declared in the same module or in any other module in any assembly.</span></span> <span data-ttu-id="71825-120">Metody dynamiczne można skojarzyć z dowolnego typu, ale musi otrzymać kod <xref:System.Security.Permissions.ReflectionPermission> zarówno <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> i <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flagi.</span><span class="sxs-lookup"><span data-stu-id="71825-120">You can associate a dynamic method with any type, but your code must be granted <xref:System.Security.Permissions.ReflectionPermission> with both the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> and <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flags.</span></span>  
  
 <span data-ttu-id="71825-121">W poniższej tabeli przedstawiono typy i elementy członkowskie są dostępne do hostowanej anonimowo metody dynamicznej, z lub bez kontroli widoczność JIT, w zależności od tego, czy <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> otrzymuje flagi.</span><span class="sxs-lookup"><span data-stu-id="71825-121">The following table shows which types and members are accessible to an anonymously hosted dynamic method, with and without JIT visibility checks, depending on whether <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag is granted.</span></span>  
  
||<span data-ttu-id="71825-122">Bez <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span><span class="sxs-lookup"><span data-stu-id="71825-122">Without <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span></span>|<span data-ttu-id="71825-123">Z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span><span class="sxs-lookup"><span data-stu-id="71825-123">With <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span></span>|  
|-|-|-|  
|<span data-ttu-id="71825-124">Bez pomijania sprawdzania widoczność JIT</span><span class="sxs-lookup"><span data-stu-id="71825-124">Without skipping JIT visibility checks</span></span>|<span data-ttu-id="71825-125">Publiczne elementy członkowskie typy publiczne w dowolnym zestawie.</span><span class="sxs-lookup"><span data-stu-id="71825-125">Public members of public types in any assembly.</span></span>|<span data-ttu-id="71825-126">Publiczne elementy członkowskie typy publiczne w dowolnym zestawie.</span><span class="sxs-lookup"><span data-stu-id="71825-126">Public members of public types in any assembly.</span></span>|  
|<span data-ttu-id="71825-127">Pomijanie JIT widoczność sprawdza, z ograniczeniami</span><span class="sxs-lookup"><span data-stu-id="71825-127">Skipping JIT visibility checks, with restrictions</span></span>|<span data-ttu-id="71825-128">Publiczne elementy członkowskie typy publiczne w dowolnym zestawie.</span><span class="sxs-lookup"><span data-stu-id="71825-128">Public members of public types in any assembly.</span></span>|<span data-ttu-id="71825-129">Wszystkie elementy członkowskie wszystkich typów, tylko w zestawy, których poziomy zaufania jest równa lub mniejsza niż poziom zaufania zestawu emitowane metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-129">All members of all types, only in assemblies whose trust levels are equal to or less than the trust level of the assembly that emitted the dynamic method.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="71825-130">Przed [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], emitowanie kodu wymagane <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flagi.</span><span class="sxs-lookup"><span data-stu-id="71825-130">Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], emitting code required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="71825-131">To uprawnienie jest domyślnie włączone w FullTrust i LocalIntranet nazwane zestawy uprawnień, ale nie w uprawnień internetowych.</span><span class="sxs-lookup"><span data-stu-id="71825-131">This permission is included by default in the FullTrust and LocalIntranet named permission sets, but not in the Internet permission set.</span></span> <span data-ttu-id="71825-132">W związku z tym w starszych wersjach [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] biblioteki mogą być używane z Internetu uprawnienia tylko wtedy, gdy ma ona <xref:System.Security.SecurityCriticalAttribute> atrybutu i wykonuje również <xref:System.Security.PermissionSet.Assert%2A> dla <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>.</span><span class="sxs-lookup"><span data-stu-id="71825-132">Therefore, in earlier versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] a library can be used with Internet permissions only if it has the <xref:System.Security.SecurityCriticalAttribute> attribute and also executes an <xref:System.Security.PermissionSet.Assert%2A> for <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>.</span></span> <span data-ttu-id="71825-133">Takie biblioteki wymagają przeglądu zabezpieczeń zachować ostrożność, ponieważ błędy kodowania może skutkować luk w zabezpieczeniach.</span><span class="sxs-lookup"><span data-stu-id="71825-133">Such libraries require careful security review because coding errors could result in security holes.</span></span> <span data-ttu-id="71825-134">[!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] Umożliwia kod, aby emitować w scenariuszach częściowo zaufanych bez wystawiania wszystkie żądania kontroli zabezpieczeń, ponieważ generowanie kodu nie jest z założenia uprzywilejowanych operacji.</span><span class="sxs-lookup"><span data-stu-id="71825-134">The [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] allows code to be emitted in partial trust scenarios without issuing any security demands, because generating code is not inherently a privileged operation.</span></span> <span data-ttu-id="71825-135">Oznacza to, że wygenerowany kod nie ma więcej uprawnień niż zestaw, który emituje go.</span><span class="sxs-lookup"><span data-stu-id="71825-135">That is, the generated code has no more permissions than the assembly that emits it.</span></span> <span data-ttu-id="71825-136">Dzięki temu biblioteki, w których Emituj kod jest przezroczysta pod względem zabezpieczeń i eliminuje potrzebę do potwierdzenia <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>, który upraszcza zapisywanie bezpiecznego biblioteki.</span><span class="sxs-lookup"><span data-stu-id="71825-136">This allows libraries that emit code to be security transparent and removes the need to assert <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>, which simplifies the task of writing a secure library.</span></span> <span data-ttu-id="71825-137">Aby użyć tej funkcji, należy docelowy aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszym.</span><span class="sxs-lookup"><span data-stu-id="71825-137">To use this feature, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 <span data-ttu-id="71825-138">W poniższej tabeli przedstawiono typy i elementy członkowskie są dostępne do dynamicznego metody, która jest skojarzona z modułu lub typu w module.</span><span class="sxs-lookup"><span data-stu-id="71825-138">The following table shows which types and members are accessible to a dynamic method that is associated with a module or with a type in a module.</span></span>  
  
||<span data-ttu-id="71825-139">Skojarzone z modułu</span><span class="sxs-lookup"><span data-stu-id="71825-139">Associated with module</span></span>|<span data-ttu-id="71825-140">Skojarzone z typem</span><span class="sxs-lookup"><span data-stu-id="71825-140">Associated with type</span></span>|  
|-|-|-|  
|<span data-ttu-id="71825-141">Bez pomijania sprawdzania widoczność JIT</span><span class="sxs-lookup"><span data-stu-id="71825-141">Without skipping JIT visibility checks</span></span>|<span data-ttu-id="71825-142">Publicznych oraz wewnętrznych elementów członkowskich typu publiczne, wewnętrzne i prywatne w module.</span><span class="sxs-lookup"><span data-stu-id="71825-142">Public and internal members of public, internal, and private types in the module.</span></span><br /><br /> <span data-ttu-id="71825-143">Publiczne elementy członkowskie typy publiczne w dowolnym zestawie.</span><span class="sxs-lookup"><span data-stu-id="71825-143">Public members of public types in any assembly.</span></span>|<span data-ttu-id="71825-144">Wszystkie elementy członkowskie skojarzonego typu.</span><span class="sxs-lookup"><span data-stu-id="71825-144">All members of the associated type.</span></span> <span data-ttu-id="71825-145">Publicznych oraz wewnętrznych elementów członkowskich innych typów w module.</span><span class="sxs-lookup"><span data-stu-id="71825-145">Public and internal members of all the other types in the module.</span></span><br /><br /> <span data-ttu-id="71825-146">Publiczne elementy członkowskie typy publiczne w dowolnym zestawie.</span><span class="sxs-lookup"><span data-stu-id="71825-146">Public members of public types in any assembly.</span></span>|  
|<span data-ttu-id="71825-147">Pomijanie sprawdzania widoczność JIT</span><span class="sxs-lookup"><span data-stu-id="71825-147">Skipping JIT visibility checks</span></span>|<span data-ttu-id="71825-148">Wszystkie elementy członkowskie wszystkie typy w dowolnym zestawu.</span><span class="sxs-lookup"><span data-stu-id="71825-148">All members of all types in any assembly.</span></span>|<span data-ttu-id="71825-149">Wszystkie elementy członkowskie wszystkie typy w dowolnym zestawu.</span><span class="sxs-lookup"><span data-stu-id="71825-149">All members of all types in any assembly.</span></span>|  
  
 <span data-ttu-id="71825-150">Dynamiczne metody, która jest skojarzona z modułem uprawnieniami tego modułu.</span><span class="sxs-lookup"><span data-stu-id="71825-150">A dynamic method that is associated with a module has the permissions of that module.</span></span> <span data-ttu-id="71825-151">Dynamiczne metody, która jest skojarzona z typem uprawnieniami zawierającego tego typu modułu.</span><span class="sxs-lookup"><span data-stu-id="71825-151">A dynamic method that is associated with a type has the permissions of the module containing that type.</span></span>  
  
 <span data-ttu-id="71825-152">Metody dynamiczne i ich parametry nie muszą mieć nazwy, ale można określić nazwy pomocnych w debugowaniu.</span><span class="sxs-lookup"><span data-stu-id="71825-152">Dynamic methods and their parameters do not have to be named, but you can specify names to assist in debugging.</span></span> <span data-ttu-id="71825-153">Atrybuty niestandardowe nie są obsługiwane w przypadku dynamicznych metod lub ich parametrów.</span><span class="sxs-lookup"><span data-stu-id="71825-153">Custom attributes are not supported on dynamic methods or their parameters.</span></span>  
  
 <span data-ttu-id="71825-154">Metody dynamiczne są `static` metod (`Shared` metod w języku Visual Basic), luźniejsze reguły dla delegata powiązanie wprowadzone w systemie [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] umożliwia dynamiczne metoda może być powiązane z obiektu tak, aby pełnił jak metody wystąpienia po wywołuje się przy użyciu tego wystąpienia obiektu delegowanego.</span><span class="sxs-lookup"><span data-stu-id="71825-154">Although dynamic methods are `static` methods (`Shared` methods in Visual Basic), the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] allow a dynamic method to be bound to an object, so that it acts like an instance method when called using that delegate instance.</span></span> <span data-ttu-id="71825-155">Przykład przedstawiający to jest dostępne w celu <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="71825-155">An example that demonstrates this is provided for the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71825-156">W [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], metod dynamicznych nie obsługują informacji o symbolach, która jest, nazwy zmiennych lokalnych i mapowanie numer wiersza.</span><span class="sxs-lookup"><span data-stu-id="71825-156">In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], dynamic methods do not support symbol information, that is, local variable names and line-number mapping.</span></span> <span data-ttu-id="71825-157">To ograniczenie może zostać usunięta w przyszłych wersjach.</span><span class="sxs-lookup"><span data-stu-id="71825-157">This limitation might be removed in a future version.</span></span> <span data-ttu-id="71825-158">Można użyć <xref:System.Reflection.Emit.AssemblyBuilder> podczas tworzenia, aby uprościć debugowania wygenerowany język pośredni firmy Microsoft (MSIL), a następnie przejdź do metod dynamicznych podczas wdrażania końcowego, ponieważ <xref:System.Reflection.Emit.ILGenerator> wywołania są takie same, w obu przypadkach.</span><span class="sxs-lookup"><span data-stu-id="71825-158">You can use <xref:System.Reflection.Emit.AssemblyBuilder> during development to simplify debugging the generated Microsoft intermediate language (MSIL), and then switch to dynamic methods during final deployment, because the <xref:System.Reflection.Emit.ILGenerator> calls are the same in both cases.</span></span>  
  
## <a name="verification"></a><span data-ttu-id="71825-159">Weryfikacja</span><span class="sxs-lookup"><span data-stu-id="71825-159">Verification</span></span>  
 <span data-ttu-id="71825-160">Poniższa lista zawiera podsumowanie warunków, w jakich metod dynamicznych może zawierać kod niemożliwy do zweryfikowania.</span><span class="sxs-lookup"><span data-stu-id="71825-160">The following list summarizes the conditions under which dynamic methods can contain unverifiable code.</span></span> <span data-ttu-id="71825-161">(Na przykład nie jest dynamiczna metoda jeśli jego <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> ma ustawioną właściwość `false`.)</span><span class="sxs-lookup"><span data-stu-id="71825-161">(For example, a dynamic method is unverifiable if its <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property is set to `false`.)</span></span>  
  
-   <span data-ttu-id="71825-162">Dynamiczne metody, która jest skojarzona z zestawem krytyczny dla zabezpieczeń jest także krytyczny dla zabezpieczeń i można pominąć weryfikacji.</span><span class="sxs-lookup"><span data-stu-id="71825-162">A dynamic method that is associated with a security-critical assembly is also security-critical, and can skip verification.</span></span> <span data-ttu-id="71825-163">Na przykład zestawu bez atrybutów zabezpieczeń, który jest uruchamiany jako aplikacja na komputerze jest traktowany jako krytyczny dla zabezpieczeń w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="71825-163">For example, an assembly without security attributes that is run as a desktop application is treated as security-critical by the runtime.</span></span> <span data-ttu-id="71825-164">Jeśli metoda dynamiczne są skojarzone z zestawu, metody dynamicznej może zawierać kod niemożliwy do zweryfikowania.</span><span class="sxs-lookup"><span data-stu-id="71825-164">If you associate a dynamic method with the assembly, the dynamic method can contain unverifiable code.</span></span>  
  
-   <span data-ttu-id="71825-165">Jeśli dynamiczny metodę, która zawiera kod, którego nie można zweryfikować jest skojarzony z zestawu, który ma przezroczystość poziomu 1, przy użyciu kompilatora just in time (JIT) injects żądania zabezpieczeń.</span><span class="sxs-lookup"><span data-stu-id="71825-165">If a dynamic method that contains unverifiable code is associated with an assembly that has level 1 transparency, the just-in-time (JIT) compiler injects a security demand.</span></span> <span data-ttu-id="71825-166">Żądanie zakończy się powodzeniem, tylko wtedy, gdy metody dynamicznej jest wykonywana przez całkowicie zaufanego kodu.</span><span class="sxs-lookup"><span data-stu-id="71825-166">The demand succeeds only if the dynamic method is executed by fully trusted code.</span></span> <span data-ttu-id="71825-167">Zobacz [kod o przezroczystym poziomie bezpieczeństwa, poziom 1](~/docs/framework/misc/security-transparent-code-level-1.md).</span><span class="sxs-lookup"><span data-stu-id="71825-167">See [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md).</span></span>  
  
-   <span data-ttu-id="71825-168">Jeśli dynamiczny metodę, która zawiera kod, którego nie można zweryfikować jest skojarzony z zestawu, który ma przezroczystość poziomu 2 (takie jak mscorlib.dll), zgłasza wyjątek (wstrzyknięte przez kompilator JIT) zamiast ją na żądanie zabezpieczeń.</span><span class="sxs-lookup"><span data-stu-id="71825-168">If a dynamic method that contains unverifiable code is associated with an assembly that has level 2 transparency (such as mscorlib.dll), it throws an exception (injected by the JIT compiler) instead of making a security demand.</span></span> <span data-ttu-id="71825-169">Zobacz [kod o przezroczystym poziomie bezpieczeństwa, poziom 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="71825-169">See [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
-   <span data-ttu-id="71825-170">Hostowanej anonimowo metody dynamicznej, zawierający niemożliwy do sprawdzenia kod zawsze zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="71825-170">An anonymously hosted dynamic method that contains unverifiable code always throws an exception.</span></span> <span data-ttu-id="71825-171">Można nigdy nie pominąć weryfikacji, nawet jeśli jest tworzony i wykonywane przez całkowicie zaufanego kodu.</span><span class="sxs-lookup"><span data-stu-id="71825-171">It can never skip verification, even if it is created and executed by fully trusted code.</span></span>  
  
 <span data-ttu-id="71825-172">Wyjątek zgłaszany, dla którego nie można zweryfikować kodu różni się w zależności od sposobu wywołaniu metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-172">The exception that is thrown for unverifiable code varies depending on the way the dynamic method is invoked.</span></span> <span data-ttu-id="71825-173">Jeśli wywołanie metody dynamicznej przy użyciu delegata zwrócony z <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> metody <xref:System.Security.VerificationException> jest generowany.</span><span class="sxs-lookup"><span data-stu-id="71825-173">If you invoke a dynamic method by using a delegate returned from the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method, a <xref:System.Security.VerificationException> is thrown.</span></span> <span data-ttu-id="71825-174">Jeśli wywołanie metody dynamicznej za pomocą <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metody <xref:System.Reflection.TargetInvocationException> jest zgłaszany z wewnętrznego <xref:System.Security.VerificationException>.</span><span class="sxs-lookup"><span data-stu-id="71825-174">If you invoke the dynamic method by using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, a <xref:System.Reflection.TargetInvocationException> is thrown with an inner <xref:System.Security.VerificationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71825-175">Poniższy przykład kodu tworzy dynamiczne metodę, która przyjmuje dwa parametry.</span><span class="sxs-lookup"><span data-stu-id="71825-175">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="71825-176">Przykład emituje treści proste funkcja, która wyświetla pierwszy parametr do konsoli, a w przykładzie użyto drugi parametr jako wartość zwracaną przez metodę.</span><span class="sxs-lookup"><span data-stu-id="71825-176">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="71825-177">Przykład kończy metody tworzenia delegata wywołuje delegata o innych parametrach, a na koniec wywołuje przy użyciu metody dynamicznej <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="71825-177">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.All#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.All#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="71825-178">Tworzy metodę dynamicznego.</span><span class="sxs-lookup"><span data-stu-id="71825-178">Creates a dynamic method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="71825-179">Nazwa metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-179">The name of the dynamic method.</span></span> <span data-ttu-id="71825-180">To może być ciągiem o zerowej długości, ale nie może być <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-180">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="71825-181">A <see cref="T:System.Type" /> obiekt, który określa typ zwracany metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma zwracanego typu.</span><span class="sxs-lookup"><span data-stu-id="71825-181">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="71825-182">Tablica <see cref="T:System.Type" /> obiektów Określanie typów parametrów metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma parametrów.</span><span class="sxs-lookup"><span data-stu-id="71825-182">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <summary><span data-ttu-id="71825-183">Inicjuje hostowanej anonimowo metody dynamicznej określający nazwę metody, typ zwracany i typy parametrów.</span><span class="sxs-lookup"><span data-stu-id="71825-183">Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-184">Dynamiczne metodę, która jest tworzona przez ten konstruktor jest skojarzony z anonimowego zestawu zamiast istniejącego typu lub modułu.</span><span class="sxs-lookup"><span data-stu-id="71825-184">The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</span></span> <span data-ttu-id="71825-185">Anonimowe zestaw istnieje wyłącznie w celu świadczenia środowisko piaskownicy dla metod dynamicznych, oznacza to, odizolowane od innego kodu.</span><span class="sxs-lookup"><span data-stu-id="71825-185">The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</span></span> <span data-ttu-id="71825-186">To środowisko umożliwia bezpieczne dla metody dynamicznej wysyłanego i wykonywane przez kod częściowo zaufany.</span><span class="sxs-lookup"><span data-stu-id="71825-186">This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</span></span>  
  
 <span data-ttu-id="71825-187">Ten konstruktor Określa, że just in time (JIT) widoczność sprawdza zostaną wymuszone dla języka pośredniego firmy Microsoft (MSIL) metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-187">This constructor specifies that just-in-time (JIT) visibility checks will be enforced for the Microsoft intermediate language (MSIL) of the dynamic method.</span></span> <span data-ttu-id="71825-188">Oznacza to, że kod w metodzie dynamiczne ma dostęp do metod publicznych klasy klas publicznych.</span><span class="sxs-lookup"><span data-stu-id="71825-188">That is, the code in the dynamic method has access to public methods of public classes.</span></span> <span data-ttu-id="71825-189">Jeśli metoda próbuje uzyskać dostęp do typów lub elementów członkowskich, które są są zgłaszane wyjątki `private`, `protected`, lub `internal` (`Friend` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="71825-189">Exceptions are thrown if the method tries to access types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="71825-190">Aby utworzyć dynamiczne metodę, która ma ograniczone możliwości, aby pominąć sprawdzanie widoczność JIT, użyj <xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="71825-190">To create a dynamic method that has restricted ability to skip JIT visibility checks, use the <xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29> constructor.</span></span>  
  
 <span data-ttu-id="71825-191">Gdy jest tworzony hostowanej anonimowo metody dynamicznej, stos wywołań emisji zestawu jest dołączony.</span><span class="sxs-lookup"><span data-stu-id="71825-191">When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</span></span> <span data-ttu-id="71825-192">Po wywołaniu metody uprawnienia emisji zestawu są używane zamiast uprawnień rzeczywistego obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="71825-192">When the method is invoked, the permissions of the emitting assembly are used instead of the permissions of the actual caller.</span></span> <span data-ttu-id="71825-193">W związku z tym metody dynamicznej nie można wykonać na wyższym poziomie uprawnień niż zestaw wysyłanego, nawet jeśli jest przekazywany do i wykonywane przez zestaw, który ma wyższy poziom zaufania.</span><span class="sxs-lookup"><span data-stu-id="71825-193">Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</span></span>  
  
 <span data-ttu-id="71825-194">Ten konstruktor określa atrybuty metody <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> i <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>i Konwencja wywoływania <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="71825-194">This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and the calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71825-195">Ten konstruktor został wprowadzony w [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="71825-195">This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="71825-196">Element <paramref name="parameterTypes" /> jest <see langword="null" /> lub <see cref="T:System.Void" />.</span><span class="sxs-lookup"><span data-stu-id="71825-196">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="71825-197"><paramref name="name" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-197"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="71825-198"><paramref name="returnType" /> jest to typ, dla którego <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="71825-198"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, bool restrictedSkipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, bool restrictedSkipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), restrictedSkipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, bool restrictedSkipVisibility);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="restrictedSkipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="71825-199">Nazwa metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-199">The name of the dynamic method.</span></span> <span data-ttu-id="71825-200">To może być ciągiem o zerowej długości, ale nie może być <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-200">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="71825-201">A <see cref="T:System.Type" /> obiekt, który określa typ zwracany metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma zwracanego typu.</span><span class="sxs-lookup"><span data-stu-id="71825-201">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="71825-202">Tablica <see cref="T:System.Type" /> obiektów Określanie typów parametrów metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma parametrów.</span><span class="sxs-lookup"><span data-stu-id="71825-202">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="restrictedSkipVisibility">
          <span data-ttu-id="71825-203"><see langword="true" /> Aby pominąć JIT widoczność kontroli typy i składniki używane przez MSIL metody dynamicznej z tego ograniczenia: poziom zaufania zestawów, które zawierają te typy i składniki musi być równa lub mniejsza niż poziom zaufania stos wywołań, który emituje dynami Metoda c; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="71825-203"><see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method, with this restriction: the trust level of the assemblies that contain those types and members must be equal to or less than the trust level of the call stack that emits the dynamic method; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="71825-204">Inicjuje hostowanej anonimowo metody dynamicznej, określić nazwę metody, zwracany typ typy parametrów i czy just in time (JIT) widoczność kontroli ma być pomijana dla typy i składniki używane przez język pośredni firmy Microsoft (MSIL) z metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-204">Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-205">Dynamiczne metodę, która jest tworzona przez ten konstruktor jest skojarzony z anonimowego zestawu zamiast istniejącego typu lub modułu.</span><span class="sxs-lookup"><span data-stu-id="71825-205">The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</span></span> <span data-ttu-id="71825-206">Anonimowe zestaw istnieje wyłącznie w celu świadczenia środowisko piaskownicy dla metod dynamicznych, oznacza to, odizolowane od innego kodu.</span><span class="sxs-lookup"><span data-stu-id="71825-206">The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</span></span> <span data-ttu-id="71825-207">To środowisko umożliwia bezpieczne dla metody dynamicznej wysyłanego i wykonywane przez kod częściowo zaufany.</span><span class="sxs-lookup"><span data-stu-id="71825-207">This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</span></span>  
  
 <span data-ttu-id="71825-208">Hostowanej anonimowo metody dynamicznej bez automatycznego dostępu do żadnych typów lub elementów członkowskich, które są `private`, `protected`, lub `internal` (`Friend` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="71825-208">Anonymously hosted dynamic methods do not have automatic access to any types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="71825-209">To różni się od metod dynamicznych, skojarzonych z istniejącego typu lub moduł, które nie mają dostępu do ukrytych elementów członkowskich w ich skojarzonego zakresu.</span><span class="sxs-lookup"><span data-stu-id="71825-209">This is different from dynamic methods that are associated with an existing type or module, which have access to hidden members in their associated scope.</span></span>  
  
 <span data-ttu-id="71825-210">Określ `true` dla `restrictedSkipVisibility` Jeśli dynamiczne metodę musi mieć dostęp do typów albo elementów członkowskich, które są `private`, `protected`, lub `internal`.</span><span class="sxs-lookup"><span data-stu-id="71825-210">Specify `true` for `restrictedSkipVisibility` if your dynamic method has to access types or members that are `private`, `protected`, or `internal`.</span></span> <span data-ttu-id="71825-211">Dzięki temu metody dynamicznej ograniczony dostęp do tych elementów członkowskich.</span><span class="sxs-lookup"><span data-stu-id="71825-211">This gives the dynamic method restricted access to these members.</span></span> <span data-ttu-id="71825-212">Oznacza to, że członkowie jest możliwy tylko wtedy, gdy są spełnione następujące warunki:</span><span class="sxs-lookup"><span data-stu-id="71825-212">That is, the members can be accessed only if the following conditions are met:</span></span>  
  
-   <span data-ttu-id="71825-213">Elementy członkowskie docelowy należą do zestawu, który ma poziom zaufania równa lub niższa niż stos wywołań, który emituje metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-213">The target members belong to an assembly that has a level of trust equal to or lower than the call stack that emits the dynamic method.</span></span>  
  
-   <span data-ttu-id="71825-214">Stos wywołań, który emituje metody dynamicznej otrzymuje <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flagi.</span><span class="sxs-lookup"><span data-stu-id="71825-214">The call stack that emits the dynamic method is granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="71825-215">Jest to wartość true, zawsze wtedy, gdy kod jest wykonywane przy pełnym zaufaniu.</span><span class="sxs-lookup"><span data-stu-id="71825-215">This is always true when the code is executed with full trust.</span></span> <span data-ttu-id="71825-216">Częściowo zaufany kod jest wartość true tylko wtedy, gdy host powoduje przyznanie uprawnień.</span><span class="sxs-lookup"><span data-stu-id="71825-216">For partially trusted code, it is true only if the host explicitly grants the permission.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="71825-217">Jeśli nie udzielono uprawnienia zgłoszony wyjątek zabezpieczeń podczas <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> jest wywoływana lub po wywołaniu metody dynamicznej nie gdy ten konstruktor jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="71825-217">If the permission has not been granted, a security exception is thrown when <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> is called or when the dynamic method is invoked, not when this constructor is called.</span></span> <span data-ttu-id="71825-218">Do emisji dynamicznego metody są wymagane żadne specjalne uprawnienia.</span><span class="sxs-lookup"><span data-stu-id="71825-218">No special permissions are required to emit the dynamic method.</span></span>  
  
 <span data-ttu-id="71825-219">Na przykład dynamiczne metodę, która zostanie utworzona z `restrictedSkipVisibility` ustawioną `true` mają dostęp do prywatnego elementu członkowskiego wszystkie zestawu w stosie wywołań, gdy stos wywołań udzielono dostępu do elementu członkowskiego ograniczone.</span><span class="sxs-lookup"><span data-stu-id="71825-219">For example, a dynamic method that is created with `restrictedSkipVisibility` set to `true` can access a private member of any assembly on the call stack if the call stack has been granted restricted member access.</span></span> <span data-ttu-id="71825-220">Jeśli metody dynamicznej jest tworzony z częściowo zaufanego kodu w stosie wywołań, nie ma dostępu do prywatnego elementu członkowskiego typu w [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] zestawu, ponieważ takie zestawy są w pełni zaufany.</span><span class="sxs-lookup"><span data-stu-id="71825-220">If the dynamic method is created with partially trusted code on the call stack, it cannot access a private member of a type in a [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] assembly, because such assemblies are fully trusted.</span></span>  
  
 <span data-ttu-id="71825-221">Jeśli `restrictedSkipVisibility` jest `false`, widoczność JIT sprawdza są wymuszane.</span><span class="sxs-lookup"><span data-stu-id="71825-221">If `restrictedSkipVisibility` is `false`, JIT visibility checks are enforced.</span></span> <span data-ttu-id="71825-222">Kod w metodzie dynamiczna ma dostęp do publicznego metod publicznych klasy i są zgłaszane wyjątki, jeśli próbuje uzyskać dostęp do typów albo elementów członkowskich, które są `private`, `protected`, lub `internal`.</span><span class="sxs-lookup"><span data-stu-id="71825-222">The code in the dynamic method has access to public methods of public classes, and exceptions are thrown if it tries to access types or members that are `private`, `protected`, or `internal`.</span></span>  
  
 <span data-ttu-id="71825-223">Gdy jest tworzony hostowanej anonimowo metody dynamicznej, stos wywołań emisji zestawu jest dołączony.</span><span class="sxs-lookup"><span data-stu-id="71825-223">When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</span></span> <span data-ttu-id="71825-224">Po wywołaniu metody uprawnienia emisji stosu wywołań są używane zamiast uprawnień rzeczywistego obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="71825-224">When the method is invoked, the permissions of the emitting call stack are used instead of the permissions of the actual caller.</span></span> <span data-ttu-id="71825-225">W związku z tym metody dynamicznej nie można wykonać na wyższym poziomie uprawnień niż zestaw wysyłanego, nawet jeśli jest przekazywany do i wykonywane przez zestaw, który ma wyższy poziom zaufania.</span><span class="sxs-lookup"><span data-stu-id="71825-225">Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</span></span>  
  
 <span data-ttu-id="71825-226">Ten konstruktor określa atrybuty metody <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> i <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>i Konwencja wywoływania <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="71825-226">This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and the calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71825-227">Ten konstruktor został wprowadzony w [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="71825-227">This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="71825-228">Element <paramref name="parameterTypes" /> jest <see langword="null" /> lub <see cref="T:System.Void" />.</span><span class="sxs-lookup"><span data-stu-id="71825-228">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="71825-229"><paramref name="name" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-229"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="71825-230"><paramref name="returnType" /> jest to typ, dla którego <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="71825-230"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), m As Module)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="71825-231">Nazwa metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-231">The name of the dynamic method.</span></span> <span data-ttu-id="71825-232">To może być ciągiem o zerowej długości, ale nie może być <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-232">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="71825-233">A <see cref="T:System.Type" /> obiekt, który określa typ zwracany metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma zwracanego typu.</span><span class="sxs-lookup"><span data-stu-id="71825-233">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="71825-234">Tablica <see cref="T:System.Type" /> obiektów Określanie typów parametrów metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma parametrów.</span><span class="sxs-lookup"><span data-stu-id="71825-234">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="m"><span data-ttu-id="71825-235">A <see cref="T:System.Reflection.Module" /> reprezentujący modułu, z którym ma być logicznie powiązanych metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-235">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span></span></param>
        <summary><span data-ttu-id="71825-236">Tworzy dynamiczne metodę, która jest globalna do modułu, określając nazwę metody, typ zwracany, typy parametrów i modułu.</span><span class="sxs-lookup"><span data-stu-id="71825-236">Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-237">Ten konstruktor określa atrybuty metody <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> i <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, konwencji wywoływania <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>i nie powoduje pominięcia just in time (JIT) widoczność kontroli.</span><span class="sxs-lookup"><span data-stu-id="71825-237">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>, and does not skip just-in-time (JIT) visibility checks.</span></span>  
  
 <span data-ttu-id="71825-238">Dynamiczne metody utworzone za pomocą tego konstruktora ma dostęp do publicznego i `internal` (`Friend` w języku Visual Basic) elementy członkowskie wszystkich typów, które są zawarte w module `m`.</span><span class="sxs-lookup"><span data-stu-id="71825-238">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types contained in module `m`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71825-239">W celu zapewnienia zgodności z poprzednimi wersjami wymaga tego konstruktora <xref:System.Security.Permissions.SecurityPermission> z <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> Flaga, jeśli są następujące warunki true: `m` jest modułem inne niż wywoływania modułu i popytu na <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flagi nie powiodło się.</span><span class="sxs-lookup"><span data-stu-id="71825-239">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="71825-240">Jeśli żądanie dla <xref:System.Security.Permissions.SecurityPermission> zakończy się powodzeniem, ta operacja jest dozwolona.</span><span class="sxs-lookup"><span data-stu-id="71825-240">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71825-241">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ten element członkowski nie wymaga już <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flagi.</span><span class="sxs-lookup"><span data-stu-id="71825-241">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="71825-242">(Zobacz [problemy z zabezpieczeniami w odbicia Emituj](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Aby używać tej funkcji, należy docelowy aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszym.</span><span class="sxs-lookup"><span data-stu-id="71825-242">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71825-243">Poniższy przykład kodu tworzy dynamiczne metodę, która przyjmuje dwa parametry.</span><span class="sxs-lookup"><span data-stu-id="71825-243">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="71825-244">Przykład emituje treści proste funkcja, która wyświetla pierwszy parametr do konsoli, a w przykładzie użyto drugi parametr jako wartość zwracaną przez metodę.</span><span class="sxs-lookup"><span data-stu-id="71825-244">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="71825-245">Przykład kończy metody tworzenia delegata wywołuje delegata o innych parametrach, a na koniec wywołuje przy użyciu metody dynamicznej <xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> metody.</span><span class="sxs-lookup"><span data-stu-id="71825-245">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="71825-246">Element <paramref name="parameterTypes" /> jest <see langword="null" /> lub <see cref="T:System.Void" />.</span><span class="sxs-lookup"><span data-stu-id="71825-246">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
 <span data-ttu-id="71825-247">—lub—</span><span class="sxs-lookup"><span data-stu-id="71825-247">-or-</span></span>  
  
 <span data-ttu-id="71825-248"><paramref name="m" /> jest to moduł, który zapewnia hosting anonimowe metody dynamiczne.</span><span class="sxs-lookup"><span data-stu-id="71825-248"><paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="71825-249"><paramref name="name" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-249"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="71825-250">—lub—</span><span class="sxs-lookup"><span data-stu-id="71825-250">-or-</span></span>  
  
 <span data-ttu-id="71825-251"><paramref name="m" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-251"><paramref name="m" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="71825-252"><paramref name="returnType" /> jest to typ, dla którego <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="71825-252"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="71825-253">Aby skojarzyć metody dynamicznej z modułu innej niż moduł wywołujący.</span><span class="sxs-lookup"><span data-stu-id="71825-253">to associate the dynamic method with a module other than the calling module.</span></span> <span data-ttu-id="71825-254">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="71825-254">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), owner As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="71825-255">Nazwa metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-255">The name of the dynamic method.</span></span> <span data-ttu-id="71825-256">To może być ciągiem o zerowej długości, ale nie może być <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-256">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="71825-257">A <see cref="T:System.Type" /> obiekt, który określa typ zwracany metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma zwracanego typu.</span><span class="sxs-lookup"><span data-stu-id="71825-257">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="71825-258">Tablica <see cref="T:System.Type" /> obiektów Określanie typów parametrów metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma parametrów.</span><span class="sxs-lookup"><span data-stu-id="71825-258">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="owner"><span data-ttu-id="71825-259">A <see cref="T:System.Type" /> z metody dynamicznej jest logicznie powiązanych.</span><span class="sxs-lookup"><span data-stu-id="71825-259">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span></span> <span data-ttu-id="71825-260">Metody dynamicznej ma dostęp do wszystkich elementów członkowskich tego typu.</span><span class="sxs-lookup"><span data-stu-id="71825-260">The dynamic method has access to all members of the type.</span></span></param>
        <summary><span data-ttu-id="71825-261">Tworzy dynamiczne metodę, określając nazwę metody, zwracany typ typy parametrów i typ, z którym jest logicznie powiązanych metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-261">Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-262">Metody dynamicznej utworzone za pomocą tego konstruktora ma dostęp do wszystkich elementów członkowskich typu `owner`i na publiczne i `internal` (`Friend` w języku Visual Basic) elementy członkowskie wszystkich typów w module, który zawiera `owner`.</span><span class="sxs-lookup"><span data-stu-id="71825-262">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`.</span></span>  
  
 <span data-ttu-id="71825-263">Ten konstruktor określa atrybuty metody <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> i <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, konwencji wywoływania <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>i nie powoduje pominięcia just in time (JIT) widoczność kontroli.</span><span class="sxs-lookup"><span data-stu-id="71825-263">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>, and does not skip just-in-time (JIT) visibility checks.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71825-264">W celu zapewnienia zgodności z poprzednimi wersjami wymaga tego konstruktora <xref:System.Security.Permissions.SecurityPermission> z <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> Flaga, jeśli są następujące warunki true: `owner` znajduje się w module niż wywoływania modułu i popytu na <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> Flaga nie powiodło się.</span><span class="sxs-lookup"><span data-stu-id="71825-264">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="71825-265">Jeśli żądanie dla <xref:System.Security.Permissions.SecurityPermission> zakończy się powodzeniem, ta operacja jest dozwolona.</span><span class="sxs-lookup"><span data-stu-id="71825-265">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71825-266">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ten element członkowski nie wymaga już <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flagi.</span><span class="sxs-lookup"><span data-stu-id="71825-266">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="71825-267">(Zobacz [problemy z zabezpieczeniami w odbicia Emituj](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Aby używać tej funkcji, należy docelowy aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszym.</span><span class="sxs-lookup"><span data-stu-id="71825-267">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71825-268">Poniższy przykład kodu tworzy <xref:System.Reflection.Emit.DynamicMethod> logicznie skojarzonego z typem.</span><span class="sxs-lookup"><span data-stu-id="71825-268">The following code example creates a <xref:System.Reflection.Emit.DynamicMethod> that is logically associated with a type.</span></span> <span data-ttu-id="71825-269">To skojarzenie udostępnia ona prywatne elementy członkowskie tego typu.</span><span class="sxs-lookup"><span data-stu-id="71825-269">This association gives it access to the private members of that type.</span></span>  
  
 <span data-ttu-id="71825-270">Przykładowy kod definiuje klasę o nazwie `Example` z polem prywatnej o nazwie klasy `DerivedFromxample` która pochodzi z klasy pierwszego typu delegata o nazwie `UseLikeStatic` zwracającą <xref:System.Int32> i ma następujące parametry typu `Example` i <xref:System.Int32>oraz typ delegata o nazwie `UseLikeInstance` zwracającą <xref:System.Int32> i ma jeden parametr typu <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="71825-270">The code example defines a class named `Example` with a private field, a class named `DerivedFromxample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="71825-271">Przykład kodu tworzy następnie <xref:System.Reflection.Emit.DynamicMethod> zmienia się pole prywatne wystąpienia `Example` i zwraca poprzednią wartość.</span><span class="sxs-lookup"><span data-stu-id="71825-271">The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71825-272">Ogólnie rzecz biorąc zmiana pola wewnętrzne klas nie jest dobrym obiektowo praktyk kodowania.</span><span class="sxs-lookup"><span data-stu-id="71825-272">In general, changing the internal fields of classes is not good object-oriented coding practice.</span></span>  
  
 <span data-ttu-id="71825-273">Przykład kodu tworzy wystąpienie `Example` , a następnie tworzy dwa obiekty delegowane.</span><span class="sxs-lookup"><span data-stu-id="71825-273">The example code creates an instance of `Example` and then creates two delegates.</span></span> <span data-ttu-id="71825-274">Pierwsza to typu `UseLikeStatic`, który ma te same parametry jako metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-274">The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method.</span></span> <span data-ttu-id="71825-275">Drugą jest wartość typu `UseLikeInstance`, który nie ma pierwszy parametr (typu `Example`).</span><span class="sxs-lookup"><span data-stu-id="71825-275">The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`).</span></span> <span data-ttu-id="71825-276">Ten delegat jest tworzony przy użyciu <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> przeciążenie metody; drugi parametr przeciążenie tej metody jest wystąpieniem `Example`, w tym przypadku wystąpienie właśnie utworzony, który jest powiązany z nowo utworzonego obiektu delegowanego.</span><span class="sxs-lookup"><span data-stu-id="71825-276">This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate.</span></span> <span data-ttu-id="71825-277">Przy każdym wywołaniu tego delegata metody dynamicznej działania w przypadku powiązane wystąpienie `Example`.</span><span class="sxs-lookup"><span data-stu-id="71825-277">Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71825-278">To jest przykład swobodna reguł dla delegata powiązanie wprowadzone w systemie [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], wraz z przeciążeń nowe <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="71825-278">This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="71825-279">Aby uzyskać więcej informacji, zobacz <xref:System.Delegate> klasy.</span><span class="sxs-lookup"><span data-stu-id="71825-279">For more information, see the <xref:System.Delegate> class.</span></span>  
  
 <span data-ttu-id="71825-280">`UseLikeStatic` Delegata zostanie wywołany, przekazując wystąpienie elementu `Example` który jest powiązany `UseLikeInstance` delegowanie.</span><span class="sxs-lookup"><span data-stu-id="71825-280">The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate.</span></span> <span data-ttu-id="71825-281">Następnie przy użyciu `UseLikeInstance` delegata zostanie wywołany, tak aby oba obiekty delegowane działać na tym samym wystąpieniu programu `Example`.</span><span class="sxs-lookup"><span data-stu-id="71825-281">Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`.</span></span> <span data-ttu-id="71825-282">Zmiany w wartości wewnętrznego pola są wyświetlane po każdym wywołaniu.</span><span class="sxs-lookup"><span data-stu-id="71825-282">The changes in the values of the internal field are displayed after each call.</span></span> <span data-ttu-id="71825-283">Na koniec `UseLikeInstance` delegata jest powiązany z wystąpieniem `DerivedFromxample`, i są powtarzane wywołania delegata.</span><span class="sxs-lookup"><span data-stu-id="71825-283">Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromxample`, and the delegate calls are repeated.</span></span>  
  
 [!code-csharp[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/cs/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="71825-284">Element <paramref name="parameterTypes" /> jest <see langword="null" /> lub <see cref="T:System.Void" />.</span><span class="sxs-lookup"><span data-stu-id="71825-284">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
 <span data-ttu-id="71825-285">—lub—</span><span class="sxs-lookup"><span data-stu-id="71825-285">-or-</span></span>  
  
 <span data-ttu-id="71825-286"><paramref name="owner" /> jest interfejsu, tablicy, otwartym typem ogólnym lub parametr typu ogólnego lub metody.</span><span class="sxs-lookup"><span data-stu-id="71825-286"><paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="71825-287"><paramref name="name" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-287"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="71825-288">—lub—</span><span class="sxs-lookup"><span data-stu-id="71825-288">-or-</span></span>  
  
 <span data-ttu-id="71825-289"><paramref name="owner" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-289"><paramref name="owner" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="71825-290"><paramref name="returnType" /> jest <see langword="null" />, lub jest to typ, dla którego <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="71825-290"><paramref name="returnType" /> is <see langword="null" />, or is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="71825-291">Aby skojarzyć metody dynamicznej z typu w module niż wywoływania modułu.</span><span class="sxs-lookup"><span data-stu-id="71825-291">to associate the dynamic method with a type in a module other than the calling module.</span></span> <span data-ttu-id="71825-292">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="71825-292">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), m As Module, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m, bool skipVisibility);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="71825-293">Nazwa metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-293">The name of the dynamic method.</span></span> <span data-ttu-id="71825-294">To może być ciągiem o zerowej długości, ale nie może być <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-294">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="71825-295">A <see cref="T:System.Type" /> obiekt, który określa typ zwracany metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma zwracanego typu.</span><span class="sxs-lookup"><span data-stu-id="71825-295">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="71825-296">Tablica <see cref="T:System.Type" /> obiektów Określanie typów parametrów metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma parametrów.</span><span class="sxs-lookup"><span data-stu-id="71825-296">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="m"><span data-ttu-id="71825-297">A <see cref="T:System.Reflection.Module" /> reprezentujący modułu, z którym ma być logicznie powiązanych metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-297">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span></span></param>
        <param name="skipVisibility">
          <span data-ttu-id="71825-298"><see langword="true" /> Aby pominąć JIT widoczność kontroli typy i składniki używane przez MSIL metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-298"><see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method.</span></span></param>
        <summary><span data-ttu-id="71825-299">Tworzy dynamiczny metody globalne do modułu, określając nazwę metody zwracanie typu, typów parametrów, modułu oraz czy sprawdza just in time (JIT) widoczność ma być pomijana dla typy i składniki używane przez język pośredni firmy Microsoft (MSIL) dynamiczne metody.</span><span class="sxs-lookup"><span data-stu-id="71825-299">Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-300">Ten konstruktor określa atrybuty metody <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> i <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>i konwencji wywoływania <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="71825-300">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="71825-301">Metody dynamiczne utworzone za pomocą tego konstruktora ma dostęp do publicznego i `internal` (`Friend` w języku Visual Basic) elementy członkowskie wszystkich typów w module zawartych w niej `m`.</span><span class="sxs-lookup"><span data-stu-id="71825-301">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types in contained module `m`.</span></span> <span data-ttu-id="71825-302">Pomijanie JIT kontroli widoczność kompilatora umożliwia dynamiczne metody dostępu prywatnego i chronionych elementów członkowskich wszystkich innych typów również do.</span><span class="sxs-lookup"><span data-stu-id="71825-302">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="71825-303">Jest to przydatne, na przykład podczas pisania kodu do serializacji obiektów.</span><span class="sxs-lookup"><span data-stu-id="71825-303">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71825-304">W celu zapewnienia zgodności z poprzednimi wersjami wymaga tego konstruktora <xref:System.Security.Permissions.SecurityPermission> z <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> Flaga, jeśli są następujące warunki true: `m` jest modułem inne niż wywoływania modułu i popytu na <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flagi nie powiodło się.</span><span class="sxs-lookup"><span data-stu-id="71825-304">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="71825-305">Jeśli żądanie dla <xref:System.Security.Permissions.SecurityPermission> zakończy się powodzeniem, ta operacja jest dozwolona.</span><span class="sxs-lookup"><span data-stu-id="71825-305">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71825-306">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ten element członkowski nie wymaga już <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flagi.</span><span class="sxs-lookup"><span data-stu-id="71825-306">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="71825-307">(Zobacz [problemy z zabezpieczeniami w odbicia Emituj](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Aby używać tej funkcji, należy docelowy aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszym.</span><span class="sxs-lookup"><span data-stu-id="71825-307">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="71825-308">Element <paramref name="parameterTypes" /> jest <see langword="null" /> lub <see cref="T:System.Void" />.</span><span class="sxs-lookup"><span data-stu-id="71825-308">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
 <span data-ttu-id="71825-309">—lub—</span><span class="sxs-lookup"><span data-stu-id="71825-309">-or-</span></span>  
  
 <span data-ttu-id="71825-310"><paramref name="m" /> jest to moduł, który zapewnia hosting anonimowe metody dynamiczne.</span><span class="sxs-lookup"><span data-stu-id="71825-310"><paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="71825-311"><paramref name="name" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-311"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="71825-312">—lub—</span><span class="sxs-lookup"><span data-stu-id="71825-312">-or-</span></span>  
  
 <span data-ttu-id="71825-313"><paramref name="m" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-313"><paramref name="m" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="71825-314"><paramref name="returnType" /> jest to typ, dla którego <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="71825-314"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="71825-315">Aby skojarzyć metody dynamicznej z modułu innej niż moduł wywołujący.</span><span class="sxs-lookup"><span data-stu-id="71825-315">to associate the dynamic method with a module other than the calling module.</span></span> <span data-ttu-id="71825-316">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="71825-316">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner, bool skipVisibility);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="71825-317">Nazwa metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-317">The name of the dynamic method.</span></span> <span data-ttu-id="71825-318">To może być ciągiem o zerowej długości, ale nie może być <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-318">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="71825-319">A <see cref="T:System.Type" /> obiekt, który określa typ zwracany metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma zwracanego typu.</span><span class="sxs-lookup"><span data-stu-id="71825-319">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="71825-320">Tablica <see cref="T:System.Type" /> obiektów Określanie typów parametrów metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma parametrów.</span><span class="sxs-lookup"><span data-stu-id="71825-320">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="owner"><span data-ttu-id="71825-321">A <see cref="T:System.Type" /> z metody dynamicznej jest logicznie powiązanych.</span><span class="sxs-lookup"><span data-stu-id="71825-321">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span></span> <span data-ttu-id="71825-322">Metody dynamicznej ma dostęp do wszystkich elementów członkowskich tego typu.</span><span class="sxs-lookup"><span data-stu-id="71825-322">The dynamic method has access to all members of the type.</span></span></param>
        <param name="skipVisibility">
          <span data-ttu-id="71825-323"><see langword="true" /> Aby pominąć JIT widoczność kontroli typy i składniki używane przez MSIL metody dynamicznej; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="71825-323"><see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="71825-324">Tworzy metodę dynamicznego, określając nazwę metody, typ zwracany, typów parametrów, typ z metody dynamicznej jest logicznie powiązanych oraz czy just in time (JIT) widoczność kontroli ma być pomijana dla typów i członków dostęp do programu Microsoft język pośredni (MSIL) metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-324">Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-325">Metody dynamicznej utworzone za pomocą tego konstruktora ma dostęp do wszystkich elementów członkowskich typu `owner`i na publiczne i `internal` (`Friend` w języku Visual Basic) elementy członkowskie wszystkich typów w module, który zawiera `owner`.</span><span class="sxs-lookup"><span data-stu-id="71825-325">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`.</span></span> <span data-ttu-id="71825-326">Pomijanie JIT kontroli widoczność kompilatora umożliwia dynamiczne metody dostępu prywatnego i chronionych elementów członkowskich wszystkich innych typów również do.</span><span class="sxs-lookup"><span data-stu-id="71825-326">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="71825-327">Jest to przydatne, na przykład podczas pisania kodu do serializacji obiektów.</span><span class="sxs-lookup"><span data-stu-id="71825-327">This is useful, for example, when writing code to serialize objects.</span></span>  
  
 <span data-ttu-id="71825-328">Ten konstruktor określa atrybuty metody <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> i <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>i konwencji wywoływania <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="71825-328">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71825-329">W celu zapewnienia zgodności z poprzednimi wersjami wymaga tego konstruktora <xref:System.Security.Permissions.SecurityPermission> z <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> Flaga, jeśli są następujące warunki true: `owner` znajduje się w module niż wywoływania modułu i popytu na <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> Flaga nie powiodło się.</span><span class="sxs-lookup"><span data-stu-id="71825-329">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="71825-330">Jeśli żądanie dla <xref:System.Security.Permissions.SecurityPermission> zakończy się powodzeniem, ta operacja jest dozwolona.</span><span class="sxs-lookup"><span data-stu-id="71825-330">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71825-331">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ten element członkowski nie wymaga już <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flagi.</span><span class="sxs-lookup"><span data-stu-id="71825-331">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="71825-332">(Zobacz [problemy z zabezpieczeniami w odbicia Emituj](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Aby używać tej funkcji, należy docelowy aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszym.</span><span class="sxs-lookup"><span data-stu-id="71825-332">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="71825-333">Element <paramref name="parameterTypes" /> jest <see langword="null" /> lub <see cref="T:System.Void" />.</span><span class="sxs-lookup"><span data-stu-id="71825-333">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
 <span data-ttu-id="71825-334">—lub—</span><span class="sxs-lookup"><span data-stu-id="71825-334">-or-</span></span>  
  
 <span data-ttu-id="71825-335"><paramref name="owner" /> jest interfejsu, tablicy, otwartym typem ogólnym lub parametr typu ogólnego lub metody.</span><span class="sxs-lookup"><span data-stu-id="71825-335"><paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="71825-336"><paramref name="name" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-336"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="71825-337">—lub—</span><span class="sxs-lookup"><span data-stu-id="71825-337">-or-</span></span>  
  
 <span data-ttu-id="71825-338"><paramref name="owner" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-338"><paramref name="owner" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="71825-339"><paramref name="returnType" /> jest <see langword="null" />, lub jest to typ, dla którego <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="71825-339"><paramref name="returnType" /> is <see langword="null" />, or is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="71825-340">Aby skojarzyć metody dynamicznej z typu w module niż wywoływania modułu.</span><span class="sxs-lookup"><span data-stu-id="71825-340">to associate the dynamic method with a type in a module other than the calling module.</span></span> <span data-ttu-id="71825-341">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="71825-341">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), m As Module, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m, bool skipVisibility);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="71825-342">Nazwa metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-342">The name of the dynamic method.</span></span> <span data-ttu-id="71825-343">To może być ciągiem o zerowej długości, ale nie może być <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-343">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="attributes"><span data-ttu-id="71825-344">Bitowe połączenie <see cref="T:System.Reflection.MethodAttributes" /> wartości, które określają atrybuty metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-344">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method.</span></span> <span data-ttu-id="71825-345">Kombinacja tylko dozwolone jest <see cref="F:System.Reflection.MethodAttributes.Public" /> i <see cref="F:System.Reflection.MethodAttributes.Static" />.</span><span class="sxs-lookup"><span data-stu-id="71825-345">The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="71825-346">Konwencja wywoływania metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-346">The calling convention for the dynamic method.</span></span> <span data-ttu-id="71825-347">Musi być <see cref="F:System.Reflection.CallingConventions.Standard" />.</span><span class="sxs-lookup"><span data-stu-id="71825-347">Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="71825-348">A <see cref="T:System.Type" /> obiekt, który określa typ zwracany metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma zwracanego typu.</span><span class="sxs-lookup"><span data-stu-id="71825-348">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="71825-349">Tablica <see cref="T:System.Type" /> obiektów Określanie typów parametrów metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma parametrów.</span><span class="sxs-lookup"><span data-stu-id="71825-349">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="m">To be added.</param>
        <param name="skipVisibility">
          <span data-ttu-id="71825-350"><see langword="true" /> Aby pominąć JIT widoczność kontroli typy i składniki używane przez MSIL metody dynamicznej; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="71825-350"><see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="71825-351">Tworzy dynamiczne metodę, która jest globalna do modułu, określając nazwę metody, atrybuty wywoływanie Konwencji, zwróci typu, typów parametrów, moduł i czy sprawdza just in time (JIT) widoczność ma być pomijana dla typów i członków z niego Microsoft język pośredni (MSIL) metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-351">Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-352">Dynamiczne metody utworzone za pomocą tego konstruktora ma dostęp do publicznego i `internal` (`Friend` w języku Visual Basic) elementy członkowskie wszystkich typów publicznych oraz wewnętrznych zawarte w module `m`.</span><span class="sxs-lookup"><span data-stu-id="71825-352">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the public and internal types contained in module `m`.</span></span>  
  
 <span data-ttu-id="71825-353">Pomijanie JIT kontroli widoczność kompilatora umożliwia dynamiczne metody dostępu prywatnego i chronionych elementów członkowskich innych typów w module i wszystkie inne zestawy również do.</span><span class="sxs-lookup"><span data-stu-id="71825-353">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types in the module and in all other assemblies as well.</span></span> <span data-ttu-id="71825-354">Jest to przydatne, na przykład podczas pisania kodu do serializacji obiektów.</span><span class="sxs-lookup"><span data-stu-id="71825-354">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71825-355">W celu zapewnienia zgodności z poprzednimi wersjami wymaga tego konstruktora <xref:System.Security.Permissions.SecurityPermission> z <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> Flaga, jeśli są następujące warunki true: `m` jest modułem inne niż wywoływania modułu i popytu na <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flagi nie powiodło się.</span><span class="sxs-lookup"><span data-stu-id="71825-355">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="71825-356">Jeśli żądanie dla <xref:System.Security.Permissions.SecurityPermission> zakończy się powodzeniem, ta operacja jest dozwolona.</span><span class="sxs-lookup"><span data-stu-id="71825-356">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71825-357">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ten element członkowski nie wymaga już <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flagi.</span><span class="sxs-lookup"><span data-stu-id="71825-357">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="71825-358">(Zobacz [problemy z zabezpieczeniami w odbicia Emituj](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Aby używać tej funkcji, należy docelowy aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszym.</span><span class="sxs-lookup"><span data-stu-id="71825-358">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="71825-359">Element <paramref name="parameterTypes" /> jest <see langword="null" /> lub <see cref="T:System.Void" />.</span><span class="sxs-lookup"><span data-stu-id="71825-359">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
 <span data-ttu-id="71825-360">—lub—</span><span class="sxs-lookup"><span data-stu-id="71825-360">-or-</span></span>  
  
 <span data-ttu-id="71825-361"><paramref name="m" /> jest to moduł, który zapewnia hosting anonimowe metody dynamiczne.</span><span class="sxs-lookup"><span data-stu-id="71825-361"><paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="71825-362"><paramref name="name" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-362"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="71825-363">—lub—</span><span class="sxs-lookup"><span data-stu-id="71825-363">-or-</span></span>  
  
 <span data-ttu-id="71825-364"><paramref name="m" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-364"><paramref name="m" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="71825-365"><paramref name="attributes" /> inne niż jest kombinacją flag <see cref="F:System.Reflection.MethodAttributes.Public" /> i <see cref="F:System.Reflection.MethodAttributes.Static" />.</span><span class="sxs-lookup"><span data-stu-id="71825-365"><paramref name="attributes" /> is a combination of flags other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span></span>  
  
 <span data-ttu-id="71825-366">—lub—</span><span class="sxs-lookup"><span data-stu-id="71825-366">-or-</span></span>  
  
 <span data-ttu-id="71825-367"><paramref name="callingConvention" /> nie jest <see cref="F:System.Reflection.CallingConventions.Standard" />.</span><span class="sxs-lookup"><span data-stu-id="71825-367"><paramref name="callingConvention" /> is not <see cref="F:System.Reflection.CallingConventions.Standard" />.</span></span>  
  
 <span data-ttu-id="71825-368">—lub—</span><span class="sxs-lookup"><span data-stu-id="71825-368">-or-</span></span>  
  
 <span data-ttu-id="71825-369"><paramref name="returnType" /> jest to typ, dla którego <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="71825-369"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="71825-370">Aby skojarzyć metody dynamicznej z modułu innej niż moduł wywołujący.</span><span class="sxs-lookup"><span data-stu-id="71825-370">to associate the dynamic method with a module other than the calling module.</span></span> <span data-ttu-id="71825-371">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="71825-371">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner, bool skipVisibility);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="71825-372">Nazwa metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-372">The name of the dynamic method.</span></span> <span data-ttu-id="71825-373">To może być ciągiem o zerowej długości, ale nie może być <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-373">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="attributes"><span data-ttu-id="71825-374">Bitowe połączenie <see cref="T:System.Reflection.MethodAttributes" /> wartości, które określają atrybuty metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-374">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method.</span></span> <span data-ttu-id="71825-375">Kombinacja tylko dozwolone jest <see cref="F:System.Reflection.MethodAttributes.Public" /> i <see cref="F:System.Reflection.MethodAttributes.Static" />.</span><span class="sxs-lookup"><span data-stu-id="71825-375">The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="71825-376">Konwencja wywoływania metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-376">The calling convention for the dynamic method.</span></span> <span data-ttu-id="71825-377">Musi być <see cref="F:System.Reflection.CallingConventions.Standard" />.</span><span class="sxs-lookup"><span data-stu-id="71825-377">Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="71825-378">A <see cref="T:System.Type" /> obiekt, który określa typ zwracany metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma zwracanego typu.</span><span class="sxs-lookup"><span data-stu-id="71825-378">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="71825-379">Tablica <see cref="T:System.Type" /> obiektów Określanie typów parametrów metody dynamicznej lub <see langword="null" /> Jeśli metoda nie ma parametrów.</span><span class="sxs-lookup"><span data-stu-id="71825-379">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="owner"><span data-ttu-id="71825-380">A <see cref="T:System.Type" /> z metody dynamicznej jest logicznie powiązanych.</span><span class="sxs-lookup"><span data-stu-id="71825-380">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span></span> <span data-ttu-id="71825-381">Metody dynamicznej ma dostęp do wszystkich elementów członkowskich tego typu.</span><span class="sxs-lookup"><span data-stu-id="71825-381">The dynamic method has access to all members of the type.</span></span></param>
        <param name="skipVisibility">
          <span data-ttu-id="71825-382"><see langword="true" /> Aby pominąć JIT widoczność kontroli typy i składniki używane przez MSIL metody dynamicznej; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="71825-382"><see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="71825-383">Tworzy metodę dynamicznego, określając nazwę metody, atrybuty, wywoływanie Konwencji, typ zwracany, typów parametrów, typ z metody dynamicznej jest logicznie powiązanych oraz czy just in time (JIT) widoczność kontroli ma być pomijana w przypadku typów i elementy członkowskie z niego Microsoft język pośredni (MSIL) metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-383">Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-384">Dynamiczne metody jest globalny moduł, który zawiera typ `owner`.</span><span class="sxs-lookup"><span data-stu-id="71825-384">The dynamic method is global to the module that contains the type `owner`.</span></span> <span data-ttu-id="71825-385">Ma dostęp do wszystkich elementów członkowskich typu `owner`.</span><span class="sxs-lookup"><span data-stu-id="71825-385">It has access to all members of the type `owner`.</span></span>  
  
 <span data-ttu-id="71825-386">Metody dynamicznej utworzone za pomocą tego konstruktora ma dostęp do wszystkich elementów członkowskich typu `owner`i na publiczne i `internal` (`Friend` w języku Visual Basic) elementy członkowskie wszystkich typów, które są zawarte w module, który zawiera `owner`.</span><span class="sxs-lookup"><span data-stu-id="71825-386">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the types contained in the module that contains `owner`.</span></span> <span data-ttu-id="71825-387">Pomijanie JIT kontroli widoczność kompilatora umożliwia dynamiczne metody dostępu prywatnego i chronionych elementów członkowskich wszystkich innych typów również do.</span><span class="sxs-lookup"><span data-stu-id="71825-387">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="71825-388">Jest to przydatne, na przykład podczas pisania kodu do serializacji obiektów.</span><span class="sxs-lookup"><span data-stu-id="71825-388">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71825-389">W celu zapewnienia zgodności z poprzednimi wersjami wymaga tego konstruktora <xref:System.Security.Permissions.SecurityPermission> z <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> Flaga, jeśli są następujące warunki true: `owner` znajduje się w module niż wywoływania modułu i popytu na <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> Flaga nie powiodło się.</span><span class="sxs-lookup"><span data-stu-id="71825-389">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="71825-390">Jeśli żądanie dla <xref:System.Security.Permissions.SecurityPermission> zakończy się powodzeniem, ta operacja jest dozwolona.</span><span class="sxs-lookup"><span data-stu-id="71825-390">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71825-391">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ten element członkowski nie wymaga już <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flagi.</span><span class="sxs-lookup"><span data-stu-id="71825-391">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="71825-392">(Zobacz [problemy z zabezpieczeniami w odbicia Emituj](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Aby używać tej funkcji, należy docelowy aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszym.</span><span class="sxs-lookup"><span data-stu-id="71825-392">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="71825-393">Element <paramref name="parameterTypes" /> jest <see langword="null" /> lub <see cref="T:System.Void" />.</span><span class="sxs-lookup"><span data-stu-id="71825-393">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
 <span data-ttu-id="71825-394">—lub—</span><span class="sxs-lookup"><span data-stu-id="71825-394">-or-</span></span>  
  
 <span data-ttu-id="71825-395"><paramref name="owner" /> jest interfejsu, tablicy, otwartym typem ogólnym lub parametr typu ogólnego lub metody.</span><span class="sxs-lookup"><span data-stu-id="71825-395"><paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="71825-396"><paramref name="name" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-396"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="71825-397">—lub—</span><span class="sxs-lookup"><span data-stu-id="71825-397">-or-</span></span>  
  
 <span data-ttu-id="71825-398"><paramref name="owner" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-398"><paramref name="owner" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="71825-399"><paramref name="attributes" /> inne niż jest kombinacją flag <see cref="F:System.Reflection.MethodAttributes.Public" /> i <see cref="F:System.Reflection.MethodAttributes.Static" />.</span><span class="sxs-lookup"><span data-stu-id="71825-399"><paramref name="attributes" /> is a combination of flags other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span></span>  
  
 <span data-ttu-id="71825-400">—lub—</span><span class="sxs-lookup"><span data-stu-id="71825-400">-or-</span></span>  
  
 <span data-ttu-id="71825-401"><paramref name="callingConvention" /> nie jest <see cref="F:System.Reflection.CallingConventions.Standard" />.</span><span class="sxs-lookup"><span data-stu-id="71825-401"><paramref name="callingConvention" /> is not <see cref="F:System.Reflection.CallingConventions.Standard" />.</span></span>  
  
 <span data-ttu-id="71825-402">—lub—</span><span class="sxs-lookup"><span data-stu-id="71825-402">-or-</span></span>  
  
 <span data-ttu-id="71825-403"><paramref name="returnType" /> jest to typ, dla którego <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="71825-403"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="71825-404">Aby skojarzyć metody dynamicznej z typu w module niż wywoływania modułu.</span><span class="sxs-lookup"><span data-stu-id="71825-404">to associate the dynamic method with a type in a module other than the calling module.</span></span> <span data-ttu-id="71825-405">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="71825-405">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Attributes As MethodAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodAttributes Attributes { System::Reflection::MethodAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="71825-406">Pobiera atrybuty określone podczas tworzenia metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-406">Gets the attributes specified when the dynamic method was created.</span></span></summary>
        <value><span data-ttu-id="71825-407">Bitowe połączenie <see cref="T:System.Reflection.MethodAttributes" /> wartości reprezentujących atrybuty dla metody.</span><span class="sxs-lookup"><span data-stu-id="71825-407">A bitwise combination of the <see cref="T:System.Reflection.MethodAttributes" /> values representing the attributes for the method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-408">Obecnie atrybuty metody dla metody dynamiczne są zawsze <xref:System.Reflection.MethodAttributes.Public> i <xref:System.Reflection.MethodAttributes.Static>.</span><span class="sxs-lookup"><span data-stu-id="71825-408">Currently, the method attributes for a dynamic method are always <xref:System.Reflection.MethodAttributes.Public> and <xref:System.Reflection.MethodAttributes.Static>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71825-409">Poniższy przykładowy kod przedstawia atrybuty metody dynamicznej metody.</span><span class="sxs-lookup"><span data-stu-id="71825-409">The following code example displays the method attributes of a dynamic method.</span></span> <span data-ttu-id="71825-410">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="71825-410">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#21](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#21)]
 [!code-csharp[Reflection.DynamicMethod.All#21](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#21)]
 [!code-vb[Reflection.DynamicMethod.All#21](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public override System.Reflection.CallingConventions CallingConvention { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.CallingConventions CallingConvention" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CallingConvention As CallingConventions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::CallingConventions CallingConvention { System::Reflection::CallingConventions get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.CallingConventions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="71825-411">Pobiera Konwencja wywoływania określona podczas tworzenia metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-411">Gets the calling convention specified when the dynamic method was created.</span></span></summary>
        <value><span data-ttu-id="71825-412">Jeden z <see cref="T:System.Reflection.CallingConventions" /> wartości, które wskazuje konwencja wywołania metody.</span><span class="sxs-lookup"><span data-stu-id="71825-412">One of the <see cref="T:System.Reflection.CallingConventions" /> values that indicates the calling convention of the method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-413">Konwencja wywoływania metody dynamicznej jest obecnie zawsze <xref:System.Reflection.CallingConventions.Standard>.</span><span class="sxs-lookup"><span data-stu-id="71825-413">Currently, the calling convention for a dynamic method is always <xref:System.Reflection.CallingConventions.Standard>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71825-414">Poniższy przykładowy kod przedstawia konwencja wywołania metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-414">The following code example displays the calling convention of a dynamic method.</span></span> <span data-ttu-id="71825-415">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="71825-415">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#22](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#22)]
 [!code-csharp[Reflection.DynamicMethod.All#22](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#22)]
 [!code-vb[Reflection.DynamicMethod.All#22](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDelegate">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="71825-416">Kończy metody dynamicznej i tworzy delegata, który może służyć do jego wykonania.</span><span class="sxs-lookup"><span data-stu-id="71825-416">Completes the dynamic method and creates a delegate that can be used to execute it.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public override sealed Delegate CreateDelegate (Type delegateType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Delegate CreateDelegate(class System.Type delegateType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CreateDelegate (delegateType As Type) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Delegate ^ CreateDelegate(Type ^ delegateType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="71825-417">Typ delegata, którego sygnatura zgodny z metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-417">A delegate type whose signature matches that of the dynamic method.</span></span></param>
        <summary><span data-ttu-id="71825-418">Kończy metody dynamicznej i tworzy delegata, który może służyć do jego wykonania.</span><span class="sxs-lookup"><span data-stu-id="71825-418">Completes the dynamic method and creates a delegate that can be used to execute it.</span></span></summary>
        <returns><span data-ttu-id="71825-419">Delegat określonego typu, który może służyć do wykonania metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-419">A delegate of the specified type, which can be used to execute the dynamic method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-420">Wywoływanie <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> metody lub <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> ukończeniu metody metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-420">Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method.</span></span> <span data-ttu-id="71825-421">Wszelkie dodatkowe próbować zmieniać metody dynamicznej, takiej jak zmodyfikowanie definicji parametrów lub emitowanie więcej język pośredni firmy Microsoft (MSIL) jest ignorowana. nie wyjątek.</span><span class="sxs-lookup"><span data-stu-id="71825-421">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="71825-422">W celu utworzenia treści metody dynamicznej metody, jeśli masz własne generator MSIL, wywołać <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> metodę, aby uzyskać <xref:System.Reflection.Emit.DynamicILInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="71825-422">To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="71825-423">Jeśli nie masz własne generator MSIL, wywołanie <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> metodę, aby uzyskać <xref:System.Reflection.Emit.ILGenerator> obiektu, który może służyć do generowania treści metody.</span><span class="sxs-lookup"><span data-stu-id="71825-423">If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71825-424">Poniższy przykład kodu tworzy dynamiczne metodę, która przyjmuje dwa parametry.</span><span class="sxs-lookup"><span data-stu-id="71825-424">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="71825-425">Przykład emituje treści proste funkcja, która wyświetla pierwszy parametr do konsoli, a w przykładzie użyto drugi parametr jako wartość zwracaną przez metodę.</span><span class="sxs-lookup"><span data-stu-id="71825-425">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="71825-426">Przykład kończy metody tworzenia delegata wywołuje delegata o innych parametrach, a na koniec wywołuje przy użyciu metody dynamicznej <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="71825-426">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="71825-427">Dynamiczne metody ma nie treści metody.</span><span class="sxs-lookup"><span data-stu-id="71825-427">The dynamic method has no method body.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="71825-428"><paramref name="delegateType" /> ma nieprawidłową liczbę parametrów ani typów nieprawidłowy parametr.</span><span class="sxs-lookup"><span data-stu-id="71825-428"><paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public override sealed Delegate CreateDelegate (Type delegateType, object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Delegate CreateDelegate(class System.Type delegateType, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CreateDelegate (delegateType As Type, target As Object) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Delegate ^ CreateDelegate(Type ^ delegateType, System::Object ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="71825-429">Typ delegata, którego sygnatura zgodny z metody dynamicznej minus pierwszym parametrem.</span><span class="sxs-lookup"><span data-stu-id="71825-429">A delegate type whose signature matches that of the dynamic method, minus the first parameter.</span></span></param>
        <param name="target"><span data-ttu-id="71825-430">Obiekt delegat jest powiązany.</span><span class="sxs-lookup"><span data-stu-id="71825-430">An object the delegate is bound to.</span></span> <span data-ttu-id="71825-431">Musi być tego samego typu jako pierwszego parametru metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-431">Must be of the same type as the first parameter of the dynamic method.</span></span></param>
        <summary><span data-ttu-id="71825-432">Kończy metody dynamicznej i tworzy delegata, który może służyć do wykonywania, określający typ delegata oraz delegat jest powiązany z obiektu.</span><span class="sxs-lookup"><span data-stu-id="71825-432">Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.</span></span></summary>
        <returns><span data-ttu-id="71825-433">Delegat określonego typu, który może służyć do wykonania metody dynamicznej o wskazanym obiekcie docelowym.</span><span class="sxs-lookup"><span data-stu-id="71825-433">A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-434">To przeciążenie metody tworzy delegata powiązany z określonego obiektu.</span><span class="sxs-lookup"><span data-stu-id="71825-434">This method overload creates a delegate bound to a particular object.</span></span> <span data-ttu-id="71825-435">Takie delegata jest nazywany zamknięte przez jego pierwszym argumentem.</span><span class="sxs-lookup"><span data-stu-id="71825-435">Such a delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="71825-436">Mimo że metoda jest statyczna, działa tak, jakby była metodą wystąpienia; wystąpienie jest `target`.</span><span class="sxs-lookup"><span data-stu-id="71825-436">Although the method is static, it acts as if it were an instance method; the instance is `target`.</span></span>  
  
 <span data-ttu-id="71825-437">Przeciążenie tej metody wymaga `target` być tego samego typu jako pierwszego parametru metody dynamicznej lub przypisane do tego typu (na przykład klasy pochodnej).</span><span class="sxs-lookup"><span data-stu-id="71825-437">This method overload requires `target` to be of the same type as the first parameter of the dynamic method, or to be assignable to that type (for example, a derived class).</span></span>  <span data-ttu-id="71825-438">Podpis `delegateType` ma wszystkie parametry metody dynamicznej oprócz pierwszego.</span><span class="sxs-lookup"><span data-stu-id="71825-438">The signature of `delegateType` has all the parameters of the dynamic method except the first.</span></span> <span data-ttu-id="71825-439">Na przykład, jeśli dynamiczna metoda ma parametry <xref:System.String>, <xref:System.Int32>, i <xref:System.Byte>, następnie `delegateType` ma następujące parametry <xref:System.Int32> i <xref:System.Byte>; `target` jest typu <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="71825-439">For example, if the dynamic method has the parameters <xref:System.String>, <xref:System.Int32>, and <xref:System.Byte>, then `delegateType` has the parameters <xref:System.Int32> and <xref:System.Byte>; `target` is of type <xref:System.String>.</span></span>  
  
 <span data-ttu-id="71825-440">Wywoływanie <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> metody lub <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> ukończeniu metody metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-440">Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method.</span></span> <span data-ttu-id="71825-441">Wszelkie dodatkowe próbować zmieniać metody dynamicznej, takiej jak zmodyfikowanie definicji parametrów lub emitowanie więcej język pośredni firmy Microsoft (MSIL) jest ignorowana. nie wyjątek.</span><span class="sxs-lookup"><span data-stu-id="71825-441">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="71825-442">W celu utworzenia treści metody dynamicznej metody, jeśli masz własne generator MSIL, wywołać <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> metodę, aby uzyskać <xref:System.Reflection.Emit.DynamicILInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="71825-442">To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="71825-443">Jeśli nie masz własne generator MSIL, wywołanie <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> metodę, aby uzyskać <xref:System.Reflection.Emit.ILGenerator> obiektu, który może służyć do generowania treści metody.</span><span class="sxs-lookup"><span data-stu-id="71825-443">If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71825-444">Poniższy przykład kodu tworzy delegata, który wiąże <xref:System.Reflection.Emit.DynamicMethod> do wystąpienia typu, dzięki czemu metoda działa na tym samym wystąpieniu zawsze jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="71825-444">The following code example creates delegate that binds a <xref:System.Reflection.Emit.DynamicMethod> to an instance of a type, so that the method acts on the same instance each time it is invoked.</span></span>  
  
 <span data-ttu-id="71825-445">Przykładowy kod definiuje klasę o nazwie `Example` z polem prywatnej o nazwie klasy `DerivedFromxample` która pochodzi z klasy pierwszego typu delegata o nazwie `UseLikeStatic` zwracającą <xref:System.Int32> i ma następujące parametry typu `Example` i <xref:System.Int32>oraz typ delegata o nazwie `UseLikeInstance` zwracającą <xref:System.Int32> i ma jeden parametr typu <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="71825-445">The code example defines a class named `Example` with a private field, a class named `DerivedFromxample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="71825-446">Przykład kodu tworzy następnie <xref:System.Reflection.Emit.DynamicMethod> zmienia się pole prywatne wystąpienia `Example` i zwraca poprzednią wartość.</span><span class="sxs-lookup"><span data-stu-id="71825-446">The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71825-447">Ogólnie rzecz biorąc zmiana pola wewnętrzne klas nie jest dobrym obiektowo praktyk kodowania.</span><span class="sxs-lookup"><span data-stu-id="71825-447">In general, changing the internal fields of classes is not good object-oriented coding practice.</span></span>  
  
 <span data-ttu-id="71825-448">Przykład kodu tworzy wystąpienie `Example` , a następnie tworzy dwa obiekty delegowane.</span><span class="sxs-lookup"><span data-stu-id="71825-448">The example code creates an instance of `Example` and then creates two delegates.</span></span> <span data-ttu-id="71825-449">Pierwsza to typu `UseLikeStatic`, który ma te same parametry jako metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-449">The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method.</span></span> <span data-ttu-id="71825-450">Drugą jest wartość typu `UseLikeInstance`, który nie ma pierwszy parametr (typu `Example`).</span><span class="sxs-lookup"><span data-stu-id="71825-450">The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`).</span></span> <span data-ttu-id="71825-451">Ten delegat jest tworzony przy użyciu <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> przeciążenie metody; drugi parametr przeciążenie tej metody jest wystąpieniem `Example`, w tym przypadku wystąpienie właśnie utworzony, który jest powiązany z nowo utworzonego obiektu delegowanego.</span><span class="sxs-lookup"><span data-stu-id="71825-451">This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate.</span></span> <span data-ttu-id="71825-452">Przy każdym wywołaniu tego delegata metody dynamicznej działania w przypadku powiązane wystąpienie `Example`.</span><span class="sxs-lookup"><span data-stu-id="71825-452">Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71825-453">To jest przykład swobodna reguł dla delegata powiązanie wprowadzone w systemie [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], wraz z przeciążeń nowe <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="71825-453">This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="71825-454">Aby uzyskać więcej informacji, zobacz <xref:System.Delegate> klasy.</span><span class="sxs-lookup"><span data-stu-id="71825-454">For more information, see the <xref:System.Delegate> class.</span></span>  
  
 <span data-ttu-id="71825-455">`UseLikeStatic` Delegata zostanie wywołany, przekazując wystąpienie elementu `Example` który jest powiązany `UseLikeInstance` delegowanie.</span><span class="sxs-lookup"><span data-stu-id="71825-455">The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate.</span></span> <span data-ttu-id="71825-456">Następnie przy użyciu `UseLikeInstance` delegata zostanie wywołany, tak aby oba obiekty delegowane działać na tym samym wystąpieniu programu `Example`.</span><span class="sxs-lookup"><span data-stu-id="71825-456">Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`.</span></span> <span data-ttu-id="71825-457">Zmiany w wartości wewnętrznego pola są wyświetlane po każdym wywołaniu.</span><span class="sxs-lookup"><span data-stu-id="71825-457">The changes in the values of the internal field are displayed after each call.</span></span> <span data-ttu-id="71825-458">Na koniec `UseLikeInstance` delegata jest powiązany z wystąpieniem `DerivedFromxample`, i są powtarzane wywołania delegata.</span><span class="sxs-lookup"><span data-stu-id="71825-458">Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromxample`, and the delegate calls are repeated.</span></span>  
  
 [!code-csharp[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/cs/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="71825-459">Dynamiczne metody ma nie treści metody.</span><span class="sxs-lookup"><span data-stu-id="71825-459">The dynamic method has no method body.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="71825-460"><paramref name="target" /> nie jest ten sam typ jako pierwszego parametru metody dynamicznej, a nie można przypisać do tego typu.</span><span class="sxs-lookup"><span data-stu-id="71825-460"><paramref name="target" /> is not the same type as the first parameter of the dynamic method, and is not assignable to that type.</span></span>  
  
 <span data-ttu-id="71825-461">—lub—</span><span class="sxs-lookup"><span data-stu-id="71825-461">-or-</span></span>  
  
 <span data-ttu-id="71825-462"><paramref name="delegateType" /> ma nieprawidłową liczbę parametrów ani typów nieprawidłowy parametr.</span><span class="sxs-lookup"><span data-stu-id="71825-462"><paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="71825-463">Pobiera typ, który deklaruje metody, która jest zawsze <see langword="null" /> dla metod dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="71825-463">Gets the type that declares the method, which is always <see langword="null" /> for dynamic methods.</span></span></summary>
        <value><span data-ttu-id="71825-464">Zawsze <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-464">Always <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-465">Ta właściwość zawsze zwraca `null` dla metod dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="71825-465">This property always returns `null` for dynamic methods.</span></span> <span data-ttu-id="71825-466">Nawet jeśli metody dynamiczne są logicznie skojarzony z typem, nie jest deklarowana przez typ.</span><span class="sxs-lookup"><span data-stu-id="71825-466">Even when a dynamic method is logically associated with a type, it is not declared by the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71825-467">Poniższy przykładowy kod przedstawia typ deklarujący metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-467">The following code example displays the declaring type of a dynamic method.</span></span> <span data-ttu-id="71825-468">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="71825-468">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#23](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#23)]
 [!code-csharp[Reflection.DynamicMethod.All#23](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#23)]
 [!code-vb[Reflection.DynamicMethod.All#23](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineParameter">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ParameterBuilder DefineParameter (int position, System.Reflection.ParameterAttributes attributes, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ParameterBuilder DefineParameter(int32 position, valuetype System.Reflection.ParameterAttributes attributes, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineParameter (position As Integer, attributes As ParameterAttributes, parameterName As String) As ParameterBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ParameterBuilder ^ DefineParameter(int position, System::Reflection::ParameterAttributes attributes, System::String ^ parameterName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="attributes" Type="System.Reflection.ParameterAttributes" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="position"><span data-ttu-id="71825-469">Pozycja parametru na liście parametrów.</span><span class="sxs-lookup"><span data-stu-id="71825-469">The position of the parameter in the parameter list.</span></span> <span data-ttu-id="71825-470">Parametry są indeksowane, począwszy od pierwszego parametru numer 1.</span><span class="sxs-lookup"><span data-stu-id="71825-470">Parameters are indexed beginning with the number 1 for the first parameter.</span></span></param>
        <param name="attributes"><span data-ttu-id="71825-471">Bitowe połączenie <see cref="T:System.Reflection.ParameterAttributes" /> wartości, które określają atrybuty parametru.</span><span class="sxs-lookup"><span data-stu-id="71825-471">A bitwise combination of <see cref="T:System.Reflection.ParameterAttributes" /> values that specifies the attributes of the parameter.</span></span></param>
        <param name="parameterName"><span data-ttu-id="71825-472">Nazwa parametru.</span><span class="sxs-lookup"><span data-stu-id="71825-472">The name of the parameter.</span></span> <span data-ttu-id="71825-473">Nazwa może być ciągiem o zerowej długości.</span><span class="sxs-lookup"><span data-stu-id="71825-473">The name can be a zero-length string.</span></span></param>
        <summary><span data-ttu-id="71825-474">Określa parametr metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-474">Defines a parameter of the dynamic method.</span></span></summary>
        <returns><span data-ttu-id="71825-475">Zawsze zwraca <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-475">Always returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-476">Jeśli `position` ma wartość 0, <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> metody odwołuje się do wartości zwracanej.</span><span class="sxs-lookup"><span data-stu-id="71825-476">If `position` is 0, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method refers to the return value.</span></span> <span data-ttu-id="71825-477">Ustawianie informacji o parametrach nie ma wpływu na wartość zwracaną.</span><span class="sxs-lookup"><span data-stu-id="71825-477">Setting parameter information has no effect on the return value.</span></span>  
  
 <span data-ttu-id="71825-478">Jeśli dynamiczna metoda została już ukończona, wywołując <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> lub <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metody <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> — metoda nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="71825-478">If the dynamic method has already been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method has no effect.</span></span> <span data-ttu-id="71825-479">Nie wyjątek.</span><span class="sxs-lookup"><span data-stu-id="71825-479">No exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71825-480">Poniższy przykładowy kod przedstawia sposób definiowania informacji o parametrach dla metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-480">The following code example shows how to define parameter information for a dynamic method.</span></span> <span data-ttu-id="71825-481">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="71825-481">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#33](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#33)]
 [!code-csharp[Reflection.DynamicMethod.All#33](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#33)]
 [!code-vb[Reflection.DynamicMethod.All#33](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="71825-482">Metoda nie ma parametrów.</span><span class="sxs-lookup"><span data-stu-id="71825-482">The method has no parameters.</span></span>  
  
 <span data-ttu-id="71825-483">—lub—</span><span class="sxs-lookup"><span data-stu-id="71825-483">-or-</span></span>  
  
 <span data-ttu-id="71825-484"><paramref name="position" /> jest mniejsza niż 0.</span><span class="sxs-lookup"><span data-stu-id="71825-484"><paramref name="position" /> is less than 0.</span></span>  
  
 <span data-ttu-id="71825-485">—lub—</span><span class="sxs-lookup"><span data-stu-id="71825-485">-or-</span></span>  
  
 <span data-ttu-id="71825-486"><paramref name="position" /> jest większa niż liczba parametrów metody.</span><span class="sxs-lookup"><span data-stu-id="71825-486"><paramref name="position" /> is greater than the number of the method's parameters.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetBaseDefinition">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo GetBaseDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo GetBaseDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBaseDefinition () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodInfo ^ GetBaseDefinition();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="71825-487">Zwraca Podstawowa implementacja metody.</span><span class="sxs-lookup"><span data-stu-id="71825-487">Returns the base implementation for the method.</span></span></summary>
        <returns><span data-ttu-id="71825-488">Podstawowa implementacja metody.</span><span class="sxs-lookup"><span data-stu-id="71825-488">The base implementation of the method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-489">Ta metoda zawsze zwraca bieżącą `DynamicMethod` obiektu.</span><span class="sxs-lookup"><span data-stu-id="71825-489">This method always returns the current `DynamicMethod` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="71825-490">Zwraca atrybuty niestandardowe zastosowane do metody.</span><span class="sxs-lookup"><span data-stu-id="71825-490">Returns the custom attributes applied to the method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="71825-491"><see langword="true" /> Aby przeszukać łańcuch dziedziczenia metody w celu znalezienia atrybutów niestandardowych; <see langword="false" /> do sprawdzania bieżącej metody.</span><span class="sxs-lookup"><span data-stu-id="71825-491"><see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span></span></param>
        <summary><span data-ttu-id="71825-492">Zwraca wszystkie atrybuty niestandardowe zdefiniowane dla metody.</span><span class="sxs-lookup"><span data-stu-id="71825-492">Returns all the custom attributes defined for the method.</span></span></summary>
        <returns><span data-ttu-id="71825-493">Tablica obiektów reprezentująca atrybuty niestandardowe metody.</span><span class="sxs-lookup"><span data-stu-id="71825-493">An array of objects representing all the custom attributes of the method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-494">Dla metody dynamiczne określanie `true` dla `inherit` nie obowiązuje, ponieważ metoda nie jest zadeklarowana w typie.</span><span class="sxs-lookup"><span data-stu-id="71825-494">For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71825-495">Atrybuty niestandardowe nie są obecnie obsługiwane w metodach dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="71825-495">Custom attributes are not currently supported on dynamic methods.</span></span> <span data-ttu-id="71825-496">Zwrócony jedyny atrybut <xref:System.Runtime.CompilerServices.MethodImplAttribute>; można uzyskać metody flagi implementacji łatwiej przy użyciu <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="71825-496">The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="71825-497">A <see cref="T:System.Type" /> reprezentujący typ atrybutu niestandardowego do zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="71825-497">A <see cref="T:System.Type" /> representing the type of custom attribute to return.</span></span></param>
        <param name="inherit">
          <span data-ttu-id="71825-498"><see langword="true" /> Aby przeszukać łańcuch dziedziczenia metody w celu znalezienia atrybutów niestandardowych; <see langword="false" /> do sprawdzania bieżącej metody.</span><span class="sxs-lookup"><span data-stu-id="71825-498"><see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span></span></param>
        <summary><span data-ttu-id="71825-499">Zwraca atrybuty niestandardowe określonego typu, które zostały zastosowane do metody.</span><span class="sxs-lookup"><span data-stu-id="71825-499">Returns the custom attributes of the specified type that have been applied to the method.</span></span></summary>
        <returns><span data-ttu-id="71825-500">Tablica obiektów reprezentująca atrybuty metody, które są typu <paramref name="attributeType" /> lub pochodzić od typu <paramref name="attributeType" />.</span><span class="sxs-lookup"><span data-stu-id="71825-500">An array of objects representing the attributes of the method that are of type <paramref name="attributeType" /> or derive from type <paramref name="attributeType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-501">Dla metody dynamiczne określanie `true` dla `inherit` nie obowiązuje, ponieważ metoda nie jest zadeklarowana w typie.</span><span class="sxs-lookup"><span data-stu-id="71825-501">For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71825-502">Atrybuty niestandardowe nie są obecnie obsługiwane w metodach dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="71825-502">Custom attributes are not currently supported on dynamic methods.</span></span> <span data-ttu-id="71825-503">Zwrócony jedyny atrybut <xref:System.Runtime.CompilerServices.MethodImplAttribute>; można uzyskać metody flagi implementacji łatwiej przy użyciu <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="71825-503">The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="71825-504"><paramref name="attributeType" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-504"><paramref name="attributeType" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetDynamicILInfo">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.DynamicILInfo GetDynamicILInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.DynamicILInfo GetDynamicILInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDynamicILInfo () As DynamicILInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::DynamicILInfo ^ GetDynamicILInfo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.DynamicILInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="71825-505">Zwraca <see cref="T:System.Reflection.Emit.DynamicILInfo" /> obiektu, który może służyć do generowania tokenów metadanych, zakresy i strumieni język pośredni (MSIL) firmy Microsoft treści metody.</span><span class="sxs-lookup"><span data-stu-id="71825-505">Returns a <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object that can be used to generate a method body from metadata tokens, scopes, and Microsoft intermediate language (MSIL) streams.</span></span></summary>
        <returns><span data-ttu-id="71825-506">A <see cref="T:System.Reflection.Emit.DynamicILInfo" /> obiektu, który może służyć do generowania tokenów metadanych, zakresy i strumieni MSIL treści metody.</span><span class="sxs-lookup"><span data-stu-id="71825-506">A <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object that can be used to generate a method body from metadata tokens, scopes, and MSIL streams.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-507"><xref:System.Reflection.Emit.DynamicILInfo> Podano klasy do obsługi generowania kodu niezarządzanego.</span><span class="sxs-lookup"><span data-stu-id="71825-507">The <xref:System.Reflection.Emit.DynamicILInfo> class is provided to support unmanaged code generation.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="71825-508">do wykonywania kodu niezarządzanego.</span><span class="sxs-lookup"><span data-stu-id="71825-508">to execute unmanaged code.</span></span> <span data-ttu-id="71825-509">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span><span class="sxs-lookup"><span data-stu-id="71825-509">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
        <altmember cref="T:System.Reflection.Emit.DynamicILInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetILGenerator">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="71825-510">Zwraca generator MSIL, który może służyć do wysyłania treści metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-510">Returns an MSIL generator that can be used to emit a body for the dynamic method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetILGenerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator () As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="71825-511">Zwraca generator języka pośredniego (MSIL) firmy Microsoft dla metody domyślny rozmiar strumienia MSIL 64 bajtów.</span><span class="sxs-lookup"><span data-stu-id="71825-511">Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.</span></span></summary>
        <returns><span data-ttu-id="71825-512"><see cref="T:System.Reflection.Emit.ILGenerator" /> Obiektu dla metody.</span><span class="sxs-lookup"><span data-stu-id="71825-512">An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-513">Po ukończeniu metody dynamicznej, wywołując <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> lub <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metody, dalsze próby dodać MSIL jest ignorowana.</span><span class="sxs-lookup"><span data-stu-id="71825-513">After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored.</span></span> <span data-ttu-id="71825-514">Nie wyjątek.</span><span class="sxs-lookup"><span data-stu-id="71825-514">No exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71825-515">Ma ograniczeń dotyczących zweryfikowanie kodu w metod dynamicznych, nawet w niektórych scenariuszach pełnego zaufania.</span><span class="sxs-lookup"><span data-stu-id="71825-515">There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</span></span> <span data-ttu-id="71825-516">Sekcja "Weryfikacja" w uwagi dla <xref:System.Reflection.Emit.DynamicMethod>.</span><span class="sxs-lookup"><span data-stu-id="71825-516">See the "Verification" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71825-517">Poniższy przykład kodu tworzy dynamiczne metodę, która przyjmuje dwa parametry.</span><span class="sxs-lookup"><span data-stu-id="71825-517">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="71825-518">Przykład emituje treści proste funkcja, która wyświetla pierwszy parametr do konsoli, a w przykładzie użyto drugi parametr jako wartość zwracaną przez metodę.</span><span class="sxs-lookup"><span data-stu-id="71825-518">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="71825-519">Przykład kończy metody tworzenia delegata wywołuje delegata o innych parametrach, a na koniec wywołuje przy użyciu metody dynamicznej <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="71825-519">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator (int streamSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator(int32 streamSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator (streamSize As Integer) As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator(int streamSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="streamSize"><span data-ttu-id="71825-520">Rozmiar strumienia MSIL, w bajtach.</span><span class="sxs-lookup"><span data-stu-id="71825-520">The size of the MSIL stream, in bytes.</span></span></param>
        <summary><span data-ttu-id="71825-521">Zwraca generator języka pośredniego (MSIL) firmy Microsoft dla metody z określonym rozmiarem strumienia MSIL.</span><span class="sxs-lookup"><span data-stu-id="71825-521">Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.</span></span></summary>
        <returns><span data-ttu-id="71825-522"><see cref="T:System.Reflection.Emit.ILGenerator" /> Obiektu w przypadku metody z określonym rozmiarem strumienia MSIL.</span><span class="sxs-lookup"><span data-stu-id="71825-522">An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method, with the specified MSIL stream size.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-523">Po ukończeniu metody dynamicznej, wywołując <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> lub <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metody, dalsze próby dodać MSIL jest ignorowana.</span><span class="sxs-lookup"><span data-stu-id="71825-523">After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored.</span></span> <span data-ttu-id="71825-524">Nie wyjątek.</span><span class="sxs-lookup"><span data-stu-id="71825-524">No exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71825-525">Ma ograniczeń dotyczących zweryfikowanie kodu w metod dynamicznych, nawet w niektórych scenariuszach pełnego zaufania.</span><span class="sxs-lookup"><span data-stu-id="71825-525">There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</span></span> <span data-ttu-id="71825-526">Sekcja "Weryfikacja" w uwagi dla <xref:System.Reflection.Emit.DynamicMethod>.</span><span class="sxs-lookup"><span data-stu-id="71825-526">See the "Verification" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71825-527">Poniższy przykład kodu pokazuje przeciążenie tej metody.</span><span class="sxs-lookup"><span data-stu-id="71825-527">The following code example demonstrates this method overload.</span></span> <span data-ttu-id="71825-528">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="71825-528">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#2](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#2)]
 [!code-csharp[Reflection.DynamicMethod.All#2](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#2)]
 [!code-vb[Reflection.DynamicMethod.All#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Reflection.MethodImplAttributes GetMethodImplementationFlags() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMethodImplementationFlags () As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodImplAttributes GetMethodImplementationFlags();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="71825-529">Zwraca flagi implementacji metody.</span><span class="sxs-lookup"><span data-stu-id="71825-529">Returns the implementation flags for the method.</span></span></summary>
        <returns><span data-ttu-id="71825-530">Bitowe połączenie <see cref="T:System.Reflection.MethodImplAttributes" /> wartości reprezentujących flagi implementacji metody.</span><span class="sxs-lookup"><span data-stu-id="71825-530">A bitwise combination of <see cref="T:System.Reflection.MethodImplAttributes" /> values representing the implementation flags for the method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-531">Obecnie atrybuty implementacji metody dla metody dynamiczne są zawsze <xref:System.Reflection.MethodImplAttributes.IL> i <xref:System.Reflection.MethodImplAttributes.NoInlining>.</span><span class="sxs-lookup"><span data-stu-id="71825-531">Currently, method implementation attributes for dynamic methods are always <xref:System.Reflection.MethodImplAttributes.IL> and <xref:System.Reflection.MethodImplAttributes.NoInlining>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameters">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo[] GetParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ParameterInfo[] GetParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetParameters () As ParameterInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::ParameterInfo ^&gt; ^ GetParameters();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="71825-532">Zwraca parametry metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-532">Returns the parameters of the dynamic method.</span></span></summary>
        <returns><span data-ttu-id="71825-533">Tablica <see cref="T:System.Reflection.ParameterInfo" /> obiektów, które reprezentują parametry metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-533">An array of <see cref="T:System.Reflection.ParameterInfo" /> objects that represent the parameters of the dynamic method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-534"><xref:System.Reflection.ParameterInfo> Obiektów zwrócona przez tę metodę są wyłącznie w celach informacyjnych.</span><span class="sxs-lookup"><span data-stu-id="71825-534">The <xref:System.Reflection.ParameterInfo> objects returned by this method are for information only.</span></span> <span data-ttu-id="71825-535">Użyj <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> metodę, aby ustawić lub zmienić właściwości parametrów.</span><span class="sxs-lookup"><span data-stu-id="71825-535">Use the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method to set or change the characteristics of the parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71825-536">Poniższy przykładowy kod przedstawia parametry metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-536">The following code example displays the parameters of a dynamic method.</span></span> <span data-ttu-id="71825-537">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="71825-537">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#34](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#34)]
 [!code-csharp[Reflection.DynamicMethod.All#34](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#34)]
 [!code-vb[Reflection.DynamicMethod.All#34](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="InitLocals">
      <MemberSignature Language="C#" Value="public bool InitLocals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InitLocals" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.InitLocals" />
      <MemberSignature Language="VB.NET" Value="Public Property InitLocals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InitLocals { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="71825-538">Pobiera lub ustawia wartość wskazującą, czy zmiennych lokalnych w metodzie są inicjowane przez zero.</span><span class="sxs-lookup"><span data-stu-id="71825-538">Gets or sets a value indicating whether the local variables in the method are zero-initialized.</span></span></summary>
        <value>
          <span data-ttu-id="71825-539"><see langword="true" /> w przypadku zmiennych lokalnych w metodzie zero zainicjowana; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="71825-539"><see langword="true" /> if the local variables in the method are zero-initialized; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="71825-540">Wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="71825-540">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-541">Jeśli ta właściwość jest ustawiona na `true`, emitowany język pośredni firmy Microsoft (MSIL) obejmuje inicjowanie zmiennych lokalnych.</span><span class="sxs-lookup"><span data-stu-id="71825-541">If this property is set to `true`, the emitted Microsoft intermediate language (MSIL) includes initialization of local variables.</span></span> <span data-ttu-id="71825-542">Jeśli wartość jest ustawiona na `false`, zmienne lokalne nie jest zainicjowany i nie jest wygenerowanego kodu.</span><span class="sxs-lookup"><span data-stu-id="71825-542">If it is set to `false`, local variables are not initialized and the generated code is unverifiable.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71825-543">Poniższy kod przedstawia przykład <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> właściwości metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-543">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property of a dynamic method.</span></span> <span data-ttu-id="71825-544">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="71825-544">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#24](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#24)]
 [!code-csharp[Reflection.DynamicMethod.All#24](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#24)]
 [!code-vb[Reflection.DynamicMethod.All#24](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public override object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object Invoke(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ Invoke(System::Object ^ obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ parameters, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="71825-545">Ten parametr jest ignorowany dla metod dynamicznych, ponieważ są one statycznych.</span><span class="sxs-lookup"><span data-stu-id="71825-545">This parameter is ignored for dynamic methods, because they are static.</span></span> <span data-ttu-id="71825-546">Określ <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-546">Specify <see langword="null" />.</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="71825-547">Bitowe połączenie <see cref="T:System.Reflection.BindingFlags" /> wartości.</span><span class="sxs-lookup"><span data-stu-id="71825-547">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values.</span></span></param>
        <param name="binder"><span data-ttu-id="71825-548">A <see cref="T:System.Reflection.Binder" /> obiektu, który umożliwia powiązanie koercja argumentu typy wywołania elementów członkowskich i pobieranie <see cref="T:System.Reflection.MemberInfo" /> obiektów przez odbicie.</span><span class="sxs-lookup"><span data-stu-id="71825-548">A <see cref="T:System.Reflection.Binder" /> object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span></span> <span data-ttu-id="71825-549">Jeśli <c>integratora</c> jest <see langword="null" />, używany jest domyślny integrator.</span><span class="sxs-lookup"><span data-stu-id="71825-549">If <c>binder</c> is <see langword="null" />, the default binder is used.</span></span> <span data-ttu-id="71825-550">Aby uzyskać więcej informacji, zobacz <see cref="T:System.Reflection.Binder" />.</span><span class="sxs-lookup"><span data-stu-id="71825-550">For more details, see <see cref="T:System.Reflection.Binder" />.</span></span></param>
        <param name="parameters"><span data-ttu-id="71825-551">Lista argumentów.</span><span class="sxs-lookup"><span data-stu-id="71825-551">An argument list.</span></span> <span data-ttu-id="71825-552">To jest tablica argumentów, których liczba, kolejność i typ jako parametry metody do wywołania.</span><span class="sxs-lookup"><span data-stu-id="71825-552">This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked.</span></span> <span data-ttu-id="71825-553">Jeśli nie ma żadnych parametrów ten parametr powinien być <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-553">If there are no parameters this parameter should be <see langword="null" />.</span></span></param>
        <param name="culture"><span data-ttu-id="71825-554">Wystąpienie <see cref="T:System.Globalization.CultureInfo" /> używane do sterowania koercja typów.</span><span class="sxs-lookup"><span data-stu-id="71825-554">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types.</span></span> <span data-ttu-id="71825-555">Jeśli jest to <see langword="null" />, <see cref="T:System.Globalization.CultureInfo" /> służy bieżącego wątku.</span><span class="sxs-lookup"><span data-stu-id="71825-555">If this is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span> <span data-ttu-id="71825-556">Na przykład, te informacje są potrzebne, aby poprawnie przekonwertować <see cref="T:System.String" /> reprezentujący 1000 do <see cref="T:System.Double" /> wartości, ponieważ 1000 jest inaczej reprezentowany przez innych kultur.</span><span class="sxs-lookup"><span data-stu-id="71825-556">For example, this information is needed to correctly convert a <see cref="T:System.String" /> that represents 1000 to a <see cref="T:System.Double" /> value, because 1000 is represented differently by different cultures.</span></span></param>
        <summary><span data-ttu-id="71825-557">Wywołuje metodę dynamicznego przy użyciu określonych parametrów, zgodnie z ograniczeniami określony obiekt wiążący z informacjami o określonej kultury.</span><span class="sxs-lookup"><span data-stu-id="71825-557">Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.</span></span></summary>
        <returns><span data-ttu-id="71825-558">A <see cref="T:System.Object" /> zawierający wartość zwracaną wywoływanej metody.</span><span class="sxs-lookup"><span data-stu-id="71825-558">A <see cref="T:System.Object" /> containing the return value of the invoked method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-559">Oprócz wymienionych wyjątki kod wywołujący powinna być przygotowana do catch wszelkie wyjątki zgłaszane przez metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-559">In addition to the listed exceptions, the calling code should be prepared to catch any exceptions thrown by the dynamic method.</span></span>  
  
 <span data-ttu-id="71825-560">Wykonywanie metody dynamicznej z delegatem, utworzone przez <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> metoda jest bardziej efektywne niż wykonywania za pomocą <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="71825-560">Executing a dynamic method with a delegate created by the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method is more efficient than executing it with the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 <span data-ttu-id="71825-561">Wywoływanie <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metody lub <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> ukończeniu metody metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-561">Calling the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method completes the dynamic method.</span></span> <span data-ttu-id="71825-562">Wszelkie dodatkowe próbować zmieniać metody dynamicznej, takiej jak zmodyfikowanie definicji parametrów lub emitowanie więcej język pośredni firmy Microsoft (MSIL) jest ignorowana. nie wyjątek.</span><span class="sxs-lookup"><span data-stu-id="71825-562">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="71825-563">Wszystkie metody dynamiczne są statyczne, więc `obj` parametr zawsze jest ignorowany.</span><span class="sxs-lookup"><span data-stu-id="71825-563">All dynamic methods are static, so the `obj` parameter is always ignored.</span></span> <span data-ttu-id="71825-564">Aby traktować dynamiczne — metoda, tak jakby był on metody wystąpienia, należy użyć <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> przeciążenia, które przyjmuje wystąpienia obiektu.</span><span class="sxs-lookup"><span data-stu-id="71825-564">To treat a dynamic method as if it were an instance method, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> overload that takes an object instance.</span></span>  
  
 <span data-ttu-id="71825-565">Jeśli dynamiczna metoda nie ma parametrów, wartość `parameters` powinien być `null`.</span><span class="sxs-lookup"><span data-stu-id="71825-565">If the dynamic method has no parameters, the value of `parameters` should be `null`.</span></span> <span data-ttu-id="71825-566">W przeciwnym razie liczbę, typ i kolejność elementów w tablicy parametrów powinny być identyczne z liczbę, typ i kolejność parametrów metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-566">Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters of the dynamic method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71825-567">Przeciążenie tej metody jest wywoływana przez <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29> odziedziczone przeciążenie metody <xref:System.Reflection.MethodBase> klasy, więc poprzedniego uwagi dotyczą zarówno przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="71825-567">This method overload is called by the <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29> method overload inherited from the <xref:System.Reflection.MethodBase> class, so the preceding remarks apply to both overloads.</span></span>  
  
 <span data-ttu-id="71825-568">Ta metoda nie wymaga uprawnień bezpośrednio, ale wywołanie metody dynamicznej może spowodować żądania kontroli zabezpieczeń, w zależności od metody.</span><span class="sxs-lookup"><span data-stu-id="71825-568">This method does not demand permissions directly, but invoking the dynamic method can result in security demands, depending on the method.</span></span> <span data-ttu-id="71825-569">Na przykład żądania nie są wykonywane dla hostowanej anonimowo metody dynamiczne, które zostały utworzone z `restrictedSkipVisibility` ustawiono parametr `false`.</span><span class="sxs-lookup"><span data-stu-id="71825-569">For example, no demands are made for anonymously hosted dynamic methods that are created with the `restrictedSkipVisibility` parameter set to `false`.</span></span> <span data-ttu-id="71825-570">Z drugiej strony, jeśli tworzysz metodę o `restrictedSkipVisibility` ustawioną `true` go wymaga dostępu do ukrytych członkiem zestawu docelowego, metoda spowoduje, że żądanie uprawnienia zestaw docelowy plus <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flagi.</span><span class="sxs-lookup"><span data-stu-id="71825-570">On the other hand, if you create a method with `restrictedSkipVisibility` set to `true` so it can access a hidden member of a target assembly, the method will cause a demand for the permissions of the target assembly plus <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71825-571">Przed [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ta metoda wymagane <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flagi.</span><span class="sxs-lookup"><span data-stu-id="71825-571">Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flag.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71825-572">Poniższy przykładowy kod wywołuje metodę dynamicznej z powiązaniem dokładne, przy użyciu kultury angielski.</span><span class="sxs-lookup"><span data-stu-id="71825-572">The following code example invokes a dynamic method with exact binding, using the US-English culture.</span></span> <span data-ttu-id="71825-573">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="71825-573">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#4](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#4)]
 [!code-csharp[Reflection.DynamicMethod.All#4](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#4)]
 [!code-vb[Reflection.DynamicMethod.All#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="71825-574"><see cref="F:System.Reflection.CallingConventions.VarArgs" /> Konwencji wywoływania nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="71825-574">The <see cref="F:System.Reflection.CallingConventions.VarArgs" /> calling convention is not supported.</span></span></exception>
        <exception cref="T:System.Reflection.TargetParameterCountException"><span data-ttu-id="71825-575">Liczba elementów w <paramref name="parameters" /> jest niezgodna z liczbą parametrów metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-575">The number of elements in <paramref name="parameters" /> does not match the number of parameters in the dynamic method.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="71825-576">Wpisz jeden lub więcej elementów <paramref name="parameters" /> nie jest zgodny z typem odpowiadającego mu parametru metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-576">The type of one or more elements of <paramref name="parameters" /> does not match the type of the corresponding parameter of the dynamic method.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="71825-577">Metody dynamicznej jest skojarzony z modułem anonimowo nie jest obsługiwany i został skonstruowany przy <paramref name="skipVisibility" /> ustawioną <see langword="false" />, ale metody dynamicznej uzyskuje dostęp do elementów członkowskich, które nie są <see langword="public" /> lub <see langword="internal" /> (<see langword="Friend" /> w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="71825-577">The dynamic method is associated with a module, is not anonymously hosted, and was constructed with <paramref name="skipVisibility" /> set to <see langword="false" />, but the dynamic method accesses members that are not <see langword="public" /> or <see langword="internal" /> (<see langword="Friend" /> in Visual Basic).</span></span>  
  
 <span data-ttu-id="71825-578">—lub—</span><span class="sxs-lookup"><span data-stu-id="71825-578">-or-</span></span>  
  
 <span data-ttu-id="71825-579">Znajduje się anonimowo metody dynamicznej, a został skonstruowany przy <paramref name="skipVisibility" /> ustawioną <see langword="false" />, ale uzyskuje dostęp do elementów członkowskich, które nie są <see langword="public" />.</span><span class="sxs-lookup"><span data-stu-id="71825-579">The dynamic method is anonymously hosted and was constructed with <paramref name="skipVisibility" /> set to <see langword="false" />, but it accesses members that are not <see langword="public" />.</span></span>  
  
 <span data-ttu-id="71825-580">—lub—</span><span class="sxs-lookup"><span data-stu-id="71825-580">-or-</span></span>  
  
 <span data-ttu-id="71825-581">Dynamiczne metody zawiera kod niemożliwy do zweryfikowania.</span><span class="sxs-lookup"><span data-stu-id="71825-581">The dynamic method contains unverifiable code.</span></span> <span data-ttu-id="71825-582">Sekcja "Weryfikacja" w uwagi dla <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span><span class="sxs-lookup"><span data-stu-id="71825-582">See the "Verification" section in Remarks for <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="71825-583">A <see cref="T:System.Type" /> reprezentujący typ atrybutu niestandardowego do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="71825-583">A <see cref="T:System.Type" /> representing the type of custom attribute to search for.</span></span></param>
        <param name="inherit">
          <span data-ttu-id="71825-584"><see langword="true" /> Aby przeszukać łańcuch dziedziczenia metody w celu znalezienia atrybutów niestandardowych; <see langword="false" /> do sprawdzania bieżącej metody.</span><span class="sxs-lookup"><span data-stu-id="71825-584"><see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span></span></param>
        <summary><span data-ttu-id="71825-585">Wskazuje, czy jest zdefiniowany typ określonego atrybutu niestandardowego.</span><span class="sxs-lookup"><span data-stu-id="71825-585">Indicates whether the specified custom attribute type is defined.</span></span></summary>
        <returns>
          <span data-ttu-id="71825-586"><see langword="true" /> Jeśli zdefiniowano typ określonego atrybutu niestandardowego; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="71825-586"><see langword="true" /> if the specified custom attribute type is defined; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-587">Dla metody dynamiczne określanie `true` dla `inherit` nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="71825-587">For dynamic methods, specifying `true` for `inherit` has no effect.</span></span> <span data-ttu-id="71825-588">Metody dynamiczne mieć nie łańcuch dziedziczenia.</span><span class="sxs-lookup"><span data-stu-id="71825-588">Dynamic methods have no inheritance chain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71825-589">Atrybuty niestandardowe nie są obecnie obsługiwane w metodach dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="71825-589">Custom attributes are not currently supported on dynamic methods.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="71825-590">Pobiera wartość wskazującą, czy bieżącej metody dynamicznej jest krytyczny dla zabezpieczeń lub bezpieczny krytyczny dla zabezpieczeń i w związku z tym mogą wykonywać operacje krytyczne.</span><span class="sxs-lookup"><span data-stu-id="71825-590">Gets a value that indicates whether the current dynamic method is security-critical or security-safe-critical, and therefore can perform critical operations.</span></span></summary>
        <value>
          <span data-ttu-id="71825-591"><see langword="true" /> w przypadku bieżącej metody dynamicznej krytyczny dla zabezpieczeń lub bezpieczny krytyczny dla zabezpieczeń; <see langword="false" /> Jeśli jest niewidoczne.</span><span class="sxs-lookup"><span data-stu-id="71825-591"><see langword="true" /> if the current dynamic method is security-critical or security-safe-critical; <see langword="false" /> if it is transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-592"><xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, I <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> właściwości raportu poziom przezroczystości metody dynamicznej określone przez środowisko uruchomieniowe języka wspólnego (CLR).</span><span class="sxs-lookup"><span data-stu-id="71825-592">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="71825-593">W poniższej tabeli przedstawiono kombinacje tych właściwości:</span><span class="sxs-lookup"><span data-stu-id="71825-593">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="71825-594">Poziom zabezpieczeń</span><span class="sxs-lookup"><span data-stu-id="71825-594">Security level</span></span>|<span data-ttu-id="71825-595">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="71825-595">IsSecurityCritical</span></span>|<span data-ttu-id="71825-596">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="71825-596">IsSecuritySafeCritical</span></span>|<span data-ttu-id="71825-597">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="71825-597">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="71825-598">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="71825-598">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="71825-599">Bezpieczne krytyczne</span><span class="sxs-lookup"><span data-stu-id="71825-599">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="71825-600">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="71825-600">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="71825-601">Przy użyciu tych właściwości jest znacznie prostsze niż badanie adnotacje zabezpieczeń zestawu i jego typów, sprawdzania na bieżącym poziomie zaufania i próby zduplikowane reguły środowiska uruchomieniowego.</span><span class="sxs-lookup"><span data-stu-id="71825-601">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="71825-602">Przezroczystość metody dynamicznej zależy od moduł, który jest skojarzony z.</span><span class="sxs-lookup"><span data-stu-id="71825-602">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="71825-603">Jeśli metody dynamicznej jest skojarzony z typem, a nie modułu, przezroczystość zależy od moduł, który zawiera typ.</span><span class="sxs-lookup"><span data-stu-id="71825-603">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="71825-604">Metody dynamiczne nie ma adnotacji zabezpieczeń, są przypisane domyślną przezroczystość skojarzone modułu.</span><span class="sxs-lookup"><span data-stu-id="71825-604">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="71825-605">Hostowanej anonimowo metody dynamicznej są zawsze przezroczysty, ponieważ moduł dostarczane przez system, który je zawiera jest niewidoczny.</span><span class="sxs-lookup"><span data-stu-id="71825-605">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="71825-606">W poniższej tabeli opisano przezroczystość dynamiczne metodę, która jest skojarzona z zestawem zaufanych (to znaczy zestawu z silną nazwą zainstalowanego w pamięci podręcznej GAC).</span><span class="sxs-lookup"><span data-stu-id="71825-606">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="71825-607">Adnotacja zestawu</span><span class="sxs-lookup"><span data-stu-id="71825-607">Assembly annotation</span></span>|<span data-ttu-id="71825-608">Przezroczystość poziomu 1</span><span class="sxs-lookup"><span data-stu-id="71825-608">Level 1 transparency</span></span>|<span data-ttu-id="71825-609">Przezroczystość poziomu 2</span><span class="sxs-lookup"><span data-stu-id="71825-609">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="71825-610">W pełni przezroczyste</span><span class="sxs-lookup"><span data-stu-id="71825-610">Fully transparent</span></span>|<span data-ttu-id="71825-611">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="71825-611">Transparent</span></span>|<span data-ttu-id="71825-612">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="71825-612">Transparent</span></span>|  
    |<span data-ttu-id="71825-613">Pełni krytyczne</span><span class="sxs-lookup"><span data-stu-id="71825-613">Fully critical</span></span>|<span data-ttu-id="71825-614">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="71825-614">Critical</span></span>|<span data-ttu-id="71825-615">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="71825-615">Critical</span></span>|  
    |<span data-ttu-id="71825-616">Mieszane przezroczystości</span><span class="sxs-lookup"><span data-stu-id="71825-616">Mixed transparency</span></span>|<span data-ttu-id="71825-617">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="71825-617">Transparent</span></span>|<span data-ttu-id="71825-618">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="71825-618">Transparent</span></span>|  
    |<span data-ttu-id="71825-619">Security-agnostic</span><span class="sxs-lookup"><span data-stu-id="71825-619">Security-agnostic</span></span>|<span data-ttu-id="71825-620">Bezpieczne krytyczne</span><span class="sxs-lookup"><span data-stu-id="71825-620">Safe-critical</span></span>|<span data-ttu-id="71825-621">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="71825-621">Critical</span></span>|  
  
     <span data-ttu-id="71825-622">Na przykład jeśli skojarzona z typem, który znajduje się w pliku mscorlib.dll, który ma poziom 2 przezroczystość mieszanych, dynamiczne — metoda metody dynamicznej jest niewidoczny i nie można wykonać kodu krytycznego.</span><span class="sxs-lookup"><span data-stu-id="71825-622">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="71825-623">Informacji o poziomach przejrzystości, zobacz [kod o przezroczystym poziomie bezpieczeństwa, poziom 1](~/docs/framework/misc/security-transparent-code-level-1.md) i [kod o przezroczystym poziomie bezpieczeństwa, poziom 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="71825-623">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="71825-624">Kojarzenie metody dynamicznej z modułu w zestawie zaufanego poziomu 1, który jest zabezpieczeń niezwiązane z żadnym, takich jak System.dll, nie zezwala na podniesienie poziomu zaufania.</span><span class="sxs-lookup"><span data-stu-id="71825-624">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="71825-625">Jeśli zestaw grant kod, który wywołuje metody dynamicznej nie obejmuje zestaw grant System.dll (to znaczy pełnego zaufania) <xref:System.Security.SecurityException> jest generowany, gdy wywoływana jest metoda dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="71825-625">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="71825-626">Przezroczystość dynamiczne metodę, która jest skojarzona z częściowo zaufanym zestawie zależy od tego, jak zestaw jest ładowany.</span><span class="sxs-lookup"><span data-stu-id="71825-626">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="71825-627">Jeśli zestaw jest ładowany z częściowa relacja zaufania (na przykład w domenie aplikacji piaskownicy), środowisko uruchomieniowe ignoruje adnotacje zabezpieczeń zestawu.</span><span class="sxs-lookup"><span data-stu-id="71825-627">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="71825-628">Zestaw i jego typów i członków, włączając metod dynamicznych, są traktowane jako przezroczysty.</span><span class="sxs-lookup"><span data-stu-id="71825-628">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="71825-629">Środowisko uruchomieniowe zwraca uwagę adnotacje zabezpieczeń tylko wtedy, gdy zestaw częściowego zaufania jest załadowany z pełnym zaufaniem (na przykład do domyślnej domeny aplikacji klasycznej aplikacji).</span><span class="sxs-lookup"><span data-stu-id="71825-629">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="71825-630">W takim przypadku środowiska uruchomieniowego przypisuje metody dynamicznej domyślną przezroczystość dla metod zgodnie z zestawu adnotacji.</span><span class="sxs-lookup"><span data-stu-id="71825-630">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="71825-631">Aby uzyskać więcej informacji na temat odbicia Emituj i przejrzystości, zobacz [problemy z zabezpieczeniami w emisji odbicia](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="71825-631">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="71825-632">Informacje o przejrzystości, zobacz [zmiany zabezpieczeń](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="71825-632">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="71825-633">Dynamiczne metody nie ma treści metody.</span><span class="sxs-lookup"><span data-stu-id="71825-633">The dynamic method doesn't have a method body.</span></span></exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="71825-634">Pobiera wartość wskazującą, czy bieżąca metoda dynamicznych to bezpieczny krytyczny dla zabezpieczeń na bieżącym poziomie zaufania; oznacza to, czy go mogą wykonywać operacje krytyczne i można uzyskać, sprawdzając kod przezroczysty.</span><span class="sxs-lookup"><span data-stu-id="71825-634">Gets a value that indicates whether the current dynamic method is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</span></span></summary>
        <value>
          <span data-ttu-id="71825-635"><see langword="true" /> Jeśli metoda dynamiczna jest bezpieczny krytyczny dla zabezpieczeń na bieżącym poziomie zaufania; <see langword="false" /> przypadku zabezpieczeń krytyczny ani przezroczysty.</span><span class="sxs-lookup"><span data-stu-id="71825-635"><see langword="true" /> if the dynamic method is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-636"><xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, I <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> właściwości raportu poziom przezroczystości metody dynamicznej określone przez środowisko uruchomieniowe języka wspólnego (CLR).</span><span class="sxs-lookup"><span data-stu-id="71825-636">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="71825-637">W poniższej tabeli przedstawiono kombinacje tych właściwości:</span><span class="sxs-lookup"><span data-stu-id="71825-637">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="71825-638">Poziom zabezpieczeń</span><span class="sxs-lookup"><span data-stu-id="71825-638">Security level</span></span>|<span data-ttu-id="71825-639">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="71825-639">IsSecurityCritical</span></span>|<span data-ttu-id="71825-640">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="71825-640">IsSecuritySafeCritical</span></span>|<span data-ttu-id="71825-641">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="71825-641">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="71825-642">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="71825-642">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="71825-643">Bezpieczne krytyczne</span><span class="sxs-lookup"><span data-stu-id="71825-643">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="71825-644">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="71825-644">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="71825-645">Przy użyciu tych właściwości jest znacznie prostsze niż badanie adnotacje zabezpieczeń zestawu i jego typów, sprawdzania na bieżącym poziomie zaufania i próby zduplikowane reguły środowiska uruchomieniowego.</span><span class="sxs-lookup"><span data-stu-id="71825-645">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="71825-646">Przezroczystość metody dynamicznej zależy od moduł, który jest skojarzony z.</span><span class="sxs-lookup"><span data-stu-id="71825-646">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="71825-647">Jeśli metody dynamicznej jest skojarzony z typem, a nie modułu, przezroczystość zależy od moduł, który zawiera typ.</span><span class="sxs-lookup"><span data-stu-id="71825-647">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="71825-648">Metody dynamiczne nie ma adnotacji zabezpieczeń, są przypisane domyślną przezroczystość skojarzone modułu.</span><span class="sxs-lookup"><span data-stu-id="71825-648">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="71825-649">Hostowanej anonimowo metody dynamicznej są zawsze przezroczysty, ponieważ moduł dostarczane przez system, który je zawiera jest niewidoczny.</span><span class="sxs-lookup"><span data-stu-id="71825-649">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="71825-650">W poniższej tabeli opisano przezroczystość dynamiczne metodę, która jest skojarzona z zestawem zaufanych (to znaczy zestawu z silną nazwą zainstalowanego w pamięci podręcznej GAC).</span><span class="sxs-lookup"><span data-stu-id="71825-650">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="71825-651">Adnotacja zestawu</span><span class="sxs-lookup"><span data-stu-id="71825-651">Assembly annotation</span></span>|<span data-ttu-id="71825-652">Przezroczystość poziomu 1</span><span class="sxs-lookup"><span data-stu-id="71825-652">Level 1 transparency</span></span>|<span data-ttu-id="71825-653">Przezroczystość poziomu 2</span><span class="sxs-lookup"><span data-stu-id="71825-653">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="71825-654">W pełni przezroczyste</span><span class="sxs-lookup"><span data-stu-id="71825-654">Fully transparent</span></span>|<span data-ttu-id="71825-655">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="71825-655">Transparent</span></span>|<span data-ttu-id="71825-656">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="71825-656">Transparent</span></span>|  
    |<span data-ttu-id="71825-657">Pełni krytyczne</span><span class="sxs-lookup"><span data-stu-id="71825-657">Fully critical</span></span>|<span data-ttu-id="71825-658">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="71825-658">Critical</span></span>|<span data-ttu-id="71825-659">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="71825-659">Critical</span></span>|  
    |<span data-ttu-id="71825-660">Mieszane przezroczystości</span><span class="sxs-lookup"><span data-stu-id="71825-660">Mixed transparency</span></span>|<span data-ttu-id="71825-661">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="71825-661">Transparent</span></span>|<span data-ttu-id="71825-662">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="71825-662">Transparent</span></span>|  
    |<span data-ttu-id="71825-663">Security-agnostic</span><span class="sxs-lookup"><span data-stu-id="71825-663">Security-agnostic</span></span>|<span data-ttu-id="71825-664">Bezpieczne krytyczne</span><span class="sxs-lookup"><span data-stu-id="71825-664">Safe-critical</span></span>|<span data-ttu-id="71825-665">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="71825-665">Critical</span></span>|  
  
     <span data-ttu-id="71825-666">Na przykład jeśli skojarzona z typem, który znajduje się w pliku mscorlib.dll, który ma poziom 2 przezroczystość mieszanych, dynamiczne — metoda metody dynamicznej jest niewidoczny i nie można wykonać kodu krytycznego.</span><span class="sxs-lookup"><span data-stu-id="71825-666">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="71825-667">Informacji o poziomach przejrzystości, zobacz [kod o przezroczystym poziomie bezpieczeństwa, poziom 1](~/docs/framework/misc/security-transparent-code-level-1.md) i [kod o przezroczystym poziomie bezpieczeństwa, poziom 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="71825-667">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="71825-668">Kojarzenie metody dynamicznej z modułu w zestawie zaufanego poziomu 1, który jest zabezpieczeń niezwiązane z żadnym, takich jak System.dll, nie zezwala na podniesienie poziomu zaufania.</span><span class="sxs-lookup"><span data-stu-id="71825-668">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="71825-669">Jeśli zestaw grant kod, który wywołuje metody dynamicznej nie obejmuje zestaw grant System.dll (to znaczy pełnego zaufania) <xref:System.Security.SecurityException> jest generowany, gdy wywoływana jest metoda dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="71825-669">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="71825-670">Przezroczystość dynamiczne metodę, która jest skojarzona z częściowo zaufanym zestawie zależy od tego, jak zestaw jest ładowany.</span><span class="sxs-lookup"><span data-stu-id="71825-670">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="71825-671">Jeśli zestaw jest ładowany z częściowa relacja zaufania (na przykład w domenie aplikacji piaskownicy), środowisko uruchomieniowe ignoruje adnotacje zabezpieczeń zestawu.</span><span class="sxs-lookup"><span data-stu-id="71825-671">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="71825-672">Zestaw i jego typów i członków, włączając metod dynamicznych, są traktowane jako przezroczysty.</span><span class="sxs-lookup"><span data-stu-id="71825-672">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="71825-673">Środowisko uruchomieniowe zwraca uwagę adnotacje zabezpieczeń tylko wtedy, gdy zestaw częściowego zaufania jest załadowany z pełnym zaufaniem (na przykład do domyślnej domeny aplikacji klasycznej aplikacji).</span><span class="sxs-lookup"><span data-stu-id="71825-673">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="71825-674">W takim przypadku środowiska uruchomieniowego przypisuje metody dynamicznej domyślną przezroczystość dla metod zgodnie z zestawu adnotacji.</span><span class="sxs-lookup"><span data-stu-id="71825-674">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="71825-675">Aby uzyskać więcej informacji na temat odbicia Emituj i przejrzystości, zobacz [problemy z zabezpieczeniami w emisji odbicia](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="71825-675">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="71825-676">Informacje o przejrzystości, zobacz [zmiany zabezpieczeń](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="71825-676">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="71825-677">Dynamiczne metody nie ma treści metody.</span><span class="sxs-lookup"><span data-stu-id="71825-677">The dynamic method doesn't have a method body.</span></span></exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public override bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="71825-678">Pobiera wartość wskazującą, czy bieżącej metody dynamicznej jest niewidoczny na bieżącym poziomie zaufania i dlatego nie można wykonać operacji krytyczne.</span><span class="sxs-lookup"><span data-stu-id="71825-678">Gets a value that indicates whether the current dynamic method is transparent at the current trust level, and therefore cannot perform critical operations.</span></span></summary>
        <value>
          <span data-ttu-id="71825-679"><see langword="true" /> w przypadku metody dynamicznej przezroczystym poziomie bezpieczeństwa na bieżącym poziomie zaufania; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="71825-679"><see langword="true" /> if the dynamic method is security-transparent at the current trust level; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-680"><xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, I <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> właściwości raportu poziom przezroczystości metody dynamicznej określone przez środowisko uruchomieniowe języka wspólnego (CLR).</span><span class="sxs-lookup"><span data-stu-id="71825-680">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="71825-681">W poniższej tabeli przedstawiono kombinacje tych właściwości:</span><span class="sxs-lookup"><span data-stu-id="71825-681">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="71825-682">Poziom zabezpieczeń</span><span class="sxs-lookup"><span data-stu-id="71825-682">Security level</span></span>|<span data-ttu-id="71825-683">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="71825-683">IsSecurityCritical</span></span>|<span data-ttu-id="71825-684">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="71825-684">IsSecuritySafeCritical</span></span>|<span data-ttu-id="71825-685">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="71825-685">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="71825-686">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="71825-686">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="71825-687">Bezpieczne krytyczne</span><span class="sxs-lookup"><span data-stu-id="71825-687">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="71825-688">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="71825-688">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="71825-689">Przy użyciu tych właściwości jest znacznie prostsze niż badanie adnotacje zabezpieczeń zestawu i jego typów, sprawdzania na bieżącym poziomie zaufania i próby zduplikowane reguły środowiska uruchomieniowego.</span><span class="sxs-lookup"><span data-stu-id="71825-689">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="71825-690">Przezroczystość metody dynamicznej zależy od moduł, który jest skojarzony z.</span><span class="sxs-lookup"><span data-stu-id="71825-690">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="71825-691">Jeśli metody dynamicznej jest skojarzony z typem, a nie modułu, przezroczystość zależy od moduł, który zawiera typ.</span><span class="sxs-lookup"><span data-stu-id="71825-691">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="71825-692">Metody dynamiczne nie ma adnotacji zabezpieczeń, są przypisane domyślną przezroczystość skojarzone modułu.</span><span class="sxs-lookup"><span data-stu-id="71825-692">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="71825-693">Hostowanej anonimowo metody dynamicznej są zawsze przezroczysty, ponieważ moduł dostarczane przez system, który je zawiera jest niewidoczny.</span><span class="sxs-lookup"><span data-stu-id="71825-693">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="71825-694">W poniższej tabeli opisano przezroczystość dynamiczne metodę, która jest skojarzona z zestawem zaufanych (to znaczy zestawu z silną nazwą zainstalowanego w pamięci podręcznej GAC).</span><span class="sxs-lookup"><span data-stu-id="71825-694">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="71825-695">Adnotacja zestawu</span><span class="sxs-lookup"><span data-stu-id="71825-695">Assembly annotation</span></span>|<span data-ttu-id="71825-696">Przezroczystość poziomu 1</span><span class="sxs-lookup"><span data-stu-id="71825-696">Level 1 transparency</span></span>|<span data-ttu-id="71825-697">Przezroczystość poziomu 2</span><span class="sxs-lookup"><span data-stu-id="71825-697">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="71825-698">W pełni przezroczyste</span><span class="sxs-lookup"><span data-stu-id="71825-698">Fully transparent</span></span>|<span data-ttu-id="71825-699">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="71825-699">Transparent</span></span>|<span data-ttu-id="71825-700">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="71825-700">Transparent</span></span>|  
    |<span data-ttu-id="71825-701">Pełni krytyczne</span><span class="sxs-lookup"><span data-stu-id="71825-701">Fully critical</span></span>|<span data-ttu-id="71825-702">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="71825-702">Critical</span></span>|<span data-ttu-id="71825-703">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="71825-703">Critical</span></span>|  
    |<span data-ttu-id="71825-704">Mieszane przezroczystości</span><span class="sxs-lookup"><span data-stu-id="71825-704">Mixed transparency</span></span>|<span data-ttu-id="71825-705">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="71825-705">Transparent</span></span>|<span data-ttu-id="71825-706">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="71825-706">Transparent</span></span>|  
    |<span data-ttu-id="71825-707">Security-agnostic</span><span class="sxs-lookup"><span data-stu-id="71825-707">Security-agnostic</span></span>|<span data-ttu-id="71825-708">Bezpieczne krytyczne</span><span class="sxs-lookup"><span data-stu-id="71825-708">Safe-critical</span></span>|<span data-ttu-id="71825-709">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="71825-709">Critical</span></span>|  
  
     <span data-ttu-id="71825-710">Na przykład jeśli skojarzona z typem, który znajduje się w pliku mscorlib.dll, który ma poziom 2 przezroczystość mieszanych, dynamiczne — metoda metody dynamicznej jest niewidoczny i nie można wykonać kodu krytycznego.</span><span class="sxs-lookup"><span data-stu-id="71825-710">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="71825-711">Informacji o poziomach przejrzystości, zobacz [kod o przezroczystym poziomie bezpieczeństwa, poziom 1](~/docs/framework/misc/security-transparent-code-level-1.md) i [kod o przezroczystym poziomie bezpieczeństwa, poziom 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="71825-711">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="71825-712">Kojarzenie metody dynamicznej z modułu w zestawie zaufanego poziomu 1, który jest zabezpieczeń niezwiązane z żadnym, takich jak System.dll, nie zezwala na podniesienie poziomu zaufania.</span><span class="sxs-lookup"><span data-stu-id="71825-712">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="71825-713">Jeśli zestaw grant kod, który wywołuje metody dynamicznej nie obejmuje zestaw grant System.dll (to znaczy pełnego zaufania) <xref:System.Security.SecurityException> jest generowany, gdy wywoływana jest metoda dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="71825-713">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="71825-714">Przezroczystość dynamiczne metodę, która jest skojarzona z częściowo zaufanym zestawie zależy od tego, jak zestaw jest ładowany.</span><span class="sxs-lookup"><span data-stu-id="71825-714">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="71825-715">Jeśli zestaw jest ładowany z częściowa relacja zaufania (na przykład w domenie aplikacji piaskownicy), środowisko uruchomieniowe ignoruje adnotacje zabezpieczeń zestawu.</span><span class="sxs-lookup"><span data-stu-id="71825-715">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="71825-716">Zestaw i jego typów i członków, włączając metod dynamicznych, są traktowane jako przezroczysty.</span><span class="sxs-lookup"><span data-stu-id="71825-716">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="71825-717">Środowisko uruchomieniowe zwraca uwagę adnotacje zabezpieczeń tylko wtedy, gdy zestaw częściowego zaufania jest załadowany z pełnym zaufaniem (na przykład do domyślnej domeny aplikacji klasycznej aplikacji).</span><span class="sxs-lookup"><span data-stu-id="71825-717">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="71825-718">W takim przypadku środowiska uruchomieniowego przypisuje metody dynamicznej domyślną przezroczystość dla metod zgodnie z zestawu adnotacji.</span><span class="sxs-lookup"><span data-stu-id="71825-718">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="71825-719">Aby uzyskać więcej informacji na temat odbicia Emituj i przejrzystości, zobacz [problemy z zabezpieczeniami w emisji odbicia](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="71825-719">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="71825-720">Informacje o przejrzystości, zobacz [zmiany zabezpieczeń](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="71825-720">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="71825-721">Dynamiczne metody nie ma treści metody.</span><span class="sxs-lookup"><span data-stu-id="71825-721">The dynamic method doesn't have a method body.</span></span></exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      </Docs>
    </Member>
    <Member MemberName="MethodHandle">
      <MemberSignature Language="C#" Value="public override RuntimeMethodHandle MethodHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeMethodHandle MethodHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.MethodHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodHandle As RuntimeMethodHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeMethodHandle MethodHandle { RuntimeMethodHandle get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeMethodHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="71825-722">Nie jest obsługiwane dla metod dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="71825-722">Not supported for dynamic methods.</span></span></summary>
        <value><span data-ttu-id="71825-723">Nie jest obsługiwane dla metod dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="71825-723">Not supported for dynamic methods.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="71825-724">Niedozwolone dla metod dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="71825-724">Not allowed for dynamic methods.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes MethodImplementationFlags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodImplAttributes MethodImplementationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.MethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodImplementationFlags As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodImplAttributes MethodImplementationFlags { System::Reflection::MethodImplAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="71825-725">Pobiera moduł, z którym jest logicznie powiązanych metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-725">Gets the module with which the dynamic method is logically associated.</span></span></summary>
        <value><span data-ttu-id="71825-726"><see cref="T:System.Reflection.Module" /> z bieżącej metody dynamicznej jest skojarzony.</span><span class="sxs-lookup"><span data-stu-id="71825-726">The <see cref="T:System.Reflection.Module" /> with which the current dynamic method is associated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-727">Jeśli moduł został określony podczas tworzenia metody dynamicznej, ta właściwość zwraca tego modułu.</span><span class="sxs-lookup"><span data-stu-id="71825-727">If a module was specified when the dynamic method was created, this property returns that module.</span></span> <span data-ttu-id="71825-728">Jeśli typ został określony jako właściciela podczas tworzenia metody dynamicznej, ta właściwość zwraca moduł, który zawiera tego typu.</span><span class="sxs-lookup"><span data-stu-id="71825-728">If a type was specified as the owner when the dynamic method was created, this property returns the module which contains that type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71825-729">Poniższy kod przedstawia przykład <xref:System.Reflection.Emit.DynamicMethod.Module%2A> właściwości metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-729">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.Module%2A> property of a dynamic method.</span></span> <span data-ttu-id="71825-730">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="71825-730">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#26](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#26)]
 [!code-csharp[Reflection.DynamicMethod.All#26](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#26)]
 [!code-vb[Reflection.DynamicMethod.All#26](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="71825-731">Pobiera nazwę metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-731">Gets the name of the dynamic method.</span></span></summary>
        <value><span data-ttu-id="71825-732">Prosta nazwa metody.</span><span class="sxs-lookup"><span data-stu-id="71825-732">The simple name of the method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="71825-733">Nie jest konieczne nazwy metod dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="71825-733">It is not necessary to name dynamic methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71825-734">Poniższy przykład kodu wyświetla nazwę metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-734">The following code example displays the name of a dynamic method.</span></span> <span data-ttu-id="71825-735">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="71825-735">This code example is part of a larger example provided for  the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#27](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#27)]
 [!code-csharp[Reflection.DynamicMethod.All#27](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#27)]
 [!code-vb[Reflection.DynamicMethod.All#27](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="71825-736">Pobiera użytej w odbicia do uzyskania metody klasy.</span><span class="sxs-lookup"><span data-stu-id="71825-736">Gets the class that was used in reflection to obtain the method.</span></span></summary>
        <value><span data-ttu-id="71825-737">Zawsze <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-737">Always <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-738">Ta właściwość zawsze zwraca `null` dla metod dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="71825-738">This property always returns `null` for dynamic methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71825-739">Poniższy przykładowy kod przedstawia odbite typu metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-739">The following code example displays the reflected type of a dynamic method.</span></span> <span data-ttu-id="71825-740">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="71825-740">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#28](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#28)]
 [!code-csharp[Reflection.DynamicMethod.All#28](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#28)]
 [!code-vb[Reflection.DynamicMethod.All#28](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnParameter">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo ReturnParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo ReturnParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnParameter As ParameterInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ParameterInfo ^ ReturnParameter { System::Reflection::ParameterInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="71825-741">Pobiera parametr zwrotnego metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-741">Gets the return parameter of the dynamic method.</span></span></summary>
        <value><span data-ttu-id="71825-742">Zawsze <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="71825-742">Always <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-743">Ta właściwość zawsze zwraca `null` dla metod dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="71825-743">This property always returns `null` for dynamic methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnType">
      <MemberSignature Language="C#" Value="public override Type ReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReturnType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReturnType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="71825-744">Pobiera typ zwracanej wartości dla metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-744">Gets the type of return value for the dynamic method.</span></span></summary>
        <value><span data-ttu-id="71825-745">A <see cref="T:System.Type" /> reprezentujący typ zwracanej wartości bieżącej metody; <see cref="T:System.Void" /> Jeśli metoda nie ma zwracanego typu.</span><span class="sxs-lookup"><span data-stu-id="71825-745">A <see cref="T:System.Type" /> representing the type of the return value of the current method; <see cref="T:System.Void" /> if the method has no return type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-746">Jeśli `null` został określony dla typu zwracanych danych podczas tworzenia metody dynamicznej, ta właściwość zwraca <xref:System.Void?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="71825-746">If `null` was specified for the return type when the dynamic method was created, this property returns <xref:System.Void?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71825-747">Poniższy przykładowy kod przedstawia zwracany typ metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-747">The following code example displays the return type of a dynamic method.</span></span> <span data-ttu-id="71825-748">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="71825-748">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#30](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#30)]
 [!code-csharp[Reflection.DynamicMethod.All#30](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#30)]
 [!code-vb[Reflection.DynamicMethod.All#30](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnTypeCustomAttributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnTypeCustomAttributes As ICustomAttributeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ICustomAttributeProvider ^ ReturnTypeCustomAttributes { System::Reflection::ICustomAttributeProvider ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="71825-749">Pobiera atrybuty niestandardowe zwracany typ metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-749">Gets the custom attributes of the return type for the dynamic method.</span></span></summary>
        <value><span data-ttu-id="71825-750"><see cref="T:System.Reflection.ICustomAttributeProvider" /> Reprezentujący atrybuty niestandardowe zwracanego typu dla metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-750">An <see cref="T:System.Reflection.ICustomAttributeProvider" /> representing the custom attributes of the return type for the dynamic method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-751">Atrybuty niestandardowe nie są obsługiwane dla zwracanego typu metody dynamicznej, więc zwrócił tablicę atrybutów niestandardowych <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A> metody zawsze jest pusta.</span><span class="sxs-lookup"><span data-stu-id="71825-751">Custom attributes are not supported on the return type of a dynamic method, so the array of custom attributes returned by the <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A> method is always empty.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71825-752">Poniższy przykład kodu pokazuje sposób wyświetlania atrybutów niestandardowych zwracany typ metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-752">The following code example shows how to display the custom attributes of the return type of a dynamic method.</span></span> <span data-ttu-id="71825-753">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="71825-753">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#31](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#31)]
 [!code-csharp[Reflection.DynamicMethod.All#31](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#31)]
 [!code-vb[Reflection.DynamicMethod.All#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.ReturnType" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="71825-754">Zwraca podpis metody reprezentowany jako ciąg.</span><span class="sxs-lookup"><span data-stu-id="71825-754">Returns the signature of the method, represented as a string.</span></span></summary>
        <returns><span data-ttu-id="71825-755">Ciąg reprezentujący podpis metody.</span><span class="sxs-lookup"><span data-stu-id="71825-755">A string representing the method signature.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71825-756">Sygnatura obejmuje tylko typy i nazwę metody ewentualne.</span><span class="sxs-lookup"><span data-stu-id="71825-756">The signature includes only types and the method name, if any.</span></span> <span data-ttu-id="71825-757">Nazwy parametrów nie są uwzględniane.</span><span class="sxs-lookup"><span data-stu-id="71825-757">Parameter names are not included.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71825-758">Poniższy kod przedstawia przykład <xref:System.Reflection.Emit.DynamicMethod.ToString%2A> metody metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="71825-758">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.ToString%2A> method of a dynamic method.</span></span> <span data-ttu-id="71825-759">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Reflection.Emit.DynamicMethod> klasy.</span><span class="sxs-lookup"><span data-stu-id="71825-759">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#32](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#32)]
 [!code-csharp[Reflection.DynamicMethod.All#32](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#32)]
 [!code-vb[Reflection.DynamicMethod.All#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
