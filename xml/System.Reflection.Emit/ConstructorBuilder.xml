<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ConstructorBuilder.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5025ceef4595d3f427e86addba94956b845850041.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">025ceef4595d3f427e86addba94956b845850041</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.ConstructorBuilder">
          <source>Defines and represents a constructor of a dynamic class.</source>
          <target state="translated">Definiuje i reprezentuje konstruktora klasy dynamicznej.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.ConstructorBuilder">
          <source><ph id="ph1">&lt;xref:System.Reflection.Emit.ConstructorBuilder&gt;</ph> is used to fully describe a constructor in Microsoft intermediate language (MSIL), including the name, attributes, signature, and constructor body.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.ConstructorBuilder&gt;</ph> Służy do opisywania pełni konstruktora w języku pośrednim firmy Microsoft (MSIL), łącznie z nazwą, atrybuty, sygnatury i treść konstruktora.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.ConstructorBuilder">
          <source>It is used in conjunction with the <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> class to create classes at run time.</source>
          <target state="translated">Jest on używany w połączeniu z <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> klasa do tworzenia klas w czasie wykonywania.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.ConstructorBuilder">
          <source>Call <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A&gt;</ph> to get an instance of <ph id="ph2">&lt;xref:System.Reflection.Emit.ConstructorBuilder&gt;</ph>.</source>
          <target state="translated">Wywołanie <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A&gt;</ph> można pobrać wystąpienia <ph id="ph2">&lt;xref:System.Reflection.Emit.ConstructorBuilder&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.ConstructorBuilder">
          <source>If you do not define a constructor for your dynamic type, a default constructor is provided automatically, and it calls the default constructor of the base class.</source>
          <target state="translated">Jeśli nie definiują konstruktora dla typu dynamicznego automatycznie podano konstruktora domyślnego i wywołuje konstruktor domyślny klasy podstawowej.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.ConstructorBuilder">
          <source>If you use <ph id="ph1">&lt;xref:System.Reflection.Emit.ConstructorBuilder&gt;</ph> to define a constructor for your dynamic type, a default constructor is not provided.</source>
          <target state="translated">Jeśli używasz <ph id="ph1">&lt;xref:System.Reflection.Emit.ConstructorBuilder&gt;</ph> do definiowania konstruktora dla typu dynamicznego, nie określono konstruktora domyślnego.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.ConstructorBuilder">
          <source>You have the following options for providing a default constructor in addition to the constructor you defined:</source>
          <target state="translated">Masz następujące opcje zapewniające konstruktora domyślnego oprócz konstruktora, zdefiniowane przez użytkownika:</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.ConstructorBuilder">
          <source>If you want a default constructor that simply calls the default constructor of the base class, you can use the <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor%2A?displayProperty=nameWithType&gt;</ph> method to create one (and optionally restrict access to it).</source>
          <target state="translated">Jeśli chcesz domyślnego konstruktora, która po prostu wywołuje konstruktor domyślny klasy podstawowej, można użyć <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor%2A?displayProperty=nameWithType&gt;</ph> metodę, aby utworzyć (i opcjonalnie ograniczyć dostęp do niego).</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.ConstructorBuilder">
          <source>Do not provide an implementation for this default constructor.</source>
          <target state="translated">Nie podawaj implementację tego konstruktora domyślnego.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.ConstructorBuilder">
          <source>If you do, an exception is thrown when you try to use the constructor.</source>
          <target state="translated">Jeśli to zrobisz, jest wyjątek podczas próby użycia konstruktora.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.ConstructorBuilder">
          <source>No exception is thrown when the <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> method is called.</source>
          <target state="translated">Żaden wyjątek jest zgłaszany, gdy <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> metoda jest wywoływana.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.ConstructorBuilder">
          <source>If you want a default constructor that does something more than simply calling the default constructor of the base class, or that calls another constructor of the base class, or that does something else entirely, you must use the <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A?displayProperty=nameWithType&gt;</ph> method to create a <ph id="ph2">&lt;xref:System.Reflection.Emit.ConstructorBuilder&gt;</ph>, and provide your own implementation.</source>
          <target state="translated">Jeśli chcesz domyślnego konstruktora, który wykonuje coś więcej niż po prostu wywołanie domyślnego konstruktora klasy podstawowej lub innego konstruktora, który odwołuje klasy podstawowej, lub że jakiś sposób przetwarzającego całkowicie, należy użyć <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A?displayProperty=nameWithType&gt;</ph> metodę w celu utworzenia <ph id="ph2">&lt;xref:System.Reflection.Emit.ConstructorBuilder&gt;</ph>i podaj swoje własne implementacji.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.ConstructorBuilder">
          <source>The following code sample illustrates the contextual usage of a <ph id="ph1">`ConstructorBuilder`</ph>.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia użycie kontekstowe <ph id="ph1">`ConstructorBuilder`</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
          <source>The security action to be taken, such as Demand, Assert, and so on.</source>
          <target state="translated">Zabezpieczenia podjęcie działań, takich jak żądanie, Assert i tak dalej.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
          <source>The set of permissions the action applies to.</source>
          <target state="translated">Zestaw uprawnień, które dotyczą akcji.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
          <source>Adds declarative security to this constructor.</source>
          <target state="translated">Dodaje zabezpieczenia deklaratywne do tego konstruktora.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
          <source><ph id="ph1">&lt;xref:System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity%2A&gt;</ph> can be called several times, with each call specifying a security action (such as <ph id="ph2">`Demand`</ph>, <ph id="ph3">`Assert`</ph>, and <ph id="ph4">`Deny`</ph>) and a set of permissions that the action applies to.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity%2A&gt;</ph> może być wywołany kilka razy z każdym wywołaniu określenie akcji zabezpieczeń (takich jak <ph id="ph2">`Demand`</ph>, <ph id="ph3">`Assert`</ph>, i <ph id="ph4">`Deny`</ph>) oraz zestaw uprawnień, które dotyczą akcji.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
          <source>In the .NET Framework versions 1.0, 1.1, and 2.0, the declarative security attributes applied to a constructor by using this method are stored in the old XML metadata format.</source>
          <target state="translated">W wersji systemu .NET Framework 1.0, 1.1 i 2.0 zabezpieczenia deklaratywne atrybuty stosowane do konstruktora za pomocą tej metody są przechowywane w starym formacie XML w metadanych.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
          <source>See Emitting Declarative Security Attributes.</source>
          <target state="translated">Zobacz emitowanie deklaratywne atrybuty zabezpieczeń.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
          <source>The following code sample illustrates the use of <ph id="ph1">`AddDeclarativeSecurity`</ph>.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia użycie <ph id="ph1">`AddDeclarativeSecurity`</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
          <source><ph id="ph1">&lt;paramref name="action" /&gt;</ph> is invalid (RequestMinimum, RequestOptional, and RequestRefuse are invalid).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="action" /&gt;</ph> jest nieprawidłowy (RequestMinimum, RequestOptional i RequestRefuse są nieprawidłowe).</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
          <source>The containing type has been previously created using <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph>.</source>
          <target state="translated">Typ zawierający wcześniej utworzono za pomocą <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
          <source>The permission set <ph id="ph1">&lt;paramref name="pset" /&gt;</ph> contains an action that was added earlier by <ph id="ph2">&lt;see langword="AddDeclarativeSecurity" /&gt;</ph>.</source>
          <target state="translated">Zestaw uprawnień <ph id="ph1">&lt;paramref name="pset" /&gt;</ph> zawiera akcję, która została dodana wcześniej przez <ph id="ph2">&lt;see langword="AddDeclarativeSecurity" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
          <source><ph id="ph1">&lt;paramref name="pset" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="pset" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.ConstructorBuilder.Attributes">
          <source>Retrieves the attributes for this constructor.</source>
          <target state="translated">Pobiera atrybuty dla tego konstruktora.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ConstructorBuilder.Attributes">
          <source>Returns the attributes for this constructor.</source>
          <target state="translated">Zwraca atrybuty dla tego konstruktora.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ConstructorBuilder.Attributes">
          <source>The following code sample illustrates the use of <ph id="ph1">`Attributes`</ph>.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia użycie <ph id="ph1">`Attributes`</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.ConstructorBuilder.CallingConvention">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.CallingConventions" /&gt;</ph> value that depends on whether the declaring type is generic.</source>
          <target state="translated">Pobiera <ph id="ph1">&lt;see cref="T:System.Reflection.CallingConventions" /&gt;</ph> wartość, która jest zależna od tego, czy wybrano ogólny typ deklarujący.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ConstructorBuilder.CallingConvention">
          <source><ph id="ph1">&lt;see cref="F:System.Reflection.CallingConventions.HasThis" /&gt;</ph> if the declaring type is generic; otherwise, <ph id="ph2">&lt;see cref="F:System.Reflection.CallingConventions.Standard" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Reflection.CallingConventions.HasThis" /&gt;</ph> Jeśli typ deklarujący jest rodzajowy; w przeciwnym razie <ph id="ph2">&lt;see cref="F:System.Reflection.CallingConventions.Standard" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.ConstructorBuilder.DeclaringType">
          <source>Retrieves a reference to the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object for the type that declares this member.</source>
          <target state="translated">Pobiera odwołanie do <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> obiektu dla typu, który deklaruje tego elementu członkowskiego.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ConstructorBuilder.DeclaringType">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object for the type that declares this member.</source>
          <target state="translated">Zwraca <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> obiektu dla typu, który deklaruje tego elementu członkowskiego.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ConstructorBuilder.DeclaringType">
          <source>A member of a class (or interface) is either declared or inherited from a base class (or interface).</source>
          <target state="translated">Element członkowski klasy (lub interface) jest zadeklarowana albo odziedziczona z klasy podstawowej (lub interface).</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ConstructorBuilder.DeclaringType">
          <source>The following code sample illustrates the use of <ph id="ph1">`DeclaringType`</ph>.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia użycie <ph id="ph1">`DeclaringType`</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>The position of the parameter in the parameter list.</source>
          <target state="translated">Pozycja parametru na liście parametrów.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>Parameters are indexed beginning with the number 1 for the first parameter.</source>
          <target state="translated">Parametry są indeksowane, począwszy od pierwszego parametru numer 1.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>The attributes of the parameter.</source>
          <target state="translated">Atrybuty parametru.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>The name of the parameter.</source>
          <target state="translated">Nazwa parametru.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>The name can be the null string.</source>
          <target state="translated">Nazwa może być pustym ciągiem.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>Defines a parameter of this constructor.</source>
          <target state="translated">Określa parametr tego konstruktora.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>Returns a <ph id="ph1">&lt;see langword="ParameterBuilder" /&gt;</ph> object that represents the new parameter of this constructor.</source>
          <target state="translated">Zwraca <ph id="ph1">&lt;see langword="ParameterBuilder" /&gt;</ph> obiekt, który reprezentuje nowy parametr tego konstruktora.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>If you specify 0 (zero) for <ph id="ph1">`iSequence`</ph>, this method returns a <ph id="ph2">&lt;xref:System.Reflection.Emit.ParameterBuilder&gt;</ph> instead of throwing an exception.</source>
          <target state="translated">Jeśli zostanie określona liczba 0 (zero) dla <ph id="ph1">`iSequence`</ph>, ta metoda zwraca <ph id="ph2">&lt;xref:System.Reflection.Emit.ParameterBuilder&gt;</ph> zamiast generowania wyjątku.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>There is nothing useful that you can do with this <ph id="ph1">&lt;xref:System.Reflection.Emit.ParameterBuilder&gt;</ph>.</source>
          <target state="translated">Nie ma nic przydatne, których można użyć z tym <ph id="ph1">&lt;xref:System.Reflection.Emit.ParameterBuilder&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source><ph id="ph1">&lt;paramref name="iSequence" /&gt;</ph> is less than 0 (zero), or it is greater than the number of parameters of the constructor.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="iSequence" /&gt;</ph> jest mniejsza od 0 (zero), lub jest większa niż liczba parametrów konstruktora.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>The containing type has been created using <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph>.</source>
          <target state="translated">Typ zawierający został utworzony przy użyciu <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.ConstructorBuilder">
          <source>Returns the custom attributes defined for this constructor.</source>
          <target state="translated">Zwraca atrybuty niestandardowe zdefiniowane dla tego konstruktora.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Boolean)">
          <source>Controls inheritance of custom attributes from base classes.</source>
          <target state="translated">Dziedziczenie Kontrolki niestandardowe atrybuty z klas podstawowych.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Boolean)">
          <source>This parameter is ignored.</source>
          <target state="translated">Ten parametr jest ignorowany.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Boolean)">
          <source>Returns all the custom attributes defined for this constructor.</source>
          <target state="translated">Zwraca atrybuty niestandardowe zdefiniowane dla tego konstruktora.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Boolean)">
          <source>Returns an array of objects representing all the custom attributes of the constructor represented by this <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ConstructorBuilder" /&gt;</ph> instance.</source>
          <target state="translated">Zwraca tablicę obiektów reprezentujących atrybuty niestandardowe konstruktora reprezentowany przez to <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ConstructorBuilder" /&gt;</ph> wystąpienia.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Boolean)">
          <source>The <ph id="ph1">`inherit`</ph> parameter is ignored because a class never inherits constructors from base classes.</source>
          <target state="translated"><ph id="ph1">`inherit`</ph> Parametr jest ignorowany, ponieważ klasa nigdy nie dziedziczy konstruktorów klas podstawowych.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Boolean)">
          <source>To get the custom attributes, finish building the type by calling <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A&gt;</ph>, retrieve the constructor by calling the <ph id="ph2">&lt;xref:System.Type.GetConstructor%2A&gt;</ph> method on the returned type, and then call the <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> method on the returned <ph id="ph4">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph>.</source>
          <target state="translated">Można pobrać atrybutów niestandardowych, Zakończ tworzenie typu przez wywołanie metody <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A&gt;</ph>, pobrać wywołując konstruktora <ph id="ph2">&lt;xref:System.Type.GetConstructor%2A&gt;</ph> metody na typ zwrócony, a następnie wywołania <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> metody w zwróconym <ph id="ph4">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Boolean)">
          <source>This method is not currently supported.</source>
          <target state="translated">Ta metoda nie jest obecnie obsługiwana.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The custom attribute type.</source>
          <target state="translated">Typ atrybutu niestandardowego.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Controls inheritance of custom attributes from base classes.</source>
          <target state="translated">Dziedziczenie Kontrolki niestandardowe atrybuty z klas podstawowych.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This parameter is ignored.</source>
          <target state="translated">Ten parametr jest ignorowany.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Returns the custom attributes identified by the given type.</source>
          <target state="translated">Zwraca atrybuty niestandardowe określone przez danego typu.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Returns an array of type <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> representing the attributes of this constructor.</source>
          <target state="translated">Zwraca tablicę typu <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> reprezentujący atrybuty tego konstruktora.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The <ph id="ph1">`inherit`</ph> parameter is ignored because a class never inherits constructors from base classes.</source>
          <target state="translated"><ph id="ph1">`inherit`</ph> Parametr jest ignorowany, ponieważ klasa nigdy nie dziedziczy konstruktorów klas podstawowych.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>To get the custom attributes, finish building the type by calling <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A&gt;</ph>, retrieve the constructor by calling the <ph id="ph2">&lt;xref:System.Type.GetConstructor%2A&gt;</ph> method on the returned type, and then call the <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> method on the returned <ph id="ph4">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph>.</source>
          <target state="translated">Można pobrać atrybutów niestandardowych, Zakończ tworzenie typu przez wywołanie metody <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A&gt;</ph>, pobrać wywołując konstruktora <ph id="ph2">&lt;xref:System.Type.GetConstructor%2A&gt;</ph> metody na typ zwrócony, a następnie wywołania <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> metody w zwróconym <ph id="ph4">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This method is not currently supported.</source>
          <target state="translated">Ta metoda nie jest obecnie obsługiwana.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.ConstructorBuilder">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> that can be used to emit a method body for this constructor.</source>
          <target state="translated">Pobiera <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> można wyemitować treści metody dla tego konstruktora.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> for this constructor.</source>
          <target state="translated">Pobiera <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> dla tego konstruktora.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> object for this constructor.</source>
          <target state="translated">Zwraca <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> obiekt dla tego konstruktora.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator">
          <source>The runtime generates the code for default constructors.</source>
          <target state="translated">Środowisko uruchomieniowe generuje kod dla domyślnych konstruktorów.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator">
          <source>Therefore, if an attempt is made to obtain an <ph id="ph1">`ILGenerator`</ph>, an exception will be thrown.</source>
          <target state="translated">W związku z tym jeśli próby uzyskania <ph id="ph1">`ILGenerator`</ph>, zostanie wygenerowany wyjątek.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator">
          <source>The following code sample illustrates the use of the <ph id="ph1">`GetILGenerator`</ph> method.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia użycie <ph id="ph1">`GetILGenerator`</ph> metody.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator">
          <source>The constructor is a default constructor.</source>
          <target state="translated">Konstruktor jest konstruktora domyślnego.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator">
          <source>The constructor has <ph id="ph1">&lt;see cref="T:System.Reflection.MethodAttributes" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Reflection.MethodImplAttributes" /&gt;</ph> flags indicating that it should not have a method body.</source>
          <target state="translated">Konstruktor ma <ph id="ph1">&lt;see cref="T:System.Reflection.MethodAttributes" /&gt;</ph> lub <ph id="ph2">&lt;see cref="T:System.Reflection.MethodImplAttributes" /&gt;</ph> flagi wskazujące, że nie powinna mieć treści metody.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator(System.Int32)">
          <source>The size of the MSIL stream, in bytes.</source>
          <target state="translated">Rozmiar strumienia MSIL, w bajtach.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator(System.Int32)">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> object, with the specified MSIL stream size, that can be used to build a method body for this constructor.</source>
          <target state="translated">Pobiera <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> obiektu o określonym rozmiarze strumienia MSIL, który może służyć do tworzenia treści metody dla tego konstruktora.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator(System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> for this constructor.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> Dla tego konstruktora.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator(System.Int32)">
          <source>The runtime generates the code for default constructors.</source>
          <target state="translated">Środowisko uruchomieniowe generuje kod dla domyślnych konstruktorów.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator(System.Int32)">
          <source>Therefore, if an attempt is made to obtain an <ph id="ph1">`ILGenerator`</ph> for a default constructor, an exception is thrown.</source>
          <target state="translated">W związku z tym jeśli próby uzyskania <ph id="ph1">`ILGenerator`</ph> dla domyślnego konstruktora, jest zgłaszany wyjątek.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator(System.Int32)">
          <source>The constructor is a default constructor.</source>
          <target state="translated">Konstruktor jest konstruktora domyślnego.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator(System.Int32)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator(System.Int32)">
          <source>The constructor has <ph id="ph1">&lt;see cref="T:System.Reflection.MethodAttributes" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Reflection.MethodImplAttributes" /&gt;</ph> flags indicating that it should not have a method body.</source>
          <target state="translated">Konstruktor ma <ph id="ph1">&lt;see cref="T:System.Reflection.MethodAttributes" /&gt;</ph> lub <ph id="ph2">&lt;see cref="T:System.Reflection.MethodImplAttributes" /&gt;</ph> flagi wskazujące, że nie powinna mieć treści metody.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags">
          <source>Returns the method implementation flags for this constructor.</source>
          <target state="translated">Zwraca metodę implementacji flagami dla tego konstruktora.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags">
          <source>The method implementation flags for this constructor.</source>
          <target state="translated">Flagi implementacji metod dla tego konstruktora.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags">
          <source>The following code sample illustrates the use of <ph id="ph1">`GetMethodImplementationFlags`</ph>.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia użycie <ph id="ph1">`GetMethodImplementationFlags`</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetModule">
          <source>Returns a reference to the module that contains this constructor.</source>
          <target state="translated">Zwraca odwołanie do modułu, który zawiera ten konstruktor.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetModule">
          <source>The module that contains this constructor.</source>
          <target state="translated">Moduł, który zawiera tego konstruktora.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.GetModule">
          <source>The following code sample illustrates the usage of <ph id="ph1">`GetModule`</ph>.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia użycie <ph id="ph1">`GetModule`</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetParameters">
          <source>Returns the parameters of this constructor.</source>
          <target state="translated">Zwraca parametry tego konstruktora.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetParameters">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterInfo" /&gt;</ph> objects that represent the parameters of this constructor.</source>
          <target state="translated">Zwraca tablicę <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterInfo" /&gt;</ph> obiektów, które reprezentują parametry tego konstruktora.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.GetParameters">
          <source>This property is not supported until after the <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> method has been called.</source>
          <target state="translated">Ta właściwość nie jest obsługiwana do momentu po <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> została wywołana metoda.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.GetParameters">
          <source>In the .NET Framework versions 1.0 and 1.1, <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.</source>
          <target state="translated">W wersji systemu .NET Framework 1.0 i 1.1 <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> jest generowany.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.GetParameters">
          <source>In the .NET Framework version 2.0, <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> is thrown.</source>
          <target state="translated">W programie .NET Framework w wersji 2.0 <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> jest generowany.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.GetParameters">
          <source>The code sample illustrates the use of <ph id="ph1">`GetParameters`</ph>.</source>
          <target state="translated">Przykładowy kod przedstawia użycie <ph id="ph1">`GetParameters`</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetParameters">
          <source><ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> has not been called on this constructor's type, in the .NET Framework versions 1.0 and 1.1.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> nie została wywołana dla tego konstruktora typu w wersji systemu .NET Framework 1.0 i 1.1.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetParameters">
          <source><ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> has not been called on this constructor's type, in the .NET Framework version 2.0.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> nie została wywołana dla tego konstruktora typu w programie .NET Framework w wersji 2.0.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetToken">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.MethodToken" /&gt;</ph> that represents the token for this constructor.</source>
          <target state="translated">Zwraca <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.MethodToken" /&gt;</ph> reprezentujący token dla tego konstruktora.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.GetToken">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.MethodToken" /&gt;</ph> of this constructor.</source>
          <target state="translated">Zwraca <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.MethodToken" /&gt;</ph> tego konstruktora.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.GetToken">
          <source>This code sample illustrates the use of <ph id="ph1">`GetToken`</ph>.</source>
          <target state="translated">Ten przykładowy kod przedstawia użycie <ph id="ph1">`GetToken`</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.ConstructorBuilder.InitLocals">
          <source>Gets or sets whether the local variables in this constructor should be zero-initialized.</source>
          <target state="translated">Pobiera lub ustawia, czy zmiennych lokalnych, w tym konstruktorze powinien być inicjowany przez zero.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ConstructorBuilder.InitLocals">
          <source>Read/write.</source>
          <target state="translated">Odczyt/zapis.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ConstructorBuilder.InitLocals">
          <source>Gets or sets whether the local variables in this constructor should be zero-initialized.</source>
          <target state="translated">Pobiera lub ustawia, czy zmiennych lokalnych, w tym konstruktorze powinien być inicjowany przez zero.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.ConstructorBuilder">
          <source>Invokes the constructor dynamically reflected by this instance.</source>
          <target state="translated">Wywołuje konstruktor dynamicznie odzwierciedlone przez to wystąpienie.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This must be a bit flag from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>, such as InvokeMethod, NonPublic, and so on.</source>
          <target state="translated">Musi to być flagę z bitowego <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>, na przykład InvokeMethod, NonPublic i tak dalej.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> objects using reflection.</source>
          <target state="translated">Obiekt, który umożliwia powiązanie koercja argumentu typy wywołania elementów członkowskich i pobieranie <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> obiektów za pomocą odbicia.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If binder is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">Jeśli jest <ph id="ph1">&lt;see langword="null" /&gt;</ph>, używany jest domyślny integrator.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>See <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>.</source>
          <target state="translated">Zobacz <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An argument list.</source>
          <target state="translated">Lista argumentów.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked.</source>
          <target state="translated">To tablica argumentów, których liczba, kolejność i typ jako parametry konstruktora do wywołania.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If there are no parameters this should be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Jeśli nie ma żadnych parametrów powinna to być <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An instance of <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> used to govern the coercion of types.</source>
          <target state="translated">Wystąpienie <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> używane do sterowania koercja typów.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If this is null, the <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> for the current thread is used.</source>
          <target state="translated">Jeśli jest to wartość null, <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> służy bieżącego wątku.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>(For example, this is necessary to convert a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that represents 1000 to a <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> value, since 1000 is represented differently by different cultures.)</source>
          <target state="translated">(Na przykład jest to konieczne przekonwertować <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> reprezentujący 1000 do <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> wartości, ponieważ 1000 jest inaczej reprezentowany przez innych kultur.)</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Invokes the constructor dynamically reflected by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.</source>
          <target state="translated">Wywołuje konstruktor dynamicznie odzwierciedlone przez to wystąpienie dla danego obiektu, przekazywanie wraz z określonymi parametrami, a w obszarze ograniczenia dany obiekt wiążący.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that is the return value of the invoked constructor.</source>
          <target state="translated">Zwraca <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> który jest zwracana wartość wywołanej konstruktora.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If the constructor has no parameters, the value of the <ph id="ph1">`parameters`</ph> parameter should be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Jeśli konstruktora nie ma parametrów, wartość <ph id="ph1">`parameters`</ph> parametr powinien być <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Otherwise, the number, type, and order of elements in the <ph id="ph1">`parameters`</ph> array should be identical to the number, type, and order of parameters for the constructor reflected by this instance.</source>
          <target state="translated">W przeciwnym razie liczbę, typ i kolejność elementów <ph id="ph1">`parameters`</ph> tablicy powinna być taka sama jak liczba, typ i kolejność parametrów dla konstruktora dostarczanej przez to wystąpienie.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, if the constructor reflected by this instance is declared as public class taking two strings, then the <ph id="ph1">`parameters`</ph> parameter should be an array of <ph id="ph2">&lt;xref:System.Object&gt;</ph> with length 2.</source>
          <target state="translated">Na przykład, jeśli Konstruktor dostarczanej przez to wystąpienie jest zadeklarowany jako publiczny klasy z argumentami dwa ciągi, a następnie <ph id="ph1">`parameters`</ph> parametr powinien być tablicą <ph id="ph2">&lt;xref:System.Object&gt;</ph> o długości 2.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Access restrictions are ignored for fully-trusted code.</source>
          <target state="translated">Ograniczenia dostępu są ignorowane w pełni zaufanego kodu.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>That is, private constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully trusted.</source>
          <target state="translated">Oznacza to konstruktory prywatne, pola, metody i właściwości są dostępne i wywoływane przy użyciu odbicia, jeśli kod jest w pełni zaufany.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This method is not currently supported.</source>
          <target state="translated">Ta metoda nie jest obecnie obsługiwana.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>You can retrieve the constructor using <ph id="ph1">&lt;see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /&gt;</ph> and call <ph id="ph2">&lt;see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /&gt;</ph> on the returned <ph id="ph3">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph>.</source>
          <target state="translated">Można pobrać przy użyciu konstruktora <ph id="ph1">&lt;see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /&gt;</ph> i Wywołaj <ph id="ph2">&lt;see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /&gt;</ph> w zwróconym <ph id="ph3">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The object that needs to be reinitialized.</source>
          <target state="translated">Obiekt, który musi zostać zainicjowane ponownie.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>One of the <ph id="ph1">&lt;see langword="BindingFlags" /&gt;</ph> values that specifies the type of binding that is desired.</source>
          <target state="translated">Jeden z <ph id="ph1">&lt;see langword="BindingFlags" /&gt;</ph> wartości, które określa typ powiązania, które jest pożądane.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>A <ph id="ph1">&lt;see langword="Binder" /&gt;</ph> that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection.</source>
          <target state="translated">A <ph id="ph1">&lt;see langword="Binder" /&gt;</ph> który definiuje zestaw właściwości i umożliwia powiązanie koercja typy argumentów i wywoływania elementów członkowskich za pomocą odbicia.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, then Binder.DefaultBinding is used.</source>
          <target state="translated">Jeśli <bpt id="p1">&lt;c&gt;</bpt>integratora<ept id="p1">&lt;/c&gt;</ept> jest <ph id="ph1">&lt;see langword="null" /&gt;</ph>, Binder.DefaultBinding będzie używana.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An argument list.</source>
          <target state="translated">Lista argumentów.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked.</source>
          <target state="translated">To tablica argumentów, których liczba, kolejność i typ jako parametry konstruktora do wywołania.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If there are no parameters, this should be a null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic).</source>
          <target state="translated">Jeśli nie ma żadnych parametrów, należy to odwołanie o wartości null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> used to govern the coercion of types.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> używane do sterowania koercja typów.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If this is null, the <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> for the current thread is used.</source>
          <target state="translated">Jeśli jest to wartość null, <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> służy bieżącego wątku.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Dynamically invokes the constructor reflected by this instance with the specified arguments, under the constraints of the specified <ph id="ph1">&lt;see langword="Binder" /&gt;</ph>.</source>
          <target state="translated">Dynamicznie wywołuje konstruktor dostarczanej przez to wystąpienie z określonymi argumentami, zgodnie z ograniczeniami określonego <ph id="ph1">&lt;see langword="Binder" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An instance of the class associated with the constructor.</source>
          <target state="translated">Wystąpienie skojarzonej z konstruktora klasy.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters for the constructor reflected by this instance.</source>
          <target state="translated">Liczbę, typ i kolejność elementów w tablicy parametrów powinna być taka sama jak liczba, typ i kolejność parametrów dla konstruktora dostarczanej przez to wystąpienie.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Before calling the constructor, <ph id="ph1">`Invoke`</ph> ensures that the caller has access permission, and that the parameters are of the correct number, order and type.</source>
          <target state="translated">Przed wywołaniem konstruktora, <ph id="ph1">`Invoke`</ph> zapewnia czy wywołującego ma uprawnienia dostępu, a parametry są prawidłowy numer, kolejność i typu.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Access restrictions are ignored for fully-trusted code.</source>
          <target state="translated">Ograniczenia dostępu są ignorowane w pełni zaufanego kodu.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>That is, private constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully trusted.</source>
          <target state="translated">Oznacza to konstruktory prywatne, pola, metody i właściwości są dostępne i wywoływane przy użyciu odbicia, jeśli kod jest w pełni zaufany.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This method is not currently supported.</source>
          <target state="translated">Ta metoda nie jest obecnie obsługiwana.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>You can retrieve the constructor using <ph id="ph1">&lt;see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /&gt;</ph> and call <ph id="ph2">&lt;see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /&gt;</ph> on the returned <ph id="ph3">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph>.</source>
          <target state="translated">Można pobrać przy użyciu konstruktora <ph id="ph1">&lt;see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /&gt;</ph> i Wywołaj <ph id="ph2">&lt;see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /&gt;</ph> w zwróconym <ph id="ph3">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)">
          <source>A custom attribute type.</source>
          <target state="translated">Typ atrybutu niestandardowego.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)">
          <source>Controls inheritance of custom attributes from base classes.</source>
          <target state="translated">Dziedziczenie Kontrolki niestandardowe atrybuty z klas podstawowych.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)">
          <source>This parameter is ignored.</source>
          <target state="translated">Ten parametr jest ignorowany.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)">
          <source>Checks if the specified custom attribute type is defined.</source>
          <target state="translated">Sprawdza, czy jest definiowany typ określonego atrybutu niestandardowego.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified custom attribute type is defined; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli zdefiniowano typ określonego atrybutu niestandardowego; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)">
          <source>See the metadata specification for details on how to format <ph id="ph1">`binaryAttribute`</ph>.</source>
          <target state="translated">Zobacz specyfikację metadanych, aby uzyskać szczegółowe informacje dotyczące formatowania <ph id="ph1">`binaryAttribute`</ph>.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)">
          <source>This method is not currently supported.</source>
          <target state="translated">Ta metoda nie jest obecnie obsługiwana.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)">
          <source>You can retrieve the constructor using <ph id="ph1">&lt;see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /&gt;</ph> and call <ph id="ph2">&lt;see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /&gt;</ph> on the returned <ph id="ph3">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph>.</source>
          <target state="translated">Można pobrać przy użyciu konstruktora <ph id="ph1">&lt;see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /&gt;</ph> i Wywołaj <ph id="ph2">&lt;see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /&gt;</ph> w zwróconym <ph id="ph3">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.ConstructorBuilder.MethodHandle">
          <source>Retrieves the internal handle for the method.</source>
          <target state="translated">Pobiera wewnętrzne dojście metody.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.ConstructorBuilder.MethodHandle">
          <source>Use this handle to access the underlying metadata handle.</source>
          <target state="translated">Dostęp do podstawowych dojście metadanych przy użyciu tego uchwytu.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ConstructorBuilder.MethodHandle">
          <source>Returns the internal handle for the method.</source>
          <target state="translated">Zwraca dojście wewnętrzny dla metody.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ConstructorBuilder.MethodHandle">
          <source>Use this handle to access the underlying metadata handle.</source>
          <target state="translated">Dostęp do podstawowych dojście metadanych przy użyciu tego uchwytu.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.ConstructorBuilder.MethodHandle">
          <source>This property is not supported on this class.</source>
          <target state="translated">Ta właściwość nie jest obsługiwana w tej klasie.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.ConstructorBuilder.Module">
          <source>Gets the dynamic module in which this constructor is defined.</source>
          <target state="translated">Pobiera moduł dynamicznej, w którym ten konstruktor jest zdefiniowany.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ConstructorBuilder.Module">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> object that represents the dynamic module in which this constructor is defined.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> obiekt, który reprezentuje modułu dynamicznego, w którym ten konstruktor jest zdefiniowany.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ConstructorBuilder.Module">
          <source>This property returns the same value as the <ph id="ph1">&lt;xref:System.Reflection.Emit.ConstructorBuilder.GetModule%2A&gt;</ph> method.</source>
          <target state="translated">Ta właściwość zwraca taką samą wartość jak <ph id="ph1">&lt;xref:System.Reflection.Emit.ConstructorBuilder.GetModule%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.ConstructorBuilder.Name">
          <source>Retrieves the name of this constructor.</source>
          <target state="translated">Pobiera nazwę tego konstruktora.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ConstructorBuilder.Name">
          <source>Returns the name of this constructor.</source>
          <target state="translated">Zwraca nazwę tego konstruktora.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ConstructorBuilder.Name">
          <source>The following code sample illustrates the use of <ph id="ph1">`Name`</ph>.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia użycie <ph id="ph1">`Name`</ph>.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.ConstructorBuilder.ReflectedType">
          <source>Holds a reference to the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object from which this object was obtained.</source>
          <target state="translated">Zawiera odwołanie do <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> obiektu, z którego uzyskano tego obiektu.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ConstructorBuilder.ReflectedType">
          <source>Returns the <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object from which this object was obtained.</source>
          <target state="translated">Zwraca <ph id="ph1">&lt;see langword="Type" /&gt;</ph> obiektu, z którego uzyskano tego obiektu.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ConstructorBuilder.ReflectedType">
          <source>A <ph id="ph1">&lt;xref:System.Reflection.Emit.ConstructorBuilder&gt;</ph> object represents a constructor on a particular class.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Reflection.Emit.ConstructorBuilder&gt;</ph> obiekt reprezentuje konstruktora na konkretnej klasy.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ConstructorBuilder.ReflectedType">
          <source>In order to obtain a <ph id="ph1">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph> object, the <ph id="ph2">&lt;xref:System.Type&gt;</ph> object that represents the class that supports the constructor is queried.</source>
          <target state="translated">Aby uzyskać <ph id="ph1">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph> obiektu <ph id="ph2">&lt;xref:System.Type&gt;</ph> obiekt, który reprezentuje klasę, która obsługuje konstruktora jest poddawany kwerendzie.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ConstructorBuilder.ReflectedType">
          <source>This property holds a reference to that <ph id="ph1">&lt;xref:System.Type&gt;</ph> object.</source>
          <target state="translated">Ta właściwość zawiera odwołanie do tego <ph id="ph1">&lt;xref:System.Type&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.ConstructorBuilder.ReturnType">
          <source>Gets <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Pobiera <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ConstructorBuilder.ReturnType">
          <source>Returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Zwraca <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ConstructorBuilder.ReturnType">
          <source>This property might be removed in a future version.</source>
          <target state="translated">Ta właściwość może zostać usunięta w przyszłych wersjach.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.ConstructorBuilder">
          <source>Sets a custom attribute.</source>
          <target state="translated">Ustawia atrybut niestandardowy.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source>An instance of a helper class to define the custom attribute.</source>
          <target state="translated">Wystąpienia klasy pomocnika do definiowania atrybutu niestandardowego.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source>Set a custom attribute using a custom attribute builder.</source>
          <target state="translated">Wartość atrybutu niestandardowego za pomocą konstruktora atrybutów niestandardowych.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source>The following code sample illustrates the use of <ph id="ph1">`SetCustomAttribute`</ph> of the context of a <ph id="ph2">&lt;xref:System.Reflection.Emit.ConstructorBuilder&gt;</ph>, passing a <ph id="ph3">&lt;xref:System.Reflection.Emit.CustomAttributeBuilder&gt;</ph>.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia użycie <ph id="ph1">`SetCustomAttribute`</ph> kontekstu <ph id="ph2">&lt;xref:System.Reflection.Emit.ConstructorBuilder&gt;</ph>, przechodzącą <ph id="ph3">&lt;xref:System.Reflection.Emit.CustomAttributeBuilder&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source><ph id="ph1">&lt;paramref name="customBuilder" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="customBuilder" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>The constructor for the custom attribute.</source>
          <target state="translated">Konstruktor atrybutu niestandardowego.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>A byte blob representing the attributes.</source>
          <target state="translated">Obiekt blob bajtów reprezentujących atrybuty.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>Set a custom attribute using a specified custom attribute blob.</source>
          <target state="translated">Ustaw przy użyciu określonego atrybutu niestandardowego obiektu blob atrybutu niestandardowego.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>See the metadata specification in the ECMA Partition II documentation for details on how to format <ph id="ph1">`binaryAttribute`</ph>.</source>
          <target state="translated">Zobacz specyfikację metadanych w dokumentacji ECMA II partycji, aby uzyskać więcej informacji na temat formatu <ph id="ph1">`binaryAttribute`</ph>.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">Dokumentacja jest dostępna w trybie online; zobacz <bpt id="p1">[</bpt>ECMA C# i wspólne normy infrastruktury języka<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> w witrynie MSDN i <bpt id="p2">[</bpt>standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> w witrynie sieci Web międzynarodowej Ecma.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>The following code sample illustrates the use of <ph id="ph1">`SetCustomAttribute`</ph> of the context of a <ph id="ph2">&lt;xref:System.Reflection.Emit.ConstructorBuilder&gt;</ph>, passing a byte blob.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia użycie <ph id="ph1">`SetCustomAttribute`</ph> kontekstu <ph id="ph2">&lt;xref:System.Reflection.Emit.ConstructorBuilder&gt;</ph>, przekazywanie obiektu blob bajtów.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="con" /&gt;</ph> or <ph id="ph2">&lt;paramref name="binaryAttribute" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="con" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="binaryAttribute" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
          <source>The method implementation flags.</source>
          <target state="translated">Flagi implementacji metod.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
          <source>Sets the method implementation flags for this constructor.</source>
          <target state="translated">Ustawia metodę implementacji flagami dla tego konstruktora.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
          <source>The following code sample illustrates the use of <ph id="ph1">`SetImplementationFlags`</ph>.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia użycie <ph id="ph1">`SetImplementationFlags`</ph>.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
          <source>The containing type has been created using <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph>.</source>
          <target state="translated">Typ zawierający został utworzony przy użyciu <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>An array that contains valid MSIL instructions.</source>
          <target state="translated">Tablica zawiera nieprawidłowy instrukcje MSIL.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The maximum stack evaluation depth.</source>
          <target state="translated">Stos maksymalną głębokość oceny.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>An array of bytes that contain the serialized local variable structure.</source>
          <target state="translated">Tablica bajtów, które zawierają serializacji struktury zmiennej lokalnej.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>Specify <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the constructor has no local variables.</source>
          <target state="translated">Określ <ph id="ph1">&lt;see langword="null" /&gt;</ph> Jeśli konstruktora nie ma lokalnych zmiennych.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>A collection that contains the exception handlers for the constructor.</source>
          <target state="translated">Kolekcja, która zawiera obsługę wyjątków dla konstruktora.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>Specify <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the constructor has no exception handlers.</source>
          <target state="translated">Określ <ph id="ph1">&lt;see langword="null" /&gt;</ph> Jeśli Konstruktor nie ma żadnych programów obsługi wyjątków.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>A collection of values that represent offsets in <bpt id="p1">&lt;c&gt;</bpt>il<ept id="p1">&lt;/c&gt;</ept>, each of which specifies the beginning of a token that may be modified.</source>
          <target state="translated">Zbiór wartości, które reprezentują przesunięcia w <bpt id="p1">&lt;c&gt;</bpt>il<ept id="p1">&lt;/c&gt;</ept>, z których każdy Określa początek token, który może być modyfikowany.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>Specify <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the constructor has no tokens that have to be modified.</source>
          <target state="translated">Określ <ph id="ph1">&lt;see langword="null" /&gt;</ph> Jeśli Konstruktor nie ma żadnych tokenów, które mają być modyfikowane.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>Creates the body of the constructor by using a specified byte array of Microsoft intermediate language (MSIL) instructions.</source>
          <target state="translated">Tworzy treść konstruktora przy użyciu określonej tablicy bajtów instrukcji języka pośredniego (MSIL) firmy Microsoft.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="il" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="il" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="maxStack" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="maxStack" /&gt;</ph> jest ujemna.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>One of <ph id="ph1">&lt;paramref name="exceptionHandlers" /&gt;</ph> specifies an offset outside of <ph id="ph2">&lt;paramref name="il" /&gt;</ph>.</source>
          <target state="translated">Jeden z <ph id="ph1">&lt;paramref name="exceptionHandlers" /&gt;</ph> określa przesunięcie, poza <ph id="ph2">&lt;paramref name="il" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>One of <ph id="ph1">&lt;paramref name="tokenFixups" /&gt;</ph> specifies an offset that is outside the <ph id="ph2">&lt;paramref name="il" /&gt;</ph> array.</source>
          <target state="translated">Jeden z <ph id="ph1">&lt;paramref name="tokenFixups" /&gt;</ph> określa przesunięcie znajdującego się poza <ph id="ph2">&lt;paramref name="il" /&gt;</ph> tablicy.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The containing type was previously created using the <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> method.</source>
          <target state="translated">Typ zawierający został wcześniej utworzony przy użyciu <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>This method was called previously on this <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ConstructorBuilder" /&gt;</ph> object.</source>
          <target state="translated">Ta metoda została wywołana wcześniej w tym <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ConstructorBuilder" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetSymCustomAttribute(System.String,System.Byte[])">
          <source>The name of the custom attribute.</source>
          <target state="translated">Nazwa atrybutu niestandardowego.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetSymCustomAttribute(System.String,System.Byte[])">
          <source>The value of the custom attribute.</source>
          <target state="translated">Wartość atrybutu niestandardowego.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetSymCustomAttribute(System.String,System.Byte[])">
          <source>Sets this constructor's custom attribute associated with symbolic information.</source>
          <target state="translated">Ustawia tego konstruktora atrybutów niestandardowych skojarzony z informacjami symbolicznych.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.SetSymCustomAttribute(System.String,System.Byte[])">
          <source>The following code sample illustrates the use of <ph id="ph1">`SetSymCustomAttributes`</ph>.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia użycie <ph id="ph1">`SetSymCustomAttributes`</ph>.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetSymCustomAttribute(System.String,System.Byte[])">
          <source>The containing type has been created using <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph>.</source>
          <target state="translated">Typ zawierający został utworzony przy użyciu <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetSymCustomAttribute(System.String,System.Byte[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetSymCustomAttribute(System.String,System.Byte[])">
          <source>The module does not have a symbol writer defined.</source>
          <target state="translated">Moduł nie ma Edytor symbol zdefiniowany.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.SetSymCustomAttribute(System.String,System.Byte[])">
          <source>For example, the module is not a debug module.</source>
          <target state="translated">Na przykład moduł nie jest modułem debugowania.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.ConstructorBuilder.Signature">
          <source>Retrieves the signature of the field in the form of a string.</source>
          <target state="translated">Pobiera podpis pola w formie ciągu.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ConstructorBuilder.Signature">
          <source>Returns the signature of the field.</source>
          <target state="translated">Zwraca podpis pola.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Zarezerwowane do użytku w przyszłości.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Musi być wartością IID_NULL.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">Przekazana tablica nazw ma być mapowana.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">Liczba nazw, które mają być mapowane.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">Ustawienia regionalne kontekstu, w którym można interpretować nazwy.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">Tablica przydzielana przez obiekt wywołujący, który otrzymuje numery identyfikacyjne odpowiadających nazw.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">Zestaw nazw jest mapowany na odpowiedni zestaw identyfikatorów wysyłania.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, zobacz bibliotece MSDN.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Dostęp z późnym wiązaniem za pomocą modelu COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interfejs nie jest obsługiwany.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">Informacje o typie, który będzie zwracany.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">Identyfikator regionalny dla informacji o typie.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">Otrzymuje wskaźnik do obiektu informacji żądanego typu.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">Pobiera informacje o typie dla obiektu, których następnie można użyć do uzyskania informacji o typie interfejsu.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, zobacz bibliotece MSDN.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Dostęp z późnym wiązaniem za pomocą modelu COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interfejs nie jest obsługiwany.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">Wskazuje lokalizację, która odbiera informację o liczbie typów dostarczanych przez obiekt.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">Pobiera informację o liczbie typów interfejsów, jakie zawiera obiekt (0 lub 1).</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, zobacz bibliotece MSDN.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Dostęp z późnym wiązaniem za pomocą modelu COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interfejs nie jest obsługiwany.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">Określa element członkowski.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Zarezerwowane do użytku w przyszłości.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Musi być wartością IID_NULL.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">Ustawienia regionalne kontekstu, w którym można interpretować argumenty.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">Flagi opisujące kontekst wywołania.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">Wskaźnik do struktury zawiera tablicę argumentów, tablicę identyfikatorów DISPID argumentu dla nazwanych argumentów i zlicza liczbę elementów w tablicach.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">Wskaźnik miejsca, gdzie ma być przechowywany wynik.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">Wskaźnik do struktury, która zawiera informacje o wyjątku.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">Indeks pierwszego argumentu, który zawiera błąd.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">Umożliwia dostęp do właściwości i metod udostępnianych przez obiekt.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat <ph id="ph1">`IDispatch::Invoke`</ph>, zobacz bibliotece MSDN.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Dostęp z późnym wiązaniem za pomocą modelu COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interfejs nie jest obsługiwany.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.ToString">
          <source>Returns this <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ConstructorBuilder" /&gt;</ph> instance as a <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">Zwraca to <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ConstructorBuilder" /&gt;</ph> jako <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ConstructorBuilder.ToString">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> containing the name, attributes, and exceptions of this constructor, followed by the current Microsoft intermediate language (MSIL) stream.</source>
          <target state="translated">Zwraca <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> zawierający nazwę, atrybuty i wyjątków tego konstruktora następuje bieżący strumień język pośredni (MSIL) firmy Microsoft.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>