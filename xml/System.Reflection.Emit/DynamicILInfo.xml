<Type Name="DynamicILInfo" FullName="System.Reflection.Emit.DynamicILInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="027718ba7331018405b1f33c2a7cd8dbe961edfe" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DynamicILInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicILInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.DynamicILInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicILInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicILInfo" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="eb428-101">Zapewnia obsługę alternatywnych metod Generowanie język pośredni firmy Microsoft (MSIL) i metadanych dla metody dynamicznej, tym metody do tworzenia tokenów i wstawianie kodu, obsługa wyjątków i zmiennych podpisu lokalnego obiektów blob.</span>
      <span class="sxs-lookup">
        <span data-stu-id="eb428-101">Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, exception handling, and local variable signature blobs.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb428-102"><xref:System.Reflection.Emit.DynamicILInfo> Klasa umożliwia deweloperom pisanie własnych generatory MSIL zamiast <xref:System.Reflection.Emit.ILGenerator>.</span><span class="sxs-lookup"><span data-stu-id="eb428-102">The <xref:System.Reflection.Emit.DynamicILInfo> class allows developers to write their own MSIL generators instead of using <xref:System.Reflection.Emit.ILGenerator>.</span></span>  
  
 <span data-ttu-id="eb428-103">Aby utworzyć wystąpienia innych typów, wywoływanie metod i tak dalej, MSIL generowania musi zawierać tokeny dla tych jednostek.</span><span class="sxs-lookup"><span data-stu-id="eb428-103">To create instances of other types, call methods, and so on, the MSIL you generate must include tokens for those entities.</span></span> <span data-ttu-id="eb428-104"><xref:System.Reflection.Emit.DynamicILInfo> Klasa udostępnia kilka przeciążeń <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> metodę, która zwraca tokeny prawidłowe w zakresie bieżącego <xref:System.Reflection.Emit.DynamicILInfo>.</span><span class="sxs-lookup"><span data-stu-id="eb428-104">The <xref:System.Reflection.Emit.DynamicILInfo> class provides several overloads of the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method, which return tokens valid in the scope of the current <xref:System.Reflection.Emit.DynamicILInfo>.</span></span> <span data-ttu-id="eb428-105">Na przykład, jeśli należy wywołać przeciążenia <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> metody, można uzyskać <xref:System.RuntimeMethodHandle> który przeciążenia i przekaż go do <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> metody do uzyskania tokenu do osadzenia w Twojej MSIL.</span><span class="sxs-lookup"><span data-stu-id="eb428-105">For example, if you need to call an overload of the <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> method, you can obtain a <xref:System.RuntimeMethodHandle> for that overload and pass it to the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method to obtain a token to embed in your MSIL.</span></span>  
  
 <span data-ttu-id="eb428-106">Po utworzeniu <xref:System.Byte> tablic zmiennych podpisu lokalnego, wyjątków i treść kodu, można użyć <xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>, <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>, i <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> metod, aby wstawić je do <xref:System.Reflection.Emit.DynamicMethod> skojarzone z Twojej <xref:System.Reflection.Emit.DynamicILInfo> obiekt.</span><span class="sxs-lookup"><span data-stu-id="eb428-106">Once you have created <xref:System.Byte> arrays for your local variable signature, exceptions, and code body, you can use the <xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>, <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>, and <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> methods to insert them into the <xref:System.Reflection.Emit.DynamicMethod> associated with your <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span>  
  
 <span data-ttu-id="eb428-107">Generowanie własnego metadanych i MSIL wymaga znajomości dokumentacji infrastruktury języka wspólnego (CLI), szczególnie "Partycji II: metadane definicji i semantyki" i "Partycji III: CIL instrukcji Set".</span><span class="sxs-lookup"><span data-stu-id="eb428-107">Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="eb428-108">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# i wspólne normy infrastruktury języka](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie sieci Web międzynarodowej Ecma.</span><span class="sxs-lookup"><span data-stu-id="eb428-108">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eb428-109">Nie używaj <xref:System.Reflection.Emit.DynamicILInfo> do generowania kodu, który tworzy delegata do innej metody dynamicznej poprzez bezpośrednie wywoływanie konstruktora delegata.</span><span class="sxs-lookup"><span data-stu-id="eb428-109">Do not use <xref:System.Reflection.Emit.DynamicILInfo> to generate code that creates a delegate to another dynamic method by calling the delegate constructor directly.</span></span> <span data-ttu-id="eb428-110">Zamiast tego należy użyć <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> metodę w celu utworzenia delegata.</span><span class="sxs-lookup"><span data-stu-id="eb428-110">Instead, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method to create the delegate.</span></span> <span data-ttu-id="eb428-111">Delegata, który jest utworzony za pomocą konstruktora delegata nie ma odwołanie do docelowej metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="eb428-111">A delegate that is created with the delegate constructor does not have a reference to the target dynamic method.</span></span> <span data-ttu-id="eb428-112">Metody dynamicznej może można odzyskać przez odzyskiwanie pamięci podczas delegat jest nadal używane.</span><span class="sxs-lookup"><span data-stu-id="eb428-112">The dynamic method might be reclaimed by garbage collection while the delegate is still in use.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DynamicMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.DynamicMethod DynamicMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Emit.DynamicMethod DynamicMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DynamicMethod As DynamicMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Emit::DynamicMethod ^ DynamicMethod { System::Reflection::Emit::DynamicMethod ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.DynamicMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eb428-113">Pobiera metody dynamicznej, których treść jest generowany przez bieżące wystąpienie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-113">Gets the dynamic method whose body is generated by the current instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eb428-114">A <see cref="T:System.Reflection.Emit.DynamicMethod" /> obiekt reprezentujący metody dynamicznej, dla którego bieżący <see cref="T:System.Reflection.Emit.DynamicILInfo" /> obiektu jest generowanie kodu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-114">A <see cref="T:System.Reflection.Emit.DynamicMethod" /> object representing the dynamic method for which the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object is generating code.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb428-115">A <xref:System.Reflection.Emit.DynamicILInfo> obiekt zawsze jest skojarzony z metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="eb428-115">A <xref:System.Reflection.Emit.DynamicILInfo> object is always associated with a dynamic method.</span></span> <span data-ttu-id="eb428-116">Celem <xref:System.Reflection.Emit.DynamicILInfo> klasa ma na celu dostarczenie innym sposobem Wstawianie strumienia MSIL, obsługa wyjątków i zmiennych podpisu lokalnego do dynamicznej metody dla deweloperów, którzy chcą generować MSIL bez użycia <xref:System.Reflection.Emit.ILGenerator> klasy.</span><span class="sxs-lookup"><span data-stu-id="eb428-116">The purpose of the <xref:System.Reflection.Emit.DynamicILInfo> class is to provide another way of inserting the MSIL stream, exception handling, and local variable signature into a dynamic method, for developers who want to generate MSIL without using the <xref:System.Reflection.Emit.ILGenerator> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTokenFor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="eb428-117">Pobiera token jest nieprawidłowy w zakresie bieżącego <see cref="T:System.Reflection.Emit.DynamicILInfo" />, reprezentująca ciągu, pole, metody, typu lub podpisu w strumieniu MSIL skojarzone metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-117">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a string, field, method, type, or signature in the MSIL stream for the associated dynamic method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (byte[] signature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(unsigned int8[] signature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (signature As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(cli::array &lt;System::Byte&gt; ^ signature);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signature" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="signature">
          <span data-ttu-id="eb428-118">Tablica zawiera podpis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-118">An array that contains the signature.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb428-119">Pobiera token jest nieprawidłowy w zakresie bieżącego <see cref="T:System.Reflection.Emit.DynamicILInfo" />, reprezentujący podpis skojarzony metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-119">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing the signature for the associated dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb428-120">Token, który można ją osadzić w metadanych i strumienia MSIL skojarzone metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-120">A token that can be embedded in the metadata and the MSIL stream for the associated dynamic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb428-121">Uzyskać informacji o sygnaturze obiektów blob zobacz dokumentację infrastruktury języka wspólnego (CLI), szczególnie "partycji II: metadane definicji i semantyki".</span><span class="sxs-lookup"><span data-stu-id="eb428-121">For information on signature blobs, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="eb428-122">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# i wspólne normy infrastruktury języka](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie sieci Web międzynarodowej Ecma.</span><span class="sxs-lookup"><span data-stu-id="eb428-122">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (System.Reflection.Emit.DynamicMethod method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(class System.Reflection.Emit.DynamicMethod method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (method As DynamicMethod) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(System::Reflection::Emit::DynamicMethod ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.Emit.DynamicMethod" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="eb428-123">Dynamiczne metody do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-123">The dynamic method to call.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb428-124">Pobiera token jest nieprawidłowy w zakresie bieżącego <see cref="T:System.Reflection.Emit.DynamicILInfo" />, reprezentujący dynamiczne metoda wywoływana przez metodę skojarzone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-124">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a dynamic method to be called from the associated method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb428-125">Token, który można ją osadzić w strumieniu MSIL skojarzone metody dynamicznej, jako element docelowy instrukcja MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-125">A token that can be embedded in the MSIL stream for the associated dynamic method, as the target of an MSIL instruction.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb428-126">Token zwracany przez przeciążenie tej metody umożliwia wywołanie metody dynamicznej z metody dynamicznej skojarzone z bieżącym <xref:System.Reflection.Emit.DynamicILInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="eb428-126">The token returned by this method overload allows you to call a dynamic method from the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="eb428-127">Aby wywołać rekursywnie skojarzone metody dynamicznej, należy przekazać wartość <xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="eb428-127">To call the associated dynamic method recursively, pass the value of the <xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeFieldHandle field);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeFieldHandle field) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (field As RuntimeFieldHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeFieldHandle field);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="field" Type="System.RuntimeFieldHandle" />
      </Parameters>
      <Docs>
        <param name="field">
          <span data-ttu-id="eb428-128">Pole ma być uzyskiwany dostęp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-128">The field to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb428-129">Pobiera token jest nieprawidłowy w zakresie bieżącego <see cref="T:System.Reflection.Emit.DynamicILInfo" />, reprezentująca pole można uzyskać dostęp z skojarzone metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-129">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a field to be accessed from the associated dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb428-130">Token, który może być używany jako argument instrukcji MSIL, który uzyskuje dostęp do pól w zakresie bieżącego <see cref="T:System.Reflection.Emit.DynamicILInfo" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-130">A token that can be used as the operand of an MSIL instruction that accesses fields, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb428-131">Należy uzyskać token dla dowolnego pola, w której będą mieli dostęp przez metodę dynamicznego skojarzone z bieżącym <xref:System.Reflection.Emit.DynamicILInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="eb428-131">You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="eb428-132">Użyj <xref:System.Type.GetField%2A?displayProperty=nameWithType> metodę, aby pobrać <xref:System.Reflection.FieldInfo> pola, którego chcesz uzyskać dostęp, następnie użyć <xref:System.Reflection.FieldInfo.FieldHandle%2A> właściwości do pobrania <xref:System.RuntimeFieldHandle>.</span><span class="sxs-lookup"><span data-stu-id="eb428-132">Use the <xref:System.Type.GetField%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeMethodHandle method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeMethodHandle method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (method As RuntimeMethodHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeMethodHandle method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.RuntimeMethodHandle" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="eb428-133">Metoda ma być uzyskiwany dostęp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-133">The method to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb428-134">Pobiera token jest nieprawidłowy w zakresie bieżącego <see cref="T:System.Reflection.Emit.DynamicILInfo" />, reprezentujący metodę jako dostępne skojarzone metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-134">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a method to be accessed from the associated dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb428-135">Token, który może być używany jako argument instrukcji MSIL, który uzyskuje dostęp do metod, takich jak <see cref="F:System.Reflection.Emit.OpCodes.Call" /> lub <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, w zakresie bieżącego <see cref="T:System.Reflection.Emit.DynamicILInfo" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-135">A token that can be used as the operand of an MSIL instruction that accesses methods, such as <see cref="F:System.Reflection.Emit.OpCodes.Call" /> or <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb428-136">Należy uzyskać token dla dowolnej metody, której będą mieli dostęp przez metodę dynamicznego skojarzone z bieżącym <xref:System.Reflection.Emit.DynamicILInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="eb428-136">You must obtain a token for any method that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="eb428-137">Użyj <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> metodę, aby pobrać <xref:System.Reflection.MethodInfo> chcesz uzyskać dostęp, a następnie użyj metody <xref:System.Reflection.MethodBase.MethodHandle%2A> właściwości do pobrania <xref:System.RuntimeMethodHandle>.</span><span class="sxs-lookup"><span data-stu-id="eb428-137">Use the <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.MethodInfo> for the method you want to access, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eb428-138">Dla metody, która należy do typu ogólnego, użyj <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29> metoda przeciążenia i określ <xref:System.RuntimeTypeHandle> dla typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="eb428-138">For a method that belongs to a generic type, use the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29> method overload and specify a <xref:System.RuntimeTypeHandle> for the generic type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeTypeHandle type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeTypeHandle type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (type As RuntimeTypeHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeTypeHandle type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="eb428-139">Typ, który ma być używany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-139">The type to be used.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb428-140">Pobiera token jest nieprawidłowy w zakresie bieżącego <see cref="T:System.Reflection.Emit.DynamicILInfo" />, reprezentujący typ ma być używana podczas skojarzone metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-140">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a type to be used in the associated dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb428-141">Token, który może być używany jako argument instrukcji MSIL, który wymaga typu, w zakresie bieżącego <see cref="T:System.Reflection.Emit.DynamicILInfo" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-141">A token that can be used as the operand of an MSIL instruction that requires a type, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb428-142">Token zwracany przez przeciążenie tej metody umożliwia definiowanie typu zmiennej lokalnej i Emituj MSIL do utworzenia wystąpienia typu w metodzie dynamiczne skojarzone z bieżącym <xref:System.Reflection.Emit.DynamicILInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="eb428-142">The token returned by this method overload allows you to define a local variable type, and emit MSIL to create an instance of a type in the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span>  
  
 <span data-ttu-id="eb428-143">Aby uzyskać <xref:System.RuntimeTypeHandle> reprezentujący typ, użyj <xref:System.Type.TypeHandle%2A?displayProperty=nameWithType> właściwości.</span><span class="sxs-lookup"><span data-stu-id="eb428-143">To get a <xref:System.RuntimeTypeHandle> representing a type, use the <xref:System.Type.TypeHandle%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (string literal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(string literal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (literal As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(System::String ^ literal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="literal" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="literal">
          <span data-ttu-id="eb428-144">Ciąg, który ma być używany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-144">The string to be used.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb428-145">Pobiera token jest nieprawidłowy w zakresie bieżącego <see cref="T:System.Reflection.Emit.DynamicILInfo" />, reprezentujący do użycia w metodzie dynamiczne skojarzone literału ciągu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-145">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a string literal to be used in the associated dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb428-146">Token, który może być używany jako argument instrukcji MSIL, który wymaga parametrów, w zakresie bieżącego <see cref="T:System.Reflection.Emit.DynamicILInfo" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-146">A token that can be used as the operand of an MSIL instruction that requires a string, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeFieldHandle field, RuntimeTypeHandle contextType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeFieldHandle field, valuetype System.RuntimeTypeHandle contextType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (field As RuntimeFieldHandle, contextType As RuntimeTypeHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeFieldHandle field, RuntimeTypeHandle contextType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="field" Type="System.RuntimeFieldHandle" />
        <Parameter Name="contextType" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="field">
          <span data-ttu-id="eb428-147">Pole ma być uzyskiwany dostęp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-147">The field to be accessed.</span>
          </span>
        </param>
        <param name="contextType">
          <span data-ttu-id="eb428-148">Typ ogólny, których należy pole.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-148">The generic type the field belongs to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb428-149">Pobiera token jest nieprawidłowy w zakresie bieżącego <see cref="T:System.Reflection.Emit.DynamicILInfo" />, reprezentująca pole można uzyskać dostęp z skojarzone metody dynamicznej; to pole jest w określonym typie ogólnym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-149">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a field to be accessed from the associated dynamic method; the field is on the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb428-150">Token, który może być używany jako argument instrukcji MSIL, który uzyskuje dostęp do pól w zakresie bieżącego <see cref="T:System.Reflection.Emit.DynamicILInfo" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-150">A token that can be used as the operand of an MSIL instruction that accesses fields in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb428-151">Należy uzyskać token dla dowolnego pola, w której będą mieli dostęp przez metodę dynamicznego skojarzone z bieżącym <xref:System.Reflection.Emit.DynamicILInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="eb428-151">You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="eb428-152">Użyj <xref:System.Type.GetField%2A?displayProperty=nameWithType> metodę, aby pobrać <xref:System.Reflection.FieldInfo> dla pola chcesz uzyskać dostęp, a następnie użyj <xref:System.Reflection.FieldInfo.FieldHandle%2A> właściwości do pobrania <xref:System.RuntimeFieldHandle>.</span><span class="sxs-lookup"><span data-stu-id="eb428-152">Use the <xref:System.Type.GetField%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, and then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeMethodHandle method, RuntimeTypeHandle contextType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeMethodHandle method, valuetype System.RuntimeTypeHandle contextType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (method As RuntimeMethodHandle, contextType As RuntimeTypeHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeMethodHandle method, RuntimeTypeHandle contextType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.RuntimeMethodHandle" />
        <Parameter Name="contextType" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="eb428-153">Metoda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-153">The method.</span>
          </span>
        </param>
        <param name="contextType">
          <span data-ttu-id="eb428-154">Typ ogólny metoda należy do.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-154">The generic type the method belongs to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb428-155">Pobiera token jest nieprawidłowy w zakresie bieżącego <see cref="T:System.Reflection.Emit.DynamicILInfo" />, reprezentujący metody dla typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-155">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a method on a generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb428-156">Token, który może być używany jako argument instrukcji MSIL, który uzyskuje dostęp do metod, takich jak <see cref="F:System.Reflection.Emit.OpCodes.Call" /> lub <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, w zakresie bieżącego <see cref="T:System.Reflection.Emit.DynamicILInfo" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-156">A token that can be used as the operand of an MSIL instruction that accesses methods, such as <see cref="F:System.Reflection.Emit.OpCodes.Call" /> or <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb428-157">Należy uzyskać token dla dowolnej metody, która będzie wywoływana przez metodę dynamicznego skojarzone z bieżącym <xref:System.Reflection.Emit.DynamicILInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="eb428-157">You must obtain a token for any method that will be called by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="eb428-158">Użyj <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> metodę, aby pobrać <xref:System.Reflection.MethodInfo> chcesz wywołać, a następnie użyj metody <xref:System.Reflection.MethodBase.MethodHandle%2A> właściwości do pobrania <xref:System.RuntimeMethodHandle>.</span><span class="sxs-lookup"><span data-stu-id="eb428-158">Use the <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.MethodInfo> for the method you want to call, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetCode">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="eb428-159">Ustawia treść kodu skojarzone metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-159">Sets the code body of the associated dynamic method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetCode">
      <MemberSignature Language="C#" Value="public void SetCode (byte[] code, int maxStackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCode(unsigned int8[] code, int32 maxStackSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCode (code As Byte(), maxStackSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCode(cli::array &lt;System::Byte&gt; ^ code, int maxStackSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.Byte[]" />
        <Parameter Name="maxStackSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="code">
          <span data-ttu-id="eb428-160">Tablica zawiera strumienia MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-160">An array that contains the MSIL stream.</span>
          </span>
        </param>
        <param name="maxStackSize">
          <span data-ttu-id="eb428-161">Maksymalna liczba elementów na stosie operand podczas wykonywania metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-161">The maximum number of items on the operand stack when the method is executing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb428-162">Ustawia treść kodu skojarzone metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-162">Sets the code body of the associated dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb428-163">Nie ważności są sprawdzane w strumieniu MSIL.</span><span class="sxs-lookup"><span data-stu-id="eb428-163">No validity checks are performed on the MSIL stream.</span></span>  
  
 <span data-ttu-id="eb428-164">Wywołanie tej metody na drugim zamienia pierwszy strumienia MSIL drugiego.</span><span class="sxs-lookup"><span data-stu-id="eb428-164">Calling this method a second time replaces the first MSIL stream with the second.</span></span>  
  
 <span data-ttu-id="eb428-165">Generowanie własnego metadanych i MSIL wymaga znajomości dokumentacji infrastruktury języka wspólnego (CLI), szczególnie "Partycji II: metadane definicji i semantyki" i "Partycji III: CIL instrukcji Set".</span><span class="sxs-lookup"><span data-stu-id="eb428-165">Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="eb428-166">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# i wspólne normy infrastruktury języka](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie sieci Web międzynarodowej Ecma.</span><span class="sxs-lookup"><span data-stu-id="eb428-166">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCode">
      <MemberSignature Language="C#" Value="public void SetCode (byte* code, int codeSize, int maxStackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCode(unsigned int8* code, int32 codeSize, int32 maxStackSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCode(System::Byte* code, int codeSize, int maxStackSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.Byte*" />
        <Parameter Name="codeSize" Type="System.Int32" />
        <Parameter Name="maxStackSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="code">
          <span data-ttu-id="eb428-167">Wskaźnik do tablica bajtów zawierająca strumień MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-167">A pointer to a byte array containing the MSIL stream.</span>
          </span>
        </param>
        <param name="codeSize">
          <span data-ttu-id="eb428-168">Liczba bajtów w strumieniu MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-168">The number of bytes in the MSIL stream.</span>
          </span>
        </param>
        <param name="maxStackSize">
          <span data-ttu-id="eb428-169">Maksymalna liczba elementów na stosie operand podczas wykonywania metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-169">The maximum number of items on the operand stack when the method is executing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb428-170">Ustawia treść kodu skojarzone metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-170">Sets the code body of the associated dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb428-171">Nie ważności są sprawdzane w strumieniu MSIL.</span><span class="sxs-lookup"><span data-stu-id="eb428-171">No validity checks are performed on the MSIL stream.</span></span>  
  
 <span data-ttu-id="eb428-172">Wywołanie tej metody na drugim zamienia pierwszy strumienia MSIL drugiego.</span><span class="sxs-lookup"><span data-stu-id="eb428-172">Calling this method a second time replaces the first MSIL stream with the second.</span></span>  
  
 <span data-ttu-id="eb428-173">Generowanie własnego metadanych i MSIL wymaga znajomości dokumentacji infrastruktury języka wspólnego (CLI), szczególnie "partycji II: metadane definicji i semantyki" i "partycji III: zestaw instrukcji CIL."</span><span class="sxs-lookup"><span data-stu-id="eb428-173">Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set."</span></span> <span data-ttu-id="eb428-174">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# i wspólne normy infrastruktury języka](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie sieci Web międzynarodowej Ecma.</span><span class="sxs-lookup"><span data-stu-id="eb428-174">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="eb428-175">
            <paramref name="code" /> jest <see langword="null" /> i <paramref name="codeSize" /> jest większa niż 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-175">
              <paramref name="code" /> is <see langword="null" /> and <paramref name="codeSize" /> is greater than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="eb428-176">
            <paramref name="codeSize" /> jest mniejsza niż 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-176">
              <paramref name="codeSize" /> is less than 0.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="eb428-177">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-177">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="eb428-178">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-178">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetExceptions">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="eb428-179">Ustawia wyjątek metadane skojarzone metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-179">Sets the exception metadata for the associated dynamic method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetExceptions">
      <MemberSignature Language="C#" Value="public void SetExceptions (byte[] exceptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetExceptions(unsigned int8[] exceptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetExceptions (exceptions As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetExceptions(cli::array &lt;System::Byte&gt; ^ exceptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptions" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="exceptions">
          <span data-ttu-id="eb428-180">Tablica zawiera metadane wyjątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-180">An array that contains the exception metadata.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb428-181">Ustawia wyjątek metadane skojarzone metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-181">Sets the exception metadata for the associated dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb428-182">Metadane wyjątku dla metody definiuje położenie i rozmiar wszystkich `try`, `catch`, `finally`, filtr i bloki błędów.</span><span class="sxs-lookup"><span data-stu-id="eb428-182">The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks.</span></span> <span data-ttu-id="eb428-183">Aby uzyskać informacje na układ metadanych w dokumentacji infrastruktury języka wspólnego (CLI), szczególnie "partycji II: metadane definicji i semantyki".</span><span class="sxs-lookup"><span data-stu-id="eb428-183">For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="eb428-184">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# i wspólne normy infrastruktury języka](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie sieci Web międzynarodowej Ecma.</span><span class="sxs-lookup"><span data-stu-id="eb428-184">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetExceptions">
      <MemberSignature Language="C#" Value="public void SetExceptions (byte* exceptions, int exceptionsSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetExceptions(unsigned int8* exceptions, int32 exceptionsSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetExceptions(System::Byte* exceptions, int exceptionsSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptions" Type="System.Byte*" />
        <Parameter Name="exceptionsSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="exceptions">
          <span data-ttu-id="eb428-185">Wskaźnik do tablicy typu byte, zawierający metadane wyjątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-185">A pointer to a byte array containing the exception metadata.</span>
          </span>
        </param>
        <param name="exceptionsSize">
          <span data-ttu-id="eb428-186">Liczba bajtów wyjątek metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-186">The number of bytes of exception metadata.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb428-187">Ustawia wyjątek metadane skojarzone metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-187">Sets the exception metadata for the associated dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb428-188">Metadane wyjątku dla metody definiuje położenie i rozmiar wszystkich `try`, `catch`, `finally`, filtr i bloki błędów.</span><span class="sxs-lookup"><span data-stu-id="eb428-188">The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks.</span></span> <span data-ttu-id="eb428-189">Aby uzyskać informacje na układ metadanych w dokumentacji infrastruktury języka wspólnego (CLI), szczególnie "Partycji II: metadane definicji i semantyki" i "III: CIL instrukcji zestawu partycji".</span><span class="sxs-lookup"><span data-stu-id="eb428-189">For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="eb428-190">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# i wspólne normy infrastruktury języka](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie sieci Web międzynarodowej Ecma.</span><span class="sxs-lookup"><span data-stu-id="eb428-190">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="eb428-191">
            <paramref name="exceptions" /> jest <see langword="null" /> i <paramref name="exceptionSize" /> jest większa niż 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-191">
              <paramref name="exceptions" /> is <see langword="null" /> and <paramref name="exceptionSize" /> is greater than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="eb428-192">
            <paramref name="exceptionSize" /> jest mniejsza niż 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-192">
              <paramref name="exceptionSize" /> is less than 0.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="eb428-193">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-193">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="eb428-194">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-194">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetLocalSignature">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="eb428-195">Ustawia lokalnej zmiennej podpisie, który opisano układ zmiennych lokalnych skojarzone metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-195">Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetLocalSignature">
      <MemberSignature Language="C#" Value="public void SetLocalSignature (byte[] localSignature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLocalSignature(unsigned int8[] localSignature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetLocalSignature (localSignature As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetLocalSignature(cli::array &lt;System::Byte&gt; ^ localSignature);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localSignature" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="localSignature">
          <span data-ttu-id="eb428-196">Tablica zawierająca układ zmiennych lokalnych skojarzonych z nim <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-196">An array that contains the layout of local variables for the associated <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb428-197">Ustawia lokalnej zmiennej podpisie, który opisano układ zmiennych lokalnych skojarzone metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-197">Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb428-198">Podpisu lokalnego zmiennej opisano układ metody zmiennych lokalnych.</span><span class="sxs-lookup"><span data-stu-id="eb428-198">The local variable signature describes the layout of a method's local variables.</span></span> <span data-ttu-id="eb428-199">Aby uprościć konstruowania zmiennej podpisu lokalnego, należy użyć `static` (`Shared` w języku Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType> metodę, aby pobrać <xref:System.Reflection.Emit.SignatureHelper> dla podpisu lokalnego.</span><span class="sxs-lookup"><span data-stu-id="eb428-199">To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature.</span></span>  
  
 <span data-ttu-id="eb428-200">Informacji na temat podpisów zmiennych lokalnych w dokumentacji infrastruktury języka wspólnego (CLI), szczególnie "partycji II: metadane definicji i semantyki".</span><span class="sxs-lookup"><span data-stu-id="eb428-200">For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="eb428-201">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# i wspólne normy infrastruktury języka](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie sieci Web międzynarodowej Ecma.</span><span class="sxs-lookup"><span data-stu-id="eb428-201">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLocalSignature">
      <MemberSignature Language="C#" Value="public void SetLocalSignature (byte* localSignature, int signatureSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLocalSignature(unsigned int8* localSignature, int32 signatureSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetLocalSignature(System::Byte* localSignature, int signatureSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localSignature" Type="System.Byte*" />
        <Parameter Name="signatureSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="localSignature">
          <span data-ttu-id="eb428-202">Tablica zawierająca układ zmiennych lokalnych skojarzonych z nim <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-202">An array that contains the layout of local variables for the associated <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          </span>
        </param>
        <param name="signatureSize">
          <span data-ttu-id="eb428-203">Liczba bajtów w podpisie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-203">The number of bytes in the signature.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb428-204">Ustawia lokalnej zmiennej podpisie, który opisano układ zmiennych lokalnych skojarzone metody dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-204">Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb428-205">Podpisu lokalnego zmiennej opisano układ metody zmiennych lokalnych.</span><span class="sxs-lookup"><span data-stu-id="eb428-205">The local variable signature describes the layout of a method's local variables.</span></span> <span data-ttu-id="eb428-206">Aby uprościć konstruowania zmiennej podpisu lokalnego, należy użyć `static` (`Shared` w języku Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType> metodę, aby pobrać <xref:System.Reflection.Emit.SignatureHelper> dla podpisu lokalnego.</span><span class="sxs-lookup"><span data-stu-id="eb428-206">To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature.</span></span>  
  
 <span data-ttu-id="eb428-207">Informacji na temat podpisów zmiennych lokalnych w dokumentacji infrastruktury języka wspólnego (CLI), szczególnie "partycji II: metadane definicji i semantyki".</span><span class="sxs-lookup"><span data-stu-id="eb428-207">For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="eb428-208">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# i wspólne normy infrastruktury języka](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie sieci Web międzynarodowej Ecma.</span><span class="sxs-lookup"><span data-stu-id="eb428-208">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="eb428-209">
            <paramref name="localSignature" /> jest <see langword="null" /> i <paramref name="signatureSize" /> jest większa niż 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-209">
              <paramref name="localSignature" /> is <see langword="null" /> and <paramref name="signatureSize" /> is greater than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="eb428-210">
            <paramref name="signatureSize" /> jest mniejsza niż 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-210">
              <paramref name="signatureSize" /> is less than 0.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="eb428-211">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-211">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="eb428-212">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb428-212">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>