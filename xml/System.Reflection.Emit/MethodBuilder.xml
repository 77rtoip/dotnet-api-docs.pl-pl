<Type Name="MethodBuilder" FullName="System.Reflection.Emit.MethodBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ebceee869ad6a418f6de58e6847202008971a7cd" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36643102" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class MethodBuilder : System.Reflection.MethodInfo, System.Runtime.InteropServices._MethodBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit MethodBuilder extends System.Reflection.MethodInfo implements class System.Runtime.InteropServices._MethodBuilder" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.MethodBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MethodBuilder&#xA;Inherits MethodInfo&#xA;Implements _MethodBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class MethodBuilder sealed : System::Reflection::MethodInfo, System::Runtime::InteropServices::_MethodBuilder" />
  <TypeSignature Language="F#" Value="type MethodBuilder = class&#xA;    inherit MethodInfo&#xA;    interface _MethodBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MethodInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._MethodBuilder</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._MethodBuilder))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="70b32-101">Definiuje i reprezentuje dynamiczne klasy — metoda (lub konstruktora).</span>
      <span class="sxs-lookup">
        <span data-stu-id="70b32-101">Defines and represents a method (or constructor) on a dynamic class.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-102"><xref:System.Reflection.Emit.MethodBuilder> Klasa jest używana do pełni opisano metody w języku pośrednim firmy Microsoft (MSIL) razem nazwy, atrybuty podpisu i metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-102">The <xref:System.Reflection.Emit.MethodBuilder> class is used to fully describe a method in Microsoft intermediate language (MSIL), including the name, attributes, signature, and method body.</span></span> <span data-ttu-id="70b32-103">Jest on używany w połączeniu z <xref:System.Reflection.Emit.TypeBuilder> klasa do tworzenia klas w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="70b32-103">It is used in conjunction with the <xref:System.Reflection.Emit.TypeBuilder> class to create classes at runtime.</span></span>  
  
## <a name="global-methods-and-methods-as-type-members"></a><span data-ttu-id="70b32-104">Metody globalne i metod jako elementy członkowskie typu</span><span class="sxs-lookup"><span data-stu-id="70b32-104">Global methods and methods as type members</span></span>  
 <span data-ttu-id="70b32-105">Można użyć odbicia emisji do definiowania metod globalnych oraz do definiowania metod jako elementy członkowskie typu.</span><span class="sxs-lookup"><span data-stu-id="70b32-105">You can use reflection emit to define global methods and to define methods as type members.</span></span> <span data-ttu-id="70b32-106">Zwraca interfejsów API, które określają metody <xref:System.Reflection.Emit.MethodBuilder> obiektów.</span><span class="sxs-lookup"><span data-stu-id="70b32-106">The APIs that define methods return <xref:System.Reflection.Emit.MethodBuilder> objects.</span></span>  
  
### <a name="global-methods"></a><span data-ttu-id="70b32-107">Metody globalne</span><span class="sxs-lookup"><span data-stu-id="70b32-107">Global methods</span></span>  
 <span data-ttu-id="70b32-108">Metoda globalna jest definiowana za pomocą <xref:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod%2A?displayProperty=nameWithType> metody, która zwraca **MethodBuilder** obiektu.</span><span class="sxs-lookup"><span data-stu-id="70b32-108">A global method is defined by using the <xref:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod%2A?displayProperty=nameWithType> method, which returns a **MethodBuilder** object.</span></span>  
  
 <span data-ttu-id="70b32-109">Metody globalne muszą być statyczne.</span><span class="sxs-lookup"><span data-stu-id="70b32-109">Global methods must be static.</span></span> <span data-ttu-id="70b32-110">Jeśli dynamiczny moduł zawiera metody globalne <xref:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions%2A?displayProperty=nameWithType> metoda musi zostać wywołana przed wprowadzeniem trwałych modułu dynamicznego lub zawierający go zestaw dynamiczny, ponieważ środowisko uruchomieniowe języka wspólnego odłoży naprawienia modułu dynamicznego do wszystkich funkcji globalnych zostały zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="70b32-110">If a dynamic module contains global methods, the <xref:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions%2A?displayProperty=nameWithType> method must be called before persisting the dynamic module or the containing dynamic assembly because the common language runtime postpones fixing up the dynamic module until all global functions have been defined.</span></span>  
  
 <span data-ttu-id="70b32-111">Globalnej metody natywnej jest definiowana za pomocą <xref:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-111">A global native method is defined by using the <xref:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="70b32-112">Wywołanie platformy (PInvoke) nie może być deklarowana metod, abstrakcyjna lub wirtualna.</span><span class="sxs-lookup"><span data-stu-id="70b32-112">Platform invoke (PInvoke) methods must not be declared abstract or virtual.</span></span> <span data-ttu-id="70b32-113">Zestawy środowiska wykonawczego <xref:System.Reflection.MethodAttributes.PinvokeImpl?displayProperty=nameWithType> atrybutu dla platformy wywołania metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-113">The runtime sets the <xref:System.Reflection.MethodAttributes.PinvokeImpl?displayProperty=nameWithType> attribute for a platform invoke method.</span></span>  
  
### <a name="methods-as-members-of-types"></a><span data-ttu-id="70b32-114">Metody jak elementy członkowskie typów</span><span class="sxs-lookup"><span data-stu-id="70b32-114">Methods as members of types</span></span>  
 <span data-ttu-id="70b32-115">Metoda jest zdefiniowana jako element członkowski typu przy użyciu <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> metody, która zwraca <xref:System.Reflection.Emit.MethodBuilder> obiektu.</span><span class="sxs-lookup"><span data-stu-id="70b32-115">A method is defined as a type member by using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> method, which returns a <xref:System.Reflection.Emit.MethodBuilder> object.</span></span>  
  
 <span data-ttu-id="70b32-116"><xref:System.Reflection.Emit.MethodBuilder.DefineParameter%2A> Metoda jest używana do ustawiania atrybutów nazwy i parametru parametru lub wartości zwracanej.</span><span class="sxs-lookup"><span data-stu-id="70b32-116">The <xref:System.Reflection.Emit.MethodBuilder.DefineParameter%2A> method is used to set the name and parameter attributes of a parameter, or of the return value.</span></span> <span data-ttu-id="70b32-117"><xref:System.Reflection.Emit.ParameterBuilder> Obiektu zwróconego przez tę metodę reprezentuje parametr lub wartości zwracanej.</span><span class="sxs-lookup"><span data-stu-id="70b32-117">The <xref:System.Reflection.Emit.ParameterBuilder> object returned by this method represents a parameter or the return value.</span></span> <span data-ttu-id="70b32-118"><xref:System.Reflection.Emit.ParameterBuilder> Obiekt może służyć do konfigurowania przekazywanie, ustaw wartość stała oraz stosowanie atrybutów niestandardowych.</span><span class="sxs-lookup"><span data-stu-id="70b32-118">The <xref:System.Reflection.Emit.ParameterBuilder> object can be used to set the marshaling, to set the constant value, and to apply custom attributes.</span></span>  
  
## <a name="attributes"></a><span data-ttu-id="70b32-119">Atrybuty</span><span class="sxs-lookup"><span data-stu-id="70b32-119">Attributes</span></span>  
 <span data-ttu-id="70b32-120">Elementy członkowskie <xref:System.Reflection.MethodAttributes> wyliczenie zdefiniuj dokładne znak dynamicznej metody:</span><span class="sxs-lookup"><span data-stu-id="70b32-120">Members of the <xref:System.Reflection.MethodAttributes> enumeration define the precise character of a dynamic method:</span></span>  
  
-   <span data-ttu-id="70b32-121">Metody statyczne są określane za pomocą <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType> atrybutu.</span><span class="sxs-lookup"><span data-stu-id="70b32-121">Static methods are specified using the <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType> attribute.</span></span>  
  
-   <span data-ttu-id="70b32-122">Końcowe metodach (metody, których nie można zastąpić) są określane za pomocą <xref:System.Reflection.MethodAttributes.Final?displayProperty=nameWithType> atrybutu.</span><span class="sxs-lookup"><span data-stu-id="70b32-122">Final methods (methods that cannot be overridden) are specified using the <xref:System.Reflection.MethodAttributes.Final?displayProperty=nameWithType> attribute.</span></span>  
  
-   <span data-ttu-id="70b32-123">Metody wirtualne są określane za pomocą <xref:System.Reflection.MethodAttributes.Virtual?displayProperty=nameWithType> atrybutu.</span><span class="sxs-lookup"><span data-stu-id="70b32-123">Virtual methods are specified using the <xref:System.Reflection.MethodAttributes.Virtual?displayProperty=nameWithType> attribute.</span></span>  
  
-   <span data-ttu-id="70b32-124">Metody abstrakcyjne są określane za pomocą <xref:System.Reflection.MethodAttributes.Abstract?displayProperty=nameWithType> atrybutu.</span><span class="sxs-lookup"><span data-stu-id="70b32-124">Abstract methods are specified using the <xref:System.Reflection.MethodAttributes.Abstract?displayProperty=nameWithType> attribute.</span></span>  
  
-   <span data-ttu-id="70b32-125">Kilka atrybutów określają metodę widoczności.</span><span class="sxs-lookup"><span data-stu-id="70b32-125">Several attributes determine method visibility.</span></span> <span data-ttu-id="70b32-126">Zobacz opis <xref:System.Reflection.MethodAttributes> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="70b32-126">See the description of the <xref:System.Reflection.MethodAttributes> enumeration.</span></span>  
  
-   <span data-ttu-id="70b32-127">Należy ustawić metod, które implementują przeciążone operatory <xref:System.Reflection.MethodAttributes.SpecialName?displayProperty=nameWithType> atrybutu.</span><span class="sxs-lookup"><span data-stu-id="70b32-127">Methods that implement overloaded operators must set the <xref:System.Reflection.MethodAttributes.SpecialName?displayProperty=nameWithType> attribute.</span></span>  
  
-   <span data-ttu-id="70b32-128">Należy ustawić finalizatory <xref:System.Reflection.MethodAttributes.SpecialName?displayProperty=nameWithType> atrybutu.</span><span class="sxs-lookup"><span data-stu-id="70b32-128">Finalizers must set the <xref:System.Reflection.MethodAttributes.SpecialName?displayProperty=nameWithType> attribute.</span></span>  
  
## <a name="known-issues"></a><span data-ttu-id="70b32-129">Znane problemy</span><span class="sxs-lookup"><span data-stu-id="70b32-129">Known Issues</span></span>  
  
-   <span data-ttu-id="70b32-130">Mimo że <xref:System.Reflection.Emit.MethodBuilder> jest pochodną <xref:System.Reflection.MethodInfo>, niektóre metody abstrakcyjne zdefiniowane w <xref:System.Reflection.MethodInfo> klasy nie są w pełni zaimplementowane w <xref:System.Reflection.Emit.MethodBuilder>.</span><span class="sxs-lookup"><span data-stu-id="70b32-130">Although <xref:System.Reflection.Emit.MethodBuilder> is derived from <xref:System.Reflection.MethodInfo>, some of the abstract methods defined in the <xref:System.Reflection.MethodInfo> class are not fully implemented in <xref:System.Reflection.Emit.MethodBuilder>.</span></span> <span data-ttu-id="70b32-131">Te <xref:System.Reflection.Emit.MethodBuilder> throw metody <xref:System.NotSupportedException>.</span><span class="sxs-lookup"><span data-stu-id="70b32-131">These <xref:System.Reflection.Emit.MethodBuilder> methods throw the <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="70b32-132">Na przykład <xref:System.Reflection.Emit.MethodBuilder.Invoke%2A?displayProperty=nameWithType> metoda nie jest w pełni zaimplementowana.</span><span class="sxs-lookup"><span data-stu-id="70b32-132">For example the <xref:System.Reflection.Emit.MethodBuilder.Invoke%2A?displayProperty=nameWithType> method is not fully implemented.</span></span> <span data-ttu-id="70b32-133">Można uwzględnić w tych metod pobierając otaczającego przy użyciu typu <xref:System.Type.GetType%2A?displayProperty=nameWithType> lub <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-133">You can reflect on these methods by retrieving the enclosing type using the <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> methods.</span></span>  
  
-   <span data-ttu-id="70b32-134">Modyfikatory niestandardowe są obsługiwane w programie .NET Framework w wersji 2.0.</span><span class="sxs-lookup"><span data-stu-id="70b32-134">Custom modifiers are supported starting with the .NET Framework version 2.0.</span></span> <span data-ttu-id="70b32-135">Nie są obsługiwane we wcześniejszych wersjach.</span><span class="sxs-lookup"><span data-stu-id="70b32-135">They are not supported in earlier versions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70b32-136">W poniższym przykładzie użyto <xref:System.Reflection.Emit.MethodBuilder> klasy można utworzyć metody w ramach typu dynamicznego.</span><span class="sxs-lookup"><span data-stu-id="70b32-136">The following example uses the <xref:System.Reflection.Emit.MethodBuilder> class to create a method within a dynamic type.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.MethodBuilder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.MethodBuilder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.MethodBuilder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MethodBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MethodBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDeclarativeSecurity">
      <MemberSignature Language="C#" Value="public void AddDeclarativeSecurity (System.Security.Permissions.SecurityAction action, System.Security.PermissionSet pset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddDeclarativeSecurity(valuetype System.Security.Permissions.SecurityAction action, class System.Security.PermissionSet pset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddDeclarativeSecurity (action As SecurityAction, pset As PermissionSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddDeclarativeSecurity(System::Security::Permissions::SecurityAction action, System::Security::PermissionSet ^ pset);" />
      <MemberSignature Language="F#" Value="member this.AddDeclarativeSecurity : System.Security.Permissions.SecurityAction * System.Security.PermissionSet -&gt; unit" Usage="methodBuilder.AddDeclarativeSecurity (action, pset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Security.Permissions.SecurityAction" />
        <Parameter Name="pset" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="70b32-137">Akcja zabezpieczeń (żądanie, Assert i tak dalej).</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-137">The security action to be taken (Demand, Assert, and so on).</span>
          </span>
        </param>
        <param name="pset">
          <span data-ttu-id="70b32-138">Zestaw uprawnień, które dotyczą akcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-138">The set of permissions the action applies to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70b32-139">Dodaje zabezpieczenia deklaratywne dla tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-139">Adds declarative security to this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-140"><xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A> może być wywołany kilka razy z każdym wywołaniu określenie akcji zabezpieczeń (takich jak `Demand`, `Assert`, i `Deny`) oraz zestaw uprawnień, które dotyczą akcji.</span><span class="sxs-lookup"><span data-stu-id="70b32-140"><xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A> can be called several times, with each call specifying a security action (such as `Demand`, `Assert`, and `Deny`) and a set of permissions that the action applies to.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="70b32-141">W wersji systemu .NET Framework 1.0, 1.1 i 2.0, zabezpieczenia deklaratywne atrybuty zastosować do metody przy użyciu <xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A> metody są przechowywane w starym formacie XML w metadanych.</span><span class="sxs-lookup"><span data-stu-id="70b32-141">In the .NET Framework versions 1.0, 1.1, and 2.0, the declarative security attributes applied to a method by using the <xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A> method are stored in the old XML metadata format.</span></span> <span data-ttu-id="70b32-142">Zobacz emitowanie deklaratywne atrybuty zabezpieczeń.</span><span class="sxs-lookup"><span data-stu-id="70b32-142">See Emitting Declarative Security Attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70b32-143">Poniższy przykładowy kod przedstawia użycie kontekstowe `AddDeclarativeSecurity` wymagające funkcji wywołującej metodę na nieograniczony uprawnienia.</span><span class="sxs-lookup"><span data-stu-id="70b32-143">The code sample below illustrates the contextual use of `AddDeclarativeSecurity` to require the caller of a method to have unrestricted permissions.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="70b32-144">
            <paramref name="action" /> Jest nieprawidłowy (<see langword="RequestMinimum" />, <see langword="RequestOptional" />, i <see langword="RequestRefuse" /> są nieprawidłowe).</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-144">The <paramref name="action" /> is invalid (<see langword="RequestMinimum" />, <see langword="RequestOptional" />, and <see langword="RequestRefuse" /> are invalid).</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="70b32-145">Typ zawierający został utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-145">The containing type has been created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
          <span data-ttu-id="70b32-146">- lub - zestaw uprawnień <paramref name="pset" /> zawiera akcję, która została dodana wcześniej przez <see cref="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-146">-or-  The permission set <paramref name="pset" /> contains an action that was added earlier by <see cref="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)" />.</span>
          </span>
          <span data-ttu-id="70b32-147">- lub - dla bieżącej metody <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> właściwość jest <see langword="true" />, ale <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> jest właściwość <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-147">-or-  For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="70b32-148">
            <paramref name="pset" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-148">
              <paramref name="pset" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Attributes As MethodAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodAttributes Attributes { System::Reflection::MethodAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.MethodAttributes" Usage="System.Reflection.Emit.MethodBuilder.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="70b32-149">Pobiera atrybuty dla tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-149">Retrieves the attributes for this method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="70b32-150">Tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-150">Read-only.</span>
          </span>
          <span data-ttu-id="70b32-151">Pobiera <see langword="MethodAttributes" /> dla tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-151">Retrieves the <see langword="MethodAttributes" /> for this method.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public override System.Reflection.CallingConventions CallingConvention { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.CallingConventions CallingConvention" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CallingConvention As CallingConventions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::CallingConventions CallingConvention { System::Reflection::CallingConventions get(); };" />
      <MemberSignature Language="F#" Value="member this.CallingConvention : System.Reflection.CallingConventions" Usage="System.Reflection.Emit.MethodBuilder.CallingConvention" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.CallingConventions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="70b32-152">Zwraca konwencja wywołania metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-152">Returns the calling convention of the method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="70b32-153">Tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-153">Read-only.</span>
          </span>
          <span data-ttu-id="70b32-154">Konwencja wywołania metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-154">The calling convention of the method.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsGenericParameters">
      <MemberSignature Language="C#" Value="public override bool ContainsGenericParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsGenericParameters" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ContainsGenericParameters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ContainsGenericParameters { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ContainsGenericParameters : bool" Usage="System.Reflection.Emit.MethodBuilder.ContainsGenericParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="70b32-155">Nie jest obsługiwana dla tego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-155">Not supported for this type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="70b32-156">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-156">Not supported.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-157">A <xref:System.Reflection.Emit.MethodBuilder> zawsze reprezentuje definicję metody rodzajowej i dlatego nie można wywołać.</span><span class="sxs-lookup"><span data-stu-id="70b32-157">A <xref:System.Reflection.Emit.MethodBuilder> always represents a generic method definition, and thus cannot be invoked.</span></span>  
  
 <span data-ttu-id="70b32-158">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType> i <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="70b32-158">For more information, see <xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType> and <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="70b32-159">Informacje o typach ogólny, zobacz <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="70b32-159">For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="70b32-160">Wywoływana metoda nie jest obsługiwana w klasie bazowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-160">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Type.IsGenericType" />
      </Docs>
    </Member>
    <Member MemberName="CreateMethodBody">
      <MemberSignature Language="C#" Value="public void CreateMethodBody (byte[] il, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateMethodBody(unsigned int8[] il, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateMethodBody (il As Byte(), count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateMethodBody(cli::array &lt;System::Byte&gt; ^ il, int count);" />
      <MemberSignature Language="F#" Value="member this.CreateMethodBody : byte[] * int -&gt; unit" Usage="methodBuilder.CreateMethodBody (il, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="il" Type="System.Byte[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="il">
          <span data-ttu-id="70b32-161">Tablica zawierająca prawidłowy instrukcje MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-161">An array containing valid MSIL instructions.</span>
          </span>
          <span data-ttu-id="70b32-162">Jeśli ten parametr ma <see langword="null" />, treści metody jest wyczyszczone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-162">If this parameter is <see langword="null" />, the method's body is cleared.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="70b32-163">Liczba bajtów prawidłowy w tablicy MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-163">The number of valid bytes in the MSIL array.</span>
          </span>
          <span data-ttu-id="70b32-164">Ta wartość jest ignorowana, jeśli jest MSIL <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-164">This value is ignored if MSIL is <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70b32-165">Tworzy treści metody, przy użyciu tablicy bajtów dostarczony instrukcji języka pośredniego (MSIL) firmy Microsoft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-165">Creates the body of the method using a supplied byte array of Microsoft intermediate language (MSIL) instructions.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-166">Ta metoda tworzy treści metody z `il`, tablica zawierająca instrukcje MSIL jako kody operacji.</span><span class="sxs-lookup"><span data-stu-id="70b32-166">This method creates the method's body from `il`, an array containing MSIL instructions as opcodes.</span></span> <span data-ttu-id="70b32-167">Liczba bajtów prawidłowy MSIL wynosi liczba.</span><span class="sxs-lookup"><span data-stu-id="70b32-167">The number of bytes of valid MSIL is given by count.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="70b32-168">To jest aktualnie nie pełni obsługiwany.</span><span class="sxs-lookup"><span data-stu-id="70b32-168">This is currently not fully supported.</span></span> <span data-ttu-id="70b32-169">Użytkownik nie może dostarczyć lokalizację tokenu naprawy i programy obsługi wyjątków.</span><span class="sxs-lookup"><span data-stu-id="70b32-169">The user cannot supply the location of token fix ups and exception handlers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70b32-170">W przykładzie poniżej prosta metoda, która dodaje dwie liczb całkowitych jest generowany przez kod operacji przy użyciu `CreateMethodBody`.</span><span class="sxs-lookup"><span data-stu-id="70b32-170">In the example provided below, a simple method that adds two integers is generated via opcode using `CreateMethodBody`.</span></span>  
  
 [!code-cpp[System.Refelction.Emit.MethodBuilder.CreateMethodBody Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Refelction.Emit.MethodBuilder.CreateMethodBody Example/CPP/source.cpp#1)]
 [!code-csharp[System.Refelction.Emit.MethodBuilder.CreateMethodBody Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Refelction.Emit.MethodBuilder.CreateMethodBody Example/CS/source.cs#1)]
 [!code-vb[System.Refelction.Emit.MethodBuilder.CreateMethodBody Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Refelction.Emit.MethodBuilder.CreateMethodBody Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="70b32-171">
            <paramref name="count" /> Nie jest w zasięgu indeksy tablicy dostarczony instrukcja MSIL i <paramref name="il" /> nie jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-171">The <paramref name="count" /> is not within the range of indexes of the supplied MSIL instruction array and <paramref name="il" /> is not <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="70b32-172">Typ zawierający został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-172">The containing type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
          <span data-ttu-id="70b32-173">Ta metoda została wywołana wcześniej w tym - lub - <see langword="MethodBuilder" /> z <paramref name="il" /> argument, który nie był <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-173">-or-  This method was called previously on this <see langword="MethodBuilder" /> with an <paramref name="il" /> argument that was not <see langword="null" />.</span>
          </span>
          <span data-ttu-id="70b32-174">- lub - dla bieżącej metody <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> właściwość jest <see langword="true" />, ale <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> jest właściwość <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-174">-or-  For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Reflection.Emit.MethodBuilder.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="70b32-175">Zwraca typ, który deklaruje tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-175">Returns the type that declares this method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="70b32-176">Tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-176">Read-only.</span>
          </span>
          <span data-ttu-id="70b32-177">Typ, który deklaruje tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-177">The type that declares this method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="70b32-178">Poniższy kod przedstawia użycie `Type` właściwości.</span><span class="sxs-lookup"><span data-stu-id="70b32-178">The following code illustrates the use of the `Type` property.</span></span>  
  
 [!code-cpp[MethodBuilderClass_TypeSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBuilderClass_TypeSample/CPP/methodbuilderclass.cpp#1)]
 [!code-csharp[MethodBuilderClass_TypeSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBuilderClass_TypeSample/CS/methodbuilderclass.cs#1)]
 [!code-vb[MethodBuilderClass_TypeSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBuilderClass_TypeSample/VB/methodbuilderclass.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineGenericParameters">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.GenericTypeParameterBuilder[] DefineGenericParameters (params string[] names);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.GenericTypeParameterBuilder[] DefineGenericParameters(string[] names) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineGenericParameters (ParamArray names As String()) As GenericTypeParameterBuilder()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::Emit::GenericTypeParameterBuilder ^&gt; ^ DefineGenericParameters(... cli::array &lt;System::String ^&gt; ^ names);" />
      <MemberSignature Language="F#" Value="member this.DefineGenericParameters : string[] -&gt; System.Reflection.Emit.GenericTypeParameterBuilder[]" Usage="methodBuilder.DefineGenericParameters names" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.GenericTypeParameterBuilder[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="names">
          <span data-ttu-id="70b32-179">Tablica ciągów, które reprezentują nazwy parametrów typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-179">An array of strings that represent the names of the generic type parameters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70b32-180">Ustawia liczbę parametrów typu ogólnego dla bieżącej metody, określa ich nazwy i zwraca tablicę <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> obiektów, które mogą służyć do definiowania ich ograniczenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-180">Sets the number of generic type parameters for the current method, specifies their names, and returns an array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects that can be used to define their constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="70b32-181">Tablica <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> obiekty reprezentujące parametrów typu metody ogólnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-181">An array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects representing the type parameters of the generic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-182">Wywoływanie <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> metody sprawia, że bieżącej metody jest rodzajowy.</span><span class="sxs-lookup"><span data-stu-id="70b32-182">Calling the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method makes the current method generic.</span></span> <span data-ttu-id="70b32-183">Nie istnieje sposób aby cofnąć tę zmianę.</span><span class="sxs-lookup"><span data-stu-id="70b32-183">There is no way to undo this change.</span></span> <span data-ttu-id="70b32-184">Wywołanie tej metody po raz drugi powoduje <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="70b32-184">Calling this method a second time causes an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="70b32-185">Parametry typu ogólnego metody może zostać później pobrana przy użyciu <xref:System.Reflection.Emit.MethodBuilder.GetGenericArguments%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-185">The type parameters of the generic method can be retrieved later by using the <xref:System.Reflection.Emit.MethodBuilder.GetGenericArguments%2A> method.</span></span>  
  
 <span data-ttu-id="70b32-186">Według Konwencji jednej wielkiej litery jest nazwa parametru typu.</span><span class="sxs-lookup"><span data-stu-id="70b32-186">By convention, a type parameter name is a single uppercase letter.</span></span>  
  
 <span data-ttu-id="70b32-187">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType> i <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="70b32-187">For more information, see <xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType> and <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="70b32-188">Informacje o typach ogólny, zobacz <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="70b32-188">For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70b32-189">Poniższy przykład kodu tworzy typu dynamicznego `DemoType`, zawierającą dynamiczna Metoda ogólna `DemoMethod`.</span><span class="sxs-lookup"><span data-stu-id="70b32-189">The following code example creates a dynamic type, `DemoType`, which contains the dynamic generic method `DemoMethod`.</span></span> <span data-ttu-id="70b32-190">Ta metoda ma dwa parametry typu ogólnego, z których jeden jest używany jako parametr, a drugi jako typ zwracany.</span><span class="sxs-lookup"><span data-stu-id="70b32-190">This method has two generic type parameters, one of which is used as a parameter, and the other as the return type.</span></span>  
  
 <span data-ttu-id="70b32-191">Podczas wykonywania kodu zostanie zapisany jako DemoGenericMethod1.dll zestawu dynamicznego, a przy [Ildasm.exe (dezasembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span><span class="sxs-lookup"><span data-stu-id="70b32-191">When the code is executed, the dynamic assembly is saved as DemoGenericMethod1.dll, and can be examined using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="70b32-192">W tym przykładzie kodu generuje treści prosta metoda, która zwraca jedynie odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="70b32-192">This code example generates a simple method body that merely returns a null reference.</span></span> <span data-ttu-id="70b32-193">Na przykład kodu z więcej treści metody pełni rozwinięte, które tworzy i używa typów ogólnych, zobacz [porady: definiowanie metody ogólnej przy emisja odbicia](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-method-with-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="70b32-193">For a code example with a more fully developed method body that creates and uses generic types, see [How to: Define a Generic Method with Reflection Emit](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-method-with-reflection-emit.md).</span></span>  
  
 [!code-cpp[GenericMethodBuilder#1](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#1)]
 [!code-csharp[GenericMethodBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#1)]
 [!code-vb[GenericMethodBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="70b32-194">Parametry typu ogólnego są już zdefiniowane dla tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-194">Generic type parameters have already been defined for this method.</span>
          </span>
          <span data-ttu-id="70b32-195">- lub - metoda została już ukończona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-195">-or-  The method has been completed already.</span>
          </span>
          <span data-ttu-id="70b32-196">- lub - <see cref="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)" /> dla bieżącej metody została wywołana metoda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-196">-or-  The <see cref="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)" /> method has been called for the current method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="70b32-197">
            <paramref name="names" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-197">
              <paramref name="names" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="70b32-198">- lub - element <paramref name="names" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-198">-or-  An element of <paramref name="names" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="70b32-199">
            <paramref name="names" /> jest pusta tablica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-199">
              <paramref name="names" /> is an empty array.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Type.IsGenericType" />
        <altmember cref="Overload:System.Reflection.Emit.TypeBuilder.DefineMethod" />
      </Docs>
    </Member>
    <Member MemberName="DefineParameter">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ParameterBuilder DefineParameter (int position, System.Reflection.ParameterAttributes attributes, string strParamName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ParameterBuilder DefineParameter(int32 position, valuetype System.Reflection.ParameterAttributes attributes, string strParamName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineParameter (position As Integer, attributes As ParameterAttributes, strParamName As String) As ParameterBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ParameterBuilder ^ DefineParameter(int position, System::Reflection::ParameterAttributes attributes, System::String ^ strParamName);" />
      <MemberSignature Language="F#" Value="member this.DefineParameter : int * System.Reflection.ParameterAttributes * string -&gt; System.Reflection.Emit.ParameterBuilder" Usage="methodBuilder.DefineParameter (position, attributes, strParamName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="attributes" Type="System.Reflection.ParameterAttributes" />
        <Parameter Name="strParamName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="position">
          <span data-ttu-id="70b32-200">Pozycja parametru na liście parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-200">The position of the parameter in the parameter list.</span>
          </span>
          <span data-ttu-id="70b32-201">Parametry są indeksowane, począwszy od pierwszego parametru; numer 1 liczba 0 jest zwracana wartość metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-201">Parameters are indexed beginning with the number 1 for the first parameter; the number 0 represents the return value of the method.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="70b32-202">Atrybuty parametru parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-202">The parameter attributes of the parameter.</span>
          </span>
        </param>
        <param name="strParamName">
          <span data-ttu-id="70b32-203">Nazwa parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-203">The name of the parameter.</span>
          </span>
          <span data-ttu-id="70b32-204">Nazwa może być pustym ciągiem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-204">The name can be the null string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70b32-205">Ustawia atrybuty parametrów i nazwę parametru tej metody lub wartości zwracanej tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-205">Sets the parameter attributes and the name of a parameter of this method, or of the return value of this method.</span>
          </span>
          <span data-ttu-id="70b32-206">Zwraca ParameterBuilder, który może służyć do zastosowania atrybutów niestandardowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-206">Returns a ParameterBuilder that can be used to apply custom attributes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="70b32-207">Zwraca <see langword="ParameterBuilder" /> obiekt, który reprezentuje parametr tej metody lub wartości zwracanej przez tę metodę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-207">Returns a <see langword="ParameterBuilder" /> object that represents a parameter of this method or the return value of this method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-208"><xref:System.Reflection.Emit.ParameterBuilder> Obiektu zwracane przez tę metodę można użyć wartości domyślnej dla parametru lub atrybutów niestandardowych.</span><span class="sxs-lookup"><span data-stu-id="70b32-208">The <xref:System.Reflection.Emit.ParameterBuilder> object returned by this method can be used to set the default value for a parameter or to apply custom attributes.</span></span>  
  
 <span data-ttu-id="70b32-209">Parametr numerowanie rozpoczyna się od 1, więc `position` 1 dla pierwszego parametru.</span><span class="sxs-lookup"><span data-stu-id="70b32-209">Parameter numbering begins with 1, so `position` is 1 for the first parameter.</span></span> <span data-ttu-id="70b32-210">Jeśli `position` wynosi zero, ta metoda ma wpływ na wartość zwracaną.</span><span class="sxs-lookup"><span data-stu-id="70b32-210">If `position` is zero, this method affects the return value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="70b32-211">W wersji systemu .NET Framework 1.0 i 1.1, jest zwracany wyjątek, jeśli `position` wynosi zero, więc nie można użyć tej metody można zmodyfikować atrybutów wartości zwracanej w tych wersjach.</span><span class="sxs-lookup"><span data-stu-id="70b32-211">In the .NET Framework versions 1.0 and 1.1, an exception is thrown if `position` is zero, so this method cannot be used to modify attributes of the return value in those versions.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="70b32-212">Metoda nie ma parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-212">The method has no parameters.</span>
          </span>
          <span data-ttu-id="70b32-213">- lub - <paramref name="position" /> jest mniejsza od zera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-213">-or-  <paramref name="position" /> is less than zero.</span>
          </span>
          <span data-ttu-id="70b32-214">- lub - <paramref name="position" /> jest większa niż liczba parametrów metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-214">-or-  <paramref name="position" /> is greater than the number of the method's parameters.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="70b32-215">Typ zawierający został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-215">The containing type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
          <span data-ttu-id="70b32-216">- lub - dla bieżącej metody <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> właściwość jest <see langword="true" />, ale <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> jest właściwość <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-216">-or-  For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="methodBuilder.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="70b32-217">Obiekt do porównania z tym <see langword="MethodBuilder" /> wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-217">The object to compare with this <see langword="MethodBuilder" /> instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70b32-218">Określa, czy dany obiekt jest taki sam jak to wystąpienie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-218">Determines whether the given object is equal to this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="70b32-219">
            <see langword="true" /> Jeśli <paramref name="obj" /> jest wystąpieniem <see langword="MethodBuilder" /> i jest taki sam, jak ten obiekt, a w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-219">
              <see langword="true" /> if <paramref name="obj" /> is an instance of <see langword="MethodBuilder" /> and is equal to this object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-220">Równość jest określana przez mających taką samą nazwę, atrybuty i podpis.</span><span class="sxs-lookup"><span data-stu-id="70b32-220">Equality is determined by having the same name, attributes, and signature.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBaseDefinition">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo GetBaseDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo GetBaseDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetBaseDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBaseDefinition () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodInfo ^ GetBaseDefinition();" />
      <MemberSignature Language="F#" Value="override this.GetBaseDefinition : unit -&gt; System.Reflection.MethodInfo" Usage="methodBuilder.GetBaseDefinition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="70b32-221">Zwróć Podstawowa implementacja metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-221">Return the base implementation for a method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="70b32-222">Podstawowa implementacja tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-222">The base implementation of this method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-223">To zawsze zwraca bieżącą `MethodBuilder` obiektu.</span><span class="sxs-lookup"><span data-stu-id="70b32-223">This always returns the current `MethodBuilder` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="70b32-224">Zwraca atrybuty niestandardowe zdefiniowane dla tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-224">Returns the custom attributes defined for this method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : bool -&gt; obj[]" Usage="methodBuilder.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="70b32-225">Określa, czy przeszukać łańcuch dziedziczenia tego elementu członkowskiego w celu znalezienia atrybutów niestandardowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-225">Specifies whether to search this member's inheritance chain to find the custom attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70b32-226">Zwraca atrybuty niestandardowe zdefiniowane dla tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-226">Returns all the custom attributes defined for this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="70b32-227">Zwraca tablicę obiektów reprezentującą wszystkie atrybuty niestandardowe tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-227">Returns an array of objects representing all the custom attributes of this method.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="70b32-228">Ta metoda nie jest obecnie obsługiwana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-228">This method is not currently supported.</span>
          </span>
          <span data-ttu-id="70b32-229">Pobrać za pomocą metody <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> i Wywołaj <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> w zwróconym <see cref="T:System.Reflection.MethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-229">Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> on the returned <see cref="T:System.Reflection.MethodInfo" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : Type * bool -&gt; obj[]" Usage="methodBuilder.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="70b32-230">Typ atrybutu niestandardowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-230">The custom attribute type.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="70b32-231">Określa, czy przeszukać łańcuch dziedziczenia tego elementu członkowskiego w celu znalezienia atrybutów niestandardowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-231">Specifies whether to search this member's inheritance chain to find the custom attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70b32-232">Zwraca atrybuty niestandardowe określone przez danego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-232">Returns the custom attributes identified by the given type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="70b32-233">Zwraca tablicę obiektów reprezentujących atrybuty tej metody, które są typu <paramref name="attributeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-233">Returns an array of objects representing the attributes of this method that are of type <paramref name="attributeType" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="70b32-234">Ta metoda nie jest obecnie obsługiwana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-234">This method is not currently supported.</span>
          </span>
          <span data-ttu-id="70b32-235">Pobrać za pomocą metody <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> i Wywołaj <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> w zwróconym <see cref="T:System.Reflection.MethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-235">Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> on the returned <see cref="T:System.Reflection.MethodInfo" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetGenericArguments">
      <MemberSignature Language="C#" Value="public override Type[] GetGenericArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetGenericArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetGenericArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGenericArguments () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetGenericArguments();" />
      <MemberSignature Language="F#" Value="override this.GetGenericArguments : unit -&gt; Type[]" Usage="methodBuilder.GetGenericArguments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="70b32-236">Zwraca tablicę <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> obiektów, które reprezentują parametry typu metody, jeśli jest ona typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-236">Returns an array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects that represent the type parameters of the method, if it is generic.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="70b32-237">Tablica <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> obiekty reprezentujące parametrów typu, jeśli metody jest rodzajowy, lub <see langword="null" /> Jeśli metoda nie jest rodzajowa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-237">An array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects representing the type parameters, if the method is generic, or <see langword="null" /> if the method is not generic.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-238">Parametry typu metody ogólnej również są zwracane przez <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> metodę, która służy do definiowania ich.</span><span class="sxs-lookup"><span data-stu-id="70b32-238">The type parameters of a generic method also are returned by the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method that is used to define them.</span></span>  
  
 <span data-ttu-id="70b32-239">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType> i <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="70b32-239">For more information, see <xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType> and <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="70b32-240">Informacje o typach ogólny, zobacz <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="70b32-240">For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Type.IsGenericType" />
      </Docs>
    </Member>
    <Member MemberName="GetGenericMethodDefinition">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo GetGenericMethodDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo GetGenericMethodDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGenericMethodDefinition () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodInfo ^ GetGenericMethodDefinition();" />
      <MemberSignature Language="F#" Value="override this.GetGenericMethodDefinition : unit -&gt; System.Reflection.MethodInfo" Usage="methodBuilder.GetGenericMethodDefinition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="70b32-241">Zwraca tę metodę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-241">Returns this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="70b32-242">Bieżące wystąpienie klasy <see cref="T:System.Reflection.Emit.MethodBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-242">The current instance of <see cref="T:System.Reflection.Emit.MethodBuilder" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-243">A <xref:System.Reflection.Emit.MethodBuilder> nie może służyć do bezpośrednio Emituj skonstruowane metody rodzajowej.</span><span class="sxs-lookup"><span data-stu-id="70b32-243">A <xref:System.Reflection.Emit.MethodBuilder> cannot be used to emit a constructed generic method directly.</span></span> <span data-ttu-id="70b32-244">Metoda emitowany jest ogólną definicją metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-244">The emitted method is a generic method definition.</span></span>  
  
 <span data-ttu-id="70b32-245">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType> i <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="70b32-245">For more information, see <xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType> and <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="70b32-246">Informacje o typach ogólny, zobacz <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="70b32-246">For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="70b32-247">Bieżąca metoda nie jest rodzajowa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-247">The current method is not generic.</span>
          </span>
          <span data-ttu-id="70b32-248">Oznacza to <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> zwraca właściwość <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-248">That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property returns <see langword="false" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Type.IsGenericType" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="methodBuilder.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="70b32-249">Pobiera wartość skrótu dla tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-249">Gets the hash code for this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="70b32-250">Wartość skrótu dla tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-250">The hash code for this method.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetILGenerator">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="70b32-251">Zwraca <see langword="ILGenerator" /> dla tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-251">Returns an <see langword="ILGenerator" /> for this method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetILGenerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator () As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator();" />
      <MemberSignature Language="F#" Value="member this.GetILGenerator : unit -&gt; System.Reflection.Emit.ILGenerator" Usage="methodBuilder.GetILGenerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="70b32-252">Zwraca <see langword="ILGenerator" /> dla tej metody za pomocą domyślny język pośredni firmy Microsoft (MSIL) strumienia rozmiar 64 bajtów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-252">Returns an <see langword="ILGenerator" /> for this method with a default Microsoft intermediate language (MSIL) stream size of 64 bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="70b32-253">Zwraca <see langword="ILGenerator" /> obiektu dla tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-253">Returns an <see langword="ILGenerator" /> object for this method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="70b32-254">Poniższy przykład kodu pokazuje użycie kontekstowe `GetILGenerator` metody, tworzenie i emisji dynamicznego zestawu, który oblicza iloczyn dwóch punktów w przestrzeni 3D.</span><span class="sxs-lookup"><span data-stu-id="70b32-254">The code sample below demonstrates the contextual usage of the `GetILGenerator` method, creating and emitting a dynamic assembly that will calculate the dot product of two points in 3D space.</span></span>  
  
 [!code-cpp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="70b32-255">Metoda nie powinna mieć treści, ponieważ jego <see cref="T:System.Reflection.MethodAttributes" /> lub <see cref="T:System.Reflection.MethodImplAttributes" /> flagi, na przykład, ponieważ ma ona <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /> flagi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-255">The method should not have a body because of its <see cref="T:System.Reflection.MethodAttributes" /> or <see cref="T:System.Reflection.MethodImplAttributes" /> flags, for example because it has the <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /> flag.</span>
          </span>
          <span data-ttu-id="70b32-256">- lub - metoda jest metodą podstawową, ale nie definicję metody rodzajowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-256">-or-  The method is a generic method, but not a generic method definition.</span>
          </span>
          <span data-ttu-id="70b32-257">Oznacza to <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> właściwość jest <see langword="true" />, ale <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> jest właściwość <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-257">That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator (int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator(int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator (size As Integer) As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator(int size);" />
      <MemberSignature Language="F#" Value="member this.GetILGenerator : int -&gt; System.Reflection.Emit.ILGenerator" Usage="methodBuilder.GetILGenerator size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="size">
          <span data-ttu-id="70b32-258">Rozmiar strumienia MSIL, w bajtach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-258">The size of the MSIL stream, in bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70b32-259">Zwraca <see langword="ILGenerator" /> dla tej metody za pomocą określonego języka pośredniego firmy Microsoft (MSIL) strumienia rozmiar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-259">Returns an <see langword="ILGenerator" /> for this method with the specified Microsoft intermediate language (MSIL) stream size.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="70b32-260">Zwraca <see langword="ILGenerator" /> obiektu dla tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-260">Returns an <see langword="ILGenerator" /> object for this method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="70b32-261">Poniższy przykład kodu pokazuje użycie kontekstowe `GetILGenerator` metody, tworzenie i emisji dynamicznego zestawu, który oblicza iloczyn dwóch punktów w przestrzeni 3D.</span><span class="sxs-lookup"><span data-stu-id="70b32-261">The code sample below demonstrates the contextual usage of the `GetILGenerator` method, creating and emitting a dynamic assembly that will calculate the dot product of two points in 3D space.</span></span>  
  
 [!code-cpp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="70b32-262">Metoda nie powinna mieć treści, ponieważ jego <see cref="T:System.Reflection.MethodAttributes" /> lub <see cref="T:System.Reflection.MethodImplAttributes" /> flagi, na przykład, ponieważ ma ona <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /> flagi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-262">The method should not have a body because of its <see cref="T:System.Reflection.MethodAttributes" /> or <see cref="T:System.Reflection.MethodImplAttributes" /> flags, for example because it has the <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /> flag.</span>
          </span>
          <span data-ttu-id="70b32-263">- lub - metoda jest metodą podstawową, ale nie definicję metody rodzajowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-263">-or-  The method is a generic method, but not a generic method definition.</span>
          </span>
          <span data-ttu-id="70b32-264">Oznacza to <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> właściwość jest <see langword="true" />, ale <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> jest właściwość <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-264">That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Reflection.MethodImplAttributes GetMethodImplementationFlags() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMethodImplementationFlags () As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodImplAttributes GetMethodImplementationFlags();" />
      <MemberSignature Language="F#" Value="override this.GetMethodImplementationFlags : unit -&gt; System.Reflection.MethodImplAttributes" Usage="methodBuilder.GetMethodImplementationFlags " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="70b32-265">Zwraca flagi implementacji metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-265">Returns the implementation flags for the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="70b32-266">Zwraca flagi implementacji metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-266">Returns the implementation flags for the method.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModule">
      <MemberSignature Language="C#" Value="public System.Reflection.Module GetModule ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Module GetModule() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetModule" />
      <MemberSignature Language="VB.NET" Value="Public Function GetModule () As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Module ^ GetModule();" />
      <MemberSignature Language="F#" Value="member this.GetModule : unit -&gt; System.Reflection.Module" Usage="methodBuilder.GetModule " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="70b32-267">Zwraca odwołanie do modułu, która zawiera tę metodę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-267">Returns a reference to the module that contains this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="70b32-268">Zwraca odwołanie do modułu, która zawiera tę metodę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-268">Returns a reference to the module that contains this method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="70b32-269">Poniższy przykładowy kod przedstawia użycie `GetModule` metody do pobierania informacji o module generowane dynamicznie.</span><span class="sxs-lookup"><span data-stu-id="70b32-269">The sample code below illustrates the usage of the `GetModule` method to retrieve information about a dynamically-generated module.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.MethodBuilder.GetModule#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetModule/CPP/source3.cpp#1)]
 [!code-csharp[System.Reflection.Emit.MethodBuilder.GetModule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetModule/CS/source3.cs#1)]
 [!code-vb[System.Reflection.Emit.MethodBuilder.GetModule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetModule/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameters">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo[] GetParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ParameterInfo[] GetParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetParameters () As ParameterInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::ParameterInfo ^&gt; ^ GetParameters();" />
      <MemberSignature Language="F#" Value="override this.GetParameters : unit -&gt; System.Reflection.ParameterInfo[]" Usage="methodBuilder.GetParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="70b32-270">Zwraca parametry tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-270">Returns the parameters of this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="70b32-271">Tablica <see langword="ParameterInfo" /> obiektów, które reprezentują parametry metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-271">An array of <see langword="ParameterInfo" /> objects that represent the parameters of the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="70b32-272">Poniższy przykładowy kod przedstawia użycie `GetParameters` do wykrywania informacji na temat parametrów przekazanych do metody generowane dynamicznie.</span><span class="sxs-lookup"><span data-stu-id="70b32-272">The code sample below illustrates the use of `GetParameters` to discover information on the parameters passed to a dynamically-generated method.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.MethodBuilder.GetParameters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetParameters Example/CPP/source4.cpp#1)]
 [!code-csharp[System.Reflection.Emit.MethodBuilder.GetParameters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetParameters Example/CS/source4.cs#1)]
 [!code-vb[System.Reflection.Emit.MethodBuilder.GetParameters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetParameters Example/VB/source4.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="70b32-273">Ta metoda nie jest obecnie obsługiwana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-273">This method is not currently supported.</span>
          </span>
          <span data-ttu-id="70b32-274">Pobrać za pomocą metody <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> i Wywołaj <see langword="GetParameters" /> w zwróconym <see cref="T:System.Reflection.MethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-274">Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call <see langword="GetParameters" /> on the returned <see cref="T:System.Reflection.MethodInfo" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetToken">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodToken GetToken ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.Emit.MethodToken GetToken() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetToken" />
      <MemberSignature Language="VB.NET" Value="Public Function GetToken () As MethodToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodToken GetToken();" />
      <MemberSignature Language="F#" Value="member this.GetToken : unit -&gt; System.Reflection.Emit.MethodToken" Usage="methodBuilder.GetToken " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodToken</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="70b32-275">Zwraca <see langword="MethodToken" /> reprezentujący tokenu dla tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-275">Returns the <see langword="MethodToken" /> that represents the token for this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="70b32-276">Zwraca <see langword="MethodToken" /> tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-276">Returns the <see langword="MethodToken" /> of this method.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitLocals">
      <MemberSignature Language="C#" Value="public bool InitLocals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InitLocals" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.InitLocals" />
      <MemberSignature Language="VB.NET" Value="Public Property InitLocals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InitLocals { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.InitLocals : bool with get, set" Usage="System.Reflection.Emit.MethodBuilder.InitLocals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="70b32-277">Pobiera lub ustawia wartość logiczna określająca, czy zero zainicjować zmienne lokalne w tej metodzie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-277">Gets or sets a Boolean value that specifies whether the local variables in this method are zero initialized.</span>
          </span>
          <span data-ttu-id="70b32-278">Wartość domyślna tej właściwości to <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-278">The default value of this property is <see langword="true" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="70b32-279">
            <see langword="true" /> Jeśli zmiennych lokalnych w ramach tej metody powinna wynosić zero zainicjowana; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-279">
              <see langword="true" /> if the local variables in this method should be zero initialized; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-280">Jeśli ta właściwość jest ustawiona na `true`, emitowany MSIL obejmuje inicjowanie zmiennych lokalnych.</span><span class="sxs-lookup"><span data-stu-id="70b32-280">If this property is set to `true`, the emitted MSIL includes initialization of local variables.</span></span> <span data-ttu-id="70b32-281">Jeśli wartość jest ustawiona na `false`, zmienne lokalne nie jest zainicjowany i nie jest wygenerowanego kodu.</span><span class="sxs-lookup"><span data-stu-id="70b32-281">If it is set to `false`, local variables are not initialized and the generated code is unverifiable.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="70b32-282">Dla bieżącej metody <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> właściwość jest <see langword="true" />, ale <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> jest właściwość <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-282">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="70b32-283">(Get lub set.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-283">(Get or set.)</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public override object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object Invoke(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ Invoke(System::Object ^ obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ parameters, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="override this.Invoke : obj * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="methodBuilder.Invoke (obj, invokeAttr, binder, parameters, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="70b32-284">Obiekt do wywołania określonej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-284">The object on which to invoke the specified method.</span>
          </span>
          <span data-ttu-id="70b32-285">Jeśli metoda jest statyczna, ten parametr zostanie zignorowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-285">If the method is static, this parameter is ignored.</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="70b32-286">Musi to być flagę z bitowego <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />i tak dalej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-286">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="70b32-287">Obiekt, który umożliwia powiązanie, koercja typy argumentów, wywołania elementów członkowskich i pobieranie MemberInfo obiektów za pomocą odbicia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-287">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection.</span>
          </span>
          <span data-ttu-id="70b32-288">Jeśli jest <see langword="null" />, używany jest domyślny integrator.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-288">If binder is <see langword="null" />, the default binder is used.</span>
          </span>
          <span data-ttu-id="70b32-289">Aby uzyskać więcej informacji, zobacz <see cref="T:System.Reflection.Binder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-289">For more details, see <see cref="T:System.Reflection.Binder" />.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="70b32-290">Lista argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-290">An argument list.</span>
          </span>
          <span data-ttu-id="70b32-291">To jest tablica argumentów, których liczba, kolejność i typ jako parametry metody do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-291">This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked.</span>
          </span>
          <span data-ttu-id="70b32-292">Jeśli nie ma żadnych parametrów powinna to być <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-292">If there are no parameters this should be <see langword="null" />.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="70b32-293">Wystąpienie <see cref="T:System.Globalization.CultureInfo" /> używane do sterowania koercja typów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-293">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types.</span>
          </span>
          <span data-ttu-id="70b32-294">Jeśli jest to wartość null, <see cref="T:System.Globalization.CultureInfo" /> służy bieżącego wątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-294">If this is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span>
          </span>
          <span data-ttu-id="70b32-295">(Należy pamiętać, że jest to konieczne, na przykład konwertowanie <see cref="T:System.String" /> reprezentujący 1000 do <see cref="T:System.Double" /> wartości, ponieważ 1000 jest inaczej reprezentowany przez innych kultur.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-295">(Note that this is necessary to, for example, convert a <see cref="T:System.String" /> that represents 1000 to a <see cref="T:System.Double" /> value, since 1000 is represented differently by different cultures.)</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70b32-296">Dynamicznie wywołuje metodę odzwierciedlone przez to wystąpienie dla danego obiektu, przekazywanie wraz z określonymi parametrami, a w obszarze ograniczenia dany obiekt wiążący.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-296">Dynamically invokes the method reflected by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="70b32-297">Zwraca obiekt zawierający wartość zwracaną wywoływanej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-297">Returns an object containing the return value of the invoked method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-298">Jeśli metoda jest statyczna, `obj` parametru jest ignorowana.</span><span class="sxs-lookup"><span data-stu-id="70b32-298">If the method is static, the `obj` parameter is ignored.</span></span> <span data-ttu-id="70b32-299">Dla metod niestatycznych `obj` powinien być wystąpienia klasy, która dziedziczy lub deklaruje metody i musi być taki sam typ jak tej klasy.</span><span class="sxs-lookup"><span data-stu-id="70b32-299">For non-static methods, `obj` should be an instance of a class that inherits or declares the method and must be the same type as this class.</span></span> <span data-ttu-id="70b32-300">Jeśli metoda nie ma parametrów, wartość `parameters` powinien być `null`.</span><span class="sxs-lookup"><span data-stu-id="70b32-300">If the method has no parameters, the value of `parameters` should be `null`.</span></span> <span data-ttu-id="70b32-301">W przeciwnym razie liczbę, typ i kolejność elementów w tablicy parametrów powinny być identyczne z liczbę, typ i kolejność parametrów dla metody dostarczanej przez to wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="70b32-301">Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters for the method reflected by this instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="70b32-302">Ograniczenia dostępu są ignorowane w pełni zaufanego kodu.</span><span class="sxs-lookup"><span data-stu-id="70b32-302">Access restrictions are ignored for fully-trusted code.</span></span> <span data-ttu-id="70b32-303">Oznacza to konstruktory prywatne, pola, metody i właściwości są dostępne i wywoływane przy użyciu odbicia, jeśli kod jest w pełni zaufany.</span><span class="sxs-lookup"><span data-stu-id="70b32-303">That is, private constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully-trusted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="70b32-304">Ta metoda nie jest obecnie obsługiwana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-304">This method is not currently supported.</span>
          </span>
          <span data-ttu-id="70b32-305">Pobrać za pomocą metody <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> i Wywołaj <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> w zwróconym <see cref="T:System.Reflection.MethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-305">Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> on the returned <see cref="T:System.Reflection.MethodInfo" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsConstructedGenericMethod">
      <MemberSignature Language="C#" Value="public override bool IsConstructedGenericMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructedGenericMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.IsConstructedGenericMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsConstructedGenericMethod As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructedGenericMethod { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConstructedGenericMethod : bool" Usage="System.Reflection.Emit.MethodBuilder.IsConstructedGenericMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.IsDefined : Type * bool -&gt; bool" Usage="methodBuilder.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="70b32-306">Typ atrybutu niestandardowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-306">The custom attribute type.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="70b32-307">Określa, czy przeszukać łańcuch dziedziczenia tego elementu członkowskiego w celu znalezienia atrybutów niestandardowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-307">Specifies whether to search this member's inheritance chain to find the custom attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70b32-308">Sprawdza, czy jest definiowany typ określonego atrybutu niestandardowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-308">Checks if the specified custom attribute type is defined.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="70b32-309">
            <see langword="true" /> Jeśli zdefiniowano typ określonego atrybutu niestandardowego; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-309">
              <see langword="true" /> if the specified custom attribute type is defined; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="70b32-310">Ta metoda nie jest obecnie obsługiwana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-310">This method is not currently supported.</span>
          </span>
          <span data-ttu-id="70b32-311">Pobrać za pomocą metody <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> i Wywołaj <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> w zwróconym <see cref="T:System.Reflection.MethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-311">Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> on the returned <see cref="T:System.Reflection.MethodInfo" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsGenericMethod">
      <MemberSignature Language="C#" Value="public override bool IsGenericMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericMethod As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericMethod { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericMethod : bool" Usage="System.Reflection.Emit.MethodBuilder.IsGenericMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="70b32-312">Pobiera wartość wskazującą, czy metoda to metoda rodzajowa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-312">Gets a value indicating whether the method is a generic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="70b32-313">
            <see langword="true" /> Jeśli metody jest rodzajowy; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-313">
              <see langword="true" /> if the method is generic; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-314">Metody jest rodzajowy, jeśli ma ona parametrów typu.</span><span class="sxs-lookup"><span data-stu-id="70b32-314">A method is generic if it has type parameters.</span></span> <span data-ttu-id="70b32-315">Możesz wprowadzić metody rodzajowe przez wywołanie metody <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> metody w celu dodania parametrów typu.</span><span class="sxs-lookup"><span data-stu-id="70b32-315">You can make a method generic by calling the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method to add type parameters.</span></span> <span data-ttu-id="70b32-316">Nie można cofnąć tej zmiany.</span><span class="sxs-lookup"><span data-stu-id="70b32-316">This change cannot be reversed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70b32-317">Poniższy przykład kodu wyświetla stan metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-317">The following code example displays the status of a method.</span></span> <span data-ttu-id="70b32-318">Ten kod jest częścią większego przykładu udostępnionego dla <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-318">This code is part of a larger example provided for the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.</span></span>  
  
 [!code-cpp[GenericMethodBuilder#7](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#7)]
 [!code-csharp[GenericMethodBuilder#7](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#7)]
 [!code-vb[GenericMethodBuilder#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericMethodDefinition">
      <MemberSignature Language="C#" Value="public override bool IsGenericMethodDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericMethodDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericMethodDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericMethodDefinition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericMethodDefinition : bool" Usage="System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="70b32-319">Pobiera wartość wskazującą czy bieżące <see cref="T:System.Reflection.Emit.MethodBuilder" /> obiekt reprezentuje definicję metody rodzajowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-319">Gets a value indicating whether the current <see cref="T:System.Reflection.Emit.MethodBuilder" /> object represents the definition of a generic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="70b32-320">
            <see langword="true" /> Jeśli bieżący <see cref="T:System.Reflection.Emit.MethodBuilder" /> obiekt reprezentuje definicję metody rodzajowej; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-320">
              <see langword="true" /> if the current <see cref="T:System.Reflection.Emit.MethodBuilder" /> object represents the definition of a generic method; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-321">A <xref:System.Reflection.Emit.MethodBuilder> tylko może służyć do tworzenia definicji metody ogólnej; nie można bezpośrednio utworzyć skonstruowane metody rodzajowej.</span><span class="sxs-lookup"><span data-stu-id="70b32-321">A <xref:System.Reflection.Emit.MethodBuilder> can only be used to create generic method definitions; it cannot be used to create a constructed generic method directly.</span></span> <span data-ttu-id="70b32-322">Jednak podklasą <xref:System.Reflection.Emit.MethodBuilder> może reprezentować skonstruowane metody rodzajowej.</span><span class="sxs-lookup"><span data-stu-id="70b32-322">However, a subclass of <xref:System.Reflection.Emit.MethodBuilder> might represent a constructed generic method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70b32-323">Poniższy przykład kodu wyświetla stan metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-323">The following code example displays the status of a method.</span></span> <span data-ttu-id="70b32-324">Ten kod jest częścią większego przykładu udostępnionego dla <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-324">This code is part of a larger example provided for the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.</span></span>  
  
 [!code-cpp[GenericMethodBuilder#7](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#7)]
 [!code-csharp[GenericMethodBuilder#7](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#7)]
 [!code-vb[GenericMethodBuilder#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityCritical : bool" Usage="System.Reflection.Emit.MethodBuilder.IsSecurityCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="70b32-325">Zgłasza wyjątek <see cref="T:System.NotSupportedException" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-325">Throws a <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="70b32-326">Zgłasza wyjątek <see cref="T:System.NotSupportedException" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-326">Throws a <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-327">Aby ustalić, czy metoda w zestawie dynamicznym jest krytyczny dla zabezpieczeń, wykonać typu przez wywołanie metody <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType>, wywołaj <xref:System.Type.GetMethod%2A> metody na typ ukończone i get <xref:System.Reflection.MethodBase.IsSecurityCritical%2A> właściwość powstałe w ten sposób <xref:System.Reflection.MethodInfo>.</span><span class="sxs-lookup"><span data-stu-id="70b32-327">To determine whether a method in a dynamic assembly is security-critical, complete the type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType>, call the <xref:System.Type.GetMethod%2A> method on the completed type, and get the <xref:System.Reflection.MethodBase.IsSecurityCritical%2A> property on the resulting <xref:System.Reflection.MethodInfo>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="70b32-328">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-328">In all cases.</span>
          </span>
          <span data-ttu-id="70b32-329">Ta właściwość nie jest obsługiwana w przypadku zestawów dynamicznych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-329">This property is not supported in dynamic assemblies.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecuritySafeCritical : bool" Usage="System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="70b32-330">Zgłasza wyjątek <see cref="T:System.NotSupportedException" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-330">Throws a <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="70b32-331">Zgłasza wyjątek <see cref="T:System.NotSupportedException" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-331">Throws a <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-332">Aby ustalić, czy metoda w zestawie dynamicznym jest bezpieczny krytyczny dla zabezpieczeń, wykonać typu przez wywołanie metody <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType>, wywołaj <xref:System.Type.GetMethod%2A> metody na typ ukończone i get <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A> właściwość powstałe w ten sposób <xref:System.Reflection.MethodInfo>.</span><span class="sxs-lookup"><span data-stu-id="70b32-332">To determine whether a method in a dynamic assembly is security-safe-critical, complete the type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType>, call the <xref:System.Type.GetMethod%2A> method on the completed type, and get the <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A> property on the resulting <xref:System.Reflection.MethodInfo>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="70b32-333">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-333">In all cases.</span>
          </span>
          <span data-ttu-id="70b32-334">Ta właściwość nie jest obsługiwana w przypadku zestawów dynamicznych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-334">This property is not supported in dynamic assemblies.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public override bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityTransparent : bool" Usage="System.Reflection.Emit.MethodBuilder.IsSecurityTransparent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="70b32-335">Zgłasza wyjątek <see cref="T:System.NotSupportedException" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-335">Throws a <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="70b32-336">Zgłasza wyjątek <see cref="T:System.NotSupportedException" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-336">Throws a <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-337">Aby ustalić, czy metoda w zestawie dynamicznym jest przezroczystym poziomie bezpieczeństwa, należy wykonać typu przez wywołanie metody <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType>, wywołaj <xref:System.Type.GetMethod%2A> metody na typ ukończone i get <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> właściwość powstałe w ten sposób <xref:System.Reflection.MethodInfo>.</span><span class="sxs-lookup"><span data-stu-id="70b32-337">To determine whether a method in a dynamic assembly is security-transparent, complete the type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType>, call the <xref:System.Type.GetMethod%2A> method on the completed type, and get the <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> property on the resulting <xref:System.Reflection.MethodInfo>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="70b32-338">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-338">In all cases.</span>
          </span>
          <span data-ttu-id="70b32-339">Ta właściwość nie jest obsługiwana w przypadku zestawów dynamicznych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-339">This property is not supported in dynamic assemblies.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MakeGenericMethod">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo MakeGenericMethod (params Type[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo MakeGenericMethod(class System.Type[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeGenericMethod (ParamArray typeArguments As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodInfo ^ MakeGenericMethod(... cli::array &lt;Type ^&gt; ^ typeArguments);" />
      <MemberSignature Language="F#" Value="override this.MakeGenericMethod : Type[] -&gt; System.Reflection.MethodInfo" Usage="methodBuilder.MakeGenericMethod typeArguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArguments" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArguments">
          <span data-ttu-id="70b32-340">Tablica <see cref="T:System.Type" /> obiektów, które reprezentują argumentów typu dla metody ogólnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-340">An array of <see cref="T:System.Type" /> objects that represent the type arguments for the generic method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70b32-341">Zwraca utworzone na podstawie bieżącej definicji metody ogólnej przy użyciu argumentów typu ogólnego określonego metody rodzajowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-341">Returns a generic method constructed from the current generic method definition using the specified generic type arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="70b32-342">A <see cref="T:System.Reflection.MethodInfo" /> reprezentujący Metoda ogólna utworzone na podstawie bieżącej definicji metody ogólnej przy użyciu argumentów określonego typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-342">A <see cref="T:System.Reflection.MethodInfo" /> representing the generic method constructed from the current generic method definition using the specified generic type arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-343">Gdy są emitowanie kodu dynamicznych, konieczne może być Emituj wywołanie do metody utworzone na podstawie definicję metody rodzajowej reprezentowany przez <xref:System.Reflection.Emit.MethodBuilder>, przed zakończeniem typu otaczającego.</span><span class="sxs-lookup"><span data-stu-id="70b32-343">When you are emitting dynamic code, you might need to emit a call to a method constructed from the generic method definition represented by a <xref:System.Reflection.Emit.MethodBuilder>, before the enclosing type has been completed.</span></span> <span data-ttu-id="70b32-344">Można użyć <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> metodę w celu utworzenia <xref:System.Reflection.MethodInfo> dla takich skonstruowane — metoda i użyj <xref:System.Reflection.MethodInfo> w wywołaniu emitowany.</span><span class="sxs-lookup"><span data-stu-id="70b32-344">You can use the <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> method to create a <xref:System.Reflection.MethodInfo> for such a constructed method, and use the <xref:System.Reflection.MethodInfo> in the emitted call.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70b32-345">Poniższy przykład kodu tworzy skonstruowane — metoda z niekompletne ogólną definicją metody w niekompletnego typu.</span><span class="sxs-lookup"><span data-stu-id="70b32-345">The following code example creates a constructed method from an incomplete generic method definition in an incomplete type.</span></span>  
  
 <span data-ttu-id="70b32-346">Przykład tworzy modułu i zestawu przejściowego z jednego typu, dodaje metodę `M`i powoduje, że metoda ogólnego przez dodawanie parametru T typu przy użyciu <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-346">The example creates a transient assembly and module with a single type, adds a method `M`, and makes the method generic by adding a type parameter T using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.</span></span> <span data-ttu-id="70b32-347">Parametr typu jest używany jako typ parametru metody, a także jako jej typu zwracanego.</span><span class="sxs-lookup"><span data-stu-id="70b32-347">The type parameter is used as the type of the method's parameter, and also as its return type.</span></span> <span data-ttu-id="70b32-348">Definicja metody ogólnej nie zostanie podany, treści, a typ otaczający nie został zakończony.</span><span class="sxs-lookup"><span data-stu-id="70b32-348">The generic method definition is not given a body, and the enclosing type is not completed.</span></span> <span data-ttu-id="70b32-349"><xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> Metody jest następnie umożliwia skonstruowane — metoda `M<String>` (`M(Of String)` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="70b32-349">The <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> method is then used to make the constructed method `M<String>` (`M(Of String)` in Visual Basic).</span></span> <span data-ttu-id="70b32-350">Przykładowy kod ma żadnych danych wyjściowych, ponieważ podklasą klasy <xref:System.Reflection.MethodInfo> zwrócony przez <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> — metoda nie zezwala na jego parametrów odbicia.</span><span class="sxs-lookup"><span data-stu-id="70b32-350">The example code has no output, because the subclass of <xref:System.Reflection.MethodInfo> returned by the <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> method does not allow reflection over its parameters.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="70b32-351">Innym przykładem kodu, który używa <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A>, zobacz <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A>.</span><span class="sxs-lookup"><span data-stu-id="70b32-351">For another code example that uses <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A>, see <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A>.</span></span> <span data-ttu-id="70b32-352"><xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> jest również bardzo często używane podczas emitowania kodu korzystającego z typów ogólnych.</span><span class="sxs-lookup"><span data-stu-id="70b32-352"><xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> is also used extensively when emitting code that uses generic types.</span></span> <span data-ttu-id="70b32-353">Zobacz [porady: definiowanie metody ogólnej za pomocą odbicia Emituj](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-method-with-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="70b32-353">See [How to: Define a Generic Method with Reflection Emit](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-method-with-reflection-emit.md).</span></span>  
  
 [!code-cpp[MethodBuilder.MakeGenericMethod#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBuilder.MakeGenericMethod/cpp/source.cpp#1)]
 [!code-csharp[MethodBuilder.MakeGenericMethod#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBuilder.MakeGenericMethod/cs/source.cs#1)]
 [!code-vb[MethodBuilder.MakeGenericMethod#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBuilder.MakeGenericMethod/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodHandle">
      <MemberSignature Language="C#" Value="public override RuntimeMethodHandle MethodHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeMethodHandle MethodHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.MethodHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodHandle As RuntimeMethodHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeMethodHandle MethodHandle { RuntimeMethodHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.MethodHandle : RuntimeMethodHandle" Usage="System.Reflection.Emit.MethodBuilder.MethodHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeMethodHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="70b32-354">Pobiera wewnętrzne dojście metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-354">Retrieves the internal handle for the method.</span>
          </span>
          <span data-ttu-id="70b32-355">Dostęp do podstawowych dojście metadanych przy użyciu tego uchwytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-355">Use this handle to access the underlying metadata handle.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="70b32-356">Tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-356">Read-only.</span>
          </span>
          <span data-ttu-id="70b32-357">Wewnętrzne dojście metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-357">The internal handle for the method.</span>
          </span>
          <span data-ttu-id="70b32-358">Dostęp do podstawowych dojście metadanych przy użyciu tego uchwytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-358">Use this handle to access the underlying metadata handle.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="70b32-359">Ta metoda nie jest obecnie obsługiwana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-359">This method is not currently supported.</span>
          </span>
          <span data-ttu-id="70b32-360">Pobrać za pomocą metody <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> i Wywołaj <see cref="P:System.Reflection.MethodBase.MethodHandle" /> w zwróconym <see cref="T:System.Reflection.MethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-360">Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call <see cref="P:System.Reflection.MethodBase.MethodHandle" /> on the returned <see cref="T:System.Reflection.MethodInfo" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes MethodImplementationFlags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodImplAttributes MethodImplementationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.MethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodImplementationFlags As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodImplAttributes MethodImplementationFlags { System::Reflection::MethodImplAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.MethodImplementationFlags : System.Reflection.MethodImplAttributes" Usage="System.Reflection.Emit.MethodBuilder.MethodImplementationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Reflection.Emit.MethodBuilder.Module" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="70b32-361">Pobiera moduł, w którym zdefiniowany jest bieżąca metoda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-361">Gets the module in which the current method is being defined.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="70b32-362">
            <see cref="T:System.Reflection.Module" /> , W którym reprezentowany przez bieżący element członkowski <see cref="T:System.Reflection.MemberInfo" /> jest definiowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-362">The <see cref="T:System.Reflection.Module" /> in which the member represented by the current <see cref="T:System.Reflection.MemberInfo" /> is being defined.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-363">Ta właściwość jest udostępniana jako udogodnienie.</span><span class="sxs-lookup"><span data-stu-id="70b32-363">This property is provided as a convenience.</span></span> <span data-ttu-id="70b32-364">Jest to równoważne przy użyciu <xref:System.Reflection.Emit.MethodBuilder.DeclaringType%2A> właściwości można pobrać typu, w którym zadeklarowany jest metoda, a następnie wywołania <xref:System.Type.Module%2A> właściwość powstałe w ten sposób <xref:System.Type> obiektu.</span><span class="sxs-lookup"><span data-stu-id="70b32-364">It is equivalent to using the <xref:System.Reflection.Emit.MethodBuilder.DeclaringType%2A> property to get the type in which the method is being declared, and then calling the <xref:System.Type.Module%2A> property of the resulting <xref:System.Type> object.</span></span>  
  
 <span data-ttu-id="70b32-365">Ta właściwość jest również odpowiednikiem wywołania <xref:System.Reflection.Emit.MethodBuilder.GetModule%2A>.</span><span class="sxs-lookup"><span data-stu-id="70b32-365">This property is also equivalent to calling <xref:System.Reflection.Emit.MethodBuilder.GetModule%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Reflection.Emit.MethodBuilder.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="70b32-366">Pobiera nazwę tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-366">Retrieves the name of this method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="70b32-367">Tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-367">Read-only.</span>
          </span>
          <span data-ttu-id="70b32-368">Pobiera ciąg zawierający prostą nazwę tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-368">Retrieves a string containing the simple name of this method.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Reflection.Emit.MethodBuilder.ReflectedType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="70b32-369">Pobiera klasę, która został użyty w odbicia w celu uzyskania tego obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-369">Retrieves the class that was used in reflection to obtain this object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="70b32-370">Tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-370">Read-only.</span>
          </span>
          <span data-ttu-id="70b32-371">Typ używany do uzyskania tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-371">The type used to obtain this method.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnParameter">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo ReturnParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo ReturnParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.ReturnParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnParameter As ParameterInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ParameterInfo ^ ReturnParameter { System::Reflection::ParameterInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnParameter : System.Reflection.ParameterInfo" Usage="System.Reflection.Emit.MethodBuilder.ReturnParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="70b32-372">Pobiera <see cref="T:System.Reflection.ParameterInfo" /> obiekt, który zawiera informacje o zwracany typ metody, takie jak czy zwracany typ ma niestandardowy modyfikatorów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-372">Gets a <see cref="T:System.Reflection.ParameterInfo" /> object that contains information about the return type of the method, such as whether the return type has custom modifiers.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="70b32-373">A <see cref="T:System.Reflection.ParameterInfo" /> obiekt, który zawiera informacje o typie zwracanym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-373">A <see cref="T:System.Reflection.ParameterInfo" /> object that contains information about the return type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-374">Projektanci kompilatora mogą używać <xref:System.Reflection.ParameterInfo> obiektu zwróconego przez tę właściwość, aby dowiedzieć się, czy niestandardowe modyfikatory, takich jak <xref:Microsoft.VisualC.IsConstModifier>, zostały zastosowane do zwracanego typu.</span><span class="sxs-lookup"><span data-stu-id="70b32-374">Compiler designers can use the <xref:System.Reflection.ParameterInfo> object returned by this property to discover whether custom modifiers, such as <xref:Microsoft.VisualC.IsConstModifier>, have been applied to the return type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="70b32-375">Nie utworzono typ deklarujący.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-375">The declaring type has not been created.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers" />
        <altmember cref="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers" />
      </Docs>
    </Member>
    <Member MemberName="ReturnType">
      <MemberSignature Language="C#" Value="public override Type ReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReturnType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.ReturnType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReturnType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnType : Type" Usage="System.Reflection.Emit.MethodBuilder.ReturnType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="70b32-376">Pobiera typ zwrotny metody reprezentowany przez to <see cref="T:System.Reflection.Emit.MethodBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-376">Gets the return type of the method represented by this <see cref="T:System.Reflection.Emit.MethodBuilder" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="70b32-377">Zwracany typ metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-377">The return type of the method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="70b32-378">Począwszy od programu .NET Framework 2.0 i .NET Compact Framework w wersji 2.0, ten element członkowski jest dziedziczony z klasy podstawowej <xref:System.Reflection.MethodInfo>.</span><span class="sxs-lookup"><span data-stu-id="70b32-378">Starting with the .NET Framework 2.0 and the .NET Compact Framework 2.0, this member is inherited from the base class, <xref:System.Reflection.MethodInfo>.</span></span> <span data-ttu-id="70b32-379">Zobacz <xref:System.Reflection.MethodInfo.ReturnType%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="70b32-379">See <xref:System.Reflection.MethodInfo.ReturnType%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnTypeCustomAttributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnTypeCustomAttributes As ICustomAttributeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ICustomAttributeProvider ^ ReturnTypeCustomAttributes { System::Reflection::ICustomAttributeProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnTypeCustomAttributes : System.Reflection.ICustomAttributeProvider" Usage="System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="70b32-380">Zwraca atrybuty niestandardowe zwracany typ metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-380">Returns the custom attributes of the method's return type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="70b32-381">Tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-381">Read-only.</span>
          </span>
          <span data-ttu-id="70b32-382">Zwracany typ metody atrybutów niestandardowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-382">The custom attributes of the method's return type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-383">Ta metoda zawsze zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="70b32-383">This method always returns `null`.</span></span> <span data-ttu-id="70b32-384">Pobierz <xref:System.Reflection.MethodInfo> po zawierający <xref:System.Type> został utworzony i jest wywoływane <xref:System.Reflection.MethodInfo.ReturnTypeCustomAttributes%2A> na <xref:System.Reflection.MethodInfo>.</span><span class="sxs-lookup"><span data-stu-id="70b32-384">Get the <xref:System.Reflection.MethodInfo> after the containing <xref:System.Type> has been created and invoked <xref:System.Reflection.MethodInfo.ReturnTypeCustomAttributes%2A> on the <xref:System.Reflection.MethodInfo>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetCustomAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="70b32-385">Ustawia atrybut niestandardowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-385">Sets a custom attribute.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCustomAttribute(class System.Reflection.Emit.CustomAttributeBuilder customBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomAttribute (customBuilder As CustomAttributeBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCustomAttribute(System::Reflection::Emit::CustomAttributeBuilder ^ customBuilder);" />
      <MemberSignature Language="F#" Value="member this.SetCustomAttribute : System.Reflection.Emit.CustomAttributeBuilder -&gt; unit" Usage="methodBuilder.SetCustomAttribute customBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customBuilder" Type="System.Reflection.Emit.CustomAttributeBuilder" />
      </Parameters>
      <Docs>
        <param name="customBuilder">
          <span data-ttu-id="70b32-386">Wystąpienia klasy pomocnika do opisywania atrybutu niestandardowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-386">An instance of a helper class to describe the custom attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70b32-387">Ustawia atrybut niestandardowy za pomocą konstruktora atrybutów niestandardowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-387">Sets a custom attribute using a custom attribute builder.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-388"><xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> Zakłócają metody <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> metody, gdy dwie metody są używane w połączeniu.</span><span class="sxs-lookup"><span data-stu-id="70b32-388">The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method can interact with the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method when the two methods are used in combination.</span></span> <span data-ttu-id="70b32-389">Zobacz sekcję uwag <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> metody, aby uzyskać szczegółowe informacje.</span><span class="sxs-lookup"><span data-stu-id="70b32-389">See the Remarks section of the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method for details.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="70b32-390">
            <paramref name="customBuilder" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-390">
              <paramref name="customBuilder" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="70b32-391">Dla bieżącej metody <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> właściwość jest <see langword="true" />, ale <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> jest właściwość <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-391">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCustomAttribute(class System.Reflection.ConstructorInfo con, unsigned int8[] binaryAttribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomAttribute (con As ConstructorInfo, binaryAttribute As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCustomAttribute(System::Reflection::ConstructorInfo ^ con, cli::array &lt;System::Byte&gt; ^ binaryAttribute);" />
      <MemberSignature Language="F#" Value="member this.SetCustomAttribute : System.Reflection.ConstructorInfo * byte[] -&gt; unit" Usage="methodBuilder.SetCustomAttribute (con, binaryAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="con" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="binaryAttribute" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="con">
          <span data-ttu-id="70b32-392">Konstruktor atrybutu niestandardowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-392">The constructor for the custom attribute.</span>
          </span>
        </param>
        <param name="binaryAttribute">
          <span data-ttu-id="70b32-393">Obiekt blob bajtów reprezentujących atrybuty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-393">A byte blob representing the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70b32-394">Ustawia przy użyciu określonego atrybutu niestandardowego obiektu blob atrybutu niestandardowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-394">Sets a custom attribute using a specified custom attribute blob.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-395">Aby uzyskać więcej informacji na temat formatu `binaryAttribute`, można znaleźć w dokumentacji infrastruktury języka wspólnego (CLI), szczególnie "partycji II: metadane definicji i semantyki".</span><span class="sxs-lookup"><span data-stu-id="70b32-395">For details on how to format `binaryAttribute`, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="70b32-396">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# i wspólne normy infrastruktury języka](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie sieci Web międzynarodowej Ecma.</span><span class="sxs-lookup"><span data-stu-id="70b32-396">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 <span data-ttu-id="70b32-397"><xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> Zakłócają metody <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> metody, gdy dwie metody są używane w połączeniu.</span><span class="sxs-lookup"><span data-stu-id="70b32-397">The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method can interact with the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method when the two methods are used in combination.</span></span> <span data-ttu-id="70b32-398">Zobacz sekcję uwag <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> metody, aby uzyskać szczegółowe informacje.</span><span class="sxs-lookup"><span data-stu-id="70b32-398">See the Remarks section of the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method for details.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="70b32-399">
            <paramref name="con" /> lub <paramref name="binaryAttribute" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-399">
              <paramref name="con" /> or <paramref name="binaryAttribute" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="70b32-400">Dla bieżącej metody <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> właściwość jest <see langword="true" />, ale <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> jest właściwość <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-400">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetImplementationFlags">
      <MemberSignature Language="C#" Value="public void SetImplementationFlags (System.Reflection.MethodImplAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetImplementationFlags(valuetype System.Reflection.MethodImplAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetImplementationFlags (attributes As MethodImplAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetImplementationFlags(System::Reflection::MethodImplAttributes attributes);" />
      <MemberSignature Language="F#" Value="member this.SetImplementationFlags : System.Reflection.MethodImplAttributes -&gt; unit" Usage="methodBuilder.SetImplementationFlags attributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Reflection.MethodImplAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes">
          <span data-ttu-id="70b32-401">Można ustawić flagi implementacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-401">The implementation flags to set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70b32-402">Ustawia flagi implementacji dla tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-402">Sets the implementation flags for this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-403">Jeśli używasz <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> w połączeniu z metody <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> metody, należy pamiętać o potencjalnych interakcji.</span><span class="sxs-lookup"><span data-stu-id="70b32-403">When you use the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method in combination with the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method, be aware of potential interactions.</span></span> <span data-ttu-id="70b32-404">Na przykład za pomocą <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> metody w celu dodania <xref:System.Runtime.InteropServices.DllImportAttribute> również atrybut ustawia <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flagi.</span><span class="sxs-lookup"><span data-stu-id="70b32-404">For example, using the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method to add the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute also sets the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="70b32-405">Jeśli następnie wywołaj <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> metody <xref:System.Reflection.MethodImplAttributes.PreserveSig> flaga jest zastępowany.</span><span class="sxs-lookup"><span data-stu-id="70b32-405">If you subsequently call the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method, the <xref:System.Reflection.MethodImplAttributes.PreserveSig> flag is overwritten.</span></span> <span data-ttu-id="70b32-406">Istnieją dwa sposoby, aby zapobiec tej sytuacji:</span><span class="sxs-lookup"><span data-stu-id="70b32-406">There are two ways to avoid this:</span></span>  
  
-   <span data-ttu-id="70b32-407">Wywołanie <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> metoda przed wywołaniem <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-407">Call the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method before you call the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method.</span></span> <span data-ttu-id="70b32-408"><xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> Metody zawsze szanuje istniejących flagi implementacji metod.</span><span class="sxs-lookup"><span data-stu-id="70b32-408">The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method always respects existing method implementation flags.</span></span>  
  
-   <span data-ttu-id="70b32-409">Po ustawieniu flagi implementacji wywołania <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A> metodę istniejących flag, użyj bitowo lub Dodaj flagę użytkownika, a następnie wywołać <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-409">When you set implementation flags, call the <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A> method to retrieve the existing flags, use bitwise OR to add your flag, and then call the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70b32-410">Poniższy przykładowy kod przedstawia użycie kontekstowe `SetImplementationFlags` metody do opisywania implementacji MSIL w treści metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-410">The code sample below illustrates the contextual use of the `SetImplementationFlags` method to describe the implementation of MSIL in a method body.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.MethodBuilder.SetImplementationFlags Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetImplementationFlags Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.MethodBuilder.SetImplementationFlags Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetImplementationFlags Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.MethodBuilder.SetImplementationFlags Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetImplementationFlags Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="70b32-411">Typ zawierający został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-411">The containing type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
          <span data-ttu-id="70b32-412">- lub - dla bieżącej metody <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> właściwość jest <see langword="true" />, ale <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> jest właściwość <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-412">-or-  For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetMarshal">
      <MemberSignature Language="C#" Value="public void SetMarshal (System.Reflection.Emit.UnmanagedMarshal unmanagedMarshal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetMarshal(class System.Reflection.Emit.UnmanagedMarshal unmanagedMarshal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetMarshal(System.Reflection.Emit.UnmanagedMarshal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetMarshal(System::Reflection::Emit::UnmanagedMarshal ^ unmanagedMarshal);" />
      <MemberSignature Language="F#" Value="member this.SetMarshal : System.Reflection.Emit.UnmanagedMarshal -&gt; unit" Usage="methodBuilder.SetMarshal unmanagedMarshal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("An alternate API is available: Emit the MarshalAs custom attribute instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unmanagedMarshal" Type="System.Reflection.Emit.UnmanagedMarshal" />
      </Parameters>
      <Docs>
        <param name="unmanagedMarshal">
          <span data-ttu-id="70b32-413">Przekazywanie informacji dla zwracanego typu tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-413">Marshaling information for the return type of this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70b32-414">Ustawia przekazywanie informacji dla zwracanego typu tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-414">Sets marshaling information for the return type of this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="70b32-415">Poniższy przykładowy kod przedstawia użycie kontekstowe `SetMarshal` metody do organizowania wyniki wywołania metody jako innego typu.</span><span class="sxs-lookup"><span data-stu-id="70b32-415">The code sample below illustrates the contextual usage of the `SetMarshal` method to marshal the results of a method call as a different type.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.MethodBuilder.SetMarshal Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetMarshal Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.MethodBuilder.SetMarshal Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetMarshal Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.MethodBuilder.SetMarshal Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetMarshal Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="70b32-416">Typ zawierający został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-416">The containing type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
          <span data-ttu-id="70b32-417">- lub - dla bieżącej metody <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> właściwość jest <see langword="true" />, ale <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> jest właściwość <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-417">-or-  For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetMethodBody">
      <MemberSignature Language="C#" Value="public void SetMethodBody (byte[] il, int maxStack, byte[] localSignature, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.ExceptionHandler&gt; exceptionHandlers, System.Collections.Generic.IEnumerable&lt;int&gt; tokenFixups);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetMethodBody(unsigned int8[] il, int32 maxStack, unsigned int8[] localSignature, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Reflection.Emit.ExceptionHandler&gt; exceptionHandlers, class System.Collections.Generic.IEnumerable`1&lt;int32&gt; tokenFixups) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetMethodBody (il As Byte(), maxStack As Integer, localSignature As Byte(), exceptionHandlers As IEnumerable(Of ExceptionHandler), tokenFixups As IEnumerable(Of Integer))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetMethodBody(cli::array &lt;System::Byte&gt; ^ il, int maxStack, cli::array &lt;System::Byte&gt; ^ localSignature, System::Collections::Generic::IEnumerable&lt;System::Reflection::Emit::ExceptionHandler&gt; ^ exceptionHandlers, System::Collections::Generic::IEnumerable&lt;int&gt; ^ tokenFixups);" />
      <MemberSignature Language="F#" Value="member this.SetMethodBody : byte[] * int * byte[] * seq&lt;System.Reflection.Emit.ExceptionHandler&gt; * seq&lt;int&gt; -&gt; unit" Usage="methodBuilder.SetMethodBody (il, maxStack, localSignature, exceptionHandlers, tokenFixups)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="il" Type="System.Byte[]" />
        <Parameter Name="maxStack" Type="System.Int32" />
        <Parameter Name="localSignature" Type="System.Byte[]" />
        <Parameter Name="exceptionHandlers" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.ExceptionHandler&gt;" />
        <Parameter Name="tokenFixups" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="il">
          <span data-ttu-id="70b32-418">Tablica zawiera nieprawidłowy instrukcje MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-418">An array that contains valid MSIL instructions.</span>
          </span>
        </param>
        <param name="maxStack">
          <span data-ttu-id="70b32-419">Stos maksymalną głębokość oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-419">The maximum stack evaluation depth.</span>
          </span>
        </param>
        <param name="localSignature">
          <span data-ttu-id="70b32-420">Tablica bajtów, które zawierają serializacji struktury zmiennej lokalnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-420">An array of bytes that contain the serialized local variable structure.</span>
          </span>
          <span data-ttu-id="70b32-421">Określ <see langword="null" /> Jeśli metoda nie ma lokalnych zmiennych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-421">Specify <see langword="null" /> if the method has no local variables.</span>
          </span>
        </param>
        <param name="exceptionHandlers">
          <span data-ttu-id="70b32-422">Kolekcja, która zawiera programy obsługi wyjątków dla metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-422">A collection that contains the exception handlers for the method.</span>
          </span>
          <span data-ttu-id="70b32-423">Określ <see langword="null" /> Jeśli metoda nie ma żadnych programów obsługi wyjątków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-423">Specify <see langword="null" /> if the method has no exception handlers.</span>
          </span>
        </param>
        <param name="tokenFixups">
          <span data-ttu-id="70b32-424">Zbiór wartości, które reprezentują przesunięcia w <c>il</c>, z których każdy Określa początek token, który może być modyfikowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-424">A collection of values that represent offsets in <c>il</c>, each of which specifies the beginning of a token that may be modified.</span>
          </span>
          <span data-ttu-id="70b32-425">Określ <see langword="null" /> Jeśli metoda nie ma żadnych tokenów, które mają być modyfikowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-425">Specify <see langword="null" /> if the method has no tokens that have to be modified.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70b32-426">Tworzy treści metody przy użyciu określonej tablicy bajtów instrukcji języka pośredniego (MSIL) firmy Microsoft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-426">Creates the body of the method by using a specified byte array of Microsoft intermediate language (MSIL) instructions.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="70b32-427">
            <paramref name="il" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-427">
              <paramref name="il" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="70b32-428">
            <paramref name="maxStack" /> jest ujemna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-428">
              <paramref name="maxStack" /> is negative.</span>
          </span>
          <span data-ttu-id="70b32-429">- lub - jedną z <paramref name="exceptionHandlers" /> określa przesunięcie, poza <paramref name="il" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-429">-or-  One of <paramref name="exceptionHandlers" /> specifies an offset outside of <paramref name="il" />.</span>
          </span>
          <span data-ttu-id="70b32-430">- lub - jedną z <paramref name="tokenFixups" /> określa przesunięcie znajdującego się poza <paramref name="il" /> tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-430">-or-  One of <paramref name="tokenFixups" /> specifies an offset that is outside the <paramref name="il" /> array.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="70b32-431">Typ zawierający został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-431">The containing type was previously created using the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method.</span>
          </span>
          <span data-ttu-id="70b32-432">Ta metoda została wywołana wcześniej w tym - lub - <see cref="T:System.Reflection.Emit.MethodBuilder" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-432">-or-  This method was called previously on this <see cref="T:System.Reflection.Emit.MethodBuilder" /> object.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetParameters">
      <MemberSignature Language="C#" Value="public void SetParameters (params Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetParameters(class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetParameters (ParamArray parameterTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetParameters(... cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberSignature Language="F#" Value="member this.SetParameters : Type[] -&gt; unit" Usage="methodBuilder.SetParameters parameterTypes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterTypes" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parameterTypes">
          <span data-ttu-id="70b32-433">Tablica <see cref="T:System.Type" /> obiekty reprezentujące typy parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-433">An array of <see cref="T:System.Type" /> objects representing the parameter types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70b32-434">Ustawia liczbę i typy parametrów metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-434">Sets the number and types of parameters for a method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-435">Jeżeli liczba i typy parametrów są znane, gdy metoda jest określona, można można ustawić za pomocą dowolnego przeciążenia <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> metodę, która akceptuje tablicą typów parametrów.</span><span class="sxs-lookup"><span data-stu-id="70b32-435">If the number and types of the parameters are known when the method is defined, they can be set using any overload of the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> method that accepts an array of parameter types.</span></span> <span data-ttu-id="70b32-436">Jednak metoda ogólna może mieć parametrów, których typy zostały określone przez jedną lub więcej własne parametry typu ogólnego, których nie można zdefiniować dopiero po zdefiniowaniu metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-436">However, a generic method can have parameters whose types are specified by one or more of its own generic type parameters, which cannot be defined until after the method has been defined.</span></span> <span data-ttu-id="70b32-437">Użyj tej metody można ustawić w takim przypadku typy parametrów.</span><span class="sxs-lookup"><span data-stu-id="70b32-437">Use this method to set the parameter types in that case.</span></span>  
  
 <span data-ttu-id="70b32-438">Jeśli typ zwracany ma opcjonalne lub wymagane Modyfikatory niestandardowych, takich jak <xref:System.Runtime.CompilerServices.IsConst>, użyj <xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-438">If the return type has optional or required custom modifiers, such as <xref:System.Runtime.CompilerServices.IsConst>, use the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overload.</span></span>  
  
 <span data-ttu-id="70b32-439">Wywołanie tej metody zastępuje wszystkie typy parametrów, które zostały określone za pomocą <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-439">Calling this method replaces any parameter types that were set using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70b32-440">Poniższy przykład kodu wykorzystuje <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> metodę, aby wprowadzić ogólne metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-440">The following code example uses the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method to make a method generic.</span></span> <span data-ttu-id="70b32-441"><xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> Metoda służy do przydzielania jeden parametr metody, której typem zostanie określony za pomocą pierwszego parametru typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="70b32-441">The <xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> method is used to give the method one parameter, whose type will be specified by the first generic type parameter.</span></span> <span data-ttu-id="70b32-442"><xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> Metoda jest używana do zapewniają metodę zwracanego typu określony przez drugi parametr typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="70b32-442">The <xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> method is used to give the method a return type, specified by the second generic type parameter.</span></span>  
  
 <span data-ttu-id="70b32-443">Ten kod jest częścią większego przykładu udostępnionego dla <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-443">This code is part of a larger example provided for the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.</span></span>  
  
 [!code-cpp[GenericMethodBuilder#3](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#3)]
 [!code-csharp[GenericMethodBuilder#3](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#3)]
 [!code-vb[GenericMethodBuilder#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#3)]  
[!code-cpp[GenericMethodBuilder#5](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#5)]
[!code-csharp[GenericMethodBuilder#5](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#5)]
[!code-vb[GenericMethodBuilder#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="70b32-444">Bieżącej metody jest rodzajowy, ale nie jest ogólną definicją metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-444">The current method is generic, but is not a generic method definition.</span>
          </span>
          <span data-ttu-id="70b32-445">Oznacza to <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> właściwość jest <see langword="true" />, ale <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> jest właściwość <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-445">That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="SetReturnType">
      <MemberSignature Language="C#" Value="public void SetReturnType (Type returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetReturnType(class System.Type returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetReturnType (returnType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetReturnType(Type ^ returnType);" />
      <MemberSignature Language="F#" Value="member this.SetReturnType : Type -&gt; unit" Usage="methodBuilder.SetReturnType returnType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="returnType">
          <span data-ttu-id="70b32-446">A <see cref="T:System.Type" /> obiekt, który reprezentuje typ zwracany metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-446">A <see cref="T:System.Type" /> object that represents the return type of the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70b32-447">Ustawia typ zwrotny metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-447">Sets the return type of the method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-448">Ta metoda umożliwia ustawienie zwracanego typu metody ogólnej, jeśli określono typ zwracany przez jeden z parametrów typu ogólnego metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-448">Use this method to set the return type of a generic method, when the return type is specified by one of the generic type parameters of the method.</span></span> <span data-ttu-id="70b32-449">Jeśli typ zwracany ma opcjonalne lub wymagane Modyfikatory niestandardowych, takich jak <xref:System.Runtime.CompilerServices.IsConst>, użyj <xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-449">If the return type has optional or required custom modifiers, such as <xref:System.Runtime.CompilerServices.IsConst>, use the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overload.</span></span>  
  
 <span data-ttu-id="70b32-450">Wywołanie tej metody zastępuje zwracanego typu za pomocą <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-450">Calling this method replaces a return type established using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70b32-451">Poniższy przykład kodu wykorzystuje <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> metodę, aby wprowadzić ogólne metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-451">The following code example uses the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method to make a method generic.</span></span> <span data-ttu-id="70b32-452"><xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> Metoda służy do przydzielania jeden parametr metody, której typem zostanie określony za pomocą pierwszego parametru typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="70b32-452">The <xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> method is used to give the method one parameter, whose type will be specified by the first generic type parameter.</span></span> <span data-ttu-id="70b32-453"><xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> Metoda jest używana do zapewniają metodę zwracanego typu określony przez drugi parametr typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="70b32-453">The <xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> method is used to give the method a return type, specified by the second generic type parameter.</span></span>  
  
 <span data-ttu-id="70b32-454">Ten kod jest częścią większego przykładu udostępnionego dla <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-454">This code is part of a larger example provided for the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.</span></span>  
  
 [!code-cpp[GenericMethodBuilder#3](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#3)]
 [!code-csharp[GenericMethodBuilder#3](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#3)]
 [!code-vb[GenericMethodBuilder#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#3)]  
[!code-cpp[GenericMethodBuilder#5](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#5)]
[!code-csharp[GenericMethodBuilder#5](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#5)]
[!code-vb[GenericMethodBuilder#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="70b32-455">Bieżącej metody jest rodzajowy, ale nie jest ogólną definicją metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-455">The current method is generic, but is not a generic method definition.</span>
          </span>
          <span data-ttu-id="70b32-456">Oznacza to <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> właściwość jest <see langword="true" />, ale <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> jest właściwość <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-456">That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])" />
      </Docs>
    </Member>
    <Member MemberName="SetSignature">
      <MemberSignature Language="C#" Value="public void SetSignature (Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSignature(class System.Type returnType, class System.Type[] returnTypeRequiredCustomModifiers, class System.Type[] returnTypeOptionalCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] parameterTypeRequiredCustomModifiers, class System.Type[][] parameterTypeOptionalCustomModifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSignature (returnType As Type, returnTypeRequiredCustomModifiers As Type(), returnTypeOptionalCustomModifiers As Type(), parameterTypes As Type(), parameterTypeRequiredCustomModifiers As Type()(), parameterTypeOptionalCustomModifiers As Type()())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSignature(Type ^ returnType, cli::array &lt;Type ^&gt; ^ returnTypeRequiredCustomModifiers, cli::array &lt;Type ^&gt; ^ returnTypeOptionalCustomModifiers, cli::array &lt;Type ^&gt; ^ parameterTypes, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeRequiredCustomModifiers, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeOptionalCustomModifiers);" />
      <MemberSignature Language="F#" Value="member this.SetSignature : Type * Type[] * Type[] * Type[] * Type[][] * Type[][] -&gt; unit" Usage="methodBuilder.SetSignature (returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers, parameterTypes, parameterTypeRequiredCustomModifiers, parameterTypeOptionalCustomModifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnTypeRequiredCustomModifiers" Type="System.Type[]" />
        <Parameter Name="returnTypeOptionalCustomModifiers" Type="System.Type[]" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="parameterTypeRequiredCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="parameterTypeOptionalCustomModifiers" Type="System.Type[][]" />
      </Parameters>
      <Docs>
        <param name="returnType">
          <span data-ttu-id="70b32-457">Zwracany typ metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-457">The return type of the method.</span>
          </span>
        </param>
        <param name="returnTypeRequiredCustomModifiers">
          <span data-ttu-id="70b32-458">Tablica typów reprezentujący wymagane Modyfikatory niestandardowych, takich jak <see cref="T:System.Runtime.CompilerServices.IsConst" />, dla zwracanego typu metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-458">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method.</span>
          </span>
          <span data-ttu-id="70b32-459">Jeśli typ zwracany jest Brak wymaganego modyfikatorów niestandardowych, określić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-459">If the return type has no required custom modifiers, specify <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnTypeOptionalCustomModifiers">
          <span data-ttu-id="70b32-460">Tablica typów reprezentujący opcjonalne Modyfikatory niestandardowych, takich jak <see cref="T:System.Runtime.CompilerServices.IsConst" />, dla zwracanego typu metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-460">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method.</span>
          </span>
          <span data-ttu-id="70b32-461">Jeśli typ zwracany jest brak opcjonalne modyfikatorów niestandardowych, określić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-461">If the return type has no optional custom modifiers, specify <see langword="null" />.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="70b32-462">Typy parametrów metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-462">The types of the parameters of the method.</span>
          </span>
        </param>
        <param name="parameterTypeRequiredCustomModifiers">
          <span data-ttu-id="70b32-463">Tablica tablice typów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-463">An array of arrays of types.</span>
          </span>
          <span data-ttu-id="70b32-464">Każdej macierzy typy reprezentuje wymagane Modyfikatory niestandardowych do odpowiadającego mu parametru takich jak <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-464">Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span>
          </span>
          <span data-ttu-id="70b32-465">Jeśli określonego parametru Brak wymaganego modyfikatorów niestandardowych, określ <see langword="null" /> zamiast tablicę typów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-465">If a particular parameter has no required custom modifiers, specify <see langword="null" /> instead of an array of types.</span>
          </span>
          <span data-ttu-id="70b32-466">Jeśli żaden z parametrów mają odpowiednie Modyfikatory niestandardowych, określ <see langword="null" /> zamiast tablicy tablic.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-466">If none of the parameters have required custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span>
          </span>
        </param>
        <param name="parameterTypeOptionalCustomModifiers">
          <span data-ttu-id="70b32-467">Tablica tablice typów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-467">An array of arrays of types.</span>
          </span>
          <span data-ttu-id="70b32-468">Każdej macierzy typy reprezentuje opcjonalne Modyfikatory niestandardowych do odpowiadającego mu parametru takich jak <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-468">Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span>
          </span>
          <span data-ttu-id="70b32-469">Jeśli określonego parametru brak opcjonalne modyfikatorów niestandardowych, określ <see langword="null" /> zamiast tablicę typów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-469">If a particular parameter has no optional custom modifiers, specify <see langword="null" /> instead of an array of types.</span>
          </span>
          <span data-ttu-id="70b32-470">Jeśli żaden z parametrów nie ma opcjonalne Modyfikatory niestandardowych, określ <see langword="null" /> zamiast tablicy tablic.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-470">If none of the parameters have optional custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70b32-471">Ustawia podpis metody, w tym typ zwracany, typy parametrów i wymaganych i opcjonalnych Modyfikatory niestandardowy typ zwracany i typy parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-471">Sets the method signature, including the return type, the parameter types, and the required and optional custom modifiers of the return type and parameter types.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-472">Jeśli zwracany typ i liczbę i typy parametrów są znane, gdy metoda jest określona, może być ustalona przy użyciu dowolnego przeciążenia <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> metodę, która akceptuje tablicą typów parametrów.</span><span class="sxs-lookup"><span data-stu-id="70b32-472">If the return type and the number and types of the parameters are known when the method is defined, they can be established using any overload of the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> method that accepts an array of parameter types.</span></span> <span data-ttu-id="70b32-473">Jednak metoda ogólna może mieć parametrów, których typy zostały określone przez jedną lub więcej własne parametry typu ogólnego, których nie można zdefiniować dopiero po zdefiniowaniu metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-473">However, a generic method can have parameters whose types are specified by one or more of its own generic type parameters, which cannot be defined until after the method has been defined.</span></span> <span data-ttu-id="70b32-474">Użyj tej metody można ustawić w takim przypadku typy parametrów.</span><span class="sxs-lookup"><span data-stu-id="70b32-474">Use this method to set the parameter types in that case.</span></span>  
  
 <span data-ttu-id="70b32-475">Jeśli typ zwracany ani typy parametrów nie mieć opcjonalne lub wymagane modyfikatorów niestandardowych, takich jak <xref:Microsoft.VisualC.IsConstModifier>, można użyć <xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> i <xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-475">If neither the return type nor the parameter types have optional or required custom modifiers, such as <xref:Microsoft.VisualC.IsConstModifier>, you can use the <xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> and <xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> methods.</span></span>  
  
 <span data-ttu-id="70b32-476">Wywołanie tej metody zastępuje parametrów i typ zwracany za pomocą <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-476">Calling this method replaces the parameters and return type established using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70b32-477">Poniższy przykład kodu zawiera kod źródłowy o nazwie przykładowy, który ma parametr typu klasy ogólnej `T`.</span><span class="sxs-lookup"><span data-stu-id="70b32-477">The following code example contains source code for a generic class named Sample that has a type parameter `T`.</span></span> <span data-ttu-id="70b32-478">Klasa ma pole o nazwie `Field`, typu `T`oraz metody rodzajowej `GM` z własną parametr typu `U`.</span><span class="sxs-lookup"><span data-stu-id="70b32-478">The class has a field named `Field`, of type `T`, and a generic method `GM` with its own type parameter, `U`.</span></span> <span data-ttu-id="70b32-479">— Metoda `GM` tworzy wystąpienie próbki, podstawiając własne parametr typu `U` dla parametru typu próbki i są przechowywane jego parametru wejściowego w `Field`.</span><span class="sxs-lookup"><span data-stu-id="70b32-479">Method `GM` creates an instance of Sample, substituting its own type parameter `U` for the type parameter of Sample, and stores its input parameter in `Field`.</span></span> <span data-ttu-id="70b32-480">Ten kod źródłowy jest skompilowany, ale nie jest używany; można wyświetlić za pomocą [Ildasm.exe (dezasembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)i porównaj je z kodu emitowane przez klasę `Example`.</span><span class="sxs-lookup"><span data-stu-id="70b32-480">This source code is compiled but not used; you can view it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), and compare it to the code emitted by class `Example`.</span></span>  
  
 <span data-ttu-id="70b32-481">Kod w klasie `Example` zademonstrowano użycie <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A> metoda emitowanie kodu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="70b32-481">The code in class `Example` demonstrates the use of the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A> method in emitting generic code.</span></span> <span data-ttu-id="70b32-482">`Main` Metody klasy `Example` tworzy dynamiczne zestawu zawierającego klasę o nazwie `Sample`i używa <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> metodę, aby wprowadzić ogólne przez dodanie parametru typu o nazwie `T`.</span><span class="sxs-lookup"><span data-stu-id="70b32-482">The `Main` method of class `Example` creates a dynamic assembly containing a class named `Sample`, and uses the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> method to make it generic by adding a type parameter named `T`.</span></span> <span data-ttu-id="70b32-483">Domyślny konstruktor i pole o nazwie `Field`, typu `T`, są dodawane do klasy `Sample`.</span><span class="sxs-lookup"><span data-stu-id="70b32-483">A default constructor and a field named `Field`, of type `T`, are added to class `Sample`.</span></span> <span data-ttu-id="70b32-484">Metoda `GM` zostanie dodany i zamieniło się przy użyciu metody ogólnej <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-484">A method `GM` is added, and turned into a generic method using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.</span></span> <span data-ttu-id="70b32-485">Parametr typu `GM` nosi nazwę `U`.</span><span class="sxs-lookup"><span data-stu-id="70b32-485">The type parameter of `GM` is named `U`.</span></span> <span data-ttu-id="70b32-486">Parametr typu jest zdefiniowane, podpis `GM` jest dodawana przy użyciu <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-486">Once the type parameter is defined, the signature of `GM` is added, using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A> method.</span></span> <span data-ttu-id="70b32-487">Nie ma zwracanego typu i brak modyfikatorów wymagane lub niestandardowych więc wszystkie parametry tej metody są `null` z wyjątkiem `parameterTypes`, która określa typ parametru tylko metody; Ustaw parametr typu metody, `U`.</span><span class="sxs-lookup"><span data-stu-id="70b32-487">There is no return type, and no required or custom modifiers, so all the parameters of this method are `null` except `parameterTypes`, which sets the type of the only parameter of the method; this is set to the method's type parameter, `U`.</span></span> <span data-ttu-id="70b32-488">Treść metody tworzy wystąpienia typu skonstruowane `Sample<U>` (`Sample(Of U)` w języku Visual Basic), przypisuje parametr metody `Field`, a następnie drukuje wartość `Field`.</span><span class="sxs-lookup"><span data-stu-id="70b32-488">The body of the method creates an instance of the constructed type `Sample<U>` (`Sample(Of U)` in Visual Basic), assigns the method's parameter to `Field`, and then prints the value of `Field`.</span></span> <span data-ttu-id="70b32-489">Zdefiniowano fikcyjny typu, aby pomieścić metoda punktu wejścia `Main`.</span><span class="sxs-lookup"><span data-stu-id="70b32-489">A dummy type is defined, to hold the entry point method `Main`.</span></span> <span data-ttu-id="70b32-490">W treści `Main`, statycznych `GM` wywołaniu metody w typie ogólnym skonstruowane `Sample<int>` (`Sample(Of Integer)` w języku Visual Basic), z typem <xref:System.String> podstawić `U`.</span><span class="sxs-lookup"><span data-stu-id="70b32-490">In the body of `Main`, the static `GM` method is invoked on the constructed generic type `Sample<int>` (`Sample(Of Integer)` in Visual Basic), with type <xref:System.String> substituted for `U`.</span></span> <span data-ttu-id="70b32-491"><xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A?displayProperty=nameWithType> Metoda służy do tworzenia <xref:System.Reflection.MethodInfo> dla statycznych `GM` metody skonstruowanego typu ogólnego `Sample<U>`i <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=nameWithType> metody jest następnie używany do tworzenia <xref:System.Reflection.MethodInfo> który można emitowanych w wywołaniu metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-491">The <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A?displayProperty=nameWithType> method is used to create a <xref:System.Reflection.MethodInfo> for the static `GM` method of the constructed generic type `Sample<U>`, and the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=nameWithType> method is then used to create a <xref:System.Reflection.MethodInfo> that can emitted in a method call.</span></span>  
  
 <span data-ttu-id="70b32-492">Po uruchomieniu przykładowy kod zapisuje emitowany zestawu jako TypeBuilderGetFieldExample.exe.</span><span class="sxs-lookup"><span data-stu-id="70b32-492">When the code example is run, it saves the emitted assembly as TypeBuilderGetFieldExample.exe.</span></span> <span data-ttu-id="70b32-493">Możesz uruchomić TypeBuilderGetFieldExample.exe i służy [Ildasm.exe (dezasembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) porównywanie emitowany kodu kod `Sample` klasy, która ma zostać skompilowany w samej przykładu kodu.</span><span class="sxs-lookup"><span data-stu-id="70b32-493">You can run TypeBuilderGetFieldExample.exe, and you can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to compare the emitted code with the code for the `Sample` class that is compiled into the code example itself.</span></span>  
  
 [!code-csharp[TypeBuilder.GetField_Generic#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder.GetField_Generic/cs/source.cs#1)]
 [!code-vb[TypeBuilder.GetField_Generic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder.GetField_Generic/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="70b32-494">Bieżącej metody jest rodzajowy, ale nie jest ogólną definicją metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-494">The current method is generic, but is not a generic method definition.</span>
          </span>
          <span data-ttu-id="70b32-495">Oznacza to <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> właściwość jest <see langword="true" />, ale <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> jest właściwość <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-495">That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)" />
        <altmember cref="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])" />
      </Docs>
    </Member>
    <Member MemberName="SetSymCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetSymCustomAttribute (string name, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSymCustomAttribute(string name, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSymCustomAttribute (name As String, data As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSymCustomAttribute(System::String ^ name, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.SetSymCustomAttribute : string * byte[] -&gt; unit" Usage="methodBuilder.SetSymCustomAttribute (name, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="70b32-496">Nazwa symboliczna atrybutu niestandardowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-496">The name of the symbolic custom attribute.</span>
          </span>
        </param>
        <param name="data">
          <span data-ttu-id="70b32-497">Obiekt blob bajt, reprezentujący wartość symboliczne atrybutu niestandardowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-497">The byte blob that represents the value of the symbolic custom attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70b32-498">Ustaw symboliczne przy użyciu obiektu blob atrybutu niestandardowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-498">Set a symbolic custom attribute using a blob.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-499">W odróżnieniu od atrybutu niestandardowego metadanych ten atrybut niestandardowy jest skojarzony z Edytor symbolu.</span><span class="sxs-lookup"><span data-stu-id="70b32-499">Unlike the metadata custom attribute, this custom attribute is associated with a symbol writer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70b32-500">Poniższy przykładowy kod przedstawia użycie kontekstowe `SetSymCustomAttribute` metodę w celu ustawienia wartości bajtu dla nazwy i klucza atrybutu niestandardowego dołączony do metody.</span><span class="sxs-lookup"><span data-stu-id="70b32-500">The code sample below illustrates the contextual usage of the `SetSymCustomAttribute` method to set the byte values for the name and key of a custom attribute attached to a method.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example/CPP/source2.cpp#1)]
 [!code-csharp[System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example/CS/source2.cs#1)]
 [!code-vb[System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="70b32-501">Typ zawierający został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-501">The containing type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
          <span data-ttu-id="70b32-502">- lub - moduł, który zawiera tę metodę nie jest modułem debugowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-502">-or-  The module that contains this method is not a debug module.</span>
          </span>
          <span data-ttu-id="70b32-503">- lub - dla bieżącej metody <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> właściwość jest <see langword="true" />, ale <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> jest właściwość <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-503">-or-  For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Signature">
      <MemberSignature Language="C#" Value="public string Signature { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Signature" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.Signature" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Signature As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Signature { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Signature : string" Usage="System.Reflection.Emit.MethodBuilder.Signature" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="70b32-504">Pobiera podpis metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-504">Retrieves the signature of the method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="70b32-505">Tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-505">Read-only.</span>
          </span>
          <span data-ttu-id="70b32-506">Ciąg zawierający podpis metody odzwierciedlone to <see langword="MethodBase" /> wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-506">A String containing the signature of the method reflected by this <see langword="MethodBase" /> instance.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _MethodBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _MethodBuilder.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_MethodBuilder::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="70b32-507">Zarezerwowane do użytku w przyszłości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-507">Reserved for future use.</span>
          </span>
          <span data-ttu-id="70b32-508">Musi być wartością IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-508">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="70b32-509">Przekazana tablica nazw ma być mapowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-509">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="70b32-510">Liczba nazw, które mają być mapowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-510">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="70b32-511">Ustawienia regionalne kontekstu, w którym można interpretować nazwy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-511">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="70b32-512">Tablica przydzielone przez obiekt wywołujący, która odbiera identyfikatory, odpowiadających nazwy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-512">Caller-allocated array that receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70b32-513">Zestaw nazw jest mapowany na odpowiedni zestaw identyfikatorów wysyłania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-513">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-514">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="70b32-514">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="70b32-515">Aby uzyskać więcej informacji na temat `IDispatch::GetIDsOfNames`, zobacz bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="70b32-515">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="70b32-516">Dostęp z późnym wiązaniem za pomocą modelu COM <c>IDispatch</c> interfejs nie jest obsługiwany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-516">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBuilder.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _MethodBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodBuilder.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _MethodBuilder.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodBuilder.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_MethodBuilder::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="70b32-517">Informacje o typie, który będzie zwracany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-517">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="70b32-518">Identyfikator regionalny dla informacji o typie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-518">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="70b32-519">Otrzymuje wskaźnik do obiektu informacji żądanego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-519">Receives a pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70b32-520">Pobiera informacje o typie dla obiektu, których następnie można użyć do uzyskania informacji o typie interfejsu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-520">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-521">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="70b32-521">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="70b32-522">Aby uzyskać więcej informacji na temat `IDispatch::GetTypeInfo`, zobacz bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="70b32-522">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="70b32-523">Dostęp z późnym wiązaniem za pomocą modelu COM <c>IDispatch</c> interfejs nie jest obsługiwany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-523">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _MethodBuilder.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _MethodBuilder.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_MethodBuilder::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="70b32-524">Wskazuje lokalizację, która odbiera informację o liczbie typów dostarczanych przez obiekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-524">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70b32-525">Pobiera informację o liczbie typów interfejsów, jakie zawiera obiekt (0 lub 1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-525">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-526">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="70b32-526">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="70b32-527">Aby uzyskać więcej informacji na temat `IDispatch::GetTypeInfoCount`, zobacz bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="70b32-527">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="70b32-528">Dostęp z późnym wiązaniem za pomocą modelu COM <c>IDispatch</c> interfejs nie jest obsługiwany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-528">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBuilder.Invoke">
      <MemberSignature Language="C#" Value="void _MethodBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodBuilder.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _MethodBuilder.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodBuilder.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_MethodBuilder::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="70b32-529">Określa element członkowski.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-529">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="70b32-530">Zarezerwowane do użytku w przyszłości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-530">Reserved for future use.</span>
          </span>
          <span data-ttu-id="70b32-531">Musi być wartością IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-531">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="70b32-532">Ustawienia regionalne kontekstu, w którym można interpretować argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-532">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="70b32-533">Flagi opisujące kontekst wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-533">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="70b32-534">Wskaźnik do struktury zawierający tablicę argumentów tablicy argumentu identyfikator DISPID dla argumentów nazwanych i liczbie liczba elementów w tablicach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-534">Pointer to a structure containing an array of arguments, an array of argument DispIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="70b32-535">Wskaźnik miejsca, gdzie ma być przechowywany wynik.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-535">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="70b32-536">Wskaźnik do struktury, która zawiera informacje o wyjątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-536">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="70b32-537">Indeks pierwszego argumentu, który zawiera błąd.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-537">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70b32-538">Umożliwia dostęp do właściwości i metod udostępnianych przez obiekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-538">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70b32-539">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="70b32-539">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="70b32-540">Aby uzyskać więcej informacji na temat `IDispatch::Invoke`, zobacz bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="70b32-540">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="70b32-541">Dostęp z późnym wiązaniem za pomocą modelu COM <c>IDispatch</c> interfejs nie jest obsługiwany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-541">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="methodBuilder.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="70b32-542">Zwraca to <see langword="MethodBuilder" /> wystąpienia jako ciąg.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-542">Returns this <see langword="MethodBuilder" /> instance as a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="70b32-543">Zwraca ciąg zawierający nazwę, atrybuty, podpis metody, wyjątków i podpisu lokalnego tej metody następuje bieżący strumień język pośredni (MSIL) firmy Microsoft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70b32-543">Returns a string containing the name, attributes, method signature, exceptions, and local signature of this method followed by the current Microsoft intermediate language (MSIL) stream.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>