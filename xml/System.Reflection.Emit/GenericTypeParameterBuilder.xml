<Type Name="GenericTypeParameterBuilder" FullName="System.Reflection.Emit.GenericTypeParameterBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5a3a84ca39ab0b12475d0b12109c4b677053a61a" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48645772" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class GenericTypeParameterBuilder : System.Reflection.TypeInfo" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit GenericTypeParameterBuilder extends System.Reflection.TypeInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.GenericTypeParameterBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class GenericTypeParameterBuilder&#xA;Inherits TypeInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class GenericTypeParameterBuilder sealed : System::Reflection::TypeInfo" />
  <TypeSignature Language="F#" Value="type GenericTypeParameterBuilder = class&#xA;    inherit TypeInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.TypeInfo</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netcore-2.0">System.Type</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="5c3db-101">Definiuje i tworzy parametrów typu genetycznego definiowane dynamicznie typy ogólne i metody.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5c3db-101">Defines and creates generic type parameters for dynamically defined generic types and methods.</span>
      </span>
      <span data-ttu-id="5c3db-102">Klasa ta nie może być dziedziczona.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5c3db-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-103">Możesz uzyskać tablicę <xref:System.Reflection.Emit.GenericTypeParameterBuilder> obiektów przy użyciu <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> metodę, aby dodać parametry typu do typu dynamicznego, co typ ogólny, lub za pomocą <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> metodę, aby dodać parametry typu metody dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="5c3db-103">You can get an array of <xref:System.Reflection.Emit.GenericTypeParameterBuilder> objects by using the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> method to add type parameters to a dynamic type, thus making it a generic type, or by using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> method to add type parameters to a dynamic method.</span></span> <span data-ttu-id="5c3db-104">Użyj <xref:System.Reflection.Emit.GenericTypeParameterBuilder> obiekty, aby dodać ograniczeń do parametrów typu.</span><span class="sxs-lookup"><span data-stu-id="5c3db-104">Use the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> objects to add constraints to the type parameters.</span></span> <span data-ttu-id="5c3db-105">Ograniczenia są trzy typy:</span><span class="sxs-lookup"><span data-stu-id="5c3db-105">Constraints are of three kinds:</span></span>  
  
-   <span data-ttu-id="5c3db-106">Ograniczenia typu podstawowego określa, że dowolny typ przypisany do parametru typu generycznego muszą pochodzić z określonego typu podstawowego.</span><span class="sxs-lookup"><span data-stu-id="5c3db-106">The base type constraint specifies that any type assigned to the generic type parameter must derive from a particular base type.</span></span> <span data-ttu-id="5c3db-107">Ustaw to ograniczenie, używając <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5c3db-107">Set this constraint by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint%2A> method.</span></span>  
  
-   <span data-ttu-id="5c3db-108">Ograniczenia interfejsu określa, że dowolny typ przypisany do parametru typu generycznego musi implementować konkretnego interfejsu.</span><span class="sxs-lookup"><span data-stu-id="5c3db-108">An interface constraint specifies that any type assigned to the generic type parameter must implement a particular interface.</span></span> <span data-ttu-id="5c3db-109">Ustawianie ograniczeń interfejsu za pomocą <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5c3db-109">Set the interface constraints by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints%2A> method.</span></span>  
  
-   <span data-ttu-id="5c3db-110">Ograniczenia specjalne określić dowolny typ przypisany do parametru typu ogólnego musi mieć domyślnego konstruktora, musi być typem referencyjnym lub musi być typem wartości.</span><span class="sxs-lookup"><span data-stu-id="5c3db-110">Special constraints specify that any type assigned to the generic type parameter must have a default constructor, must be a reference type, or must be a value type.</span></span> <span data-ttu-id="5c3db-111">Ustaw specjalne ograniczenia dla parametru typu przy użyciu <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5c3db-111">Set the special constraints for a type parameter by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A> method.</span></span>  
  
 <span data-ttu-id="5c3db-112">Ograniczenia interfejsu i ograniczeń specjalnych nie można pobrać przy użyciu metod <xref:System.Reflection.Emit.GenericTypeParameterBuilder> klasy.</span><span class="sxs-lookup"><span data-stu-id="5c3db-112">Interface constraints and special constraints cannot be retrieved using methods of the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> class.</span></span> <span data-ttu-id="5c3db-113">Po utworzeniu typu ogólnego, który zawiera parametrów typu można użyć jego <xref:System.Type> ograniczenia odbicia.</span><span class="sxs-lookup"><span data-stu-id="5c3db-113">Once you have created the generic type that contains the type parameters, you can use its <xref:System.Type> object to reflect the constraints.</span></span> <span data-ttu-id="5c3db-114">Użyj <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> metodę, aby uzyskać parametry typu oraz dla każdego parametru typu <xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=nameWithType> metodę, aby uzyskać typ podstawowy ograniczenia i ograniczenia interfejsu i <xref:System.Type.GenericParameterAttributes%2A?displayProperty=nameWithType> właściwości, które można pobrać ograniczeń specjalnych.</span><span class="sxs-lookup"><span data-stu-id="5c3db-114">Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method to get the type parameters, and for each type parameter use the <xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=nameWithType> method to get the base type constraint and interface constraints, and the <xref:System.Type.GenericParameterAttributes%2A?displayProperty=nameWithType> property to get the special constraints.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c3db-115">Poniższy kod tworzy typ ogólny z dwoma parametrami typu i zapisuje je w zestawie GenericEmitExample1.dll.</span><span class="sxs-lookup"><span data-stu-id="5c3db-115">The following code example creates a generic type with two type parameters, and saves them in the assembly GenericEmitExample1.dll.</span></span> <span data-ttu-id="5c3db-116">Możesz użyć [Ildasm.exe (dezasembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) wyświetlanie wygenerowanych typów.</span><span class="sxs-lookup"><span data-stu-id="5c3db-116">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to view the generated types.</span></span> <span data-ttu-id="5c3db-117">Aby uzyskać bardziej szczegółowy opis etapy definiowania dynamicznych typu ogólnego, zobacz [porady: Definiowanie typu ogólnego przy użyciu emisji odbicia](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="5c3db-117">For a more detailed explanation of the steps involved in defining a dynamic generic type, see [How to: Define a Generic Type with Reflection Emit](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md).</span></span>  
  
 [!code-cpp[EmitGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR/EmitGenericType/CPP/source.cpp#1)]
 [!code-csharp[EmitGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR/EmitGenericType/CS/source.cs#1)]
 [!code-vb[EmitGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EmitGenericType/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])" />
    <related type="Article" href="http://msdn.microsoft.com/library/07d5f01a-7b5b-40ea-9b15-f21561098fe4">
      <span data-ttu-id="5c3db-118">Porady: definiowanie typu ogólnego przy użyciu emisji odbicia</span>
      <span class="sxs-lookup">
        <span data-stu-id="5c3db-118">How to: Define a Generic Type with Reflection Emit</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected GenericTypeParameterBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; GenericTypeParameterBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public override System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Assembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Assembly ^ Assembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Assembly : System.Reflection.Assembly" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.Assembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-119">Pobiera <see cref="T:System.Reflection.Assembly" /> należy obiekt reprezentujący zestaw dynamiczny, który zawiera definicji typu ogólnego, parametr typu w bieżącym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-119">Gets an <see cref="T:System.Reflection.Assembly" /> object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5c3db-120">
            <see cref="T:System.Reflection.Assembly" /> Należy obiekt reprezentujący zestaw dynamiczny, który zawiera definicji typu ogólnego, parametr typu w bieżącym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-120">An <see cref="T:System.Reflection.Assembly" /> object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public override string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AssemblyQualifiedName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ AssemblyQualifiedName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyQualifiedName : string" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-121">Pobiera <see langword="null" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-121">Gets <see langword="null" /> in all cases.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5c3db-122">Odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic) we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-122">A null reference (<see langword="Nothing" /> in Visual Basic) in all cases.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-123">Istnieje nie kwalifikowana nazwa zestawu dla parametrów typu, ponieważ ich zakres jest ograniczony do typu ogólnego, który je deklaruje.</span><span class="sxs-lookup"><span data-stu-id="5c3db-123">There is no assembly-qualified name for type parameters because their scope is limited to the generic type that declares them.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.TypeAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Attributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::TypeAttributes Attributes { System::Reflection::TypeAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.TypeAttributes" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public override Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property BaseType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ BaseType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseType : Type" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.BaseType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-124">Pobiera typ bazowy ograniczenie bieżącego parametru typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-124">Gets the base type constraint of the current generic type parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5c3db-125">A <see cref="T:System.Type" /> obiekt, który reprezentuje typ podstawowy ograniczenia parametru typu ogólnego lub <see langword="null" /> Jeśli parametr typu bez ograniczenia typu podstawowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-125">A <see cref="T:System.Type" /> object that represents the base type constraint of the generic type parameter, or <see langword="null" /> if the type parameter has no base type constraint.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-126">Aby ustawić ograniczenia typu podstawowego, użyj <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5c3db-126">To set the base type constraint, use the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsGenericParameters">
      <MemberSignature Language="C#" Value="public override bool ContainsGenericParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsGenericParameters" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ContainsGenericParameters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ContainsGenericParameters { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ContainsGenericParameters : bool" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-127">Pobiera <see langword="true" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-127">Gets <see langword="true" /> in all cases.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5c3db-128">
            <see langword="true" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-128">
              <see langword="true" /> in all cases.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-129">A <xref:System.Reflection.Emit.GenericTypeParameterBuilder> obiekt zawsze reprezentuje parametr typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="5c3db-129">A <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object always represents a generic type parameter.</span></span> <span data-ttu-id="5c3db-130">Wartość <xref:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters%2A> właściwość odzwierciedla fakt, a nie oznacza niczego więcej o wszelkich argument typu ogólnego, które mogą być przypisane do parametru typu.</span><span class="sxs-lookup"><span data-stu-id="5c3db-130">The value of the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters%2A> property reflects that fact and does not imply anything about any generic type argument that might be assigned to the type parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringMethod">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodBase DeclaringMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodBase DeclaringMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringMethod As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodBase ^ DeclaringMethod { System::Reflection::MethodBase ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringMethod : System.Reflection.MethodBase" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-131">Pobiera <see cref="T:System.Reflection.MethodInfo" /> deklarującego metody reprezentująca Jeśli bieżące <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> reprezentuje parametr typu metody ogólnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-131">Gets a <see cref="T:System.Reflection.MethodInfo" /> that represents the declaring method, if the current <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> represents a type parameter of a generic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5c3db-132">A <see cref="T:System.Reflection.MethodInfo" /> deklarującego metody reprezentująca Jeśli bieżące <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> reprezentuje parametr typu metody ogólnej; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-132">A <see cref="T:System.Reflection.MethodInfo" /> that represents the declaring method, if the current <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> represents a type parameter of a generic method; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-133">Jeśli <xref:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod%2A> właściwość nie jest `null`, deklarującego metody jest definicją metody ogólnej i `DeclaringMethod.IsGenericMethodDefinition` jest `true`.</span><span class="sxs-lookup"><span data-stu-id="5c3db-133">If the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod%2A> property is not `null`, then the declaring method is a generic method definition and `DeclaringMethod.IsGenericMethodDefinition` is `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-134">Pobiera definicji typu ogólnego lub metody rodzajowej definicji, do której należy dany parametr typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-134">Gets the generic type definition or generic method definition to which the generic type parameter belongs.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5c3db-135">Jeśli parametr typu należy do typu ogólnego, <see cref="T:System.Type" /> obiekt reprezentujący ogólnego typu; Jeśli parametr typu należy do metody rodzajowej, <see cref="T:System.Type" /> reprezentujący obiekt, który typu zadeklarowana tej metody rodzajowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-135">If the type parameter belongs to a generic type, a <see cref="T:System.Type" /> object representing that generic type; if the type parameter belongs to a generic method, a <see cref="T:System.Type" /> object representing that type that declared that generic method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-136">Typ deklarujący nie jest zawsze typem ogólnym.</span><span class="sxs-lookup"><span data-stu-id="5c3db-136">The declaring type is not necessarily a generic type.</span></span> <span data-ttu-id="5c3db-137">Jeśli bieżący parametr typu należy do metody rodzajowej, typu, w którym zadeklarowany jest metoda nie może być ogólny.</span><span class="sxs-lookup"><span data-stu-id="5c3db-137">If the current type parameter belongs to a generic method, the type in which the method is declared might not be generic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="genericTypeParameterBuilder.Equals o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="5c3db-138">Obiekt do porównania z bieżącym wystąpieniem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-138">The object to be compared with the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-139">Sprawdza, czy dany obiekt jest wystąpieniem <see langword="EventToken" /> i jest taki sam, jak bieżące wystąpienie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-139">Tests whether the given object is an instance of <see langword="EventToken" /> and is equal to the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-140">Zwraca <see langword="true" /> Jeśli <paramref name="o" /> jest wystąpieniem <see langword="EventToken" /> i równości bieżącego wystąpienia; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-140">Returns <see langword="true" /> if <paramref name="o" /> is an instance of <see langword="EventToken" /> and equals the current instance; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public override string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.FullName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.FullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-141">Pobiera <see langword="null" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-141">Gets <see langword="null" /> in all cases.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5c3db-142">Odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic) we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-142">A null reference (<see langword="Nothing" /> in Visual Basic) in all cases.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-143">Parametru typu generycznego nie ma pełną nazwą, ponieważ jej zakres jest ograniczony do typu ogólnego, który deklaruje ją.</span><span class="sxs-lookup"><span data-stu-id="5c3db-143">A generic type parameter does not have a full name, because its scope is limited to the generic type that declares it.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericParameterAttributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.GenericParameterAttributes GenericParameterAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.GenericParameterAttributes GenericParameterAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GenericParameterAttributes As GenericParameterAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::GenericParameterAttributes GenericParameterAttributes { System::Reflection::GenericParameterAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericParameterAttributes : System.Reflection.GenericParameterAttributes" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.GenericParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-144">Pobiera kombinacji <see cref="T:System.Reflection.GenericParameterAttributes" /> flagi opisujące kowariancji i ograniczeń specjalnych bieżącego parametru typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-144">Gets a combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> flags that describe the covariance and special constraints of the current generic type parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5c3db-145">Bitowa kombinacja wartości opisujące kowariancji i ograniczeń specjalnych bieżącego parametru typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-145">A bitwise combination of values that describes the covariance and special constraints of the current generic type parameter.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericParameterPosition">
      <MemberSignature Language="C#" Value="public override int GenericParameterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GenericParameterPosition" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GenericParameterPosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int GenericParameterPosition { int get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericParameterPosition : int" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-146">Pobiera pozycję parametr typu na liście parametrów typu dla typu ogólnego lub metody, która zadeklarowana jako parametr.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-146">Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5c3db-147">Pozycja parametru typu na liście parametrów typu dla typu ogólnego lub metody, która zadeklarowana jako parametr.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-147">The position of the type parameter in the type parameter list of the generic type or method that declared the parameter.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/07d5f01a-7b5b-40ea-9b15-f21561098fe4">
          <span data-ttu-id="5c3db-148">Porady: definiowanie typu ogólnego przy użyciu emisji odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-148">How to: Define a Generic Type with Reflection Emit</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GenericTypeArguments">
      <MemberSignature Language="C#" Value="public override Type[] GenericTypeArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] GenericTypeArguments" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericTypeArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GenericTypeArguments As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;Type ^&gt; ^ GenericTypeArguments { cli::array &lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericTypeArguments : Type[]" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.GenericTypeArguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArrayRank">
      <MemberSignature Language="C#" Value="public override int GetArrayRank ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetArrayRank() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetArrayRank" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetArrayRank () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetArrayRank();" />
      <MemberSignature Language="F#" Value="override this.GetArrayRank : unit -&gt; int" Usage="genericTypeParameterBuilder.GetArrayRank " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttributeFlagsImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.TypeAttributes GetAttributeFlagsImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Reflection.TypeAttributes GetAttributeFlagsImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetAttributeFlagsImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetAttributeFlagsImpl () As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::TypeAttributes GetAttributeFlagsImpl();" />
      <MemberSignature Language="F#" Value="override this.GetAttributeFlagsImpl : unit -&gt; System.Reflection.TypeAttributes" Usage="genericTypeParameterBuilder.GetAttributeFlagsImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructorImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.ConstructorInfo GetConstructorImpl(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::ConstructorInfo ^ GetConstructorImpl(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="override this.GetConstructorImpl : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="genericTypeParameterBuilder.GetConstructorImpl (bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public override System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetConstructors (bindingAttr As BindingFlags) As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetConstructors : System.Reflection.BindingFlags -&gt; System.Reflection.ConstructorInfo[]" Usage="genericTypeParameterBuilder.GetConstructors bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="5c3db-149">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-149">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-150">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-150">Not supported for incomplete generic type parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-151">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-151">Not supported for incomplete generic type parameters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-152">Ta metoda nie jest obsługiwana dla parametrów typu genetycznego niekompletne.</span><span class="sxs-lookup"><span data-stu-id="5c3db-152">This method is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="5c3db-153">Pobieranie parametru typu z definicji typu ogólnego ukończone, a następnie użyj odbicia w typie pobrane.</span><span class="sxs-lookup"><span data-stu-id="5c3db-153">Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5c3db-154">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-154">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-155">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-155">Not supported for incomplete generic type parameters.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : bool -&gt; obj[]" Usage="genericTypeParameterBuilder.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="5c3db-156">Określa, czy przeszukać łańcuch dziedziczenia tego elementu członkowskiego w celu znalezienia atrybutów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-156">Specifies whether to search this member's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-157">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-157">Not supported for incomplete generic type parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-158">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-158">Not supported for incomplete generic type parameters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-159">Ta metoda nie jest obsługiwana dla parametrów typu genetycznego niekompletne.</span><span class="sxs-lookup"><span data-stu-id="5c3db-159">This method is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="5c3db-160">Pobieranie parametru typu z definicji typu ogólnego ukończone, a następnie użyj odbicia w typie pobrane.</span><span class="sxs-lookup"><span data-stu-id="5c3db-160">Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5c3db-161">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-161">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : Type * bool -&gt; obj[]" Usage="genericTypeParameterBuilder.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="5c3db-162">Typ atrybutu do wyszukiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-162">The type of attribute to search for.</span>
          </span>
          <span data-ttu-id="5c3db-163">Zwracane są tylko atrybuty, które są przypisane do tego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-163">Only attributes that are assignable to this type are returned.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="5c3db-164">Określa, czy przeszukać łańcuch dziedziczenia tego elementu członkowskiego w celu znalezienia atrybutów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-164">Specifies whether to search this member's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-165">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-165">Not supported for incomplete generic type parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-166">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-166">Not supported for incomplete generic type parameters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-167">Ta metoda nie jest obsługiwana dla parametrów typu genetycznego niekompletne.</span><span class="sxs-lookup"><span data-stu-id="5c3db-167">This method is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="5c3db-168">Pobieranie parametru typu z definicji typu ogólnego ukończone, a następnie użyj odbicia w typie pobrane.</span><span class="sxs-lookup"><span data-stu-id="5c3db-168">Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5c3db-169">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-169">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public override Type GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetElementType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetElementType();" />
      <MemberSignature Language="F#" Value="override this.GetElementType : unit -&gt; Type" Usage="genericTypeParameterBuilder.GetElementType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-170">Zgłasza <see cref="T:System.NotSupportedException" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-170">Throws a <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-171">Typ, określane przez bieżący typ tablicy, typu wskaźnika lub <see langword="ByRef" /> wpisz; lub <see langword="null" /> Jeśli bieżący typ nie jest typem tablicy, nie jest typem wskaźnika i nie jest przekazywany przez odwołanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-171">The type referred to by the current array type, pointer type, or <see langword="ByRef" /> type; or <see langword="null" /> if the current type is not an array type, is not a pointer type, and is not passed by reference.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-172">Parametr typu ogólnego jest symbolem zastępczym dla typu.</span><span class="sxs-lookup"><span data-stu-id="5c3db-172">A generic type parameter is a placeholder for a type.</span></span> <span data-ttu-id="5c3db-173">Ponieważ tego typu nie może być znane z wyprzedzeniem, nie ma możliwości wiedzieć, czy ma typ elementu lub co może być typu elementu.</span><span class="sxs-lookup"><span data-stu-id="5c3db-173">Because that type cannot be known in advance, there is no way to know whether it has an element type or what that element type might be.</span></span> <span data-ttu-id="5c3db-174">Powrotnych wartość będzie wynosić może być mylące, więc metoda zgłasza <xref:System.NotSupportedException>.</span><span class="sxs-lookup"><span data-stu-id="5c3db-174">Any return value would be misleading, so the method throws a <xref:System.NotSupportedException>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5c3db-175">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-175">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvent (name As String, bindingAttr As BindingFlags) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::EventInfo ^ GetEvent(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetEvent : string * System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo" Usage="genericTypeParameterBuilder.GetEvent (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="5c3db-176">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-176">Not supported.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="5c3db-177">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-177">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-178">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-178">Not supported for incomplete generic type parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-179">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-179">Not supported for incomplete generic type parameters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-180">Ta metoda nie jest obsługiwana dla parametrów typu genetycznego niekompletne.</span><span class="sxs-lookup"><span data-stu-id="5c3db-180">This method is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="5c3db-181">Pobieranie parametru typu z definicji typu ogólnego ukończone, a następnie użyj odbicia w typie pobrane.</span><span class="sxs-lookup"><span data-stu-id="5c3db-181">Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5c3db-182">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-182">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvents">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-183">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-183">Not supported for incomplete generic type parameters.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo[] GetEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo[] GetEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvents () As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents();" />
      <MemberSignature Language="F#" Value="override this.GetEvents : unit -&gt; System.Reflection.EventInfo[]" Usage="genericTypeParameterBuilder.GetEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-184">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-184">Not supported for incomplete generic type parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-185">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-185">Not supported for incomplete generic type parameters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-186">Ta metoda nie jest obsługiwana dla parametrów typu genetycznego niekompletne.</span><span class="sxs-lookup"><span data-stu-id="5c3db-186">This method is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="5c3db-187">Pobieranie parametru typu z definicji typu ogólnego ukończone, a następnie użyj odbicia w typie pobrane.</span><span class="sxs-lookup"><span data-stu-id="5c3db-187">Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5c3db-188">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-188">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvents (bindingAttr As BindingFlags) As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetEvents : System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo[]" Usage="genericTypeParameterBuilder.GetEvents bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="5c3db-189">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-189">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-190">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-190">Not supported for incomplete generic type parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-191">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-191">Not supported for incomplete generic type parameters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-192">Ta metoda nie jest obsługiwana dla parametrów typu genetycznego niekompletne.</span><span class="sxs-lookup"><span data-stu-id="5c3db-192">This method is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="5c3db-193">Pobieranie parametru typu z definicji typu ogólnego ukończone, a następnie użyj odbicia w typie pobrane.</span><span class="sxs-lookup"><span data-stu-id="5c3db-193">Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5c3db-194">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-194">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public override System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetField (name As String, bindingAttr As BindingFlags) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::FieldInfo ^ GetField(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetField : string * System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo" Usage="genericTypeParameterBuilder.GetField (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="5c3db-195">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-195">Not supported.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="5c3db-196">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-196">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-197">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-197">Not supported for incomplete generic type parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-198">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-198">Not supported for incomplete generic type parameters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-199">Ta metoda nie jest obsługiwana dla parametrów typu genetycznego niekompletne.</span><span class="sxs-lookup"><span data-stu-id="5c3db-199">This method is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="5c3db-200">Pobieranie parametru typu z definicji typu ogólnego ukończone, a następnie użyj odbicia w typie pobrane.</span><span class="sxs-lookup"><span data-stu-id="5c3db-200">Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5c3db-201">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-201">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public override System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFields (bindingAttr As BindingFlags) As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetFields : System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo[]" Usage="genericTypeParameterBuilder.GetFields bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="5c3db-202">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-202">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-203">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-203">Not supported for incomplete generic type parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-204">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-204">Not supported for incomplete generic type parameters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-205">Ta metoda nie jest obsługiwana dla parametrów typu genetycznego niekompletne.</span><span class="sxs-lookup"><span data-stu-id="5c3db-205">This method is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="5c3db-206">Pobieranie parametru typu z definicji typu ogólnego ukończone, a następnie użyj odbicia w typie pobrane.</span><span class="sxs-lookup"><span data-stu-id="5c3db-206">Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5c3db-207">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-207">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetGenericArguments">
      <MemberSignature Language="C#" Value="public override Type[] GetGenericArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetGenericArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGenericArguments () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetGenericArguments();" />
      <MemberSignature Language="F#" Value="override this.GetGenericArguments : unit -&gt; Type[]" Usage="genericTypeParameterBuilder.GetGenericArguments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-208">Nie jest prawidłowy dla parametrów typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-208">Not valid for generic type parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-209">Nie jest prawidłowy dla parametrów typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-209">Not valid for generic type parameters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-210">W zbudowany typ typ, który jest przypisany do parametru typu ogólnego może być typu rodzajowego, ale parametr typu, sama nie jest ogólna.</span><span class="sxs-lookup"><span data-stu-id="5c3db-210">In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5c3db-211">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-211">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetGenericParameterConstraints">
      <MemberSignature Language="C#" Value="public override Type[] GetGenericParameterConstraints ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetGenericParameterConstraints() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericParameterConstraints" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGenericParameterConstraints () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetGenericParameterConstraints();" />
      <MemberSignature Language="F#" Value="override this.GetGenericParameterConstraints : unit -&gt; Type[]" Usage="genericTypeParameterBuilder.GetGenericParameterConstraints " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public override Type GetGenericTypeDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetGenericTypeDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGenericTypeDefinition () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetGenericTypeDefinition();" />
      <MemberSignature Language="F#" Value="override this.GetGenericTypeDefinition : unit -&gt; Type" Usage="genericTypeParameterBuilder.GetGenericTypeDefinition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-212">Nie jest prawidłowy dla parametrów typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-212">Not valid for generic type parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-213">Nie jest prawidłowy dla parametrów typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-213">Not valid for generic type parameters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-214">W zbudowany typ typ, który jest przypisany do parametru typu ogólnego może być typu rodzajowego, ale parametr typu, sama nie jest ogólna.</span><span class="sxs-lookup"><span data-stu-id="5c3db-214">In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5c3db-215">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-215">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="genericTypeParameterBuilder.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-216">Zwraca wartość skrótu 32-bitową liczbę całkowitą dla bieżącego wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-216">Returns a 32-bit integer hash code for the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-217">Kod skrótu 32-bitową liczbę całkowitą.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-217">A 32-bit integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public override Type GetInterface (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetInterface(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterface (name As String, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetInterface(System::String ^ name, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="override this.GetInterface : string * bool -&gt; Type" Usage="genericTypeParameterBuilder.GetInterface (name, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="5c3db-218">Nazwa interfejsu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-218">The name of the interface.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="5c3db-219">
            <see langword="true" /> Aby wyszukać bez względu na wielkości liter; <see langword="false" /> się wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-219">
              <see langword="true" /> to search without regard for case; <see langword="false" /> to make a case-sensitive search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-220">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-220">Not supported for incomplete generic type parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-221">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-221">Not supported for incomplete generic type parameters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-222">Ta metoda nie jest obsługiwana dla parametrów typu genetycznego niekompletne.</span><span class="sxs-lookup"><span data-stu-id="5c3db-222">This method is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="5c3db-223">Pobieranie parametru typu z definicji typu ogólnego ukończone, a następnie użyj odbicia w typie pobrane.</span><span class="sxs-lookup"><span data-stu-id="5c3db-223">Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5c3db-224">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-224">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaceMap">
      <MemberSignature Language="C#" Value="public override System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterfaceMap (interfaceType As Type) As InterfaceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::InterfaceMapping GetInterfaceMap(Type ^ interfaceType);" />
      <MemberSignature Language="F#" Value="override this.GetInterfaceMap : Type -&gt; System.Reflection.InterfaceMapping" Usage="genericTypeParameterBuilder.GetInterfaceMap interfaceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.InterfaceMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType">
          <span data-ttu-id="5c3db-225">A <see cref="T:System.Type" /> obiekt, który reprezentuje typ interfejsu, dla którego ma zostać pobrane mapowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-225">A <see cref="T:System.Type" /> object that represents the interface type for which the mapping is to be retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-226">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-226">Not supported for incomplete generic type parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-227">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-227">Not supported for incomplete generic type parameters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-228">Ta metoda nie jest obsługiwana dla parametrów typu genetycznego niekompletne.</span><span class="sxs-lookup"><span data-stu-id="5c3db-228">This method is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="5c3db-229">Pobieranie parametru typu z definicji typu ogólnego ukończone, a następnie użyj odbicia w typie pobrane.</span><span class="sxs-lookup"><span data-stu-id="5c3db-229">Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5c3db-230">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-230">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaces">
      <MemberSignature Language="C#" Value="public override Type[] GetInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetInterfaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterfaces () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetInterfaces();" />
      <MemberSignature Language="F#" Value="override this.GetInterfaces : unit -&gt; Type[]" Usage="genericTypeParameterBuilder.GetInterfaces " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-231">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-231">Not supported for incomplete generic type parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-232">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-232">Not supported for incomplete generic type parameters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-233">Ta metoda nie jest obsługiwana dla parametrów typu genetycznego niekompletne.</span><span class="sxs-lookup"><span data-stu-id="5c3db-233">This method is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="5c3db-234">Pobieranie parametru typu z definicji typu ogólnego ukończone, a następnie użyj odbicia w typie pobrane.</span><span class="sxs-lookup"><span data-stu-id="5c3db-234">Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5c3db-235">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-235">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes type, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMember (name As String, type As MemberTypes, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetMember : string * System.Reflection.MemberTypes * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="genericTypeParameterBuilder.GetMember (name, type, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="5c3db-236">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-236">Not supported.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="5c3db-237">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-237">Not supported.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="5c3db-238">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-238">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-239">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-239">Not supported for incomplete generic type parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-240">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-240">Not supported for incomplete generic type parameters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-241">Ta metoda nie jest obsługiwana dla parametrów typu genetycznego niekompletne.</span><span class="sxs-lookup"><span data-stu-id="5c3db-241">This method is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="5c3db-242">Pobieranie parametru typu z definicji typu ogólnego ukończone, a następnie użyj odbicia w typie pobrane.</span><span class="sxs-lookup"><span data-stu-id="5c3db-242">Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5c3db-243">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-243">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMembers (bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetMembers : System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="genericTypeParameterBuilder.GetMembers bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="5c3db-244">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-244">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-245">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-245">Not supported for incomplete generic type parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-246">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-246">Not supported for incomplete generic type parameters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-247">Ta metoda nie jest obsługiwana dla parametrów typu genetycznego niekompletne.</span><span class="sxs-lookup"><span data-stu-id="5c3db-247">This method is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="5c3db-248">Pobieranie parametru typu z definicji typu ogólnego ukończone, a następnie użyj odbicia w typie pobrane.</span><span class="sxs-lookup"><span data-stu-id="5c3db-248">Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5c3db-249">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-249">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="override this.GetMethodImpl : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="genericTypeParameterBuilder.GetMethodImpl (name, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMethods (bindingAttr As BindingFlags) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetMethods : System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo[]" Usage="genericTypeParameterBuilder.GetMethods bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="5c3db-250">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-250">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-251">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-251">Not supported for incomplete generic type parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-252">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-252">Not supported for incomplete generic type parameters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-253">Ta metoda nie jest obsługiwana dla parametrów typu genetycznego niekompletne.</span><span class="sxs-lookup"><span data-stu-id="5c3db-253">This method is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="5c3db-254">Pobieranie parametru typu z definicji typu ogólnego ukończone, a następnie użyj odbicia w typie pobrane.</span><span class="sxs-lookup"><span data-stu-id="5c3db-254">Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5c3db-255">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-255">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public override Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetNestedType (name As String, bindingAttr As BindingFlags) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetNestedType(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetNestedType : string * System.Reflection.BindingFlags -&gt; Type" Usage="genericTypeParameterBuilder.GetNestedType (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="5c3db-256">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-256">Not supported.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="5c3db-257">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-257">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-258">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-258">Not supported for incomplete generic type parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-259">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-259">Not supported for incomplete generic type parameters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-260">Ta metoda nie jest obsługiwana dla parametrów typu genetycznego niekompletne.</span><span class="sxs-lookup"><span data-stu-id="5c3db-260">This method is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="5c3db-261">Pobieranie parametru typu z definicji typu ogólnego ukończone, a następnie użyj odbicia w typie pobrane.</span><span class="sxs-lookup"><span data-stu-id="5c3db-261">Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5c3db-262">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-262">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public override Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetNestedTypes (bindingAttr As BindingFlags) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetNestedTypes(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetNestedTypes : System.Reflection.BindingFlags -&gt; Type[]" Usage="genericTypeParameterBuilder.GetNestedTypes bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="5c3db-263">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-263">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-264">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-264">Not supported for incomplete generic type parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-265">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-265">Not supported for incomplete generic type parameters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-266">Ta metoda nie jest obsługiwana dla parametrów typu genetycznego niekompletne.</span><span class="sxs-lookup"><span data-stu-id="5c3db-266">This method is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="5c3db-267">Pobieranie parametru typu z definicji typu ogólnego ukończone, a następnie użyj odbicia w typie pobrane.</span><span class="sxs-lookup"><span data-stu-id="5c3db-267">Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5c3db-268">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-268">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public override System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetProperties (bindingAttr As BindingFlags) As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetProperties : System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo[]" Usage="genericTypeParameterBuilder.GetProperties bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="5c3db-269">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-269">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-270">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-270">Not supported for incomplete generic type parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-271">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-271">Not supported for incomplete generic type parameters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-272">Ta metoda nie jest obsługiwana dla parametrów typu genetycznego niekompletne.</span><span class="sxs-lookup"><span data-stu-id="5c3db-272">This method is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="5c3db-273">Pobieranie parametru typu z definicji typu ogólnego ukończone, a następnie użyj odbicia w typie pobrane.</span><span class="sxs-lookup"><span data-stu-id="5c3db-273">Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5c3db-274">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-274">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.PropertyInfo GetPropertyImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::PropertyInfo ^ GetPropertyImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="override this.GetPropertyImpl : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="genericTypeParameterBuilder.GetPropertyImpl (name, bindingAttr, binder, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GUID">
      <MemberSignature Language="C#" Value="public override Guid GUID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid GUID" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GUID As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Guid GUID { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.GUID : Guid" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.GUID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-275">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-275">Not supported for incomplete generic type parameters.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5c3db-276">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-276">Not supported for incomplete generic type parameters.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-277">Ta właściwość nie jest obsługiwana dla parametrów typu genetycznego niekompletne.</span><span class="sxs-lookup"><span data-stu-id="5c3db-277">This property is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="5c3db-278">Pobieranie parametru typu z definicji typu ogólnego ukończone, a następnie użyj odbicia w typie pobrane.</span><span class="sxs-lookup"><span data-stu-id="5c3db-278">Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5c3db-279">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-279">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="HasElementTypeImpl">
      <MemberSignature Language="C#" Value="protected override bool HasElementTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool HasElementTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.HasElementTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HasElementTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool HasElementTypeImpl();" />
      <MemberSignature Language="F#" Value="override this.HasElementTypeImpl : unit -&gt; bool" Usage="genericTypeParameterBuilder.HasElementTypeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public override object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ namedParameters);" />
      <MemberSignature Language="F#" Value="override this.InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Reflection.ParameterModifier[] * System.Globalization.CultureInfo * string[] -&gt; obj" Usage="genericTypeParameterBuilder.InvokeMember (name, invokeAttr, binder, target, args, modifiers, culture, namedParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="5c3db-280">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-280">Not supported.</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="5c3db-281">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-281">Not supported.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="5c3db-282">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-282">Not supported.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="5c3db-283">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-283">Not supported.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="5c3db-284">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-284">Not supported.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="5c3db-285">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-285">Not supported.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="5c3db-286">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-286">Not supported.</span>
          </span>
        </param>
        <param name="namedParameters">
          <span data-ttu-id="5c3db-287">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-287">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-288">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-288">Not supported for incomplete generic type parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-289">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-289">Not supported for incomplete generic type parameters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-290">Ta metoda nie jest obsługiwana dla parametrów typu genetycznego niekompletne.</span><span class="sxs-lookup"><span data-stu-id="5c3db-290">This method is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="5c3db-291">Pobieranie parametru typu z definicji typu ogólnego ukończone, a następnie użyj odbicia w typie pobrane.</span><span class="sxs-lookup"><span data-stu-id="5c3db-291">Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5c3db-292">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-292">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsArrayImpl">
      <MemberSignature Language="C#" Value="protected override bool IsArrayImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsArrayImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsArrayImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsArrayImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsArrayImpl();" />
      <MemberSignature Language="F#" Value="override this.IsArrayImpl : unit -&gt; bool" Usage="genericTypeParameterBuilder.IsArrayImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAssignableFrom">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-293">Zgłasza <see cref="T:System.NotSupportedException" /> wyjątku we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-293">Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public override bool IsAssignableFrom (System.Reflection.TypeInfo typeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsAssignableFrom(class System.Reflection.TypeInfo typeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Reflection.TypeInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsAssignableFrom(System::Reflection::TypeInfo ^ typeInfo);" />
      <MemberSignature Language="F#" Value="override this.IsAssignableFrom : System.Reflection.TypeInfo -&gt; bool" Usage="genericTypeParameterBuilder.IsAssignableFrom typeInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeInfo" Type="System.Reflection.TypeInfo" />
      </Parameters>
      <Docs>
        <param name="typeInfo">
          <span data-ttu-id="5c3db-294">Obiekt do przetestowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-294">The object to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-295">Zgłasza <see cref="T:System.NotSupportedException" /> wyjątku we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-295">Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-296">Zgłasza <see cref="T:System.NotSupportedException" /> wyjątku we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-296">Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-297">Ta metoda nie jest obsługiwana dla parametrów typu genetycznego niekompletne.</span><span class="sxs-lookup"><span data-stu-id="5c3db-297">This method is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="5c3db-298">Pobieranie parametru typu z definicji typu ogólnego ukończone, a następnie użyj odbicia w typie pobrane.</span><span class="sxs-lookup"><span data-stu-id="5c3db-298">Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5c3db-299">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-299">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public override bool IsAssignableFrom (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsAssignableFrom(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsAssignableFrom (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsAssignableFrom(Type ^ c);" />
      <MemberSignature Language="F#" Value="override this.IsAssignableFrom : Type -&gt; bool" Usage="genericTypeParameterBuilder.IsAssignableFrom c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="5c3db-300">Obiekt do przetestowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-300">The object to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-301">Zgłasza <see cref="T:System.NotSupportedException" /> wyjątku we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-301">Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-302">Zgłasza <see cref="T:System.NotSupportedException" /> wyjątku we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-302">Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-303">Ta metoda nie jest obsługiwana dla parametrów typu genetycznego niekompletne.</span><span class="sxs-lookup"><span data-stu-id="5c3db-303">This method is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="5c3db-304">Pobieranie parametru typu z definicji typu ogólnego ukończone, a następnie użyj odbicia w typie pobrane.</span><span class="sxs-lookup"><span data-stu-id="5c3db-304">Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5c3db-305">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-305">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsByRefImpl">
      <MemberSignature Language="C#" Value="protected override bool IsByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsByRefImpl();" />
      <MemberSignature Language="F#" Value="override this.IsByRefImpl : unit -&gt; bool" Usage="genericTypeParameterBuilder.IsByRefImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsByRefLike">
      <MemberSignature Language="C#" Value="public override bool IsByRefLike { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRefLike" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefLike" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsByRefLike As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsByRefLike { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsByRefLike : bool" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefLike" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCOMObjectImpl">
      <MemberSignature Language="C#" Value="protected override bool IsCOMObjectImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsCOMObjectImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsCOMObjectImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsCOMObjectImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsCOMObjectImpl();" />
      <MemberSignature Language="F#" Value="override this.IsCOMObjectImpl : unit -&gt; bool" Usage="genericTypeParameterBuilder.IsCOMObjectImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstructedGenericType">
      <MemberSignature Language="C#" Value="public override bool IsConstructedGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructedGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsConstructedGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructedGenericType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConstructedGenericType : bool" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-306">Pobiera wartość wskazującą, czy ten obiekt reprezentuje zbudowany typ ogólny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-306">Gets a value that indicates whether this object represents a constructed generic type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5c3db-307">
            <see langword="true" /> Jeśli ten obiekt reprezentuje zbudowany typ ogólny; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-307">
              <see langword="true" /> if this object represents a constructed generic type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.IsDefined : Type * bool -&gt; bool" Usage="genericTypeParameterBuilder.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="5c3db-308">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-308">Not supported.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="5c3db-309">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-309">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-310">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-310">Not supported for incomplete generic type parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-311">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-311">Not supported for incomplete generic type parameters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-312">Ta metoda nie jest obsługiwana dla parametrów typu genetycznego niekompletne.</span><span class="sxs-lookup"><span data-stu-id="5c3db-312">This method is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="5c3db-313">Pobieranie parametru typu z definicji typu ogólnego ukończone, a następnie użyj odbicia w typie pobrane.</span><span class="sxs-lookup"><span data-stu-id="5c3db-313">Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5c3db-314">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-314">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public override bool IsEnum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEnum { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnum : bool" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.IsEnum" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericParameter">
      <MemberSignature Language="C#" Value="public override bool IsGenericParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericParameter : bool" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-315">Pobiera <see langword="true" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-315">Gets <see langword="true" /> in all cases.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5c3db-316">
            <see langword="true" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-316">
              <see langword="true" /> in all cases.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericType">
      <MemberSignature Language="C#" Value="public override bool IsGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericType : bool" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-317">Zwraca <see langword="false" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-317">Returns <see langword="false" /> in all cases.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5c3db-318">
            <see langword="false" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-318">
              <see langword="false" /> in all cases.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-319">W zbudowany typ typ, który jest przypisany do parametru typu ogólnego może być typu rodzajowego, ale parametr typu, sama nie jest ogólna.</span><span class="sxs-lookup"><span data-stu-id="5c3db-319">In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public override bool IsGenericTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeDefinition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericTypeDefinition : bool" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-320">Pobiera <see langword="false" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-320">Gets <see langword="false" /> in all cases.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5c3db-321">
            <see langword="false" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-321">
              <see langword="false" /> in all cases.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-322">W zbudowany typ typ, który jest przypisany do parametru typu ogólnego może być typu rodzajowego, ale parametr typu, sama nie jest ogólna.</span><span class="sxs-lookup"><span data-stu-id="5c3db-322">In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInstanceOfType">
      <MemberSignature Language="C#" Value="public override bool IsInstanceOfType (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsInstanceOfType(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsInstanceOfType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsInstanceOfType (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsInstanceOfType(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.IsInstanceOfType : obj -&gt; bool" Usage="genericTypeParameterBuilder.IsInstanceOfType o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPointerImpl">
      <MemberSignature Language="C#" Value="protected override bool IsPointerImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsPointerImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsPointerImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsPointerImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsPointerImpl();" />
      <MemberSignature Language="F#" Value="override this.IsPointerImpl : unit -&gt; bool" Usage="genericTypeParameterBuilder.IsPointerImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrimitiveImpl">
      <MemberSignature Language="C#" Value="protected override bool IsPrimitiveImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsPrimitiveImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsPrimitiveImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsPrimitiveImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsPrimitiveImpl();" />
      <MemberSignature Language="F#" Value="override this.IsPrimitiveImpl : unit -&gt; bool" Usage="genericTypeParameterBuilder.IsPrimitiveImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSerializable">
      <MemberSignature Language="C#" Value="public override bool IsSerializable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSerializable" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsSerializable" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSerializable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSerializable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSerializable : bool" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.IsSerializable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubclassOf">
      <MemberSignature Language="C#" Value="public override bool IsSubclassOf (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsSubclassOf(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsSubclassOf (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsSubclassOf(Type ^ c);" />
      <MemberSignature Language="F#" Value="override this.IsSubclassOf : Type -&gt; bool" Usage="genericTypeParameterBuilder.IsSubclassOf c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="5c3db-323">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-323">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-324">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-324">Not supported for incomplete generic type parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-325">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-325">Not supported for incomplete generic type parameters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-326">Ta metoda nie jest obsługiwana dla parametrów typu genetycznego niekompletne.</span><span class="sxs-lookup"><span data-stu-id="5c3db-326">This method is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="5c3db-327">Pobieranie parametru typu z definicji typu ogólnego ukończone, a następnie użyj odbicia w typie pobrane.</span><span class="sxs-lookup"><span data-stu-id="5c3db-327">Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5c3db-328">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-328">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsSZArray">
      <MemberSignature Language="C#" Value="public override bool IsSZArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSZArray" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsSZArray" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSZArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSZArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSZArray : bool" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.IsSZArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTypeDefinition">
      <MemberSignature Language="C#" Value="public override bool IsTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsTypeDefinition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTypeDefinition : bool" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.IsTypeDefinition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValueTypeImpl">
      <MemberSignature Language="C#" Value="protected override bool IsValueTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsValueTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsValueTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsValueTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsValueTypeImpl();" />
      <MemberSignature Language="F#" Value="override this.IsValueTypeImpl : unit -&gt; bool" Usage="genericTypeParameterBuilder.IsValueTypeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVariableBoundArray">
      <MemberSignature Language="C#" Value="public override bool IsVariableBoundArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVariableBoundArray" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsVariableBoundArray" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsVariableBoundArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsVariableBoundArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVariableBoundArray : bool" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.IsVariableBoundArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeArrayType">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-329">Zwraca typ tablicy, którego typ elementu jest parametr typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-329">Returns the type of an array whose element type is the generic type parameter.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public override Type MakeArrayType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakeArrayType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeArrayType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakeArrayType();" />
      <MemberSignature Language="F#" Value="override this.MakeArrayType : unit -&gt; Type" Usage="genericTypeParameterBuilder.MakeArrayType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-330">Zwraca typ tablicy jednowymiarowej, którego typ elementu jest parametr typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-330">Returns the type of a one-dimensional array whose element type is the generic type parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-331">Element <see cref="T:System.Type" /> obiektu, który reprezentuje typ tablicy jednowymiarowej, którego typ elementu jest parametr typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-331">A <see cref="T:System.Type" /> object that represents the type of a one-dimensional array whose element type is the generic type parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-332"><xref:System.Type.MakeArrayType%2A> Metoda zapewnia sposób wygenerować typy tablic, list parametrów.</span><span class="sxs-lookup"><span data-stu-id="5c3db-332">The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types for parameter lists.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c3db-333">Poniższy przykład kodu tworzy modułu dynamicznego ogólny typ abstrakcyjny o nazwie `Sample` z jednego typu parametru `T`i metodę abstrakcyjną o nazwie `TestMethod`.</span><span class="sxs-lookup"><span data-stu-id="5c3db-333">The following code example creates a dynamic module, an abstract generic type named `Sample` with one type parameter, `T`, and an abstract method named `TestMethod`.</span></span> <span data-ttu-id="5c3db-334">`TestMethod` Trwa `ref` parametru (`ByRef` w języku Visual Basic) tego typu `T`, wskaźnik do typu `T`oraz tablicę `T`.</span><span class="sxs-lookup"><span data-stu-id="5c3db-334">`TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `T`, a pointer to type `T`, and an array of `T`.</span></span> <span data-ttu-id="5c3db-335">Ta metoda zwraca tablicę dwuwymiarową liczb `T`.</span><span class="sxs-lookup"><span data-stu-id="5c3db-335">This method returns a two-dimensional array of `T`.</span></span> <span data-ttu-id="5c3db-336">Przykład kodu zapisuje modułu dynamicznego na dysku, dzięki czemu można sprawdzić za pomocą MSIL Disassembler (Ildasm.exe).</span><span class="sxs-lookup"><span data-stu-id="5c3db-336">The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).</span></span>  
  
 [!code-cpp[MakeXxxGenericTypeParameterBuilder#1](~/samples/snippets/cpp/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder/cpp/source.cpp#1)]
 [!code-csharp[MakeXxxGenericTypeParameterBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder/CS/source.cs#1)]
 [!code-vb[MakeXxxGenericTypeParameterBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType" />
        <altmember cref="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public override Type MakeArrayType (int rank);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakeArrayType(int32 rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeArrayType (rank As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakeArrayType(int rank);" />
      <MemberSignature Language="F#" Value="override this.MakeArrayType : int -&gt; Type" Usage="genericTypeParameterBuilder.MakeArrayType rank" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rank">
          <span data-ttu-id="5c3db-337">Liczba wymiarów tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-337">The number of dimensions for the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-338">Zwraca typ tablicy, którego typ elementu jest parametr typu ogólnego, z określoną liczbą wymiarów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-338">Returns the type of an array whose element type is the generic type parameter, with the specified number of dimensions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-339">Element <see cref="T:System.Type" /> obiektu, który reprezentuje typ tablicy, którego typ elementu jest parametr typu ogólnego, z określoną liczbą wymiarów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-339">A <see cref="T:System.Type" /> object that represents the type of an array whose element type is the generic type parameter, with the specified number of dimensions.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-340"><xref:System.Type.MakeArrayType%2A> Metoda zapewnia sposób wygenerować typy tablic, list parametrów.</span><span class="sxs-lookup"><span data-stu-id="5c3db-340">The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types for parameter lists.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c3db-341">Poniższy przykład kodu tworzy modułu dynamicznego ogólny typ abstrakcyjny o nazwie `Sample` z jednego typu parametru `T`i metodę abstrakcyjną o nazwie `TestMethod`.</span><span class="sxs-lookup"><span data-stu-id="5c3db-341">The following code example creates a dynamic module, an abstract generic type named `Sample` with one type parameter, `T`, and an abstract method named `TestMethod`.</span></span> <span data-ttu-id="5c3db-342">`TestMethod` Trwa `ref` parametru (`ByRef` w języku Visual Basic) tego typu `T`, wskaźnik do typu `T`oraz tablicę `T`.</span><span class="sxs-lookup"><span data-stu-id="5c3db-342">`TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `T`, a pointer to type `T`, and an array of `T`.</span></span> <span data-ttu-id="5c3db-343">Ta metoda zwraca tablicę dwuwymiarową liczb `T`.</span><span class="sxs-lookup"><span data-stu-id="5c3db-343">This method returns a two-dimensional array of `T`.</span></span> <span data-ttu-id="5c3db-344">Przykład kodu zapisuje modułu dynamicznego na dysku, dzięki czemu można sprawdzić za pomocą MSIL Disassembler (Ildasm.exe).</span><span class="sxs-lookup"><span data-stu-id="5c3db-344">The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).</span></span>  
  
 [!code-cpp[MakeXxxGenericTypeParameterBuilder#1](~/samples/snippets/cpp/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder/cpp/source.cpp#1)]
 [!code-csharp[MakeXxxGenericTypeParameterBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder/CS/source.cs#1)]
 [!code-vb[MakeXxxGenericTypeParameterBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="5c3db-345">
            <paramref name="rank" /> nie jest prawidłową liczbą wymiarów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-345">
              <paramref name="rank" /> is not a valid number of dimensions.</span>
          </span>
          <span data-ttu-id="5c3db-346">Na przykład jego wartość jest mniejsza niż 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-346">For example, its value is less than 1.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType" />
        <altmember cref="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeByRefType">
      <MemberSignature Language="C#" Value="public override Type MakeByRefType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakeByRefType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeByRefType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakeByRefType();" />
      <MemberSignature Language="F#" Value="override this.MakeByRefType : unit -&gt; Type" Usage="genericTypeParameterBuilder.MakeByRefType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-347">Zwraca <see cref="T:System.Type" /> obiekt, który reprezentuje bieżący parametr typu ogólnego, gdy przekazane jako parametr przekazany przez odwołanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-347">Returns a <see cref="T:System.Type" /> object that represents the current generic type parameter when passed as a reference parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-348">A <see cref="T:System.Type" /> obiekt, który reprezentuje bieżący parametr typu ogólnego, gdy przekazane jako parametr przekazany przez odwołanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-348">A <see cref="T:System.Type" /> object that represents the current generic type parameter when passed as a reference parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-349"><xref:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType%2A> Metoda zapewnia sposób generowania `ref` typów (`ByRef` w języku Visual Basic) dla parametru listy.</span><span class="sxs-lookup"><span data-stu-id="5c3db-349">The <xref:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType%2A> method provides a way to generate `ref` types (`ByRef` in Visual Basic) for parameter lists.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c3db-350">Poniższy przykład kodu tworzy modułu dynamicznego ogólny typ abstrakcyjny o nazwie `Sample` z jednego typu parametru `T`i metodę abstrakcyjną o nazwie `TestMethod`.</span><span class="sxs-lookup"><span data-stu-id="5c3db-350">The following code example creates a dynamic module, an abstract generic type named `Sample` with one type parameter, `T`, and an abstract method named `TestMethod`.</span></span> <span data-ttu-id="5c3db-351">`TestMethod` Trwa `ref` parametru (`ByRef` w języku Visual Basic) tego typu `T`, wskaźnik do typu `T`oraz tablicę `T`.</span><span class="sxs-lookup"><span data-stu-id="5c3db-351">`TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `T`, a pointer to type `T`, and an array of `T`.</span></span> <span data-ttu-id="5c3db-352">Ta metoda zwraca tablicę dwuwymiarową liczb `T`.</span><span class="sxs-lookup"><span data-stu-id="5c3db-352">This method returns a two-dimensional array of `T`.</span></span> <span data-ttu-id="5c3db-353">Przykład kodu zapisuje modułu dynamicznego na dysku, dzięki czemu można sprawdzić za pomocą MSIL Disassembler (Ildasm.exe).</span><span class="sxs-lookup"><span data-stu-id="5c3db-353">The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).</span></span>  
  
 [!code-cpp[MakeXxxGenericTypeParameterBuilder#1](~/samples/snippets/cpp/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder/cpp/source.cpp#1)]
 [!code-csharp[MakeXxxGenericTypeParameterBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder/CS/source.cs#1)]
 [!code-vb[MakeXxxGenericTypeParameterBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType" />
        <altmember cref="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeGenericType">
      <MemberSignature Language="C#" Value="public override Type MakeGenericType (params Type[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakeGenericType(class System.Type[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeGenericType (ParamArray typeArguments As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakeGenericType(... cli::array &lt;Type ^&gt; ^ typeArguments);" />
      <MemberSignature Language="F#" Value="override this.MakeGenericType : Type[] -&gt; Type" Usage="genericTypeParameterBuilder.MakeGenericType typeArguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArguments" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArguments">
          <span data-ttu-id="5c3db-354">Tablica argumentów typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-354">An array of type arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-355">Nie jest prawidłowy dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-355">Not valid for incomplete generic type parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-356">Ta metoda jest nieprawidłowa dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-356">This method is invalid for incomplete generic type parameters.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5c3db-357">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-357">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MakePointerType">
      <MemberSignature Language="C#" Value="public override Type MakePointerType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakePointerType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakePointerType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakePointerType();" />
      <MemberSignature Language="F#" Value="override this.MakePointerType : unit -&gt; Type" Usage="genericTypeParameterBuilder.MakePointerType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-358">Zwraca <see cref="T:System.Type" /> obiekt, który reprezentuje wskaźnik do bieżącego parametru typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-358">Returns a <see cref="T:System.Type" /> object that represents a pointer to the current generic type parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-359">A <see cref="T:System.Type" /> obiekt, który reprezentuje wskaźnik do bieżącego parametru typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-359">A <see cref="T:System.Type" /> object that represents a pointer to the current generic type parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-360"><xref:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType%2A> Metoda zapewnia sposób generowania typów wskaźnika do listy parametrów.</span><span class="sxs-lookup"><span data-stu-id="5c3db-360">The <xref:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType%2A> method provides a way to generate pointer types for parameter lists.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c3db-361">Poniższy przykład kodu tworzy modułu dynamicznego ogólny typ abstrakcyjny o nazwie `Sample` z jednego typu parametru `T`i metodę abstrakcyjną o nazwie `TestMethod`.</span><span class="sxs-lookup"><span data-stu-id="5c3db-361">The following code example creates a dynamic module, an abstract generic type named `Sample` with one type parameter, `T`, and an abstract method named `TestMethod`.</span></span> <span data-ttu-id="5c3db-362">`TestMethod` Trwa `ref` parametru (`ByRef` w języku Visual Basic) tego typu `T`, wskaźnik do typu `T`oraz tablicę `T`.</span><span class="sxs-lookup"><span data-stu-id="5c3db-362">`TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `T`, a pointer to type `T`, and an array of `T`.</span></span> <span data-ttu-id="5c3db-363">Ta metoda zwraca tablicę dwuwymiarową liczb `T`.</span><span class="sxs-lookup"><span data-stu-id="5c3db-363">This method returns a two-dimensional array of `T`.</span></span> <span data-ttu-id="5c3db-364">Przykład kodu zapisuje modułu dynamicznego na dysku, dzięki czemu można sprawdzić za pomocą MSIL Disassembler (Ildasm.exe).</span><span class="sxs-lookup"><span data-stu-id="5c3db-364">The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).</span></span>  
  
 [!code-cpp[MakeXxxGenericTypeParameterBuilder#1](~/samples/snippets/cpp/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder/cpp/source.cpp#1)]
 [!code-csharp[MakeXxxGenericTypeParameterBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder/CS/source.cs#1)]
 [!code-vb[MakeXxxGenericTypeParameterBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType" />
        <altmember cref="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType" />
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.Module" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-365">Pobiera dynamiczny moduł, który zawiera parametr typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-365">Gets the dynamic module that contains the generic type parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5c3db-366">A <see cref="T:System.Reflection.Module" /> obiekt, który reprezentuje dynamiczny moduł, który zawiera parametr typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-366">A <see cref="T:System.Reflection.Module" /> object that represents the dynamic module that contains the generic type parameter.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-367">Pobiera nazwę parametru typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-367">Gets the name of the generic type parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5c3db-368">Nazwa parametru typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-368">The name of the generic type parameter.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public override string Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Namespace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-369">Pobiera <see langword="null" /> we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-369">Gets <see langword="null" /> in all cases.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5c3db-370">Odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic) we wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-370">A null reference (<see langword="Nothing" /> in Visual Basic) in all cases.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-371">Pobiera <see cref="T:System.Type" /> obiektu, który został użyty do uzyskania <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-371">Gets the <see cref="T:System.Type" /> object that was used to obtain the <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5c3db-372">
            <see cref="T:System.Type" /> Obiektu, który został użyty do uzyskania <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-372">The <see cref="T:System.Type" /> object that was used to obtain the <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBaseTypeConstraint">
      <MemberSignature Language="C#" Value="public void SetBaseTypeConstraint (Type baseTypeConstraint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBaseTypeConstraint(class System.Type baseTypeConstraint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBaseTypeConstraint (baseTypeConstraint As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetBaseTypeConstraint(Type ^ baseTypeConstraint);" />
      <MemberSignature Language="F#" Value="member this.SetBaseTypeConstraint : Type -&gt; unit" Usage="genericTypeParameterBuilder.SetBaseTypeConstraint baseTypeConstraint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseTypeConstraint" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="baseTypeConstraint">
          <span data-ttu-id="5c3db-373">
            <see cref="T:System.Type" /> Musi być dziedziczony przez dowolny typ, który ma być zastępowane dla parametru typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-373">The <see cref="T:System.Type" /> that must be inherited by any type that is to be substituted for the type parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-374">Ustawia typ bazowy, który typ musi dziedziczyć celu zamieniony na parametr typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-374">Sets the base type that a type must inherit in order to be substituted for the type parameter.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-375">Można pobrać Użyj ograniczenia typu podstawowego <xref:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="5c3db-375">To retrieve the base type constraint use the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType%2A> property.</span></span>  
  
 <span data-ttu-id="5c3db-376">Po utworzeniu typu ogólnego, który zawiera parametr typu, można użyć jego <xref:System.Type> odbicia, parametr typu i ich ograniczenia.</span><span class="sxs-lookup"><span data-stu-id="5c3db-376">Once you have created the generic type that contains the type parameter, you can use its <xref:System.Type> object to reflect the type parameter and their constraints.</span></span> <span data-ttu-id="5c3db-377">Aby uzyskać parametry typu ukończone typu ogólnego, użyj <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="5c3db-377">To get the type parameters of a completed generic type, use the <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="5c3db-378">Dla każdego parametru typu uzyskać typ podstawowy ograniczenia ograniczenia i interfejs za pomocą <xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=nameWithType> metody i specjalnych ograniczeń za pomocą <xref:System.Type.GenericParameterAttributes%2A?displayProperty=nameWithType> właściwości.</span><span class="sxs-lookup"><span data-stu-id="5c3db-378">For each type parameter, get the base type constraint and interface constraints by using the <xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=nameWithType> method, and get the special constraints by using the <xref:System.Type.GenericParameterAttributes%2A?displayProperty=nameWithType> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c3db-379">Poniższy przykład kodu tworzy typ ogólny, z dwoma parametrami typu, drugi z nich ma ograniczenie typu podstawowego i zapisuje je w zestawie GenericEmitExample1.dll.</span><span class="sxs-lookup"><span data-stu-id="5c3db-379">The following code example creates a generic type with two type parameters, the second of which has a base type constraint, and saves them in the assembly GenericEmitExample1.dll.</span></span> <span data-ttu-id="5c3db-380">Możesz użyć [Ildasm.exe (dezasembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) wyświetlanie wygenerowanych typów.</span><span class="sxs-lookup"><span data-stu-id="5c3db-380">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to view the generated types.</span></span> <span data-ttu-id="5c3db-381">Aby uzyskać bardziej szczegółowy opis etapy definiowania dynamicznych typu ogólnego, zobacz [porady: Definiowanie typu ogólnego przy użyciu emisji odbicia](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="5c3db-381">For a more detailed explanation of the steps involved in defining a dynamic generic type, see [How to: Define a Generic Type with Reflection Emit](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md).</span></span>  
  
 [!code-cpp[EmitGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR/EmitGenericType/CPP/source.cpp#1)]
 [!code-csharp[EmitGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR/EmitGenericType/CS/source.cs#1)]
 [!code-vb[EmitGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EmitGenericType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/07d5f01a-7b5b-40ea-9b15-f21561098fe4">
          <span data-ttu-id="5c3db-382">Porady: definiowanie typu ogólnego przy użyciu emisji odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-382">How to: Define a Generic Type with Reflection Emit</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetCustomAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-383">Ustawia atrybut niestandardowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-383">Sets a custom attribute.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCustomAttribute(class System.Reflection.Emit.CustomAttributeBuilder customBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomAttribute (customBuilder As CustomAttributeBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCustomAttribute(System::Reflection::Emit::CustomAttributeBuilder ^ customBuilder);" />
      <MemberSignature Language="F#" Value="member this.SetCustomAttribute : System.Reflection.Emit.CustomAttributeBuilder -&gt; unit" Usage="genericTypeParameterBuilder.SetCustomAttribute customBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customBuilder" Type="System.Reflection.Emit.CustomAttributeBuilder" />
      </Parameters>
      <Docs>
        <param name="customBuilder">
          <span data-ttu-id="5c3db-384">Wystąpienie klasy pomocnika, która definiuje atrybutu niestandardowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-384">An instance of a helper class that defines the custom attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-385">Ustawianie atrybutu niestandardowego za pomocą konstruktora atrybutu niestandardowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-385">Set a custom attribute using a custom attribute builder.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5c3db-386">
            <paramref name="customBuilder" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-386">
              <paramref name="customBuilder" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCustomAttribute(class System.Reflection.ConstructorInfo con, unsigned int8[] binaryAttribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomAttribute (con As ConstructorInfo, binaryAttribute As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCustomAttribute(System::Reflection::ConstructorInfo ^ con, cli::array &lt;System::Byte&gt; ^ binaryAttribute);" />
      <MemberSignature Language="F#" Value="member this.SetCustomAttribute : System.Reflection.ConstructorInfo * byte[] -&gt; unit" Usage="genericTypeParameterBuilder.SetCustomAttribute (con, binaryAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="con" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="binaryAttribute" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="con">
          <span data-ttu-id="5c3db-387">Konstruktor atrybutu niestandardowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-387">The constructor for the custom attribute.</span>
          </span>
        </param>
        <param name="binaryAttribute">
          <span data-ttu-id="5c3db-388">Obiekt blob bajtów, reprezentujący ten atrybut.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-388">A byte blob representing the attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-389">Ustawia atrybut niestandardowy przy użyciu określonego atrybutu niestandardowego obiektu blob.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-389">Sets a custom attribute using a specified custom attribute blob.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="5c3db-390">Aby uzyskać szczegółowe informacje na temat formatowania `binaryAttribute`, zajrzyj do dokumentacji partycja II: definicja metadanych i semantyka.</span><span class="sxs-lookup"><span data-stu-id="5c3db-390">For details on how to format `binaryAttribute`, see the documentation for Partition II: Metadata Definition and Semantics.</span></span> <span data-ttu-id="5c3db-391">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie Ecma International w sieci Web.</span><span class="sxs-lookup"><span data-stu-id="5c3db-391">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5c3db-392">
            <paramref name="con" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-392">
              <paramref name="con" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="5c3db-393">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-393">-or-</span>
          </span>
          <span data-ttu-id="5c3db-394">
            <paramref name="binaryAttribute" /> to odwołanie o wartości null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-394">
              <paramref name="binaryAttribute" /> is a null reference.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetGenericParameterAttributes">
      <MemberSignature Language="C#" Value="public void SetGenericParameterAttributes (System.Reflection.GenericParameterAttributes genericParameterAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetGenericParameterAttributes(valuetype System.Reflection.GenericParameterAttributes genericParameterAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetGenericParameterAttributes(System::Reflection::GenericParameterAttributes genericParameterAttributes);" />
      <MemberSignature Language="F#" Value="member this.SetGenericParameterAttributes : System.Reflection.GenericParameterAttributes -&gt; unit" Usage="genericTypeParameterBuilder.SetGenericParameterAttributes genericParameterAttributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericParameterAttributes" Type="System.Reflection.GenericParameterAttributes" />
      </Parameters>
      <Docs>
        <param name="genericParameterAttributes">
          <span data-ttu-id="5c3db-395">Bitowa kombinacja <see cref="T:System.Reflection.GenericParameterAttributes" /> wartości, które reprezentują właściwości wariancji oraz specjalne ograniczenia parametru typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-395">A bitwise combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> values that represent the variance characteristics and special constraints of the generic type parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-396">Ustawia właściwości wariancji oraz specjalne ograniczenia parametru ogólnego, takich jak ograniczenie konstruktora bez parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-396">Sets the variance characteristics and special constraints of the generic parameter, such as the parameterless constructor constraint.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-397">Specjalne ograniczenia można określić dowolny typ przypisany do parametru typu generycznego musi mieć domyślnego konstruktora, musi być typem referencyjnym lub musi być typem wartości.</span><span class="sxs-lookup"><span data-stu-id="5c3db-397">Special constraints can specify that any type assigned to the generic type parameter must have a default constructor, must be a reference type, or must be a value type.</span></span>  
  
 <span data-ttu-id="5c3db-398">Nie można pobrać ograniczeń specjalnych przy użyciu metod <xref:System.Reflection.Emit.GenericTypeParameterBuilder> klasy.</span><span class="sxs-lookup"><span data-stu-id="5c3db-398">Special constraints cannot be retrieved using methods of the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> class.</span></span> <span data-ttu-id="5c3db-399">Po utworzeniu typu ogólnego, który zawiera parametr typu, można użyć jego <xref:System.Type> odbicia parametrów typu i ich ograniczenia.</span><span class="sxs-lookup"><span data-stu-id="5c3db-399">Once you have created the generic type that contains the type parameter, you can use its <xref:System.Type> object to reflect the type parameters and their constraints.</span></span> <span data-ttu-id="5c3db-400">Aby uzyskać parametry typu ukończone typu ogólnego, użyj <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="5c3db-400">To get the type parameters of a completed generic type, use the <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="5c3db-401">Aby uzyskać specjalne ograniczeń dla każdego parametru typu, użyj <xref:System.Type.GenericParameterAttributes%2A?displayProperty=nameWithType> właściwości.</span><span class="sxs-lookup"><span data-stu-id="5c3db-401">To get the special constraints for each type parameter, use the <xref:System.Type.GenericParameterAttributes%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="5c3db-402"><xref:System.Reflection.GenericParameterAttributes> Wartości wyliczenia, które odwołują się do właściwości wariancji parametru typu mają zastosowanie tylko w językach, które obsługują kowariancję i kontrawariancję, takie jak język Microsoft intermediate language (MSIL).</span><span class="sxs-lookup"><span data-stu-id="5c3db-402">The <xref:System.Reflection.GenericParameterAttributes> enumeration values that refer to the variance characteristics of a type parameter are relevant only in languages that support covariance and contravariance, such as Microsoft intermediate language (MSIL).</span></span> <span data-ttu-id="5c3db-403">Visual Basic i C# aktualnie nie obsługują kowariancji i kontrawariancji.</span><span class="sxs-lookup"><span data-stu-id="5c3db-403">Visual Basic and C# currently do not support covariance and contravariance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c3db-404">Poniższy przykład kodu tworzy typ ogólny, z dwoma parametrami typu, pierwszy z nich jest ograniczony, ma domyślnego konstruktora i być typem referencyjnym i zapisuje je w zestawie GenericEmitExample1.dll.</span><span class="sxs-lookup"><span data-stu-id="5c3db-404">The following code example creates a generic type with two type parameters, the first of which is constrained to have a default constructor and to be a reference type, and saves them in the assembly GenericEmitExample1.dll.</span></span> <span data-ttu-id="5c3db-405">Możesz użyć [Ildasm.exe (dezasembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) wyświetlanie wygenerowanych typów.</span><span class="sxs-lookup"><span data-stu-id="5c3db-405">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to view the generated types.</span></span> <span data-ttu-id="5c3db-406">Aby uzyskać bardziej szczegółowy opis etapy definiowania dynamicznych typu ogólnego, zobacz [porady: Definiowanie typu ogólnego przy użyciu emisji odbicia](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="5c3db-406">For a more detailed explanation of the steps involved in defining a dynamic generic type, see [How to: Define a Generic Type with Reflection Emit](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md).</span></span>  
  
 [!code-cpp[EmitGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR/EmitGenericType/CPP/source.cpp#1)]
 [!code-csharp[EmitGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR/EmitGenericType/CS/source.cs#1)]
 [!code-vb[EmitGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EmitGenericType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/07d5f01a-7b5b-40ea-9b15-f21561098fe4">
          <span data-ttu-id="5c3db-407">Porady: definiowanie typu ogólnego przy użyciu emisji odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-407">How to: Define a Generic Type with Reflection Emit</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SetInterfaceConstraints">
      <MemberSignature Language="C#" Value="public void SetInterfaceConstraints (params Type[] interfaceConstraints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInterfaceConstraints(class System.Type[] interfaceConstraints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInterfaceConstraints (ParamArray interfaceConstraints As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInterfaceConstraints(... cli::array &lt;Type ^&gt; ^ interfaceConstraints);" />
      <MemberSignature Language="F#" Value="member this.SetInterfaceConstraints : Type[] -&gt; unit" Usage="genericTypeParameterBuilder.SetInterfaceConstraints interfaceConstraints" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceConstraints" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="interfaceConstraints">
          <span data-ttu-id="5c3db-408">Tablica <see cref="T:System.Type" /> obiekty reprezentujące interfejsy musi implementować typ, aby zamieniony na parametr typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-408">An array of <see cref="T:System.Type" /> objects that represent the interfaces a type must implement in order to be substituted for the type parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5c3db-409">Ustawia interfejsy, które musi implementować typ, aby być zastępowane dla parametru typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-409">Sets the interfaces a type must implement in order to be substituted for the type parameter.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-410">Nie można pobrać ograniczeń interfejsu przy użyciu metod <xref:System.Reflection.Emit.GenericTypeParameterBuilder> klasy.</span><span class="sxs-lookup"><span data-stu-id="5c3db-410">Interface constraints cannot be retrieved using methods of the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> class.</span></span> <span data-ttu-id="5c3db-411">Po utworzeniu typu ogólnego, który zawiera parametr typu, można użyć jego <xref:System.Type> odbicia parametrów typu i ich ograniczenia.</span><span class="sxs-lookup"><span data-stu-id="5c3db-411">Once you have created the generic type that contains the type parameter, you can use its <xref:System.Type> object to reflect the type parameters and their constraints.</span></span> <span data-ttu-id="5c3db-412">Aby uzyskać parametry typu ukończone typu ogólnego, użyj <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="5c3db-412">To get the type parameters of a completed generic type, use the <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="5c3db-413">Dla każdego parametru typu uzyskać typ podstawowy ograniczenia ograniczenia i interfejs za pomocą <xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="5c3db-413">For each type parameter, get the base type constraint and interface constraints by using the <xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c3db-414">Poniższy przykład kodu tworzy typ ogólny, z dwoma parametrami typu, przy czym ma dwa ograniczenia interfejsu i zapisuje je w zestawie GenericEmitExample1.dll.</span><span class="sxs-lookup"><span data-stu-id="5c3db-414">The following code example creates a generic type with two type parameters, the second of which has two interface constraints, and saves them in the assembly GenericEmitExample1.dll.</span></span> <span data-ttu-id="5c3db-415">Możesz użyć [Ildasm.exe (dezasembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) wyświetlanie wygenerowanych typów.</span><span class="sxs-lookup"><span data-stu-id="5c3db-415">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to view the generated types.</span></span> <span data-ttu-id="5c3db-416">Aby uzyskać bardziej szczegółowy opis etapy definiowania dynamicznych typu ogólnego, zobacz [porady: Definiowanie typu ogólnego przy użyciu emisji odbicia](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="5c3db-416">For a more detailed explanation of the steps involved in defining a dynamic generic type, see [How to: Define a Generic Type with Reflection Emit](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md).</span></span>  
  
 [!code-cpp[EmitGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR/EmitGenericType/CPP/source.cpp#1)]
 [!code-csharp[EmitGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR/EmitGenericType/CS/source.cs#1)]
 [!code-vb[EmitGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EmitGenericType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/07d5f01a-7b5b-40ea-9b15-f21561098fe4">
          <span data-ttu-id="5c3db-417">Porady: definiowanie typu ogólnego przy użyciu emisji odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-417">How to: Define a Generic Type with Reflection Emit</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.GenericTypeParameterBuilder.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="genericTypeParameterBuilder.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-418">Zwraca reprezentację ciągu bieżącego parametru typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-418">Returns a string representation of the current generic type parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5c3db-419">Ciąg, który zawiera nazwę parametru typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-419">A string that contains the name of the generic type parameter.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeHandle">
      <MemberSignature Language="C#" Value="public override RuntimeTypeHandle TypeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeTypeHandle TypeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TypeHandle As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeTypeHandle TypeHandle { RuntimeTypeHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeHandle : RuntimeTypeHandle" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-420">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-420">Not supported for incomplete generic type parameters.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5c3db-421">Nieobsługiwana dla parametrów typu genetycznego niekompletne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-421">Not supported for incomplete generic type parameters.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c3db-422">Ta właściwość nie jest obsługiwana dla parametrów typu genetycznego niekompletne.</span><span class="sxs-lookup"><span data-stu-id="5c3db-422">This property is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="5c3db-423">Pobieranie parametru typu z definicji typu ogólnego ukończone, a następnie użyj odbicia w typie pobrane.</span><span class="sxs-lookup"><span data-stu-id="5c3db-423">Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5c3db-424">We wszystkich przypadkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-424">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public override Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property UnderlyingSystemType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ UnderlyingSystemType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingSystemType : Type" Usage="System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5c3db-425">Pobiera bieżący parametr typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-425">Gets the current generic type parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5c3db-426">Bieżący <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5c3db-426">The current <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> object.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>