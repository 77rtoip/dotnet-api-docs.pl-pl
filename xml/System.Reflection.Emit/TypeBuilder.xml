<Type Name="TypeBuilder" FullName="System.Reflection.Emit.TypeBuilder">
  <TypeSignature Language="C#" Value="public sealed class TypeBuilder : System.Reflection.TypeInfo, System.Runtime.InteropServices._TypeBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit TypeBuilder extends System.Reflection.TypeInfo implements class System.Runtime.InteropServices._TypeBuilder" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.TypeBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TypeBuilder&#xA;Inherits TypeInfo&#xA;Implements _TypeBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeBuilder sealed : System::Reflection::TypeInfo, System::Runtime::InteropServices::_TypeBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.TypeInfo</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netcore-2.0">System.Type</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._TypeBuilder</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._TypeBuilder))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7654a-101">Definiuje i tworzy nowe wystąpienie klasy w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="7654a-101">Defines and creates new instances of classes during run time.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-102"><xref:System.Reflection.Emit.TypeBuilder> klasy głównym służy do kontrolowania tworzenia klas dynamicznych w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="7654a-102"><xref:System.Reflection.Emit.TypeBuilder> is the root class used to control the creation of dynamic classes in the runtime.</span></span> <span data-ttu-id="7654a-103">Zapewnia zestaw procedur, które są używane do definiowania klas, dodawanie pól i metod i utworzyć klasę wewnątrz modułu.</span><span class="sxs-lookup"><span data-stu-id="7654a-103">It provides a set of routines that are used to define classes, add methods and fields, and create the class inside a module.</span></span> <span data-ttu-id="7654a-104">Nowy <xref:System.Reflection.Emit.TypeBuilder> można utworzyć przez wywołanie metody w module dynamicznym <xref:System.Reflection.Emit.ModuleBuilder.DefineType%2A?displayProperty=nameWithType> metody, która zwraca <xref:System.Reflection.Emit.TypeBuilder> obiektu.</span><span class="sxs-lookup"><span data-stu-id="7654a-104">A new <xref:System.Reflection.Emit.TypeBuilder> can be created from a dynamic module by calling the <xref:System.Reflection.Emit.ModuleBuilder.DefineType%2A?displayProperty=nameWithType> method, which returns a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 <span data-ttu-id="7654a-105">Emisja odbicia zawiera następujące opcje Definiowanie typów:</span><span class="sxs-lookup"><span data-stu-id="7654a-105">Reflection emit provides the following options for defining types:</span></span>  
  
-   <span data-ttu-id="7654a-106">Należy zdefiniować klasy ani interfejsu o podanej nazwie.</span><span class="sxs-lookup"><span data-stu-id="7654a-106">Define a class or interface with the given name.</span></span>  
  
-   <span data-ttu-id="7654a-107">Należy zdefiniować klasy ani interfejsu o podanej nazwie i atrybutów.</span><span class="sxs-lookup"><span data-stu-id="7654a-107">Define a class or interface with the given name and attributes.</span></span>  
  
-   <span data-ttu-id="7654a-108">Zdefiniuj klasę o podanej nazwie, atrybuty i klasy podstawowej.</span><span class="sxs-lookup"><span data-stu-id="7654a-108">Define a class with the given name, attributes, and base class.</span></span>  
  
-   <span data-ttu-id="7654a-109">Zdefiniuj klasę o podanej nazwie, atrybuty klasy podstawowej i zestaw interfejsów, które implementuje w klasie.</span><span class="sxs-lookup"><span data-stu-id="7654a-109">Define a class with the given name, attributes, base class, and the set of interfaces that the class implements.</span></span>  
  
-   <span data-ttu-id="7654a-110">Zdefiniuj klasę o podanej nazwie, atrybuty klasy podstawowej i rozmiar pakowania.</span><span class="sxs-lookup"><span data-stu-id="7654a-110">Define a class with the given name, attributes, base class, and packing size.</span></span>  
  
-   <span data-ttu-id="7654a-111">Zdefiniuj klasę o podanej nazwie, atrybuty klasy podstawowej i rozmiar klasy jako całość.</span><span class="sxs-lookup"><span data-stu-id="7654a-111">Define a class with the given name, attributes, base class, and the class size as a whole.</span></span>  
  
-   <span data-ttu-id="7654a-112">Zdefiniuj klasę o podanej nazwie, atrybuty klasy podstawowej, rozmiar pakowania i rozmiar klasy jako całość.</span><span class="sxs-lookup"><span data-stu-id="7654a-112">Define a class with the given name, attributes, base class, packing size, and the class size as a whole.</span></span>  
  
 <span data-ttu-id="7654a-113">Można utworzyć typu tablicy, typ wskaźnika lub typ byref do niekompletnego typu, który jest reprezentowany przez <xref:System.Reflection.Emit.TypeBuilder> obiektów, użyj <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> metody <xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A> metody, lub <xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A> metody odpowiednio.</span><span class="sxs-lookup"><span data-stu-id="7654a-113">To create an array type, pointer type, or byref type for an incomplete type that is represented by a <xref:System.Reflection.Emit.TypeBuilder> object, use the <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> method, <xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A> method, or <xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A> method, respectively.</span></span>  
  
 <span data-ttu-id="7654a-114">Zanim będzie można użyć typu <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType> metoda musi zostać wywołana.</span><span class="sxs-lookup"><span data-stu-id="7654a-114">Before a type is used, the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType> method must be called.</span></span> <span data-ttu-id="7654a-115">**Typu CreateType** utworzeniu typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-115">**CreateType** completes the creation of the type.</span></span> <span data-ttu-id="7654a-116">Następującej po wywołaniu **typu CreateType**, wywołujący może utworzyć wystąpienia typu przy użyciu <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> metody i wywoływać elementy członkowskie tego typu za pomocą <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-116">Following the call to **CreateType**, the caller can instantiate the type by using the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and invoke members of the type by using the <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="7654a-117">Błąd do wywoływania metod, które spowodują zmianę implementacji typu po **typu CreateType** została wywołana.</span><span class="sxs-lookup"><span data-stu-id="7654a-117">It is an error to invoke methods that change the implementation of a type after **CreateType** has been called.</span></span> <span data-ttu-id="7654a-118">Na przykład środowisko uruchomieniowe języka wspólnego zgłasza wyjątek, jeśli obiekt wywołujący próbuje dodać nowe elementy członkowskie do typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-118">For example, the common language runtime throws an exception if the caller tries to add new members to a type.</span></span>  
  
 <span data-ttu-id="7654a-119">Inicjator klasy jest tworzona przy użyciu <xref:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-119">A class initializer is created by using the <xref:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="7654a-120">**DefineTypeInitializer** zwraca <xref:System.Reflection.Emit.ConstructorBuilder> obiektu.</span><span class="sxs-lookup"><span data-stu-id="7654a-120">**DefineTypeInitializer** returns a <xref:System.Reflection.Emit.ConstructorBuilder> object.</span></span>  
  
 <span data-ttu-id="7654a-121">Zagnieżdżone typy są definiowane przez wywoływanie jednej z <xref:System.Reflection.Emit.TypeBuilder.DefineNestedType%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-121">Nested types are defined by calling one of the <xref:System.Reflection.Emit.TypeBuilder.DefineNestedType%2A?displayProperty=nameWithType> methods.</span></span>  
  
## <a name="attributes"></a><span data-ttu-id="7654a-122">Atrybuty</span><span class="sxs-lookup"><span data-stu-id="7654a-122">Attributes</span></span>  
 <span data-ttu-id="7654a-123"><xref:System.Reflection.Emit.TypeBuilder> Klasy używa <xref:System.Reflection.TypeAttributes> wyliczeniu, aby określić właściwości typu do utworzenia:</span><span class="sxs-lookup"><span data-stu-id="7654a-123">The <xref:System.Reflection.Emit.TypeBuilder> class uses the <xref:System.Reflection.TypeAttributes> enumeration to further specify the characteristics of the type to be created:</span></span>  
  
-   <span data-ttu-id="7654a-124">Interfejsy są określane za pomocą <xref:System.Reflection.TypeAttributes.Interface?displayProperty=nameWithType> i <xref:System.Reflection.TypeAttributes.Abstract?displayProperty=nameWithType> atrybutów.</span><span class="sxs-lookup"><span data-stu-id="7654a-124">Interfaces are specified using the <xref:System.Reflection.TypeAttributes.Interface?displayProperty=nameWithType> and <xref:System.Reflection.TypeAttributes.Abstract?displayProperty=nameWithType> attributes.</span></span>  
  
-   <span data-ttu-id="7654a-125">Klasy (klasy, które nie może zostać rozszerzony) są określane za pomocą <xref:System.Reflection.TypeAttributes.Sealed?displayProperty=nameWithType> atrybutu.</span><span class="sxs-lookup"><span data-stu-id="7654a-125">Concrete classes (classes that cannot be extended) are specified using the <xref:System.Reflection.TypeAttributes.Sealed?displayProperty=nameWithType> attribute.</span></span>  
  
-   <span data-ttu-id="7654a-126">Kilka atrybutów określają widoczności typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-126">Several attributes determine type visibility.</span></span> <span data-ttu-id="7654a-127">Zobacz opis <xref:System.Reflection.TypeAttributes> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="7654a-127">See the description of the <xref:System.Reflection.TypeAttributes> enumeration.</span></span>  
  
-   <span data-ttu-id="7654a-128">Jeśli <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> jest określony, moduł ładujący klasy wychodzi poza pola w kolejności ich są odczytywane z metadanych.</span><span class="sxs-lookup"><span data-stu-id="7654a-128">If <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> is specified, the class loader lays out fields in the order they are read from metadata.</span></span> <span data-ttu-id="7654a-129">Moduł ładujący klasy uwzględnia rozmiar pakowania określony, ale ignoruje kompensacji określonego pola.</span><span class="sxs-lookup"><span data-stu-id="7654a-129">The class loader considers the specified packing size but ignores any specified field offsets.</span></span> <span data-ttu-id="7654a-130">Metadane zachowuje kolejność, w którym są emitowane definicje pól.</span><span class="sxs-lookup"><span data-stu-id="7654a-130">The metadata preserves the order in which the field definitions are emitted.</span></span> <span data-ttu-id="7654a-131">Nawet w różnych scalania metadane nie spowoduje zmiany kolejności definicje pól.</span><span class="sxs-lookup"><span data-stu-id="7654a-131">Even across a merge, the metadata will not reorder the field definitions.</span></span> <span data-ttu-id="7654a-132">Moduł ładujący honoruje określone pole przesunięcia tylko wtedy, gdy <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> jest określona.</span><span class="sxs-lookup"><span data-stu-id="7654a-132">The loader will honor the specified field offsets only if <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> is specified.</span></span>  
  
## <a name="known-issues"></a><span data-ttu-id="7654a-133">Znane problemy</span><span class="sxs-lookup"><span data-stu-id="7654a-133">Known Issues</span></span>  
  
-   <span data-ttu-id="7654a-134">Emisja odbicia nie sprawdza, czy klasy nieabstrakcyjnej, która implementuje interfejs zaimplementowała wszystkie metody zadeklarowanej w interfejsie.</span><span class="sxs-lookup"><span data-stu-id="7654a-134">Reflection emit does not verify whether a non-abstract class that implements an interface has implemented all the methods declared in the interface.</span></span> <span data-ttu-id="7654a-135">Jednak jeśli klasa nie implementuje wszystkie metody zadeklarowany w interfejsie, środowisko uruchomieniowe nie załadować klasy.</span><span class="sxs-lookup"><span data-stu-id="7654a-135">However, if the class does not implement all the methods declared in an interface, the runtime does not load the class.</span></span>  
  
-   <span data-ttu-id="7654a-136">Mimo że <xref:System.Reflection.Emit.TypeBuilder> jest pochodną <xref:System.Type>, niektóre metody abstrakcyjne zdefiniowane w <xref:System.Type> klasy nie są w pełni zaimplementowane w <xref:System.Reflection.Emit.TypeBuilder> klasy.</span><span class="sxs-lookup"><span data-stu-id="7654a-136">Although <xref:System.Reflection.Emit.TypeBuilder> is derived from <xref:System.Type>, some of the abstract methods defined in the <xref:System.Type> class are not fully implemented in the <xref:System.Reflection.Emit.TypeBuilder> class.</span></span> <span data-ttu-id="7654a-137">Te wywołania <xref:System.Reflection.Emit.TypeBuilder> metod generują <xref:System.NotSupportedException> wyjątku.</span><span class="sxs-lookup"><span data-stu-id="7654a-137">Calls to these <xref:System.Reflection.Emit.TypeBuilder> methods throw a <xref:System.NotSupportedException> exception.</span></span> <span data-ttu-id="7654a-138">Można uzyskać informacji dotyczących odpowiednich funkcji przez pobranie przy użyciu utworzony typ <xref:System.Type.GetType%2A?displayProperty=nameWithType> lub <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> i w czasie wykonywania odbicia typu pobrane.</span><span class="sxs-lookup"><span data-stu-id="7654a-138">The desired functionality can be obtained by retrieving the created type using the <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and reflecting on the retrieved type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7654a-139">Ten rozdział zawiera dwa przykłady kodu.</span><span class="sxs-lookup"><span data-stu-id="7654a-139">This section contains two code examples.</span></span> <span data-ttu-id="7654a-140">Pierwszym przykładzie pokazano, jak utworzyć typu dynamicznego z pola, konstruktora, właściwości i metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-140">The first example shows how to create a dynamic type with a field, constructor, property, and method.</span></span> <span data-ttu-id="7654a-141">Drugi przykład tworzy metodę dynamicznie z danych wejściowych użytkownika.</span><span class="sxs-lookup"><span data-stu-id="7654a-141">The second example builds a method dynamically from user input.</span></span>  
  
 <span data-ttu-id="7654a-142">**Przykład, jeden**</span><span class="sxs-lookup"><span data-stu-id="7654a-142">**Example one**</span></span>  
  
 <span data-ttu-id="7654a-143">Poniższy przykład kodu pokazuje sposób definiowania dynamicznego zestawu o jeden moduł.</span><span class="sxs-lookup"><span data-stu-id="7654a-143">The following code example shows how to define a dynamic assembly with one module.</span></span> <span data-ttu-id="7654a-144">Moduł w zestawie przykład zawiera jeden typ `MyDynamicType`, który zawiera pole prywatne, właściwości, która pobiera i ustawia pole prywatne konstruktorów zainicjować pole prywatne i metody, która mnoży liczbę dostarczone przez użytkownika, przez pole prywatne wartości i zwraca wynik.</span><span class="sxs-lookup"><span data-stu-id="7654a-144">The module in the example assembly contains one type, `MyDynamicType`, which has a private field, a property that gets and sets the private field, constructors that initialize the private field, and a method that multiplies a user-supplied number by the private field value and returns the result.</span></span>  
  
 <span data-ttu-id="7654a-145"><xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave?displayProperty=nameWithType> Pole zostało określone podczas tworzenia zestawu.</span><span class="sxs-lookup"><span data-stu-id="7654a-145">The <xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave?displayProperty=nameWithType> field is specified when the assembly is created.</span></span> <span data-ttu-id="7654a-146">Kod zestawu jest używana bezpośrednio i zestawu jest także zapisane na dysku, dzięki czemu można zbadać z [Ildasm.exe (dezasembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) lub używane w innym programie.</span><span class="sxs-lookup"><span data-stu-id="7654a-146">The assembly code is used immediately, and the assembly is also saved to disk so that it can be examined with [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) or used in another program.</span></span>  
  
 [!code-cpp[AssemblyBuilderClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilderClass/cpp/24895.cpp#1)]
 [!code-csharp[AssemblyBuilderClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilderClass/cs/24895.cs#1)]
 [!code-vb[AssemblyBuilderClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilderClass/vb/24895.vb#1)]  
  
 <span data-ttu-id="7654a-147">**Przykład 2**</span><span class="sxs-lookup"><span data-stu-id="7654a-147">**Example two**</span></span>  
  
 <span data-ttu-id="7654a-148">Poniższy przykład kodu demonstruje sposób tworzenia typu dynamicznego przy użyciu `TypeBuilder`.</span><span class="sxs-lookup"><span data-stu-id="7654a-148">The following code sample demonstrates how to build a dynamic type by using `TypeBuilder`.</span></span>  
  
 [!code-cpp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TypeBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TypeBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDeclarativeSecurity">
      <MemberSignature Language="C#" Value="public void AddDeclarativeSecurity (System.Security.Permissions.SecurityAction action, System.Security.PermissionSet pset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddDeclarativeSecurity(valuetype System.Security.Permissions.SecurityAction action, class System.Security.PermissionSet pset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddDeclarativeSecurity (action As SecurityAction, pset As PermissionSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddDeclarativeSecurity(System::Security::Permissions::SecurityAction action, System::Security::PermissionSet ^ pset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Security.Permissions.SecurityAction" />
        <Parameter Name="pset" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="7654a-149">Akcja zabezpieczeń do wykonania, takich jak żądanie, Assert i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="7654a-149">The security action to be taken such as Demand, Assert, and so on.</span></span></param>
        <param name="pset"><span data-ttu-id="7654a-150">Zestaw uprawnień, które dotyczą akcji.</span><span class="sxs-lookup"><span data-stu-id="7654a-150">The set of permissions the action applies to.</span></span></param>
        <summary><span data-ttu-id="7654a-151">Zabezpieczenia deklaracyjne dodaje do tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-151">Adds declarative security to this type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-152">`AddDeclarativeSecurity` może zostać wywołana kilka razy każdego wywołania akcji zabezpieczeń (takich jak żądanie, potwierdzenia lub Odmów) i zestaw uprawnień, które są stosowane do akcji.</span><span class="sxs-lookup"><span data-stu-id="7654a-152">`AddDeclarativeSecurity` may be called several times with each call specifying a security action (such as Demand, Assert, or Deny) and a set of permissions that apply to the action.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7654a-153">W wersji systemu .NET Framework 1.0, 1.1 i 2.0 zabezpieczenia deklaratywne atrybuty zastosowane do typu przy użyciu tej metody są przechowywane w starym formacie XML w metadanych.</span><span class="sxs-lookup"><span data-stu-id="7654a-153">In the .NET Framework versions 1.0, 1.1, and 2.0, the declarative security attributes applied to a type by using this method are stored in the old XML metadata format.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7654a-154">W poniższym przykładzie pokazano użycie `AddDeclarativeSecurity` metoda umożliwiająca dodanie żądania zabezpieczeń do <xref:System.Security.Permissions.SecurityPermission> z <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> Flaga typu dynamicznego o nazwie `MyDynamicClass`, w zestawie o nazwie EmittedExample.dll.</span><span class="sxs-lookup"><span data-stu-id="7654a-154">The following example demonstrates the use of the `AddDeclarativeSecurity` method to add a security demand for <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag to a dynamic type named `MyDynamicClass`, in an assembly named EmittedExample.dll.</span></span> <span data-ttu-id="7654a-155">Przykład tworzy nie dane wyjściowe konsoli; Po uruchomieniu, można użyć [Ildasm.exe (dezasembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) do sprawdzenia EmittedExample.dll.</span><span class="sxs-lookup"><span data-stu-id="7654a-155">The example produces no console output; after you run it, you can use [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine EmittedExample.dll.</span></span> <span data-ttu-id="7654a-156">W `MyDynamicClass`, otwórz `.class public auto ansi` instrukcji, aby zobaczyć deklaratywne uprawnień.</span><span class="sxs-lookup"><span data-stu-id="7654a-156">In `MyDynamicClass`, open the `.class public auto ansi` statement to see the declarative permission.</span></span>  
  
 [!code-cpp[TypeBuilder_AddDeclarativeSecurity#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_AddDeclarativeSecurity/CPP/typebuilder_adddeclarativesecurity.cpp#1)]
 [!code-csharp[TypeBuilder_AddDeclarativeSecurity#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_AddDeclarativeSecurity/CS/typebuilder_adddeclarativesecurity.cs#1)]
 [!code-vb[TypeBuilder_AddDeclarativeSecurity#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_AddDeclarativeSecurity/VB/typebuilder_adddeclarativesecurity.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7654a-157"><paramref name="action" /> Jest nieprawidłowy (<see langword="RequestMinimum" />, <see langword="RequestOptional" />, i <see langword="RequestRefuse" /> są nieprawidłowe).</span><span class="sxs-lookup"><span data-stu-id="7654a-157">The <paramref name="action" /> is invalid (<see langword="RequestMinimum" />, <see langword="RequestOptional" />, and <see langword="RequestRefuse" /> are invalid).</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-158">Typ zawierający został utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-158">The containing type has been created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="7654a-159">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-159">-or-</span></span>  
  
 <span data-ttu-id="7654a-160">Zestaw uprawnień <paramref name="pset" /> zawiera akcję, która została dodana wcześniej przez <see langword="AddDeclarativeSecurity" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-160">The permission set <paramref name="pset" /> contains an action that was added earlier by <see langword="AddDeclarativeSecurity" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-161"><paramref name="pset" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-161"><paramref name="pset" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddInterfaceImplementation">
      <MemberSignature Language="C#" Value="public void AddInterfaceImplementation (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddInterfaceImplementation(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddInterfaceImplementation (interfaceType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddInterfaceImplementation(Type ^ interfaceType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType"><span data-ttu-id="7654a-162">Interfejs, który implementuje tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-162">The interface that this type implements.</span></span></param>
        <summary><span data-ttu-id="7654a-163">Dodaje interfejs, który implementuje tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-163">Adds an interface that this type implements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7654a-164">W poniższym przykładzie kodu pokazano implementacji interfejsu na typ dynamicznie utworzony przy użyciu `AddInterfaceImplementation`.</span><span class="sxs-lookup"><span data-stu-id="7654a-164">The following code sample demonstrates the implementation of an interface on a dynamically created type using `AddInterfaceImplementation`.</span></span>  
  
 [!code-cpp[TypeBuilder_Sample_4#3](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_Sample_4/CPP/typebuilder_sample_4.cpp#3)]
 [!code-csharp[TypeBuilder_Sample_4#3](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_Sample_4/CS/typebuilder_sample_4.cs#3)]
 [!code-vb[TypeBuilder_Sample_4#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_Sample_4/VB/typebuilder_sample_4.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-165"><paramref name="interfaceType" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-165"><paramref name="interfaceType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-166">Typ został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-166">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public override System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Assembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Assembly ^ Assembly { System::Reflection::Assembly ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7654a-167">Pobiera zestaw dynamiczny, który zawiera ta definicja typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-167">Retrieves the dynamic assembly that contains this type definition.</span></span></summary>
        <value><span data-ttu-id="7654a-168">Tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="7654a-168">Read-only.</span></span> <span data-ttu-id="7654a-169">Pobiera zestaw dynamiczny, który zawiera ta definicja typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-169">Retrieves the dynamic assembly that contains this type definition.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public override string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AssemblyQualifiedName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ AssemblyQualifiedName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7654a-170">Zwraca pełną nazwę tego typu kwalifikowana przez nazwę wyświetlaną zestawu.</span><span class="sxs-lookup"><span data-stu-id="7654a-170">Returns the full name of this type qualified by the display name of the assembly.</span></span></summary>
        <value><span data-ttu-id="7654a-171">Tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="7654a-171">Read-only.</span></span> <span data-ttu-id="7654a-172">Pełna nazwa tego typu kwalifikowana przez nazwę wyświetlaną zestawu.</span><span class="sxs-lookup"><span data-stu-id="7654a-172">The full name of this type qualified by the display name of the assembly.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-173">Format zwrócony ciąg jest złączeniem pełnej nazwy typu (<xref:System.Reflection.Emit.TypeBuilder.FullName%2A>) i nazwy wyświetlanej zestawu (<xref:System.Reflection.AssemblyName.FullName%2A?displayProperty=nameWithType>) oddzielone przecinkiem i spacją.</span><span class="sxs-lookup"><span data-stu-id="7654a-173">The format of the returned string is the concatenation of the full name of the type (<xref:System.Reflection.Emit.TypeBuilder.FullName%2A>) and the display name of the assembly (<xref:System.Reflection.AssemblyName.FullName%2A?displayProperty=nameWithType>), separated by a comma and a space.</span></span>  
  
 <span data-ttu-id="7654a-174">Zobacz <xref:System.Reflection.AssemblyName> opis format nazwy wyświetlanej zestawu.</span><span class="sxs-lookup"><span data-stu-id="7654a-174">See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="7654a-175">Informacje o wersji</span><span class="sxs-lookup"><span data-stu-id="7654a-175">Version Information</span></span>  
 <span data-ttu-id="7654a-176">W wersji systemu .NET Framework 1.0 i 1.1 wartość tej właściwości nie ma kultury lub klucza publicznego.</span><span class="sxs-lookup"><span data-stu-id="7654a-176">In the .NET Framework versions 1.0 and 1.1, the value of this property does not include the culture or public key.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.TypeAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Attributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::TypeAttributes Attributes { System::Reflection::TypeAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public override Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property BaseType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ BaseType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7654a-177">Pobiera typ bazowy tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-177">Retrieves the base type of this type.</span></span></summary>
        <value><span data-ttu-id="7654a-178">Tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="7654a-178">Read-only.</span></span> <span data-ttu-id="7654a-179">Pobiera typ bazowy tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-179">Retrieves the base type of this type.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsGenericParameters">
      <MemberSignature Language="C#" Value="public override bool ContainsGenericParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsGenericParameters" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.ContainsGenericParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ContainsGenericParameters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ContainsGenericParameters { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateType">
      <MemberSignature Language="C#" Value="public Type CreateType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type CreateType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.CreateType" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ CreateType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7654a-180">Tworzy <see cref="T:System.Type" /> obiektu dla tej klasy.</span><span class="sxs-lookup"><span data-stu-id="7654a-180">Creates a <see cref="T:System.Type" /> object for the class.</span></span> <span data-ttu-id="7654a-181">Po zdefiniowaniu pól i metod w klasie, <see langword="CreateType" /> jest wywoływana w celu załadowania jego <see langword="Type" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="7654a-181">After defining fields and methods on the class, <see langword="CreateType" /> is called in order to load its <see langword="Type" /> object.</span></span></summary>
        <returns><span data-ttu-id="7654a-182">Zwraca nowy <see cref="T:System.Type" /> obiektu dla tej klasy.</span><span class="sxs-lookup"><span data-stu-id="7654a-182">Returns the new <see cref="T:System.Type" /> object for this class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-183">Jeśli ten typ jest typem zagnieżdżonym <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> metoda musi zostać wywołana na typ otaczający przed jest wywoływana na typu zagnieżdżonego.</span><span class="sxs-lookup"><span data-stu-id="7654a-183">If this type is a nested type, the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method must be called on the enclosing type before it is called on the nested type.</span></span>  
  
 <span data-ttu-id="7654a-184">Jeśli bieżący typ pochodzi od typu niekompletne lub implementuje interfejsy niekompletne, wywołanie <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> metody w typie elementu nadrzędnego i typów interfejsów przed wywołaniem go w bieżącym typie.</span><span class="sxs-lookup"><span data-stu-id="7654a-184">If the current type derives from an incomplete type or implements incomplete interfaces, call the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method on the parent type and the interface types before calling it on the current type.</span></span>  
  
 <span data-ttu-id="7654a-185">Jeśli typ otaczający zawiera pola, które jest zdefiniowany jako typu zagnieżdżonego (na przykład pola, które jest zdefiniowany jako zagnieżdżony typ wyliczenia), typ wartości wywoływania <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> wygeneruje metody na typ otaczający <xref:System.AppDomain.TypeResolve?displayProperty=nameWithType> zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="7654a-185">If the enclosing type contains a field that is a value type defined as a nested type (for example, a field that is an enumeration defined as a nested type), calling the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method on the enclosing type will generate a <xref:System.AppDomain.TypeResolve?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="7654a-186">Jest to spowodowane modułu ładującego nie można ustalić rozmiaru typ otaczający dopiero po ukończeniu typu zagnieżdżonego.</span><span class="sxs-lookup"><span data-stu-id="7654a-186">This is because the loader cannot determine the size of the enclosing type until the nested type has been completed.</span></span> <span data-ttu-id="7654a-187">Obiekt wywołujący powinien definiować obsługi dla <xref:System.AppDomain.TypeResolve> zdarzenie, aby ukończyć tworzenie definicji typu zagnieżdżonego przez wywołanie metody <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> na <xref:System.Reflection.Emit.TypeBuilder> obiekt, który reprezentuje typu zagnieżdżonego.</span><span class="sxs-lookup"><span data-stu-id="7654a-187">The caller should define a handler for the <xref:System.AppDomain.TypeResolve> event to complete the definition of the nested type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> on the <xref:System.Reflection.Emit.TypeBuilder> object that represents the nested type.</span></span> <span data-ttu-id="7654a-188">Przykład kodu dla tego tematu przedstawiono sposób definiowania program obsługi zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="7654a-188">The code example for this topic shows how to define such an event handler.</span></span>  
  
 <span data-ttu-id="7654a-189">Typ jest tworzony tylko raz, niezależnie od tego, jak często <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> metoda jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="7654a-189">A type is created only once, no matter how many times the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method is called.</span></span> <span data-ttu-id="7654a-190">Wszystkie wywołania zwracać taki sam <xref:System.Type> obiektu.</span><span class="sxs-lookup"><span data-stu-id="7654a-190">All calls return the same <xref:System.Type> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7654a-191">Poniższy przykład kodu pokazuje sposób definiowania programu obsługi zdarzeń dla <xref:System.AppDomain.TypeResolve?displayProperty=nameWithType> zdarzeń, aby można było wywołać <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> metody dla typu zagnieżdżonego podczas <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> wywołać w typie otaczającym.</span><span class="sxs-lookup"><span data-stu-id="7654a-191">The following code example shows how to define an event handler for the <xref:System.AppDomain.TypeResolve?displayProperty=nameWithType> event, in order to call the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method on a nested type during a <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> call on the enclosing type.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.TypeBuilder.CreateType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.TypeBuilder.CreateType Example/CPP/nestedenum.cpp#1)]
 [!code-csharp[System.Reflection.Emit.TypeBuilder.CreateType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.TypeBuilder.CreateType Example/CS/nestedenum.cs#1)]
 [!code-vb[System.Reflection.Emit.TypeBuilder.CreateType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.TypeBuilder.CreateType Example/VB/nestedenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-192">Typ otaczający nie został utworzony.</span><span class="sxs-lookup"><span data-stu-id="7654a-192">The enclosing type has not been created.</span></span>  
  
 <span data-ttu-id="7654a-193">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-193">-or-</span></span>  
  
 <span data-ttu-id="7654a-194">Ten typ jest typem abstrakcyjnym i zawiera metody abstrakcyjnej.</span><span class="sxs-lookup"><span data-stu-id="7654a-194">This type is non-abstract and contains an abstract method.</span></span>  
  
 <span data-ttu-id="7654a-195">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-195">-or-</span></span>  
  
 <span data-ttu-id="7654a-196">Ten typ nie jest klasą abstrakcyjną lub interfejs i ma metody bez treści metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-196">This type is not an abstract class or an interface and has a method without a method body.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7654a-197">Typ zawiera nieprawidłowy kod języka pośredniego (MSIL) firmy Microsoft.</span><span class="sxs-lookup"><span data-stu-id="7654a-197">The type contains invalid Microsoft intermediate language (MSIL) code.</span></span>  
  
 <span data-ttu-id="7654a-198">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-198">-or-</span></span>  
  
 <span data-ttu-id="7654a-199">Cel rozgałęzienia jest określona za pomocą przesunięcie 1-bajtowych, ale obiekt docelowy jest w odległości większej niż 127 bajtów w gałęzi.</span><span class="sxs-lookup"><span data-stu-id="7654a-199">The branch target is specified using a 1-byte offset, but the target is at a distance greater than 127 bytes from the branch.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="7654a-200">Nie można załadować typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-200">The type cannot be loaded.</span></span> <span data-ttu-id="7654a-201">Na przykład zawiera <see langword="static" /> metodę, która ma konwencję wywołania <see cref="F:System.Reflection.CallingConventions.HasThis" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-201">For example, it contains a <see langword="static" /> method that has the calling convention <see cref="F:System.Reflection.CallingConventions.HasThis" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateTypeInfo">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeInfo CreateTypeInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.TypeInfo CreateTypeInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.CreateTypeInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateTypeInfo () As TypeInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::TypeInfo ^ CreateTypeInfo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7654a-202">Pobiera <see cref="T:System.Reflection.TypeInfo" /> obiekt, który reprezentuje tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-202">Gets a <see cref="T:System.Reflection.TypeInfo" /> object that represents this type.</span></span></summary>
        <returns><span data-ttu-id="7654a-203">Obiekt, który reprezentuje tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-203">An object that represents this type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringMethod">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodBase DeclaringMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodBase DeclaringMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.DeclaringMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringMethod As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodBase ^ DeclaringMethod { System::Reflection::MethodBase ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7654a-204">Pobiera metodę, która jest zadeklarowana bieżącego parametru typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-204">Gets the method that declared the current generic type parameter.</span></span></summary>
        <value><span data-ttu-id="7654a-205">A <see cref="T:System.Reflection.MethodBase" /> reprezentujący metodę, która jest zadeklarowana bieżącego typu, jeśli typ bieżącego parametru typu ogólnego; w przeciwnym razie <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-205">A <see cref="T:System.Reflection.MethodBase" /> that represents the method that declared the current type, if the current type is a generic type parameter; otherwise, <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="7654a-206">Gdy emitowanie kodu, parametru typu ogólnego jest reprezentowana przez <xref:System.Reflection.Emit.GenericTypeParameterBuilder> obiektu, a nie przez <xref:System.Reflection.Emit.TypeBuilder> obiektu.</span><span class="sxs-lookup"><span data-stu-id="7654a-206">When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7654a-207">Zwraca typ zadeklarowany tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-207">Returns the type that declared this type.</span></span></summary>
        <value><span data-ttu-id="7654a-208">Tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="7654a-208">Read-only.</span></span> <span data-ttu-id="7654a-209">Typ zadeklarowany tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-209">The type that declared this type.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineConstructor">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7654a-210">Dodaje nowego Konstruktora do typu dynamicznego.</span><span class="sxs-lookup"><span data-stu-id="7654a-210">Adds a new constructor to the dynamic type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ConstructorBuilder DefineConstructor (System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ConstructorBuilder DefineConstructor(valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineConstructor (attributes As MethodAttributes, callingConvention As CallingConventions, parameterTypes As Type()) As ConstructorBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ConstructorBuilder ^ DefineConstructor(System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ConstructorBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="attributes"><span data-ttu-id="7654a-211">Atrybuty konstruktora.</span><span class="sxs-lookup"><span data-stu-id="7654a-211">The attributes of the constructor.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="7654a-212">Konwencja wywoływania konstruktora.</span><span class="sxs-lookup"><span data-stu-id="7654a-212">The calling convention of the constructor.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="7654a-213">Typy parametrów konstruktora.</span><span class="sxs-lookup"><span data-stu-id="7654a-213">The parameter types of the constructor.</span></span></param>
        <summary><span data-ttu-id="7654a-214">Dodaje nowego Konstruktora do typu, podane atrybuty i podpisem.</span><span class="sxs-lookup"><span data-stu-id="7654a-214">Adds a new constructor to the type, with the given attributes and signature.</span></span></summary>
        <returns><span data-ttu-id="7654a-215">Konstruktor zdefiniowany.</span><span class="sxs-lookup"><span data-stu-id="7654a-215">The defined constructor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-216">Jeśli nie definiują konstruktora dla typu dynamicznego automatycznie podano konstruktora domyślnego i wywołuje konstruktor domyślny klasy podstawowej.</span><span class="sxs-lookup"><span data-stu-id="7654a-216">If you do not define a constructor for your dynamic type, a default constructor is provided automatically, and it calls the default constructor of the base class.</span></span>  
  
 <span data-ttu-id="7654a-217">Po zdefiniowaniu konstruktora dla typu dynamicznego nie podano konstruktora domyślnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-217">If you define a constructor for your dynamic type, a default constructor is not provided.</span></span> <span data-ttu-id="7654a-218">Masz następujące opcje zapewniające konstruktora domyślnego oprócz konstruktora, zdefiniowane przez użytkownika:</span><span class="sxs-lookup"><span data-stu-id="7654a-218">You have the following options for providing a default constructor in addition to the constructor you defined:</span></span>  
  
-   <span data-ttu-id="7654a-219">Jeśli chcesz domyślnego konstruktora, która po prostu wywołuje konstruktor domyślny klasy podstawowej, można użyć <xref:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor%2A> metodę, aby utworzyć (i opcjonalnie ograniczyć dostęp do niego).</span><span class="sxs-lookup"><span data-stu-id="7654a-219">If you want a default constructor that simply calls the default constructor of the base class, you can use the <xref:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor%2A> method to create one (and optionally restrict access to it).</span></span> <span data-ttu-id="7654a-220">Nie podawaj implementację tego konstruktora domyślnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-220">Do not provide an implementation for this default constructor.</span></span> <span data-ttu-id="7654a-221">Jeśli to zrobisz, jest wyjątek podczas próby użycia konstruktora.</span><span class="sxs-lookup"><span data-stu-id="7654a-221">If you do, an exception is thrown when you try to use the constructor.</span></span> <span data-ttu-id="7654a-222">Żaden wyjątek jest zgłaszany, gdy <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> metoda jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="7654a-222">No exception is thrown when the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method is called.</span></span>  
  
-   <span data-ttu-id="7654a-223">Jeśli chcesz domyślnego konstruktora, który wykonuje coś więcej niż po prostu wywołanie domyślnego konstruktora klasy podstawowej lub innego konstruktora, który odwołuje klasy podstawowej, lub że jakiś sposób przetwarzającego całkowicie, należy użyć <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A?displayProperty=nameWithType> metody, aby go utworzyć, i podaj swoje własne implementacji.</span><span class="sxs-lookup"><span data-stu-id="7654a-223">If you want a default constructor that does something more than simply calling the default constructor of the base class, or that calls another constructor of the base class, or that does something else entirely, you must use the <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A?displayProperty=nameWithType> method to create one, and provide your own implementation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7654a-224">W poniższym przykładzie kodu pokazano stosowania `DefineConstructor` ustawić określonego podpisu i atrybutów konstruktora dla typu dynamicznego, a następnie wróć, odpowiadający jej <xref:System.Reflection.Emit.ConstructorBuilder> do uzupełnienia MSIL.</span><span class="sxs-lookup"><span data-stu-id="7654a-224">The following code sample demonstrates the use of `DefineConstructor` to set a constructor's particular signature and attributes on a dynamic type and return a corresponding <xref:System.Reflection.Emit.ConstructorBuilder> for MSIL population.</span></span>  
  
 [!code-cpp[TypeBuilder_Sample_4#2](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_Sample_4/CPP/typebuilder_sample_4.cpp#2)]
 [!code-csharp[TypeBuilder_Sample_4#2](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_Sample_4/CS/typebuilder_sample_4.cs#2)]
 [!code-vb[TypeBuilder_Sample_4#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_Sample_4/VB/typebuilder_sample_4.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-225">Typ został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-225">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ConstructorBuilder DefineConstructor (System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ConstructorBuilder DefineConstructor(valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type[] parameterTypes, class System.Type[][] requiredCustomModifiers, class System.Type[][] optionalCustomModifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineConstructor (attributes As MethodAttributes, callingConvention As CallingConventions, parameterTypes As Type(), requiredCustomModifiers As Type()(), optionalCustomModifiers As Type()()) As ConstructorBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ConstructorBuilder ^ DefineConstructor(System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, cli::array &lt;Type ^&gt; ^ parameterTypes, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ requiredCustomModifiers, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ optionalCustomModifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ConstructorBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="requiredCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="optionalCustomModifiers" Type="System.Type[][]" />
      </Parameters>
      <Docs>
        <param name="attributes"><span data-ttu-id="7654a-226">Atrybuty konstruktora.</span><span class="sxs-lookup"><span data-stu-id="7654a-226">The attributes of the constructor.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="7654a-227">Konwencja wywoływania konstruktora.</span><span class="sxs-lookup"><span data-stu-id="7654a-227">The calling convention of the constructor.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="7654a-228">Typy parametrów konstruktora.</span><span class="sxs-lookup"><span data-stu-id="7654a-228">The parameter types of the constructor.</span></span></param>
        <param name="requiredCustomModifiers"><span data-ttu-id="7654a-229">Tablica tablice typów.</span><span class="sxs-lookup"><span data-stu-id="7654a-229">An array of arrays of types.</span></span> <span data-ttu-id="7654a-230">Każdej macierzy typy reprezentuje wymagane Modyfikatory niestandardowych do odpowiadającego mu parametru takich jak <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-230">Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="7654a-231">Jeśli określonego parametru Brak wymaganego modyfikatorów niestandardowych, określ <see langword="null" /> zamiast tablicę typów.</span><span class="sxs-lookup"><span data-stu-id="7654a-231">If a particular parameter has no required custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="7654a-232">Jeśli żaden z parametrów mają odpowiednie Modyfikatory niestandardowych, określ <see langword="null" /> zamiast tablicy tablic.</span><span class="sxs-lookup"><span data-stu-id="7654a-232">If none of the parameters have required custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <param name="optionalCustomModifiers"><span data-ttu-id="7654a-233">Tablica tablice typów.</span><span class="sxs-lookup"><span data-stu-id="7654a-233">An array of arrays of types.</span></span> <span data-ttu-id="7654a-234">Każdej macierzy typy reprezentuje opcjonalne Modyfikatory niestandardowych do odpowiadającego mu parametru takich jak <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-234">Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="7654a-235">Jeśli określonego parametru brak opcjonalne modyfikatorów niestandardowych, określ <see langword="null" /> zamiast tablicę typów.</span><span class="sxs-lookup"><span data-stu-id="7654a-235">If a particular parameter has no optional custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="7654a-236">Jeśli żaden z parametrów nie ma opcjonalne Modyfikatory niestandardowych, określ <see langword="null" /> zamiast tablicy tablic.</span><span class="sxs-lookup"><span data-stu-id="7654a-236">If none of the parameters have optional custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <summary><span data-ttu-id="7654a-237">Dodaje nowego Konstruktora do typu, podane atrybuty, sygnatury i Modyfikatory niestandardowych.</span><span class="sxs-lookup"><span data-stu-id="7654a-237">Adds a new constructor to the type, with the given attributes, signature, and custom modifiers.</span></span></summary>
        <returns><span data-ttu-id="7654a-238">Konstruktor zdefiniowany.</span><span class="sxs-lookup"><span data-stu-id="7654a-238">The defined constructor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-239">To przeciążenie jest dostępna dla projektantów kompilatory zarządzanych.</span><span class="sxs-lookup"><span data-stu-id="7654a-239">This overload is provided for designers of managed compilers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7654a-240">Więcej informacji o niestandardowych Modyfikatory znajduje się w dokumentacji ECMA partycji II metadanych.</span><span class="sxs-lookup"><span data-stu-id="7654a-240">For more information on custom modifiers, see the ECMA Partition II Metadata documentation.</span></span> <span data-ttu-id="7654a-241">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# i wspólne normy infrastruktury języka](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie sieci Web międzynarodowej Ecma.</span><span class="sxs-lookup"><span data-stu-id="7654a-241">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7654a-242">Rozmiar <paramref name="requiredCustomModifiers" /> lub <paramref name="optionalCustomModifiers" /> nie równa się rozmiar <paramref name="parameterTypes" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-242">The size of <paramref name="requiredCustomModifiers" /> or <paramref name="optionalCustomModifiers" /> does not equal the size of <paramref name="parameterTypes" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-243">Typ został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-243">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="7654a-244">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-244">-or-</span></span>  
  
 <span data-ttu-id="7654a-245">Dla bieżącego typu dynamicznego <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> właściwość jest <see langword="true" />, ale <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> jest właściwość <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-245">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineDefaultConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ConstructorBuilder DefineDefaultConstructor (System.Reflection.MethodAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ConstructorBuilder DefineDefaultConstructor(valuetype System.Reflection.MethodAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDefaultConstructor (attributes As MethodAttributes) As ConstructorBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ConstructorBuilder ^ DefineDefaultConstructor(System::Reflection::MethodAttributes attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ConstructorBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes"><span data-ttu-id="7654a-246">A <see langword="MethodAttributes" /> obiekt reprezentujący atrybuty, które mają być stosowane do konstruktora.</span><span class="sxs-lookup"><span data-stu-id="7654a-246">A <see langword="MethodAttributes" /> object representing the attributes to be applied to the constructor.</span></span></param>
        <summary><span data-ttu-id="7654a-247">Definiuje konstruktora domyślnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-247">Defines the default constructor.</span></span> <span data-ttu-id="7654a-248">Konstruktor zdefiniowany w tym miejscu po prostu wywoła domyślny konstruktor obiektu nadrzędnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-248">The constructor defined here will simply call the default constructor of the parent.</span></span></summary>
        <returns><span data-ttu-id="7654a-249">Zwraca konstruktora.</span><span class="sxs-lookup"><span data-stu-id="7654a-249">Returns the constructor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-250">Ponieważ automatycznie zdefiniowano konstruktora domyślnego, konieczne jest tę metodę można wywołać tylko w następujących sytuacjach:</span><span class="sxs-lookup"><span data-stu-id="7654a-250">Because the default constructor is automatically defined, it is necessary to call this method only in the following situations:</span></span>  
  
-   <span data-ttu-id="7654a-251">Zdefiniowano innego konstruktora i ma konstruktora domyślnego, która po prostu wywołuje konstruktor klasy podstawowej.</span><span class="sxs-lookup"><span data-stu-id="7654a-251">You have defined another constructor and you also want a default constructor that simply calls the base class constructor.</span></span>  
  
-   <span data-ttu-id="7654a-252">Aby ustawić atrybutów konstruktora domyślnego do czegoś innego niż <xref:System.Reflection.MethodAttributes.PrivateScope>, <xref:System.Reflection.MethodAttributes.Public>, <xref:System.Reflection.MethodAttributes.HideBySig>, <xref:System.Reflection.MethodAttributes.SpecialName>, i <xref:System.Reflection.MethodAttributes.RTSpecialName>.</span><span class="sxs-lookup"><span data-stu-id="7654a-252">You want to set the attributes on the default constructor to something other than <xref:System.Reflection.MethodAttributes.PrivateScope>, <xref:System.Reflection.MethodAttributes.Public>, <xref:System.Reflection.MethodAttributes.HideBySig>, <xref:System.Reflection.MethodAttributes.SpecialName>, and <xref:System.Reflection.MethodAttributes.RTSpecialName>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7654a-253">W poniższym przykładzie kodu pokazano stosowania `DefineConstructor` ustawić określonego podpisu i atrybutów konstruktora dla typu dynamicznego, a następnie wróć, odpowiadający jej <xref:System.Reflection.Emit.ConstructorBuilder> do uzupełnienia MSIL.</span><span class="sxs-lookup"><span data-stu-id="7654a-253">The following code sample demonstrates the use of `DefineConstructor` to set a constructor's particular signature and attributes on a dynamic type and return a corresponding <xref:System.Reflection.Emit.ConstructorBuilder> for MSIL population.</span></span>  
  
 [!code-cpp[TypeBuilder_Sample_4#2](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_Sample_4/CPP/typebuilder_sample_4.cpp#2)]
 [!code-csharp[TypeBuilder_Sample_4#2](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_Sample_4/CS/typebuilder_sample_4.cs#2)]
 [!code-vb[TypeBuilder_Sample_4#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_Sample_4/VB/typebuilder_sample_4.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7654a-254">Typ nadrzędny (typ podstawowy) nie ma domyślnego konstruktora.</span><span class="sxs-lookup"><span data-stu-id="7654a-254">The parent type (base type) does not have a default constructor.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-255">Typ został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-255">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="7654a-256">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-256">-or-</span></span>  
  
 <span data-ttu-id="7654a-257">Dla bieżącego typu dynamicznego <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> właściwość jest <see langword="true" />, ale <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> jest właściwość <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-257">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineEvent">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.EventBuilder DefineEvent (string name, System.Reflection.EventAttributes attributes, Type eventtype);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.EventBuilder DefineEvent(string name, valuetype System.Reflection.EventAttributes attributes, class System.Type eventtype) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineEvent (name As String, attributes As EventAttributes, eventtype As Type) As EventBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::EventBuilder ^ DefineEvent(System::String ^ name, System::Reflection::EventAttributes attributes, Type ^ eventtype);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.EventBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.EventAttributes" />
        <Parameter Name="eventtype" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-258">Nazwa zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="7654a-258">The name of the event.</span></span> <span data-ttu-id="7654a-259"><c>Nazwa</c> nie może zawierać osadzone wartości.</span><span class="sxs-lookup"><span data-stu-id="7654a-259"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="7654a-260">Atrybuty zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="7654a-260">The attributes of the event.</span></span></param>
        <param name="eventtype"><span data-ttu-id="7654a-261">Typ zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="7654a-261">The type of the event.</span></span></param>
        <summary><span data-ttu-id="7654a-262">Dodaje nowe zdarzenie do typu, o podanej nazwie, atrybuty i zdarzeń typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-262">Adds a new event to the type, with the given name, attributes and event type.</span></span></summary>
        <returns><span data-ttu-id="7654a-263">Określonych zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="7654a-263">The defined event.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7654a-264">Długość <paramref name="name" /> wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="7654a-264">The length of <paramref name="name" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-265"><paramref name="name" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-265"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="7654a-266">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-266">-or-</span></span>  
  
 <span data-ttu-id="7654a-267"><paramref name="eventtype" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-267"><paramref name="eventtype" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-268">Typ został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-268">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineField">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7654a-269">Dodaje nowe pole do typu dynamicznego.</span><span class="sxs-lookup"><span data-stu-id="7654a-269">Adds a new field to the dynamic type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineField">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.FieldBuilder DefineField (string fieldName, Type type, System.Reflection.FieldAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.FieldBuilder DefineField(string fieldName, class System.Type type, valuetype System.Reflection.FieldAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::FieldBuilder ^ DefineField(System::String ^ fieldName, Type ^ type, System::Reflection::FieldAttributes attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.FieldBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="attributes" Type="System.Reflection.FieldAttributes" />
      </Parameters>
      <Docs>
        <param name="fieldName"><span data-ttu-id="7654a-270">Nazwa pola.</span><span class="sxs-lookup"><span data-stu-id="7654a-270">The name of the field.</span></span> <span data-ttu-id="7654a-271"><c>Nazwa pola</c> nie może zawierać osadzone wartości.</span><span class="sxs-lookup"><span data-stu-id="7654a-271"><c>fieldName</c> cannot contain embedded nulls.</span></span></param>
        <param name="type"><span data-ttu-id="7654a-272">Typ pola</span><span class="sxs-lookup"><span data-stu-id="7654a-272">The type of the field</span></span></param>
        <param name="attributes"><span data-ttu-id="7654a-273">Atrybuty pola.</span><span class="sxs-lookup"><span data-stu-id="7654a-273">The attributes of the field.</span></span></param>
        <summary><span data-ttu-id="7654a-274">Dodaje nowe pole do typu, o podanej nazwie, atrybuty i typ pola.</span><span class="sxs-lookup"><span data-stu-id="7654a-274">Adds a new field to the type, with the given name, attributes, and field type.</span></span></summary>
        <returns><span data-ttu-id="7654a-275">Zdefiniowane pola.</span><span class="sxs-lookup"><span data-stu-id="7654a-275">The defined field.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7654a-276">Długość <paramref name="fieldName" /> wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="7654a-276">The length of <paramref name="fieldName" /> is zero.</span></span>  
  
 <span data-ttu-id="7654a-277">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-277">-or-</span></span>  
  
 <span data-ttu-id="7654a-278"><paramref name="type" /> jest System.Void.</span><span class="sxs-lookup"><span data-stu-id="7654a-278"><paramref name="type" /> is System.Void.</span></span>  
  
 <span data-ttu-id="7654a-279">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-279">-or-</span></span>  
  
 <span data-ttu-id="7654a-280">Całkowity rozmiar został określony dla klasy nadrzędnej tego pola.</span><span class="sxs-lookup"><span data-stu-id="7654a-280">A total size was specified for the parent class of this field.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-281"><paramref name="fieldName" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-281"><paramref name="fieldName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-282">Typ został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-282">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineField">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.FieldBuilder DefineField (string fieldName, Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers, System.Reflection.FieldAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.FieldBuilder DefineField(string fieldName, class System.Type type, class System.Type[] requiredCustomModifiers, class System.Type[] optionalCustomModifiers, valuetype System.Reflection.FieldAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::FieldBuilder ^ DefineField(System::String ^ fieldName, Type ^ type, cli::array &lt;Type ^&gt; ^ requiredCustomModifiers, cli::array &lt;Type ^&gt; ^ optionalCustomModifiers, System::Reflection::FieldAttributes attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.FieldBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="requiredCustomModifiers" Type="System.Type[]" />
        <Parameter Name="optionalCustomModifiers" Type="System.Type[]" />
        <Parameter Name="attributes" Type="System.Reflection.FieldAttributes" />
      </Parameters>
      <Docs>
        <param name="fieldName"><span data-ttu-id="7654a-283">Nazwa pola.</span><span class="sxs-lookup"><span data-stu-id="7654a-283">The name of the field.</span></span> <span data-ttu-id="7654a-284"><c>Nazwa pola</c> nie może zawierać osadzone wartości.</span><span class="sxs-lookup"><span data-stu-id="7654a-284"><c>fieldName</c> cannot contain embedded nulls.</span></span></param>
        <param name="type"><span data-ttu-id="7654a-285">Typ pola</span><span class="sxs-lookup"><span data-stu-id="7654a-285">The type of the field</span></span></param>
        <param name="requiredCustomModifiers"><span data-ttu-id="7654a-286">Tablica typów reprezentujący wymagane Modyfikatory niestandardowego pola, takie jak <see cref="T:Microsoft.VisualC.IsConstModifier" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-286">An array of types representing the required custom modifiers for the field, such as <see cref="T:Microsoft.VisualC.IsConstModifier" />.</span></span></param>
        <param name="optionalCustomModifiers"><span data-ttu-id="7654a-287">Tablica typów reprezentujący opcjonalne Modyfikatory niestandardowego pola, takie jak <see cref="T:Microsoft.VisualC.IsConstModifier" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-287">An array of types representing the optional custom modifiers for the field, such as <see cref="T:Microsoft.VisualC.IsConstModifier" />.</span></span></param>
        <param name="attributes"><span data-ttu-id="7654a-288">Atrybuty pola.</span><span class="sxs-lookup"><span data-stu-id="7654a-288">The attributes of the field.</span></span></param>
        <summary><span data-ttu-id="7654a-289">Dodaje nowe pole z typem, o podanej nazwie, atrybuty, typ pola i Modyfikatory niestandardowych.</span><span class="sxs-lookup"><span data-stu-id="7654a-289">Adds a new field to the type, with the given name, attributes, field type, and custom modifiers.</span></span></summary>
        <returns><span data-ttu-id="7654a-290">Zdefiniowane pola.</span><span class="sxs-lookup"><span data-stu-id="7654a-290">The defined field.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-291">To przeciążenie jest dostępna dla projektantów kompilatory zarządzanych.</span><span class="sxs-lookup"><span data-stu-id="7654a-291">This overload is provided for designers of managed compilers.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7654a-292">Długość <paramref name="fieldName" /> wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="7654a-292">The length of <paramref name="fieldName" /> is zero.</span></span>  
  
 <span data-ttu-id="7654a-293">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-293">-or-</span></span>  
  
 <span data-ttu-id="7654a-294"><paramref name="type" /> jest System.Void.</span><span class="sxs-lookup"><span data-stu-id="7654a-294"><paramref name="type" /> is System.Void.</span></span>  
  
 <span data-ttu-id="7654a-295">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-295">-or-</span></span>  
  
 <span data-ttu-id="7654a-296">Całkowity rozmiar został określony dla klasy nadrzędnej tego pola.</span><span class="sxs-lookup"><span data-stu-id="7654a-296">A total size was specified for the parent class of this field.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-297"><paramref name="fieldName" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-297"><paramref name="fieldName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-298">Typ został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-298">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineGenericParameters">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.GenericTypeParameterBuilder[] DefineGenericParameters (params string[] names);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.GenericTypeParameterBuilder[] DefineGenericParameters(string[] names) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineGenericParameters (ParamArray names As String()) As GenericTypeParameterBuilder()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::Emit::GenericTypeParameterBuilder ^&gt; ^ DefineGenericParameters(... cli::array &lt;System::String ^&gt; ^ names);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.GenericTypeParameterBuilder[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="names"><span data-ttu-id="7654a-299">Tablica nazw parametrów typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-299">An array of names for the generic type parameters.</span></span></param>
        <summary><span data-ttu-id="7654a-300">Definiuje parametry typu ogólnego dla bieżącego typu określenie ich liczbę oraz ich nazw i zwraca tablicę <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> obiektów, których można użyć do ustawienia ich ograniczenia.</span><span class="sxs-lookup"><span data-stu-id="7654a-300">Defines the generic type parameters for the current type, specifying their number and their names, and returns an array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects that can be used to set their constraints.</span></span></summary>
        <returns><span data-ttu-id="7654a-301">Tablica <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> obiektów, które mogą służyć do definiowania ograniczenia parametrów typu ogólnego dla bieżącego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-301">An array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects that can be used to define the constraints of the generic type parameters for the current type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-302">Wywołanie tej metody sprawia, że typ bieżącego typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-302">Calling this method makes the current type a generic type.</span></span> <span data-ttu-id="7654a-303">Jeśli metoda jest wywoływana ponownie do tego samego typu <xref:System.InvalidOperationException> jest generowany.</span><span class="sxs-lookup"><span data-stu-id="7654a-303">If the method is called again on the same type, an <xref:System.InvalidOperationException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7654a-304">Poniższy przykład kodu tworzy dwa parametry typu ogólnego typu i zapisuje je w zestawie GenericEmitExample1.dll.</span><span class="sxs-lookup"><span data-stu-id="7654a-304">The following code example creates a generic type with two type parameters and saves them in the assembly GenericEmitExample1.dll.</span></span> <span data-ttu-id="7654a-305">Można użyć [Ildasm.exe (dezasembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) Aby przejrzeć wygenerowane typy.</span><span class="sxs-lookup"><span data-stu-id="7654a-305">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to view the generated types.</span></span> <span data-ttu-id="7654a-306">Aby uzyskać bardziej szczegółowy opis etapy Definiowanie typu ogólnego dynamicznego, zobacz [porady: Definiowanie typu ogólnego z emisja odbicia](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="7654a-306">For a more detailed explanation of the steps involved in defining a dynamic generic type, see [How to: Define a Generic Type with Reflection Emit](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md).</span></span>  
  
 [!code-cpp[EmitGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR/EmitGenericType/CPP/source.cpp#1)]
 [!code-csharp[EmitGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR/EmitGenericType/CS/source.cs#1)]
 [!code-vb[EmitGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EmitGenericType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-307">Parametry typu ogólnego zostały już zdefiniowane dla tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-307">Generic type parameters have already been defined for this type.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-308"><paramref name="names" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-308"><paramref name="names" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="7654a-309">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-309">-or-</span></span>  
  
 <span data-ttu-id="7654a-310">Element <paramref name="names" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-310">An element of <paramref name="names" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7654a-311"><paramref name="names" /> jest pusta tablica.</span><span class="sxs-lookup"><span data-stu-id="7654a-311"><paramref name="names" /> is an empty array.</span></span></exception>
        <altmember cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />
      </Docs>
    </Member>
    <Member MemberName="DefineInitializedData">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.FieldBuilder DefineInitializedData (string name, byte[] data, System.Reflection.FieldAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.FieldBuilder DefineInitializedData(string name, unsigned int8[] data, valuetype System.Reflection.FieldAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineInitializedData (name As String, data As Byte(), attributes As FieldAttributes) As FieldBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::FieldBuilder ^ DefineInitializedData(System::String ^ name, cli::array &lt;System::Byte&gt; ^ data, System::Reflection::FieldAttributes attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.FieldBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="attributes" Type="System.Reflection.FieldAttributes" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-312">Nazwa używana do odwoływania się do danych.</span><span class="sxs-lookup"><span data-stu-id="7654a-312">The name used to refer to the data.</span></span> <span data-ttu-id="7654a-313"><c>Nazwa</c> nie może zawierać osadzone wartości.</span><span class="sxs-lookup"><span data-stu-id="7654a-313"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="data"><span data-ttu-id="7654a-314">Obiekt blob danych.</span><span class="sxs-lookup"><span data-stu-id="7654a-314">The blob of data.</span></span></param>
        <param name="attributes"><span data-ttu-id="7654a-315">Atrybuty dla pola.</span><span class="sxs-lookup"><span data-stu-id="7654a-315">The attributes for the field.</span></span></param>
        <summary><span data-ttu-id="7654a-316">Określa pole danymi zainicjowanymi w sekcji .sdata pliku przenośny plik wykonywalny (PE).</span><span class="sxs-lookup"><span data-stu-id="7654a-316">Defines initialized data field in the .sdata section of the portable executable (PE) file.</span></span></summary>
        <returns><span data-ttu-id="7654a-317">Pole danych referencyjnych.</span><span class="sxs-lookup"><span data-stu-id="7654a-317">A field to reference the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-318">Pole utworzonej za pomocą tej metody jest `static`, nawet jeśli nie zostanie uwzględniony `FieldAttributes.Static` w `attributes` parametru.</span><span class="sxs-lookup"><span data-stu-id="7654a-318">The field that you create with this method will be `static`, even if you do not include `FieldAttributes.Static` in the `attributes` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7654a-319">Długość <paramref name="name" /> wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="7654a-319">Length of <paramref name="name" /> is zero.</span></span>  
  
 <span data-ttu-id="7654a-320">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-320">-or-</span></span>  
  
 <span data-ttu-id="7654a-321">Rozmiar danych jest mniejsza niż lub równa zero, lub większa niż lub równa 0x3f0000.</span><span class="sxs-lookup"><span data-stu-id="7654a-321">The size of the data is less than or equal to zero, or greater than or equal to 0x3f0000.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-322"><paramref name="name" /> lub <paramref name="data" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-322"><paramref name="name" /> or <paramref name="data" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="7654a-323"><see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> została wcześniej wywołana.</span><span class="sxs-lookup"><span data-stu-id="7654a-323"><see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been previously called.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7654a-324">Dodaje metodę do typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-324">Adds a method to the type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefineMethod(string name, valuetype System.Reflection.MethodAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineMethod (name As String, attributes As MethodAttributes) As MethodBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefineMethod(System::String ^ name, System::Reflection::MethodAttributes attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-325">Nazwa metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-325">The name of the method.</span></span> <span data-ttu-id="7654a-326"><c>Nazwa</c> nie może zawierać osadzone wartości.</span><span class="sxs-lookup"><span data-stu-id="7654a-326"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="7654a-327">Atrybuty metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-327">The attributes of the method.</span></span></param>
        <summary><span data-ttu-id="7654a-328">Dodaje nową metodę do typu, o określonych atrybutów nazwy i metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-328">Adds a new method to the type, with the specified name and method attributes.</span></span></summary>
        <returns><span data-ttu-id="7654a-329">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> reprezentujący metodę nowo zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="7654a-329">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> representing the newly defined method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-330">Użyj tego przeciążenia metody, jeśli nie znasz podpis metody w tym czasie można zdefiniować metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-330">Use this method overload when you do not know the method signature at the time you define the method.</span></span> <span data-ttu-id="7654a-331">Na przykład typy parametrów i typ zwracany metody rodzajowej może być określony przez parametry typu ogólnego metody, które muszą zostać określone, po dodaniu do typu metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-331">For example, the parameter types and return type of a generic method might be specified by the method's generic type parameters, which must be defined after the method has been added to the type.</span></span> <span data-ttu-id="7654a-332">Parametry oraz zwracany typ metody można ustawić później za pomocą <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-332">The parameters and return type of the method can be set later using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="7654a-333">To przeciążenie metody definiuje metodę o <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7654a-333">This method overload defines a method with <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7654a-334">Jeśli musisz zdefiniować metody bez podpisu z różnych Konwencja wywoływania <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29> przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-334">If you need to define a method without a signature, with a different calling convention, use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7654a-335">Poniższy przykładowy kod definiuje metody rodzajowej o nazwie `DemoMethod` których typ parametru i typ zwracany są określane przez jego parametrów typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-335">The following code example defines a generic method named `DemoMethod` whose parameter type and return type are specified by its generic type parameters.</span></span> <span data-ttu-id="7654a-336">Metoda jest określona bez podpisu, przy użyciu standardowej konwencji wywoływania.</span><span class="sxs-lookup"><span data-stu-id="7654a-336">The method is defined without a signature, using the standard calling convention.</span></span> <span data-ttu-id="7654a-337"><xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> Używa metody w celu `DemoMethod` metody rodzajowej i parametry nowo zdefiniowanego typu są następnie używane w celu podpisania i typ zwracany.</span><span class="sxs-lookup"><span data-stu-id="7654a-337">The <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> method is used to make `DemoMethod` a generic method, and the newly defined type parameters are then used for the signature and return type.</span></span>  
  
 <span data-ttu-id="7654a-338">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-338">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.</span></span>  
  
 [!code-cpp[GenericMethodBuilder#4](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#4)]
 [!code-csharp[GenericMethodBuilder#4](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#4)]
 [!code-vb[GenericMethodBuilder#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#4)]  
[!code-cpp[GenericMethodBuilder#3](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#3)]
[!code-csharp[GenericMethodBuilder#3](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#3)]
[!code-vb[GenericMethodBuilder#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#3)]  
[!code-cpp[GenericMethodBuilder#5](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#5)]
[!code-csharp[GenericMethodBuilder#5](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#5)]
[!code-vb[GenericMethodBuilder#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7654a-339">Długość <paramref name="name" /> wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="7654a-339">The length of <paramref name="name" /> is zero.</span></span>  
  
 <span data-ttu-id="7654a-340">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-340">-or-</span></span>  
  
 <span data-ttu-id="7654a-341">Typ elementu nadrzędnego ta metoda jest interfejsem, a ta metoda nie jest wirtualny (<see langword="Overridable" /> w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="7654a-341">The type of the parent of this method is an interface, and this method is not virtual (<see langword="Overridable" /> in Visual Basic).</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-342"><paramref name="name" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-342"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-343">Typ został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-343">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="7654a-344">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-344">-or-</span></span>  
  
 <span data-ttu-id="7654a-345">Dla bieżącego typu dynamicznego <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> właściwość jest <see langword="true" />, ale <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> jest właściwość <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-345">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="DefineMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefineMethod(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineMethod (name As String, attributes As MethodAttributes, callingConvention As CallingConventions) As MethodBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefineMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-346">Nazwa metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-346">The name of the method.</span></span> <span data-ttu-id="7654a-347"><c>Nazwa</c> nie może zawierać osadzone wartości.</span><span class="sxs-lookup"><span data-stu-id="7654a-347"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="7654a-348">Atrybuty metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-348">The attributes of the method.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="7654a-349">Konwencja wywołania metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-349">The calling convention of the method.</span></span></param>
        <summary><span data-ttu-id="7654a-350">Dodaje nową metodę do typu, z określoną nazwą, atrybuty metody i Konwencja wywoływania.</span><span class="sxs-lookup"><span data-stu-id="7654a-350">Adds a new method to the type, with the specified name, method attributes, and calling convention.</span></span></summary>
        <returns><span data-ttu-id="7654a-351">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> reprezentujący metodę nowo zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="7654a-351">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> representing the newly defined method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-352">Użyj tego przeciążenia metody, jeśli nie znasz podpis metody w tym czasie można zdefiniować metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-352">Use this method overload when you do not know the method signature at the time you define the method.</span></span> <span data-ttu-id="7654a-353">Na przykład typy parametrów i typ zwracany metody rodzajowej może być określony przez parametry typu ogólnego metody, które muszą zostać określone, po dodaniu do typu metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-353">For example, the parameter types and return type of a generic method might be specified by the method's generic type parameters, which must be defined after the method has been added to the type.</span></span> <span data-ttu-id="7654a-354">Parametry oraz zwracany typ metody można ustawić później za pomocą <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-354">The parameters and return type of the method can be set later using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7654a-355">Długość <paramref name="name" /> wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="7654a-355">The length of <paramref name="name" /> is zero.</span></span>  
  
 <span data-ttu-id="7654a-356">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-356">-or-</span></span>  
  
 <span data-ttu-id="7654a-357">Typ elementu nadrzędnego ta metoda jest interfejsem, a ta metoda nie jest wirtualny (<see langword="Overridable" /> w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="7654a-357">The type of the parent of this method is an interface and this method is not virtual (<see langword="Overridable" /> in Visual Basic).</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-358"><paramref name="name" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-358"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-359">Typ został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-359">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="7654a-360">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-360">-or-</span></span>  
  
 <span data-ttu-id="7654a-361">Dla bieżącego typu dynamicznego <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> właściwość jest <see langword="true" />, ale <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> jest właściwość <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-361">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="DefineMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefineMethod(string name, valuetype System.Reflection.MethodAttributes attributes, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineMethod (name As String, attributes As MethodAttributes, returnType As Type, parameterTypes As Type()) As MethodBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefineMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-362">Nazwa metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-362">The name of the method.</span></span> <span data-ttu-id="7654a-363"><c>Nazwa</c> nie może zawierać osadzone wartości.</span><span class="sxs-lookup"><span data-stu-id="7654a-363"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="7654a-364">Atrybuty metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-364">The attributes of the method.</span></span></param>
        <param name="returnType"><span data-ttu-id="7654a-365">Zwracany typ metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-365">The return type of the method.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="7654a-366">Typy parametrów metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-366">The types of the parameters of the method.</span></span></param>
        <summary><span data-ttu-id="7654a-367">Dodaje nową metodę do typu, z określoną nazwą, atrybuty metody i podpis metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-367">Adds a new method to the type, with the specified name, method attributes, and method signature.</span></span></summary>
        <returns><span data-ttu-id="7654a-368">Metody zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="7654a-368">The defined method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7654a-369">W poniższym przykładzie kodu pokazano stosowania `DefineMethod` można ustawić określonego podpisu i atrybutów konstruktora dla typu dynamicznego i powrócić do odpowiadającego <xref:System.Reflection.Emit.MethodBuilder> do uzupełnienia MSIL.</span><span class="sxs-lookup"><span data-stu-id="7654a-369">The following code sample demonstrates the use of `DefineMethod` to set a constructor's particular signature and attributes on a dynamic type and to return a corresponding <xref:System.Reflection.Emit.MethodBuilder> for MSIL population.</span></span>  
  
 [!code-cpp[TypeBuilder_DefineNestedType1#2](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/CPP/typebuilder_definenestedtype1.cpp#2)]
 [!code-csharp[TypeBuilder_DefineNestedType1#2](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/CS/typebuilder_definenestedtype1.cs#2)]
 [!code-vb[TypeBuilder_DefineNestedType1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/VB/typebuilder_definenestedtype1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7654a-370">Długość <paramref name="name" /> wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="7654a-370">The length of <paramref name="name" /> is zero.</span></span>  
  
 <span data-ttu-id="7654a-371">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-371">-or-</span></span>  
  
 <span data-ttu-id="7654a-372">Typ elementu nadrzędnego ta metoda jest interfejsem, a ta metoda nie jest wirtualny (<see langword="Overridable" /> w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="7654a-372">The type of the parent of this method is an interface, and this method is not virtual (<see langword="Overridable" /> in Visual Basic).</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-373"><paramref name="name" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-373"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-374">Typ został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-374">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="7654a-375">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-375">-or-</span></span>  
  
 <span data-ttu-id="7654a-376">Dla bieżącego typu dynamicznego <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> właściwość jest <see langword="true" />, ale <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> jest właściwość <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-376">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefineMethod(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineMethod (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type()) As MethodBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefineMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-377">Nazwa metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-377">The name of the method.</span></span> <span data-ttu-id="7654a-378"><c>Nazwa</c> nie może zawierać osadzone wartości.</span><span class="sxs-lookup"><span data-stu-id="7654a-378"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="7654a-379">Atrybuty metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-379">The attributes of the method.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="7654a-380">Konwencja wywołania metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-380">The calling convention of the method.</span></span></param>
        <param name="returnType"><span data-ttu-id="7654a-381">Zwracany typ metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-381">The return type of the method.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="7654a-382">Typy parametrów metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-382">The types of the parameters of the method.</span></span></param>
        <summary><span data-ttu-id="7654a-383">Dodaje nową metodę do typu, z określoną nazwą, atrybuty metody, Konwencja wywoływania i podpis metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-383">Adds a new method to the type, with the specified name, method attributes, calling convention, and method signature.</span></span></summary>
        <returns><span data-ttu-id="7654a-384">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> reprezentujący metodę nowo zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="7654a-384">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> representing the newly defined method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7654a-385">W poniższym przykładzie kodu pokazano stosowania `DefineMethod` można ustawić określonego podpisu i atrybutów konstruktora dla typu dynamicznego i powrócić do odpowiadającego <xref:System.Reflection.Emit.MethodBuilder> do uzupełnienia MSIL.</span><span class="sxs-lookup"><span data-stu-id="7654a-385">The following code sample demonstrates the use of `DefineMethod` to set a constructor's particular signature and attributes on a dynamic type and to return a corresponding <xref:System.Reflection.Emit.MethodBuilder> for MSIL population.</span></span>  
  
 [!code-cpp[TypeBuilder_DefineNestedType1#2](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/CPP/typebuilder_definenestedtype1.cpp#2)]
 [!code-csharp[TypeBuilder_DefineNestedType1#2](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/CS/typebuilder_definenestedtype1.cs#2)]
 [!code-vb[TypeBuilder_DefineNestedType1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/VB/typebuilder_definenestedtype1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7654a-386">Długość <paramref name="name" /> wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="7654a-386">The length of <paramref name="name" /> is zero.</span></span>  
  
 <span data-ttu-id="7654a-387">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-387">-or-</span></span>  
  
 <span data-ttu-id="7654a-388">Typ elementu nadrzędnego ta metoda jest interfejsem, a ta metoda nie jest wirtualny (<see langword="Overridable" /> w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="7654a-388">The type of the parent of this method is an interface, and this method is not virtual (<see langword="Overridable" /> in Visual Basic).</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-389"><paramref name="name" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-389"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-390">Typ został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-390">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="7654a-391">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-391">-or-</span></span>  
  
 <span data-ttu-id="7654a-392">Dla bieżącego typu dynamicznego <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> właściwość jest <see langword="true" />, ale <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> jest właściwość <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-392">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefineMethod(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] returnTypeRequiredCustomModifiers, class System.Type[] returnTypeOptionalCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] parameterTypeRequiredCustomModifiers, class System.Type[][] parameterTypeOptionalCustomModifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineMethod (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, returnTypeRequiredCustomModifiers As Type(), returnTypeOptionalCustomModifiers As Type(), parameterTypes As Type(), parameterTypeRequiredCustomModifiers As Type()(), parameterTypeOptionalCustomModifiers As Type()()) As MethodBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefineMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ returnTypeRequiredCustomModifiers, cli::array &lt;Type ^&gt; ^ returnTypeOptionalCustomModifiers, cli::array &lt;Type ^&gt; ^ parameterTypes, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeRequiredCustomModifiers, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeOptionalCustomModifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnTypeRequiredCustomModifiers" Type="System.Type[]" />
        <Parameter Name="returnTypeOptionalCustomModifiers" Type="System.Type[]" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="parameterTypeRequiredCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="parameterTypeOptionalCustomModifiers" Type="System.Type[][]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-393">Nazwa metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-393">The name of the method.</span></span> <span data-ttu-id="7654a-394"><c>Nazwa</c> nie może zawierać osadzone wartości.</span><span class="sxs-lookup"><span data-stu-id="7654a-394"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="7654a-395">Atrybuty metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-395">The attributes of the method.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="7654a-396">Konwencja wywołania metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-396">The calling convention of the method.</span></span></param>
        <param name="returnType"><span data-ttu-id="7654a-397">Zwracany typ metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-397">The return type of the method.</span></span></param>
        <param name="returnTypeRequiredCustomModifiers"><span data-ttu-id="7654a-398">Tablica typów reprezentujący wymagane Modyfikatory niestandardowych, takich jak <see cref="T:System.Runtime.CompilerServices.IsConst" />, dla zwracanego typu metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-398">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method.</span></span> <span data-ttu-id="7654a-399">Jeśli typ zwracany jest Brak wymaganego modyfikatorów niestandardowych, określić <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-399">If the return type has no required custom modifiers, specify <see langword="null" />.</span></span></param>
        <param name="returnTypeOptionalCustomModifiers"><span data-ttu-id="7654a-400">Tablica typów reprezentujący opcjonalne Modyfikatory niestandardowych, takich jak <see cref="T:System.Runtime.CompilerServices.IsConst" />, dla zwracanego typu metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-400">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method.</span></span> <span data-ttu-id="7654a-401">Jeśli typ zwracany jest brak opcjonalne modyfikatorów niestandardowych, określić <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-401">If the return type has no optional custom modifiers, specify <see langword="null" />.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="7654a-402">Typy parametrów metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-402">The types of the parameters of the method.</span></span></param>
        <param name="parameterTypeRequiredCustomModifiers"><span data-ttu-id="7654a-403">Tablica tablice typów.</span><span class="sxs-lookup"><span data-stu-id="7654a-403">An array of arrays of types.</span></span> <span data-ttu-id="7654a-404">Każdej macierzy typy reprezentuje wymagane Modyfikatory niestandardowych do odpowiadającego mu parametru takich jak <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-404">Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="7654a-405">Jeśli określonego parametru Brak wymaganego modyfikatorów niestandardowych, określ <see langword="null" /> zamiast tablicę typów.</span><span class="sxs-lookup"><span data-stu-id="7654a-405">If a particular parameter has no required custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="7654a-406">Jeśli żaden z parametrów mają odpowiednie Modyfikatory niestandardowych, określ <see langword="null" /> zamiast tablicy tablic.</span><span class="sxs-lookup"><span data-stu-id="7654a-406">If none of the parameters have required custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <param name="parameterTypeOptionalCustomModifiers"><span data-ttu-id="7654a-407">Tablica tablice typów.</span><span class="sxs-lookup"><span data-stu-id="7654a-407">An array of arrays of types.</span></span> <span data-ttu-id="7654a-408">Każdej macierzy typy reprezentuje opcjonalne Modyfikatory niestandardowych do odpowiadającego mu parametru takich jak <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-408">Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="7654a-409">Jeśli określonego parametru brak opcjonalne modyfikatorów niestandardowych, określ <see langword="null" /> zamiast tablicę typów.</span><span class="sxs-lookup"><span data-stu-id="7654a-409">If a particular parameter has no optional custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="7654a-410">Jeśli żaden z parametrów nie ma opcjonalne Modyfikatory niestandardowych, określ <see langword="null" /> zamiast tablicy tablic.</span><span class="sxs-lookup"><span data-stu-id="7654a-410">If none of the parameters have optional custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <summary><span data-ttu-id="7654a-411">Dodaje nową metodę do typu, o określonej nazwie, atrybuty metody wywoływanie Konwencji, podpis metody i Modyfikatory niestandardowych.</span><span class="sxs-lookup"><span data-stu-id="7654a-411">Adds a new method to the type, with the specified name, method attributes, calling convention, method signature, and custom modifiers.</span></span></summary>
        <returns><span data-ttu-id="7654a-412">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> obiekt reprezentujący metodę nowo dodany.</span><span class="sxs-lookup"><span data-stu-id="7654a-412">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> object representing the newly added method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-413">Użyj tego przeciążenia, jeśli trzeba określić niestandardowy modyfikatorów.</span><span class="sxs-lookup"><span data-stu-id="7654a-413">Use this overload if you need to specify custom modifiers.</span></span> <span data-ttu-id="7654a-414">Jeśli musisz określić niestandardowe Modyfikatory po utworzeniu metody, jak na przykład metodą rodzajową, których typy parametrów są określane przez jego parametrów typu ogólnego służy <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%29> lub <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29> przeciążenia metody, aby zdefiniować Metoda, a następnie użycie <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> metodę, aby określić parametr i zwracać typów z niestandardowych modyfikatorów.</span><span class="sxs-lookup"><span data-stu-id="7654a-414">If you need to specify custom modifiers after the method has been created, as you would, for example, with a generic method whose parameter types are specified by its generic type parameters, you can use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%29> or <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29> method overloads to define the method and then use the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> method to define the parameter and return types with custom modifiers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7654a-415">Więcej informacji o niestandardowych Modyfikatory znajduje się w dokumentacji ECMA partycji II metadanych.</span><span class="sxs-lookup"><span data-stu-id="7654a-415">For more information on custom modifiers, see the ECMA Partition II Metadata documentation.</span></span> <span data-ttu-id="7654a-416">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# i wspólne normy infrastruktury języka](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie sieci Web międzynarodowej Ecma.</span><span class="sxs-lookup"><span data-stu-id="7654a-416">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7654a-417">Długość <paramref name="name" /> wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="7654a-417">The length of <paramref name="name" /> is zero.</span></span>  
  
 <span data-ttu-id="7654a-418">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-418">-or-</span></span>  
  
 <span data-ttu-id="7654a-419">Typ elementu nadrzędnego ta metoda jest interfejsem, a ta metoda nie jest wirtualny (<see langword="Overridable" /> w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="7654a-419">The type of the parent of this method is an interface, and this method is not virtual (<see langword="Overridable" /> in Visual Basic).</span></span>  
  
 <span data-ttu-id="7654a-420">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-420">-or-</span></span>  
  
 <span data-ttu-id="7654a-421">Rozmiar <paramref name="parameterTypeRequiredCustomModifiers" /> lub <paramref name="parameterTypeOptionalCustomModifiers" /> nie równa się rozmiar <paramref name="parameterTypes" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-421">The size of <paramref name="parameterTypeRequiredCustomModifiers" /> or <paramref name="parameterTypeOptionalCustomModifiers" /> does not equal the size of <paramref name="parameterTypes" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-422"><paramref name="name" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-422"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-423">Typ został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-423">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="7654a-424">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-424">-or-</span></span>  
  
 <span data-ttu-id="7654a-425">Dla bieżącego typu dynamicznego <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> właściwość jest <see langword="true" />, ale <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> jest właściwość <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-425">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineMethodOverride">
      <MemberSignature Language="C#" Value="public void DefineMethodOverride (System.Reflection.MethodInfo methodInfoBody, System.Reflection.MethodInfo methodInfoDeclaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefineMethodOverride(class System.Reflection.MethodInfo methodInfoBody, class System.Reflection.MethodInfo methodInfoDeclaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefineMethodOverride (methodInfoBody As MethodInfo, methodInfoDeclaration As MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefineMethodOverride(System::Reflection::MethodInfo ^ methodInfoBody, System::Reflection::MethodInfo ^ methodInfoDeclaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfoBody" Type="System.Reflection.MethodInfo" />
        <Parameter Name="methodInfoDeclaration" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="methodInfoBody"><span data-ttu-id="7654a-426">Treść metody, która ma być używany.</span><span class="sxs-lookup"><span data-stu-id="7654a-426">The method body to be used.</span></span> <span data-ttu-id="7654a-427">To pole powinno być <see langword="MethodBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="7654a-427">This should be a <see langword="MethodBuilder" /> object.</span></span></param>
        <param name="methodInfoDeclaration"><span data-ttu-id="7654a-428">Metoda deklaracja, której ma być używany.</span><span class="sxs-lookup"><span data-stu-id="7654a-428">The method whose declaration is to be used.</span></span></param>
        <summary><span data-ttu-id="7654a-429">Określa treści podanej metody, która implementuje deklaracji podanej metody potencjalnie z inną nazwą.</span><span class="sxs-lookup"><span data-stu-id="7654a-429">Specifies a given method body that implements a given method declaration, potentially with a different name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-430">Nie należy używać tej metody można wyemitować metody przesłonięć lub implementacji interfejsów.</span><span class="sxs-lookup"><span data-stu-id="7654a-430">Do not use this method to emit method overrides or interface implementations.</span></span> <span data-ttu-id="7654a-431">Aby zastąpić metodę klasy podstawowej lub zaimplementować metodę interfejsu, że po prostu Emituj jako metody do przesłonięcia lub zaimplementowana, metody o tej samej nazwie i podpisie jak pokazano w przykładzie kodu.</span><span class="sxs-lookup"><span data-stu-id="7654a-431">To override a method of a base class or to implement a method of an interface, simply emit a method with the same name and signature as the method to be overridden or implemented, as demonstrated in the code example.</span></span>  
  
 <span data-ttu-id="7654a-432"><xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> Metoda jest używana podczas treści metody i deklaracji metody mieć różne nazwy.</span><span class="sxs-lookup"><span data-stu-id="7654a-432">The <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method is used when a method body and a method declaration have different names.</span></span> <span data-ttu-id="7654a-433">Na przykład klasa może przesłaniać metody klasy podstawowej i udostępniają osobne implementacji dla elementu członkowskiego interfejsu o takiej samej nazwie, jak pokazano w przykładzie kodu.</span><span class="sxs-lookup"><span data-stu-id="7654a-433">For example, a class might override a base class method and also provide a separate implementation for an interface member with the same name, as demonstrated in the code example.</span></span>  
  
 <span data-ttu-id="7654a-434">`DefineMethodOverride` definiuje `methodimpl`, który składa się z pary tokenów metadanych.</span><span class="sxs-lookup"><span data-stu-id="7654a-434">`DefineMethodOverride` defines a `methodimpl`, which consists of a pair of metadata tokens.</span></span> <span data-ttu-id="7654a-435">Jednego tokenu punktów do implementacji i innych punktów token deklaracji, który implementuje treści.</span><span class="sxs-lookup"><span data-stu-id="7654a-435">One token points to an implementation, and the other token points to a declaration that the body implements.</span></span> <span data-ttu-id="7654a-436">Treść musi być zdefiniowana w typie implementację metody jest zdefiniowana na i treści musi być wirtualna (`Overridable` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="7654a-436">The body must be defined on the type the method impl is defined on, and the body must be virtual (`Overridable` in Visual Basic).</span></span> <span data-ttu-id="7654a-437">Deklaracja może pełnić metoda w interfejsie zaimplementowany przez typ, metoda w klasie pochodnej lub metody w typie.</span><span class="sxs-lookup"><span data-stu-id="7654a-437">The declaration can be made to a method defined on an interface implemented by the type, a method on a derived class, or a method defined in the type.</span></span> <span data-ttu-id="7654a-438">Deklaracja jest tylko do interfejsu, zmiany miejsca zdefiniowane dla interfejsu.</span><span class="sxs-lookup"><span data-stu-id="7654a-438">If the declaration is on an interface only, the slot defined for the interface is altered.</span></span> <span data-ttu-id="7654a-439">Jeśli zgłoszenia do metody na typ podstawowy, zostanie zastąpiona miejsce dla metody i duplikaty dla przeciążonej również zostają zastąpione.</span><span class="sxs-lookup"><span data-stu-id="7654a-439">If the declaration is made to a method on a base type, the slot for the method is overridden and any duplicates for the overridden method are also replaced.</span></span> <span data-ttu-id="7654a-440">Przeciążonej nie może być rzeczywiste metodę, która jest zadeklarowana.</span><span class="sxs-lookup"><span data-stu-id="7654a-440">The overridden method cannot be the actual method that is declared.</span></span> <span data-ttu-id="7654a-441">Jeśli metoda jest do tego samego typu, zastępuje gniazda, a duplikaty dla metod zastąpionego zostaną zastąpione.</span><span class="sxs-lookup"><span data-stu-id="7654a-441">If the method is on the same type, the slot is replaced and any duplicates for the replaced methods are overridden.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7654a-442">Aby uzyskać więcej informacji na temat impls metody, zobacz `MethodImpl` w dokumentacji ECMA partycji II metadanych.</span><span class="sxs-lookup"><span data-stu-id="7654a-442">For more information about method impls, see `MethodImpl` in the ECMA Partition II Metadata documentation.</span></span> <span data-ttu-id="7654a-443">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# i wspólne normy infrastruktury języka](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie sieci Web międzynarodowej Ecma.</span><span class="sxs-lookup"><span data-stu-id="7654a-443">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7654a-444">Po <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> metoda jest wywoływana, niektóre funkcje `methodInfoBody` nie można zmienić.</span><span class="sxs-lookup"><span data-stu-id="7654a-444">After the <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method is called, some features of `methodInfoBody` cannot be changed.</span></span> <span data-ttu-id="7654a-445">Na przykład nie można zastosować atrybutów do parametrów typu ogólnego `methodInfoBody` przy użyciu <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-445">For example, you cannot apply an attribute to a generic type parameter of `methodInfoBody` by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A> method.</span></span> <span data-ttu-id="7654a-446">Jeśli musisz użyć <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> metody zrobić po wszystkich właściwości `methodInfoBody` zostały zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="7654a-446">If you must use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method, do so after all characteristics of `methodInfoBody` have been defined.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7654a-447">Poniższy przykład kodu zawiera interfejs `I` za pomocą metody `M()`, klasę podstawową `A` implementującej interfejs i Klasa pochodna `C` który zastępuje implementację klasy podstawowej `M()` , a także zapewnia osobne jawnej implementacji `I.M()`.</span><span class="sxs-lookup"><span data-stu-id="7654a-447">The following code example contains an interface `I` with a method `M()`, a base class `A` that implements the interface, and a derived class `C` that overrides the base class implementation of `M()` and also provides a separate explicit implementation of `I.M()`.</span></span>  
  
 <span data-ttu-id="7654a-448">`main()` Metody przykładowy kod przedstawia sposób Emituj klasy pochodnej `C`.</span><span class="sxs-lookup"><span data-stu-id="7654a-448">The `main()` method of the code example shows how to emit the derived class `C`.</span></span> <span data-ttu-id="7654a-449">Zastąpienie z `A.M()` odbywa się za pomocą metody emitowanie `M()` z tym samym podpisie.</span><span class="sxs-lookup"><span data-stu-id="7654a-449">The override of `A.M()` is accomplished simply by emitting a method `M()` with the same signature.</span></span> <span data-ttu-id="7654a-450">Jednak do oddzielnych implementacji programu `I.M()`, należy zdefiniować treści metody, a następnie użyć <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> do kojarzenia danej treści metody z <xref:System.Reflection.MethodInfo> reprezentujący `I.M()`.</span><span class="sxs-lookup"><span data-stu-id="7654a-450">However, to provide a separate implementation of `I.M()`, you must define a method body and then use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method to associate that method body with a <xref:System.Reflection.MethodInfo> representing `I.M()`.</span></span> <span data-ttu-id="7654a-451">Nazwa treści metody nie ma znaczenia.</span><span class="sxs-lookup"><span data-stu-id="7654a-451">The name of the method body does not matter.</span></span>  
  
 <span data-ttu-id="7654a-452">Przykład kodu tworzy wystąpienie klasy emitowany.</span><span class="sxs-lookup"><span data-stu-id="7654a-452">The code example creates an instance of the emitted class.</span></span> <span data-ttu-id="7654a-453">Uzyskuje <xref:System.Reflection.MethodInfo> obiekt do `I.M()`, i używa go do wywołania emitowany klasy przez jawne implementacja interfejsu.</span><span class="sxs-lookup"><span data-stu-id="7654a-453">It obtains a <xref:System.Reflection.MethodInfo> object for `I.M()`, and uses it to invoke the emitted class's explicit interface implementation.</span></span> <span data-ttu-id="7654a-454">Następnie uzyskuje <xref:System.Reflection.MethodInfo> obiekt do `A.M()`i używa go do wywołania emitowany klasy przesłonięcia tej metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-454">It then obtains a <xref:System.Reflection.MethodInfo> object for `A.M()`, and uses it to invoke the emitted class's override of that method.</span></span>  
  
 [!code-cpp[TypeBuilder.DefineMethodOverride#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder.DefineMethodOverride/cpp/source.cpp#1)]
 [!code-csharp[TypeBuilder.DefineMethodOverride#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder.DefineMethodOverride/cs/source.cs#1)]
 [!code-vb[TypeBuilder.DefineMethodOverride#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder.DefineMethodOverride/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7654a-455"><paramref name="methodInfoBody" /> nie należy do tej klasy.</span><span class="sxs-lookup"><span data-stu-id="7654a-455"><paramref name="methodInfoBody" /> does not belong to this class.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-456"><paramref name="methodInfoBody" /> lub <paramref name="methodInfoDeclaration" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-456"><paramref name="methodInfoBody" /> or <paramref name="methodInfoDeclaration" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-457">Typ został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-457">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="7654a-458">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-458">-or-</span></span>  
  
 <span data-ttu-id="7654a-459">Typ deklarujący <paramref name="methodInfoBody" /> nie jest reprezentowany przez ten typ <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-459">The declaring type of <paramref name="methodInfoBody" /> is not the type represented by this <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineNestedType">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7654a-460">Definiuje typu zagnieżdżonego.</span><span class="sxs-lookup"><span data-stu-id="7654a-460">Defines a nested type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-461">Krótka nazwa typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-461">The short name of the type.</span></span> <span data-ttu-id="7654a-462"><c>Nazwa</c> nie może zawierać osadzone wartości.</span><span class="sxs-lookup"><span data-stu-id="7654a-462"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <summary><span data-ttu-id="7654a-463">Definiuje typu zagnieżdżonego, jego nazwę.</span><span class="sxs-lookup"><span data-stu-id="7654a-463">Defines a nested type, given its name.</span></span></summary>
        <returns><span data-ttu-id="7654a-464">Zdefiniowanego typu zagnieżdżonego.</span><span class="sxs-lookup"><span data-stu-id="7654a-464">The defined nested type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-465">Ta metoda może służyć do tworzenia zagnieżdżonych typów nawet po <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> metoda została wywołana dla typu otaczającego.</span><span class="sxs-lookup"><span data-stu-id="7654a-465">This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.</span></span>  
  
 <span data-ttu-id="7654a-466">Zagnieżdżony typ musi być ukończone przed można uwzględnić w nim przy użyciu <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, lub <xref:System.Type.GetNestedTypes%2A>.</span><span class="sxs-lookup"><span data-stu-id="7654a-466">The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.</span></span>  
  
 <span data-ttu-id="7654a-467">Zobacz opis <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> kolejności, w którym można ukończyć zagnieżdżone typy i zagnieżdżenia.</span><span class="sxs-lookup"><span data-stu-id="7654a-467">See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.</span></span>  
  
 <span data-ttu-id="7654a-468">Zduplikowane nazwy nie jest zawsze utworzony, jeśli `name` jest taka sama jak nazwa wcześniej zdefiniowanego typu lub typu zagnieżdżonego.</span><span class="sxs-lookup"><span data-stu-id="7654a-468">A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type.</span></span> <span data-ttu-id="7654a-469">Na duplikaty, pełnej nazwy muszą być takie same, w tym przestrzeń nazw i wszystkie typy zagnieżdżenia.</span><span class="sxs-lookup"><span data-stu-id="7654a-469">To be duplicates, the full names must be the same, including the namespace and all nesting types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7654a-470">Długość <paramref name="name" /> wynosi zero lub większa niż 1023.</span><span class="sxs-lookup"><span data-stu-id="7654a-470">Length of <paramref name="name" /> is zero or greater than 1023.</span></span>  
  
 <span data-ttu-id="7654a-471">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-471">-or-</span></span>  
  
 <span data-ttu-id="7654a-472">Ta operacja spowodowałaby utworzenie typu duplikat <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> w bieżącym zestawie.</span><span class="sxs-lookup"><span data-stu-id="7654a-472">This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-473"><paramref name="name" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-473"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String, attr As TypeAttributes) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name, System::Reflection::TypeAttributes attr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attr" Type="System.Reflection.TypeAttributes" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-474">Krótka nazwa typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-474">The short name of the type.</span></span> <span data-ttu-id="7654a-475"><c>Nazwa</c> nie może zawierać osadzone wartości.</span><span class="sxs-lookup"><span data-stu-id="7654a-475"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attr"><span data-ttu-id="7654a-476">Atrybuty typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-476">The attributes of the type.</span></span></param>
        <summary><span data-ttu-id="7654a-477">Definiuje typem zagnieżdżonym podanej nazwy i atrybutów.</span><span class="sxs-lookup"><span data-stu-id="7654a-477">Defines a nested type, given its name and attributes.</span></span></summary>
        <returns><span data-ttu-id="7654a-478">Zdefiniowanego typu zagnieżdżonego.</span><span class="sxs-lookup"><span data-stu-id="7654a-478">The defined nested type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-479">Ta metoda może służyć do tworzenia zagnieżdżonych typów nawet po <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> metoda została wywołana dla typu otaczającego.</span><span class="sxs-lookup"><span data-stu-id="7654a-479">This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.</span></span>  
  
 <span data-ttu-id="7654a-480">Zagnieżdżony typ musi być ukończone przed można uwzględnić w nim przy użyciu <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, lub <xref:System.Type.GetNestedTypes%2A>.</span><span class="sxs-lookup"><span data-stu-id="7654a-480">The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.</span></span>  
  
 <span data-ttu-id="7654a-481">Zobacz opis <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> kolejności, w którym można ukończyć zagnieżdżone typy i zagnieżdżenia.</span><span class="sxs-lookup"><span data-stu-id="7654a-481">See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.</span></span>  
  
 <span data-ttu-id="7654a-482">Zduplikowane nazwy nie jest zawsze utworzony, jeśli `name` jest taka sama jak nazwa wcześniej zdefiniowanego typu lub typu zagnieżdżonego.</span><span class="sxs-lookup"><span data-stu-id="7654a-482">A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type.</span></span> <span data-ttu-id="7654a-483">Na duplikaty, pełnej nazwy muszą być takie same, w tym przestrzeń nazw i wszystkie typy zagnieżdżenia.</span><span class="sxs-lookup"><span data-stu-id="7654a-483">To be duplicates, the full names must be the same, including the namespace and all nesting types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7654a-484">Nie określono atrybutu zagnieżdżonych.</span><span class="sxs-lookup"><span data-stu-id="7654a-484">The nested attribute is not specified.</span></span>  
  
 <span data-ttu-id="7654a-485">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-485">-or-</span></span>  
  
 <span data-ttu-id="7654a-486">Ten typ jest zapieczętowany.</span><span class="sxs-lookup"><span data-stu-id="7654a-486">This type is sealed.</span></span>  
  
 <span data-ttu-id="7654a-487">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-487">-or-</span></span>  
  
 <span data-ttu-id="7654a-488">Ten typ jest tablicą.</span><span class="sxs-lookup"><span data-stu-id="7654a-488">This type is an array.</span></span>  
  
 <span data-ttu-id="7654a-489">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-489">-or-</span></span>  
  
 <span data-ttu-id="7654a-490">Ten typ jest interfejsem, ale typu zagnieżdżonego nie jest interfejsem.</span><span class="sxs-lookup"><span data-stu-id="7654a-490">This type is an interface, but the nested type is not an interface.</span></span>  
  
 <span data-ttu-id="7654a-491">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-491">-or-</span></span>  
  
 <span data-ttu-id="7654a-492">Długość <paramref name="name" /> wynosi zero lub większa niż 1023.</span><span class="sxs-lookup"><span data-stu-id="7654a-492">The length of <paramref name="name" /> is zero or greater than 1023.</span></span>  
  
 <span data-ttu-id="7654a-493">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-493">-or-</span></span>  
  
 <span data-ttu-id="7654a-494">Ta operacja spowodowałaby utworzenie typu duplikat <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> w bieżącym zestawie.</span><span class="sxs-lookup"><span data-stu-id="7654a-494">This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-495"><paramref name="name" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-495"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String, attr As TypeAttributes, parent As Type) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name, System::Reflection::TypeAttributes attr, Type ^ parent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attr" Type="System.Reflection.TypeAttributes" />
        <Parameter Name="parent" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-496">Krótka nazwa typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-496">The short name of the type.</span></span> <span data-ttu-id="7654a-497"><c>Nazwa</c> nie może zawierać osadzone wartości.</span><span class="sxs-lookup"><span data-stu-id="7654a-497"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attr"><span data-ttu-id="7654a-498">Atrybuty typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-498">The attributes of the type.</span></span></param>
        <param name="parent"><span data-ttu-id="7654a-499">Typ, rozszerzający typu zagnieżdżonego.</span><span class="sxs-lookup"><span data-stu-id="7654a-499">The type that the nested type extends.</span></span></param>
        <summary><span data-ttu-id="7654a-500">Definiuje typu zagnieżdżonego, jego nazwa, atrybuty i typ, który rozszerza.</span><span class="sxs-lookup"><span data-stu-id="7654a-500">Defines a nested type, given its name, attributes, and the type that it extends.</span></span></summary>
        <returns><span data-ttu-id="7654a-501">Zdefiniowanego typu zagnieżdżonego.</span><span class="sxs-lookup"><span data-stu-id="7654a-501">The defined nested type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-502">Ta metoda może służyć do tworzenia zagnieżdżonych typów nawet po <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> metoda została wywołana dla typu otaczającego.</span><span class="sxs-lookup"><span data-stu-id="7654a-502">This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.</span></span>  
  
 <span data-ttu-id="7654a-503">Zagnieżdżony typ musi być ukończone przed można uwzględnić w nim przy użyciu <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, lub <xref:System.Type.GetNestedTypes%2A>.</span><span class="sxs-lookup"><span data-stu-id="7654a-503">The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.</span></span>  
  
 <span data-ttu-id="7654a-504">Zobacz opis <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> kolejności, w którym można ukończyć zagnieżdżone typy i zagnieżdżenia.</span><span class="sxs-lookup"><span data-stu-id="7654a-504">See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.</span></span>  
  
 <span data-ttu-id="7654a-505">Zduplikowane nazwy nie jest zawsze utworzony, jeśli `name` jest taka sama jak nazwa wcześniej zdefiniowanego typu lub typu zagnieżdżonego.</span><span class="sxs-lookup"><span data-stu-id="7654a-505">A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type.</span></span> <span data-ttu-id="7654a-506">Na duplikaty, pełnej nazwy muszą być takie same, w tym przestrzeń nazw i wszystkie typy zagnieżdżenia.</span><span class="sxs-lookup"><span data-stu-id="7654a-506">To be duplicates, the full names must be the same, including the namespace and all nesting types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7654a-507">Nie określono atrybutu zagnieżdżonych.</span><span class="sxs-lookup"><span data-stu-id="7654a-507">The nested attribute is not specified.</span></span>  
  
 <span data-ttu-id="7654a-508">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-508">-or-</span></span>  
  
 <span data-ttu-id="7654a-509">Ten typ jest zapieczętowany.</span><span class="sxs-lookup"><span data-stu-id="7654a-509">This type is sealed.</span></span>  
  
 <span data-ttu-id="7654a-510">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-510">-or-</span></span>  
  
 <span data-ttu-id="7654a-511">Ten typ jest tablicą.</span><span class="sxs-lookup"><span data-stu-id="7654a-511">This type is an array.</span></span>  
  
 <span data-ttu-id="7654a-512">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-512">-or-</span></span>  
  
 <span data-ttu-id="7654a-513">Ten typ jest interfejsem, ale typu zagnieżdżonego nie jest interfejsem.</span><span class="sxs-lookup"><span data-stu-id="7654a-513">This type is an interface, but the nested type is not an interface.</span></span>  
  
 <span data-ttu-id="7654a-514">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-514">-or-</span></span>  
  
 <span data-ttu-id="7654a-515">Długość <paramref name="name" /> wynosi zero lub większa niż 1023.</span><span class="sxs-lookup"><span data-stu-id="7654a-515">The length of <paramref name="name" /> is zero or greater than 1023.</span></span>  
  
 <span data-ttu-id="7654a-516">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-516">-or-</span></span>  
  
 <span data-ttu-id="7654a-517">Ta operacja spowodowałaby utworzenie typu duplikat <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> w bieżącym zestawie.</span><span class="sxs-lookup"><span data-stu-id="7654a-517">This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-518"><paramref name="name" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-518"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, int typeSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent, int32 typeSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String, attr As TypeAttributes, parent As Type, typeSize As Integer) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name, System::Reflection::TypeAttributes attr, Type ^ parent, int typeSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attr" Type="System.Reflection.TypeAttributes" />
        <Parameter Name="parent" Type="System.Type" />
        <Parameter Name="typeSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-519">Krótka nazwa typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-519">The short name of the type.</span></span> <span data-ttu-id="7654a-520"><c>Nazwa</c> nie może zawierać osadzone wartości.</span><span class="sxs-lookup"><span data-stu-id="7654a-520"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attr"><span data-ttu-id="7654a-521">Atrybuty typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-521">The attributes of the type.</span></span></param>
        <param name="parent"><span data-ttu-id="7654a-522">Typ, rozszerzający typu zagnieżdżonego.</span><span class="sxs-lookup"><span data-stu-id="7654a-522">The type that the nested type extends.</span></span></param>
        <param name="typeSize"><span data-ttu-id="7654a-523">Całkowity rozmiar tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-523">The total size of the type.</span></span></param>
        <summary><span data-ttu-id="7654a-524">Definiuje typu zagnieżdżonego, biorąc pod uwagę jego nazwę, atrybuty, łączny rozmiar tego typu, a typ, który rozszerza.</span><span class="sxs-lookup"><span data-stu-id="7654a-524">Defines a nested type, given its name, attributes, the total size of the type, and the type that it extends.</span></span></summary>
        <returns><span data-ttu-id="7654a-525">Zdefiniowanego typu zagnieżdżonego.</span><span class="sxs-lookup"><span data-stu-id="7654a-525">The defined nested type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-526">Ta metoda może służyć do tworzenia zagnieżdżonych typów nawet po <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> metoda została wywołana dla typu otaczającego.</span><span class="sxs-lookup"><span data-stu-id="7654a-526">This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.</span></span>  
  
 <span data-ttu-id="7654a-527">Zagnieżdżony typ musi być ukończone przed można uwzględnić w nim przy użyciu <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, lub <xref:System.Type.GetNestedTypes%2A>.</span><span class="sxs-lookup"><span data-stu-id="7654a-527">The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.</span></span>  
  
 <span data-ttu-id="7654a-528">Zobacz opis <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> kolejności, w którym można ukończyć zagnieżdżone typy i zagnieżdżenia.</span><span class="sxs-lookup"><span data-stu-id="7654a-528">See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.</span></span>  
  
 <span data-ttu-id="7654a-529">Zduplikowane nazwy nie jest zawsze utworzony, jeśli `name` jest taka sama jak nazwa wcześniej zdefiniowanego typu lub typu zagnieżdżonego.</span><span class="sxs-lookup"><span data-stu-id="7654a-529">A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type.</span></span> <span data-ttu-id="7654a-530">Na duplikaty, pełnej nazwy muszą być takie same, w tym przestrzeń nazw i wszystkie typy zagnieżdżenia.</span><span class="sxs-lookup"><span data-stu-id="7654a-530">To be duplicates, the full names must be the same, including the namespace and all nesting types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7654a-531">Nie określono atrybutu zagnieżdżonych.</span><span class="sxs-lookup"><span data-stu-id="7654a-531">The nested attribute is not specified.</span></span>  
  
 <span data-ttu-id="7654a-532">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-532">-or-</span></span>  
  
 <span data-ttu-id="7654a-533">Ten typ jest zapieczętowany.</span><span class="sxs-lookup"><span data-stu-id="7654a-533">This type is sealed.</span></span>  
  
 <span data-ttu-id="7654a-534">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-534">-or-</span></span>  
  
 <span data-ttu-id="7654a-535">Ten typ jest tablicą.</span><span class="sxs-lookup"><span data-stu-id="7654a-535">This type is an array.</span></span>  
  
 <span data-ttu-id="7654a-536">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-536">-or-</span></span>  
  
 <span data-ttu-id="7654a-537">Ten typ jest interfejsem, ale typu zagnieżdżonego nie jest interfejsem.</span><span class="sxs-lookup"><span data-stu-id="7654a-537">This type is an interface, but the nested type is not an interface.</span></span>  
  
 <span data-ttu-id="7654a-538">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-538">-or-</span></span>  
  
 <span data-ttu-id="7654a-539">Długość <paramref name="name" /> wynosi zero lub większa niż 1023.</span><span class="sxs-lookup"><span data-stu-id="7654a-539">The length of <paramref name="name" /> is zero or greater than 1023.</span></span>  
  
 <span data-ttu-id="7654a-540">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-540">-or-</span></span>  
  
 <span data-ttu-id="7654a-541">Ta operacja spowodowałaby utworzenie typu duplikat <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> w bieżącym zestawie.</span><span class="sxs-lookup"><span data-stu-id="7654a-541">This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-542"><paramref name="name" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-542"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, System.Reflection.Emit.PackingSize packSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent, valuetype System.Reflection.Emit.PackingSize packSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String, attr As TypeAttributes, parent As Type, packSize As PackingSize) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name, System::Reflection::TypeAttributes attr, Type ^ parent, System::Reflection::Emit::PackingSize packSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attr" Type="System.Reflection.TypeAttributes" />
        <Parameter Name="parent" Type="System.Type" />
        <Parameter Name="packSize" Type="System.Reflection.Emit.PackingSize" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-543">Krótka nazwa typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-543">The short name of the type.</span></span> <span data-ttu-id="7654a-544"><c>Nazwa</c> nie może zawierać osadzone wartości.</span><span class="sxs-lookup"><span data-stu-id="7654a-544"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attr"><span data-ttu-id="7654a-545">Atrybuty typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-545">The attributes of the type.</span></span></param>
        <param name="parent"><span data-ttu-id="7654a-546">Typ, rozszerzający typu zagnieżdżonego.</span><span class="sxs-lookup"><span data-stu-id="7654a-546">The type that the nested type extends.</span></span></param>
        <param name="packSize"><span data-ttu-id="7654a-547">Rozmiar pakowania typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-547">The packing size of the type.</span></span></param>
        <summary><span data-ttu-id="7654a-548">Definiuje typem zagnieżdżonym podanej nazwy, atrybuty, typ, który rozszerza oraz rozmiar pakowania.</span><span class="sxs-lookup"><span data-stu-id="7654a-548">Defines a nested type, given its name, attributes, the type that it extends, and the packing size.</span></span></summary>
        <returns><span data-ttu-id="7654a-549">Zdefiniowanego typu zagnieżdżonego.</span><span class="sxs-lookup"><span data-stu-id="7654a-549">The defined nested type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-550">Ta metoda może służyć do tworzenia zagnieżdżonych typów nawet po <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> metoda została wywołana dla typu otaczającego.</span><span class="sxs-lookup"><span data-stu-id="7654a-550">This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.</span></span>  
  
 <span data-ttu-id="7654a-551">Zagnieżdżony typ musi być ukończone przed można uwzględnić w nim przy użyciu <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, lub <xref:System.Type.GetNestedTypes%2A>.</span><span class="sxs-lookup"><span data-stu-id="7654a-551">The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.</span></span>  
  
 <span data-ttu-id="7654a-552">Zobacz opis <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> kolejności, w którym można ukończyć zagnieżdżone typy i zagnieżdżenia.</span><span class="sxs-lookup"><span data-stu-id="7654a-552">See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.</span></span>  
  
 <span data-ttu-id="7654a-553">Zduplikowane nazwy nie jest zawsze utworzony, jeśli `name` jest taka sama jak nazwa wcześniej zdefiniowanego typu lub typu zagnieżdżonego.</span><span class="sxs-lookup"><span data-stu-id="7654a-553">A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type.</span></span> <span data-ttu-id="7654a-554">Na duplikaty, pełnej nazwy muszą być takie same, w tym przestrzeń nazw i wszystkie typy zagnieżdżenia.</span><span class="sxs-lookup"><span data-stu-id="7654a-554">To be duplicates, the full names must be the same, including the namespace and all nesting types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7654a-555">Nie określono atrybutu zagnieżdżonych.</span><span class="sxs-lookup"><span data-stu-id="7654a-555">The nested attribute is not specified.</span></span>  
  
 <span data-ttu-id="7654a-556">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-556">-or-</span></span>  
  
 <span data-ttu-id="7654a-557">Ten typ jest zapieczętowany.</span><span class="sxs-lookup"><span data-stu-id="7654a-557">This type is sealed.</span></span>  
  
 <span data-ttu-id="7654a-558">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-558">-or-</span></span>  
  
 <span data-ttu-id="7654a-559">Ten typ jest tablicą.</span><span class="sxs-lookup"><span data-stu-id="7654a-559">This type is an array.</span></span>  
  
 <span data-ttu-id="7654a-560">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-560">-or-</span></span>  
  
 <span data-ttu-id="7654a-561">Ten typ jest interfejsem, ale typu zagnieżdżonego nie jest interfejsem.</span><span class="sxs-lookup"><span data-stu-id="7654a-561">This type is an interface, but the nested type is not an interface.</span></span>  
  
 <span data-ttu-id="7654a-562">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-562">-or-</span></span>  
  
 <span data-ttu-id="7654a-563">Długość <paramref name="name" /> wynosi zero lub większa niż 1023.</span><span class="sxs-lookup"><span data-stu-id="7654a-563">The length of <paramref name="name" /> is zero or greater than 1023.</span></span>  
  
 <span data-ttu-id="7654a-564">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-564">-or-</span></span>  
  
 <span data-ttu-id="7654a-565">Ta operacja spowodowałaby utworzenie typu duplikat <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> w bieżącym zestawie.</span><span class="sxs-lookup"><span data-stu-id="7654a-565">This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-566"><paramref name="name" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-566"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, Type[] interfaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent, class System.Type[] interfaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String, attr As TypeAttributes, parent As Type, interfaces As Type()) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name, System::Reflection::TypeAttributes attr, Type ^ parent, cli::array &lt;Type ^&gt; ^ interfaces);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attr" Type="System.Reflection.TypeAttributes" />
        <Parameter Name="parent" Type="System.Type" />
        <Parameter Name="interfaces" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-567">Krótka nazwa typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-567">The short name of the type.</span></span> <span data-ttu-id="7654a-568"><c>Nazwa</c> nie może zawierać osadzone wartości.</span><span class="sxs-lookup"><span data-stu-id="7654a-568"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attr"><span data-ttu-id="7654a-569">Atrybuty typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-569">The attributes of the type.</span></span></param>
        <param name="parent"><span data-ttu-id="7654a-570">Typ, rozszerzający typu zagnieżdżonego.</span><span class="sxs-lookup"><span data-stu-id="7654a-570">The type that the nested type extends.</span></span></param>
        <param name="interfaces"><span data-ttu-id="7654a-571">Interfejsy, które implementuje typu zagnieżdżonego.</span><span class="sxs-lookup"><span data-stu-id="7654a-571">The interfaces that the nested type implements.</span></span></param>
        <summary><span data-ttu-id="7654a-572">Definiuje typu zagnieżdżonego, jego nazwa, atrybuty, typ, który rozszerza i interfejsów, które implementuje.</span><span class="sxs-lookup"><span data-stu-id="7654a-572">Defines a nested type, given its name, attributes, the type that it extends, and the interfaces that it implements.</span></span></summary>
        <returns><span data-ttu-id="7654a-573">Zdefiniowanego typu zagnieżdżonego.</span><span class="sxs-lookup"><span data-stu-id="7654a-573">The defined nested type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-574">Ta metoda może służyć do tworzenia zagnieżdżonych typów nawet po <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> metoda została wywołana dla typu otaczającego.</span><span class="sxs-lookup"><span data-stu-id="7654a-574">This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.</span></span>  
  
 <span data-ttu-id="7654a-575">Zagnieżdżony typ musi być ukończone przed można uwzględnić w nim przy użyciu <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, lub <xref:System.Type.GetNestedTypes%2A>.</span><span class="sxs-lookup"><span data-stu-id="7654a-575">The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.</span></span>  
  
 <span data-ttu-id="7654a-576">Zobacz opis <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> kolejności, w którym można ukończyć zagnieżdżone typy i zagnieżdżenia.</span><span class="sxs-lookup"><span data-stu-id="7654a-576">See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.</span></span>  
  
 <span data-ttu-id="7654a-577">Zduplikowane nazwy nie jest zawsze utworzony, jeśli `name` jest taka sama jak nazwa wcześniej zdefiniowanego typu lub typu zagnieżdżonego.</span><span class="sxs-lookup"><span data-stu-id="7654a-577">A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type.</span></span> <span data-ttu-id="7654a-578">Na duplikaty, pełnej nazwy muszą być takie same, w tym przestrzeń nazw i wszystkie typy zagnieżdżenia.</span><span class="sxs-lookup"><span data-stu-id="7654a-578">To be duplicates, the full names must be the same, including the namespace and all nesting types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7654a-579">Nie określono atrybutu zagnieżdżonych.</span><span class="sxs-lookup"><span data-stu-id="7654a-579">The nested attribute is not specified.</span></span>  
  
 <span data-ttu-id="7654a-580">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-580">-or-</span></span>  
  
 <span data-ttu-id="7654a-581">Ten typ jest zapieczętowany.</span><span class="sxs-lookup"><span data-stu-id="7654a-581">This type is sealed.</span></span>  
  
 <span data-ttu-id="7654a-582">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-582">-or-</span></span>  
  
 <span data-ttu-id="7654a-583">Ten typ jest tablicą.</span><span class="sxs-lookup"><span data-stu-id="7654a-583">This type is an array.</span></span>  
  
 <span data-ttu-id="7654a-584">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-584">-or-</span></span>  
  
 <span data-ttu-id="7654a-585">Ten typ jest interfejsem, ale typu zagnieżdżonego nie jest interfejsem.</span><span class="sxs-lookup"><span data-stu-id="7654a-585">This type is an interface, but the nested type is not an interface.</span></span>  
  
 <span data-ttu-id="7654a-586">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-586">-or-</span></span>  
  
 <span data-ttu-id="7654a-587">Długość <paramref name="name" /> wynosi zero lub większa niż 1023.</span><span class="sxs-lookup"><span data-stu-id="7654a-587">The length of <paramref name="name" /> is zero or greater than 1023.</span></span>  
  
 <span data-ttu-id="7654a-588">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-588">-or-</span></span>  
  
 <span data-ttu-id="7654a-589">Ta operacja spowodowałaby utworzenie typu duplikat <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> w bieżącym zestawie.</span><span class="sxs-lookup"><span data-stu-id="7654a-589">This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-590"><paramref name="name" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-590"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="7654a-591">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-591">-or-</span></span>  
  
 <span data-ttu-id="7654a-592">Element <paramref name="interfaces" /> tablica jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-592">An element of the <paramref name="interfaces" /> array is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, System.Reflection.Emit.PackingSize packSize, int typeSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent, valuetype System.Reflection.Emit.PackingSize packSize, int32 typeSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String, attr As TypeAttributes, parent As Type, packSize As PackingSize, typeSize As Integer) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name, System::Reflection::TypeAttributes attr, Type ^ parent, System::Reflection::Emit::PackingSize packSize, int typeSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attr" Type="System.Reflection.TypeAttributes" />
        <Parameter Name="parent" Type="System.Type" />
        <Parameter Name="packSize" Type="System.Reflection.Emit.PackingSize" />
        <Parameter Name="typeSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-593">Krótka nazwa typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-593">The short name of the type.</span></span> <span data-ttu-id="7654a-594"><c>Nazwa</c> nie może zawierać osadzone wartości zerowe.</span><span class="sxs-lookup"><span data-stu-id="7654a-594"><c>name</c> cannot contain embedded null values.</span></span></param>
        <param name="attr"><span data-ttu-id="7654a-595">Atrybuty typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-595">The attributes of the type.</span></span></param>
        <param name="parent"><span data-ttu-id="7654a-596">Typ, rozszerzający typu zagnieżdżonego.</span><span class="sxs-lookup"><span data-stu-id="7654a-596">The type that the nested type extends.</span></span></param>
        <param name="packSize"><span data-ttu-id="7654a-597">Rozmiar pakowania typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-597">The packing size of the type.</span></span></param>
        <param name="typeSize"><span data-ttu-id="7654a-598">Całkowity rozmiar tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-598">The total size of the type.</span></span></param>
        <summary><span data-ttu-id="7654a-599">Definiuje typem zagnieżdżonym danej jego nazwę, atrybuty, rozmiar i typ, który rozszerza.</span><span class="sxs-lookup"><span data-stu-id="7654a-599">Defines a nested type, given its name, attributes, size, and the type that it extends.</span></span></summary>
        <returns><span data-ttu-id="7654a-600">Zdefiniowanego typu zagnieżdżonego.</span><span class="sxs-lookup"><span data-stu-id="7654a-600">The defined nested type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefinePInvokeMethod">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7654a-601">Definiuje <see langword="PInvoke" /> metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-601">Defines a <see langword="PInvoke" /> method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefinePInvokeMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefinePInvokeMethod(string name, string dllName, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, valuetype System.Runtime.InteropServices.CallingConvention nativeCallConv, valuetype System.Runtime.InteropServices.CharSet nativeCharSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefinePInvokeMethod(System::String ^ name, System::String ^ dllName, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Runtime::InteropServices::CallingConvention nativeCallConv, System::Runtime::InteropServices::CharSet nativeCharSet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="dllName" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="nativeCallConv" Type="System.Runtime.InteropServices.CallingConvention" />
        <Parameter Name="nativeCharSet" Type="System.Runtime.InteropServices.CharSet" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-602">Nazwa <see langword="PInvoke" /> metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-602">The name of the <see langword="PInvoke" /> method.</span></span> <span data-ttu-id="7654a-603"><c>Nazwa</c> nie może zawierać osadzone wartości.</span><span class="sxs-lookup"><span data-stu-id="7654a-603"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="dllName"><span data-ttu-id="7654a-604">Nazwa biblioteki dll, w którym <see langword="PInvoke" /> metoda jest zdefiniowana.</span><span class="sxs-lookup"><span data-stu-id="7654a-604">The name of the DLL in which the <see langword="PInvoke" /> method is defined.</span></span></param>
        <param name="attributes"><span data-ttu-id="7654a-605">Atrybuty metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-605">The attributes of the method.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="7654a-606">Konwencja wywołania metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-606">The method's calling convention.</span></span></param>
        <param name="returnType"><span data-ttu-id="7654a-607">Zwracany typ metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-607">The method's return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="7654a-608">Typy parametrów metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-608">The types of the method's parameters.</span></span></param>
        <param name="nativeCallConv"><span data-ttu-id="7654a-609">Natywną Konwencję wywoływania.</span><span class="sxs-lookup"><span data-stu-id="7654a-609">The native calling convention.</span></span></param>
        <param name="nativeCharSet"><span data-ttu-id="7654a-610">Zestaw znaków natywnego metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-610">The method's native character set.</span></span></param>
        <summary><span data-ttu-id="7654a-611">Definiuje <see langword="PInvoke" /> metody podanej nazwy, nazwa DLL, w którym jest zdefiniowany metody, atrybuty metody, konwencja wywołania metody, zwracany typ metody, typów parametrów, metody i <see langword="PInvoke" /> flagi.</span><span class="sxs-lookup"><span data-stu-id="7654a-611">Defines a <see langword="PInvoke" /> method given its name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the <see langword="PInvoke" /> flags.</span></span></summary>
        <returns><span data-ttu-id="7654a-612">Zdefiniowanych <see langword="PInvoke" /> metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-612">The defined <see langword="PInvoke" /> method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-613">Atrybuty zaimportować niektóre biblioteki DLL (zobacz opis <xref:System.Runtime.InteropServices.DllImportAttribute>) nie można określić jako argumenty tej metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-613">Some DLL import attributes (see the description of <xref:System.Runtime.InteropServices.DllImportAttribute>) cannot be specified as arguments to this method.</span></span> <span data-ttu-id="7654a-614">Na przykład plik DLL import — atrybut <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> musi być dodany po `PInvoke` metody jest tworzony, jeśli metoda zwróci wartość.</span><span class="sxs-lookup"><span data-stu-id="7654a-614">For example, the DLL import attribute <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> must be added after the `PInvoke` method is created, if the method returns a value.</span></span> <span data-ttu-id="7654a-615">W przykładzie, jak to zrobić.</span><span class="sxs-lookup"><span data-stu-id="7654a-615">The example shows how to do this.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7654a-616">W poniższym przykładzie pokazano sposób użycia <xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A> metodę w celu utworzenia `PInvoke` metody oraz sposobu dodawania <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> Flaga flagi implementacji metod po utworzeniu <xref:System.Reflection.Emit.MethodBuilder>, za pomocą <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=nameWithType> i <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=nameWithType>metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-616">The following example demonstrates how to use the <xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A> method to create a `PInvoke` method, and how to add the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag to the method implementation flags after you create the <xref:System.Reflection.Emit.MethodBuilder>, by using the <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=nameWithType> and <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=nameWithType> methods.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7654a-617">Aby uzyskać wartość zwracaną zera, należy dodać <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flagi.</span><span class="sxs-lookup"><span data-stu-id="7654a-617">To get a non-zero return value, you must add the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="7654a-618">W przykładzie jest tworzony z jednego modułu dynamicznego i jednego typu, zestawów dynamicznych `MyType`, który zawiera `PInvoke` metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-618">The example creates a dynamic assembly with one dynamic module and a single type, `MyType`, that contains the `PInvoke` method.</span></span> <span data-ttu-id="7654a-619">`PInvoke` Metody reprezentuje Win32 `GetTickCount` funkcji.</span><span class="sxs-lookup"><span data-stu-id="7654a-619">The `PInvoke` method represents the Win32 `GetTickCount` function.</span></span>  
  
 <span data-ttu-id="7654a-620">Po uruchomieniu przykładzie wykonuje `PInvoke` metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-620">When the example is run, it executes the `PInvoke` method.</span></span> <span data-ttu-id="7654a-621">Ponadto zapisuje zestawie dynamicznym jako PInvokeTest.dll.</span><span class="sxs-lookup"><span data-stu-id="7654a-621">It also saves the dynamic assembly as PInvokeTest.dll.</span></span> <span data-ttu-id="7654a-622">Można użyć [Ildasm.exe (dezasembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) do sprawdzenia `MyType` klasy i `static` (`Shared` w języku Visual Basic) `PInvoke` zawiera metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-622">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the `MyType` class and the `static` (`Shared` in Visual Basic) `PInvoke` method it contains.</span></span> <span data-ttu-id="7654a-623">Można skompilować programu Visual Basic lub C#, który używa statycznych `MyType.GetTickCount` metody, umieszczając odwołanie do biblioteki DLL, po uruchomieniu csc.exe lub vbc.exe; na przykład `/r:PInvokeTest.dll`.</span><span class="sxs-lookup"><span data-stu-id="7654a-623">You can compile a Visual Basic or C# program that uses the static `MyType.GetTickCount` method by including a reference to the DLL when you run csc.exe or vbc.exe; for example, `/r:PInvokeTest.dll`.</span></span>  
  
 [!code-cpp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/cpp/100656_fix.cpp#1)]
 [!code-csharp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/CS/100656_fix.cs#1)]
 [!code-vb[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/VB/100656_fix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7654a-624">Metoda nie jest statyczne.</span><span class="sxs-lookup"><span data-stu-id="7654a-624">The method is not static.</span></span>  
  
 <span data-ttu-id="7654a-625">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-625">-or-</span></span>  
  
 <span data-ttu-id="7654a-626">Typ nadrzędny jest interfejsem.</span><span class="sxs-lookup"><span data-stu-id="7654a-626">The parent type is an interface.</span></span>  
  
 <span data-ttu-id="7654a-627">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-627">-or-</span></span>  
  
 <span data-ttu-id="7654a-628">Metoda jest abstrakcyjna.</span><span class="sxs-lookup"><span data-stu-id="7654a-628">The method is abstract.</span></span>  
  
 <span data-ttu-id="7654a-629">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-629">-or-</span></span>  
  
 <span data-ttu-id="7654a-630">Metoda została wcześniej określona.</span><span class="sxs-lookup"><span data-stu-id="7654a-630">The method was previously defined.</span></span>  
  
 <span data-ttu-id="7654a-631">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-631">-or-</span></span>  
  
 <span data-ttu-id="7654a-632">Długość <paramref name="name" /> lub <paramref name="dllName" /> wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="7654a-632">The length of <paramref name="name" /> or <paramref name="dllName" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-633"><paramref name="name" /> lub <paramref name="dllName" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-633"><paramref name="name" /> or <paramref name="dllName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-634">Typ zawierający wcześniej utworzono za pomocą <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-634">The containing type has been previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefinePInvokeMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, string entryName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefinePInvokeMethod(string name, string dllName, string entryName, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, valuetype System.Runtime.InteropServices.CallingConvention nativeCallConv, valuetype System.Runtime.InteropServices.CharSet nativeCharSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefinePInvokeMethod(System::String ^ name, System::String ^ dllName, System::String ^ entryName, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Runtime::InteropServices::CallingConvention nativeCallConv, System::Runtime::InteropServices::CharSet nativeCharSet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="dllName" Type="System.String" />
        <Parameter Name="entryName" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="nativeCallConv" Type="System.Runtime.InteropServices.CallingConvention" />
        <Parameter Name="nativeCharSet" Type="System.Runtime.InteropServices.CharSet" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-635">Nazwa <see langword="PInvoke" /> metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-635">The name of the <see langword="PInvoke" /> method.</span></span> <span data-ttu-id="7654a-636"><c>Nazwa</c> nie może zawierać osadzone wartości.</span><span class="sxs-lookup"><span data-stu-id="7654a-636"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="dllName"><span data-ttu-id="7654a-637">Nazwa biblioteki dll, w którym <see langword="PInvoke" /> metoda jest zdefiniowana.</span><span class="sxs-lookup"><span data-stu-id="7654a-637">The name of the DLL in which the <see langword="PInvoke" /> method is defined.</span></span></param>
        <param name="entryName"><span data-ttu-id="7654a-638">Nazwa punktu wejścia w bibliotece DLL.</span><span class="sxs-lookup"><span data-stu-id="7654a-638">The name of the entry point in the DLL.</span></span></param>
        <param name="attributes"><span data-ttu-id="7654a-639">Atrybuty metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-639">The attributes of the method.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="7654a-640">Konwencja wywołania metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-640">The method's calling convention.</span></span></param>
        <param name="returnType"><span data-ttu-id="7654a-641">Zwracany typ metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-641">The method's return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="7654a-642">Typy parametrów metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-642">The types of the method's parameters.</span></span></param>
        <param name="nativeCallConv"><span data-ttu-id="7654a-643">Natywną Konwencję wywoływania.</span><span class="sxs-lookup"><span data-stu-id="7654a-643">The native calling convention.</span></span></param>
        <param name="nativeCharSet"><span data-ttu-id="7654a-644">Zestaw znaków natywnego metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-644">The method's native character set.</span></span></param>
        <summary><span data-ttu-id="7654a-645">Definiuje <see langword="PInvoke" /> metody podanej nazwy, nazwa DLL, w którym jest zdefiniowany metody, nazwę punktu wejścia, atrybuty metody, konwencja wywołania metody, zwracany typ metody, typy parametrów metody , a <see langword="PInvoke" /> flagi.</span><span class="sxs-lookup"><span data-stu-id="7654a-645">Defines a <see langword="PInvoke" /> method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the <see langword="PInvoke" /> flags.</span></span></summary>
        <returns><span data-ttu-id="7654a-646">Zdefiniowanych <see langword="PInvoke" /> metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-646">The defined <see langword="PInvoke" /> method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-647">Atrybuty zaimportować niektóre biblioteki DLL (zobacz opis <xref:System.Runtime.InteropServices.DllImportAttribute>) nie można określić jako argumenty tej metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-647">Some DLL import attributes (see the description of <xref:System.Runtime.InteropServices.DllImportAttribute>) cannot be specified as arguments to this method.</span></span> <span data-ttu-id="7654a-648">Na przykład plik DLL import — atrybut <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> musi być dodany po `PInvoke` metody jest tworzony, jeśli metoda zwróci wartość.</span><span class="sxs-lookup"><span data-stu-id="7654a-648">For example, the DLL import attribute <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> must be added after the `PInvoke` method is created, if the method returns a value.</span></span> <span data-ttu-id="7654a-649">W przykładzie, jak to zrobić.</span><span class="sxs-lookup"><span data-stu-id="7654a-649">The example shows how to do this.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7654a-650">Poniższy przykład kodu pokazuje sposób użycia <xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A> metodę w celu utworzenia `PInvoke` metody oraz sposobu dodawania <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> Flaga flagi implementacji metod po utworzeniu <xref:System.Reflection.Emit.MethodBuilder>, za pomocą <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=nameWithType> i <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-650">The following code example demonstrates how to use the <xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A> method to create a `PInvoke` method, and how to add the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag to the method implementation flags after you create the <xref:System.Reflection.Emit.MethodBuilder>, by using the <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=nameWithType> and <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=nameWithType> methods.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7654a-651">Aby uzyskać wartość zwracaną zera, należy dodać <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flagi.</span><span class="sxs-lookup"><span data-stu-id="7654a-651">To get a non-zero return value, you must add the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="7654a-652">W przykładzie jest tworzony z jednego modułu dynamicznego i jednego typu, zestawów dynamicznych `MyType`, który zawiera `PInvoke` metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-652">The example creates a dynamic assembly with one dynamic module and a single type, `MyType`, that contains the `PInvoke` method.</span></span> <span data-ttu-id="7654a-653">`PInvoke` Metody reprezentuje Win32 `GetTickCount` funkcji.</span><span class="sxs-lookup"><span data-stu-id="7654a-653">The `PInvoke` method represents the Win32 `GetTickCount` function.</span></span>  
  
 <span data-ttu-id="7654a-654">Po uruchomieniu przykładzie wykonuje `PInvoke` metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-654">When the example is run, it executes the `PInvoke` method.</span></span> <span data-ttu-id="7654a-655">Ponadto zapisuje zestawie dynamicznym jako PInvokeTest.dll.</span><span class="sxs-lookup"><span data-stu-id="7654a-655">It also saves the dynamic assembly as PInvokeTest.dll.</span></span> <span data-ttu-id="7654a-656">Można użyć [Ildasm.exe (dezasembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) do sprawdzenia `MyType` klasy i `static` (`Shared` w języku Visual Basic) `PInvoke` zawiera metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-656">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the `MyType` class and the `static` (`Shared` in Visual Basic) `PInvoke` method it contains.</span></span> <span data-ttu-id="7654a-657">Można skompilować programu Visual Basic lub C#, który używa statycznych `MyType.GetTickCount` metody, umieszczając odwołanie do biblioteki DLL, po uruchomieniu csc.exe lub vbc.exe; na przykład `/r:PInvokeTest.dll`.</span><span class="sxs-lookup"><span data-stu-id="7654a-657">You can compile a Visual Basic or C# program that uses the static `MyType.GetTickCount` method by including a reference to the DLL when you run csc.exe or vbc.exe; for example, `/r:PInvokeTest.dll`.</span></span>  
  
 [!code-cpp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/cpp/100656_fix.cpp#1)]
 [!code-csharp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/CS/100656_fix.cs#1)]
 [!code-vb[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/VB/100656_fix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7654a-658">Metoda nie jest statyczne.</span><span class="sxs-lookup"><span data-stu-id="7654a-658">The method is not static.</span></span>  
  
 <span data-ttu-id="7654a-659">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-659">-or-</span></span>  
  
 <span data-ttu-id="7654a-660">Typ nadrzędny jest interfejsem.</span><span class="sxs-lookup"><span data-stu-id="7654a-660">The parent type is an interface.</span></span>  
  
 <span data-ttu-id="7654a-661">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-661">-or-</span></span>  
  
 <span data-ttu-id="7654a-662">Metoda jest abstrakcyjna.</span><span class="sxs-lookup"><span data-stu-id="7654a-662">The method is abstract.</span></span>  
  
 <span data-ttu-id="7654a-663">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-663">-or-</span></span>  
  
 <span data-ttu-id="7654a-664">Metoda została wcześniej określona.</span><span class="sxs-lookup"><span data-stu-id="7654a-664">The method was previously defined.</span></span>  
  
 <span data-ttu-id="7654a-665">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-665">-or-</span></span>  
  
 <span data-ttu-id="7654a-666">Długość <paramref name="name" />, <paramref name="dllName" />, lub <paramref name="entryName" /> wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="7654a-666">The length of <paramref name="name" />, <paramref name="dllName" />, or <paramref name="entryName" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-667"><paramref name="name" />, <paramref name="dllName" />, lub <paramref name="entryName" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-667"><paramref name="name" />, <paramref name="dllName" />, or <paramref name="entryName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-668">Typ zawierający wcześniej utworzono za pomocą <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-668">The containing type has been previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefinePInvokeMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, string entryName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefinePInvokeMethod(string name, string dllName, string entryName, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] returnTypeRequiredCustomModifiers, class System.Type[] returnTypeOptionalCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] parameterTypeRequiredCustomModifiers, class System.Type[][] parameterTypeOptionalCustomModifiers, valuetype System.Runtime.InteropServices.CallingConvention nativeCallConv, valuetype System.Runtime.InteropServices.CharSet nativeCharSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefinePInvokeMethod(System::String ^ name, System::String ^ dllName, System::String ^ entryName, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ returnTypeRequiredCustomModifiers, cli::array &lt;Type ^&gt; ^ returnTypeOptionalCustomModifiers, cli::array &lt;Type ^&gt; ^ parameterTypes, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeRequiredCustomModifiers, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeOptionalCustomModifiers, System::Runtime::InteropServices::CallingConvention nativeCallConv, System::Runtime::InteropServices::CharSet nativeCharSet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="dllName" Type="System.String" />
        <Parameter Name="entryName" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnTypeRequiredCustomModifiers" Type="System.Type[]" />
        <Parameter Name="returnTypeOptionalCustomModifiers" Type="System.Type[]" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="parameterTypeRequiredCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="parameterTypeOptionalCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="nativeCallConv" Type="System.Runtime.InteropServices.CallingConvention" />
        <Parameter Name="nativeCharSet" Type="System.Runtime.InteropServices.CharSet" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-669">Nazwa <see langword="PInvoke" /> metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-669">The name of the <see langword="PInvoke" /> method.</span></span> <span data-ttu-id="7654a-670"><c>Nazwa</c> nie może zawierać osadzone wartości.</span><span class="sxs-lookup"><span data-stu-id="7654a-670"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="dllName"><span data-ttu-id="7654a-671">Nazwa biblioteki dll, w którym <see langword="PInvoke" /> metoda jest zdefiniowana.</span><span class="sxs-lookup"><span data-stu-id="7654a-671">The name of the DLL in which the <see langword="PInvoke" /> method is defined.</span></span></param>
        <param name="entryName"><span data-ttu-id="7654a-672">Nazwa punktu wejścia w bibliotece DLL.</span><span class="sxs-lookup"><span data-stu-id="7654a-672">The name of the entry point in the DLL.</span></span></param>
        <param name="attributes"><span data-ttu-id="7654a-673">Atrybuty metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-673">The attributes of the method.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="7654a-674">Konwencja wywołania metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-674">The method's calling convention.</span></span></param>
        <param name="returnType"><span data-ttu-id="7654a-675">Zwracany typ metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-675">The method's return type.</span></span></param>
        <param name="returnTypeRequiredCustomModifiers"><span data-ttu-id="7654a-676">Tablica typów reprezentujący wymagane Modyfikatory niestandardowych, takich jak <see cref="T:System.Runtime.CompilerServices.IsConst" />, dla zwracanego typu metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-676">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method.</span></span> <span data-ttu-id="7654a-677">Jeśli typ zwracany jest Brak wymaganego modyfikatorów niestandardowych, określić <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-677">If the return type has no required custom modifiers, specify <see langword="null" />.</span></span></param>
        <param name="returnTypeOptionalCustomModifiers"><span data-ttu-id="7654a-678">Tablica typów reprezentujący opcjonalne Modyfikatory niestandardowych, takich jak <see cref="T:System.Runtime.CompilerServices.IsConst" />, dla zwracanego typu metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-678">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method.</span></span> <span data-ttu-id="7654a-679">Jeśli typ zwracany jest brak opcjonalne modyfikatorów niestandardowych, określić <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-679">If the return type has no optional custom modifiers, specify <see langword="null" />.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="7654a-680">Typy parametrów metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-680">The types of the method's parameters.</span></span></param>
        <param name="parameterTypeRequiredCustomModifiers"><span data-ttu-id="7654a-681">Tablica tablice typów.</span><span class="sxs-lookup"><span data-stu-id="7654a-681">An array of arrays of types.</span></span> <span data-ttu-id="7654a-682">Każdej macierzy typy reprezentuje wymagane Modyfikatory niestandardowych do odpowiadającego mu parametru takich jak <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-682">Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="7654a-683">Jeśli określonego parametru Brak wymaganego modyfikatorów niestandardowych, określ <see langword="null" /> zamiast tablicę typów.</span><span class="sxs-lookup"><span data-stu-id="7654a-683">If a particular parameter has no required custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="7654a-684">Jeśli żaden z parametrów mają odpowiednie Modyfikatory niestandardowych, określ <see langword="null" /> zamiast tablicy tablic.</span><span class="sxs-lookup"><span data-stu-id="7654a-684">If none of the parameters have required custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <param name="parameterTypeOptionalCustomModifiers"><span data-ttu-id="7654a-685">Tablica tablice typów.</span><span class="sxs-lookup"><span data-stu-id="7654a-685">An array of arrays of types.</span></span> <span data-ttu-id="7654a-686">Każdej macierzy typy reprezentuje opcjonalne Modyfikatory niestandardowych do odpowiadającego mu parametru takich jak <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-686">Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="7654a-687">Jeśli określonego parametru brak opcjonalne modyfikatorów niestandardowych, określ <see langword="null" /> zamiast tablicę typów.</span><span class="sxs-lookup"><span data-stu-id="7654a-687">If a particular parameter has no optional custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="7654a-688">Jeśli żaden z parametrów nie ma opcjonalne Modyfikatory niestandardowych, określ <see langword="null" /> zamiast tablicy tablic.</span><span class="sxs-lookup"><span data-stu-id="7654a-688">If none of the parameters have optional custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <param name="nativeCallConv"><span data-ttu-id="7654a-689">Natywną Konwencję wywoływania.</span><span class="sxs-lookup"><span data-stu-id="7654a-689">The native calling convention.</span></span></param>
        <param name="nativeCharSet"><span data-ttu-id="7654a-690">Zestaw znaków natywnego metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-690">The method's native character set.</span></span></param>
        <summary><span data-ttu-id="7654a-691">Definiuje <see langword="PInvoke" /> metody podanej nazwy, nazwa DLL, w którym jest zdefiniowany metody, nazwę punktu wejścia, atrybuty metody, konwencja wywołania metody, zwracany typ metody, typy parametrów metody , <see langword="PInvoke" /> flagi i Modyfikatory niestandardowych parametrów i typ zwracany.</span><span class="sxs-lookup"><span data-stu-id="7654a-691">Defines a <see langword="PInvoke" /> method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, the <see langword="PInvoke" /> flags, and custom modifiers for the parameters and return type.</span></span></summary>
        <returns><span data-ttu-id="7654a-692">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> reprezentujący do zdefiniowanego <see langword="PInvoke" /> metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-692">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> representing the defined <see langword="PInvoke" /> method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-693">Atrybuty zaimportować niektóre biblioteki DLL (zobacz opis <xref:System.Runtime.InteropServices.DllImportAttribute>) nie można określić jako argumenty tej metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-693">Some DLL import attributes (see the description of <xref:System.Runtime.InteropServices.DllImportAttribute>) cannot be specified as arguments to this method.</span></span> <span data-ttu-id="7654a-694">Na przykład plik DLL import — atrybut <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> musi być dodany po `PInvoke` metody jest tworzony, jeśli metoda zwróci wartość.</span><span class="sxs-lookup"><span data-stu-id="7654a-694">For example, the DLL import attribute <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> must be added after the `PInvoke` method is created, if the method returns a value.</span></span> <span data-ttu-id="7654a-695">W przykładzie, jak to zrobić.</span><span class="sxs-lookup"><span data-stu-id="7654a-695">The example shows how to do this.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7654a-696">Więcej informacji o niestandardowych Modyfikatory znajduje się w dokumentacji ECMA partycji II metadanych.</span><span class="sxs-lookup"><span data-stu-id="7654a-696">For more information on custom modifiers, see the ECMA Partition II Metadata documentation.</span></span> <span data-ttu-id="7654a-697">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# i wspólne normy infrastruktury języka](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie sieci Web międzynarodowej Ecma.</span><span class="sxs-lookup"><span data-stu-id="7654a-697">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7654a-698">Poniższy przykład kodu pokazuje sposób użycia [\], typ\[\], typ\[\], typ\[\]\[\], typ\[ \] \<xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A > metodę w celu utworzenia `PInvoke` metody oraz sposobu dodawania <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> Flaga flagi implementacji metod po utworzeniu <xref:System.Reflection.Emit.MethodBuilder>, za pomocą <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=nameWithType> i <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-698">The following code example demonstrates how to use the [\], Type\[\], Type\[\], Type\[\]\[\], Type\[\]\<xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A> method to create a `PInvoke` method, and how to add the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag to the method implementation flags after you create the <xref:System.Reflection.Emit.MethodBuilder>, by using the <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=nameWithType> and <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="7654a-699">W przykładzie jest tworzony z jednego modułu dynamicznego i jednego typu, zestawów dynamicznych `MyType`, który zawiera `PInvoke` metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-699">The example creates a dynamic assembly with one dynamic module and a single type, `MyType`, that contains the `PInvoke` method.</span></span> <span data-ttu-id="7654a-700">`PInvoke` Metody reprezentuje Win32 `GetTickCount` funkcji.</span><span class="sxs-lookup"><span data-stu-id="7654a-700">The `PInvoke` method represents the Win32 `GetTickCount` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7654a-701">Aby uzyskać wartość zwracaną zera, należy dodać <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flagi.</span><span class="sxs-lookup"><span data-stu-id="7654a-701">To get a non-zero return value, you must add the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7654a-702">W przykładzie użyto przeciążenia, która nie określa niestandardowy modyfikatorów.</span><span class="sxs-lookup"><span data-stu-id="7654a-702">The example uses an overload that does not specify custom modifiers.</span></span> <span data-ttu-id="7654a-703">Aby określić niestandardowe modyfikatorów, zmień przykładowy kod, aby użyć tego przeciążenia metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-703">To specify custom modifiers, change the example code to use this method overload instead.</span></span>  
  
 <span data-ttu-id="7654a-704">Po uruchomieniu przykładzie wykonuje `PInvoke` metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-704">When the example is run, it executes the `PInvoke` method.</span></span> <span data-ttu-id="7654a-705">Ponadto zapisuje zestawie dynamicznym jako PInvokeTest.dll.</span><span class="sxs-lookup"><span data-stu-id="7654a-705">It also saves the dynamic assembly as PInvokeTest.dll.</span></span> <span data-ttu-id="7654a-706">Można użyć [Ildasm.exe (dezasembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) do sprawdzenia `MyType` klasy i `static` (`Shared` w języku Visual Basic) `PInvoke` zawiera metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-706">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the `MyType` class and the `static` (`Shared` in Visual Basic) `PInvoke` method it contains.</span></span> <span data-ttu-id="7654a-707">Można skompilować programu Visual Basic lub C#, który używa statycznych `MyType.GetTickCount` metody, umieszczając odwołanie do biblioteki DLL, po uruchomieniu csc.exe lub vbc.exe; na przykład `/r:PInvokeTest.dll`.</span><span class="sxs-lookup"><span data-stu-id="7654a-707">You can compile a Visual Basic or C# program that uses the static `MyType.GetTickCount` method by including a reference to the DLL when you run csc.exe or vbc.exe; for example, `/r:PInvokeTest.dll`.</span></span>  
  
 [!code-cpp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/cpp/100656_fix.cpp#1)]
 [!code-csharp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/CS/100656_fix.cs#1)]
 [!code-vb[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/VB/100656_fix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7654a-708">Metoda nie jest statyczne.</span><span class="sxs-lookup"><span data-stu-id="7654a-708">The method is not static.</span></span>  
  
 <span data-ttu-id="7654a-709">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-709">-or-</span></span>  
  
 <span data-ttu-id="7654a-710">Typ nadrzędny jest interfejsem.</span><span class="sxs-lookup"><span data-stu-id="7654a-710">The parent type is an interface.</span></span>  
  
 <span data-ttu-id="7654a-711">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-711">-or-</span></span>  
  
 <span data-ttu-id="7654a-712">Metoda jest abstrakcyjna.</span><span class="sxs-lookup"><span data-stu-id="7654a-712">The method is abstract.</span></span>  
  
 <span data-ttu-id="7654a-713">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-713">-or-</span></span>  
  
 <span data-ttu-id="7654a-714">Metoda została wcześniej określona.</span><span class="sxs-lookup"><span data-stu-id="7654a-714">The method was previously defined.</span></span>  
  
 <span data-ttu-id="7654a-715">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-715">-or-</span></span>  
  
 <span data-ttu-id="7654a-716">Długość <paramref name="name" />, <paramref name="dllName" />, lub <paramref name="entryName" /> wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="7654a-716">The length of <paramref name="name" />, <paramref name="dllName" />, or <paramref name="entryName" /> is zero.</span></span>  
  
 <span data-ttu-id="7654a-717">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-717">-or-</span></span>  
  
 <span data-ttu-id="7654a-718">Rozmiar <paramref name="parameterTypeRequiredCustomModifiers" /> lub <paramref name="parameterTypeOptionalCustomModifiers" /> nie równa się rozmiar <paramref name="parameterTypes" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-718">The size of <paramref name="parameterTypeRequiredCustomModifiers" /> or <paramref name="parameterTypeOptionalCustomModifiers" /> does not equal the size of <paramref name="parameterTypes" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-719"><paramref name="name" />, <paramref name="dllName" />, lub <paramref name="entryName" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-719"><paramref name="name" />, <paramref name="dllName" />, or <paramref name="entryName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-720">Typ został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-720">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="7654a-721">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-721">-or-</span></span>  
  
 <span data-ttu-id="7654a-722">Dla bieżącego typu dynamicznego <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> właściwość jest <see langword="true" />, ale <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> jest właściwość <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-722">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineProperty">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7654a-723">Dodaje nową właściwość do typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-723">Adds a new property to the type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.PropertyBuilder DefineProperty(string name, valuetype System.Reflection.PropertyAttributes attributes, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineProperty (name As String, attributes As PropertyAttributes, returnType As Type, parameterTypes As Type()) As PropertyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::PropertyBuilder ^ DefineProperty(System::String ^ name, System::Reflection::PropertyAttributes attributes, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.PropertyAttributes" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-724">Nazwa właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-724">The name of the property.</span></span> <span data-ttu-id="7654a-725"><c>Nazwa</c> nie może zawierać osadzone wartości.</span><span class="sxs-lookup"><span data-stu-id="7654a-725"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="7654a-726">Atrybuty właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-726">The attributes of the property.</span></span></param>
        <param name="returnType"><span data-ttu-id="7654a-727">Zwracany typ właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-727">The return type of the property.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="7654a-728">Typy parametrów właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-728">The types of the parameters of the property.</span></span></param>
        <summary><span data-ttu-id="7654a-729">Dodaje nową właściwość typu, o podanej nazwie i podpisie właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-729">Adds a new property to the type, with the given name and property signature.</span></span></summary>
        <returns><span data-ttu-id="7654a-730">Właściwości zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="7654a-730">The defined property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7654a-731">Poniższy przykład kodu pokazuje, jak zdefiniować właściwości dynamicznych do uzyskania <xref:System.Reflection.Emit.PropertyBuilder> specyfikacji.</span><span class="sxs-lookup"><span data-stu-id="7654a-731">The following code sample demonstrates how to define a dynamic property and obtain a <xref:System.Reflection.Emit.PropertyBuilder> for specification.</span></span> <span data-ttu-id="7654a-732">Należy pamiętać, że `PropertyBuilder` musi mieć również odpowiedniego <xref:System.Reflection.Emit.MethodBuilder>, które będą znajdować się logiki IL dla właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-732">Note that a `PropertyBuilder` must also have a corresponding <xref:System.Reflection.Emit.MethodBuilder>, which will house the IL logic for the property.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.PropertyBuilder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.PropertyBuilder Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.PropertyBuilder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.PropertyBuilder Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.PropertyBuilder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.PropertyBuilder Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7654a-733">Długość <paramref name="name" /> wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="7654a-733">The length of <paramref name="name" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-734"><paramref name="name" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-734"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="7654a-735">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-735">-or-</span></span>  
  
 <span data-ttu-id="7654a-736">Żadnego z elementów <paramref name="parameterTypes" /> tablica jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-736">Any of the elements of the <paramref name="parameterTypes" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-737">Typ został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-737">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.PropertyBuilder DefineProperty(string name, valuetype System.Reflection.PropertyAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineProperty (name As String, attributes As PropertyAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type()) As PropertyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::PropertyBuilder ^ DefineProperty(System::String ^ name, System::Reflection::PropertyAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.PropertyAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-738">Nazwa właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-738">The name of the property.</span></span> <span data-ttu-id="7654a-739"><c>Nazwa</c> nie może zawierać osadzone wartości.</span><span class="sxs-lookup"><span data-stu-id="7654a-739"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="7654a-740">Atrybuty właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-740">The attributes of the property.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="7654a-741">Konwencja wywołania metody dostępu właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-741">The calling convention of the property accessors.</span></span></param>
        <param name="returnType"><span data-ttu-id="7654a-742">Zwracany typ właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-742">The return type of the property.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="7654a-743">Typy parametrów właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-743">The types of the parameters of the property.</span></span></param>
        <summary><span data-ttu-id="7654a-744">Dodaje nową właściwość z typem, o podanej nazwie, atrybuty, konwencja wywołania i podpis właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-744">Adds a new property to the type, with the given name, attributes, calling convention, and property signature.</span></span></summary>
        <returns><span data-ttu-id="7654a-745">Właściwości zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="7654a-745">The defined property.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7654a-746">Długość <paramref name="name" /> wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="7654a-746">The length of <paramref name="name" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-747"><paramref name="name" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-747"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="7654a-748">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-748">-or-</span></span>  
  
 <span data-ttu-id="7654a-749">Żadnego z elementów <paramref name="parameterTypes" /> tablica jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-749">Any of the elements of the <paramref name="parameterTypes" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-750">Typ został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-750">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.PropertyBuilder DefineProperty(string name, valuetype System.Reflection.PropertyAttributes attributes, class System.Type returnType, class System.Type[] returnTypeRequiredCustomModifiers, class System.Type[] returnTypeOptionalCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] parameterTypeRequiredCustomModifiers, class System.Type[][] parameterTypeOptionalCustomModifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineProperty (name As String, attributes As PropertyAttributes, returnType As Type, returnTypeRequiredCustomModifiers As Type(), returnTypeOptionalCustomModifiers As Type(), parameterTypes As Type(), parameterTypeRequiredCustomModifiers As Type()(), parameterTypeOptionalCustomModifiers As Type()()) As PropertyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::PropertyBuilder ^ DefineProperty(System::String ^ name, System::Reflection::PropertyAttributes attributes, Type ^ returnType, cli::array &lt;Type ^&gt; ^ returnTypeRequiredCustomModifiers, cli::array &lt;Type ^&gt; ^ returnTypeOptionalCustomModifiers, cli::array &lt;Type ^&gt; ^ parameterTypes, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeRequiredCustomModifiers, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeOptionalCustomModifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.PropertyAttributes" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnTypeRequiredCustomModifiers" Type="System.Type[]" />
        <Parameter Name="returnTypeOptionalCustomModifiers" Type="System.Type[]" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="parameterTypeRequiredCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="parameterTypeOptionalCustomModifiers" Type="System.Type[][]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-751">Nazwa właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-751">The name of the property.</span></span> <span data-ttu-id="7654a-752"><c>Nazwa</c> nie może zawierać osadzone wartości.</span><span class="sxs-lookup"><span data-stu-id="7654a-752"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="7654a-753">Atrybuty właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-753">The attributes of the property.</span></span></param>
        <param name="returnType"><span data-ttu-id="7654a-754">Zwracany typ właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-754">The return type of the property.</span></span></param>
        <param name="returnTypeRequiredCustomModifiers"><span data-ttu-id="7654a-755">Tablica typów reprezentujący wymagane Modyfikatory niestandardowych, takich jak <see cref="T:System.Runtime.CompilerServices.IsConst" />, dla typu zwracanych danych właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-755">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the property.</span></span> <span data-ttu-id="7654a-756">Jeśli typ zwracany jest Brak wymaganego modyfikatorów niestandardowych, określić <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-756">If the return type has no required custom modifiers, specify <see langword="null" />.</span></span></param>
        <param name="returnTypeOptionalCustomModifiers"><span data-ttu-id="7654a-757">Tablica typów reprezentujący opcjonalne Modyfikatory niestandardowych, takich jak <see cref="T:System.Runtime.CompilerServices.IsConst" />, dla typu zwracanych danych właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-757">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the property.</span></span> <span data-ttu-id="7654a-758">Jeśli typ zwracany jest brak opcjonalne modyfikatorów niestandardowych, określić <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-758">If the return type has no optional custom modifiers, specify <see langword="null" />.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="7654a-759">Typy parametrów właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-759">The types of the parameters of the property.</span></span></param>
        <param name="parameterTypeRequiredCustomModifiers"><span data-ttu-id="7654a-760">Tablica tablice typów.</span><span class="sxs-lookup"><span data-stu-id="7654a-760">An array of arrays of types.</span></span> <span data-ttu-id="7654a-761">Każdej macierzy typy reprezentuje wymagane Modyfikatory niestandardowych do odpowiadającego mu parametru takich jak <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-761">Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="7654a-762">Jeśli określonego parametru Brak wymaganego modyfikatorów niestandardowych, określ <see langword="null" /> zamiast tablicę typów.</span><span class="sxs-lookup"><span data-stu-id="7654a-762">If a particular parameter has no required custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="7654a-763">Jeśli żaden z parametrów mają odpowiednie Modyfikatory niestandardowych, określ <see langword="null" /> zamiast tablicy tablic.</span><span class="sxs-lookup"><span data-stu-id="7654a-763">If none of the parameters have required custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <param name="parameterTypeOptionalCustomModifiers"><span data-ttu-id="7654a-764">Tablica tablice typów.</span><span class="sxs-lookup"><span data-stu-id="7654a-764">An array of arrays of types.</span></span> <span data-ttu-id="7654a-765">Każdej macierzy typy reprezentuje opcjonalne Modyfikatory niestandardowych do odpowiadającego mu parametru takich jak <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-765">Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="7654a-766">Jeśli określonego parametru brak opcjonalne modyfikatorów niestandardowych, określ <see langword="null" /> zamiast tablicę typów.</span><span class="sxs-lookup"><span data-stu-id="7654a-766">If a particular parameter has no optional custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="7654a-767">Jeśli żaden z parametrów nie ma opcjonalne Modyfikatory niestandardowych, określ <see langword="null" /> zamiast tablicy tablic.</span><span class="sxs-lookup"><span data-stu-id="7654a-767">If none of the parameters have optional custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <summary><span data-ttu-id="7654a-768">Dodaje nową właściwość z typem, o podanej nazwie, właściwości podpisu i Modyfikatory niestandardowych.</span><span class="sxs-lookup"><span data-stu-id="7654a-768">Adds a new property to the type, with the given name, property signature, and custom modifiers.</span></span></summary>
        <returns><span data-ttu-id="7654a-769">Właściwości zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="7654a-769">The defined property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-770">To przeciążenie jest dostępna dla projektantów kompilatory zarządzanych.</span><span class="sxs-lookup"><span data-stu-id="7654a-770">This overload is provided for designers of managed compilers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7654a-771">Więcej informacji o niestandardowych Modyfikatory znajduje się w dokumentacji ECMA partycji II metadanych.</span><span class="sxs-lookup"><span data-stu-id="7654a-771">For more information on custom modifiers, see the ECMA Partition II Metadata documentation.</span></span> <span data-ttu-id="7654a-772">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# i wspólne normy infrastruktury języka](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie sieci Web międzynarodowej Ecma.</span><span class="sxs-lookup"><span data-stu-id="7654a-772">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7654a-773">Długość <paramref name="name" /> wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="7654a-773">The length of <paramref name="name" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-774"><paramref name="name" /> jest <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="7654a-774"><paramref name="name" /> is <see langword="null" /></span></span>  
  
 <span data-ttu-id="7654a-775">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-775">-or-</span></span>  
  
 <span data-ttu-id="7654a-776">Żadnego z elementów <paramref name="parameterTypes" /> jest tablicy <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="7654a-776">Any of the elements of the <paramref name="parameterTypes" /> array is <see langword="null" /></span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-777">Typ został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-777">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.PropertyBuilder DefineProperty(string name, valuetype System.Reflection.PropertyAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] returnTypeRequiredCustomModifiers, class System.Type[] returnTypeOptionalCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] parameterTypeRequiredCustomModifiers, class System.Type[][] parameterTypeOptionalCustomModifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineProperty (name As String, attributes As PropertyAttributes, callingConvention As CallingConventions, returnType As Type, returnTypeRequiredCustomModifiers As Type(), returnTypeOptionalCustomModifiers As Type(), parameterTypes As Type(), parameterTypeRequiredCustomModifiers As Type()(), parameterTypeOptionalCustomModifiers As Type()()) As PropertyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::PropertyBuilder ^ DefineProperty(System::String ^ name, System::Reflection::PropertyAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ returnTypeRequiredCustomModifiers, cli::array &lt;Type ^&gt; ^ returnTypeOptionalCustomModifiers, cli::array &lt;Type ^&gt; ^ parameterTypes, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeRequiredCustomModifiers, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeOptionalCustomModifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.PropertyAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnTypeRequiredCustomModifiers" Type="System.Type[]" />
        <Parameter Name="returnTypeOptionalCustomModifiers" Type="System.Type[]" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="parameterTypeRequiredCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="parameterTypeOptionalCustomModifiers" Type="System.Type[][]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-778">Nazwa właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-778">The name of the property.</span></span> <span data-ttu-id="7654a-779"><c>Nazwa</c> nie może zawierać osadzone wartości.</span><span class="sxs-lookup"><span data-stu-id="7654a-779"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="7654a-780">Atrybuty właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-780">The attributes of the property.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="7654a-781">Konwencja wywołania metody dostępu właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-781">The calling convention of the property accessors.</span></span></param>
        <param name="returnType"><span data-ttu-id="7654a-782">Zwracany typ właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-782">The return type of the property.</span></span></param>
        <param name="returnTypeRequiredCustomModifiers"><span data-ttu-id="7654a-783">Tablica typów reprezentujący wymagane Modyfikatory niestandardowych, takich jak <see cref="T:System.Runtime.CompilerServices.IsConst" />, dla typu zwracanych danych właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-783">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the property.</span></span> <span data-ttu-id="7654a-784">Jeśli typ zwracany jest Brak wymaganego modyfikatorów niestandardowych, określić <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-784">If the return type has no required custom modifiers, specify <see langword="null" />.</span></span></param>
        <param name="returnTypeOptionalCustomModifiers"><span data-ttu-id="7654a-785">Tablica typów reprezentujący opcjonalne Modyfikatory niestandardowych, takich jak <see cref="T:System.Runtime.CompilerServices.IsConst" />, dla typu zwracanych danych właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-785">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the property.</span></span> <span data-ttu-id="7654a-786">Jeśli typ zwracany jest brak opcjonalne modyfikatorów niestandardowych, określić <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-786">If the return type has no optional custom modifiers, specify <see langword="null" />.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="7654a-787">Typy parametrów właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-787">The types of the parameters of the property.</span></span></param>
        <param name="parameterTypeRequiredCustomModifiers"><span data-ttu-id="7654a-788">Tablica tablice typów.</span><span class="sxs-lookup"><span data-stu-id="7654a-788">An array of arrays of types.</span></span> <span data-ttu-id="7654a-789">Każdej macierzy typy reprezentuje wymagane Modyfikatory niestandardowych do odpowiadającego mu parametru takich jak <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-789">Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="7654a-790">Jeśli określonego parametru Brak wymaganego modyfikatorów niestandardowych, określ <see langword="null" /> zamiast tablicę typów.</span><span class="sxs-lookup"><span data-stu-id="7654a-790">If a particular parameter has no required custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="7654a-791">Jeśli żaden z parametrów mają odpowiednie Modyfikatory niestandardowych, określ <see langword="null" /> zamiast tablicy tablic.</span><span class="sxs-lookup"><span data-stu-id="7654a-791">If none of the parameters have required custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <param name="parameterTypeOptionalCustomModifiers"><span data-ttu-id="7654a-792">Tablica tablice typów.</span><span class="sxs-lookup"><span data-stu-id="7654a-792">An array of arrays of types.</span></span> <span data-ttu-id="7654a-793">Każdej macierzy typy reprezentuje opcjonalne Modyfikatory niestandardowych do odpowiadającego mu parametru takich jak <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-793">Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="7654a-794">Jeśli określonego parametru brak opcjonalne modyfikatorów niestandardowych, określ <see langword="null" /> zamiast tablicę typów.</span><span class="sxs-lookup"><span data-stu-id="7654a-794">If a particular parameter has no optional custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="7654a-795">Jeśli żaden z parametrów nie ma opcjonalne Modyfikatory niestandardowych, określ <see langword="null" /> zamiast tablicy tablic.</span><span class="sxs-lookup"><span data-stu-id="7654a-795">If none of the parameters have optional custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <summary><span data-ttu-id="7654a-796">Dodaje nową właściwość typu, o podanej nazwie wywoływanie Konwencji, właściwości podpisu i Modyfikatory niestandardowych.</span><span class="sxs-lookup"><span data-stu-id="7654a-796">Adds a new property to the type, with the given name, calling convention, property signature, and custom modifiers.</span></span></summary>
        <returns><span data-ttu-id="7654a-797">Właściwości zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="7654a-797">The defined property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-798">To przeciążenie jest dostępna dla projektantów kompilatory zarządzanych.</span><span class="sxs-lookup"><span data-stu-id="7654a-798">This overload is provided for designers of managed compilers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7654a-799">Więcej informacji o niestandardowych Modyfikatory znajduje się w dokumentacji ECMA partycji II metadanych.</span><span class="sxs-lookup"><span data-stu-id="7654a-799">For more information on custom modifiers, see the ECMA Partition II Metadata documentation.</span></span> <span data-ttu-id="7654a-800">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# i wspólne normy infrastruktury języka](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie sieci Web międzynarodowej Ecma.</span><span class="sxs-lookup"><span data-stu-id="7654a-800">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 <span data-ttu-id="7654a-801">To przeciążenie metody została wprowadzona w systemie [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszym.</span><span class="sxs-lookup"><span data-stu-id="7654a-801">This method overload is introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7654a-802">Długość <paramref name="name" /> wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="7654a-802">The length of <paramref name="name" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-803"><paramref name="name" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-803"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="7654a-804">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-804">-or-</span></span>  
  
 <span data-ttu-id="7654a-805">Żadnego z elementów <paramref name="parameterTypes" /> tablica jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-805">Any of the elements of the <paramref name="parameterTypes" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-806">Typ został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-806">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineTypeInitializer">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ConstructorBuilder DefineTypeInitializer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ConstructorBuilder DefineTypeInitializer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineTypeInitializer () As ConstructorBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ConstructorBuilder ^ DefineTypeInitializer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ConstructorBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7654a-807">Definiuje inicjator dla tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-807">Defines the initializer for this type.</span></span></summary>
        <returns><span data-ttu-id="7654a-808">Zwraca inicjatora typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-808">Returns a type initializer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-809">Inicjator utworzone zawsze jest publiczny.</span><span class="sxs-lookup"><span data-stu-id="7654a-809">The initializer created is always public.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7654a-810">Poniższy przykładowy kod przedstawia sposób tworzenia, Konstruktor inicjowania przy użyciu `DefineTypeInitializer`.</span><span class="sxs-lookup"><span data-stu-id="7654a-810">The following code sample demonstrates how to create an initialization constructor using `DefineTypeInitializer`.</span></span>  
  
 [!code-cpp[TypeBuilder_Properties1#3](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_Properties1/CPP/typebuilder_properties.cpp#3)]
 [!code-csharp[TypeBuilder_Properties1#3](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_Properties1/CS/typebuilder_properties.cs#3)]
 [!code-vb[TypeBuilder_Properties1#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_Properties1/VB/typebuilder_properties.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-811">Typ zawierający wcześniej utworzono za pomocą <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-811">The containing type has been previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineUninitializedData">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.FieldBuilder DefineUninitializedData (string name, int size, System.Reflection.FieldAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.FieldBuilder DefineUninitializedData(string name, int32 size, valuetype System.Reflection.FieldAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineUninitializedData (name As String, size As Integer, attributes As FieldAttributes) As FieldBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::FieldBuilder ^ DefineUninitializedData(System::String ^ name, int size, System::Reflection::FieldAttributes attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.FieldBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="attributes" Type="System.Reflection.FieldAttributes" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-812">Nazwa używana do odwoływania się do danych.</span><span class="sxs-lookup"><span data-stu-id="7654a-812">The name used to refer to the data.</span></span> <span data-ttu-id="7654a-813"><c>Nazwa</c> nie może zawierać osadzone wartości.</span><span class="sxs-lookup"><span data-stu-id="7654a-813"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="size"><span data-ttu-id="7654a-814">Rozmiar pola danych.</span><span class="sxs-lookup"><span data-stu-id="7654a-814">The size of the data field.</span></span></param>
        <param name="attributes"><span data-ttu-id="7654a-815">Atrybuty dla pola.</span><span class="sxs-lookup"><span data-stu-id="7654a-815">The attributes for the field.</span></span></param>
        <summary><span data-ttu-id="7654a-816">Określa pole niezainicjowanych danych w <see langword=".sdata" /> sekcji pliku przenośny plik wykonywalny (PE).</span><span class="sxs-lookup"><span data-stu-id="7654a-816">Defines an uninitialized data field in the <see langword=".sdata" /> section of the portable executable (PE) file.</span></span></summary>
        <returns><span data-ttu-id="7654a-817">Pole danych referencyjnych.</span><span class="sxs-lookup"><span data-stu-id="7654a-817">A field to reference the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-818">Pole utworzonej za pomocą tej metody jest `static`, nawet jeśli nie zostanie uwzględniony `FieldAttributes.Static` w `attributes` parametru.</span><span class="sxs-lookup"><span data-stu-id="7654a-818">The field that you create with this method will be `static`, even if you do not include `FieldAttributes.Static` in the `attributes` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7654a-819">W poniższym przykładzie kodu pokazano stosowania `DefineUninitializedData` można utworzyć niezainicjowanych danych pola w typu dynamicznego:</span><span class="sxs-lookup"><span data-stu-id="7654a-819">The following code sample demonstrates the use of `DefineUninitializedData` to create an uninitialized data field in a dynamic type:</span></span>  
  
 [!code-cpp[TypeBuilder_DefineUninitializedData#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefineUninitializedData/CPP/typebuilder_defineuninitializeddata.cpp#1)]
 [!code-csharp[TypeBuilder_DefineUninitializedData#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefineUninitializedData/CS/typebuilder_defineuninitializeddata.cs#1)]
 [!code-vb[TypeBuilder_DefineUninitializedData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefineUninitializedData/VB/typebuilder_defineuninitializeddata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7654a-820">Długość <paramref name="name" /> wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="7654a-820">Length of <paramref name="name" /> is zero.</span></span>  
  
 <span data-ttu-id="7654a-821">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-821">-or-</span></span>  
  
 <span data-ttu-id="7654a-822"><paramref name="size" /> jest mniejsze niż lub równa zero, lub większa niż lub równa 0x003f0000.</span><span class="sxs-lookup"><span data-stu-id="7654a-822"><paramref name="size" /> is less than or equal to zero, or greater than or equal to 0x003f0000.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-823"><paramref name="name" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-823"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-824">Typ został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-824">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public override string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.FullName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FullName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7654a-825">Pobiera pełną ścieżkę tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-825">Retrieves the full path of this type.</span></span></summary>
        <value><span data-ttu-id="7654a-826">Tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="7654a-826">Read-only.</span></span> <span data-ttu-id="7654a-827">Pobiera pełną ścieżkę tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-827">Retrieves the full path of this type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-828">Zwrócony ma format "enclosingTypeFullName + nestedTypeName" zagnieżdżone typy i "typeName" dla typów-nested.</span><span class="sxs-lookup"><span data-stu-id="7654a-828">The returned format is "enclosingTypeFullName+nestedTypeName" for nested types and "typeName" for non-nested types.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericParameterAttributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.GenericParameterAttributes GenericParameterAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.GenericParameterAttributes GenericParameterAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.GenericParameterAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GenericParameterAttributes As GenericParameterAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::GenericParameterAttributes GenericParameterAttributes { System::Reflection::GenericParameterAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.GenericParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7654a-829">Pobiera wartość wskazującą Kowariancja i ograniczeń specjalnych bieżącego parametru typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-829">Gets a value that indicates the covariance and special constraints of the current generic type parameter.</span></span></summary>
        <value><span data-ttu-id="7654a-830">Bitowe połączenie <see cref="T:System.Reflection.GenericParameterAttributes" /> wartości, które opisano Kowariancja i ograniczeń specjalnych bieżącego parametru typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-830">A bitwise combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> values that describes the covariance and special constraints of the current generic type parameter.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="7654a-831">Gdy emitowanie kodu, parametru typu ogólnego jest reprezentowana przez <xref:System.Reflection.Emit.GenericTypeParameterBuilder> obiektu, a nie przez <xref:System.Reflection.Emit.TypeBuilder> obiektu.</span><span class="sxs-lookup"><span data-stu-id="7654a-831">When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericParameterPosition">
      <MemberSignature Language="C#" Value="public override int GenericParameterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GenericParameterPosition" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.GenericParameterPosition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GenericParameterPosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int GenericParameterPosition { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7654a-832">Pobiera pozycję parametru typu na liście parametrów typu zadeklarowany parametr typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-832">Gets the position of a type parameter in the type parameter list of the generic type that declared the parameter.</span></span></summary>
        <value><span data-ttu-id="7654a-833">Jeśli bieżący <see cref="T:System.Reflection.Emit.TypeBuilder" /> obiekt reprezentuje parametr typu ogólnego, pozycja parametru typu na liście parametrów typu typu ogólnego, który zadeklarowany parametr; w przeciwnym razie jest niezdefiniowana.</span><span class="sxs-lookup"><span data-stu-id="7654a-833">If the current <see cref="T:System.Reflection.Emit.TypeBuilder" /> object represents a generic type parameter, the position of the type parameter in the type parameter list of the generic type that declared the parameter; otherwise, undefined.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="7654a-834">Gdy emitowanie kodu, parametru typu ogólnego jest reprezentowana przez <xref:System.Reflection.Emit.GenericTypeParameterBuilder> obiektu, a nie przez <xref:System.Reflection.Emit.TypeBuilder> obiektu.</span><span class="sxs-lookup"><span data-stu-id="7654a-834">When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 <span data-ttu-id="7654a-835">Jeśli bieżący <xref:System.Reflection.Emit.TypeBuilder> nie reprezentuje parametr typu ogólnego, wartość ta właściwość jest niezdefiniowana.</span><span class="sxs-lookup"><span data-stu-id="7654a-835">If the current <xref:System.Reflection.Emit.TypeBuilder> does not represent a generic type parameter, the value of this property is undefined.</span></span> <span data-ttu-id="7654a-836">Użyj <xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A> umożliwia określenie, czy bieżący <xref:System.Reflection.Emit.TypeBuilder> reprezentuje parametr typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-836">Use the <xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A> property to determine whether the current <xref:System.Reflection.Emit.TypeBuilder> represents a generic type parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericTypeArguments">
      <MemberSignature Language="C#" Value="public override Type[] GenericTypeArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] GenericTypeArguments" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.GenericTypeArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GenericTypeArguments As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;Type ^&gt; ^ GenericTypeArguments { cli::array &lt;Type ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArrayRank">
      <MemberSignature Language="C#" Value="public override int GetArrayRank ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetArrayRank() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetArrayRank" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetArrayRank () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetArrayRank();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttributeFlagsImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.TypeAttributes GetAttributeFlagsImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Reflection.TypeAttributes GetAttributeFlagsImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetAttributeFlagsImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetAttributeFlagsImpl () As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::TypeAttributes GetAttributeFlagsImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public static System.Reflection.ConstructorInfo GetConstructor (Type type, System.Reflection.ConstructorInfo constructor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.ConstructorInfo GetConstructor(class System.Type type, class System.Reflection.ConstructorInfo constructor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type,System.Reflection.ConstructorInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::ConstructorInfo ^ GetConstructor(Type ^ type, System::Reflection::ConstructorInfo ^ constructor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="7654a-837">Skonstruowanego typu ogólnego, którego konstruktor jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="7654a-837">The constructed generic type whose constructor is returned.</span></span></param>
        <param name="constructor"><span data-ttu-id="7654a-838">Konstruktor w definicji typu ogólnego <c>typu</c>, która określa, które konstruktora <c>typu</c> do zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="7654a-838">A constructor on the generic type definition of <c>type</c>, which specifies which constructor of <c>type</c> to return.</span></span></param>
        <summary><span data-ttu-id="7654a-839">Zwraca konstruktora określonego skonstruowanego typu ogólnego odpowiada określony Konstruktor definicji typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-839">Returns the constructor of the specified constructed generic type that corresponds to the specified constructor of the generic type definition.</span></span></summary>
        <returns><span data-ttu-id="7654a-840">A <see cref="T:System.Reflection.ConstructorInfo" /> obiekt, który reprezentuje konstruktora <paramref name="type" /> odpowiadający <paramref name="constructor" />, który określa konstruktora należących do definicji typu ogólnego <paramref name="type" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-840">A <see cref="T:System.Reflection.ConstructorInfo" /> object that represents the constructor of <paramref name="type" /> corresponding to <paramref name="constructor" />, which specifies a constructor belonging to the generic type definition of <paramref name="type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-841"><xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> Metody umożliwia uzyskanie <xref:System.Reflection.ConstructorInfo> obiekt, który reprezentuje konstruktora skonstruowanego typu ogólnego, którego definicja typu ogólnego jest reprezentowana przez <xref:System.Reflection.Emit.TypeBuilder> obiektu.</span><span class="sxs-lookup"><span data-stu-id="7654a-841">The <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> method provides a way to get a <xref:System.Reflection.ConstructorInfo> object that represents a constructor of a constructed generic type whose generic type definition is represented by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 <span data-ttu-id="7654a-842">Na przykład, załóżmy, że masz <xref:System.Reflection.Emit.TypeBuilder> obiekt, który reprezentuje typ `G<T>` w składni języka C# (`G(Of T)` w języku Visual Basic `generic <T> ref class G` w języku C++) i <xref:System.Reflection.Emit.ConstructorBuilder> obiekt, który reprezentuje konstruktora `G<T>`.</span><span class="sxs-lookup"><span data-stu-id="7654a-842">For example, suppose you have a <xref:System.Reflection.Emit.TypeBuilder> object that represents the type `G<T>` in C# syntax (`G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) and a <xref:System.Reflection.Emit.ConstructorBuilder> object that represents a constructor of `G<T>`.</span></span> <span data-ttu-id="7654a-843">Załóżmy, że `G<T>` ma z parametrem typu metody ogólnej `U` tworzącą wystąpienie skonstruowanego typu `G<U>`.</span><span class="sxs-lookup"><span data-stu-id="7654a-843">Suppose that `G<T>` has a generic method with type parameter `U` that creates an instance of the constructed type `G<U>`.</span></span> <span data-ttu-id="7654a-844">Aby Emituj kod w celu utworzenia wystąpienia typu skonstruowane, należy <xref:System.Reflection.ConstructorInfo> typu skonstruowany obiekt, który reprezentuje konstruktora tego — innymi słowy, który tworzy wystąpienie `G<U>`.</span><span class="sxs-lookup"><span data-stu-id="7654a-844">In order to emit the code to create an instance of the constructed type, you need a <xref:System.Reflection.ConstructorInfo> object that represents the constructor of this constructed type — in other words, that creates an instance of `G<U>`.</span></span> <span data-ttu-id="7654a-845">Aby to zrobić, należy najpierw wywołać <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> metoda <xref:System.Reflection.Emit.TypeBuilder> obiektu, określając <xref:System.Reflection.Emit.GenericTypeParameterBuilder> obiekt, który reprezentuje `U` jako argument typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-845">To do this, first call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on the <xref:System.Reflection.Emit.TypeBuilder> object, specifying the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object that represents `U` as the type argument.</span></span> <span data-ttu-id="7654a-846">Następnie wywołaj <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> metody z wartością zwracaną z <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> metody jako parametr `type` i <xref:System.Reflection.Emit.ConstructorBuilder> obiekt, który reprezentuje konstruktora `G<U>` jako parametr `constructor`.</span><span class="sxs-lookup"><span data-stu-id="7654a-846">Then call the <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> method with the return value of the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method as parameter `type` and the <xref:System.Reflection.Emit.ConstructorBuilder> object that represents the constructor of `G<U>` as parameter `constructor`.</span></span> <span data-ttu-id="7654a-847">Wartość zwracana jest <xref:System.Reflection.ConstructorInfo> obiektów należy Emituj wywołanie funkcji.</span><span class="sxs-lookup"><span data-stu-id="7654a-847">The return value is the <xref:System.Reflection.ConstructorInfo> object you need to emit the function call.</span></span> <span data-ttu-id="7654a-848">Przykład kodu pokazuje, w tym scenariuszu.</span><span class="sxs-lookup"><span data-stu-id="7654a-848">The code example demonstrates this scenario.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7654a-849">Poniższy przykład kodu zawiera kod źródłowy dla klasy ogólnej o nazwie `Sample` mający parametru typu o nazwie `T`.</span><span class="sxs-lookup"><span data-stu-id="7654a-849">The following code example contains source code for a generic class named `Sample` that has a type parameter named `T`.</span></span> <span data-ttu-id="7654a-850">Klasa ma pole o nazwie `Field`, typu `T`i rodzajowy metodę o nazwie `GM` w jego własnej parametru typu o nazwie `U`.</span><span class="sxs-lookup"><span data-stu-id="7654a-850">The class has a field named `Field`, of type `T`, and a generic method named `GM` with its own type parameter, named `U`.</span></span> <span data-ttu-id="7654a-851">Metoda `GM` tworzy wystąpienie `Sample`, podstawiając własne parametru typu `U` dla parametru typu `Sample`i są przechowywane jego parametru wejściowego w `Field`.</span><span class="sxs-lookup"><span data-stu-id="7654a-851">Method `GM` creates an instance of `Sample`, substituting its own type parameter `U` for the type parameter of `Sample`, and stores its input parameter in `Field`.</span></span> <span data-ttu-id="7654a-852">Ten kod źródłowy jest skompilowany, ale nie jest używany; można wyświetlić za pomocą [Ildasm.exe (dezasembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) i porównaj je z kodu emitowane przez klasę `Example`.</span><span class="sxs-lookup"><span data-stu-id="7654a-852">This source code is compiled but not used; you can view it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) and compare it to the code emitted by class `Example`.</span></span>  
  
 <span data-ttu-id="7654a-853">Kod w klasie `Example` zademonstrowano użycie <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> metodę Emituj Kod rodzajowy.</span><span class="sxs-lookup"><span data-stu-id="7654a-853">The code in class `Example` demonstrates the use of the <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> method to emit generic code.</span></span> <span data-ttu-id="7654a-854">`Main` Metody klasy `Example` tworzy dynamiczne zestawu zawierającego klasę o nazwie `Sample` i używa <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> metodę, aby wprowadzić ogólne przez dodanie parametru typu o nazwie `T`.</span><span class="sxs-lookup"><span data-stu-id="7654a-854">The `Main` method of class `Example` creates a dynamic assembly containing a class named `Sample` and uses the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method to make it generic by adding a type parameter named `T`.</span></span> <span data-ttu-id="7654a-855">Domyślny konstruktor i pole o nazwie `Field`, typu `T`, są dodawane do klasy `Sample`.</span><span class="sxs-lookup"><span data-stu-id="7654a-855">A default constructor and a field named `Field`, of type `T`, are added to class `Sample`.</span></span> <span data-ttu-id="7654a-856">Metoda `GM` zostanie dodany i zamieniło metody ogólnej przy użyciu <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-856">A method `GM` is added and turned into a generic method by using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="7654a-857">Parametr typu `GM` nosi nazwę `U`.</span><span class="sxs-lookup"><span data-stu-id="7654a-857">The type parameter of `GM` is named `U`.</span></span> <span data-ttu-id="7654a-858">Po zdefiniowaniu parametru typu podpis `GM` jest dodawany przy użyciu <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-858">After the type parameter is defined, the signature of `GM` is added by using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="7654a-859">Brak nie zwracany typ i nr wymagane lub niestandardowych modyfikatory, wszystkie parametry tej metody są `null` z wyjątkiem `parameterTypes`; `parameterTypes` ustawia typ parametru tylko metody `U`, parametru typu ogólnego metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-859">There is no return type and no required or custom modifiers, so all the parameters of this method are `null` except `parameterTypes`; `parameterTypes` sets the type of the method's only parameter to `U`, the method's generic type parameter.</span></span> <span data-ttu-id="7654a-860">Treść metody tworzy wystąpienia typu skonstruowane `Sample<U>` (`Sample(Of U)` w języku Visual Basic), przypisuje parametr metody `Field`, a następnie drukuje wartość `Field`.</span><span class="sxs-lookup"><span data-stu-id="7654a-860">The body of the method creates an instance of the constructed type `Sample<U>` (`Sample(Of U)` in Visual Basic), assigns the method's parameter to `Field`, and then prints the value of `Field`.</span></span> <span data-ttu-id="7654a-861"><xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> Metoda służy do tworzenia <xref:System.Reflection.ConstructorInfo> reprezentujący domyślny konstruktor obiektu skonstruowanego typu ogólnego `Sample<U>` w <xref:System.Reflection.Emit.OpCodes.Newobj?displayProperty=nameWithType> instrukcji, która tworzy wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="7654a-861">The <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> method is used to create a <xref:System.Reflection.ConstructorInfo> that represents the default constructor of the constructed generic type `Sample<U>` in the <xref:System.Reflection.Emit.OpCodes.Newobj?displayProperty=nameWithType> instruction that creates the instance.</span></span>  
  
 <span data-ttu-id="7654a-862">Fikcyjny typ został zdefiniowany dla metody punktu wejścia `Main`.</span><span class="sxs-lookup"><span data-stu-id="7654a-862">A dummy type is defined to hold the entry-point method `Main`.</span></span> <span data-ttu-id="7654a-863">W treści `Main`, statycznych `GM` wywołaniu metody w typie ogólnym skonstruowane `Sample<int>` (`Sample(Of Integer)` w języku Visual Basic), z typem <xref:System.String> podstawić `U`.</span><span class="sxs-lookup"><span data-stu-id="7654a-863">In the body of `Main`, the static `GM` method is invoked on the constructed generic type `Sample<int>` (`Sample(Of Integer)` in Visual Basic), with type <xref:System.String> substituted for `U`.</span></span>  
  
 <span data-ttu-id="7654a-864">Po uruchomieniu przykładowy kod zapisuje emitowany zestawu jako TypeBuilderGetFieldExample.exe.</span><span class="sxs-lookup"><span data-stu-id="7654a-864">When the code example is run, it saves the emitted assembly as TypeBuilderGetFieldExample.exe.</span></span> <span data-ttu-id="7654a-865">Możesz uruchomić TypeBuilderGetFieldExample.exe i służy [Ildasm.exe (dezasembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) porównywanie emitowany kodu kod `Sample` klasy, która ma zostać skompilowany w samej przykładu kodu.</span><span class="sxs-lookup"><span data-stu-id="7654a-865">You can run TypeBuilderGetFieldExample.exe, and you can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to compare the emitted code with the code for the `Sample` class that is compiled into the code example itself.</span></span>  
  
 [!code-csharp[TypeBuilder.GetField_Generic#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder.GetField_Generic/cs/source.cs#1)]
 [!code-vb[TypeBuilder.GetField_Generic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder.GetField_Generic/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7654a-866"><paramref name="type" /> reprezentuje typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-866"><paramref name="type" /> does not represent a generic type.</span></span>  
  
 <span data-ttu-id="7654a-867">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-867">-or-</span></span>  
  
 <span data-ttu-id="7654a-868"><paramref name="type" /> nie jest typu <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-868"><paramref name="type" /> is not of type <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span>  
  
 <span data-ttu-id="7654a-869">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-869">-or-</span></span>  
  
 <span data-ttu-id="7654a-870">Typ deklarujący <paramref name="constructor" /> nie jest definicją typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-870">The declaring type of <paramref name="constructor" /> is not a generic type definition.</span></span>  
  
 <span data-ttu-id="7654a-871">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-871">-or-</span></span>  
  
 <span data-ttu-id="7654a-872">Typ deklarujący <paramref name="constructor" /> definicji typu ogólnego nie jest <paramref name="type" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-872">The declaring type of <paramref name="constructor" /> is not the generic type definition of <paramref name="type" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetConstructorImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.ConstructorInfo GetConstructorImpl(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::ConstructorInfo ^ GetConstructorImpl(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public override System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetConstructors(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetConstructors (bindingAttr As BindingFlags) As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="7654a-873">Musi to być flagę z bitowego <see cref="T:System.Reflection.BindingFlags" /> jako w <see langword="InvokeMethod" />, <see langword="NonPublic" />i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="7654a-873">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> as in <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span></span></param>
        <summary><span data-ttu-id="7654a-874">Zwraca tablicę <see cref="T:System.Reflection.ConstructorInfo" /> obiekty reprezentujące konstruktorów publicznych i niepublicznych zdefiniowane dla tej klasy, jak określono.</span><span class="sxs-lookup"><span data-stu-id="7654a-874">Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing the public and non-public constructors defined for this class, as specified.</span></span></summary>
        <returns><span data-ttu-id="7654a-875">Zwraca tablicę <see cref="T:System.Reflection.ConstructorInfo" /> obiektów reprezentującą określony konstruktorów zdefiniowanych dla tej klasy.</span><span class="sxs-lookup"><span data-stu-id="7654a-875">Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing the specified constructors defined for this class.</span></span> <span data-ttu-id="7654a-876">Jeśli zdefiniowano ma konstruktorów, zwracana jest pusta tablica.</span><span class="sxs-lookup"><span data-stu-id="7654a-876">If no constructors are defined, an empty array is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-877">Pobrać za pomocą typu <xref:System.Type.GetType%2A?displayProperty=nameWithType> lub <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> i użyj odbicia dla typu pobrane.</span><span class="sxs-lookup"><span data-stu-id="7654a-877">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7654a-878">Ta metoda nie jest zaimplementowana dla typów niekompletne.</span><span class="sxs-lookup"><span data-stu-id="7654a-878">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7654a-879">Zwraca atrybuty niestandardowe zdefiniowane dla tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-879">Returns the custom attributes defined for this type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit"><span data-ttu-id="7654a-880">Określa, czy przeszukać łańcuch dziedziczenia tego elementu członkowskiego w celu znalezienia atrybutów.</span><span class="sxs-lookup"><span data-stu-id="7654a-880">Specifies whether to search this member's inheritance chain to find the attributes.</span></span></param>
        <summary><span data-ttu-id="7654a-881">Zwraca wszystkie atrybuty niestandardowe zdefiniowane dla tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-881">Returns all the custom attributes defined for this type.</span></span></summary>
        <returns><span data-ttu-id="7654a-882">Zwraca tablicę obiektów reprezentującą wszystkie atrybuty niestandardowe tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-882">Returns an array of objects representing all the custom attributes of this type.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7654a-883">Ta metoda nie jest obecnie obsługiwana dla typów niekompletne.</span><span class="sxs-lookup"><span data-stu-id="7654a-883">This method is not currently supported for incomplete types.</span></span> <span data-ttu-id="7654a-884">Pobrać za pomocą typu <see cref="M:System.Type.GetType" /> i Wywołaj <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> w zwróconym <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-884">Retrieve the type using <see cref="M:System.Type.GetType" /> and call <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> on the returned <see cref="T:System.Type" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="7654a-885">Typ atrybutu do wyszukiwania.</span><span class="sxs-lookup"><span data-stu-id="7654a-885">The type of attribute to search for.</span></span> <span data-ttu-id="7654a-886">Zwracane są tylko atrybuty, które są przypisane do tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-886">Only attributes that are assignable to this type are returned.</span></span></param>
        <param name="inherit"><span data-ttu-id="7654a-887">Określa, czy przeszukać łańcuch dziedziczenia tego elementu członkowskiego w celu znalezienia atrybutów.</span><span class="sxs-lookup"><span data-stu-id="7654a-887">Specifies whether to search this member's inheritance chain to find the attributes.</span></span></param>
        <summary><span data-ttu-id="7654a-888">Zwraca wszystkie atrybuty niestandardowe bieżącego typu, które są przypisane do określonego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-888">Returns all the custom attributes of the current type that are assignable to a specified type.</span></span></summary>
        <returns><span data-ttu-id="7654a-889">Tablica z atrybutami niestandardowymi zdefiniowanymi dla bieżącego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-889">An array of custom attributes defined on the current type.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7654a-890">Ta metoda nie jest obecnie obsługiwana dla typów niekompletne.</span><span class="sxs-lookup"><span data-stu-id="7654a-890">This method is not currently supported for incomplete types.</span></span> <span data-ttu-id="7654a-891">Pobrać za pomocą typu <see cref="M:System.Type.GetType" /> i Wywołaj <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> w zwróconym <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-891">Retrieve the type using <see cref="M:System.Type.GetType" /> and call <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> on the returned <see cref="T:System.Type" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-892"><paramref name="attributeType" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-892"><paramref name="attributeType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7654a-893">Typ musi być typem dostarczonym źródłowy system plików wykonywalnych.</span><span class="sxs-lookup"><span data-stu-id="7654a-893">The type must be a type provided by the underlying runtime system.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public override Type GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetElementType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetElementType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7654a-894">Wywołanie tej metody zawsze zwraca <see cref="T:System.NotSupportedException" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-894">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <returns><span data-ttu-id="7654a-895">Ta metoda nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="7654a-895">This method is not supported.</span></span> <span data-ttu-id="7654a-896">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="7654a-896">No value is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-897">Pobrać za pomocą typu <xref:System.Type.GetType%2A?displayProperty=nameWithType> lub <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> i użyj odbicia dla typu pobrane.</span><span class="sxs-lookup"><span data-stu-id="7654a-897">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7654a-898">Ta metoda nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="7654a-898">This method is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetEvent(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvent (name As String, bindingAttr As BindingFlags) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::EventInfo ^ GetEvent(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-899">Nazwa zdarzenia do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="7654a-899">The name of the event to search for.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="7654a-900">Bitowe połączenie <see cref="T:System.Reflection.BindingFlags" /> wartości, które ograniczą wyszukiwania.</span><span class="sxs-lookup"><span data-stu-id="7654a-900">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values that limits the search.</span></span></param>
        <summary><span data-ttu-id="7654a-901">Zwraca zdarzenia o określonej nazwie.</span><span class="sxs-lookup"><span data-stu-id="7654a-901">Returns the event with the specified name.</span></span></summary>
        <returns><span data-ttu-id="7654a-902"><see cref="T:System.Reflection.EventInfo" /> Obiekt reprezentujący zdarzenie zadeklarowane lub dziedziczone przez ten typ o określonej nazwie lub <see langword="null" /> , jeśli nie ma żadnych wyników.</span><span class="sxs-lookup"><span data-stu-id="7654a-902">An <see cref="T:System.Reflection.EventInfo" /> object representing the event declared or inherited by this type with the specified name, or <see langword="null" /> if there are no matches.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-903">Pobrać za pomocą typu <xref:System.Type.GetType%2A?displayProperty=nameWithType> lub <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> i użyj odbicia dla typu pobrane.</span><span class="sxs-lookup"><span data-stu-id="7654a-903">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7654a-904">Ta metoda nie jest zaimplementowana dla typów niekompletne.</span><span class="sxs-lookup"><span data-stu-id="7654a-904">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvents">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7654a-905">Zwraca zdarzenia zdefiniowane przez bieżącą <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-905">Returns the events defined by the current <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo[] GetEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo[] GetEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetEvents" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvents () As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7654a-906">Zwraca zdarzenia publiczne zadeklarowane lub dziedziczone przez tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-906">Returns the public events declared or inherited by this type.</span></span></summary>
        <returns><span data-ttu-id="7654a-907">Zwraca tablicę <see cref="T:System.Reflection.EventInfo" /> obiektów reprezentująca zdarzenia publiczne zadeklarowany lub dziedziczone przez tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-907">Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing the public events declared or inherited by this type.</span></span> <span data-ttu-id="7654a-908">Jeśli brak publicznego zdarzeń, zwracana jest pusta tablica.</span><span class="sxs-lookup"><span data-stu-id="7654a-908">An empty array is returned if there are no public events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-909">Pobrać za pomocą typu <xref:System.Type.GetType%2A> lub <xref:System.Reflection.Assembly.GetType%2A> i użyj odbicia dla typu pobrane.</span><span class="sxs-lookup"><span data-stu-id="7654a-909">Retrieve the type using <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetType%2A> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7654a-910">Ta metoda nie jest zaimplementowana dla typów niekompletne.</span><span class="sxs-lookup"><span data-stu-id="7654a-910">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetEvents(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvents (bindingAttr As BindingFlags) As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="7654a-911">Bitowe połączenie <see cref="T:System.Reflection.BindingFlags" /> wartości, które ograniczą wyszukiwania.</span><span class="sxs-lookup"><span data-stu-id="7654a-911">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values that limits the search.</span></span></param>
        <summary><span data-ttu-id="7654a-912">Zwraca zdarzenia publicznego i niepublicznych zadeklarowanych przez tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-912">Returns the public and non-public events that are declared by this type.</span></span></summary>
        <returns><span data-ttu-id="7654a-913">Zwraca tablicę <see cref="T:System.Reflection.EventInfo" /> obiekty reprezentujące zdarzenia zadeklarowane lub dziedziczone przez ten typ, spełniających określone powiązanie flagi.</span><span class="sxs-lookup"><span data-stu-id="7654a-913">Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing the events declared or inherited by this type that match the specified binding flags.</span></span> <span data-ttu-id="7654a-914">Jeśli brak zdarzeń pasujących, zwracana jest pusta tablica.</span><span class="sxs-lookup"><span data-stu-id="7654a-914">An empty array is returned if there are no matching events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-915">Pobrać za pomocą typu <xref:System.Type.GetType%2A?displayProperty=nameWithType> lub <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> i użyj odbicia dla typu pobrane.</span><span class="sxs-lookup"><span data-stu-id="7654a-915">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7654a-916">Ta metoda nie jest zaimplementowana dla typów niekompletne.</span><span class="sxs-lookup"><span data-stu-id="7654a-916">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetField">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7654a-917">Zwraca pola zdefiniowane przez bieżącą <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-917">Returns a field defined by the current <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public override System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetField(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetField (name As String, bindingAttr As BindingFlags) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::FieldInfo ^ GetField(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-918">Nazwa pola, które ma być pobrana.</span><span class="sxs-lookup"><span data-stu-id="7654a-918">The name of the field to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="7654a-919">Musi to być flagę z bitowego <see cref="T:System.Reflection.BindingFlags" /> jako w <see langword="InvokeMethod" />, <see langword="NonPublic" />i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="7654a-919">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> as in <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span></span></param>
        <summary><span data-ttu-id="7654a-920">Zwraca pola określone przez podanej nazwie.</span><span class="sxs-lookup"><span data-stu-id="7654a-920">Returns the field specified by the given name.</span></span></summary>
        <returns><span data-ttu-id="7654a-921">Zwraca <see cref="T:System.Reflection.FieldInfo" /> obiekt reprezentujący pole zadeklarowane lub dziedziczone przez ten typ z określoną nazwą i modyfikator publiczny lub niepubliczne.</span><span class="sxs-lookup"><span data-stu-id="7654a-921">Returns the <see cref="T:System.Reflection.FieldInfo" /> object representing the field declared or inherited by this type with the specified name and public or non-public modifier.</span></span> <span data-ttu-id="7654a-922">Jeśli nie mają odpowiedników następnie <see langword="null" /> jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="7654a-922">If there are no matches then <see langword="null" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-923">Pobrać za pomocą typu <xref:System.Type.GetType%2A?displayProperty=nameWithType> lub <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> i użyj odbicia dla typu pobrane.</span><span class="sxs-lookup"><span data-stu-id="7654a-923">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7654a-924">Ta metoda nie jest zaimplementowana dla typów niekompletne.</span><span class="sxs-lookup"><span data-stu-id="7654a-924">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public static System.Reflection.FieldInfo GetField (Type type, System.Reflection.FieldInfo field);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.FieldInfo GetField(class System.Type type, class System.Reflection.FieldInfo field) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetField(System.Type,System.Reflection.FieldInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::FieldInfo ^ GetField(Type ^ type, System::Reflection::FieldInfo ^ field);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="field" Type="System.Reflection.FieldInfo" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="7654a-925">Skonstruowanego typu ogólnego, których pole jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="7654a-925">The constructed generic type whose field is returned.</span></span></param>
        <param name="field"><span data-ttu-id="7654a-926">Pole w definicji typu ogólnego <c>typu</c>, która określa, które pole <c>typu</c> do zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="7654a-926">A field on the generic type definition of <c>type</c>, which specifies which field of <c>type</c> to return.</span></span></param>
        <summary><span data-ttu-id="7654a-927">Zwraca pole określonego skonstruowanego typu ogólnego odpowiada do określonego pola w definicji typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-927">Returns the field of the specified constructed generic type that corresponds to the specified field of the generic type definition.</span></span></summary>
        <returns><span data-ttu-id="7654a-928">A <see cref="T:System.Reflection.FieldInfo" /> obiekt, który reprezentuje pole <paramref name="type" /> odpowiadający <paramref name="field" />, który określa pole należących do definicji typu ogólnego <paramref name="type" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-928">A <see cref="T:System.Reflection.FieldInfo" /> object that represents the field of <paramref name="type" /> corresponding to <paramref name="field" />, which specifies a field belonging to the generic type definition of <paramref name="type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-929"><xref:System.Reflection.Emit.TypeBuilder.GetField%2A> Metody umożliwia uzyskanie <xref:System.Reflection.FieldInfo> obiekt, który reprezentuje pole skonstruowanego typu ogólnego, którego definicja typu ogólnego jest reprezentowana przez <xref:System.Reflection.Emit.TypeBuilder> obiektu.</span><span class="sxs-lookup"><span data-stu-id="7654a-929">The <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> method provides a way to get a <xref:System.Reflection.FieldInfo> object that represents a field of a constructed generic type whose generic type definition is represented by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 <span data-ttu-id="7654a-930">Na przykład, załóżmy, że masz <xref:System.Reflection.Emit.TypeBuilder> obiekt, który reprezentuje typ `G<T>` w składni języka C# (`G(Of T)` w języku Visual Basic `generic <T> ref class G` w języku C++) i <xref:System.Reflection.Emit.FieldBuilder> obiekt, który reprezentuje pole `public T F` w składni języka C# (`Public F As T`w języku Visual Basic `public: T F` w języku C++) zdefiniowanego przez `G<T>`.</span><span class="sxs-lookup"><span data-stu-id="7654a-930">For example, suppose you have a <xref:System.Reflection.Emit.TypeBuilder> object that represents the type `G<T>` in C# syntax (`G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) and a <xref:System.Reflection.Emit.FieldBuilder> object that represents a field `public T F` in C# syntax (`Public F As T` in Visual Basic, `public: T F` in C++) that is defined by `G<T>`.</span></span> <span data-ttu-id="7654a-931">Załóżmy, że `G<T>` ma z parametrem typu metody ogólnej `U` tworzącą wystąpienie skonstruowanego typu `G<U>` i pole wywołania `F` w tym wystąpieniu.</span><span class="sxs-lookup"><span data-stu-id="7654a-931">Suppose that `G<T>` has a generic method with type parameter `U` that creates an instance of the constructed type `G<U>` and calls field `F` on that instance.</span></span> <span data-ttu-id="7654a-932">Aby Emituj wywołanie funkcji, należy <xref:System.Reflection.FieldInfo> obiekt, który reprezentuje `F` na utworzony typ — innymi słowy, który jest typu `U` zamiast typu `T`.</span><span class="sxs-lookup"><span data-stu-id="7654a-932">In order to emit the function call, you need a <xref:System.Reflection.FieldInfo> object that represents `F` on the constructed type — in other words, that is of type `U` rather than type `T`.</span></span> <span data-ttu-id="7654a-933">Aby to zrobić, należy najpierw wywołać <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> metoda <xref:System.Reflection.Emit.TypeBuilder> obiektu, określając <xref:System.Reflection.Emit.GenericTypeParameterBuilder> obiekt, który reprezentuje `U` jako argument typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-933">To do this, first call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on the <xref:System.Reflection.Emit.TypeBuilder> object, specifying the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object that represents `U` as the type argument.</span></span> <span data-ttu-id="7654a-934">Następnie wywołaj <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> metody z wartością zwracaną z <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> metody jako parametr `type` i <xref:System.Reflection.Emit.FieldBuilder> obiekt, który reprezentuje `F` jako parametr `field`.</span><span class="sxs-lookup"><span data-stu-id="7654a-934">Then call the <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> method with the return value of the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method as parameter `type` and the <xref:System.Reflection.Emit.FieldBuilder> object that represents `F` as parameter `field`.</span></span> <span data-ttu-id="7654a-935">Wartość zwracana jest <xref:System.Reflection.FieldInfo> obiektów należy Emituj wywołanie funkcji.</span><span class="sxs-lookup"><span data-stu-id="7654a-935">The return value is the <xref:System.Reflection.FieldInfo> object you need to emit the function call.</span></span> <span data-ttu-id="7654a-936">Przykład kodu pokazuje, w tym scenariuszu.</span><span class="sxs-lookup"><span data-stu-id="7654a-936">The code example demonstrates this scenario.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7654a-937">Poniższy przykład kodu zawiera kod źródłowy dla klasy ogólnej o nazwie przykładowy, który ma parametr typu o nazwie `T`.</span><span class="sxs-lookup"><span data-stu-id="7654a-937">The following code example contains source code for a generic class named Sample that has a type parameter named `T`.</span></span> <span data-ttu-id="7654a-938">Klasa ma pole o nazwie `Field`, typu `T`i rodzajowy metodę o nazwie `GM` w jego własnej parametru typu o nazwie `U`.</span><span class="sxs-lookup"><span data-stu-id="7654a-938">The class has a field named `Field`, of type `T`, and a generic method named `GM` with its own type parameter, named `U`.</span></span> <span data-ttu-id="7654a-939">Metoda `GM` tworzy wystąpienie `Sample`, podstawiając własne parametru typu `U` dla parametru typu `Sample`i są przechowywane jego parametru wejściowego w `Field`.</span><span class="sxs-lookup"><span data-stu-id="7654a-939">Method `GM` creates an instance of `Sample`, substituting its own type parameter `U` for the type parameter of `Sample`, and stores its input parameter in `Field`.</span></span> <span data-ttu-id="7654a-940">Ten kod źródłowy jest skompilowany, ale nie jest używany; można wyświetlić za pomocą [Ildasm.exe (dezasembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) i porównaj je z kodu emitowane przez klasę `Example`.</span><span class="sxs-lookup"><span data-stu-id="7654a-940">This source code is compiled but not used; you can view it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) and compare it to the code emitted by class `Example`.</span></span>  
  
 <span data-ttu-id="7654a-941">Kod w klasie `Example` zademonstrowano użycie <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> metodę Emituj Kod rodzajowy.</span><span class="sxs-lookup"><span data-stu-id="7654a-941">The code in class `Example` demonstrates the use of the <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> method to emit generic code.</span></span> <span data-ttu-id="7654a-942">`Main` Metody klasy `Example` tworzy dynamiczne zestawu zawierającego klasę o nazwie `Sample`i używa <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> metodę, aby wprowadzić ogólne przez dodanie parametru typu o nazwie `T`.</span><span class="sxs-lookup"><span data-stu-id="7654a-942">The `Main` method of class `Example` creates a dynamic assembly containing a class named `Sample`, and uses the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method to make it generic by adding a type parameter named `T`.</span></span> <span data-ttu-id="7654a-943">Domyślny konstruktor i pole o nazwie `Field`, typu `T`, są dodawane do klasy `Sample`.</span><span class="sxs-lookup"><span data-stu-id="7654a-943">A default constructor and a field named `Field`, of type `T`, are added to class `Sample`.</span></span> <span data-ttu-id="7654a-944">Metoda `GM` zostanie dodany i zamieniło metody ogólnej przy użyciu <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-944">A method `GM` is added and turned into a generic method by using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="7654a-945">Parametr typu `GM` nosi nazwę `U`.</span><span class="sxs-lookup"><span data-stu-id="7654a-945">The type parameter of `GM` is named `U`.</span></span> <span data-ttu-id="7654a-946">Po zdefiniowaniu parametru typu podpis `GM` jest dodawany przy użyciu <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-946">After the type parameter is defined, the signature of `GM` is added by using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="7654a-947">Brak nie zwracany typ i nr wymagane lub niestandardowych modyfikatory, wszystkie parametry tej metody są `null` z wyjątkiem `parameterTypes`; `parameterTypes` ustawia typ parametru tylko metody `U`, parametru typu ogólnego metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-947">There is no return type and no required or custom modifiers, so all the parameters of this method are `null` except `parameterTypes`; `parameterTypes` sets the type of the method's only parameter to `U`, the method's generic type parameter.</span></span> <span data-ttu-id="7654a-948">Treść metody tworzy wystąpienia typu skonstruowane `Sample<U>` (`Sample(Of U)` w języku Visual Basic), przypisuje parametr metody `Field`, a następnie drukuje wartość `Field`.</span><span class="sxs-lookup"><span data-stu-id="7654a-948">The body of the method creates an instance of the constructed type `Sample<U>` (`Sample(Of U)` in Visual Basic), assigns the method's parameter to `Field`, and then prints the value of `Field`.</span></span> <span data-ttu-id="7654a-949"><xref:System.Reflection.Emit.TypeBuilder.GetField%2A> Metoda służy do tworzenia <xref:System.Reflection.FieldInfo> reprezentująca pole skonstruowanego typu ogólnego `Sample<U>` w <xref:System.Reflection.Emit.OpCodes.Stfld?displayProperty=nameWithType> i <xref:System.Reflection.Emit.OpCodes.Ldfld?displayProperty=nameWithType> instrukcje.</span><span class="sxs-lookup"><span data-stu-id="7654a-949">The <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> method is used to create a <xref:System.Reflection.FieldInfo> that represents the field of the constructed generic type `Sample<U>` in the <xref:System.Reflection.Emit.OpCodes.Stfld?displayProperty=nameWithType> and <xref:System.Reflection.Emit.OpCodes.Ldfld?displayProperty=nameWithType> instructions.</span></span>  
  
 <span data-ttu-id="7654a-950">Fikcyjny typ został zdefiniowany dla metody punktu wejścia `Main`.</span><span class="sxs-lookup"><span data-stu-id="7654a-950">A dummy type is defined to hold the entry-point method `Main`.</span></span> <span data-ttu-id="7654a-951">W treści `Main`, statycznych `GM` wywołaniu metody w typie ogólnym skonstruowane `Sample<int>` (`Sample(Of Integer)` w języku Visual Basic), z typem <xref:System.String> podstawić `U`.</span><span class="sxs-lookup"><span data-stu-id="7654a-951">In the body of `Main`, the static `GM` method is invoked on the constructed generic type `Sample<int>` (`Sample(Of Integer)` in Visual Basic), with type <xref:System.String> substituted for `U`.</span></span>  
  
 <span data-ttu-id="7654a-952">Po uruchomieniu przykładowy kod zapisuje emitowany zestawu jako TypeBuilderGetFieldExample.exe.</span><span class="sxs-lookup"><span data-stu-id="7654a-952">When the code example is run, it saves the emitted assembly as TypeBuilderGetFieldExample.exe.</span></span> <span data-ttu-id="7654a-953">Możesz uruchomić TypeBuilderGetFieldExample.exe i służy [Ildasm.exe (dezasembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) porównywanie emitowany kodu kod `Sample` klasy, która ma zostać skompilowany w samej przykładu kodu.</span><span class="sxs-lookup"><span data-stu-id="7654a-953">You can run TypeBuilderGetFieldExample.exe, and you can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to compare the emitted code with the code for the `Sample` class that is compiled into the code example itself.</span></span>  
  
 [!code-csharp[TypeBuilder.GetField_Generic#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder.GetField_Generic/cs/source.cs#1)]
 [!code-vb[TypeBuilder.GetField_Generic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder.GetField_Generic/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7654a-954"><paramref name="type" /> reprezentuje typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-954"><paramref name="type" /> does not represent a generic type.</span></span>  
  
 <span data-ttu-id="7654a-955">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-955">-or-</span></span>  
  
 <span data-ttu-id="7654a-956"><paramref name="type" /> nie jest typu <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-956"><paramref name="type" /> is not of type <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span>  
  
 <span data-ttu-id="7654a-957">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-957">-or-</span></span>  
  
 <span data-ttu-id="7654a-958">Typ deklarujący <paramref name="field" /> nie jest definicją typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-958">The declaring type of <paramref name="field" /> is not a generic type definition.</span></span>  
  
 <span data-ttu-id="7654a-959">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-959">-or-</span></span>  
  
 <span data-ttu-id="7654a-960">Typ deklarujący <paramref name="field" /> definicji typu ogólnego nie jest <paramref name="type" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-960">The declaring type of <paramref name="field" /> is not the generic type definition of <paramref name="type" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public override System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetFields(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFields (bindingAttr As BindingFlags) As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="7654a-961">Musi to być flagę z bitowego <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="7654a-961">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span></span></param>
        <summary><span data-ttu-id="7654a-962">Zwraca pola publicznego i niepubliczne, zadeklarowanych przez tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-962">Returns the public and non-public fields that are declared by this type.</span></span></summary>
        <returns><span data-ttu-id="7654a-963">Zwraca tablicę <see cref="T:System.Reflection.FieldInfo" /> obiekty reprezentujące publicznych i niepublicznych pól zadeklarowane lub dziedziczone przez ten typ.</span><span class="sxs-lookup"><span data-stu-id="7654a-963">Returns an array of <see cref="T:System.Reflection.FieldInfo" /> objects representing the public and non-public fields declared or inherited by this type.</span></span> <span data-ttu-id="7654a-964">Jeśli nie ma żadnych pól określonych, zwracana jest pusta tablica.</span><span class="sxs-lookup"><span data-stu-id="7654a-964">An empty array is returned if there are no fields, as specified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-965"><xref:System.Reflection.Emit.TypeBuilder.GetFields%2A> Metoda nie zwraca pola w określonej kolejności, takich jak alfabetycznej lub deklaracji kolejności.</span><span class="sxs-lookup"><span data-stu-id="7654a-965">The <xref:System.Reflection.Emit.TypeBuilder.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="7654a-966">Kodu nie zależy od kolejności, w którym pola są zwracane, że kolejność może się różnić.</span><span class="sxs-lookup"><span data-stu-id="7654a-966">Your code must not depend on the order in which fields are returned, because that order can vary.</span></span>  
  
 <span data-ttu-id="7654a-967">Pobrać za pomocą typu <xref:System.Type.GetType%2A?displayProperty=nameWithType> lub <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> i użyj odbicia dla typu pobrane.</span><span class="sxs-lookup"><span data-stu-id="7654a-967">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7654a-968">Ta metoda nie jest zaimplementowana dla typów niekompletne.</span><span class="sxs-lookup"><span data-stu-id="7654a-968">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetGenericArguments">
      <MemberSignature Language="C#" Value="public override Type[] GetGenericArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetGenericArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetGenericArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGenericArguments () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetGenericArguments();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7654a-969">Zwraca tablicę <see cref="T:System.Type" /> obiekty reprezentujące argumentów typu ogólnego typu lub parametrów typu w definicji typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-969">Returns an array of <see cref="T:System.Type" /> objects representing the type arguments of a generic type or the type parameters of a generic type definition.</span></span></summary>
        <returns><span data-ttu-id="7654a-970">Tablica <see cref="T:System.Type" /> obiektów.</span><span class="sxs-lookup"><span data-stu-id="7654a-970">An array of <see cref="T:System.Type" /> objects.</span></span> <span data-ttu-id="7654a-971">Elementy tablicy reprezentuje argumentów typu ogólnego typu lub parametrów typu w definicji typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-971">The elements of the array represent the type arguments of a generic type or the type parameters of a generic type definition.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-972">Elementy tablicy zwracane są w kolejności, w którym są wyświetlane na liście parametrów typu dla definicji typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-972">The elements of the returned array are in the order in which they appear in the list of type parameters for the generic type definition.</span></span>  
  
 <span data-ttu-id="7654a-973">A <xref:System.Reflection.Emit.TypeBuilder> obiekt reprezentuje definicji typu ogólnego, jeśli <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> użyto metody umożliwiają parametry typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-973">A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters.</span></span> <span data-ttu-id="7654a-974">Ta metoda pobiera <xref:System.Reflection.Emit.GenericTypeParameterBuilder> obiektów, które reprezentują parametry typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-974">This method retrieves the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> objects that represent the generic type parameters.</span></span>  
  
 <span data-ttu-id="7654a-975">Aby uzyskać więcej informacji na typach ogólnych odbicia i listę niezmiennej warunki terminów używanych w ogólnym odbicia, zobacz <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-975">For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])" />
        <altmember cref="P:System.Type.IsGenericType" />
        <altmember cref="M:System.Type.GetGenericArguments" />
      </Docs>
    </Member>
    <Member MemberName="GetGenericParameterConstraints">
      <MemberSignature Language="C#" Value="public override Type[] GetGenericParameterConstraints ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetGenericParameterConstraints() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetGenericParameterConstraints" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGenericParameterConstraints () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetGenericParameterConstraints();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public override Type GetGenericTypeDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetGenericTypeDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGenericTypeDefinition () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetGenericTypeDefinition();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7654a-976">Zwraca <see cref="T:System.Type" /> obiekt, który reprezentuje definicji typu ogólnego, z którego można uzyskać bieżącego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-976">Returns a <see cref="T:System.Type" /> object that represents a generic type definition from which the current type can be obtained.</span></span></summary>
        <returns><span data-ttu-id="7654a-977">A <see cref="T:System.Type" /> obiekt reprezentujący definicji typu ogólnego, z którego można uzyskać bieżącego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-977">A <see cref="T:System.Type" /> object representing a generic type definition from which the current type can be obtained.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-978">Wywołanie <xref:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition%2A> metoda <xref:System.Reflection.Emit.TypeBuilder> obiektu, który <xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A> zwraca `true`, <xref:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition%2A> właściwość zwraca bieżącego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="7654a-978">If you call the <xref:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition%2A> method on a <xref:System.Reflection.Emit.TypeBuilder> object for which the <xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A> property returns `true`, the <xref:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition%2A> property returns the current instance.</span></span> <span data-ttu-id="7654a-979">A <xref:System.Reflection.Emit.TypeBuilder> że reprezentuje ogólnego typu jest zawsze definicji typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-979">A <xref:System.Reflection.Emit.TypeBuilder> that represents a generic type is always a generic type definition.</span></span>  
  
 <span data-ttu-id="7654a-980">Jeśli używasz <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> metody do konstruowania typu ogólnego z <xref:System.Reflection.Emit.TypeBuilder> obiekt, który reprezentuje definicji typu ogólnego, za pomocą <xref:System.Type.GetGenericTypeDefinition%2A?displayProperty=nameWithType> metoda skonstruowanego typu otrzymuje w odpowiedzi <xref:System.Reflection.Emit.TypeBuilder> obiekt, który reprezentuje typ ogólny Definicja.</span><span class="sxs-lookup"><span data-stu-id="7654a-980">If you used the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method to construct a generic type from a <xref:System.Reflection.Emit.TypeBuilder> object that represents a generic type definition, using the <xref:System.Type.GetGenericTypeDefinition%2A?displayProperty=nameWithType> method on the constructed type gets back the <xref:System.Reflection.Emit.TypeBuilder> object that represents the generic type definition.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-981">Bieżący typ nie jest rodzajowa.</span><span class="sxs-lookup"><span data-stu-id="7654a-981">The current type is not generic.</span></span> <span data-ttu-id="7654a-982">Oznacza to <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> zwraca <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-982">That is, <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> returns <see langword="false" />.</span></span></exception>
        <altmember cref="P:System.Type.IsGenericType" />
        <altmember cref="M:System.Type.GetGenericTypeDefinition" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])" />
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public override Type GetInterface (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetInterface(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterface (name As String, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetInterface(System::String ^ name, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-983">Nazwa interfejsu.</span><span class="sxs-lookup"><span data-stu-id="7654a-983">The name of the interface.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="7654a-984">Jeśli <see langword="true" />, wyszukiwanie jest rozróżniana wielkość liter.</span><span class="sxs-lookup"><span data-stu-id="7654a-984">If <see langword="true" />, the search is case-insensitive.</span></span> <span data-ttu-id="7654a-985">Jeśli <see langword="false" />, wyszukiwanie jest rozróżniana wielkość liter.</span><span class="sxs-lookup"><span data-stu-id="7654a-985">If <see langword="false" />, the search is case-sensitive.</span></span></param>
        <summary><span data-ttu-id="7654a-986">Zwraca interfejs implementowany (bezpośrednio lub pośrednio) z w pełni kwalifikowana nazwa zgodnego z nazwą danego interfejsu przez tę klasę.</span><span class="sxs-lookup"><span data-stu-id="7654a-986">Returns the interface implemented (directly or indirectly) by this class with the fully qualified name matching the given interface name.</span></span></summary>
        <returns><span data-ttu-id="7654a-987">Zwraca <see cref="T:System.Type" /> obiekt reprezentujący zaimplementowany interfejs.</span><span class="sxs-lookup"><span data-stu-id="7654a-987">Returns a <see cref="T:System.Type" /> object representing the implemented interface.</span></span> <span data-ttu-id="7654a-988">Zwraca wartość null w przypadku nieznalezienia bez dopasowania nazwy interfejsu.</span><span class="sxs-lookup"><span data-stu-id="7654a-988">Returns null if no interface matching name is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-989">Pobrać za pomocą typu <xref:System.Type.GetType%2A?displayProperty=nameWithType> lub <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> i użyj odbicia dla typu pobrane.</span><span class="sxs-lookup"><span data-stu-id="7654a-989">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7654a-990">Ta metoda nie jest zaimplementowana dla typów niekompletne.</span><span class="sxs-lookup"><span data-stu-id="7654a-990">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaceMap">
      <MemberSignature Language="C#" Value="public override System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetInterfaceMap(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterfaceMap (interfaceType As Type) As InterfaceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::InterfaceMapping GetInterfaceMap(Type ^ interfaceType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.InterfaceMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType"><span data-ttu-id="7654a-991"><see cref="T:System.Type" /> Interfejsu, dla którego ma być pobrana mapowania.</span><span class="sxs-lookup"><span data-stu-id="7654a-991">The <see cref="T:System.Type" /> of the interface for which the mapping is to be retrieved.</span></span></param>
        <summary><span data-ttu-id="7654a-992">Zwraca interfejs mapowania dla żądanego interfejsu.</span><span class="sxs-lookup"><span data-stu-id="7654a-992">Returns an interface mapping for the requested interface.</span></span></summary>
        <returns><span data-ttu-id="7654a-993">Zwraca mapowania żądanego interfejsu.</span><span class="sxs-lookup"><span data-stu-id="7654a-993">Returns the requested interface mapping.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-994">Pobrać za pomocą typu <xref:System.Type.GetType%2A?displayProperty=nameWithType> lub <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> i użyj odbicia dla typu pobrane.</span><span class="sxs-lookup"><span data-stu-id="7654a-994">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7654a-995">Ta metoda nie jest zaimplementowana dla typów niekompletne.</span><span class="sxs-lookup"><span data-stu-id="7654a-995">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaces">
      <MemberSignature Language="C#" Value="public override Type[] GetInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetInterfaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetInterfaces" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterfaces () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetInterfaces();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7654a-996">Zwraca tablicę wszystkie interfejsy zaimplementowane dla tego typu i jego typów podstawowych.</span><span class="sxs-lookup"><span data-stu-id="7654a-996">Returns an array of all the interfaces implemented on this type and its base types.</span></span></summary>
        <returns><span data-ttu-id="7654a-997">Zwraca tablicę <see cref="T:System.Type" /> obiekty reprezentujące zaimplementowanych interfejsów.</span><span class="sxs-lookup"><span data-stu-id="7654a-997">Returns an array of <see cref="T:System.Type" /> objects representing the implemented interfaces.</span></span> <span data-ttu-id="7654a-998">Jeśli nie są zdefiniowane, zwracana jest pusta tablica.</span><span class="sxs-lookup"><span data-stu-id="7654a-998">If none are defined, an empty array is returned.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes type, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMember (name As String, type As MemberTypes, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-999">Nazwa elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="7654a-999">The name of the member.</span></span></param>
        <param name="type"><span data-ttu-id="7654a-1000">Typ elementu członkowskiego do zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="7654a-1000">The type of the member to return.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="7654a-1001">Musi to być flagę z bitowego <see cref="T:System.Reflection.BindingFlags" />, jak w <see langword="InvokeMethod" />, <see langword="NonPublic" />i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="7654a-1001">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, as in <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span></span></param>
        <summary><span data-ttu-id="7654a-1002">Zwraca wszystkie publiczne i niepubliczne elementy członkowskie zadeklarowane lub dziedziczone przez ten typ, jak określono.</span><span class="sxs-lookup"><span data-stu-id="7654a-1002">Returns all the public and non-public members declared or inherited by this type, as specified.</span></span></summary>
        <returns><span data-ttu-id="7654a-1003">Zwraca tablicę <see cref="T:System.Reflection.MemberInfo" /> obiekty reprezentujące publicznych i niepublicznych elementów członkowskich zdefiniowanych dla tego typu, jeśli <paramref name="nonPublic" /> jest używany; w przeciwnym razie zwracane są tylko publiczne elementy członkowskie.</span><span class="sxs-lookup"><span data-stu-id="7654a-1003">Returns an array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public and non-public members defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public members are returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1004">Pobrać za pomocą typu <xref:System.Type.GetType%2A?displayProperty=nameWithType> lub <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> i użyj odbicia dla typu pobrane.</span><span class="sxs-lookup"><span data-stu-id="7654a-1004">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7654a-1005">Ta metoda nie jest zaimplementowana dla typów niekompletne.</span><span class="sxs-lookup"><span data-stu-id="7654a-1005">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetMembers(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMembers (bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="7654a-1006">Musi to być flagę z bitowego <see cref="T:System.Reflection.BindingFlags" />, takich jak <see langword="InvokeMethod" />, <see langword="NonPublic" />i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="7654a-1006">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span></span></param>
        <summary><span data-ttu-id="7654a-1007">Zwraca elementy publiczne i niepubliczne elementy członkowskie zadeklarowany lub dziedziczone przez ten typ.</span><span class="sxs-lookup"><span data-stu-id="7654a-1007">Returns the members for the public and non-public members declared or inherited by this type.</span></span></summary>
        <returns><span data-ttu-id="7654a-1008">Zwraca tablicę <see cref="T:System.Reflection.MemberInfo" /> obiekty reprezentujące publicznych i niepublicznych elementów członkowskich zadeklarowane lub dziedziczone przez ten typ.</span><span class="sxs-lookup"><span data-stu-id="7654a-1008">Returns an array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public and non-public members declared or inherited by this type.</span></span> <span data-ttu-id="7654a-1009">Jeśli nie ma żadnych członków zgodnych, zwracana jest pusta tablica.</span><span class="sxs-lookup"><span data-stu-id="7654a-1009">An empty array is returned if there are no matching members.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1010">Pobrać za pomocą typu <xref:System.Type.GetType%2A?displayProperty=nameWithType> lub <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> i użyj odbicia dla typu pobrane.</span><span class="sxs-lookup"><span data-stu-id="7654a-1010">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7654a-1011">Ta metoda nie jest zaimplementowana dla typów niekompletne.</span><span class="sxs-lookup"><span data-stu-id="7654a-1011">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public static System.Reflection.MethodInfo GetMethod (Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.MethodInfo GetMethod(class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::MethodInfo ^ GetMethod(Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="7654a-1012">Skonstruowanego typu ogólnego, którego metoda jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="7654a-1012">The constructed generic type whose method is returned.</span></span></param>
        <param name="method"><span data-ttu-id="7654a-1013">Metoda w definicji typu ogólnego <c>typu</c>, który określa metodę <c>typu</c> do zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="7654a-1013">A method on the generic type definition of <c>type</c>, which specifies which method of <c>type</c> to return.</span></span></param>
        <summary><span data-ttu-id="7654a-1014">Zwraca metodę określonego skonstruowanego typu ogólnego odnosi się do określonej metody definicji typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1014">Returns the method of the specified constructed generic type that corresponds to the specified method of the generic type definition.</span></span></summary>
        <returns><span data-ttu-id="7654a-1015">A <see cref="T:System.Reflection.MethodInfo" /> obiekt, który reprezentuje metodę <paramref name="type" /> odpowiadający <paramref name="method" />, który określa metodę należących do definicji typu ogólnego <paramref name="type" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1015">A <see cref="T:System.Reflection.MethodInfo" /> object that represents the method of <paramref name="type" /> corresponding to <paramref name="method" />, which specifies a method belonging to the generic type definition of <paramref name="type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1016"><xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> Metody umożliwia uzyskanie <xref:System.Reflection.MethodInfo> obiekt, który reprezentuje metodę skonstruowanego typu ogólnego, którego definicja typu ogólnego jest reprezentowana przez <xref:System.Reflection.Emit.TypeBuilder> obiektu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1016">The <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> method provides a way to get a <xref:System.Reflection.MethodInfo> object that represents a method of a constructed generic type whose generic type definition is represented by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 <span data-ttu-id="7654a-1017">Na przykład, załóżmy, że masz <xref:System.Reflection.Emit.TypeBuilder> obiekt, który reprezentuje typ `G<T>` w składni języka C# (`G(Of T)` w języku Visual Basic `generic <T> ref class G` w języku C++) i <xref:System.Reflection.Emit.MethodBuilder> obiekt, który reprezentuje metodę `T M()` w składni języka C# (`Function M() As T`w języku Visual Basic `T M()` w języku C++) zdefiniowanego przez `G<T>`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1017">For example, suppose you have a <xref:System.Reflection.Emit.TypeBuilder> object that represents the type `G<T>` in C# syntax (`G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) and a <xref:System.Reflection.Emit.MethodBuilder> object that represents a method `T M()` in C# syntax (`Function M() As T` in Visual Basic, `T M()` in C++) that is defined by `G<T>`.</span></span> <span data-ttu-id="7654a-1018">Załóżmy, że `G<T>` ma z parametrem typu metody ogólnej `U` tworzącą wystąpienie skonstruowanego typu `G<U>` i wywołuje metodę `M` w tym wystąpieniu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1018">Suppose that `G<T>` has a generic method with type parameter `U` that creates an instance of the constructed type `G<U>` and calls method `M` on that instance.</span></span> <span data-ttu-id="7654a-1019">Aby Emituj wywołanie funkcji, należy <xref:System.Reflection.MethodInfo> obiekt, który reprezentuje `M` na utworzony typ — innymi słowy, który zwraca typ `U` zamiast typu `T`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1019">In order to emit the function call, you need a <xref:System.Reflection.MethodInfo> object that represents `M` on the constructed type — in other words, that returns type `U` rather than type `T`.</span></span> <span data-ttu-id="7654a-1020">Aby to zrobić, należy najpierw wywołać <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> metoda <xref:System.Reflection.Emit.TypeBuilder> obiektu, określając <xref:System.Reflection.Emit.GenericTypeParameterBuilder> obiekt, który reprezentuje `U` jako argument typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1020">To do this, first call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on the <xref:System.Reflection.Emit.TypeBuilder> object, specifying the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object that represents `U` as the type argument.</span></span> <span data-ttu-id="7654a-1021">Następnie wywołaj <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> metody z wartością zwracaną z <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> metody jako parametr `type` i <xref:System.Reflection.Emit.MethodBuilder> obiekt, który reprezentuje `T M()` jako parametr `method`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1021">Then call the <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> method with the return value of the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method as parameter `type` and the <xref:System.Reflection.Emit.MethodBuilder> object that represents `T M()` as parameter `method`.</span></span> <span data-ttu-id="7654a-1022">Wartość zwracana jest <xref:System.Reflection.MethodInfo> obiektów należy Emituj wywołanie funkcji.</span><span class="sxs-lookup"><span data-stu-id="7654a-1022">The return value is the <xref:System.Reflection.MethodInfo> object you need to emit the function call.</span></span> <span data-ttu-id="7654a-1023">Przykład kodu pokazuje podobny do poniższego scenariusza.</span><span class="sxs-lookup"><span data-stu-id="7654a-1023">The code example demonstrates a scenario similar to this.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7654a-1024">Poniższy przykład kodu zawiera kod źródłowy dla klasy ogólnej o nazwie `Sample` mający parametru typu o nazwie `T`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1024">The following code example contains source code for a generic class named `Sample` that has a type parameter named `T`.</span></span> <span data-ttu-id="7654a-1025">Klasa ma pole o nazwie `Field`, typu `T`i rodzajowy metodę o nazwie `GM` w jego własnej parametru typu o nazwie `U`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1025">The class has a field named `Field`, of type `T`, and a generic method named `GM` with its own type parameter, named `U`.</span></span> <span data-ttu-id="7654a-1026">Metoda `GM` tworzy wystąpienie `Sample`, podstawiając własne parametru typu `U` dla parametru typu `Sample`i są przechowywane jego parametru wejściowego w `Field`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1026">Method `GM` creates an instance of `Sample`, substituting its own type parameter `U` for the type parameter of `Sample`, and stores its input parameter in `Field`.</span></span> <span data-ttu-id="7654a-1027">Ten kod źródłowy jest skompilowany, ale nie jest używany; można wyświetlić za pomocą [Ildasm.exe (dezasembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) i porównaj je z kodu emitowane przez klasę `Example`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1027">This source code is compiled but not used; you can view it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) and compare it to the code emitted by class `Example`.</span></span>  
  
 <span data-ttu-id="7654a-1028">Kod w klasie `Example` zademonstrowano użycie <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> metodę Emituj Kod rodzajowy.</span><span class="sxs-lookup"><span data-stu-id="7654a-1028">The code in class `Example` demonstrates the use of the <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> method to emit generic code.</span></span> <span data-ttu-id="7654a-1029">`Main` Metody klasy `Example` tworzy dynamiczne zestawu zawierającego klasę o nazwie `Sample` i używa <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> metodę, aby wprowadzić ogólne przez dodanie parametru typu o nazwie `T`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1029">The `Main` method of class `Example` creates a dynamic assembly containing a class named `Sample` and uses the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method to make it generic by adding a type parameter named `T`.</span></span> <span data-ttu-id="7654a-1030">Domyślny konstruktor i pole o nazwie `Field`, typu `T`, są dodawane do klasy `Sample`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1030">A default constructor and a field named `Field`, of type `T`, are added to class `Sample`.</span></span> <span data-ttu-id="7654a-1031">Metoda `GM` zostanie dodany i zamieniło metody ogólnej przy użyciu <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-1031">A method `GM` is added and turned into a generic method by using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="7654a-1032">Parametr typu `GM` nosi nazwę `U`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1032">The type parameter of `GM` is named `U`.</span></span> <span data-ttu-id="7654a-1033">Po zdefiniowaniu parametru typu podpis `GM` jest dodawany przy użyciu <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-1033">After the type parameter is defined, the signature of `GM` is added by using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="7654a-1034">Brak nie zwracany typ i nr wymagane lub niestandardowych modyfikatory, wszystkie parametry tej metody są `null` z wyjątkiem `parameterTypes`; `parameterTypes` ustawia typ parametru tylko metody `U`, parametru typu ogólnego metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-1034">There is no return type and no required or custom modifiers, so all the parameters of this method are `null` except `parameterTypes`; `parameterTypes` sets the type of the method's only parameter to `U`, the method's generic type parameter.</span></span> <span data-ttu-id="7654a-1035">Treść metody tworzy wystąpienia typu skonstruowane `Sample<U>` (`Sample(Of U)` w języku Visual Basic), przypisuje parametr metody `Field`, a następnie drukuje wartość `Field`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1035">The body of the method creates an instance of the constructed type `Sample<U>` (`Sample(Of U)` in Visual Basic), assigns the method's parameter to `Field`, and then prints the value of `Field`.</span></span> <span data-ttu-id="7654a-1036">Fikcyjny typ został zdefiniowany dla metody punktu wejścia `Main`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1036">A dummy type is defined to hold the entry-point method `Main`.</span></span> <span data-ttu-id="7654a-1037">W treści `Main`, statycznych `GM` wywołaniu metody w typie ogólnym skonstruowane `Sample<int>` (`Sample(Of Integer)` w języku Visual Basic), z typem <xref:System.String> podstawić `U`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1037">In the body of `Main`, the static `GM` method is invoked on the constructed generic type `Sample<int>` (`Sample(Of Integer)` in Visual Basic), with type <xref:System.String> substituted for `U`.</span></span> <span data-ttu-id="7654a-1038"><xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> Metoda służy do tworzenia <xref:System.Reflection.MethodInfo> dla statycznych `GM` metody skonstruowanego typu ogólnego `Sample<U>`i <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=nameWithType> metody jest następnie używany do tworzenia <xref:System.Reflection.MethodInfo> który można emitowanych w wywołaniu metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-1038">The <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> method is used to create a <xref:System.Reflection.MethodInfo> for the static `GM` method of the constructed generic type `Sample<U>`, and the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=nameWithType> method is then used to create a <xref:System.Reflection.MethodInfo> that can emitted in a method call.</span></span>  
  
 <span data-ttu-id="7654a-1039">Po uruchomieniu przykładowy kod zapisuje emitowany zestawu jako TypeBuilderGetFieldExample.exe.</span><span class="sxs-lookup"><span data-stu-id="7654a-1039">When the code example is run, it saves the emitted assembly as TypeBuilderGetFieldExample.exe.</span></span> <span data-ttu-id="7654a-1040">Możesz uruchomić TypeBuilderGetFieldExample.exe i służy [Ildasm.exe (dezasembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) porównywanie emitowany kodu kod `Sample` klasy, która ma zostać skompilowany w samej przykładu kodu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1040">You can run TypeBuilderGetFieldExample.exe, and you can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to compare the emitted code with the code for the `Sample` class that is compiled into the code example itself.</span></span>  
  
 [!code-csharp[TypeBuilder.GetField_Generic#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder.GetField_Generic/cs/source.cs#1)]
 [!code-vb[TypeBuilder.GetField_Generic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder.GetField_Generic/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7654a-1041"><paramref name="method" /> jest to metoda ogólna, który nie jest ogólną definicją metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-1041"><paramref name="method" /> is a generic method that is not a generic method definition.</span></span>  
  
 <span data-ttu-id="7654a-1042">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-1042">-or-</span></span>  
  
 <span data-ttu-id="7654a-1043"><paramref name="type" /> reprezentuje typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1043"><paramref name="type" /> does not represent a generic type.</span></span>  
  
 <span data-ttu-id="7654a-1044">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-1044">-or-</span></span>  
  
 <span data-ttu-id="7654a-1045"><paramref name="type" /> nie jest typu <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1045"><paramref name="type" /> is not of type <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span>  
  
 <span data-ttu-id="7654a-1046">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-1046">-or-</span></span>  
  
 <span data-ttu-id="7654a-1047">Typ deklarujący <paramref name="method" /> nie jest definicją typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1047">The declaring type of <paramref name="method" /> is not a generic type definition.</span></span>  
  
 <span data-ttu-id="7654a-1048">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-1048">-or-</span></span>  
  
 <span data-ttu-id="7654a-1049">Typ deklarujący <paramref name="method" /> definicji typu ogólnego nie jest <paramref name="type" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1049">The declaring type of <paramref name="method" /> is not the generic type definition of <paramref name="type" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetMethods(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMethods (bindingAttr As BindingFlags) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="7654a-1050">Musi to być flagę z bitowego <see cref="T:System.Reflection.BindingFlags" /> jako w <see langword="InvokeMethod" />, <see langword="NonPublic" />i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="7654a-1050">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> as in <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span></span></param>
        <summary><span data-ttu-id="7654a-1051">Zwraca wszystkie publiczne i niepublicznych metody zadeklarowane lub dziedziczone przez ten typ, jak określono.</span><span class="sxs-lookup"><span data-stu-id="7654a-1051">Returns all the public and non-public methods declared or inherited by this type, as specified.</span></span></summary>
        <returns><span data-ttu-id="7654a-1052">Zwraca tablicę <see cref="T:System.Reflection.MethodInfo" /> obiekty reprezentujące metod publicznych i niepublicznych zdefiniowana dla tego typu, jeśli <paramref name="nonPublic" /> jest używany; w przeciwnym razie zwracane są tylko metody publiczne.</span><span class="sxs-lookup"><span data-stu-id="7654a-1052">Returns an array of <see cref="T:System.Reflection.MethodInfo" /> objects representing the public and non-public methods defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public methods are returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1053">Pobrać za pomocą typu <xref:System.Type.GetType%2A?displayProperty=nameWithType> lub <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> i użyj odbicia dla typu pobrane.</span><span class="sxs-lookup"><span data-stu-id="7654a-1053">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7654a-1054">Ta metoda nie jest zaimplementowana dla typów niekompletne.</span><span class="sxs-lookup"><span data-stu-id="7654a-1054">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public override Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetNestedType (name As String, bindingAttr As BindingFlags) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetNestedType(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-1055"><see cref="T:System.String" /> Zawierającą nazwę typu zagnieżdżonego można pobrać.</span><span class="sxs-lookup"><span data-stu-id="7654a-1055">The <see cref="T:System.String" /> containing the name of the nested type to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="7654a-1056">Maska bitowa składającej się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span><span class="sxs-lookup"><span data-stu-id="7654a-1056">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
 <span data-ttu-id="7654a-1057">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-1057">-or-</span></span>  
  
 <span data-ttu-id="7654a-1058">Zero, należy przeprowadzić wyszukiwanie z uwzględnieniem wielkości liter dla metod publicznych.</span><span class="sxs-lookup"><span data-stu-id="7654a-1058">Zero, to conduct a case-sensitive search for public methods.</span></span></param>
        <summary><span data-ttu-id="7654a-1059">Zwraca typów zagnieżdżonych publicznego i niepubliczne, które są zadeklarowane przez tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1059">Returns the public and non-public nested types that are declared by this type.</span></span></summary>
        <returns><span data-ttu-id="7654a-1060">A <see cref="T:System.Type" /> obiekt reprezentujący typu zagnieżdżonego, który spełnia określonych wymagań, jeśli je znaleziono; w przeciwnym razie <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1060">A <see cref="T:System.Type" /> object representing the nested type that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1061">Pobrać za pomocą typu <xref:System.Type.GetType%2A?displayProperty=nameWithType> lub <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> i użyj odbicia dla typu pobrane.</span><span class="sxs-lookup"><span data-stu-id="7654a-1061">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 <span data-ttu-id="7654a-1062">Jeśli ten typ jest zakończone, na przykład, jeśli `CreateType` została wywołana dla tego typu, ale istnieją zagnieżdżone typy, które nie zostały zakończone, następnie `GetNestedTypes` zwróci tylko te typy zagnieżdżone dla którego `CreateType` została wywołana.</span><span class="sxs-lookup"><span data-stu-id="7654a-1062">If this type is complete, for example, if `CreateType` has been called on this type, but there are nested types that are not complete, then `GetNestedTypes` will only return those nested types for which `CreateType` has been called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7654a-1063">Ta metoda nie jest zaimplementowana dla typów niekompletne.</span><span class="sxs-lookup"><span data-stu-id="7654a-1063">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public override Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetNestedTypes(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetNestedTypes (bindingAttr As BindingFlags) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetNestedTypes(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="7654a-1064">Musi to być flagę z bitowego <see cref="T:System.Reflection.BindingFlags" />, jak w <see langword="InvokeMethod" />, <see langword="NonPublic" />i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="7654a-1064">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, as in <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span></span></param>
        <summary><span data-ttu-id="7654a-1065">Zwraca typy zagnieżdżone publicznego i niepubliczne, które są zadeklarowane lub dziedziczone przez ten typ.</span><span class="sxs-lookup"><span data-stu-id="7654a-1065">Returns the public and non-public nested types that are declared or inherited by this type.</span></span></summary>
        <returns><span data-ttu-id="7654a-1066">Tablica <see cref="T:System.Type" /> obiekty reprezentujący wszystkie typy zagnieżdżone w obrębie bieżącego <see cref="T:System.Type" /> zgodnego z określonymi ograniczeniami wiązania.</span><span class="sxs-lookup"><span data-stu-id="7654a-1066">An array of <see cref="T:System.Type" /> objects representing all the types nested within the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
 <span data-ttu-id="7654a-1067">Pusta tablica typu <see cref="T:System.Type" />, jeśli żaden z typów są zagnieżdżone w obrębie bieżącego <see cref="T:System.Type" />, lub jeśli żadna typy zagnieżdżone nie zgadza się z ograniczeniami wiązania.</span><span class="sxs-lookup"><span data-stu-id="7654a-1067">An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />, or if none of the nested types match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1068">Pobrać za pomocą typu <xref:System.Type.GetType%2A?displayProperty=nameWithType> lub <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> i użyj odbicia dla typu pobrane.</span><span class="sxs-lookup"><span data-stu-id="7654a-1068">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 <span data-ttu-id="7654a-1069">Jeśli ten typ jest zakończone, na przykład, jeśli `CreateType` została wywołana dla tego typu, ale istnieją zagnieżdżone typy, które nie zostały zakończone, następnie `GetNestedTypes` zwróci tylko te typy zagnieżdżone dla którego `CreateType` została wywołana.</span><span class="sxs-lookup"><span data-stu-id="7654a-1069">If this type is complete, for example, if `CreateType` has been called on this type, but there are nested types that are not complete, then `GetNestedTypes` will only return those nested types for which `CreateType` has been called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7654a-1070">Ta metoda nie jest zaimplementowana dla typów niekompletne.</span><span class="sxs-lookup"><span data-stu-id="7654a-1070">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public override System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetProperties(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetProperties (bindingAttr As BindingFlags) As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="7654a-1071">Ten atrybut wywołania.</span><span class="sxs-lookup"><span data-stu-id="7654a-1071">This invocation attribute.</span></span> <span data-ttu-id="7654a-1072">Musi to być flagę z bitowego <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="7654a-1072">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span></span></param>
        <summary><span data-ttu-id="7654a-1073">Zwraca wszystkie publiczne i niepublicznych właściwości zadeklarowane lub dziedziczone przez ten typ, jak określono.</span><span class="sxs-lookup"><span data-stu-id="7654a-1073">Returns all the public and non-public properties declared or inherited by this type, as specified.</span></span></summary>
        <returns><span data-ttu-id="7654a-1074">Zwraca tablicę <see langword="PropertyInfo" /> obiekty reprezentujące właściwości publiczne i niepublicznych zdefiniowana dla tego typu, jeśli <paramref name="nonPublic" /> jest używany; w przeciwnym razie zwracane są tylko właściwości publiczne.</span><span class="sxs-lookup"><span data-stu-id="7654a-1074">Returns an array of <see langword="PropertyInfo" /> objects representing the public and non-public properties defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public properties are returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1075">Pobrać za pomocą typu <xref:System.Type.GetType%2A?displayProperty=nameWithType> lub <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> i użyj odbicia dla typu pobrane.</span><span class="sxs-lookup"><span data-stu-id="7654a-1075">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7654a-1076">Ta metoda nie jest zaimplementowana dla typów niekompletne.</span><span class="sxs-lookup"><span data-stu-id="7654a-1076">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.PropertyInfo GetPropertyImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::PropertyInfo ^ GetPropertyImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GUID">
      <MemberSignature Language="C#" Value="public override Guid GUID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid GUID" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.GUID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GUID As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Guid GUID { Guid get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7654a-1077">Pobiera identyfikator GUID tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1077">Retrieves the GUID of this type.</span></span></summary>
        <value><span data-ttu-id="7654a-1078">Tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1078">Read-only.</span></span> <span data-ttu-id="7654a-1079">Pobiera identyfikator GUID tego typu</span><span class="sxs-lookup"><span data-stu-id="7654a-1079">Retrieves the GUID of this type</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1080">Pobrać za pomocą typu <xref:System.Type.GetType%2A?displayProperty=nameWithType> lub <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> i użyj odbicia dla typu pobrane.</span><span class="sxs-lookup"><span data-stu-id="7654a-1080">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7654a-1081">Ta metoda nie jest obecnie obsługiwana dla typów niekompletne.</span><span class="sxs-lookup"><span data-stu-id="7654a-1081">This method is not currently supported for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HasElementTypeImpl">
      <MemberSignature Language="C#" Value="protected override bool HasElementTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool HasElementTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.HasElementTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HasElementTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool HasElementTypeImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public override object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ namedParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7654a-1082">Nazwa elementu członkowskiego do wywołania.</span><span class="sxs-lookup"><span data-stu-id="7654a-1082">The name of the member to invoke.</span></span> <span data-ttu-id="7654a-1083">Może to być Konstruktor, metody, właściwości lub pola.</span><span class="sxs-lookup"><span data-stu-id="7654a-1083">This can be a constructor, method, property, or field.</span></span> <span data-ttu-id="7654a-1084">Należy określić atrybut odpowiedniego wywołania.</span><span class="sxs-lookup"><span data-stu-id="7654a-1084">A suitable invocation attribute must be specified.</span></span> <span data-ttu-id="7654a-1085">Należy pamiętać, że można wywołać domyślny element członkowski klasy, przekazując pustego ciągu jako nazwy elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1085">Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="7654a-1086">Atrybut wywołania.</span><span class="sxs-lookup"><span data-stu-id="7654a-1086">The invocation attribute.</span></span> <span data-ttu-id="7654a-1087">Musi to być flagę z bitowego <see langword="BindingFlags" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1087">This must be a bit flag from <see langword="BindingFlags" />.</span></span></param>
        <param name="binder"><span data-ttu-id="7654a-1088">Obiekt, który umożliwia powiązanie koercja argumentu typy wywołania elementów członkowskich i pobieranie <see langword="MemberInfo" /> obiektów za pomocą odbicia.</span><span class="sxs-lookup"><span data-stu-id="7654a-1088">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects using reflection.</span></span> <span data-ttu-id="7654a-1089">Jeśli jest <see langword="null" />, używany jest domyślny integrator.</span><span class="sxs-lookup"><span data-stu-id="7654a-1089">If binder is <see langword="null" />, the default binder is used.</span></span> <span data-ttu-id="7654a-1090">Zobacz <see cref="T:System.Reflection.Binder" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1090">See <see cref="T:System.Reflection.Binder" />.</span></span></param>
        <param name="target"><span data-ttu-id="7654a-1091">Obiekt do wywołania określonego elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1091">The object on which to invoke the specified member.</span></span> <span data-ttu-id="7654a-1092">Jeśli element członkowski jest statyczny, ten parametr zostanie zignorowany.</span><span class="sxs-lookup"><span data-stu-id="7654a-1092">If the member is static, this parameter is ignored.</span></span></param>
        <param name="args"><span data-ttu-id="7654a-1093">Lista argumentów.</span><span class="sxs-lookup"><span data-stu-id="7654a-1093">An argument list.</span></span> <span data-ttu-id="7654a-1094">To jest Tablica obiektów, zawierającą numer, kolejność i typy parametrów elementu członkowskiego, do wywołania.</span><span class="sxs-lookup"><span data-stu-id="7654a-1094">This is an array of Objects that contains the number, order, and type of the parameters of the member to be invoked.</span></span> <span data-ttu-id="7654a-1095">Jeśli nie ma żadnych parametrów powinna to być wartość null.</span><span class="sxs-lookup"><span data-stu-id="7654a-1095">If there are no parameters this should be null.</span></span></param>
        <param name="modifiers"><span data-ttu-id="7654a-1096">Tablica taką samą długość jak <c>argumentów</c> z elementami, które reprezentuje atrybuty skojarzone z argumentów elementu członkowskiego do wywołania.</span><span class="sxs-lookup"><span data-stu-id="7654a-1096">An array of the same length as <c>args</c> with elements that represent the attributes associated with the arguments of the member to be invoked.</span></span> <span data-ttu-id="7654a-1097">Parametr ma atrybuty skojarzone z nim w metadanych.</span><span class="sxs-lookup"><span data-stu-id="7654a-1097">A parameter has attributes associated with it in the metadata.</span></span> <span data-ttu-id="7654a-1098">Są one używane przez różne usługi współdziałania.</span><span class="sxs-lookup"><span data-stu-id="7654a-1098">They are used by various interoperability services.</span></span> <span data-ttu-id="7654a-1099">Zobacz specyfikacji metadanych, aby uzyskać więcej informacji.</span><span class="sxs-lookup"><span data-stu-id="7654a-1099">See the metadata specs for more details.</span></span></param>
        <param name="culture"><span data-ttu-id="7654a-1100">Wystąpienie <see langword="CultureInfo" /> używane do sterowania koercja typów.</span><span class="sxs-lookup"><span data-stu-id="7654a-1100">An instance of <see langword="CultureInfo" /> used to govern the coercion of types.</span></span> <span data-ttu-id="7654a-1101">Jeśli jest to wartość null, <see langword="CultureInfo" /> służy bieżącego wątku.</span><span class="sxs-lookup"><span data-stu-id="7654a-1101">If this is null, the <see langword="CultureInfo" /> for the current thread is used.</span></span> <span data-ttu-id="7654a-1102">(Należy pamiętać, że jest to konieczne, na przykład konwertowanie ciągu reprezentujący 1000 na wartość podwójną, ponieważ 1000 jest inaczej reprezentowany przez innych kultur).</span><span class="sxs-lookup"><span data-stu-id="7654a-1102">(Note that this is necessary to, for example, convert a String that represents 1000 to a Double value, since 1000 is represented differently by different cultures.)</span></span></param>
        <param name="namedParameters"><span data-ttu-id="7654a-1103">Każdego parametru w <c>namedParameters</c> tablicy pobiera wartość w odpowiadający mu element w <c>argumentów</c> tablicy.</span><span class="sxs-lookup"><span data-stu-id="7654a-1103">Each parameter in the <c>namedParameters</c> array gets the value in the corresponding element in the <c>args</c> array.</span></span> <span data-ttu-id="7654a-1104">Jeśli długość <c>argumentów</c> jest większa niż długość <c>namedParameters</c>, pozostałe wartości argumentu są przekazywane w kolejności.</span><span class="sxs-lookup"><span data-stu-id="7654a-1104">If the length of <c>args</c> is greater than the length of <c>namedParameters</c>, the remaining argument values are passed in order.</span></span></param>
        <summary><span data-ttu-id="7654a-1105">Wywołuje określony element członkowski.</span><span class="sxs-lookup"><span data-stu-id="7654a-1105">Invokes the specified member.</span></span> <span data-ttu-id="7654a-1106">Metodę, która ma zostać wywołana musi być dostępna i udostępnia specyficzny dopasowania z określona lista argumentów, w obszarze ograniczenia określonych atrybutów integratora i wywołanie.</span><span class="sxs-lookup"><span data-stu-id="7654a-1106">The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.</span></span></summary>
        <returns><span data-ttu-id="7654a-1107">Zwraca wartość zwracaną wywołany element członkowski.</span><span class="sxs-lookup"><span data-stu-id="7654a-1107">Returns the return value of the invoked member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1108">Metoda zostanie wywołany, jeśli liczba parametrów w deklaracji metody jest równa liczbie argumentów określona lista argumentów i można przekonwertować typu argumentu przez obiekt wiążący z typem parametru.</span><span class="sxs-lookup"><span data-stu-id="7654a-1108">A method will be invoked if the number of parameters in the method declaration equals the number of arguments in the specified argument list, and the type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="7654a-1109">Obiekt wiążący znajdzie wszystkie metody dopasowania.</span><span class="sxs-lookup"><span data-stu-id="7654a-1109">The binder will find all of the matching methods.</span></span> <span data-ttu-id="7654a-1110">Te metody są dostępne na podstawie typu powiązania żądanego (BindingFlags.InvokeMethod, BindingFlags.GetProperties itd.).</span><span class="sxs-lookup"><span data-stu-id="7654a-1110">These methods are found based on the type of binding requested (BindingFlags.InvokeMethod, BindingFlags.GetProperties, and so on.).</span></span> <span data-ttu-id="7654a-1111">Zbiór metod są filtrowane według nazwy, liczba argumentów i zestaw Modyfikatory wyszukiwania zdefiniowane w obiekt wiążący.</span><span class="sxs-lookup"><span data-stu-id="7654a-1111">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span> <span data-ttu-id="7654a-1112">Po wybraniu metody, zostanie wywołany.</span><span class="sxs-lookup"><span data-stu-id="7654a-1112">After the method is selected, it will be invoked.</span></span> <span data-ttu-id="7654a-1113">Ułatwienia dostępu, zostanie sprawdzony w tym momencie.</span><span class="sxs-lookup"><span data-stu-id="7654a-1113">Accessibility is checked at that point.</span></span> <span data-ttu-id="7654a-1114">Wyszukiwanie można kontrolować, które zestaw metod są przeszukiwane zależności atrybutu dostępności skojarzonego z metodą.</span><span class="sxs-lookup"><span data-stu-id="7654a-1114">The search can control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="7654a-1115">`IBinder.BindToMethod` Metoda jest odpowiedzialna za wybranie wywoływanej metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-1115">The `IBinder.BindToMethod` method is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="7654a-1116">Domyślnego integratora wybierze najbardziej zgodne.</span><span class="sxs-lookup"><span data-stu-id="7654a-1116">The default binder selects the most specific match.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7654a-1117">Ograniczenia dostępu są ignorowane w przypadku całkowicie zaufanego kodu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1117">Access restrictions are ignored for fully trusted code.</span></span> <span data-ttu-id="7654a-1118">Oznacza to konstruktory prywatne, pola, metody i właściwości są dostępne i wywoływane przy użyciu odbicia, jeśli kod jest w pełni zaufany.</span><span class="sxs-lookup"><span data-stu-id="7654a-1118">That is, private constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="7654a-1119">Ta metoda nie jest obecnie obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="7654a-1119">This method is not currently supported.</span></span> <span data-ttu-id="7654a-1120">Można pobrać przy użyciu typu <xref:System.Type.GetType%2A?displayProperty=nameWithType> lub <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> i użyj odbicia dla typu pobrane.</span><span class="sxs-lookup"><span data-stu-id="7654a-1120">You can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7654a-1121">Ta metoda nie jest obecnie obsługiwana dla typów niekompletne.</span><span class="sxs-lookup"><span data-stu-id="7654a-1121">This method is not currently supported for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsArrayImpl">
      <MemberSignature Language="C#" Value="protected override bool IsArrayImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsArrayImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsArrayImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsArrayImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsArrayImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAssignableFrom">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7654a-1122">Określa, czy określony typ można przypisać do tego obiektu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1122">Determines whether a specified type can be assigned to this object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public override bool IsAssignableFrom (System.Reflection.TypeInfo typeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsAssignableFrom(class System.Reflection.TypeInfo typeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Reflection.TypeInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsAssignableFrom(System::Reflection::TypeInfo ^ typeInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeInfo" Type="System.Reflection.TypeInfo" />
      </Parameters>
      <Docs>
        <param name="typeInfo"><span data-ttu-id="7654a-1123">Obiekt do przetestowania.</span><span class="sxs-lookup"><span data-stu-id="7654a-1123">The object to test.</span></span></param>
        <summary><span data-ttu-id="7654a-1124">Pobiera wartość wskazującą, czy określonej <see cref="T:System.Reflection.TypeInfo" /> obiektu można przypisać do tego obiektu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1124">Gets a value that indicates whether a specified <see cref="T:System.Reflection.TypeInfo" /> object can be assigned to this object.</span></span></summary>
        <returns>
          <span data-ttu-id="7654a-1125"><see langword="true" /> Jeśli <paramref name="typeInfo" /> mogą być przypisane do tego obiektu; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1125"><see langword="true" /> if <paramref name="typeInfo" /> can be assigned to this object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public override bool IsAssignableFrom (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsAssignableFrom(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsAssignableFrom (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsAssignableFrom(Type ^ c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="7654a-1126">Obiekt do przetestowania.</span><span class="sxs-lookup"><span data-stu-id="7654a-1126">The object to test.</span></span></param>
        <summary><span data-ttu-id="7654a-1127">Pobiera wartość wskazującą, czy określonej <see cref="T:System.Type" /> można przypisać do tego obiektu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1127">Gets a value that indicates whether a specified <see cref="T:System.Type" /> can be assigned to this object.</span></span></summary>
        <returns>
          <span data-ttu-id="7654a-1128"><see langword="true" /> Jeśli <paramref name="c" /> parametr i typ bieżącego reprezentują ten sam typ, lub jeśli typ bieżącego znajduje się w hierarchii dziedziczenia <paramref name="c" />, lub jeśli typ bieżącego jest interfejsem który <paramref name="c" /> obsługuje.</span><span class="sxs-lookup"><span data-stu-id="7654a-1128"><see langword="true" /> if the <paramref name="c" /> parameter and the current type represent the same type, or if the current type is in the inheritance hierarchy of <paramref name="c" />, or if the current type is an interface that <paramref name="c" /> supports.</span></span> <span data-ttu-id="7654a-1129"><see langword="false" /> Jeśli żaden z tych warunków nie jest prawidłowy lub <paramref name="c" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1129"><see langword="false" /> if none of these conditions are valid, or if <paramref name="c" /> is <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsByRefImpl">
      <MemberSignature Language="C#" Value="protected override bool IsByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsByRefImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsByRefLike">
      <MemberSignature Language="C#" Value="public override bool IsByRefLike { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRefLike" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsByRefLike" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsByRefLike As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsByRefLike { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCOMObjectImpl">
      <MemberSignature Language="C#" Value="protected override bool IsCOMObjectImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsCOMObjectImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsCOMObjectImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsCOMObjectImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsCOMObjectImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstructedGenericType">
      <MemberSignature Language="C#" Value="public override bool IsConstructedGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructedGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsConstructedGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsConstructedGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructedGenericType { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7654a-1130">Pobiera wartość wskazującą, czy ten obiekt reprezentuje skonstruowanego typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1130">Gets a value that indicates whether this object represents a constructed generic type.</span></span></summary>
        <value>
          <span data-ttu-id="7654a-1131"><see langword="true" /> Jeśli ten obiekt reprezentuje skonstruowanego typu ogólnego; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1131"><see langword="true" /> if this object represents a constructed generic type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCreated">
      <MemberSignature Language="C#" Value="public bool IsCreated ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsCreated() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsCreated" />
      <MemberSignature Language="VB.NET" Value="Public Function IsCreated () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsCreated();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7654a-1132">Zwraca wartość wskazującą, czy bieżący typ dynamicznej została utworzona.</span><span class="sxs-lookup"><span data-stu-id="7654a-1132">Returns a value that indicates whether the current dynamic type has been created.</span></span></summary>
        <returns>
          <span data-ttu-id="7654a-1133"><see langword="true" /> Jeśli <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> metoda została wywołana; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1133"><see langword="true" /> if the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method has been called; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1134">Po <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> wywołano metodę typu reprezentowanego przez <xref:System.Reflection.Emit.TypeBuilder> obiektu została ukończona.</span><span class="sxs-lookup"><span data-stu-id="7654a-1134">After the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called, the type represented by the <xref:System.Reflection.Emit.TypeBuilder> object is complete.</span></span> <span data-ttu-id="7654a-1135">Wyjątki są zgłaszane na dalsze próby dodawanie członków lub zmień typ innych parametrów.</span><span class="sxs-lookup"><span data-stu-id="7654a-1135">Exceptions are thrown on any further attempts to add members or change other characteristics of the type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="7654a-1136">Typ atrybutu do wyszukiwania.</span><span class="sxs-lookup"><span data-stu-id="7654a-1136">The type of attribute to search for.</span></span> <span data-ttu-id="7654a-1137">Zwracane są tylko atrybuty, które są przypisane do tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1137">Only attributes that are assignable to this type are returned.</span></span></param>
        <param name="inherit"><span data-ttu-id="7654a-1138">Określa, czy przeszukać łańcuch dziedziczenia tego elementu członkowskiego w celu znalezienia atrybutów.</span><span class="sxs-lookup"><span data-stu-id="7654a-1138">Specifies whether to search this member's inheritance chain to find the attributes.</span></span></param>
        <summary><span data-ttu-id="7654a-1139">Określa, czy atrybut niestandardowy jest stosowany do bieżącego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1139">Determines whether a custom attribute is applied to the current type.</span></span></summary>
        <returns>
          <span data-ttu-id="7654a-1140"><see langword="true" /> Jeśli jeden lub więcej wystąpień <paramref name="attributeType" />, lub typ pochodzący od atrybutu <paramref name="attributeType" />, jest zdefiniowana dla tego typu; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1140"><see langword="true" /> if one or more instances of <paramref name="attributeType" />, or an attribute derived from <paramref name="attributeType" />, is defined on this type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1141">Ta metoda nie jest obsługiwany dla parametrów niekompletnego typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1141">This method is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="7654a-1142">Pobrać za pomocą typu <xref:System.Type.GetType%2A?displayProperty=nameWithType> lub <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> i użyj odbicia dla typu pobrane.</span><span class="sxs-lookup"><span data-stu-id="7654a-1142">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7654a-1143">Ta metoda nie jest obecnie obsługiwana dla typów niekompletne.</span><span class="sxs-lookup"><span data-stu-id="7654a-1143">This method is not currently supported for incomplete types.</span></span> <span data-ttu-id="7654a-1144">Pobrać za pomocą typu <see cref="M:System.Type.GetType" /> i Wywołaj <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> w zwróconym <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1144">Retrieve the type using <see cref="M:System.Type.GetType" /> and call <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> on the returned <see cref="T:System.Type" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7654a-1145"><paramref name="attributeType" /> nie jest zdefiniowany.</span><span class="sxs-lookup"><span data-stu-id="7654a-1145"><paramref name="attributeType" /> is not defined.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-1146"><paramref name="attributeType" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1146"><paramref name="attributeType" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public override bool IsEnum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEnum { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericParameter">
      <MemberSignature Language="C#" Value="public override bool IsGenericParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsGenericParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericParameter { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7654a-1147">Pobiera wartość wskazującą, czy bieżący typ jest parametr typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1147">Gets a value indicating whether the current type is a generic type parameter.</span></span></summary>
        <value>
          <span data-ttu-id="7654a-1148"><see langword="true" /> Jeśli bieżący <see cref="T:System.Reflection.Emit.TypeBuilder" /> obiekt reprezentuje parametr typu ogólnego; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1148"><see langword="true" /> if the current <see cref="T:System.Reflection.Emit.TypeBuilder" /> object represents a generic type parameter; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="7654a-1149">Gdy emitowanie kodu, parametru typu ogólnego jest reprezentowana przez <xref:System.Reflection.Emit.GenericTypeParameterBuilder> obiektu, a nie przez <xref:System.Reflection.Emit.TypeBuilder> obiektu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1149">When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericType">
      <MemberSignature Language="C#" Value="public override bool IsGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericType { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7654a-1150">Pobiera wartość wskazującą, czy bieżący typ jest typem ogólnym.</span><span class="sxs-lookup"><span data-stu-id="7654a-1150">Gets a value indicating whether the current type is a generic type.</span></span></summary>
        <value>
          <span data-ttu-id="7654a-1151"><see langword="true" /> Jeśli typ reprezentowany przez bieżący <see cref="T:System.Reflection.Emit.TypeBuilder" /> obiekt jest ogólny; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1151"><see langword="true" /> if the type represented by the current <see cref="T:System.Reflection.Emit.TypeBuilder" /> object is generic; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1152">A <xref:System.Reflection.Emit.TypeBuilder> obiekt reprezentuje definicji typu ogólnego, jeśli <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> użyto metody umożliwiają parametry typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1152">A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters.</span></span> <span data-ttu-id="7654a-1153">Wystąpienie <xref:System.Reflection.Emit.TypeBuilder> klasy, która jest ogólna zawsze jest definicją typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1153">An instance of the <xref:System.Reflection.Emit.TypeBuilder> class that is generic is always a generic type definition.</span></span>  
  
 <span data-ttu-id="7654a-1154">Aby uzyskać więcej informacji na typach ogólnych odbicia i listę niezmiennej warunki terminów używanych w ogólnym odbicia, zobacz <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-1154">For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsGenericType" />
        <altmember cref="M:System.Type.GetGenericTypeDefinition" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])" />
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public override bool IsGenericTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeDefinition { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7654a-1155">Pobiera wartość wskazującą czy bieżące <see cref="T:System.Reflection.Emit.TypeBuilder" /> reprezentuje definicji typu ogólnego, z którego można skonstruować innych typów ogólnych.</span><span class="sxs-lookup"><span data-stu-id="7654a-1155">Gets a value indicating whether the current <see cref="T:System.Reflection.Emit.TypeBuilder" /> represents a generic type definition from which other generic types can be constructed.</span></span></summary>
        <value>
          <span data-ttu-id="7654a-1156"><see langword="true" /> Jeśli <see cref="T:System.Reflection.Emit.TypeBuilder" /> obiekt reprezentuje definicji typu ogólnego; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1156"><see langword="true" /> if this <see cref="T:System.Reflection.Emit.TypeBuilder" /> object represents a generic type definition; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1157">A <xref:System.Reflection.Emit.TypeBuilder> obiekt reprezentuje definicji typu ogólnego, jeśli <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> użyto metody umożliwiają parametry typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1157">A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters.</span></span> <span data-ttu-id="7654a-1158">Wystąpienie <xref:System.Reflection.Emit.TypeBuilder> klasy, która jest ogólna zawsze jest definicją typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1158">An instance of the <xref:System.Reflection.Emit.TypeBuilder> class that is generic is always a generic type definition.</span></span>  
  
 <span data-ttu-id="7654a-1159">A <xref:System.Reflection.Emit.TypeBuilder> może służyć do tworzenia definicji typu ogólnego, ale nie utworzone typy ogólne.</span><span class="sxs-lookup"><span data-stu-id="7654a-1159">A <xref:System.Reflection.Emit.TypeBuilder> can be used to build generic type definitions, but not constructed generic types.</span></span> <span data-ttu-id="7654a-1160">Aby uzyskać skonstruowanego typu ogólnego, należy wywołać <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> metoda <xref:System.Reflection.Emit.TypeBuilder> reprezentujący definicji typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1160">To get a constructed generic type, call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on a <xref:System.Reflection.Emit.TypeBuilder> that represents a generic type definition.</span></span>  
  
 <span data-ttu-id="7654a-1161">Aby uzyskać więcej informacji na typach ogólnych odbicia i listę niezmiennej warunki terminów używanych w ogólnym odbicia, zobacz <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> właściwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-1161">For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])" />
        <altmember cref="P:System.Type.IsGenericType" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
      </Docs>
    </Member>
    <Member MemberName="IsPointerImpl">
      <MemberSignature Language="C#" Value="protected override bool IsPointerImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsPointerImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsPointerImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsPointerImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsPointerImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrimitiveImpl">
      <MemberSignature Language="C#" Value="protected override bool IsPrimitiveImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsPrimitiveImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsPrimitiveImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsPrimitiveImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsPrimitiveImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7654a-1162">Pobiera wartość wskazującą, czy bieżący typ jest krytyczny dla zabezpieczeń lub bezpieczny krytyczny dla zabezpieczeń i w związku z tym mogą wykonywać operacje krytyczne.</span><span class="sxs-lookup"><span data-stu-id="7654a-1162">Gets a value that indicates whether the current type is security-critical or security-safe-critical, and therefore can perform critical operations.</span></span></summary>
        <value>
          <span data-ttu-id="7654a-1163"><see langword="true" /> w przypadku bieżącego typu zabezpieczeń krytyczne lub zabezpieczeń — bezpieczne krytyczne; <see langword="false" /> Jeśli jest niewidoczne.</span><span class="sxs-lookup"><span data-stu-id="7654a-1163"><see langword="true" /> if the current type is security-critical or security-safe-critical; <see langword="false" /> if it is transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1164"><xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, I <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> właściwości raportu poziom przezroczystości typu określone przez środowisko uruchomieniowe języka wspólnego (CLR).</span><span class="sxs-lookup"><span data-stu-id="7654a-1164">The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="7654a-1165">W poniższej tabeli przedstawiono kombinacje tych właściwości:</span><span class="sxs-lookup"><span data-stu-id="7654a-1165">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="7654a-1166">Poziom zabezpieczeń</span><span class="sxs-lookup"><span data-stu-id="7654a-1166">Security level</span></span>|<span data-ttu-id="7654a-1167">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="7654a-1167">IsSecurityCritical</span></span>|<span data-ttu-id="7654a-1168">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="7654a-1168">IsSecuritySafeCritical</span></span>|<span data-ttu-id="7654a-1169">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="7654a-1169">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="7654a-1170">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="7654a-1170">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="7654a-1171">Bezpieczne krytyczne</span><span class="sxs-lookup"><span data-stu-id="7654a-1171">Safe-critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="7654a-1172">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="7654a-1172">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="7654a-1173">Przy użyciu tych właściwości jest znacznie prostsze niż badanie adnotacje zabezpieczeń zestawu i jego typów, sprawdzania na bieżącym poziomie zaufania i próby zduplikowane reguły środowiska uruchomieniowego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1173">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="7654a-1174">Środowisko uruchomieniowe rozpoczyna oceny poziomów przezroczystości w zestawie.</span><span class="sxs-lookup"><span data-stu-id="7654a-1174">The runtime begins evaluating transparency levels at the assembly.</span></span> <span data-ttu-id="7654a-1175">Na przykład jeśli zestaw dynamiczny jest krytyczny dla zabezpieczeń, adnotacje typów są ignorowane, a wszystkie typy są krytyczne dla zabezpieczeń.</span><span class="sxs-lookup"><span data-stu-id="7654a-1175">For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.</span></span>  
  
 <span data-ttu-id="7654a-1176">Domyślnie zestawie dynamicznym dziedziczy przezroczystość zestawu, który emituje go.</span><span class="sxs-lookup"><span data-stu-id="7654a-1176">By default, a dynamic assembly inherits the transparency of the assembly that emits it.</span></span> <span data-ttu-id="7654a-1177">Można zastąpić to ustawienie domyślne przy użyciu <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, lub <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType> przeciążenie metody i określanie atrybutów zabezpieczeń.</span><span class="sxs-lookup"><span data-stu-id="7654a-1177">You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType> method overload and specifying security attributes.</span></span> <span data-ttu-id="7654a-1178">Nie można podnieść poziomów zabezpieczeń dzięki temu; oznacza to, że kod o przezroczystym nie można wyemitować kodu krytyczny dla zabezpieczeń lub bezpieczny krytyczny dla zabezpieczeń.</span><span class="sxs-lookup"><span data-stu-id="7654a-1178">You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code.</span></span> <span data-ttu-id="7654a-1179">Atrybuty należy określić podczas tworzenia zestawu dynamicznego lub one uwzględnione dopiero zestawu został zapisany na dysku i ponownie załadowany.</span><span class="sxs-lookup"><span data-stu-id="7654a-1179">Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7654a-1180">Domyślne dziedziczenia jest ograniczona do oceny środowiska uruchomieniowego przezroczystości.</span><span class="sxs-lookup"><span data-stu-id="7654a-1180">Default inheritance is limited to the runtime's evaluation of transparency.</span></span> <span data-ttu-id="7654a-1181">Atrybuty nie są stosowane do zestawu dynamicznego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1181">No attributes are applied to the dynamic assembly.</span></span> <span data-ttu-id="7654a-1182">Jeśli chcesz dodać atrybuty zabezpieczeń, należy najpierw zastosować je samodzielnie.</span><span class="sxs-lookup"><span data-stu-id="7654a-1182">If you want to add security attributes, you must apply them yourself.</span></span>  
  
 <span data-ttu-id="7654a-1183">Aby uzyskać więcej informacji na temat odbicia Emituj i przejrzystości, zobacz [problemy z zabezpieczeniami w emisji odbicia](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="7654a-1183">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="7654a-1184">Informacje o przejrzystości, zobacz [zmiany zabezpieczeń](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="7654a-1184">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7654a-1185">Bieżącego typu dynamicznego nie został utworzony przez wywołanie metody <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-1185">The current dynamic type has not been created by calling the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method.</span></span></exception>
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical" />
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7654a-1186">Pobiera wartość wskazującą, czy bieżący typ jest bezpieczny krytyczny dla zabezpieczeń; oznacza to, czy go mogą wykonywać operacje krytyczne i można uzyskać, sprawdzając kod przezroczysty.</span><span class="sxs-lookup"><span data-stu-id="7654a-1186">Gets a value that indicates whether the current type is security-safe-critical; that is, whether it can perform critical operations and can be accessed by transparent code.</span></span></summary>
        <value>
          <span data-ttu-id="7654a-1187"><see langword="true" /> w przypadku bieżącego typu zabezpieczeń — bezpieczne krytyczne; <see langword="false" /> przypadku zabezpieczeń krytyczny ani przezroczysty.</span><span class="sxs-lookup"><span data-stu-id="7654a-1187"><see langword="true" /> if the current type is security-safe-critical; <see langword="false" /> if it is security-critical or transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1188"><xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, I <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> właściwości raportu poziom przezroczystości typu określone przez środowisko uruchomieniowe języka wspólnego (CLR).</span><span class="sxs-lookup"><span data-stu-id="7654a-1188">The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="7654a-1189">W poniższej tabeli przedstawiono kombinacje tych właściwości:</span><span class="sxs-lookup"><span data-stu-id="7654a-1189">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="7654a-1190">Poziom zabezpieczeń</span><span class="sxs-lookup"><span data-stu-id="7654a-1190">Security level</span></span>|<span data-ttu-id="7654a-1191">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="7654a-1191">IsSecurityCritical</span></span>|<span data-ttu-id="7654a-1192">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="7654a-1192">IsSecuritySafeCritical</span></span>|<span data-ttu-id="7654a-1193">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="7654a-1193">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="7654a-1194">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="7654a-1194">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="7654a-1195">Bezpieczne krytyczne</span><span class="sxs-lookup"><span data-stu-id="7654a-1195">Safe-critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="7654a-1196">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="7654a-1196">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="7654a-1197">Przy użyciu tych właściwości jest znacznie prostsze niż badanie adnotacje zabezpieczeń zestawu i jego typów, sprawdzania na bieżącym poziomie zaufania i próby zduplikowane reguły środowiska uruchomieniowego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1197">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="7654a-1198">Środowisko uruchomieniowe rozpoczyna oceny poziomów przezroczystości w zestawie.</span><span class="sxs-lookup"><span data-stu-id="7654a-1198">The runtime begins evaluating transparency levels at the assembly.</span></span> <span data-ttu-id="7654a-1199">Na przykład jeśli zestaw dynamiczny jest krytyczny dla zabezpieczeń, adnotacje typów są ignorowane, a wszystkie typy są krytyczne dla zabezpieczeń.</span><span class="sxs-lookup"><span data-stu-id="7654a-1199">For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.</span></span>  
  
 <span data-ttu-id="7654a-1200">Domyślnie zestawie dynamicznym dziedziczy przezroczystość zestawu, który emituje go.</span><span class="sxs-lookup"><span data-stu-id="7654a-1200">By default, a dynamic assembly inherits the transparency of the assembly that emits it.</span></span> <span data-ttu-id="7654a-1201">Można zastąpić to ustawienie domyślne przy użyciu <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, lub <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType> przeciążenie metody i określanie atrybutów zabezpieczeń.</span><span class="sxs-lookup"><span data-stu-id="7654a-1201">You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType> method overload and specifying security attributes.</span></span> <span data-ttu-id="7654a-1202">Nie można podnieść poziomów zabezpieczeń dzięki temu; oznacza to, że kod o przezroczystym nie można wyemitować kodu krytyczny dla zabezpieczeń lub bezpieczny krytyczny dla zabezpieczeń.</span><span class="sxs-lookup"><span data-stu-id="7654a-1202">You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code.</span></span> <span data-ttu-id="7654a-1203">Atrybuty należy określić podczas tworzenia zestawu dynamicznego lub one uwzględnione dopiero zestawu został zapisany na dysku i ponownie załadowany.</span><span class="sxs-lookup"><span data-stu-id="7654a-1203">Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7654a-1204">Domyślne dziedziczenia jest ograniczona do oceny środowiska uruchomieniowego przezroczystości.</span><span class="sxs-lookup"><span data-stu-id="7654a-1204">Default inheritance is limited to the runtime's evaluation of transparency.</span></span> <span data-ttu-id="7654a-1205">Atrybuty nie są stosowane do zestawu dynamicznego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1205">No attributes are applied to the dynamic assembly.</span></span> <span data-ttu-id="7654a-1206">Jeśli chcesz dodać atrybuty zabezpieczeń, należy najpierw zastosować je samodzielnie.</span><span class="sxs-lookup"><span data-stu-id="7654a-1206">If you want to add security attributes, you must apply them yourself.</span></span>  
  
 <span data-ttu-id="7654a-1207">Aby uzyskać więcej informacji na temat odbicia Emituj i przejrzystości, zobacz [problemy z zabezpieczeniami w emisji odbicia](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="7654a-1207">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="7654a-1208">Informacje o przejrzystości, zobacz [zmiany zabezpieczeń](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="7654a-1208">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7654a-1209">Bieżącego typu dynamicznego nie został utworzony przez wywołanie metody <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-1209">The current dynamic type has not been created by calling the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method.</span></span></exception>
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public override bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7654a-1210">Pobiera wartość wskazującą, czy bieżący typ jest niewidoczny i dlatego nie można wykonać operacji krytyczne.</span><span class="sxs-lookup"><span data-stu-id="7654a-1210">Gets a value that indicates whether the current type is transparent, and therefore cannot perform critical operations.</span></span></summary>
        <value>
          <span data-ttu-id="7654a-1211"><see langword="true" /> Jeśli typ jest przezroczystym poziomie bezpieczeństwa; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1211"><see langword="true" /> if the type is security-transparent; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1212"><xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, I <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> właściwości raportu poziom przezroczystości typu określone przez środowisko uruchomieniowe języka wspólnego (CLR).</span><span class="sxs-lookup"><span data-stu-id="7654a-1212">The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="7654a-1213">W poniższej tabeli przedstawiono kombinacje tych właściwości:</span><span class="sxs-lookup"><span data-stu-id="7654a-1213">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="7654a-1214">Poziom zabezpieczeń</span><span class="sxs-lookup"><span data-stu-id="7654a-1214">Security level</span></span>|<span data-ttu-id="7654a-1215">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="7654a-1215">IsSecurityCritical</span></span>|<span data-ttu-id="7654a-1216">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="7654a-1216">IsSecuritySafeCritical</span></span>|<span data-ttu-id="7654a-1217">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="7654a-1217">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="7654a-1218">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="7654a-1218">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="7654a-1219">Bezpieczne krytyczne</span><span class="sxs-lookup"><span data-stu-id="7654a-1219">Safe-critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="7654a-1220">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="7654a-1220">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="7654a-1221">Przy użyciu tych właściwości jest znacznie prostsze niż badanie adnotacje zabezpieczeń zestawu i jego typów, sprawdzania na bieżącym poziomie zaufania i próby zduplikowane reguły środowiska uruchomieniowego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1221">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="7654a-1222">Środowisko uruchomieniowe rozpoczyna oceny poziomów przezroczystości w zestawie.</span><span class="sxs-lookup"><span data-stu-id="7654a-1222">The runtime begins evaluating transparency levels at the assembly.</span></span> <span data-ttu-id="7654a-1223">Na przykład jeśli zestaw dynamiczny jest krytyczny dla zabezpieczeń, adnotacje typów są ignorowane, a wszystkie typy są krytyczne dla zabezpieczeń.</span><span class="sxs-lookup"><span data-stu-id="7654a-1223">For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.</span></span>  
  
 <span data-ttu-id="7654a-1224">Domyślnie zestawie dynamicznym dziedziczy przezroczystość zestawu, który emituje go.</span><span class="sxs-lookup"><span data-stu-id="7654a-1224">By default, a dynamic assembly inherits the transparency of the assembly that emits it.</span></span> <span data-ttu-id="7654a-1225">Można zastąpić to ustawienie domyślne przy użyciu <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, lub <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType> przeciążenie metody i określanie atrybutów zabezpieczeń.</span><span class="sxs-lookup"><span data-stu-id="7654a-1225">You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType> method overload and specifying security attributes.</span></span> <span data-ttu-id="7654a-1226">Nie można podnieść poziomów zabezpieczeń dzięki temu; oznacza to, że kod o przezroczystym nie można wyemitować kodu krytyczny dla zabezpieczeń lub bezpieczny krytyczny dla zabezpieczeń.</span><span class="sxs-lookup"><span data-stu-id="7654a-1226">You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code.</span></span> <span data-ttu-id="7654a-1227">Atrybuty należy określić podczas tworzenia zestawu dynamicznego lub one uwzględnione dopiero zestawu został zapisany na dysku i ponownie załadowany.</span><span class="sxs-lookup"><span data-stu-id="7654a-1227">Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7654a-1228">Domyślne dziedziczenia jest ograniczona do oceny środowiska uruchomieniowego przezroczystości.</span><span class="sxs-lookup"><span data-stu-id="7654a-1228">Default inheritance is limited to the runtime's evaluation of transparency.</span></span> <span data-ttu-id="7654a-1229">Atrybuty nie są stosowane do zestawu dynamicznego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1229">No attributes are applied to the dynamic assembly.</span></span> <span data-ttu-id="7654a-1230">Jeśli chcesz dodać atrybuty zabezpieczeń, należy najpierw zastosować je samodzielnie.</span><span class="sxs-lookup"><span data-stu-id="7654a-1230">If you want to add security attributes, you must apply them yourself.</span></span>  
  
 <span data-ttu-id="7654a-1231">Aby uzyskać więcej informacji na temat odbicia Emituj i przejrzystości, zobacz [problemy z zabezpieczeniami w emisji odbicia](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="7654a-1231">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="7654a-1232">Informacje o przejrzystości, zobacz [zmiany zabezpieczeń](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="7654a-1232">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7654a-1233">Bieżącego typu dynamicznego nie został utworzony przez wywołanie metody <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-1233">The current dynamic type has not been created by calling the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method.</span></span></exception>
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical" />
      </Docs>
    </Member>
    <Member MemberName="IsSerializable">
      <MemberSignature Language="C#" Value="public override bool IsSerializable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSerializable" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsSerializable" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSerializable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSerializable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubclassOf">
      <MemberSignature Language="C#" Value="public override bool IsSubclassOf (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsSubclassOf(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsSubclassOf(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsSubclassOf (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsSubclassOf(Type ^ c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="7654a-1234">A <see cref="T:System.Type" /> który ma być sprawdzony.</span><span class="sxs-lookup"><span data-stu-id="7654a-1234">A <see cref="T:System.Type" /> that is to be checked.</span></span></param>
        <summary><span data-ttu-id="7654a-1235">Określa, czy ten typ pochodzi z określonego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1235">Determines whether this type is derived from a specified type.</span></span></summary>
        <returns><span data-ttu-id="7654a-1236">Tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1236">Read-only.</span></span> <span data-ttu-id="7654a-1237">Zwraca <see langword="true" /> Jeśli ten typ jest taki sam jak typ <paramref name="c" />, lub jest podtypem typu <paramref name="c" />; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1237">Returns <see langword="true" /> if this type is the same as the type <paramref name="c" />, or is a subtype of type <paramref name="c" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSZArray">
      <MemberSignature Language="C#" Value="public override bool IsSZArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSZArray" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsSZArray" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSZArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSZArray { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTypeDefinition">
      <MemberSignature Language="C#" Value="public override bool IsTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsTypeDefinition { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValueTypeImpl">
      <MemberSignature Language="C#" Value="protected override bool IsValueTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsValueTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsValueTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsValueTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsValueTypeImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVariableBoundArray">
      <MemberSignature Language="C#" Value="public override bool IsVariableBoundArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVariableBoundArray" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsVariableBoundArray" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsVariableBoundArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsVariableBoundArray { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeArrayType">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7654a-1238">Zwraca <see cref="T:System.Type" /> obiekt, który reprezentuje tablicę bieżącego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1238">Returns a <see cref="T:System.Type" /> object that represents an array of the current type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public override Type MakeArrayType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakeArrayType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.MakeArrayType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeArrayType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakeArrayType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7654a-1239">Zwraca <see cref="T:System.Type" /> obiekt, który reprezentuje tablicą jednowymiarową bieżącego typu z dolną granicą zero.</span><span class="sxs-lookup"><span data-stu-id="7654a-1239">Returns a <see cref="T:System.Type" /> object that represents a one-dimensional array of the current type, with a lower bound of zero.</span></span></summary>
        <returns><span data-ttu-id="7654a-1240">A <see cref="T:System.Type" /> obiekt reprezentujący typ Jednowymiarowa tablica, której typ elementów jest bieżący typ z dolną granicą zero.</span><span class="sxs-lookup"><span data-stu-id="7654a-1240">A <see cref="T:System.Type" /> object representing a one-dimensional array type whose element type is the current type, with a lower bound of zero.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1241"><xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> Metody umożliwia generowanie typem tablicy w przypadku każdego typu elementu możliwe, w tym typów ogólnych.</span><span class="sxs-lookup"><span data-stu-id="7654a-1241">The <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> method provides a way to generate an array type with any possible element type, including generic types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7654a-1242">Poniższy przykład kodu tworzy module dynamicznym abstrakcyjna o nazwie `Sample`, a metoda abstrakcyjna o nazwie `TestMethod`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1242">The following code example creates a dynamic module, an abstract type named `Sample`, and an abstract method named `TestMethod`.</span></span> <span data-ttu-id="7654a-1243">`TestMethod` przyjmuje `ref` parametr (`ByRef` w języku Visual Basic) typu `Sample`, wskaźnik do typu `Sample`, a Tablica typu `Sample`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1243">`TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `Sample`, a pointer to type `Sample`, and an array of type `Sample`.</span></span> <span data-ttu-id="7654a-1244">Zwraca jest tablicą dwuwymiarową typu `Sample`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1244">It returns a two-dimensional array of type `Sample`.</span></span> <span data-ttu-id="7654a-1245">Przykładowy kod zapisuje module dynamicznym na dysku, więc można sprawdzić za pomocą [Ildasm.exe (dezasembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span><span class="sxs-lookup"><span data-stu-id="7654a-1245">The code example saves the dynamic module to disk, so you can examine it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span></span>  
  
 [!code-csharp[MakeXxxTypeBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxTypeBuilder/CS/source.cs#1)]
 [!code-vb[MakeXxxTypeBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxTypeBuilder/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeByRefType" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public override Type MakeArrayType (int rank);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakeArrayType(int32 rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeArrayType (rank As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakeArrayType(int rank);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rank"><span data-ttu-id="7654a-1246">Liczba wymiarów tablicy.</span><span class="sxs-lookup"><span data-stu-id="7654a-1246">The number of dimensions for the array.</span></span></param>
        <summary><span data-ttu-id="7654a-1247">Zwraca <see cref="T:System.Type" /> obiekt, który reprezentuje bieżącego typu o określoną liczbę wymiarów tablicy.</span><span class="sxs-lookup"><span data-stu-id="7654a-1247">Returns a <see cref="T:System.Type" /> object that represents an array of the current type, with the specified number of dimensions.</span></span></summary>
        <returns><span data-ttu-id="7654a-1248">A <see cref="T:System.Type" /> obiekt, który reprezentuje tablicą jednowymiarową bieżącego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1248">A <see cref="T:System.Type" /> object that represents a one-dimensional array of the current type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1249"><xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> Metody umożliwia generowanie typem tablicy w przypadku każdego typu elementu możliwe, w tym typów ogólnych.</span><span class="sxs-lookup"><span data-stu-id="7654a-1249">The <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> method provides a way to generate an array type with any possible element type, including generic types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7654a-1250">Poniższy przykład kodu tworzy module dynamicznym abstrakcyjna o nazwie `Sample`, a metoda abstrakcyjna o nazwie `TestMethod`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1250">The following code example creates a dynamic module, an abstract type named `Sample`, and an abstract method named `TestMethod`.</span></span> <span data-ttu-id="7654a-1251">`TestMethod` przyjmuje `ref` parametr (`ByRef` w języku Visual Basic) typu `Sample`, wskaźnik do typu `Sample`, a Tablica typu `Sample`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1251">`TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `Sample`, a pointer to type `Sample`, and an array of type `Sample`.</span></span> <span data-ttu-id="7654a-1252">Zwraca jest tablicą dwuwymiarową typu `Sample`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1252">It returns a two-dimensional array of type `Sample`.</span></span> <span data-ttu-id="7654a-1253">Przykładowy kod zapisuje module dynamicznym na dysku, więc można sprawdzić za pomocą [Ildasm.exe (dezasembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span><span class="sxs-lookup"><span data-stu-id="7654a-1253">The code example saves the dynamic module to disk, so you can examine it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span></span>  
  
 [!code-csharp[MakeXxxTypeBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxTypeBuilder/CS/source.cs#1)]
 [!code-vb[MakeXxxTypeBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxTypeBuilder/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="7654a-1254"><paramref name="rank" /> nie jest wymiarem tablicy prawidłowe.</span><span class="sxs-lookup"><span data-stu-id="7654a-1254"><paramref name="rank" /> is not a valid array dimension.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeByRefType" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeByRefType">
      <MemberSignature Language="C#" Value="public override Type MakeByRefType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakeByRefType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.MakeByRefType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeByRefType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakeByRefType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7654a-1255">Zwraca <see cref="T:System.Type" /> obiekt, który reprezentuje bieżącego typu, gdy dane są przekazywane jako <see langword="ref" /> parametr (<see langword="ByRef" /> w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="7654a-1255">Returns a <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> in Visual Basic).</span></span></summary>
        <returns><span data-ttu-id="7654a-1256">A <see cref="T:System.Type" /> obiekt, który reprezentuje bieżącego typu, gdy dane są przekazywane jako <see langword="ref" /> parametr (<see langword="ByRef" /> w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="7654a-1256">A <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> in Visual Basic).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1257"><xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A> Metody umożliwia generowanie `ref` typów (`ByRef` w języku Visual Basic) dla parametru listy.</span><span class="sxs-lookup"><span data-stu-id="7654a-1257">The <xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A> method provides a way to generate `ref` types (`ByRef` in Visual Basic) for parameter lists.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7654a-1258">Używana jest składnia języka pośredniego (MSIL) firmy Microsoft, jeśli bieżący <xref:System.Reflection.Emit.TypeBuilder> reprezentuje `MyType`, a następnie będzie typ zwracany przez tę metodę `MyType&`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1258">Using Microsoft intermediate language (MSIL) syntax, if the current <xref:System.Reflection.Emit.TypeBuilder> represents `MyType`, then the type returned by this method would be `MyType&`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7654a-1259">Poniższy przykład kodu tworzy module dynamicznym abstrakcyjna o nazwie `Sample`, a metoda abstrakcyjna o nazwie `TestMethod`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1259">The following code example creates a dynamic module, an abstract type named `Sample`, and an abstract method named `TestMethod`.</span></span> <span data-ttu-id="7654a-1260">`TestMethod` przyjmuje `ref` parametr (`ByRef` w języku Visual Basic) typu `Sample`, wskaźnik do typu `Sample`, a Tablica typu `Sample`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1260">`TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `Sample`, a pointer to type `Sample`, and an array of type `Sample`.</span></span> <span data-ttu-id="7654a-1261">Zwraca jest tablicą dwuwymiarową typu `Sample`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1261">It returns a two-dimensional array of type `Sample`.</span></span> <span data-ttu-id="7654a-1262">Przykładowy kod zapisuje module dynamicznym na dysku, więc można sprawdzić za pomocą [Ildasm.exe (dezasembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span><span class="sxs-lookup"><span data-stu-id="7654a-1262">The code example saves the dynamic module to disk, so you can examine it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span></span>  
  
 [!code-csharp[MakeXxxTypeBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxTypeBuilder/CS/source.cs#1)]
 [!code-vb[MakeXxxTypeBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxTypeBuilder/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Reflection.Emit.TypeBuilder.MakeArrayType" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeGenericType">
      <MemberSignature Language="C#" Value="public override Type MakeGenericType (params Type[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakeGenericType(class System.Type[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeGenericType (ParamArray typeArguments As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakeGenericType(... cli::array &lt;Type ^&gt; ^ typeArguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArguments" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArguments"><span data-ttu-id="7654a-1263">Tablica typów mają być zastępowane dla parametrów typu w bieżącej definicji typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1263">An array of types to be substituted for the type parameters of the current generic type definition.</span></span></param>
        <summary><span data-ttu-id="7654a-1264">Zastępuje elementy tablicą typów parametrów typu bieżącej definicji typu ogólnego i zwraca wynikowy typ skonstruowane.</span><span class="sxs-lookup"><span data-stu-id="7654a-1264">Substitutes the elements of an array of types for the type parameters of the current generic type definition, and returns the resulting constructed type.</span></span></summary>
        <returns><span data-ttu-id="7654a-1265">A <see cref="T:System.Type" /> reprezentujący utworzony typ sformułowany, zastępując elementy <paramref name="typeArguments" /> parametrów typu bieżącego typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1265">A <see cref="T:System.Type" /> representing the constructed type formed by substituting the elements of <paramref name="typeArguments" /> for the type parameters of the current generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1266">Ta metoda emitowany kodu wymaga typu utworzone na podstawie bieżącej definicji typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1266">Use this method when your emitted code requires a type constructed from the current generic type definition.</span></span> <span data-ttu-id="7654a-1267">Nie jest konieczne do wywołania <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> metoda przed wywołaniem <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> metoda <xref:System.Reflection.Emit.TypeBuilder> reprezentujący definicji typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1267">It is not necessary to call the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method before calling the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on a <xref:System.Reflection.Emit.TypeBuilder> that represents a generic type definition.</span></span> <span data-ttu-id="7654a-1268">Jeśli bieżący <xref:System.Reflection.Emit.TypeBuilder> nie reprezentuje definicji typu ogólnego, <xref:System.InvalidOperationException> jest generowany.</span><span class="sxs-lookup"><span data-stu-id="7654a-1268">If the current <xref:System.Reflection.Emit.TypeBuilder> does not represent the definition of a generic type, an <xref:System.InvalidOperationException> is thrown.</span></span>  
  
 <span data-ttu-id="7654a-1269">Obiekt zwrócony przez funkcje tej metody jako symbol zastępczy skonstruowanego typu ogólnego w kodzie emitowany.</span><span class="sxs-lookup"><span data-stu-id="7654a-1269">The object returned by this method functions as a placeholder for a constructed generic type in your emitted code.</span></span> <span data-ttu-id="7654a-1270">Jest on wystąpieniem klasy pochodzącej od <xref:System.Type> mającym ograniczoną możliwości.</span><span class="sxs-lookup"><span data-stu-id="7654a-1270">It is an instance of a class derived from <xref:System.Type> that has limited capabilities.</span></span> <span data-ttu-id="7654a-1271">W szczególności:</span><span class="sxs-lookup"><span data-stu-id="7654a-1271">In particular:</span></span>  
  
-   <span data-ttu-id="7654a-1272">Aby uzyskać metody, pól i konstruktory one utworzone typy ogólne, użyj <xref:System.Reflection.Emit.TypeBuilder.GetMethod%28System.Type%2CSystem.Reflection.MethodInfo%29>, <xref:System.Reflection.Emit.TypeBuilder.GetField%28System.Type%2CSystem.Reflection.FieldInfo%29>, i <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%28System.Type%2CSystem.Reflection.ConstructorInfo%29> przeciążenia metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-1272">To get methods, fields, and constructors for these constructed generic types, use the <xref:System.Reflection.Emit.TypeBuilder.GetMethod%28System.Type%2CSystem.Reflection.MethodInfo%29>, <xref:System.Reflection.Emit.TypeBuilder.GetField%28System.Type%2CSystem.Reflection.FieldInfo%29>, and <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%28System.Type%2CSystem.Reflection.ConstructorInfo%29> method overloads.</span></span>  
  
-   <span data-ttu-id="7654a-1273">Dwa wystąpienia, które reprezentują ten sam typ skonstruowane porównuje jako równe.</span><span class="sxs-lookup"><span data-stu-id="7654a-1273">Two instances that represent the same constructed type do not compare as equal.</span></span> <span data-ttu-id="7654a-1274">Na przykład w poniższym kodzie `t1.Equals(t2)` zwraca `false`:</span><span class="sxs-lookup"><span data-stu-id="7654a-1274">For example, in the following code `t1.Equals(t2)` returns `false`:</span></span>  
  
 [!code-cpp[System.Reflection.Emit.TypeBuilder.MakeGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.reflection.emit.typebuilder.makegenerictype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Reflection.Emit.TypeBuilder.MakeGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.emit.typebuilder.makegenerictype/cs/remarks.cs#1)]
 [!code-vb[System.Reflection.Emit.TypeBuilder.MakeGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.emit.typebuilder.makegenerictype/vb/remarks.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-1275">Bieżący typ nie reprezentuje definicji typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1275">The current type does not represent the definition of a generic type.</span></span> <span data-ttu-id="7654a-1276">Oznacza to <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> zwraca <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1276">That is, <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> returns <see langword="false" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-1277"><paramref name="typeArguments" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1277"><paramref name="typeArguments" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="7654a-1278">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-1278">-or-</span></span>  
  
 <span data-ttu-id="7654a-1279">Każdy z elementów <paramref name="typeArguments" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1279">Any element of <paramref name="typeArguments" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7654a-1280"><see cref="P:System.Type.Module" /> Właściwości z żadnym elementem <paramref name="typeArguments" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1280">The <see cref="P:System.Type.Module" /> property of any element of <paramref name="typeArguments" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="7654a-1281">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-1281">-or-</span></span>  
  
 <span data-ttu-id="7654a-1282"><see cref="P:System.Reflection.Module.Assembly" /> Właściwość modułu z żadnym elementem <paramref name="typeArguments" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1282">The <see cref="P:System.Reflection.Module.Assembly" /> property of the module of any element of <paramref name="typeArguments" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MakePointerType">
      <MemberSignature Language="C#" Value="public override Type MakePointerType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakePointerType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.MakePointerType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakePointerType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakePointerType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7654a-1283">Zwraca <see cref="T:System.Type" /> obiekt, który reprezentuje typ niezarządzany wskaźnik do typu bieżącej.</span><span class="sxs-lookup"><span data-stu-id="7654a-1283">Returns a <see cref="T:System.Type" /> object that represents the type of an unmanaged pointer to the current type.</span></span></summary>
        <returns><span data-ttu-id="7654a-1284">A <see cref="T:System.Type" /> obiekt, który reprezentuje typ niezarządzany wskaźnik do typu bieżącej.</span><span class="sxs-lookup"><span data-stu-id="7654a-1284">A <see cref="T:System.Type" /> object that represents the type of an unmanaged pointer to the current type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1285"><xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A> Metody umożliwia generowanie typów wskaźnika do listy parametrów.</span><span class="sxs-lookup"><span data-stu-id="7654a-1285">The <xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A> method provides a way to generate pointer types for parameter lists.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7654a-1286">Używana jest składnia języka pośredniego (MSIL) firmy Microsoft, jeśli bieżący <xref:System.Reflection.Emit.TypeBuilder> reprezentuje `MyType`, a następnie będzie typ zwracany przez tę metodę `MyType*`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1286">Using Microsoft intermediate language (MSIL) syntax, if the current <xref:System.Reflection.Emit.TypeBuilder> represents `MyType`, then the type returned by this method would be `MyType*`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7654a-1287">Poniższy przykład kodu tworzy module dynamicznym abstrakcyjna o nazwie `Sample`, a metoda abstrakcyjna o nazwie `TestMethod`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1287">The following code example creates a dynamic module, an abstract type named `Sample`, and an abstract method named `TestMethod`.</span></span> <span data-ttu-id="7654a-1288">`TestMethod` przyjmuje `ref` parametr (`ByRef` w języku Visual Basic) typu `Sample`, wskaźnik do typu `Sample`, a Tablica typu `Sample`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1288">`TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `Sample`, a pointer to type `Sample`, and an array of type `Sample`.</span></span> <span data-ttu-id="7654a-1289">Zwraca jest tablicą dwuwymiarową typu `Sample`.</span><span class="sxs-lookup"><span data-stu-id="7654a-1289">It returns a two-dimensional array of type `Sample`.</span></span> <span data-ttu-id="7654a-1290">Przykładowy kod zapisuje module dynamicznym na dysku, więc można sprawdzić za pomocą [Ildasm.exe (dezasembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span><span class="sxs-lookup"><span data-stu-id="7654a-1290">The code example saves the dynamic module to disk, so you can examine it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span></span>  
  
 [!code-csharp[MakeXxxTypeBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxTypeBuilder/CS/source.cs#1)]
 [!code-vb[MakeXxxTypeBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxTypeBuilder/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeByRefType" />
        <altmember cref="Overload:System.Reflection.Emit.TypeBuilder.MakeArrayType" />
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7654a-1291">Pobiera dynamiczny moduł zawierający definicję tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1291">Retrieves the dynamic module that contains this type definition.</span></span></summary>
        <value><span data-ttu-id="7654a-1292">Tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1292">Read-only.</span></span> <span data-ttu-id="7654a-1293">Pobiera dynamiczny moduł zawierający definicję tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1293">Retrieves the dynamic module that contains this type definition.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7654a-1294">Pobiera nazwę tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1294">Retrieves the name of this type.</span></span></summary>
        <value><span data-ttu-id="7654a-1295">Tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1295">Read-only.</span></span> <span data-ttu-id="7654a-1296">Pobiera <see cref="T:System.String" /> nazwa tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1296">Retrieves the <see cref="T:System.String" /> name of this type.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public override string Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Namespace { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7654a-1297">Pobiera obszar nazw gdzie to <see langword="TypeBuilder" /> jest zdefiniowany.</span><span class="sxs-lookup"><span data-stu-id="7654a-1297">Retrieves the namespace where this <see langword="TypeBuilder" /> is defined.</span></span></summary>
        <value><span data-ttu-id="7654a-1298">Tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1298">Read-only.</span></span> <span data-ttu-id="7654a-1299">Pobiera obszar nazw gdzie to <see langword="TypeBuilder" /> jest zdefiniowany.</span><span class="sxs-lookup"><span data-stu-id="7654a-1299">Retrieves the namespace where this <see langword="TypeBuilder" /> is defined.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PackingSize">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.PackingSize PackingSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.Emit.PackingSize PackingSize" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.PackingSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PackingSize As PackingSize" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Emit::PackingSize PackingSize { System::Reflection::Emit::PackingSize get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.PackingSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7654a-1300">Pobiera rozmiar pakowania tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1300">Retrieves the packing size of this type.</span></span></summary>
        <value><span data-ttu-id="7654a-1301">Tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1301">Read-only.</span></span> <span data-ttu-id="7654a-1302">Pobiera rozmiar pakowania tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1302">Retrieves the packing size of this type.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7654a-1303">Zwraca typ, który został użyty do uzyskania tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1303">Returns the type that was used to obtain this type.</span></span></summary>
        <value><span data-ttu-id="7654a-1304">Tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1304">Read-only.</span></span> <span data-ttu-id="7654a-1305">Typ, który został użyty do uzyskania tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1305">The type that was used to obtain this type.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetCustomAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7654a-1306">Ustawia atrybut niestandardowy.</span><span class="sxs-lookup"><span data-stu-id="7654a-1306">Sets a custom attribute.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCustomAttribute(class System.Reflection.Emit.CustomAttributeBuilder customBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomAttribute (customBuilder As CustomAttributeBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCustomAttribute(System::Reflection::Emit::CustomAttributeBuilder ^ customBuilder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customBuilder" Type="System.Reflection.Emit.CustomAttributeBuilder" />
      </Parameters>
      <Docs>
        <param name="customBuilder"><span data-ttu-id="7654a-1307">Wystąpienia klasy pomocnika do definiowania atrybutu niestandardowego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1307">An instance of a helper class to define the custom attribute.</span></span></param>
        <summary><span data-ttu-id="7654a-1308">Wartość atrybutu niestandardowego za pomocą konstruktora atrybutów niestandardowych.</span><span class="sxs-lookup"><span data-stu-id="7654a-1308">Set a custom attribute using a custom attribute builder.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="7654a-1309">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ten element członkowski nie wymaga już <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flagi.</span><span class="sxs-lookup"><span data-stu-id="7654a-1309">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="7654a-1310">(Zobacz [problemy z zabezpieczeniami w odbicia Emituj](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Aby używać tej funkcji, należy docelowy aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszym.</span><span class="sxs-lookup"><span data-stu-id="7654a-1310">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-1311"><paramref name="customBuilder" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1311"><paramref name="customBuilder" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-1312">Dla bieżącego typu dynamicznego <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> właściwość jest <see langword="true" />, ale <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> jest właściwość <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1312">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCustomAttribute(class System.Reflection.ConstructorInfo con, unsigned int8[] binaryAttribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomAttribute (con As ConstructorInfo, binaryAttribute As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCustomAttribute(System::Reflection::ConstructorInfo ^ con, cli::array &lt;System::Byte&gt; ^ binaryAttribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="con" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="binaryAttribute" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="con"><span data-ttu-id="7654a-1313">Konstruktor atrybutu niestandardowego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1313">The constructor for the custom attribute.</span></span></param>
        <param name="binaryAttribute"><span data-ttu-id="7654a-1314">Obiekt blob bajtów reprezentujących atrybuty.</span><span class="sxs-lookup"><span data-stu-id="7654a-1314">A byte blob representing the attributes.</span></span></param>
        <summary><span data-ttu-id="7654a-1315">Ustawia przy użyciu określonego atrybutu niestandardowego obiektu blob atrybutu niestandardowego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1315">Sets a custom attribute using a specified custom attribute blob.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1316">Aby uzyskać więcej informacji na temat formatu `binaryAttribute`, można znaleźć w dokumentacji infrastruktury języka wspólnego (CLI), szczególnie "partycji II: metadane definicji i semantyki".</span><span class="sxs-lookup"><span data-stu-id="7654a-1316">For more information on how to format `binaryAttribute`, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="7654a-1317">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# i wspólne normy infrastruktury języka](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie sieci Web międzynarodowej Ecma.</span><span class="sxs-lookup"><span data-stu-id="7654a-1317">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7654a-1318">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ten element członkowski nie wymaga już <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flagi.</span><span class="sxs-lookup"><span data-stu-id="7654a-1318">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="7654a-1319">(Zobacz [problemy z zabezpieczeniami w odbicia Emituj](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Aby używać tej funkcji, należy docelowy aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszym.</span><span class="sxs-lookup"><span data-stu-id="7654a-1319">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7654a-1320"><paramref name="con" /> lub <paramref name="binaryAttribute" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1320"><paramref name="con" /> or <paramref name="binaryAttribute" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-1321">Dla bieżącego typu dynamicznego <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> właściwość jest <see langword="true" />, ale <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> jest właściwość <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1321">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetParent">
      <MemberSignature Language="C#" Value="public void SetParent (Type parent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetParent(class System.Type parent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.SetParent(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetParent (parent As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetParent(Type ^ parent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="parent"><span data-ttu-id="7654a-1322">Nowy typ podstawowy.</span><span class="sxs-lookup"><span data-stu-id="7654a-1322">The new base type.</span></span></param>
        <summary><span data-ttu-id="7654a-1323">Ustawia typ bazowy tego typu obecnie konstruowanego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1323">Sets the base type of the type currently under construction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1324">Jeśli `parent` jest `null`, <xref:System.Object> jest używany jako typ bazowy.</span><span class="sxs-lookup"><span data-stu-id="7654a-1324">If `parent` is `null`, <xref:System.Object> is used as the base type.</span></span>  
  
 <span data-ttu-id="7654a-1325">W wersji systemu .NET Framework 1.0 i 1.1, nie jest wyjątek Jeśli `parent` jest typ interfejsu, ale <xref:System.TypeLoadException> jest generowany, gdy <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> metoda jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="7654a-1325">In the .NET Framework versions 1.0 and 1.1, no exception is thrown if `parent` is an interface type, but a <xref:System.TypeLoadException> is thrown when the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method is called.</span></span>  
  
 <span data-ttu-id="7654a-1326"><xref:System.Reflection.Emit.TypeBuilder.SetParent%2A> — Metoda nie sprawdza większość typów nieprawidłowy element nadrzędny.</span><span class="sxs-lookup"><span data-stu-id="7654a-1326">The <xref:System.Reflection.Emit.TypeBuilder.SetParent%2A> method does not check for most invalid parent types.</span></span> <span data-ttu-id="7654a-1327">Na przykład nie odrzucić typie elementu nadrzędnego, który nie ma konstruktora domyślnego podczas bieżący typ ma domyślny konstruktor, nie go odrzucić typy zapieczętowane i nie odrzucić <xref:System.Delegate> typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1327">For example, it does not reject a parent type that has no default constructor when the current type has a default constructor, it does not reject sealed types, and it does not reject the <xref:System.Delegate> type.</span></span> <span data-ttu-id="7654a-1328">W takich przypadkach istnieją wyjątki zgłaszane przez <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="7654a-1328">In all these cases, exceptions are thrown by the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-1329">Typ został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1329">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="7654a-1330">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-1330">-or-</span></span>  
  
 <span data-ttu-id="7654a-1331"><paramref name="parent" /> jest <see langword="null" />, a bieżące wystąpienie reprezentuje interfejs atrybutów, których nie obejmują <see cref="F:System.Reflection.TypeAttributes.Abstract" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1331"><paramref name="parent" /> is <see langword="null" />, and the current instance represents an interface whose attributes do not include <see cref="F:System.Reflection.TypeAttributes.Abstract" />.</span></span>  
  
 <span data-ttu-id="7654a-1332">—lub—</span><span class="sxs-lookup"><span data-stu-id="7654a-1332">-or-</span></span>  
  
 <span data-ttu-id="7654a-1333">Dla bieżącego typu dynamicznego <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> właściwość jest <see langword="true" />, ale <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> jest właściwość <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1333">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7654a-1334"><paramref name="parent" /> to interfejs.</span><span class="sxs-lookup"><span data-stu-id="7654a-1334"><paramref name="parent" /> is an interface.</span></span> <span data-ttu-id="7654a-1335">Ten warunek wyjątku jest nowa w programie .NET Framework w wersji 2.0.</span><span class="sxs-lookup"><span data-stu-id="7654a-1335">This exception condition is new in the .NET Framework version 2.0.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public int Size { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Size" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.Size" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Size As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Size { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7654a-1336">Pobiera typ całkowity rozmiar.</span><span class="sxs-lookup"><span data-stu-id="7654a-1336">Retrieves the total size of a type.</span></span></summary>
        <value><span data-ttu-id="7654a-1337">Tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1337">Read-only.</span></span> <span data-ttu-id="7654a-1338">Pobiera łączny rozmiar tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1338">Retrieves this type’s total size.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _TypeBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _TypeBuilder.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_TypeBuilder::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="7654a-1339">Zarezerwowane do użytku w przyszłości.</span><span class="sxs-lookup"><span data-stu-id="7654a-1339">Reserved for future use.</span></span> <span data-ttu-id="7654a-1340">Musi być wartością IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="7654a-1340">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="7654a-1341">Przekazana tablica nazw ma być mapowana.</span><span class="sxs-lookup"><span data-stu-id="7654a-1341">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="7654a-1342">Liczba nazw, które mają być mapowane.</span><span class="sxs-lookup"><span data-stu-id="7654a-1342">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="7654a-1343">Ustawienia regionalne kontekstu, w którym można interpretować nazwy.</span><span class="sxs-lookup"><span data-stu-id="7654a-1343">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="7654a-1344">Tablica przydzielana przez obiekt wywołujący, który otrzymuje numery identyfikacyjne odpowiadających nazw.</span><span class="sxs-lookup"><span data-stu-id="7654a-1344">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="7654a-1345">Zestaw nazw jest mapowany na odpowiedni zestaw identyfikatorów wysyłania.</span><span class="sxs-lookup"><span data-stu-id="7654a-1345">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1346">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1346">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="7654a-1347">Aby uzyskać więcej informacji na temat `IDispatch::GetIDsOfNames`, zobacz bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="7654a-1347">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="7654a-1348">Dostęp z późnym wiązaniem za pomocą modelu COM <c>IDispatch</c> interfejs nie jest obsługiwany.</span><span class="sxs-lookup"><span data-stu-id="7654a-1348">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._TypeBuilder.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _TypeBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._TypeBuilder.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _TypeBuilder.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._TypeBuilder.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_TypeBuilder::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._TypeBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="7654a-1349">Informacje o typie, który będzie zwracany.</span><span class="sxs-lookup"><span data-stu-id="7654a-1349">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="7654a-1350">Identyfikator regionalny dla informacji o typie.</span><span class="sxs-lookup"><span data-stu-id="7654a-1350">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="7654a-1351">Otrzymuje wskaźnik do obiektu informacji żądanego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1351">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="7654a-1352">Pobiera informacje o typie dla obiektu, których następnie można użyć do uzyskania informacji o typie interfejsu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1352">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1353">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1353">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="7654a-1354">Aby uzyskać więcej informacji na temat `IDispatch::GetTypeInfo`, zobacz bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="7654a-1354">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="7654a-1355">Dostęp z późnym wiązaniem za pomocą modelu COM <c>IDispatch</c> interfejs nie jest obsługiwany.</span><span class="sxs-lookup"><span data-stu-id="7654a-1355">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _TypeBuilder.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _TypeBuilder.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_TypeBuilder::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="7654a-1356">Wskazuje lokalizację, która odbiera informację o liczbie typów dostarczanych przez obiekt.</span><span class="sxs-lookup"><span data-stu-id="7654a-1356">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="7654a-1357">Pobiera informację o liczbie typów interfejsów, jakie zawiera obiekt (0 lub 1).</span><span class="sxs-lookup"><span data-stu-id="7654a-1357">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1358">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1358">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="7654a-1359">Aby uzyskać więcej informacji na temat `IDispatch::GetTypeInfoCount`, zobacz bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="7654a-1359">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="7654a-1360">Dostęp z późnym wiązaniem za pomocą modelu COM <c>IDispatch</c> interfejs nie jest obsługiwany.</span><span class="sxs-lookup"><span data-stu-id="7654a-1360">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._TypeBuilder.Invoke">
      <MemberSignature Language="C#" Value="void _TypeBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._TypeBuilder.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _TypeBuilder.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._TypeBuilder.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_TypeBuilder::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._TypeBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="7654a-1361">Określa element członkowski.</span><span class="sxs-lookup"><span data-stu-id="7654a-1361">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="7654a-1362">Zarezerwowane do użytku w przyszłości.</span><span class="sxs-lookup"><span data-stu-id="7654a-1362">Reserved for future use.</span></span> <span data-ttu-id="7654a-1363">Musi być wartością IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="7654a-1363">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="7654a-1364">Ustawienia regionalne kontekstu, w którym można interpretować argumenty.</span><span class="sxs-lookup"><span data-stu-id="7654a-1364">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="7654a-1365">Flagi opisujące kontekst wywołania.</span><span class="sxs-lookup"><span data-stu-id="7654a-1365">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="7654a-1366">Wskaźnik do struktury zawiera tablicę argumentów, tablicę identyfikatorów DISPID argumentu dla nazwanych argumentów i zlicza liczbę elementów w tablicach.</span><span class="sxs-lookup"><span data-stu-id="7654a-1366">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="7654a-1367">Wskaźnik miejsca, gdzie ma być przechowywany wynik.</span><span class="sxs-lookup"><span data-stu-id="7654a-1367">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="7654a-1368">Wskaźnik do struktury, która zawiera informacje o wyjątku.</span><span class="sxs-lookup"><span data-stu-id="7654a-1368">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="7654a-1369">Indeks pierwszego argumentu, który zawiera błąd.</span><span class="sxs-lookup"><span data-stu-id="7654a-1369">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="7654a-1370">Umożliwia dostęp do właściwości i metod udostępnianych przez obiekt.</span><span class="sxs-lookup"><span data-stu-id="7654a-1370">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1371">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="7654a-1371">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="7654a-1372">Aby uzyskać więcej informacji na temat `IDispatch::Invoke`, zobacz bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="7654a-1372">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="7654a-1373">Dostęp z późnym wiązaniem za pomocą modelu COM <c>IDispatch</c> interfejs nie jest obsługiwany.</span><span class="sxs-lookup"><span data-stu-id="7654a-1373">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7654a-1374">Zwraca nazwę typu z wyłączeniem przestrzeni nazw.</span><span class="sxs-lookup"><span data-stu-id="7654a-1374">Returns the name of the type excluding the namespace.</span></span></summary>
        <returns><span data-ttu-id="7654a-1375">Tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1375">Read-only.</span></span> <span data-ttu-id="7654a-1376">Nazwa typu z wyłączeniem przestrzeni nazw.</span><span class="sxs-lookup"><span data-stu-id="7654a-1376">The name of the type excluding the namespace.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeHandle">
      <MemberSignature Language="C#" Value="public override RuntimeTypeHandle TypeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeTypeHandle TypeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.TypeHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TypeHandle As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeTypeHandle TypeHandle { RuntimeTypeHandle get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7654a-1377">Nieobsługiwane w modułach dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="7654a-1377">Not supported in dynamic modules.</span></span></summary>
        <value><span data-ttu-id="7654a-1378">Tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1378">Read-only.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7654a-1379">Pobrać za pomocą typu <xref:System.Type.GetType%2A?displayProperty=nameWithType> lub <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> i użyj odbicia dla typu pobrane.</span><span class="sxs-lookup"><span data-stu-id="7654a-1379">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7654a-1380">Nieobsługiwane w modułach dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="7654a-1380">Not supported in dynamic modules.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TypeToken">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeToken TypeToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.Emit.TypeToken TypeToken" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.TypeToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeToken As TypeToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Emit::TypeToken TypeToken { System::Reflection::Emit::TypeToken get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7654a-1381">Zwraca token typu tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1381">Returns the type token of this type.</span></span></summary>
        <value><span data-ttu-id="7654a-1382">Tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1382">Read-only.</span></span> <span data-ttu-id="7654a-1383">Zwraca <see langword="TypeToken" /> tego typu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1383">Returns the <see langword="TypeToken" /> of this type.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-1384">Typ został wcześniej utworzony przy użyciu <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1384">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public override Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.UnderlyingSystemType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property UnderlyingSystemType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ UnderlyingSystemType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7654a-1385">Zwraca typ podstawowy systemu dla tego <see langword="TypeBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="7654a-1385">Returns the underlying system type for this <see langword="TypeBuilder" />.</span></span></summary>
        <value><span data-ttu-id="7654a-1386">Tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1386">Read-only.</span></span> <span data-ttu-id="7654a-1387">Zwraca typ podstawowy system.</span><span class="sxs-lookup"><span data-stu-id="7654a-1387">Returns the underlying system type.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7654a-1388">Ten typ jest wyliczeniem, ale nie ma podstawowego typu systemu.</span><span class="sxs-lookup"><span data-stu-id="7654a-1388">This type is an enumeration, but there is no underlying system type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UnspecifiedTypeSize">
      <MemberSignature Language="C#" Value="public const int UnspecifiedTypeSize = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 UnspecifiedTypeSize = (0)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize" />
      <MemberSignature Language="VB.NET" Value="Public Const UnspecifiedTypeSize As Integer  = 0" />
      <MemberSignature Language="C++ CLI" Value="public: int UnspecifiedTypeSize = 0;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="7654a-1389">Przedstawia całkowity rozmiar dla typu jest nieokreślona.</span><span class="sxs-lookup"><span data-stu-id="7654a-1389">Represents that total size for the type is not specified.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>