<Type Name="IDebugVsaScriptCodeItem" FullName="Microsoft.JScript.IDebugVsaScriptCodeItem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="66e914a30fcef7a41bbb9be46f214cbcc40fd42e" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39832500" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDebugVsaScriptCodeItem" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDebugVsaScriptCodeItem" />
  <TypeSignature Language="DocId" Value="T:Microsoft.JScript.IDebugVsaScriptCodeItem" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDebugVsaScriptCodeItem" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDebugVsaScriptCodeItem" />
  <TypeSignature Language="F#" Value="type IDebugVsaScriptCodeItem = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.JScript</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.Guid("6DFE759A-CB8B-4ca0-A973-1D04E0BF0B53")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="272e1-101">Definiuje metody, które obliczać wyrażeń i analizowanie ciągów.</span>
      <span class="sxs-lookup">
        <span data-stu-id="272e1-101">Defines methods that evaluate expressions and parse strings.</span>
      </span>
      <span data-ttu-id="272e1-102">Ten interfejs jest zwykle implementowany przez obiekt, który reprezentuje blok kodu i zwykle jest wywoływana przez debuger.</span>
      <span class="sxs-lookup">
        <span data-stu-id="272e1-102">This interface is typically implemented by an object that represents a code block, and it is typically called by a debugger.</span>
      </span>
      <span data-ttu-id="272e1-103">Ten interfejs zapewnia dodatkowe funkcje, które są wymagane przez hosta IActiveScript.</span>
      <span class="sxs-lookup">
        <span data-stu-id="272e1-103">This interface provides extra functionality that is needed by an IActiveScript host.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
    <forInternalUseOnly />
  </Docs>
  <Members>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="public object Evaluate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Evaluate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate" />
      <MemberSignature Language="VB.NET" Value="Public Function Evaluate () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Evaluate();" />
      <MemberSignature Language="F#" Value="abstract member Evaluate : unit -&gt; obj" Usage="iDebugVsaScriptCodeItem.Evaluate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="272e1-104">Po zaimplementowaniu w klasie, ocenia bloku, wyrażenia lub instrukcji reprezentowanego przez element kodu i zwraca wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="272e1-104">When implemented in a class, evaluates the block, expression, or statement represented by the code item and returns the value.</span>
          </span>
          <span data-ttu-id="272e1-105">Zwykle jest wywoływana przez debuger, który wymaga, aby szacować wyrażenia (w oknie czujki, na przykład).</span>
          <span class="sxs-lookup">
            <span data-stu-id="272e1-105">It is typically called by a debugger that needs to evaluate an expression (in a Watch window, for example).</span>
          </span>
          <span data-ttu-id="272e1-106">W wyrażeniach wartość jest wynikiem wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="272e1-106">For expressions, the value is the result of the expression.</span>
          </span>
          <span data-ttu-id="272e1-107">Bloków i instrukcji wyrażenie wynikowe jest ostatniego wyrażenia obliczana na podstawie bloku lub instrukcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="272e1-107">For blocks and statements, the resulting expression is the last expression calculated by the block or statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="272e1-108">Zwraca wartość, która reprezentuje obliczania instrukcji, wyrażenie lub bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="272e1-108">Returns a value that represents the evaluation of the statement, expression, or block.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="272e1-109">Należy pamiętać, że <xref:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate%2A> metody jest funkcjonalnie identyczny <xref:Microsoft.JScript.IVsaScriptCodeItem.Execute%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="272e1-109">Note that the <xref:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate%2A> method is functionally identical to the <xref:Microsoft.JScript.IVsaScriptCodeItem.Execute%2A> method.</span></span> <span data-ttu-id="272e1-110">Różnią się tylko atrybuty organizowania.</span><span class="sxs-lookup"><span data-stu-id="272e1-110">Only the marshaling attributes differ.</span></span> <span data-ttu-id="272e1-111">Ta wersja interfejsu umożliwia niezarządzanych debugera uzyskać wartość zwracaną jako `IUnknown` wskaźnika, a nie `VARIANT`.</span><span class="sxs-lookup"><span data-stu-id="272e1-111">This version of the interface allows an unmanaged debugger to obtain the return value as an `IUnknown` pointer rather than a `VARIANT`.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="ParseNamedBreakPoint">
      <MemberSignature Language="C#" Value="public bool ParseNamedBreakPoint (string input, out string functionName, out int nargs, out string arguments, out string returnType, out ulong offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ParseNamedBreakPoint(string input, [out] string&amp; functionName, [out] int32&amp; nargs, [out] string&amp; arguments, [out] string&amp; returnType, [out] unsigned int64&amp; offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function ParseNamedBreakPoint (input As String, ByRef functionName As String, ByRef nargs As Integer, ByRef arguments As String, ByRef returnType As String, ByRef offset As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ParseNamedBreakPoint(System::String ^ input, [Runtime::InteropServices::Out] System::String ^ % functionName, [Runtime::InteropServices::Out] int % nargs, [Runtime::InteropServices::Out] System::String ^ % arguments, [Runtime::InteropServices::Out] System::String ^ % returnType, [Runtime::InteropServices::Out] System::UInt64 % offset);" />
      <MemberSignature Language="F#" Value="abstract member ParseNamedBreakPoint : string *  *  *  *  *  -&gt; bool" Usage="iDebugVsaScriptCodeItem.ParseNamedBreakPoint (input, functionName, nargs, arguments, returnType, offset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="functionName" Type="System.String" RefType="out" />
        <Parameter Name="nargs" Type="System.Int32" RefType="out" />
        <Parameter Name="arguments" Type="System.String" RefType="out" />
        <Parameter Name="returnType" Type="System.String" RefType="out" />
        <Parameter Name="offset" Type="System.UInt64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="272e1-112">Poprawnie sformułowany o nazwie ciąg punktu przerwania funkcji, opcjonalnego argumentu listy i opcjonalne przesunięcie IL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="272e1-112">A well-formed named breakpoint string giving a function, optional argument list, and optional IL offset.</span>
          </span>
        </param>
        <param name="functionName">
          <span data-ttu-id="272e1-113">Parametr wyjściowy zwraca nazwę funkcji analizowane poza ciąg wejściowy lub ciąg pusty ciąg wejściowy nie jest poprawnie sformułowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="272e1-113">Out parameter returning the name of the function parsed out of the input string, or the empty string if the input string is not well formed.</span>
          </span>
        </param>
        <param name="nargs">
          <span data-ttu-id="272e1-114">Parametr wyjściowy zwraca liczbę argumentów na liście argumentów opcjonalnych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="272e1-114">Out parameter returning the number of arguments in the optional argument list.</span>
          </span>
          <span data-ttu-id="272e1-115">Zwraca zero, jeśli brak listy argumentów, lub jeśli ciąg nie jest poprawnie sformułowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="272e1-115">Returns zero if there is no arguments list or if the string is not well formed.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="272e1-116">Parametr wyjściowy zwracania rozdzielonych spacjami listę nazw wszystkich argumentów typu na liście argumentów lub pusty ciąg, jeśli brakuje listy argumentów lub ciąg wejściowy został nieprawidłowo sformułowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="272e1-116">Out parameter returning a space-separated list of the names of the types of all the arguments in the arguments list, or an empty string if the arguments list was missing or the input string was not well formed.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="272e1-117">Parametr wyjściowy zwraca ciąg zawierający typ zwracany funkcji o nazwie w danych wejściowych, lub pusty ciąg, jeśli brak zwracany typ lub ciąg wejściowy został nieprawidłowo sformułowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="272e1-117">Out parameter returning a string containing the return type of the function named in the input, or the empty string if the return type was missing or the input string was not well formed.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="272e1-118">Długa liczba całkowita bez znaku nadanie przesunięcie IL od ciąg wejściowy lub zero, jeśli nie było żadnych przesunięcie IL lub ciąg został nieprawidłowo sformułowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="272e1-118">Unsigned long integer giving the IL offset from the input string, or zero if there was no IL offset or the string was not well formed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="272e1-119">Po zaimplementowaniu w klasie, analizuje parametry i zwraca informacje, analizować w poziomie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="272e1-119">When implemented in a class, parses strings and returns the parsed-out information.</span>
          </span>
          <span data-ttu-id="272e1-120">Ta metoda jest zazwyczaj wywoływana przez debuger, wymagającym można przeanalizować informacji o punkcie przerwania, który jest reprezentowany jako <see langword="string" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="272e1-120">This method is typically called by a debugger that needs to parse information about a breakpoint that is represented as a <see langword="string" />.</span>
          </span>
          <span data-ttu-id="272e1-121">Debuger może być punkt przerwania wpisane przez użytkownika w postaci *functionname argumentów ILoffset*.</span>
          <span class="sxs-lookup">
            <span data-stu-id="272e1-121">The debugger might have a breakpoint typed in by the user in the form *functionname-arguments-ILoffset*.</span>
          </span>
          <span data-ttu-id="272e1-122">Parametry nazwane punkt przerwania może mieć format złożonych, na przykład <c>F.B ([] C.D, int, arg: double): C.Abc + 123.</c></span>
          <span class="sxs-lookup">
            <span data-stu-id="272e1-122">A named breakpoint string can have a complex format, for example, <c>F.B(C.D[], int, arg : double ) : C.Abc + 123.</c></span>
          </span>
          <span data-ttu-id="272e1-123">Lista parametrów jest opcjonalne, podobnie jak przesunięcie IL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="272e1-123">The parameter list is optional, as is the IL offset.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="272e1-124">Zwraca <see langword="true" /> Jeśli Nazwany punkt przerwania zostanie pomyślnie przetworzona, <see langword="false" /> inaczej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="272e1-124">Returns <see langword="true" /> if the named breakpoint is successfully parsed, <see langword="false" /> otherwise.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
  </Members>
</Type>