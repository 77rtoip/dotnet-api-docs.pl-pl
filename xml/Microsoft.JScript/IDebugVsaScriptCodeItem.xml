<Type Name="IDebugVsaScriptCodeItem" FullName="Microsoft.JScript.IDebugVsaScriptCodeItem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e39bc4c09d56bde969dbd39e14139e1a2bfb1502" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36732067" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDebugVsaScriptCodeItem" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDebugVsaScriptCodeItem" />
  <TypeSignature Language="DocId" Value="T:Microsoft.JScript.IDebugVsaScriptCodeItem" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDebugVsaScriptCodeItem" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDebugVsaScriptCodeItem" />
  <TypeSignature Language="F#" Value="type IDebugVsaScriptCodeItem = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.JScript</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("6DFE759A-CB8B-4ca0-A973-1D04E0BF0B53")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiuje metody obliczać wyrażeń i analizowanie ciągów. Ten interfejs jest zwykle implementowany przez obiekt, który reprezentuje blok kodu i jest zwykle nazywany przez debuger. Ten interfejs zapewnia dodatkowe funkcje, które są wymagane przez hosta IActiveScript.</summary>
    <remarks>To be added.</remarks>
    <forInternalUseOnly />
  </Docs>
  <Members>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="public object Evaluate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Evaluate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate" />
      <MemberSignature Language="VB.NET" Value="Public Function Evaluate () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Evaluate();" />
      <MemberSignature Language="F#" Value="abstract member Evaluate : unit -&gt; obj" Usage="iDebugVsaScriptCodeItem.Evaluate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Po zaimplementowaniu w klasie, ocenia bloku, wyrażenia lub instrukcji reprezentowany przez element kodu i zwraca wartość. Jest to zwykle przez debuger, który należy ocenić wyrażenia (okno czujki, na przykład). Wyrażeń wartość jest wynikiem wyrażenia. Bloków i instrukcje wynikowe wyrażenie jest ostatniego wyrażenie obliczane przez blok lub instrukcji.</summary>
        <returns>Zwraca wartość reprezentującą obliczania instrukcji, wyrażenia lub bloku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy pamiętać, że <xref:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate%2A> metody jest funkcjonalnie identyczne <xref:Microsoft.JScript.IVsaScriptCodeItem.Execute%2A> metody. Tylko atrybuty kierowania różnią się. Ta wersja interfejsu umożliwia niezarządzane debuger można uzyskać wartość zwracana jako `IUnknown` wskaźnika zamiast `VARIANT`.  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="ParseNamedBreakPoint">
      <MemberSignature Language="C#" Value="public bool ParseNamedBreakPoint (string input, out string functionName, out int nargs, out string arguments, out string returnType, out ulong offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ParseNamedBreakPoint(string input, [out] string&amp; functionName, [out] int32&amp; nargs, [out] string&amp; arguments, [out] string&amp; returnType, [out] unsigned int64&amp; offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function ParseNamedBreakPoint (input As String, ByRef functionName As String, ByRef nargs As Integer, ByRef arguments As String, ByRef returnType As String, ByRef offset As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ParseNamedBreakPoint(System::String ^ input, [Runtime::InteropServices::Out] System::String ^ % functionName, [Runtime::InteropServices::Out] int % nargs, [Runtime::InteropServices::Out] System::String ^ % arguments, [Runtime::InteropServices::Out] System::String ^ % returnType, [Runtime::InteropServices::Out] System::UInt64 % offset);" />
      <MemberSignature Language="F#" Value="abstract member ParseNamedBreakPoint : string *  *  *  *  *  -&gt; bool" Usage="iDebugVsaScriptCodeItem.ParseNamedBreakPoint (input, functionName, nargs, arguments, returnType, offset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="functionName" Type="System.String&amp;" RefType="out" />
        <Parameter Name="nargs" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="arguments" Type="System.String&amp;" RefType="out" />
        <Parameter Name="returnType" Type="System.String&amp;" RefType="out" />
        <Parameter Name="offset" Type="System.UInt64&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Poprawnie sformułowany o nazwie ciąg punktu przerwania funkcji, opcjonalny argument listy i opcjonalnie przesunięciu IL.</param>
        <param name="functionName">Parametr wyjściowy zwraca nazwę funkcji analizowane poza ciąg wejściowy lub ciąg pusty ciąg wejściowy nie jest poprawnie sformułowany.</param>
        <param name="nargs">Parametr wyjściowy zwracając liczbę argumentów w liście argumentów opcjonalnych. Zwraca zero, jeśli nie ma żadnej listy argumentów lub jeśli nie jest poprawnie sformułowany ciąg.</param>
        <param name="arguments">Parametr wyjściowy zwracając rozdzieloną spacjami listę nazw typów wszystkie argumenty w listy argumentów lub pusty ciąg, jeśli brak listy argumentów lub ciąg wejściowy nie został dobrze uformowany.</param>
        <param name="returnType">Parametr wyjściowy zwraca ciąg zawierający typ zwracany funkcji o nazwie w danych wejściowych, lub pusty ciąg, jeśli brak zwracany typ lub ciąg wejściowy został nieprawidłowo sformułowany.</param>
        <param name="offset">Niepodpisane długich liczb całkowitych nadanie przesunięciu IL od ciąg wejściowy lub zero, jeśli nie było żadnych przesunięciu IL lub ciąg nie został dobrze uformowany.</param>
        <summary>Po zaimplementowaniu w klasie, analizuje parametry i zwraca informacje przeanalizowany w poziomie. Ta metoda jest zazwyczaj wywoływana przez debuger, które należy przeanalizować informacji na temat punktu przerwania reprezentowany jako <see langword="string" />. Debuger może być punkt przerwania wpisana przez użytkownika w postaci * functionname-argumenty-ILoffset *. Parametry nazwane punkt przerwania może mieć format złożonych, na przykład <c>F.B ([] C.D, int, arg: double): C.Abc + 123.</c> Lista parametrów jest opcjonalny, ponieważ jest przesunięciu IL.</summary>
        <returns>Zwraca <see langword="true" /> Jeśli Nazwany punkt przerwania jest pomyślnie przeanalizowano, <see langword="false" /> inaczej.</returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
  </Members>
</Type>