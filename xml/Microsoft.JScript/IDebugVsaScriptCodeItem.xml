<Type Name="IDebugVsaScriptCodeItem" FullName="Microsoft.JScript.IDebugVsaScriptCodeItem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e6e89a188e79298ff58734cb4db2b15816513f0a" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69293709" /></Metadata><TypeSignature Language="C#" Value="public interface IDebugVsaScriptCodeItem" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDebugVsaScriptCodeItem" />
  <TypeSignature Language="DocId" Value="T:Microsoft.JScript.IDebugVsaScriptCodeItem" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDebugVsaScriptCodeItem" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDebugVsaScriptCodeItem" />
  <TypeSignature Language="F#" Value="type IDebugVsaScriptCodeItem = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.JScript</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("6DFE759A-CB8B-4ca0-A973-1D04E0BF0B53")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiuje metody, które obliczają wyrażenia i przeanalizują ciągi. Ten interfejs jest zwykle implementowany przez obiekt, który reprezentuje blok kodu i jest zazwyczaj wywoływany przez debuger. Ten interfejs zapewnia dodatkowe funkcje, które są potrzebne przez hosta IActiveScript.</summary>
    <remarks>To be added.</remarks>
    <forInternalUseOnly />
  </Docs>
  <Members>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="public object Evaluate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Evaluate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate" />
      <MemberSignature Language="VB.NET" Value="Public Function Evaluate () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Evaluate();" />
      <MemberSignature Language="F#" Value="abstract member Evaluate : unit -&gt; obj" Usage="iDebugVsaScriptCodeItem.Evaluate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Po zaimplementowaniu w klasie, oblicza blok, wyrażenie lub instrukcję reprezentowane przez element kodu i zwraca wartość. Jest on zazwyczaj wywoływany przez debuger, który musi oszacować wyrażenie (na przykład w okno wyrażeń kontrolnych). W przypadku wyrażeń wartość jest wynikiem wyrażenia. W przypadku bloków i instrukcji wyrażenie wyniku jest ostatnim wyrażeniem obliczanym przez blok lub instrukcję.</summary>
        <returns>Wartość, która reprezentuje ocenę instrukcji, wyrażenia lub bloku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy zauważyć, <xref:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate%2A> że metoda jest funkcjonalnie identyczna <xref:Microsoft.JScript.IVsaScriptCodeItem.Execute%2A> z metodą. Różne tylko atrybuty organizowania. Ta wersja interfejsu zezwala niezarządzanemu debugerowi na uzyskanie wartości zwracanej jako `IUnknown` wskaźnik zamiast. `VARIANT`  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="ParseNamedBreakPoint">
      <MemberSignature Language="C#" Value="public bool ParseNamedBreakPoint (string input, out string functionName, out int nargs, out string arguments, out string returnType, out ulong offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ParseNamedBreakPoint(string input, [out] string&amp; functionName, [out] int32&amp; nargs, [out] string&amp; arguments, [out] string&amp; returnType, [out] unsigned int64&amp; offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function ParseNamedBreakPoint (input As String, ByRef functionName As String, ByRef nargs As Integer, ByRef arguments As String, ByRef returnType As String, ByRef offset As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ParseNamedBreakPoint(System::String ^ input, [Runtime::InteropServices::Out] System::String ^ % functionName, [Runtime::InteropServices::Out] int % nargs, [Runtime::InteropServices::Out] System::String ^ % arguments, [Runtime::InteropServices::Out] System::String ^ % returnType, [Runtime::InteropServices::Out] System::UInt64 % offset);" />
      <MemberSignature Language="F#" Value="abstract member ParseNamedBreakPoint : string *  *  *  *  *  -&gt; bool" Usage="iDebugVsaScriptCodeItem.ParseNamedBreakPoint (input, functionName, nargs, arguments, returnType, offset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="functionName" Type="System.String" RefType="out" />
        <Parameter Name="nargs" Type="System.Int32" RefType="out" />
        <Parameter Name="arguments" Type="System.String" RefType="out" />
        <Parameter Name="returnType" Type="System.String" RefType="out" />
        <Parameter Name="offset" Type="System.UInt64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Poprawnie sformułowany nazwany ciąg punktu przerwania, który daje funkcję, opcjonalną listę argumentów i opcjonalne przesunięcie IL.</param>
        <param name="functionName">Parametr out zwracający nazwę funkcji przeanalizowanej poza ciągiem wejściowym lub pustym ciągiem, jeśli ciąg wejściowy nie jest poprawnie sformułowany.</param>
        <param name="nargs">Parametr out zwracający liczbę argumentów w opcjonalnej liście argumentów. Zwraca zero, jeśli nie ma listy argumentów lub jeśli ciąg nie jest poprawnie sformułowany.</param>
        <param name="arguments">Parametr out zwracający rozdzieloną spacjami listę nazw typów wszystkich argumentów na liście argumentów lub pusty ciąg, jeśli brakuje listy argumentów lub ciąg wejściowy nie został poprawnie sformułowany.</param>
        <param name="returnType">Parametr out zwracający ciąg zawierający zwracany typ funkcji o nazwie w danych wejściowych lub pusty ciąg, jeśli brakuje typu zwracanego lub ciąg wejściowy nie został poprawnie sformułowany.</param>
        <param name="offset">Nieoznaczona długa liczba całkowita, dająca przesunięcie IL z ciągu wejściowego lub zero, jeśli nie było przesunięte IL lub ciąg nie został poprawnie sformułowany.</param>
        <summary>Po zaimplementowaniu w klasie program analizuje ciągi i zwraca informacje przeanalizowane. Ta metoda jest zazwyczaj wywoływana przez debuger, który musi analizować informacje o punkcie przerwania, który jest reprezentowany jako <see langword="string" />. Debuger może mieć punkt przerwania określony przez użytkownika w postaci *FunctionName-arguments-przesunięcieil*. Nazwany ciąg punktu przerwania może mieć format złożony, na przykład <c>F. B (C. D [], int, ARG: Double): C. ABC + 123.</c> Lista parametrów jest opcjonalna, ponieważ jest przesunięciem IL.</summary>
        <returns><see langword="true" />Jeśli nazwany punkt przerwania został pomyślnie przeanalizowany; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
  </Members>
</Type>
