<Type Name="ScriptObject" FullName="Microsoft.JScript.ScriptObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2d1783a23ade5fcb266981d5f7011d45c43d33b9" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52245633" /></Metadata><TypeSignature Language="C#" Value="public abstract class ScriptObject : System.Reflection.IReflect" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ScriptObject extends System.Object implements class System.Reflection.IReflect" />
  <TypeSignature Language="DocId" Value="T:Microsoft.JScript.ScriptObject" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ScriptObject&#xA;Implements IReflect" />
  <TypeSignature Language="C++ CLI" Value="public ref class ScriptObject abstract : System::Reflection::IReflect" />
  <TypeSignature Language="F#" Value="type ScriptObject = class&#xA;    interface IReflect" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.JScript</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Reflection.IReflect</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="535bb-101">Obsługuje wszystkie klasy w kodzie JScript.</span><span class="sxs-lookup"><span data-stu-id="535bb-101">Supports all JScript classes.</span></span> <span data-ttu-id="535bb-102">Jest to ultimate klasę bazową dla wszystkich klas języka JScript.</span><span class="sxs-lookup"><span data-stu-id="535bb-102">This is the ultimate base class of all JScript classes.</span></span> <span data-ttu-id="535bb-103">Ta klasa należy do kategorii Funkcje i obiekty.</span><span class="sxs-lookup"><span data-stu-id="535bb-103">This class belongs to the objects and functions category.</span></span></summary>
    <remarks>To be added.</remarks>
    <forInternalUseOnly />
    <altmember cref="T:Microsoft.JScript.ActivationObject" />
    <altmember cref="T:Microsoft.JScript.JSObject" />
  </Docs>
  <Members>
    <Member MemberName="engine">
      <MemberSignature Language="C#" Value="public Microsoft.JScript.Vsa.VsaEngine engine;" />
      <MemberSignature Language="ILAsm" Value=".field public class Microsoft.JScript.Vsa.VsaEngine engine" />
      <MemberSignature Language="DocId" Value="F:Microsoft.JScript.ScriptObject.engine" />
      <MemberSignature Language="VB.NET" Value="Public engine As VsaEngine " />
      <MemberSignature Language="C++ CLI" Value="public: Microsoft::JScript::Vsa::VsaEngine ^ engine;" />
      <MemberSignature Language="F#" Value="val mutable engine : Microsoft.JScript.Vsa.VsaEngine" Usage="Microsoft.JScript.ScriptObject.engine" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.VsaEngine</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="535bb-104">Przechowuje odwołania do silnika wykonywania skryptów.</span><span class="sxs-lookup"><span data-stu-id="535bb-104">Stores a reference to the scripting engine.</span></span></summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.GetField(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetField (name As String, bindingAttr As BindingFlags) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::FieldInfo ^ GetField(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetField : string * System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo&#xA;override this.GetField : string * System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo" Usage="scriptObject.GetField (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="535bb-105">Nazwa pola, które można pobrać.</span><span class="sxs-lookup"><span data-stu-id="535bb-105">The name of the field to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="535bb-106">Bitowe połączenie wartości wyliczenia, który określa, jak jest prowadzone wyszukiwanie dla elementów członkowskich przez odbicie.</span><span class="sxs-lookup"><span data-stu-id="535bb-106">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</span></span></param>
        <summary><span data-ttu-id="535bb-107">Pobiera pola, które ma określoną nazwę.</span><span class="sxs-lookup"><span data-stu-id="535bb-107">Gets a field that has the specified name.</span></span></summary>
        <returns><span data-ttu-id="535bb-108">Pola, które ma określony <paramref name="name" />, lub wartość null, jeśli obiekt skryptów nie zawiera pola.</span><span class="sxs-lookup"><span data-stu-id="535bb-108">A field that has the specified <paramref name="name" />, or null if the script object does not contain the field.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.GetFields(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFields (bindingAttr As BindingFlags) As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetFields : System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo[]&#xA;override this.GetFields : System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo[]" Usage="scriptObject.GetFields bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="535bb-109">Bitowe połączenie wartości wyliczenia, który określa, jak jest prowadzone wyszukiwanie dla elementów członkowskich przez odbicie.</span><span class="sxs-lookup"><span data-stu-id="535bb-109">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</span></span></param>
        <summary><span data-ttu-id="535bb-110">Pobiera tablicę elementów <see cref="T:System.Reflection.FieldInfo" /> obiektów, które odnoszą się do wszystkich pól bieżącego obiektu skryptu.</span><span class="sxs-lookup"><span data-stu-id="535bb-110">Gets an array of <see cref="T:System.Reflection.FieldInfo" /> objects that correspond to all fields of the current script object.</span></span></summary>
        <returns><span data-ttu-id="535bb-111">Tablica obiektów, który zawiera wszystkie pola z bieżącego obiektu skryptu.</span><span class="sxs-lookup"><span data-stu-id="535bb-111">An array of objects that contains all fields of the current script object.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.GetMember(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMember (name As String, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="scriptObject.GetMember (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="535bb-112">Nazwa elementu członkowskiego do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="535bb-112">The name of the member to search for.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="535bb-113">Bitowe połączenie wartości wyliczenia, który określa, jak jest prowadzone wyszukiwanie dla elementów członkowskich przez odbicie.</span><span class="sxs-lookup"><span data-stu-id="535bb-113">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</span></span></param>
        <summary><span data-ttu-id="535bb-114">W przypadku przesłonięcia w klasie pochodnej pobiera tablicę <see cref="T:System.Reflection.MemberInfo" /> obiektów, które odnoszą się do wszystkich elementów członkowskich, które odpowiadają określonej nazwie.</span><span class="sxs-lookup"><span data-stu-id="535bb-114">When overridden in a derived class, gets an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond to all members that match a specified name.</span></span></summary>
        <returns><span data-ttu-id="535bb-115">Tablica obiektów, które odpowiadają <paramref name="name" /> argumentu.</span><span class="sxs-lookup"><span data-stu-id="535bb-115">An array of objects that match the <paramref name="name" /> argument.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.GetMembers(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMembers (bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="scriptObject.GetMembers bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="535bb-116">Bitowe połączenie wartości wyliczenia, który określa, jak jest prowadzone wyszukiwanie dla elementów członkowskich przez odbicie.</span><span class="sxs-lookup"><span data-stu-id="535bb-116">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</span></span></param>
        <summary><span data-ttu-id="535bb-117">W przypadku przesłonięcia w klasie pochodnej pobiera tablicę <see cref="T:System.Reflection.MemberInfo" /> obiektów, które odnoszą się do wszystkich elementów członkowskich bieżącego obiektu skryptu.</span><span class="sxs-lookup"><span data-stu-id="535bb-117">When overridden in a derived class, gets an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond to all members of the current script object.</span></span></summary>
        <returns><span data-ttu-id="535bb-118">Tablica obiektów, który zawiera wszystkie elementy członkowskie bieżącego obiektu skryptu.</span><span class="sxs-lookup"><span data-stu-id="535bb-118">An array of objects that contains all members of the current script object.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethod">
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="535bb-119">Pobiera metodę, która ma określoną nazwę.</span><span class="sxs-lookup"><span data-stu-id="535bb-119">Gets a method that has a specified name.</span></span></summary>
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.GetMethod(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, bindingAttr As BindingFlags) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo" Usage="scriptObject.GetMethod (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="535bb-120">Nazwa metody pobierania.</span><span class="sxs-lookup"><span data-stu-id="535bb-120">The name of the method to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="535bb-121">Bitowe połączenie wartości wyliczenia, który określa, jak jest prowadzone wyszukiwanie dla elementów członkowskich przez odbicie.</span><span class="sxs-lookup"><span data-stu-id="535bb-121">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</span></span></param>
        <summary><span data-ttu-id="535bb-122">Pobiera metodę, która ma określoną nazwę.</span><span class="sxs-lookup"><span data-stu-id="535bb-122">Gets a method that has the specified name.</span></span></summary>
        <returns><span data-ttu-id="535bb-123">Metoda, która ma określony <paramref name="name" />, lub wartość null, jeśli obiekt skryptów nie zawiera metody.</span><span class="sxs-lookup"><span data-stu-id="535bb-123">A method that has the specified <paramref name="name" />, or null if the script object does not contain the method.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="scriptObject.GetMethod (name, bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="535bb-124">Nazwa metody do wyszukiwania.</span><span class="sxs-lookup"><span data-stu-id="535bb-124">The name of the method to search for.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="535bb-125">Bitowe połączenie wartości wyliczenia, który określa, jak jest prowadzone wyszukiwanie dla elementów członkowskich przez odbicie.</span><span class="sxs-lookup"><span data-stu-id="535bb-125">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</span></span></param>
        <param name="binder"><span data-ttu-id="535bb-126">Obiekt, który wykonuje typ konwersja z typu rzeczywistego argumentu typu argumentu formalnego.</span><span class="sxs-lookup"><span data-stu-id="535bb-126">An object that performs type conversion from actual argument type to formal argument type.</span></span></param>
        <param name="types"><span data-ttu-id="535bb-127">Typy parametrów, które są używane do lokalizowania metody dopasowania.</span><span class="sxs-lookup"><span data-stu-id="535bb-127">The parameter types that are used to locate a matching method.</span></span></param>
        <param name="modifiers"><span data-ttu-id="535bb-128">Tablica parametrów modyfikatory, umożliwiające powiązanie działało z podpisami parametru, w których typy zostały zmodyfikowane.</span><span class="sxs-lookup"><span data-stu-id="535bb-128">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</span></span></param>
        <summary><span data-ttu-id="535bb-129">Pobiera metodę, która ma określoną nazwę na podstawie kryteriów określonego zaznaczenia.</span><span class="sxs-lookup"><span data-stu-id="535bb-129">Gets a method that has the specified name by using the specified selection criteria.</span></span></summary>
        <returns><span data-ttu-id="535bb-130">Metoda, która ma określony <paramref name="name" />, lub wartość null, jeśli obiekt skryptów nie zawiera metody.</span><span class="sxs-lookup"><span data-stu-id="535bb-130">A method that has the specified <paramref name="name" />, or null if the script object does not contain the method.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.GetMethods(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMethods (bindingAttr As BindingFlags) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethods : System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo[]&#xA;override this.GetMethods : System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo[]" Usage="scriptObject.GetMethods bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="535bb-131">Bitowe połączenie wartości wyliczenia, który określa, jak jest prowadzone wyszukiwanie dla elementów członkowskich przez odbicie.</span><span class="sxs-lookup"><span data-stu-id="535bb-131">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</span></span></param>
        <summary><span data-ttu-id="535bb-132">Pobiera tablicę elementów <see cref="T:System.Reflection.MethodInfo" /> obiektów, które odnoszą się do wszystkich metod bieżącego obiektu skryptu.</span><span class="sxs-lookup"><span data-stu-id="535bb-132">Gets an array of <see cref="T:System.Reflection.MethodInfo" /> objects that correspond to all methods of the current script object.</span></span></summary>
        <returns><span data-ttu-id="535bb-133">Tablica obiektów zawierająca wszystkie metody bieżącego obiektu skryptu.</span><span class="sxs-lookup"><span data-stu-id="535bb-133">An array of objects that contains all methods of the current script object.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="GetParent">
      <MemberSignature Language="C#" Value="public Microsoft.JScript.ScriptObject GetParent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.JScript.ScriptObject GetParent() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.GetParent" />
      <MemberSignature Language="VB.NET" Value="Public Function GetParent () As ScriptObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::JScript::ScriptObject ^ GetParent();" />
      <MemberSignature Language="F#" Value="member this.GetParent : unit -&gt; Microsoft.JScript.ScriptObject" Usage="scriptObject.GetParent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.ScriptObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="535bb-134">Pobiera odwołanie do obiektu nadrzędnego.</span><span class="sxs-lookup"><span data-stu-id="535bb-134">Gets a reference to the parent object.</span></span></summary>
        <returns><span data-ttu-id="535bb-135">Odwołanie do obiektu nadrzędnego.</span><span class="sxs-lookup"><span data-stu-id="535bb-135">A reference to the parent object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="535bb-136">Element nadrzędny jest obiekt, do którego obiektu skryptu deleguje żądania dla właściwości lub metody, że nie implementuje on sam.</span><span class="sxs-lookup"><span data-stu-id="535bb-136">The parent is the object to which the script object delegates requests for properties or methods that it does not implement itself.</span></span> <span data-ttu-id="535bb-137">Na przykład po utworzeniu <xref:Microsoft.JScript.NumberObject> przy użyciu <xref:Microsoft.JScript.NumberConstructor>, nadrzędny jest <xref:Microsoft.JScript.NumberPrototype>.</span><span class="sxs-lookup"><span data-stu-id="535bb-137">For example, when you create a <xref:Microsoft.JScript.NumberObject> by using a <xref:Microsoft.JScript.NumberConstructor>, the parent is a <xref:Microsoft.JScript.NumberPrototype>.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.GetProperties(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProperties (bindingAttr As BindingFlags) As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo[]&#xA;override this.GetProperties : System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo[]" Usage="scriptObject.GetProperties bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="535bb-138">Bitowe połączenie wartości wyliczenia, który określa, jak jest prowadzone wyszukiwanie dla elementów członkowskich przez odbicie.</span><span class="sxs-lookup"><span data-stu-id="535bb-138">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</span></span></param>
        <summary><span data-ttu-id="535bb-139">Pobiera tablicę elementów <see cref="T:System.Reflection.PropertyInfo" /> obiektów, które odnoszą się do wszystkich właściwości bieżącego obiektu skryptu.</span><span class="sxs-lookup"><span data-stu-id="535bb-139">Gets an array of <see cref="T:System.Reflection.PropertyInfo" /> objects that correspond to all properties of the current script object.</span></span></summary>
        <returns><span data-ttu-id="535bb-140">Tablica obiektów zawiera wszystkie właściwości bieżącego obiektu skryptu.</span><span class="sxs-lookup"><span data-stu-id="535bb-140">An array of objects that contains all properties of the current script object.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperty">
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="535bb-141">Pobiera właściwość, która ma określoną nazwę.</span><span class="sxs-lookup"><span data-stu-id="535bb-141">Gets a property that has a specified name.</span></span></summary>
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.GetProperty(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, bindingAttr As BindingFlags) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo" Usage="scriptObject.GetProperty (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="535bb-142">Nazwa właściwości do pobrania.</span><span class="sxs-lookup"><span data-stu-id="535bb-142">The name of the property to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="535bb-143">Bitowe połączenie wartości wyliczenia, który określa, jak jest prowadzone wyszukiwanie dla elementów członkowskich przez odbicie.</span><span class="sxs-lookup"><span data-stu-id="535bb-143">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</span></span></param>
        <summary><span data-ttu-id="535bb-144">Pobiera właściwość, która ma określoną nazwę.</span><span class="sxs-lookup"><span data-stu-id="535bb-144">Gets a property that has the specified name.</span></span></summary>
        <returns><span data-ttu-id="535bb-145">Właściwość, która ma określony <paramref name="name" />, lub wartość null, jeśli obiekt skryptów nie zawiera właściwości.</span><span class="sxs-lookup"><span data-stu-id="535bb-145">A property that has the specified <paramref name="name" />, or null if the script object does not contain the property.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="scriptObject.GetProperty (name, bindingAttr, binder, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="535bb-146">Nazwa właściwości do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="535bb-146">The name of the property to search for.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="535bb-147">Bitowe połączenie wartości wyliczenia, który określa, jak jest prowadzone wyszukiwanie dla elementów członkowskich przez odbicie.</span><span class="sxs-lookup"><span data-stu-id="535bb-147">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</span></span></param>
        <param name="binder"><span data-ttu-id="535bb-148">Obiekt, który wykonuje typ konwersja z typu rzeczywistego argumentu typu argumentu formalnego.</span><span class="sxs-lookup"><span data-stu-id="535bb-148">An object that performs type conversion from actual argument type to formal argument type.</span></span></param>
        <param name="returnType"><span data-ttu-id="535bb-149">Typ zwracanej wartości, która musi mieć właściwość.</span><span class="sxs-lookup"><span data-stu-id="535bb-149">The type of the return value that the property must have.</span></span></param>
        <param name="types"><span data-ttu-id="535bb-150">Typy indeks właściwości wyszukane.</span><span class="sxs-lookup"><span data-stu-id="535bb-150">The index types of the property being searched for.</span></span> <span data-ttu-id="535bb-151">Używane dla właściwości indeksu, takie jak indeksatora dla klasy.</span><span class="sxs-lookup"><span data-stu-id="535bb-151">Used for index properties, such as the indexer for a class.</span></span></param>
        <param name="modifiers"><span data-ttu-id="535bb-152">Tablica parametrów modyfikatory, umożliwiające powiązanie działało z podpisami parametru, w których typy zostały zmodyfikowane.</span><span class="sxs-lookup"><span data-stu-id="535bb-152">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</span></span></param>
        <summary><span data-ttu-id="535bb-153">Pobiera właściwość, która ma określoną nazwę na podstawie kryteriów określonego zaznaczenia.</span><span class="sxs-lookup"><span data-stu-id="535bb-153">Gets a property that has the specified name by using the specified selection criteria.</span></span></summary>
        <returns><span data-ttu-id="535bb-154">Właściwość, która ma określony <paramref name="name" />, lub wartość null, jeśli obiekt skryptów nie zawiera właściwości.</span><span class="sxs-lookup"><span data-stu-id="535bb-154">A property that has the specified <paramref name="name" />, or null if the script object does not contain the property.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public virtual object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo locale, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo locale, string[] namedParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ locale, cli::array &lt;System::String ^&gt; ^ namedParameters);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Reflection.ParameterModifier[] * System.Globalization.CultureInfo * string[] -&gt; obj&#xA;override this.InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Reflection.ParameterModifier[] * System.Globalization.CultureInfo * string[] -&gt; obj" Usage="scriptObject.InvokeMember (name, invokeAttr, binder, target, args, modifiers, locale, namedParameters)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="locale" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="535bb-155">Nazwa elementu członkowskiego do wywołania.</span><span class="sxs-lookup"><span data-stu-id="535bb-155">The name of the member to invoke.</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="535bb-156">Bitowe połączenie wartości wyliczenia, który określa, jak jest prowadzone wyszukiwanie dla elementów członkowskich przez odbicie.</span><span class="sxs-lookup"><span data-stu-id="535bb-156">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</span></span></param>
        <param name="binder"><span data-ttu-id="535bb-157">Obiekt, który wykonuje typ konwersja z typu rzeczywistego argumentu typu argumentu formalnego.</span><span class="sxs-lookup"><span data-stu-id="535bb-157">An object that performs type conversion from actual argument type to formal argument type.</span></span></param>
        <param name="target"><span data-ttu-id="535bb-158">Obiekt do wywołania elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="535bb-158">The object on which to invoke the member.</span></span> <span data-ttu-id="535bb-159">Musi to być bieżącego obiektu skryptu.</span><span class="sxs-lookup"><span data-stu-id="535bb-159">This must be the current script object.</span></span></param>
        <param name="args"><span data-ttu-id="535bb-160">Tablica obiektów, która zawiera liczbę, kolejność i typ parametrów elementu członkowskiego, do wywołania.</span><span class="sxs-lookup"><span data-stu-id="535bb-160">An array of objects that contains the number, order, and type of the parameters of the member to be invoked.</span></span> <span data-ttu-id="535bb-161">Jest to pusta tablica, jeśli nie ma żadnych parametrów.</span><span class="sxs-lookup"><span data-stu-id="535bb-161">This is an empty array if there are no parameters.</span></span></param>
        <param name="modifiers"><span data-ttu-id="535bb-162">Tablica, która ma taką samą długość jak parametr args.</span><span class="sxs-lookup"><span data-stu-id="535bb-162">An array that has the same length as the args parameter.</span></span> <span data-ttu-id="535bb-163">Reprezentuje atrybuty argument wywołanego elementu członkowskiego w metadanych.</span><span class="sxs-lookup"><span data-stu-id="535bb-163">It represents the invoked member's argument attributes in the metadata.</span></span></param>
        <param name="locale"><span data-ttu-id="535bb-164">Zawiera informacje dotyczące określonej kultury lub ustawień regionalnych.</span><span class="sxs-lookup"><span data-stu-id="535bb-164">Provides information about a specific culture or locale.</span></span> <span data-ttu-id="535bb-165">Używany do formatowania liczb, dat i ciągi poprawnie.</span><span class="sxs-lookup"><span data-stu-id="535bb-165">Used to format numbers, dates, and strings correctly.</span></span></param>
        <param name="namedParameters"><span data-ttu-id="535bb-166">Tablica parametrów.</span><span class="sxs-lookup"><span data-stu-id="535bb-166">An array of parameters.</span></span></param>
        <summary><span data-ttu-id="535bb-167">Wywołuje określony element członkowski.</span><span class="sxs-lookup"><span data-stu-id="535bb-167">Invokes the specified member.</span></span></summary>
        <returns><span data-ttu-id="535bb-168">Wartość zwracana wywołania do elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="535bb-168">The return value of the call to the member.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="535bb-169">Pobiera lub ustawia element członkowski obiektu skryptu.</span><span class="sxs-lookup"><span data-stu-id="535bb-169">Gets or sets a member of the script object.</span></span></summary>
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[double index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(float64)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.JScript.ScriptObject.Item(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Double) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[double] { System::Object ^ get(double index); void set(double index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(double) : obj with get, set" Usage="Microsoft.JScript.ScriptObject.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="535bb-170">Indeks elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="535bb-170">The index of the member.</span></span></param>
        <summary><span data-ttu-id="535bb-171">Pobiera lub ustawia obiekt członkiem skrypt wyznaczony przez określony <see cref="T:System.Double" /> wartość indeksu.</span><span class="sxs-lookup"><span data-stu-id="535bb-171">Gets or sets a member of the script object that is designated by the specified <see cref="T:System.Double" /> index value.</span></span></summary>
        <value><span data-ttu-id="535bb-172">Wartość elementu członkowskiego, który znajduje się w <paramref name="index" />.</span><span class="sxs-lookup"><span data-stu-id="535bb-172">The value of the member that is at <paramref name="index" />.</span></span></value>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.JScript.ScriptObject.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : obj with get, set" Usage="Microsoft.JScript.ScriptObject.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="535bb-173">Indeks elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="535bb-173">The index of the member.</span></span></param>
        <summary><span data-ttu-id="535bb-174">Pobiera lub ustawia obiekt członkiem skrypt wyznaczony przez określony <see cref="T:System.Int32" /> wartość indeksu.</span><span class="sxs-lookup"><span data-stu-id="535bb-174">Gets or sets a member of the script object that is designated by the specified <see cref="T:System.Int32" /> index value.</span></span></summary>
        <value><span data-ttu-id="535bb-175">Wartość elementu członkowskiego, który znajduje się w <paramref name="index" />.</span><span class="sxs-lookup"><span data-stu-id="535bb-175">The value of the member that is at <paramref name="index" />.</span></span></value>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[params object[] pars] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object[])" />
      <MemberSignature Language="DocId" Value="P:Microsoft.JScript.ScriptObject.Item(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(ParamArray pars As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[cli::array &lt;System::Object ^&gt; ^] { System::Object ^ get(... cli::array &lt;System::Object ^&gt; ^ pars); void set(... cli::array &lt;System::Object ^&gt; ^ pars, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj[]) : obj with get, set" Usage="Microsoft.JScript.ScriptObject.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pars" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="pars"><span data-ttu-id="535bb-176">Nazwę lub indeks elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="535bb-176">The name or index of the member.</span></span></param>
        <summary><span data-ttu-id="535bb-177">Pobiera lub ustawia członka obiektu skryptu, która została wyznaczona z określoną nazwą <see cref="T:System.Double" /> wartość, indeksu lub <see cref="T:System.Int32" /> wartość indeksu.</span><span class="sxs-lookup"><span data-stu-id="535bb-177">Gets or sets a member of the script object that is designated by the specified name, <see cref="T:System.Double" /> index value, or <see cref="T:System.Int32" /> index value.</span></span></summary>
        <value><span data-ttu-id="535bb-178">Wartość elementu członkowskiego, który jest określony w <paramref name="pars" />.</span><span class="sxs-lookup"><span data-stu-id="535bb-178">The value of the member that is specified in <paramref name="pars" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="535bb-179">Jeśli `pars` tablica ma więcej niż jeden element, ostatni element jest argumentem dla tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="535bb-179">If the `pars` array has more than one element, the last element is the argument for this property.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string name] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.JScript.ScriptObject.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ name); void set(System::String ^ name, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : obj with get, set" Usage="Microsoft.JScript.ScriptObject.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="535bb-180">Nazwa elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="535bb-180">The name of the member.</span></span></param>
        <summary><span data-ttu-id="535bb-181">Pobiera lub ustawia element członkowski obiektu skryptu, który jest wyznaczony z określoną nazwą.</span><span class="sxs-lookup"><span data-stu-id="535bb-181">Gets or sets a member of the script object that is designated by the specified name.</span></span></summary>
        <value><span data-ttu-id="535bb-182">Wartość elementu członkowskiego, który nosi nazwę <paramref name="name" />.</span><span class="sxs-lookup"><span data-stu-id="535bb-182">The value of the member that is named <paramref name="name" />.</span></span></value>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="parent">
      <MemberSignature Language="C#" Value="protected Microsoft.JScript.ScriptObject parent;" />
      <MemberSignature Language="ILAsm" Value=".field family class Microsoft.JScript.ScriptObject parent" />
      <MemberSignature Language="DocId" Value="F:Microsoft.JScript.ScriptObject.parent" />
      <MemberSignature Language="VB.NET" Value="Protected parent As ScriptObject " />
      <MemberSignature Language="C++ CLI" Value="protected: Microsoft::JScript::ScriptObject ^ parent;" />
      <MemberSignature Language="F#" Value="val mutable parent : Microsoft.JScript.ScriptObject" Usage="Microsoft.JScript.ScriptObject.parent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.ScriptObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="535bb-183">Zawiera odwołanie do obiektu nadrzędnego.</span><span class="sxs-lookup"><span data-stu-id="535bb-183">Stores a reference to the parent object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="535bb-184">Element nadrzędny jest obiekt, do którego obiektu skryptu deleguje żądania dla właściwości lub metody, że nie implementuje on sam.</span><span class="sxs-lookup"><span data-stu-id="535bb-184">The parent is the object to which the script object delegates requests for properties or methods that it does not implement itself.</span></span> <span data-ttu-id="535bb-185">Na przykład po utworzeniu <xref:Microsoft.JScript.NumberObject> przy użyciu <xref:Microsoft.JScript.NumberConstructor>, nadrzędny jest <xref:Microsoft.JScript.NumberPrototype>.</span><span class="sxs-lookup"><span data-stu-id="535bb-185">For example, when you create a <xref:Microsoft.JScript.NumberObject> by using a <xref:Microsoft.JScript.NumberConstructor>, the parent is a <xref:Microsoft.JScript.NumberPrototype>.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public virtual Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.JScript.ScriptObject.UnderlyingSystemType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property UnderlyingSystemType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ UnderlyingSystemType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingSystemType : Type" Usage="Microsoft.JScript.ScriptObject.UnderlyingSystemType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Reflection.IReflect.UnderlyingSystemType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="535bb-186">Pobiera typ obiektu skryptu.</span><span class="sxs-lookup"><span data-stu-id="535bb-186">Gets the type of the script object.</span></span></summary>
        <value><span data-ttu-id="535bb-187">Typ obiektu skryptu.</span><span class="sxs-lookup"><span data-stu-id="535bb-187">The type of the script object.</span></span></value>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WrapMembers">
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="535bb-188">Tworzy *opakowane* obiektów.</span><span class="sxs-lookup"><span data-stu-id="535bb-188">Creates *wrapped* objects.</span></span> <span data-ttu-id="535bb-189">Każdy obiekt opakowana zawiera informacje dotyczące jednego członka (pole, właściwość lub metoda), wraz z kopią wystąpień obiektu, który zdefiniowana jest składowa.</span><span class="sxs-lookup"><span data-stu-id="535bb-189">Each wrapped object contains the information for one member (field, property, or method), together with a copy of the instantiated object that the member is defined on.</span></span> <span data-ttu-id="535bb-190">Dzięki temu inne obiekty, które nie zawierają elementu członkowskiego, zapisz go, a następnie wróć jego wartości, tak jakby ich własnych.</span><span class="sxs-lookup"><span data-stu-id="535bb-190">This enables other objects that do not contain the member to store it and then return its value as if it were their own.</span></span></summary>
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </MemberGroup>
    <Member MemberName="WrapMembers">
      <MemberSignature Language="C#" Value="protected static System.Reflection.MemberInfo[] WrapMembers (System.Reflection.MemberInfo member, object obj);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Reflection.MemberInfo[] WrapMembers(class System.Reflection.MemberInfo member, object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function WrapMembers (member As MemberInfo, obj As Object) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ WrapMembers(System::Reflection::MemberInfo ^ member, System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member WrapMembers : System.Reflection.MemberInfo * obj -&gt; System.Reflection.MemberInfo[]" Usage="Microsoft.JScript.ScriptObject.WrapMembers (member, obj)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="member"><span data-ttu-id="535bb-191">Element członkowski do opakowania.</span><span class="sxs-lookup"><span data-stu-id="535bb-191">The member to wrap.</span></span></param>
        <param name="obj"><span data-ttu-id="535bb-192">Obiekt, <paramref name="member" /> jest zdefiniowany w.</span><span class="sxs-lookup"><span data-stu-id="535bb-192">The object that <paramref name="member" /> is defined on.</span></span></param>
        <summary><span data-ttu-id="535bb-193">Tworzy obiekt opakowany, który zawiera określony element członkowski wraz z określonego obiektu.</span><span class="sxs-lookup"><span data-stu-id="535bb-193">Creates a wrapped object that contains the specified member together with the specified object.</span></span></summary>
        <returns><span data-ttu-id="535bb-194">Tablica jednego elementu, która została opakowana obiekt, który zawiera informacje o członku i <paramref name="obj" />.</span><span class="sxs-lookup"><span data-stu-id="535bb-194">A one-element array that has a wrapped object that contains the member information and <paramref name="obj" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="535bb-195">Ta metoda zapewnia inne obiekty, które nie zawierają elementu członkowskiego, zapisz go, a następnie wróć jego wartości, tak jakby ich własnych.</span><span class="sxs-lookup"><span data-stu-id="535bb-195">This method enables other objects that do not contain the member to store it and then return its value as if it were their own.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="WrapMembers">
      <MemberSignature Language="C#" Value="protected static System.Reflection.MemberInfo[] WrapMembers (System.Reflection.MemberInfo[] members, object obj);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Reflection.MemberInfo[] WrapMembers(class System.Reflection.MemberInfo[] members, object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function WrapMembers (members As MemberInfo(), obj As Object) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ WrapMembers(cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ members, System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member WrapMembers : System.Reflection.MemberInfo[] * obj -&gt; System.Reflection.MemberInfo[]" Usage="Microsoft.JScript.ScriptObject.WrapMembers (members, obj)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="members" Type="System.Reflection.MemberInfo[]" />
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="members"><span data-ttu-id="535bb-196">Elementy członkowskie do opakowania.</span><span class="sxs-lookup"><span data-stu-id="535bb-196">The members to wrap.</span></span></param>
        <param name="obj"><span data-ttu-id="535bb-197">Obiekt, <paramref name="members" /> wobec.</span><span class="sxs-lookup"><span data-stu-id="535bb-197">The object that <paramref name="members" /> are defined on.</span></span></param>
        <summary><span data-ttu-id="535bb-198">Tworzy tablicę opakowana obiektów, które zawierają określone elementy członkowskie wraz z określonego obiektu.</span><span class="sxs-lookup"><span data-stu-id="535bb-198">Creates an array of wrapped objects that contain the specified members together with the specified object.</span></span></summary>
        <returns><span data-ttu-id="535bb-199">Tablica obiektów opakowanej, z których każdy zawiera informacje o członku i kopię <paramref name="obj" />.</span><span class="sxs-lookup"><span data-stu-id="535bb-199">An array of wrapped objects, each of which contains member information and a copy of <paramref name="obj" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="535bb-200">Ta metoda zapewnia inne obiekty, które nie zawierają tych członków, przechowywać je, a następnie wróć ich wartości, tak jakby swoje własne.</span><span class="sxs-lookup"><span data-stu-id="535bb-200">This method enables other objects that do not contain these members to store them and then return their values as if they were their own.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
    <Member MemberName="WrapMembers">
      <MemberSignature Language="C#" Value="protected static System.Reflection.MemberInfo[] WrapMembers (System.Reflection.MemberInfo[] members, object obj, Microsoft.JScript.SimpleHashtable cache);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Reflection.MemberInfo[] WrapMembers(class System.Reflection.MemberInfo[] members, object obj, class Microsoft.JScript.SimpleHashtable cache) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo[],System.Object,Microsoft.JScript.SimpleHashtable)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function WrapMembers (members As MemberInfo(), obj As Object, cache As SimpleHashtable) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ WrapMembers(cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ members, System::Object ^ obj, Microsoft::JScript::SimpleHashtable ^ cache);" />
      <MemberSignature Language="F#" Value="static member WrapMembers : System.Reflection.MemberInfo[] * obj * Microsoft.JScript.SimpleHashtable -&gt; System.Reflection.MemberInfo[]" Usage="Microsoft.JScript.ScriptObject.WrapMembers (members, obj, cache)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="members" Type="System.Reflection.MemberInfo[]" />
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="cache" Type="Microsoft.JScript.SimpleHashtable" />
      </Parameters>
      <Docs>
        <param name="members"><span data-ttu-id="535bb-201">Elementy członkowskie do opakowania.</span><span class="sxs-lookup"><span data-stu-id="535bb-201">The members to wrap.</span></span></param>
        <param name="obj"><span data-ttu-id="535bb-202">Obiekt, <paramref name="members" /> wobec.</span><span class="sxs-lookup"><span data-stu-id="535bb-202">The object that <paramref name="members" /> are defined on.</span></span></param>
        <param name="cache"><span data-ttu-id="535bb-203">Magazyn danych tymczasowych obiektów opakowana.</span><span class="sxs-lookup"><span data-stu-id="535bb-203">Temporary data storage for the wrapped objects.</span></span></param>
        <summary><span data-ttu-id="535bb-204">Tworzy tablicę opakowana obiektów, które zawierają określone elementy członkowskie razem z określonym obiektem, buforowanie wyników w magazynie określone dane.</span><span class="sxs-lookup"><span data-stu-id="535bb-204">Creates an array of wrapped objects that contain the specified members together with the specified object, caching the results in the specified data storage.</span></span></summary>
        <returns><span data-ttu-id="535bb-205">Tablica obiektów opakowanej, z których każdy zawiera informacje o członku i kopię <paramref name="obj" />.</span><span class="sxs-lookup"><span data-stu-id="535bb-205">An array of wrapped objects, each of which contains member information and a copy of <paramref name="obj" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="535bb-206">Ta metoda zapewnia inne obiekty, które nie zawierają tych członków, przechowywać je, a następnie wróć ich wartości, tak jakby swoje własne.</span><span class="sxs-lookup"><span data-stu-id="535bb-206">This method enables other objects that do not contain these members to store them and then return their values as if they were their own.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.ActivationObject" />
        <altmember cref="T:Microsoft.JScript.JSObject" />
        <altmember cref="T:System.Reflection.IReflect" />
      </Docs>
    </Member>
  </Members>
</Type>