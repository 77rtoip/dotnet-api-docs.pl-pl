<Type Name="Try" FullName="Microsoft.JScript.Try">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6ca63bc195c138a3e00824432aa93bd50f5ccc39" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69290934" /></Metadata><TypeSignature Language="C#" Value="public sealed class Try : Microsoft.JScript.AST" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Try extends Microsoft.JScript.AST" />
  <TypeSignature Language="DocId" Value="T:Microsoft.JScript.Try" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Try&#xA;Inherits AST" />
  <TypeSignature Language="C++ CLI" Value="public ref class Try sealed : Microsoft::JScript::AST" />
  <TypeSignature Language="F#" Value="type Try = class&#xA;    inherit AST" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.JScript</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.JScript.AST</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Identyfikuje bloki kodu do uruchomienia w zakresach obsługi błędów. Ta klasa należy do kategorii drzewa składni abstrakcyjnej.</summary>
    <remarks>To be added.</remarks>
    <forInternalUseOnly />
  </Docs>
  <Members>
    <Member MemberName="JScriptExceptionValue">
      <MemberSignature Language="C#" Value="public static object JScriptExceptionValue (object e, Microsoft.JScript.Vsa.VsaEngine engine);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object JScriptExceptionValue(object e, class Microsoft.JScript.Vsa.VsaEngine engine) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.Try.JScriptExceptionValue(System.Object,Microsoft.JScript.Vsa.VsaEngine)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function JScriptExceptionValue (e As Object, engine As VsaEngine) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ JScriptExceptionValue(System::Object ^ e, Microsoft::JScript::Vsa::VsaEngine ^ engine);" />
      <MemberSignature Language="F#" Value="static member JScriptExceptionValue : obj * Microsoft.JScript.Vsa.VsaEngine -&gt; obj" Usage="Microsoft.JScript.Try.JScriptExceptionValue (e, engine)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Object" />
        <Parameter Name="engine" Type="Microsoft.JScript.Vsa.VsaEngine" />
      </Parameters>
      <Docs>
        <param name="e">Obiekt, który reprezentuje wyjątek.</param>
        <param name="engine">Odwołanie do aparatu skryptów.</param>
        <summary>Zwraca określony obiekt jako wyjątek, konwertując go na określony <see cref="T:Microsoft.JScript.JScriptException" /> , jeśli może.</summary>
        <returns>Wyjątek <paramref name="e" />przekonwertowany na określony <see cref="T:Microsoft.JScript.JScriptException" /> , jeśli jest to możliwe.</returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.JScriptException" />
        <altmember cref="T:Microsoft.JScript.JSError" />
      </Docs>
    </Member>
    <Member MemberName="PushHandlerScope">
      <MemberSignature Language="C#" Value="public static void PushHandlerScope (Microsoft.JScript.Vsa.VsaEngine engine, string id, int scopeId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PushHandlerScope(class Microsoft.JScript.Vsa.VsaEngine engine, string id, int32 scopeId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.Try.PushHandlerScope(Microsoft.JScript.Vsa.VsaEngine,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PushHandlerScope (engine As VsaEngine, id As String, scopeId As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PushHandlerScope(Microsoft::JScript::Vsa::VsaEngine ^ engine, System::String ^ id, int scopeId);" />
      <MemberSignature Language="F#" Value="static member PushHandlerScope : Microsoft.JScript.Vsa.VsaEngine * string * int -&gt; unit" Usage="Microsoft.JScript.Try.PushHandlerScope (engine, id, scopeId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="engine" Type="Microsoft.JScript.Vsa.VsaEngine" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="scopeId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="engine">Odwołanie do aparatu skryptów.</param>
        <param name="id">Nazwa zakresu <see langword="try" /> bloku.</param>
        <param name="scopeId">Identyfikator zakresu <see langword="try" /> bloku.</param>
        <summary>Tworzy nowy <see cref="T:Microsoft.JScript.BlockScope" /> obiekt <see langword="try" /> dla bloku i wypchnij go na stos zakresu globalnego.</summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
  </Members>
</Type>
