<Type Name="ExportAttribute" FullName="System.Composition.ExportAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e3062ea9cf51e736c2443f4d62d1f8dae5b38e9d" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39842718" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ExportAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ExportAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Composition.ExportAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class ExportAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExportAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type ExportAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Composition.AttributedModel</AssemblyName>
    <AssemblyVersion>1.0.31.0</AssemblyVersion>
    <AssemblyVersion>1.0.32.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.1;netcore-2.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Property, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Określa, że typów, właściwości, pola lub metody zapewnia określonego eksportu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
W modelu programowania opartego na atrybutach atrybut ExportAttribute deklaruje, że eksportuje element, czy stanowi do kontenera kompozycji, obiekt, który spełnia określonej umowy. Podczas tworzenia części za pomocą importów, które pasują do umów zależnościami tych uzupełnione przez eksportowanego obiektu.

Atrybut ExportAttribute można zastosować do pola cała klasa lub właściwość lub metoda klasy. Jeśli ma zastosowanie do całej klasy, wystąpienia klasy jest eksportowanego obiektu. Jeśli jest on stosowany do składowej klasy, eksportowanego obiektu będzie wartość tego elementu członkowskiego.

Określa, czy kontrakt odpowiada wynika przede wszystkim Nazwa kontraktu i typ umowy. Aby uzyskać więcej informacji, zobacz <xref:System.Composition.ImportAttribute> odwołania. 



## Examples  
 Poniższy przykład pokazuje ExportAttribute stosowane do trzech klas i trzy importów, odpowiadające im.  

```csharp
//Default export infers type and contract name from the
//exported type.  This is the preferred method.
[Export]
public class MyExport1
{
    public String data = "Test Data 1.";
}

public class MyImporter1
{
    [Import]
    public MyExport1 importedMember { get; set; }
}

public interface MyInterface
{

}

//Specifying the contract type may be important if
//you want to export a type other then the base type,
//such as an interface.
[Export(typeof(MyInterface))]
public class MyExport2 : MyInterface
{
    public String data = "Test Data 2.";
}

public class MyImporter2
{
    //The import must match the contract type!
    [Import(typeof(MyInterface))]
    public MyExport2 importedMember { get; set; }
}

//Specifying a contract name should only be 
//needed in rare caes. Usually, using metadata
//is a better approach.
[Export("MyContractName", typeof(MyInterface))]
public class MyExport3 : MyInterface
{
    public String data = "Test Data 3.";
}

public class MyImporter3
{
    //Both contract name and type must match!
    [Import("MyContractName", typeof(MyInterface))]
    public MyExport3 importedMember { get; set; }
}

class Program
{      

    static void Main(string[] args)
    {
        AggregateCatalog catalog = new AggregateCatalog();
        catalog.Catalogs.Add(new AssemblyCatalog(typeof(MyExport1).Assembly));
        CompositionContainer _container = new CompositionContainer(catalog);
        MyImporter1 test1 = new MyImporter1();
        MyImporter2 test2 = new MyImporter2();
        MyImporter3 test3 = new MyImporter3();
        _container.SatisfyImportsOnce(test1);
        _container.SatisfyImportsOnce(test2);
        _container.SatisfyImportsOnce(test3);
        Console.WriteLine(test1.importedMember.data);
        Console.WriteLine(test2.importedMember.data);
        Console.WriteLine(test3.importedMember.data);
        Console.ReadLine();

    }
}
```

```vb
'Default export infers type and contract name from the
'exported type.  This is the preferred method.
<Export()>
Public Class MyExport1
    Public ReadOnly Property data As String
        Get
            Return "Test Data 1."
        End Get
    End Property
End Class

Public Class MyImporter1

    <Import()>
    Public Property ImportedMember As MyExport1

End Class

Public Interface MyInterface

End Interface

'Specifying the contract type may be important if
'you want to export a type other then the base type,
'such as an interface.
<Export(GetType(MyInterface))>
Public Class MyExport2
    Implements MyInterface
    Public ReadOnly Property data As String
        Get
            Return "Test Data 2."
        End Get
    End Property
End Class

Public Class MyImporter2
    'The import must match the contract type!
    <Import(GetType(MyInterface))>
    Public Property ImportedMember As MyExport2
End Class

'Specifying a contract name should only be 
'needed in rare caes. Usually, using metadata
'is a better approach.
<Export("MyContractName", GetType(MyInterface))>
Public Class MyExport3
    Implements MyInterface
    Public ReadOnly Property data As String
        Get
            Return "Test Data 3."
        End Get
    End Property
End Class

Public Class MyImporter3
    'Both contract name and type must match!
    <Import("MyContractName", GetType(MyInterface))>
    Public Property ImportedMember As MyExport3
End Class



Sub Main()
    Dim catalog As AggregateCatalog = New AggregateCatalog()
    catalog.Catalogs.Add(New AssemblyCatalog(GetType(MyExport1).Assembly))
    Dim container As CompositionContainer = New CompositionContainer(catalog)
    Dim test1 As MyImporter1 = New MyImporter1()
    Dim test2 As MyImporter2 = New MyImporter2()
    Dim test3 As MyImporter3 = New MyImporter3()
    container.SatisfyImportsOnce(test1)
    container.SatisfyImportsOnce(test2)
    container.SatisfyImportsOnce(test3)
    Console.WriteLine(test1.ImportedMember.data)
    Console.WriteLine(test2.ImportedMember.data)
    Console.WriteLine(test3.ImportedMember.data)
    Console.ReadLine()
End Sub
```

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExportAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.ExportAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExportAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.AttributedModel</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Composition.ExportAttribute" /> klasa, eksportowanie typu lub elementu członkowskiego oznaczona przy użyciu tego atrybutu w obszarze domyślna nazwa kontraktu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Metody, które są oznaczone przez atrybut ten należy określić nazwę kontraktu lub typu przy użyciu <xref:System.ComponentModel.Composition.ExportAttribute.%23ctor(System.String)> lub <xref:System.ComponentModel.Composition.ExportAttribute.%23ctor(System.Type)> metody.

Nazwa kontraktu jest porównywana za pomocą <xref:System.StringComparer.Ordinal> właściwość, aby wykonać porównanie niejęzykowe, wielkość liter. 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExportAttribute (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.ExportAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (contractName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExportAttribute(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="new System.Composition.ExportAttribute : string -&gt; System.Composition.ExportAttribute" Usage="new System.Composition.ExportAttribute contractName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.AttributedModel</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="contractName">Nazwa kontraktu, który jest używany do eksportowania typu lub elementu członkowskiego, z tym atrybutem lub <see langword="null" /> ani być pustym ciągiem ("") można używać domyślnej nazwy kontraktu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Composition.ExportAttribute" /> klasa, eksportowanie typu lub elementu członkowskiego oznaczona przy użyciu tego atrybutu w obszarze nazwy określonej umowy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Metody, które są oznaczone przez atrybut ten należy określić nazwę kontraktu lub typu przy użyciu <xref:System.ComponentModel.Composition.ExportAttribute.%23ctor(System.String)> lub <xref:System.ComponentModel.Composition.ExportAttribute.%23ctor(System.Type)> metody.

Nazwa kontraktu jest porównywana za pomocą <xref:System.StringComparer.Ordinal> właściwość, aby wykonać porównanie niejęzykowe, wielkość liter. 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExportAttribute (Type contractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type contractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.ExportAttribute.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (contractType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExportAttribute(Type ^ contractType);" />
      <MemberSignature Language="F#" Value="new System.Composition.ExportAttribute : Type -&gt; System.Composition.ExportAttribute" Usage="new System.Composition.ExportAttribute contractType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.AttributedModel</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="contractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="contractType">Typ, z którego pochodzi z nazwą kontraktu, który jest używany do eksportowania typu lub elementu członkowskiego, z tym atrybutem lub <see langword="null" /> do Użyj domyślnej nazwy kontraktu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Composition.ExportAttribute" /> klasa, eksportowanie typu lub elementu członkowskiego oznaczona przy użyciu tego atrybutu w obszarze nazwy kontraktu, pochodzi z określonego typu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Metody, które są oznaczone przez atrybut ten należy określić nazwę kontraktu lub typu przy użyciu <xref:System.ComponentModel.Composition.ExportAttribute.%23ctor(System.String)> lub <xref:System.ComponentModel.Composition.ExportAttribute.%23ctor(System.Type)> metody.

Nazwa kontraktu jest porównywana za pomocą <xref:System.StringComparer.Ordinal> właściwość, aby wykonać porównanie niejęzykowe, wielkość liter. 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExportAttribute (string contractName, Type contractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string contractName, class System.Type contractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.ExportAttribute.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (contractName As String, contractType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExportAttribute(System::String ^ contractName, Type ^ contractType);" />
      <MemberSignature Language="F#" Value="new System.Composition.ExportAttribute : string * Type -&gt; System.Composition.ExportAttribute" Usage="new System.Composition.ExportAttribute (contractName, contractType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.AttributedModel</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="contractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="contractName">Nazwa kontraktu, który jest używany do eksportowania typu lub elementu członkowskiego, z tym atrybutem lub <see langword="null" /> ani być pustym ciągiem ("") można używać domyślnej nazwy kontraktu.</param>
        <param name="contractType">Typ do wyeksportowania.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Composition.ExportAttribute" /> klasy, eksportowanie określonego typu, w obszarze nazwy określonej umowy.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ContractName">
      <MemberSignature Language="C#" Value="public string ContractName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContractName" />
      <MemberSignature Language="DocId" Value="P:System.Composition.ExportAttribute.ContractName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContractName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ContractName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContractName : string" Usage="System.Composition.ExportAttribute.ContractName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.AttributedModel</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę kontraktu, który jest używany do eksportowania typu lub elementu członkowskiego, z tym atrybutem.</summary>
        <value>Nazwa kontraktu, który jest używany do eksportowania typu lub elementu członkowskiego, z tym atrybutem. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ContractType">
      <MemberSignature Language="C#" Value="public Type ContractType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ContractType" />
      <MemberSignature Language="DocId" Value="P:System.Composition.ExportAttribute.ContractType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContractType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ContractType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContractType : Type" Usage="System.Composition.ExportAttribute.ContractType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.AttributedModel</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera typ kontraktu, który został wyeksportowany przez członka, która jest oznaczona przez atrybut.</summary>
        <value>Typ eksportu należy podać. Wartość domyślna to <see langword="null" />, co oznacza, że typ będzie można uzyskać, analizując typ elementu członkowskiego, który tego eksportu jest dołączony do.</value>
        <remarks></remarks>
      </Docs>
    </Member>
  </Members>
</Type>