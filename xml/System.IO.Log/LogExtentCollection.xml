<Type Name="LogExtentCollection" FullName="System.IO.Log.LogExtentCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ab035f0f66968d74f0cf944bf6f180d88692e1f0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30455154" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class LogExtentCollection : System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogExtent&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LogExtentCollection extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;class System.IO.Log.LogExtent&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.LogExtentCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LogExtentCollection&#xA;Implements IEnumerable(Of LogExtent)" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogExtentCollection sealed : System::Collections::Generic::IEnumerable&lt;System::IO::Log::LogExtent ^&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogExtent&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Reprezentuje kolekcję <see cref="T:System.IO.Log.LogExtent" /> obiekty skojarzone z <see cref="T:System.IO.Log.LogStore" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa zawiera kolekcję <xref:System.IO.Log.LogExtent> obiekty skojarzone z <xref:System.IO.Log.LogStore>. A <xref:System.IO.Log.LogStore> wystąpienia przechowuje dane w kolekcji zakresów dysków, reprezentowany przez <xref:System.IO.Log.LogExtent> wystąpień. Określonego <xref:System.IO.Log.LogExtent> jest skojarzony z jednym <xref:System.IO.Log.LogStore>, i <xref:System.IO.Log.LogExtent> obiektów w tym samym <xref:System.IO.Log.LogStore> mają taki sam rozmiar. Miejsce jest dodawane do i usuwane z <xref:System.IO.Log.LogStore> wystąpienia w przyrostach zakresu.  
  
 Mimo że <xref:System.IO.Log.LogExtent> obiekty są reprezentowane na dysku jako pliki, ich powinien nie przeniesiony lub usunięty jako normalne pliki. Zamiast, należy użyć metody dostarczone przez tę klasę, dodawania i usuwania <xref:System.IO.Log.LogExtent> wystąpienia bezpośrednio. Zakresy zazwyczaj usuwane, gdy nie zawierają żadnych aktywnych danych. Jednak jeśli `force` parametru w <xref:System.IO.Log.LogExtentCollection.Remove%2A> jest metoda `true`, jest zwracany wyjątek, jeśli nie można usunąć natychmiast.  
  
 Nie można usunąć ostatniego zakres w <xref:System.IO.Log.LogExtentCollection>, co oznacza, że <xref:System.IO.Log.LogExtentCollection.Count%2A> właściwość nie może mieć zerowej po dodaniu zakresu.  
  
   
  
## Examples  
 Ten przykład przedstawia sposób użycia <xref:System.IO.Log.LogExtent> i <xref:System.IO.Log.LogExtentCollection> klasy, aby dodać i emulować zakresów w sekwencji dziennika.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Log.LogExtent" />
    <altmember cref="T:System.IO.Log.LogStore" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy nowy <see cref="T:System.IO.Log.LogExtent" /> i dodaje go do kolekcji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Add(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka do dodania rozmiaru dziennika.</param>
        <summary>Dodaje <see cref="T:System.IO.Log.LogExtent" /> wystąpienie do kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rozmiar nowo dodanego <xref:System.IO.Log.LogExtent> wystąpienie jest taki sam jak rozmiar istniejących <xref:System.IO.Log.LogExtent> wystąpień w kolekcji.  
  
> [!NOTE]
>  Nie używaj tej metody, aby dodać pierwszy <xref:System.IO.Log.LogExtent> do kolekcji.  
  
   
  
## Examples  
 Ten przykład przedstawia sposób użycia <xref:System.IO.Log.LogExtent> i <xref:System.IO.Log.LogExtentCollection> klasy, aby dodać i emulować zakresów w sekwencji dziennika.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Nazwa pliku magazynu dziennika określony przez <paramref name="path" /> jest nieprawidłowy.</exception>
        <exception cref="T:System.InvalidOperationException">Należy podać rozmiar dla pierwszego zakresu.</exception>
        <exception cref="T:System.IO.IOException">Nie można wykonać żądania z powodu nieoczekiwanego wyjątku We/Wy.  
  
 —lub—  
  
 Plik określony przez <paramref name="path" /> nie można utworzyć, ponieważ plik lub katalog już istnieje.</exception>
        <exception cref="T:System.ObjectDisposedException">Metoda została wywołana po sekwencji został zlikwidowany.</exception>
        <exception cref="T:System.OutOfMemoryException">Nie ma wystarczającej ilości pamięci, aby kontynuować wykonywanie programu.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">Sekwencja rekordów jest pełna.  
  
 —lub—  
  
 Dysk magazynu lub nośnik jest pełny.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Odmowa dostępu do magazynu określony dziennik przez system operacyjny.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string path, long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string path, int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Add(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (path As String, size As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ path, long size);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka w zakresie dziennika.</param>
        <param name="size">Rozmiar zakresu dziennika.</param>
        <summary>Tworzy nową <see cref="T:System.IO.Log.LogExtent" /> o określonym rozmiarze i dodaje go do kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli kolekcja nie jest pusta, określony rozmiar musi być przynajmniej tak duże jak rozmiar innych zakresów w kolekcji. W takim przypadku `size` parametr jest ignorowany i zakres jest tworzony za taki sam rozmiar jak innych zakresów w kolekcji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> lub <paramref name="size" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="archiveTail" /> nie jest w prawidłowym zakresie.</exception>
        <exception cref="T:System.ArgumentException">Nazwa pliku magazynu dziennika określony przez <paramref name="path" /> jest nieprawidłowy.  
  
 <paramref name="size" /> jest mniejszy niż rozmiar innych zakresów w magazynie.</exception>
        <exception cref="T:System.InvalidOperationException">Należy podać rozmiar dla pierwszego zakresu.  
  
 —lub—  
  
 Nie można używać zduplikowanej nazwy zakresu.</exception>
        <exception cref="T:System.IO.IOException">Nie można wykonać żądania z powodu nieoczekiwanego wyjątku We/Wy.  
  
 —lub—  
  
 Plik określony przez <paramref name="path" /> nie można utworzyć, ponieważ plik lub katalog już istnieje.</exception>
        <exception cref="T:System.ObjectDisposedException">Metoda została wywołana po sekwencji został zlikwidowany.</exception>
        <exception cref="T:System.OutOfMemoryException">Nie ma wystarczającej ilości pamięci, aby kontynuować wykonywanie programu.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">Sekwencja rekordów jest pełna.  
  
 —lub—  
  
 Dysk magazynu lub nośnik jest pełny.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Odmowa dostępu do magazynu określony dziennik przez system operacyjny.</exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogExtentCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę zakresów dziennika w kolekcji.</summary>
        <value>Liczba zakresów dziennika w kolekcji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Ten przykład przedstawia sposób użycia <xref:System.IO.Log.LogExtent> i <xref:System.IO.Log.LogExtentCollection> klasy, aby dodać i emulować zakresów w sekwencji dziennika.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Magazynu dziennika został zlikwidowany.</exception>
      </Docs>
    </Member>
    <Member MemberName="FreeCount">
      <MemberSignature Language="C#" Value="public int FreeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FreeCount" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogExtentCollection.FreeCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FreeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int FreeCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę wolnego <see cref="T:System.IO.Log.LogExtent" /> wystąpień w kolekcji, oznacza to, że liczba <see cref="T:System.IO.Log.LogExtent" /> wystąpień, które nie zawierają żadnych danych.</summary>
        <value>Liczba wolnych <see cref="T:System.IO.Log.LogExtent" /> wystąpień w kolekcji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Ten przykład przedstawia sposób użycia <xref:System.IO.Log.LogExtent> i <xref:System.IO.Log.LogExtentCollection> klasy, aby dodać i emulować zakresów w sekwencji dziennika.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Magazynu dziennika został zlikwidowany.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.IO.Log.LogExtent&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of LogExtent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;System::IO::Log::LogExtent ^&gt; ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera moduł wyliczający dla <see cref="T:System.IO.Log.LogExtent" /> wystąpień w tej kolekcji. Ta metoda nie może być dziedziczona.</summary>
        <returns>Moduł wyliczający dla <see cref="T:System.IO.Log.LogExtent" /> wystąpień w tej kolekcji.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException">Nie można wykonać żądania z powodu nieoczekiwanego wyjątku We/Wy.</exception>
        <exception cref="T:System.InvalidOperationException">Operacja jest nieprawidłowa dla jednego z następujących powodów:  
  
-   Wyliczanie zostało zakończone.  
  
-   Kolekcja została zmodyfikowana.  
  
-   Wyliczanie nie rozpoczęło. Wywołanie <see cref="M:System.Collections.IEnumerator.MoveNext" /> muszą być wprowadzane.</exception>
        <exception cref="T:System.ObjectDisposedException">Metoda została wywołana po sekwencji został zlikwidowany.</exception>
        <exception cref="T:System.OutOfMemoryException">Nie ma wystarczającej ilości pamięci, aby kontynuować wykonywanie programu.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">Sekwencja rekordów jest pełna.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Odmowa dostępu do magazynu określony dziennik przez system operacyjny.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Usuwa <see cref="T:System.IO.Log.LogExtent" /> wystąpienia z kolekcji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.IO.Log.LogExtent extent, bool force);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.IO.Log.LogExtent extent, bool force) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Remove(System.IO.Log.LogExtent,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (extent As LogExtent, force As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::IO::Log::LogExtent ^ extent, bool force);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extent" Type="System.IO.Log.LogExtent" />
        <Parameter Name="force" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="extent">
          <see cref="T:System.IO.Log.LogExtent" /> Wystąpienie do usunięcia.</param>
        <param name="force">
          <see langword="true" /> Jeśli zakres powinna zostać usunięta natychmiast; w przeciwnym razie <see langword="false" />.</param>
        <summary>Usuwa określoną <see cref="T:System.IO.Log.LogExtent" /> wystąpienia z kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.IO.Log.LogExtent> wystąpienie może być usunięty z kolekcji tylko wtedy, gdy nie jest częścią aktywnego regionu <xref:System.IO.Log.LogStore>. Jeśli `force` parametr jest `true` i nie można bezpośrednio usunąć zakres, jest zgłaszany wyjątek. Jeśli `force` parametr jest `false` i nie można bezpośrednio usunąć zakres, usunięcie została odroczona, dopóki nie jest już częścią aktywnego regionu.  
  
 Nie można usunąć ostatniego zakres w <xref:System.IO.Log.LogExtentCollection>, co oznacza, że <xref:System.IO.Log.LogExtentCollection.Count%2A> właściwość nie może mieć zerowej po dodaniu zakresu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="extent" /> lub <paramref name="force" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="extent" /> Nie można odnaleźć w kolekcji.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="extent" /> Nie można usunąć. Jest on albo nadal częścią aktywnego regionu lub dostęp jest zabroniony.</exception>
        <exception cref="T:System.IO.IOException">Nie można wykonać żądania z powodu nieoczekiwanego wyjątku We/Wy.  
  
 —lub—  
  
 <paramref name="extent" /> Nie można usunąć.</exception>
        <exception cref="T:System.ObjectDisposedException">Metoda została wywołana po sekwencji został zlikwidowany.</exception>
        <exception cref="T:System.OutOfMemoryException">Nie ma wystarczającej ilości pamięci, aby kontynuować wykonywanie programu.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">Sekwencja rekordów jest pełna.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Odmowa dostępu do magazynu określony dziennik przez system operacyjny.</exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string path, bool force);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string path, bool force) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Remove(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (path As String, force As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ path, bool force);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="force" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka <see cref="T:System.IO.Log.LogExtent" /> wystąpienie do usunięcia.</param>
        <param name="force">
          <see langword="true" /> Jeśli zakres powinna zostać usunięta natychmiast; w przeciwnym razie <see langword="false" />.</param>
        <summary>Usuwa <see cref="T:System.IO.Log.LogExtent" /> wystąpienia z określoną ścieżką z kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.IO.Log.LogExtent> wystąpienie może być usunięty z kolekcji tylko wtedy, gdy nie jest częścią aktywnego regionu <xref:System.IO.Log.LogStore>. Jeśli `force` parametr jest `true` i nie można bezpośrednio usunąć zakres, jest zgłaszany wyjątek. Jeśli `force` parametr jest `false` i nie można bezpośrednio usunąć zakres, usunięcie została odroczona, dopóki nie jest już częścią aktywnego regionu.  
  
 Nie można usunąć ostatniego zakres w <xref:System.IO.Log.LogExtentCollection>, co oznacza, że <xref:System.IO.Log.LogExtentCollection.Count%2A> właściwość nie może mieć zerowej po dodaniu zakresu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> lub <paramref name="force" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">W zakresie określonym przez <paramref name="path" /> nie można odnaleźć w kolekcji.</exception>
        <exception cref="T:System.InvalidOperationException">W zakresie określonym przez <paramref name="path" /> nie może zostać usunięty. Jest on albo nadal częścią aktywnego regionu lub dostęp jest zabroniony.</exception>
        <exception cref="T:System.IO.IOException">Nie można wykonać żądania z powodu nieoczekiwanego wyjątku We/Wy.  
  
 —lub—  
  
 W zakresie określonym przez <paramref name="path" /> nie można usunąć.</exception>
        <exception cref="T:System.ObjectDisposedException">Metoda została wywołana po sekwencji został zlikwidowany.</exception>
        <exception cref="T:System.OutOfMemoryException">Nie ma wystarczającej ilości pamięci, aby kontynuować wykonywanie programu.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">Sekwencja rekordów jest pełna.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Odmowa dostępu do magazynu określony dziennik przez system operacyjny.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera moduł wyliczający dla <see cref="T:System.IO.Log.LogExtent" /> wystąpień w tej kolekcji. Ta metoda nie może być dziedziczona.</summary>
        <returns>Moduł wyliczający dla <see cref="T:System.IO.Log.LogExtent" /> wystąpień w tej kolekcji.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>