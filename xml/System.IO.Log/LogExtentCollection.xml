<Type Name="LogExtentCollection" FullName="System.IO.Log.LogExtentCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c91ca54dcc80553c2b43275ab8378b50843a53b8" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69245290" /></Metadata><TypeSignature Language="C#" Value="public sealed class LogExtentCollection : System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogExtent&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LogExtentCollection extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;class System.IO.Log.LogExtent&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.LogExtentCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LogExtentCollection&#xA;Implements IEnumerable(Of LogExtent)" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogExtentCollection sealed : System::Collections::Generic::IEnumerable&lt;System::IO::Log::LogExtent ^&gt;" />
  <TypeSignature Language="F#" Value="type LogExtentCollection = class&#xA;    interface seq&lt;LogExtent&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogExtent&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Reprezentuje kolekcję <see cref="T:System.IO.Log.LogExtent" /> obiektów skojarzonych <see cref="T:System.IO.Log.LogStore" />z.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa zawiera kolekcję <xref:System.IO.Log.LogExtent> obiektów skojarzonych <xref:System.IO.Log.LogStore>z. Wystąpienie przechowuje swoje dane w kolekcji zakresów dysku reprezentowanej przez <xref:System.IO.Log.LogExtent> wystąpienia. <xref:System.IO.Log.LogStore> Określony <xref:System.IO.Log.LogExtent> element jest skojarzony z jednym <xref:System.IO.Log.LogStore>, a <xref:System.IO.Log.LogExtent> obiekty w tym samym <xref:System.IO.Log.LogStore> rozmiarze mają identyczny rozmiar. Spacja jest dodawana do wystąpienia i <xref:System.IO.Log.LogStore> usuwana z niego w przyrostach.  
  
 Mimo <xref:System.IO.Log.LogExtent> że obiekty są reprezentowane na dysku jako pliki, nie powinny być przenoszone ani usuwane jako normalne pliki. Zamiast tego należy użyć metod dostarczonych przez tę klasę do bezpośredniego dodawania i usuwania <xref:System.IO.Log.LogExtent> wystąpień. Zakresy są zwykle usuwane, gdy nie zawierają już aktywnych danych. Jeśli `force` jednak parametr <xref:System.IO.Log.LogExtentCollection.Remove%2A> w metodzie ma wartość `true`, wyjątek jest zgłaszany, jeśli nie można go usunąć natychmiast.  
  
 Nie można usunąć ostatniego zakresu w <xref:System.IO.Log.LogExtentCollection>, co oznacza, <xref:System.IO.Log.LogExtentCollection.Count%2A> że właściwość nie może mieć wartości zero po dodaniu zakresu.  
  
   
  
## Examples  
 Ten przykład pokazuje, <xref:System.IO.Log.LogExtent> jak używać klas i <xref:System.IO.Log.LogExtentCollection> do dodawania i emulowania zakresów w sekwencji dzienników.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Log.LogExtent" />
    <altmember cref="T:System.IO.Log.LogStore" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy nowy <see cref="T:System.IO.Log.LogExtent" /> i dodaje go do kolekcji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Add(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.Add : string -&gt; unit" Usage="logExtentCollection.Add path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka do zakresu dziennika, który ma zostać dodany.</param>
        <summary><see cref="T:System.IO.Log.LogExtent" /> Dodaje wystąpienie do kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rozmiar nowo dodanego <xref:System.IO.Log.LogExtent> wystąpienia jest taki sam jak rozmiar istniejących <xref:System.IO.Log.LogExtent> wystąpień w kolekcji.  
  
> [!NOTE]
>  Nie należy używać tej metody, aby dodać pierwszy <xref:System.IO.Log.LogExtent> do kolekcji.  
  
   
  
## Examples  
 Ten przykład pokazuje, <xref:System.IO.Log.LogExtent> jak używać klas i <xref:System.IO.Log.LogExtentCollection> do dodawania i emulowania zakresów w sekwencji dzienników.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Nazwa pliku magazynu dzienników określona przez <paramref name="path" /> jest nieprawidłowa.</exception>
        <exception cref="T:System.InvalidOperationException">Rozmiar musi być określony w pierwszym zakresie.</exception>
        <exception cref="T:System.IO.IOException">Nie można wykonać żądania z powodu nieoczekiwanego wyjątku we/wy.  
  
—lub— 
Nie można utworzyć pliku <paramref name="path" /> określonego przez, ponieważ plik lub katalog już istnieje.</exception>
        <exception cref="T:System.ObjectDisposedException">Metoda została wywołana po usunięciu sekwencji.</exception>
        <exception cref="T:System.OutOfMemoryException">Za mało pamięci, aby kontynuować wykonywanie programu.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">Sekwencja rekordów jest pełna.  
  
 —lub—  
  
 Dysk lub nośnik pamięci masowej jest pełny.</exception>
        <exception cref="T:System.UnauthorizedAccessException">System operacyjny odmówiono dostępu do określonego magazynu dzienników.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string path, long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string path, int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Add(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (path As String, size As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ path, long size);" />
      <MemberSignature Language="F#" Value="member this.Add : string * int64 -&gt; unit" Usage="logExtentCollection.Add (path, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka do zakresu dziennika.</param>
        <param name="size">Rozmiar zakresu dziennika.</param>
        <summary>Tworzy nowy <see cref="T:System.IO.Log.LogExtent" /> o określonym rozmiarze i dodaje go do kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli kolekcja nie jest pusta, określony rozmiar musi być co najmniej tak duży, jak rozmiar innych zakresów w kolekcji. W tym przypadku `size` parametr jest ignorowany, a zakres jest tworzony o takim samym rozmiarze jak inne zakresy w kolekcji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" />lub <paramref name="size" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="archiveTail" />znajduje się poza prawidłowym zakresem.</exception>
        <exception cref="T:System.ArgumentException">Nazwa pliku magazynu dzienników określona przez <paramref name="path" /> jest nieprawidłowa.  
  
 <paramref name="size" />jest mniejszy niż rozmiar innych zakresów w sklepie.</exception>
        <exception cref="T:System.InvalidOperationException">Rozmiar musi być określony w pierwszym zakresie.  
  
 —lub—  
  
 Nie można użyć zduplikowanej nazwy zakresu.</exception>
        <exception cref="T:System.IO.IOException">Nie można wykonać żądania z powodu nieoczekiwanego wyjątku we/wy.  
  
—lub— 
Nie można utworzyć pliku <paramref name="path" /> określonego przez, ponieważ plik lub katalog już istnieje.</exception>
        <exception cref="T:System.ObjectDisposedException">Metoda została wywołana po usunięciu sekwencji.</exception>
        <exception cref="T:System.OutOfMemoryException">Za mało pamięci, aby kontynuować wykonywanie programu.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">Sekwencja rekordów jest pełna.  
  
 —lub—  
  
 Dysk lub nośnik pamięci masowej jest pełny.</exception>
        <exception cref="T:System.UnauthorizedAccessException">System operacyjny odmówiono dostępu do określonego magazynu dzienników.</exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogExtentCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.IO.Log.LogExtentCollection.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę zakresów dziennika w kolekcji.</summary>
        <value>Liczba zakresów dzienników w kolekcji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Ten przykład pokazuje, <xref:System.IO.Log.LogExtent> jak używać klas i <xref:System.IO.Log.LogExtentCollection> do dodawania i emulowania zakresów w sekwencji dzienników.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Magazyn dziennika został usunięty z.</exception>
      </Docs>
    </Member>
    <Member MemberName="FreeCount">
      <MemberSignature Language="C#" Value="public int FreeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FreeCount" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogExtentCollection.FreeCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FreeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int FreeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.FreeCount : int" Usage="System.IO.Log.LogExtentCollection.FreeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę wolnych <see cref="T:System.IO.Log.LogExtent" /> wystąpień w kolekcji, czyli <see cref="T:System.IO.Log.LogExtent" /> liczbę wystąpień, które nie zawierają żadnych danych.</summary>
        <value>Liczba wolnych <see cref="T:System.IO.Log.LogExtent" /> wystąpień w kolekcji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Ten przykład pokazuje, <xref:System.IO.Log.LogExtent> jak używać klas i <xref:System.IO.Log.LogExtentCollection> do dodawania i emulowania zakresów w sekwencji dzienników.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Magazyn dziennika został usunięty z.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.IO.Log.LogExtent&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of LogExtent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;System::IO::Log::LogExtent ^&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;" Usage="logExtentCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera moduł wyliczający dla <see cref="T:System.IO.Log.LogExtent" /> wystąpień w tej kolekcji. Ta metoda nie może być dziedziczona.</summary>
        <returns>Moduł wyliczający dla <see cref="T:System.IO.Log.LogExtent" /> wystąpień w tej kolekcji.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException">Nie można wykonać żądania z powodu nieoczekiwanego wyjątku we/wy.</exception>
        <exception cref="T:System.InvalidOperationException">Operacja jest nieprawidłowa z jednego z następujących powodów: 
-Wyliczenie zostało zakończone.  
  
-Kolekcja została zmodyfikowana.  
  
-Wyliczenie nie zostało uruchomione. Wywołanie <see cref="M:System.Collections.IEnumerator.MoveNext" /> musi być wykonane.</exception>
        <exception cref="T:System.ObjectDisposedException">Metoda została wywołana po usunięciu sekwencji.</exception>
        <exception cref="T:System.OutOfMemoryException">Za mało pamięci, aby kontynuować wykonywanie programu.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">Sekwencja rekordów jest pełna.</exception>
        <exception cref="T:System.UnauthorizedAccessException">System operacyjny odmówiono dostępu do określonego magazynu dzienników.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.IO.Log.LogExtent" /> Usuwa wystąpienie z kolekcji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.IO.Log.LogExtent extent, bool force);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.IO.Log.LogExtent extent, bool force) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Remove(System.IO.Log.LogExtent,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (extent As LogExtent, force As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::IO::Log::LogExtent ^ extent, bool force);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.IO.Log.LogExtent * bool -&gt; unit" Usage="logExtentCollection.Remove (extent, force)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extent" Type="System.IO.Log.LogExtent" />
        <Parameter Name="force" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="extent"><see cref="T:System.IO.Log.LogExtent" /> Wystąpienie do usunięcia.</param>
        <param name="force"><see langword="true" />Jeśli zakres powinien zostać usunięty natychmiast; w przeciwnym razie. <see langword="false" /></param>
        <summary>Usuwa określone <see cref="T:System.IO.Log.LogExtent" /> wystąpienie z kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie można usunąć z kolekcji tylko wtedy, gdy nie jest ono częścią aktywnego regionu <xref:System.IO.Log.LogStore>. <xref:System.IO.Log.LogExtent> Jeśli parametr ma `true` wartość i zakres nie może zostać usunięty natychmiast, zostanie zgłoszony wyjątek. `force` Jeśli parametr jest `false` i zakres nie może zostać usunięty natychmiast, usunięcie zostanie odroczone do momentu, gdy nie będzie już częścią aktywnego regionu. `force`  
  
 Nie można usunąć ostatniego zakresu w <xref:System.IO.Log.LogExtentCollection>, co oznacza, <xref:System.IO.Log.LogExtentCollection.Count%2A> że właściwość nie może mieć wartości zero po dodaniu zakresu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="extent" />lub <paramref name="force" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="extent" />nie można odnaleźć w kolekcji.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="extent" />nie można usunąć. Jest ona nadal częścią aktywnego regionu lub dostęp jest zabroniony.</exception>
        <exception cref="T:System.IO.IOException">Nie można wykonać żądania z powodu nieoczekiwanego wyjątku we/wy.  
  
—lub— 
 <paramref name="extent" />nie można usunąć.</exception>
        <exception cref="T:System.ObjectDisposedException">Metoda została wywołana po usunięciu sekwencji.</exception>
        <exception cref="T:System.OutOfMemoryException">Za mało pamięci, aby kontynuować wykonywanie programu.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">Sekwencja rekordów jest pełna.</exception>
        <exception cref="T:System.UnauthorizedAccessException">System operacyjny odmówiono dostępu do określonego magazynu dzienników.</exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string path, bool force);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string path, bool force) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Remove(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (path As String, force As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ path, bool force);" />
      <MemberSignature Language="F#" Value="member this.Remove : string * bool -&gt; unit" Usage="logExtentCollection.Remove (path, force)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="force" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka <see cref="T:System.IO.Log.LogExtent" /> wystąpienia do usunięcia.</param>
        <param name="force"><see langword="true" />Jeśli zakres powinien zostać usunięty natychmiast; w przeciwnym razie. <see langword="false" /></param>
        <summary><see cref="T:System.IO.Log.LogExtent" /> Usuwa wystąpienie o określonej ścieżce z kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie można usunąć z kolekcji tylko wtedy, gdy nie jest ono częścią aktywnego regionu <xref:System.IO.Log.LogStore>. <xref:System.IO.Log.LogExtent> Jeśli parametr ma `true` wartość i zakres nie może zostać usunięty natychmiast, zostanie zgłoszony wyjątek. `force` Jeśli parametr jest `false` i zakres nie może zostać usunięty natychmiast, usunięcie zostanie odroczone do momentu, gdy nie będzie już częścią aktywnego regionu. `force`  
  
 Nie można usunąć ostatniego zakresu w <xref:System.IO.Log.LogExtentCollection>, co oznacza, <xref:System.IO.Log.LogExtentCollection.Count%2A> że właściwość nie może mieć wartości zero po dodaniu zakresu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" />lub <paramref name="force" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Nie można znaleźć w <paramref name="path" /> kolekcji zakresu określonego przez.</exception>
        <exception cref="T:System.InvalidOperationException">Nie można usunąć zakresu <paramref name="path" /> określonego przez. Jest ona nadal częścią aktywnego regionu lub dostęp jest zabroniony.</exception>
        <exception cref="T:System.IO.IOException">Nie można wykonać żądania z powodu nieoczekiwanego wyjątku we/wy.  
  
—lub— 
Nie można usunąć zakresu <paramref name="path" /> określonego przez.</exception>
        <exception cref="T:System.ObjectDisposedException">Metoda została wywołana po usunięciu sekwencji.</exception>
        <exception cref="T:System.OutOfMemoryException">Za mało pamięci, aby kontynuować wykonywanie programu.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">Sekwencja rekordów jest pełna.</exception>
        <exception cref="T:System.UnauthorizedAccessException">System operacyjny odmówiono dostępu do określonego magazynu dzienników.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera moduł wyliczający dla <see cref="T:System.IO.Log.LogExtent" /> wystąpień w tej kolekcji. Ta metoda nie może być dziedziczona.</summary>
        <returns>Moduł wyliczający dla <see cref="T:System.IO.Log.LogExtent" /> wystąpień w tej kolekcji.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
