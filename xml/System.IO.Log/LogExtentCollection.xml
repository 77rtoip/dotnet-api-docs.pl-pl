<Type Name="LogExtentCollection" FullName="System.IO.Log.LogExtentCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="49b20e9ef660fe2fa6fe3be02b3c59ec65606a8f" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37759064" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class LogExtentCollection : System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogExtent&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LogExtentCollection extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;class System.IO.Log.LogExtent&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.LogExtentCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LogExtentCollection&#xA;Implements IEnumerable(Of LogExtent)" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogExtentCollection sealed : System::Collections::Generic::IEnumerable&lt;System::IO::Log::LogExtent ^&gt;" />
  <TypeSignature Language="F#" Value="type LogExtentCollection = class&#xA;    interface seq&lt;LogExtent&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogExtent&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Reprezentuje kolekcję <see cref="T:System.IO.Log.LogExtent" /> obiektów skojarzonych z <see cref="T:System.IO.Log.LogStore" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa zawiera zbiór <xref:System.IO.Log.LogExtent> obiektów skojarzonych z <xref:System.IO.Log.LogStore>. A <xref:System.IO.Log.LogStore> wystąpienia przechowuje dane w kolekcji zakresów dysków, reprezentowane przez <xref:System.IO.Log.LogExtent> wystąpień. Konkretny <xref:System.IO.Log.LogExtent> jest skojarzony z jednym <xref:System.IO.Log.LogStore>, i <xref:System.IO.Log.LogExtent> obiektów w tym samym <xref:System.IO.Log.LogStore> jest identyczny rozmiar. Miejsca zostaną dodane do i usunięta z <xref:System.IO.Log.LogStore> wystąpienia w przyrostach zakresu.  
  
 Mimo że <xref:System.IO.Log.LogExtent> obiekty są reprezentowane na dysku jako pliki, ich powinna nie przeniesiony lub usunięty jako normalne pliki. Przeciwnie, należy używać metod dostarczonych przez tę klasę, dodawania i usuwania <xref:System.IO.Log.LogExtent> wystąpień bezpośrednio. Zakresy zwykle są usuwane, gdy już nie zawierają żadnych aktywnych danych. Jednak jeśli `force` parametru w <xref:System.IO.Log.LogExtentCollection.Remove%2A> metodą jest `true`, jest zgłaszany wyjątek, jeśli nie można usunąć natychmiast.  
  
 Nie można usunąć ostatni zakres w <xref:System.IO.Log.LogExtentCollection>, co oznacza, że <xref:System.IO.Log.LogExtentCollection.Count%2A> właściwość nie może mieć zero, po dodaniu zakresu.  
  
   
  
## Examples  
 W tym przykładzie pokazano, jak używać <xref:System.IO.Log.LogExtent> i <xref:System.IO.Log.LogExtentCollection> klasy, aby dodać i emulować zakresów w sekwencji dziennika.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Log.LogExtent" />
    <altmember cref="T:System.IO.Log.LogStore" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy nową <see cref="T:System.IO.Log.LogExtent" /> i dodaje go do kolekcji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Add(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.Add : string -&gt; unit" Usage="logExtentCollection.Add path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka ma zostać dodany, w jakim dziennika.</param>
        <summary>Dodaje <see cref="T:System.IO.Log.LogExtent" /> wystąpienia do kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rozmiar nowo dodanych <xref:System.IO.Log.LogExtent> wystąpienie jest taki sam jak rozmiar istniejących <xref:System.IO.Log.LogExtent> wystąpień w kolekcji.  
  
> [!NOTE]
>  Należy używać tej metody, aby dodać pierwszy <xref:System.IO.Log.LogExtent> do kolekcji.  
  
   
  
## Examples  
 W tym przykładzie pokazano, jak używać <xref:System.IO.Log.LogExtent> i <xref:System.IO.Log.LogExtentCollection> klasy, aby dodać i emulować zakresów w sekwencji dziennika.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Nazwa pliku dziennika magazynu określony przez <paramref name="path" /> jest nieprawidłowy.</exception>
        <exception cref="T:System.InvalidOperationException">Należy określić rozmiar dla pierwszego zakresu.</exception>
        <exception cref="T:System.IO.IOException">Nie można wykonać żądania z powodu nieoczekiwanego wyjątku We/Wy.  — lub — w pliku określonym przez <paramref name="path" /> nie można utworzyć, ponieważ plik lub katalog już istnieje.</exception>
        <exception cref="T:System.ObjectDisposedException">Metoda została wywołana po sekwencji został zlikwidowany.</exception>
        <exception cref="T:System.OutOfMemoryException">Nie ma wystarczającej ilości pamięci dla kontynuowania wykonywania programu.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">Sekwencja rekordów jest pełny.  - lub - dysk pamięci masowej lub średni jest pełny.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Odmowa dostępu dla magazynu dziennika określony przez system operacyjny.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string path, long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string path, int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Add(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (path As String, size As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ path, long size);" />
      <MemberSignature Language="F#" Value="member this.Add : string * int64 -&gt; unit" Usage="logExtentCollection.Add (path, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka w zakresie dziennika.</param>
        <param name="size">Rozmiar dziennika w zakresie.</param>
        <summary>Tworzy nową <see cref="T:System.IO.Log.LogExtent" /> o określonym rozmiarze i dodaje go do kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli kolekcja nie jest pusty, określony rozmiar musi być przynajmniej tak duże jak rozmiar innych zakresów w kolekcji. W tym przypadku `size` parametr jest ignorowany i zakresu jest tworzona przy użyciu taki sam rozmiar jak innych zakresów w kolekcji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> lub <paramref name="size" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="archiveTail" /> nie jest w prawidłowym zakresie.</exception>
        <exception cref="T:System.ArgumentException">Nazwa pliku dziennika magazynu określony przez <paramref name="path" /> jest nieprawidłowy.  
  
 <paramref name="size" /> jest mniejszy niż rozmiar innych zakresów w magazynie.</exception>
        <exception cref="T:System.InvalidOperationException">Należy określić rozmiar dla pierwszego zakresu.  - lub - nie można używać zduplikowanej nazwy zakresu.</exception>
        <exception cref="T:System.IO.IOException">Nie można wykonać żądania z powodu nieoczekiwanego wyjątku We/Wy.  — lub — w pliku określonym przez <paramref name="path" /> nie można utworzyć, ponieważ plik lub katalog już istnieje.</exception>
        <exception cref="T:System.ObjectDisposedException">Metoda została wywołana po sekwencji został zlikwidowany.</exception>
        <exception cref="T:System.OutOfMemoryException">Nie ma wystarczającej ilości pamięci dla kontynuowania wykonywania programu.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">Sekwencja rekordów jest pełny.  - lub - dysk pamięci masowej lub średni jest pełny.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Odmowa dostępu dla magazynu dziennika określony przez system operacyjny.</exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogExtentCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.IO.Log.LogExtentCollection.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczba zakresów dziennika w kolekcji.</summary>
        <value>Liczba zakresów dziennika w kolekcji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W tym przykładzie pokazano, jak używać <xref:System.IO.Log.LogExtent> i <xref:System.IO.Log.LogExtentCollection> klasy, aby dodać i emulować zakresów w sekwencji dziennika.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Magazynu dziennika zostało usunięte z.</exception>
      </Docs>
    </Member>
    <Member MemberName="FreeCount">
      <MemberSignature Language="C#" Value="public int FreeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FreeCount" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogExtentCollection.FreeCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FreeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int FreeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.FreeCount : int" Usage="System.IO.Log.LogExtentCollection.FreeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę bezpłatnych <see cref="T:System.IO.Log.LogExtent" /> wystąpień w kolekcji, czyli liczbę <see cref="T:System.IO.Log.LogExtent" /> wystąpień, które nie zawierają żadnych danych.</summary>
        <value>Liczba bezpłatnych <see cref="T:System.IO.Log.LogExtent" /> wystąpień w kolekcji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W tym przykładzie pokazano, jak używać <xref:System.IO.Log.LogExtent> i <xref:System.IO.Log.LogExtentCollection> klasy, aby dodać i emulować zakresów w sekwencji dziennika.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Magazynu dziennika zostało usunięte z.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.IO.Log.LogExtent&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of LogExtent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;System::IO::Log::LogExtent ^&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;" Usage="logExtentCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera moduł wyliczający <see cref="T:System.IO.Log.LogExtent" /> wystąpień w tej kolekcji. Ta metoda nie może być dziedziczona.</summary>
        <returns>Moduł wyliczający <see cref="T:System.IO.Log.LogExtent" /> wystąpień w tej kolekcji.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException">Nie można wykonać żądania z powodu nieoczekiwanego wyjątku We/Wy.</exception>
        <exception cref="T:System.InvalidOperationException">Ta operacja jest nieprawidłowa dla jednego z następujących powodów:-Wyliczanie zostało zakończone.  Kolekcja została zmodyfikowana.  -Wyliczenia nie został uruchomiony. Wywołanie <see cref="M:System.Collections.IEnumerator.MoveNext" /> muszą być wykonane.</exception>
        <exception cref="T:System.ObjectDisposedException">Metoda została wywołana po sekwencji został zlikwidowany.</exception>
        <exception cref="T:System.OutOfMemoryException">Nie ma wystarczającej ilości pamięci dla kontynuowania wykonywania programu.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">Sekwencja rekordów jest pełny.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Odmowa dostępu dla magazynu dziennika określony przez system operacyjny.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Usuwa <see cref="T:System.IO.Log.LogExtent" /> wystąpienia z kolekcji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.IO.Log.LogExtent extent, bool force);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.IO.Log.LogExtent extent, bool force) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Remove(System.IO.Log.LogExtent,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (extent As LogExtent, force As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::IO::Log::LogExtent ^ extent, bool force);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.IO.Log.LogExtent * bool -&gt; unit" Usage="logExtentCollection.Remove (extent, force)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extent" Type="System.IO.Log.LogExtent" />
        <Parameter Name="force" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="extent">
          <see cref="T:System.IO.Log.LogExtent" /> Wystąpienie do usunięcia.</param>
        <param name="force">
          <see langword="true" /> Jeśli zakres, które powinny zostać usunięte natychmiast; w przeciwnym razie <see langword="false" />.</param>
        <summary>Usuwa określony <see cref="T:System.IO.Log.LogExtent" /> wystąpienia z kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.IO.Log.LogExtent> wystąpienia można je usunąć z kolekcji, tylko wtedy, gdy nie jest częścią aktywnego obszaru <xref:System.IO.Log.LogStore>. Jeśli `force` parametr jest `true` i nie można natychmiast usunąć zakres, zgłaszany jest wyjątek. Jeśli `force` parametr jest `false` i nie można natychmiast usunąć zakres, usunięcie jest odroczone do czasu nie jest już częścią aktywnym regionem.  
  
 Nie można usunąć ostatni zakres w <xref:System.IO.Log.LogExtentCollection>, co oznacza, że <xref:System.IO.Log.LogExtentCollection.Count%2A> właściwość nie może mieć zero, po dodaniu zakresu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="extent" /> lub <paramref name="force" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="extent" /> Nie można odnaleźć w kolekcji.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="extent" /> Nie można usunąć. Jest on albo nadal częścią aktywny region lub odmowa dostępu.</exception>
        <exception cref="T:System.IO.IOException">Nie można wykonać żądania z powodu nieoczekiwanego wyjątku We/Wy.  - lub - <paramref name="extent" /> nie można jej usunąć.</exception>
        <exception cref="T:System.ObjectDisposedException">Metoda została wywołana po sekwencji został zlikwidowany.</exception>
        <exception cref="T:System.OutOfMemoryException">Nie ma wystarczającej ilości pamięci dla kontynuowania wykonywania programu.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">Sekwencja rekordów jest pełny.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Odmowa dostępu dla magazynu dziennika określony przez system operacyjny.</exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string path, bool force);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string path, bool force) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Remove(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (path As String, force As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ path, bool force);" />
      <MemberSignature Language="F#" Value="member this.Remove : string * bool -&gt; unit" Usage="logExtentCollection.Remove (path, force)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="force" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka <see cref="T:System.IO.Log.LogExtent" /> wystąpienie do usunięcia.</param>
        <param name="force">
          <see langword="true" /> Jeśli zakres, które powinny zostać usunięte natychmiast; w przeciwnym razie <see langword="false" />.</param>
        <summary>Usuwa <see cref="T:System.IO.Log.LogExtent" /> wystąpienie z określonej ścieżki z kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.IO.Log.LogExtent> wystąpienia można je usunąć z kolekcji, tylko wtedy, gdy nie jest częścią aktywnego obszaru <xref:System.IO.Log.LogStore>. Jeśli `force` parametr jest `true` i nie można natychmiast usunąć zakres, zgłaszany jest wyjątek. Jeśli `force` parametr jest `false` i nie można natychmiast usunąć zakres, usunięcie jest odroczone do czasu nie jest już częścią aktywnym regionem.  
  
 Nie można usunąć ostatni zakres w <xref:System.IO.Log.LogExtentCollection>, co oznacza, że <xref:System.IO.Log.LogExtentCollection.Count%2A> właściwość nie może mieć zero, po dodaniu zakresu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> lub <paramref name="force" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">W zakresie określonym przez <paramref name="path" /> nie można odnaleźć w kolekcji.</exception>
        <exception cref="T:System.InvalidOperationException">W zakresie określonym przez <paramref name="path" /> nie można go usunąć. Jest on albo nadal częścią aktywny region lub odmowa dostępu.</exception>
        <exception cref="T:System.IO.IOException">Nie można wykonać żądania z powodu nieoczekiwanego wyjątku We/Wy.  — lub — w zakresie określonym przez <paramref name="path" /> nie można jej usunąć.</exception>
        <exception cref="T:System.ObjectDisposedException">Metoda została wywołana po sekwencji został zlikwidowany.</exception>
        <exception cref="T:System.OutOfMemoryException">Nie ma wystarczającej ilości pamięci dla kontynuowania wykonywania programu.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">Sekwencja rekordów jest pełny.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Odmowa dostępu dla magazynu dziennika określony przez system operacyjny.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera moduł wyliczający <see cref="T:System.IO.Log.LogExtent" /> wystąpień w tej kolekcji. Ta metoda nie może być dziedziczona.</summary>
        <returns>Moduł wyliczający <see cref="T:System.IO.Log.LogExtent" /> wystąpień w tej kolekcji.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>