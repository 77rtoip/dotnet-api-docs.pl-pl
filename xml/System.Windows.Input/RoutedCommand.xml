<Type Name="RoutedCommand" FullName="System.Windows.Input.RoutedCommand">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9d7469aafedfab5bf01be9f8214fc44809973b73" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30709424" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RoutedCommand : System.Windows.Input.ICommand" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RoutedCommand extends System.Object implements class System.Windows.Input.ICommand" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.RoutedCommand" />
  <TypeSignature Language="VB.NET" Value="Public Class RoutedCommand&#xA;Implements ICommand" />
  <TypeSignature Language="C++ CLI" Value="public ref class RoutedCommand : System::Windows::Input::ICommand" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommand</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Określa polecenie, które implementuje <see cref="T:System.Windows.Input.ICommand" /> i jest kierowany przez element drzewa.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> i <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> metod <xref:System.Windows.Input.RoutedCommand> nie zawierają logiki aplikacji w poleceniu, tak jak w przypadku dla typowego <xref:System.Windows.Input.ICommand>, ale raczej tych metod podnieść zdarzenia, które przechodzenia drzewa element wyszukiwania dla obiektu z <xref:System.Windows.Input.CommandBinding>.  Programy obsługi zdarzeń jest dołączony do <xref:System.Windows.Input.CommandBinding> zawierają logikę polecenia.  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> Metoda zgłasza <xref:System.Windows.Input.CommandManager.PreviewExecuted> i <xref:System.Windows.Input.CommandManager.Executed> zdarzenia.  <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> Metoda zgłasza <xref:System.Windows.Input.CommandManager.PreviewCanExecute> i <xref:System.Windows.Input.CommandManager.CanExecute> zdarzenia.  
  
<a name="xamlAttributeUsage_RoutedCommand"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
 \<*object* *property*="*predefinedCommandName*"/>  
  
 \- lub -  
  
 \<*object* *property*="*predefinedClassName*.*predefinedCommandName*"/>  
  
 \- lub -  
  
 \<*object* *property*="{ *customClassName*.*customCommandName*}"/>  
  
<a name="xamlValues_RoutedCommand"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *predefinedClassName*  
 Jedną z klas wstępnie zdefiniowanego polecenia.  
  
 *predefinedCommandName*  
 Jeden z wstępnie zdefiniowanych poleceń.  
  
 *customClassName*  
 Klasy niestandardowej, która zawiera polecenia niestandardowych. Niestandardowe klasy wymagają `xlmns` przedrostkowe mapowanie; zobacz [przestrzeń nazw XAML i Namespace mapowanie dla WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).  
  
 *customCommandName*  
 Polecenia niestandardowych.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.KeyGesture" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Input.RoutedCommand" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Input.RoutedCommand" /> klasy.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">Zadeklarowana nazwa dla serializacji.</param>
        <param name="ownerType">Typ, który rejestruje polecenia.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Input.RoutedCommand" /> klasy z określonym typem nazwę i właściciela.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ownerType" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType, System.Windows.Input.InputGestureCollection inputGestures);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType, class System.Windows.Input.InputGestureCollection inputGestures) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type, inputGestures As InputGestureCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType, System::Windows::Input::InputGestureCollection ^ inputGestures);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="inputGestures" Type="System.Windows.Input.InputGestureCollection" />
      </Parameters>
      <Docs>
        <param name="name">Zadeklarowana nazwa dla serializacji.</param>
        <param name="ownerType">Typ, który rejestruje polecenia.</param>
        <param name="inputGestures">Domyślnie wejściowych gestów skojarzony z tym poleceniem.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Input.RoutedCommand" /> z określoną nazwę, typ właściciela i kolekcji gestów.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">długość <paramref name="name" /> wynosi zero  
  
 \- lub -  
  
 <paramref name="ownerType" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanExecute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanExecute (parameter As Object, target As IInputElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanExecute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">Typ danych zdefiniowany przez użytkownika.</param>
        <param name="target">Element docelowy polecenia.</param>
        <summary>Określa, czy to <see cref="T:System.Windows.Input.RoutedCommand" /> można wykonać w jego bieżącym stanie.</summary>
        <returns>
          <see langword="true" /> Jeśli polecenie można wykonać na aktualnym elemencie docelowym polecenia; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Logiki rzeczywista, która określa, czy <xref:System.Windows.Input.RoutedCommand> można wykonać na bieżącym elemencie docelowym polecenia nie jest zawarta w <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> metod, zamiast <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> zgłasza <xref:System.Windows.Input.CommandManager.PreviewCanExecute> i <xref:System.Windows.Input.CommandManager.CanExecute> zdarzenia, które tunelowania i bąbelkowy za pomocą elementu drzewo wyszukiwania dla obiektu o <xref:System.Windows.Input.CommandBinding>.  Jeśli <xref:System.Windows.Input.CommandBinding> tego <xref:System.Windows.Input.RoutedCommand> zostanie znaleziony, a następnie <xref:System.Windows.Input.CanExecuteRoutedEventHandler> dołączony do <xref:System.Windows.Input.CommandBinding> jest wywoływana.  Te programy obsługi dostarczania programowania logiki sprawdzania, czy <xref:System.Windows.Input.RoutedCommand> lub nie można uruchamiać.  
  
 <xref:System.Windows.Input.CommandManager.PreviewCanExecute> i <xref:System.Windows.Input.CommandManager.PreviewExecuted> zdarzenia są generowane na <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.  Jeśli <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> nie jest ustawiona na <xref:System.Windows.Input.ICommandSource>, <xref:System.Windows.Input.CommandManager.PreviewCanExecute> i <xref:System.Windows.Input.CommandManager.CanExecute> zdarzenia są generowane na element z fokusem klawiatury.  
  
   
  
## Examples  
 Poniżej przedstawiono przykład <xref:System.Windows.Input.ICommand.CanExecuteChanged> obsługi zdarzeń z niestandardowej implementacji <xref:System.Windows.Input.ICommandSource>.  
  
 `this.Command` w tym przykładzie jest <xref:System.Windows.Input.ICommandSource.Command%2A> właściwość <xref:System.Windows.Input.ICommandSource>.  Jeśli polecenie nie jest `null`, polecenie jest rzutowane na <xref:System.Windows.Input.RoutedCommand>.  Jeśli polecenie jest <xref:System.Windows.Input.RoutedCommand>, a następnie <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> metoda jest wywoływana przekazywanie <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> i <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  Jeśli polecenie nie jest <xref:System.Windows.Input.RoutedCommand>, jest rzutowane na <xref:System.Windows.Input.ICommand> i <xref:System.Windows.Input.ICommand.CanExecute%2A> metoda jest wywoływana przekazywanie <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  
  
 Jeśli <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> metoda zwraca `true`, następnie formant jest włączony; w przeciwnym razie kontrolka jest wyłączana.  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="target" /> nie jest <see cref="T:System.Windows.UIElement" /> lub <see cref="T:System.Windows.ContentElement" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanExecuteChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CanExecuteChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CanExecuteChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.RoutedCommand.CanExecuteChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CanExecuteChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ CanExecuteChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy zmiany w źródle polecenia są wykrywane przez Menedżera poleceń. Te zmiany wpływają na często, czy polecenie powinno być wykonane w bieżącym elemencie docelowym polecenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.RoutedCommand> Nasłuchuje <xref:System.Windows.Input.CommandManager.RequerySuggested> zdarzenie, które jest wywoływane przez <xref:System.Windows.Input.CommandManager>. <xref:System.Windows.Input.CommandManager.RequerySuggested> Zdarzenie jest zgłaszane, gdy są spełnione warunki który mogą ulec zmianie, czy polecenia powinien zostać wykonany, takie jak zmiana fokus klawiatury.  Gdy odbierze polecenie <xref:System.Windows.Input.CommandManager.RequerySuggested> zgłasza zdarzenie, <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> zdarzeń.  Ogólnie rzecz biorąc, będzie nasłuchiwać źródło polecenia dla tego zdarzenia i zapytania <xref:System.Windows.Input.RoutedCommand> poprzez <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> metody.  Większości źródeł polecenie spowoduje wyłączenie się, jeśli nie można wykonać polecenia w ramach ich powiązanie polecenia.  Jest to przykład, gdy <xref:System.Windows.Controls.MenuItem> grays sam się, gdy nie można wykonać polecenia.  
  
 W niektórych sytuacjach <xref:System.Windows.Input.CommandManager> nie zna zmiany w warunkach zmieniającą możliwości polecenia do wykonania.  W takich przypadkach możesz wymusić <xref:System.Windows.Input.CommandManager> do zgłasza <xref:System.Windows.Input.CommandManager.RequerySuggested> zdarzenia przez wywołanie metody <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> metoda, to z kolei spowoduje <xref:System.Windows.Input.RoutedCommand> podnieść <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> zdarzeń.  
  
   
  
## Examples  
 Poniżej przedstawiono przykład <xref:System.Windows.Input.ICommand.CanExecuteChanged> obsługi zdarzeń z niestandardowej implementacji <xref:System.Windows.Input.ICommandSource>.  
  
 `this.Command` w tym przykładzie jest <xref:System.Windows.Input.ICommandSource.Command%2A> właściwość <xref:System.Windows.Input.ICommandSource>.  Jeśli polecenie nie jest `null`, polecenie jest rzutowane na <xref:System.Windows.Input.RoutedCommand>.  Jeśli polecenie jest <xref:System.Windows.Input.RoutedCommand>, a następnie <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> metoda jest wywoływana przekazywanie <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> i <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  Jeśli polecenie nie jest <xref:System.Windows.Input.RoutedCommand>, jest rzutowane na <xref:System.Windows.Input.ICommand> i <xref:System.Windows.Input.ICommand.CanExecute%2A> metoda jest wywoływana przekazywanie <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  
  
 Jeśli <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> metoda zwraca `true`, następnie formant jest włączony; w przeciwnym razie kontrolka jest wyłączona.  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (parameter As Object, target As IInputElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">Parametr przekazywany do obsługi zdefiniowane przez użytkownika.</param>
        <param name="target">Element, w którym należy rozpocząć wyszukiwanie programy obsługi poleceń.</param>
        <summary>Wykonuje <see cref="T:System.Windows.Input.RoutedCommand" /> na aktualnym elemencie docelowym polecenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rzeczywiste logiki, która wykonuje <xref:System.Windows.Input.RoutedCommand> nie jest zawarta w <xref:System.Windows.Input.RoutedCommand.Execute%2A> metody.  <xref:System.Windows.Input.RoutedCommand.Execute%2A> zgłasza <xref:System.Windows.Input.CommandManager.PreviewExecuted> i <xref:System.Windows.Input.CommandManager.Executed> zdarzenia, które tunelu i bąbelków za pośrednictwem elementu drzewa wyszukiwania dla obiektu o <xref:System.Windows.Input.CommandBinding>.  Jeśli <xref:System.Windows.Input.CommandBinding> tego <xref:System.Windows.Input.RoutedCommand> zostanie znaleziony, a następnie <xref:System.Windows.Input.ExecutedRoutedEventHandler> dołączony do <xref:System.Windows.Input.CommandBinding> jest wywoływana.  Te programy obsługi dostarczania logiki programowania, który wykonuje <xref:System.Windows.Input.RoutedCommand>.  
  
 <xref:System.Windows.Input.CommandManager.PreviewExecuted> i <xref:System.Windows.Input.CommandManager.Executed> zdarzenia są generowane na <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.  Jeśli <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> nie jest ustawiona na <xref:System.Windows.Input.ICommandSource>, <xref:System.Windows.Input.CommandManager.PreviewExecuted> i <xref:System.Windows.Input.CommandManager.Executed> zdarzenia są generowane na element z fokusem klawiatury.  
  
   
  
## Examples  
 Poniższy przykład pochodzi z niestandardowej implementacji <xref:System.Windows.Input.ICommandSource> próbki.  
  
 `this.Command` w tym przykładzie jest właściwością poleceń na <xref:System.Windows.Input.ICommandSource>.  Jeśli polecenie nie jest zerowa, polecenie jest rzutowane na <xref:System.Windows.Input.RoutedCommand>.  Jeśli jest <xref:System.Windows.Input.RoutedCommand>, a następnie <xref:System.Windows.Input.RoutedCommand.Execute%2A> metoda jest wywoływana przekazywanie <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> i <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  Jeśli polecenie nie jest <xref:System.Windows.Input.RoutedCommand>, jest rzutowane na <xref:System.Windows.Input.ICommand> i <xref:System.Windows.Input.ICommand.Execute%2A> metoda jest wywoływana przekazywanie <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandexecute)]
 [!code-vb[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandexecute)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="target" /> nie jest <see cref="T:System.Windows.UIElement" /> lub <see cref="T:System.Windows.ContentElement" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="InputGestures">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputGestureCollection InputGestures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGestureCollection InputGestures" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputGestures As InputGestureCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputGestureCollection ^ InputGestures { System::Windows::Input::InputGestureCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGestureCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję <see cref="T:System.Windows.Input.InputGesture" /> obiektów, które są skojarzone z tym poleceniem.</summary>
        <value>Wejściowy gestów.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład przedstawia sposób Dodaj nową <xref:System.Windows.Input.MouseGesture> do <xref:System.Windows.Input.RoutedCommand>.  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedcommand)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedcommand)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę polecenia.</summary>
        <value>Nazwa polecenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość może być używana podczas odwoływania się do <xref:System.Windows.Input.RoutedCommand> w [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)].  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera typ, który został zarejestrowany przy użyciu polecenia.</summary>
        <value>Typ polecenia właściciela.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.CanExecute">
      <MemberSignature Language="C#" Value="bool ICommand.CanExecute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Input.ICommand.CanExecute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CanExecute (parameter As Object) As Boolean Implements ICommand.CanExecute" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Input.ICommand.CanExecute(System::Object ^ parameter) = System::Windows::Input::ICommand::CanExecute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">Dane używane przez polecenie.  Jeśli polecenie nie wymaga przekazywania danych, ten obiekt może mieć wartości <see langword="null" />.</param>
        <summary>Opis tego członków, zobacz <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />.</summary>
        <returns>
          <see langword="true" /> Jeśli to polecenie może być wykonywane; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Windows.Input.RoutedCommand> wystąpienia jest rzutowane na <xref:System.Windows.Input.ICommand> interfejsu.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.Execute">
      <MemberSignature Language="C#" Value="void ICommand.Execute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Input.ICommand.Execute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Execute (parameter As Object) Implements ICommand.Execute" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Input.ICommand.Execute(System::Object ^ parameter) = System::Windows::Input::ICommand::Execute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">Dane używane przez polecenie.  Jeśli polecenie nie wymaga przekazywania danych, ten obiekt może mieć wartości <see langword="null" />.</param>
        <summary>Opis tego członków, zobacz <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Windows.Input.RoutedCommand> wystąpienia jest rzutowane na <xref:System.Windows.Input.ICommand> interfejsu.  
  
   
  
## Examples  
 Zobacz też  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>