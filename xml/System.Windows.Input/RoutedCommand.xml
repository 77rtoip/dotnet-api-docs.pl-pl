<Type Name="RoutedCommand" FullName="System.Windows.Input.RoutedCommand">
  <Metadata><Meta Name="ms.openlocfilehash" Value="73ff686e8a08ec56da27c0b4420781c44df4cb6e" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69170092" /></Metadata><TypeSignature Language="C#" Value="public class RoutedCommand : System.Windows.Input.ICommand" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RoutedCommand extends System.Object implements class System.Windows.Input.ICommand" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.RoutedCommand" />
  <TypeSignature Language="VB.NET" Value="Public Class RoutedCommand&#xA;Implements ICommand" />
  <TypeSignature Language="C++ CLI" Value="public ref class RoutedCommand : System::Windows::Input::ICommand" />
  <TypeSignature Language="F#" Value="type RoutedCommand = class&#xA;    interface ICommand" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommand</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiuje polecenie, które implementuje <see cref="T:System.Windows.Input.ICommand" /> i jest kierowane przez drzewo elementów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metody <xref:System.Windows.Input.RoutedCommand.Execute%2A> <xref:System.Windows.Input.ICommand>i <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> na obiekcie nie zawierają logiki aplikacji dla polecenia tak jak w przypadku typowych, ale raczej te metody zgłaszają zdarzenia, które przechodzą przez drzewo elementów szukające obiektu z <xref:System.Windows.Input.RoutedCommand> <xref:System.Windows.Input.CommandBinding>.  Programy obsługi zdarzeń dołączone do programu <xref:System.Windows.Input.CommandBinding> zawierają logikę poleceń.  
  
 Metoda wywołuje zdarzenia<xref:System.Windows.Input.CommandManager.Executed> i <xref:System.Windows.Input.CommandManager.PreviewExecuted>. <xref:System.Windows.Input.RoutedCommand.Execute%2A>  Metoda wywołuje zdarzenia<xref:System.Windows.Input.CommandManager.CanExecute> i <xref:System.Windows.Input.CommandManager.PreviewCanExecute>. <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>  
  
<a name="xamlAttributeUsage_RoutedCommand"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
 \<*object* *property*="*predefinedCommandName*"/>  
  
—lub—
  
 \<*object* *property*="*predefinedClassName*.*predefinedCommandName*"/>  
  
—lub—
  
 \<*object* *property*="{ *customClassName*.*customCommandName*}"/>  
  
<a name="xamlValues_RoutedCommand"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *predefinedClassName*  
 Jedna ze wstępnie zdefiniowanych klas poleceń.  
  
 *predefinedCommandName*  
 Jedno ze wstępnie zdefiniowanych poleceń.  
  
 *customClassName*  
 Klasa niestandardowa, która zawiera polecenie niestandardowe. Klasy niestandardowe zazwyczaj wymagają `xlmns` mapowania prefiksów; zobacz [przestrzenie nazw XAML i mapowanie przestrzeni nazw dla języka XAML WPF](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).  
  
 *customCommandName*  
 Polecenie niestandardowe.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.KeyGesture" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Input.RoutedCommand" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Input.RoutedCommand" /> klasy.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.RoutedCommand : string * Type -&gt; System.Windows.Input.RoutedCommand" Usage="new System.Windows.Input.RoutedCommand (name, ownerType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">Zadeklarowana nazwa dla serializacji.</param>
        <param name="ownerType">Typ, który rejestruje polecenie.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Windows.Input.RoutedCommand" /> klasy z określoną nazwą i typem właściciela.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="ownerType" />jest <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType, System.Windows.Input.InputGestureCollection inputGestures);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType, class System.Windows.Input.InputGestureCollection inputGestures) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type, inputGestures As InputGestureCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType, System::Windows::Input::InputGestureCollection ^ inputGestures);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.RoutedCommand : string * Type * System.Windows.Input.InputGestureCollection -&gt; System.Windows.Input.RoutedCommand" Usage="new System.Windows.Input.RoutedCommand (name, ownerType, inputGestures)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="inputGestures" Type="System.Windows.Input.InputGestureCollection" />
      </Parameters>
      <Docs>
        <param name="name">Zadeklarowana nazwa dla serializacji.</param>
        <param name="ownerType">Typ, który rejestruje polecenie.</param>
        <param name="inputGestures">Domyślne gesty wejściowe skojarzone z tym poleceniem.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Windows.Input.RoutedCommand" /> klasy z określoną nazwą, typem właściciela i kolekcją gestów.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Długość <paramref name="name" /> wynosi zero 
—lub— 
 <paramref name="ownerType" />jest <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanExecute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanExecute (parameter As Object, target As IInputElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanExecute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberSignature Language="F#" Value="member this.CanExecute : obj * System.Windows.IInputElement -&gt; bool" Usage="routedCommand.CanExecute (parameter, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">Typ danych zdefiniowany przez użytkownika.</param>
        <param name="target">Element docelowy polecenia.</param>
        <summary>Określa, czy <see cref="T:System.Windows.Input.RoutedCommand" /> może być wykonywane w bieżącym stanie.</summary>
        <returns><see langword="true" />Jeśli polecenie można wykonać na bieżącym obiekcie docelowym polecenia; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rzeczywista logika, która określa <xref:System.Windows.Input.RoutedCommand> , czy można wykonać na bieżącym obiekcie docelowym polecenia nie jest zawarta <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> w <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> <xref:System.Windows.Input.CommandManager.PreviewCanExecute> metodach, <xref:System.Windows.Input.CommandManager.CanExecute> a nie wywołuje i zdarzenia, które są tunelować i bąbelkowe za pomocą elementu drzewo szukające obiektu z <xref:System.Windows.Input.CommandBinding>.  <xref:System.Windows.Input.CommandBinding> Jeśli dlaprogramu<xref:System.Windows.Input.CanExecuteRoutedEventHandler> zostanie znalezione, przyłączone do <xref:System.Windows.Input.CommandBinding> jest wywoływana. <xref:System.Windows.Input.RoutedCommand>  Te programy obsługi dostarczają logiki programowania, aby określić, czy <xref:System.Windows.Input.RoutedCommand> można wykonać operację, czy nie.  
  
 Zdarzenia i są<xref:System.Windows.Input.CommandManager.PreviewExecuted> wywoływane w. <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> <xref:System.Windows.Input.CommandManager.PreviewCanExecute>  Jeśli nie <xref:System.Windows.Input.ICommandSource> <xref:System.Windows.Input.CommandManager.PreviewCanExecute> jest ustawiona na, zdarzenia i <xref:System.Windows.Input.CommandManager.CanExecute> są wywoływane na elemencie z fokusem klawiatury. <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>  
  
   
  
## Examples  
 Poniższy przykład to <xref:System.Windows.Input.ICommand.CanExecuteChanged> program obsługi zdarzeń z niestandardowej implementacji programu <xref:System.Windows.Input.ICommandSource>.  
  
 `this.Command`w tym przykładzie jest <xref:System.Windows.Input.ICommandSource.Command%2A> właściwością. <xref:System.Windows.Input.ICommandSource>  Jeśli polecenie nie `null`jest, polecenie jest rzutowane <xref:System.Windows.Input.RoutedCommand>na.  Jeśli polecenie ma wartość a <xref:System.Windows.Input.RoutedCommand>, <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> Metoda jest <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>wywoływana z <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> przekazaniem i.  Jeśli polecenie nie <xref:System.Windows.Input.RoutedCommand>jest, jest rzutowane <xref:System.Windows.Input.ICommand> na i <xref:System.Windows.Input.ICommand.CanExecute%2A> Metoda jest wywoływana <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  
  
 Jeśli metoda zwraca `true`, wówczas formant jest włączony; w przeciwnym razie formant jest wyłączony. <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="target" />nie <see cref="T:System.Windows.UIElement" /> jest ani <see cref="T:System.Windows.ContentElement" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanExecuteChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CanExecuteChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CanExecuteChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.RoutedCommand.CanExecuteChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CanExecuteChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ CanExecuteChanged;" />
      <MemberSignature Language="F#" Value="member this.CanExecuteChanged : EventHandler " Usage="member this.CanExecuteChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.Input.ICommand.CanExecuteChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy zmiany w źródle polecenia zostaną wykryte przez menedżera poleceń. Te zmiany często wpływają na to, czy polecenie powinno zostać wykonane na bieżącym obiekcie docelowym polecenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nasłuchuje <xref:System.Windows.Input.CommandManager.RequerySuggested> zdarzenia, <xref:System.Windows.Input.CommandManager>które jest zgłaszane przez. <xref:System.Windows.Input.RoutedCommand> <xref:System.Windows.Input.CommandManager.RequerySuggested> Zdarzenie jest zgłaszane w przypadku spełnienia warunków, które mogą zmienić, czy polecenie powinno zostać wykonane, takie jak zmiana fokusu klawiatury.  Gdy polecenie odbiera <xref:System.Windows.Input.CommandManager.RequerySuggested> zdarzenie, <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> wywołuje zdarzenie.  Ogólnie rzecz biorąc, źródło polecenia będzie nasłuchiwać tego zdarzenia i wykonywać <xref:System.Windows.Input.RoutedCommand> zapytania w postaci <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> metody.  Większość źródeł poleceń zostanie wyłączona, jeśli polecenie nie może zostać wykonane w ramach powiązania poleceń.  Przykładem jest to, że <xref:System.Windows.Controls.MenuItem> Jeśli polecenie nie może zostać wykonane, jest szare.  
  
 W niektórych sytuacjach <xref:System.Windows.Input.CommandManager> jest nieświadomy zmiany w warunkach, które zmieniają zdolność wykonywania polecenia.  W takich przypadkach <xref:System.Windows.Input.CommandManager> można wymusić wymuszenie <xref:System.Windows.Input.CommandManager.RequerySuggested> zdarzenia przez wywołanie <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> <xref:System.Windows.Input.RoutedCommand> metody. <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> spowoduje to wygenerowanie zdarzenia.  
  
   
  
## Examples  
 Poniższy przykład to <xref:System.Windows.Input.ICommand.CanExecuteChanged> program obsługi zdarzeń z niestandardowej implementacji programu <xref:System.Windows.Input.ICommandSource>.  
  
 `this.Command`w tym przykładzie jest <xref:System.Windows.Input.ICommandSource.Command%2A> właściwością. <xref:System.Windows.Input.ICommandSource>  Jeśli polecenie nie `null`jest, polecenie jest rzutowane <xref:System.Windows.Input.RoutedCommand>na.  Jeśli polecenie ma wartość a <xref:System.Windows.Input.RoutedCommand>, <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> Metoda jest <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>wywoływana z <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> przekazaniem i.  Jeśli polecenie nie <xref:System.Windows.Input.RoutedCommand>jest, jest rzutowane <xref:System.Windows.Input.ICommand> na i <xref:System.Windows.Input.ICommand.CanExecute%2A> Metoda jest wywoływana <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  
  
 Jeśli metoda zwraca `true`, wówczas formant jest włączony; w przeciwnym razie formant jest wyłączony. <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (parameter As Object, target As IInputElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberSignature Language="F#" Value="member this.Execute : obj * System.Windows.IInputElement -&gt; unit" Usage="routedCommand.Execute (parameter, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">Parametr zdefiniowany przez użytkownika, który ma zostać przesłany do procedury obsługi.</param>
        <param name="target">Element, od którego należy zacząć wyszukiwanie programów obsługi poleceń.</param>
        <summary><see cref="T:System.Windows.Input.RoutedCommand" /> Wykonuje na bieżącym obiekcie docelowym polecenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rzeczywista logika, która <xref:System.Windows.Input.RoutedCommand> wykonuje nie jest zawarta <xref:System.Windows.Input.RoutedCommand.Execute%2A> w metodach.  <xref:System.Windows.Input.RoutedCommand.Execute%2A>podnosi zdarzenia <xref:System.Windows.Input.CommandManager.PreviewExecuted> i <xref:System.Windows.Input.CommandManager.Executed> , które są tunelowanie i bąbelki przez drzewo elementów szukające obiektu z <xref:System.Windows.Input.CommandBinding>.  <xref:System.Windows.Input.CommandBinding> Jeśli dlaprogramu<xref:System.Windows.Input.ExecutedRoutedEventHandler> zostanie znalezione, przyłączone do <xref:System.Windows.Input.CommandBinding> jest wywoływana. <xref:System.Windows.Input.RoutedCommand>  Te programy obsługi dostarczają logiki programowania, która wykonuje <xref:System.Windows.Input.RoutedCommand>.  
  
 Zdarzenia i są<xref:System.Windows.Input.CommandManager.Executed> wywoływane w. <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> <xref:System.Windows.Input.CommandManager.PreviewExecuted>  Jeśli nie <xref:System.Windows.Input.ICommandSource> <xref:System.Windows.Input.CommandManager.PreviewExecuted> jest ustawiona na, zdarzenia i <xref:System.Windows.Input.CommandManager.Executed> są wywoływane na elemencie z fokusem klawiatury. <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>  
  
   
  
## Examples  
 Poniższy przykład pochodzi z niestandardowej implementacji <xref:System.Windows.Input.ICommandSource> przykładu.  
  
 `this.Command`w tym przykładzie jest to właściwość polecenia w <xref:System.Windows.Input.ICommandSource>.  Jeśli polecenie nie ma wartości null, polecenie jest rzutowane na <xref:System.Windows.Input.RoutedCommand>.  Jeśli jest <xref:System.Windows.Input.RoutedCommand>, <xref:System.Windows.Input.RoutedCommand.Execute%2A> Metodajest<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>wywoływana, przekazując i.<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>  Jeśli polecenie nie <xref:System.Windows.Input.RoutedCommand>jest, jest rzutowane <xref:System.Windows.Input.ICommand> na i <xref:System.Windows.Input.ICommand.Execute%2A> Metoda jest wywoływana <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandexecute)]
 [!code-vb[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandexecute)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="target" />nie <see cref="T:System.Windows.UIElement" /> jest ani <see cref="T:System.Windows.ContentElement" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="InputGestures">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputGestureCollection InputGestures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGestureCollection InputGestures" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputGestures As InputGestureCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputGestureCollection ^ InputGestures { System::Windows::Input::InputGestureCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputGestures : System.Windows.Input.InputGestureCollection" Usage="System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGestureCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję <see cref="T:System.Windows.Input.InputGesture" /> obiektów, które są skojarzone z tym poleceniem.</summary>
        <value>Gesty wejściowe.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład pokazuje, jak dodać nowy <xref:System.Windows.Input.MouseGesture> <xref:System.Windows.Input.RoutedCommand>do.  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedcommand)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedcommand)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Windows.Input.RoutedCommand.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę polecenia.</summary>
        <value>Nazwa polecenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość może być używana podczas odwoływania <xref:System.Windows.Input.RoutedCommand> się [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]do elementu w.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnerType : Type" Usage="System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera typ, który jest zarejestrowany przy użyciu polecenia.</summary>
        <value>Typ właściciela polecenia.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.CanExecute">
      <MemberSignature Language="C#" Value="bool ICommand.CanExecute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Input.ICommand.CanExecute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CanExecute (parameter As Object) As Boolean Implements ICommand.CanExecute" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Input.ICommand.CanExecute(System::Object ^ parameter) = System::Windows::Input::ICommand::CanExecute;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Input.ICommand.CanExecute(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">Dane używane przez polecenie.  Jeśli polecenie nie wymaga przekazywania danych, ten obiekt może być ustawiony na <see langword="null" />.</param>
        <summary>Opis tych elementów członkowskich można znaleźć w temacie <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />.</summary>
        <returns><see langword="true" />Jeśli to polecenie można wykonać; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Może być używana tylko wtedy, <xref:System.Windows.Input.RoutedCommand> gdy wystąpienie jest rzutowane <xref:System.Windows.Input.ICommand> do interfejsu.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.Execute">
      <MemberSignature Language="C#" Value="void ICommand.Execute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Input.ICommand.Execute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Execute (parameter As Object) Implements ICommand.Execute" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Input.ICommand.Execute(System::Object ^ parameter) = System::Windows::Input::ICommand::Execute;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Input.ICommand.Execute(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">Dane używane przez polecenie.  Jeśli polecenie nie wymaga przekazywania danych, ten obiekt może być ustawiony na <see langword="null" />.</param>
        <summary>Opis tych elementów członkowskich można znaleźć w temacie <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Może być używana tylko wtedy, <xref:System.Windows.Input.RoutedCommand> gdy wystąpienie jest rzutowane <xref:System.Windows.Input.ICommand> do interfejsu.  
  
   
  
## Examples  
 Zobacz też  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
