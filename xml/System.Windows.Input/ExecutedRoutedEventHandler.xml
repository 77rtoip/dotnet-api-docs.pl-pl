<Type Name="ExecutedRoutedEventHandler" FullName="System.Windows.Input.ExecutedRoutedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5cb12a2cc5ed353d695ecbf78462a4227628d38d" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37505200" /></Metadata><TypeSignature Language="C#" Value="public delegate void ExecutedRoutedEventHandler(object sender, ExecutedRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ExecutedRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ExecutedRoutedEventHandler(sender As Object, e As ExecutedRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ExecutedRoutedEventHandler(System::Object ^ sender, ExecutedRoutedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type ExecutedRoutedEventHandler = delegate of obj * ExecutedRoutedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.ExecutedRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">Obiekt, w której jest dołączony program obsługi zdarzeń.</param>
    <param name="e">Dane dotyczące zdarzenia.</param>
    <summary>Reprezentuje metodę, która będzie obsługiwać <see cref="E:System.Windows.Input.CommandBinding.Executed" /> i <see cref="E:System.Windows.Input.CommandBinding.PreviewExecuted" /> zdarzeń, a także powiązane zdarzenia dołączone.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten delegat zawiera logikę implementacji <xref:System.Windows.Input.RoutedCommand>.  Oddzielenie logiki wykonania polecenia umożliwia polecenie do wywołania z różnych źródeł i typy i umożliwia centralnego logiki polecenia.  
  
 Ten delegat jest również używany do <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> i <xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType>, które są dołączone zdarzenia na <xref:System.Windows.Input.CommandManager> klasę, która implementuje wiele sterująca infrastruktury. Ale najbardziej praktycznym obsługi będzie obsługiwać <xref:System.Windows.Input.CommandBinding.Executed> zdarzenia z określonego <xref:System.Windows.Input.CommandBinding>, a nie działały w <xref:System.Windows.Input.CommandManager> poziom.  
  
 W ramach <xref:System.Windows.Input.ExecutedRoutedEventArgs>, następujące właściwości są zwykle zainteresowania pisząc program obsługi zdarzeń dla zdarzenia trasowanego, która wynika z wykonanego polecenia:  
  
-   <xref:System.Windows.RoutedEventArgs.Source%2A> Raporty docelowego, w którym polecenie zostało wykonane. Po wykonaniu polecenia, można również porównać <xref:System.Windows.RoutedEventArgs.Source%2A> więcej zazwyczaj w kierowane warunkach zdarzeń jako obiekt, który wywołał zdarzenie trasowane.  
  
-   <xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A> Raporty wykonywanego polecenia. Ta właściwość jest przydatna, jeśli używasz polecenia powiązania, a podczas pisania procedur obsługi, które potencjalnie obsługują wiele poleceń.  
  
-   <xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A> raportuje wszystkie parametry specyficzne dla danego polecenia, które zostały przekazane przez wykonywanego polecenia. Nie wszystkie polecenia użyj lub oczekiwać parametrami specyficznymi dla polecenia.  
  
-   <xref:System.Windows.RoutedEventArgs.Handled%2A> Raporty, czy zdarzenie trasowane, który jest wynikiem wykonanego polecenia już został obsłużony przez inny element wzdłuż trasy. Procedury obsługi zdarzeń trasowanych, jest zalecaną praktyką istnieją programy obsługi, które wykonują istotną pracę podczas obsługi zdarzeń, aby ustawić <xref:System.Windows.RoutedEventArgs.Handled%2A> do `true`. Zapobiega to typowe programy obsługi dla zdarzenia obsługi zdarzenia ponownie dalej w tym samym trasy. Aby uzyskać więcej informacji na temat obsługi zdarzenia trasowane, zobacz [oznaczanie zdarzeń trasowanych jako Handled oraz obsługa klasy](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 Ten delegat reprezentuje również programy obsługi dla <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> i <xref:System.Windows.Input.CommandManager.PreviewExecutedEvent?displayProperty=nameWithType>, które są dołączone zdarzenia na <xref:System.Windows.Input.CommandManager> klasę, która implementuje wiele sterująca infrastruktury. Ale najbardziej praktycznym obsługi będzie obsługiwać <xref:System.Windows.Input.CommandBinding.Executed> zdarzenia z określonego <xref:System.Windows.Input.CommandBinding>, a nie działały w <xref:System.Windows.Input.CommandManager> poziom.  
  
 Aby uzyskać więcej informacji na temat polecenia, zobacz [polecenia Przegląd](~/docs/framework/wpf/advanced/commanding-overview.md).  
  
   
  
## Examples  
 Ten przykład tworzy <xref:System.Windows.Input.ExecutedRoutedEventHandler> określająca właściwości wizualnej w elemencie docelowym podczas wykonywania polecenia. Zawiera również przykład <xref:System.Windows.Input.CanExecuteRoutedEventHandler> dla tego samego polecenia.  
  
 [!code-csharp[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/Custom_RoutedCommand/CSharp/Window1.xaml.cs#custom_routedcommandhandlers)]
 [!code-vb[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Custom_RoutedCommand/visualbasic/window1.xaml.vb#custom_routedcommandhandlers)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
  </Docs>
</Type>