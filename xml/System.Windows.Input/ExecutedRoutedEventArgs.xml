<Type Name="ExecutedRoutedEventArgs" FullName="System.Windows.Input.ExecutedRoutedEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ea33421baaeb9d1edc15547320a9cdab98cbf1b3" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69172765" /></Metadata><TypeSignature Language="C#" Value="public sealed class ExecutedRoutedEventArgs : System.Windows.RoutedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ExecutedRoutedEventArgs extends System.Windows.RoutedEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ExecutedRoutedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ExecutedRoutedEventArgs&#xA;Inherits RoutedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExecutedRoutedEventArgs sealed : System::Windows::RoutedEventArgs" />
  <TypeSignature Language="F#" Value="type ExecutedRoutedEventArgs = class&#xA;    inherit RoutedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.RoutedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Dostarcza dane dla <see cref="E:System.Windows.Input.CommandManager.Executed" /> zdarzeń i <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" /> .</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.ExecutedRoutedEventHandler>reprezentuje metodę implementującą logikę poleceń elementu <xref:System.Windows.Input.RoutedCommand>.  Oddzielenie logiki implementacji z polecenia umożliwia wywoływanie polecenia z różnych źródeł i typów oraz pozwala na scentralizowanie logiki poleceń.  
  
 Ta klasa danych zdarzenia jest również używana dla <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> i <xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType>. Jednak większość praktycznych programów obsługi będzie obsługiwać <xref:System.Windows.Input.CommandBinding.Executed> zdarzenia z określonego <xref:System.Windows.Input.CommandBinding>, <xref:System.Windows.Input.CommandManager> a nie na poziomie.  
  
 Aby uzyskać więcej informacji na temat poleceń, zobacz [Omówienie poleceń](~/docs/framework/wpf/advanced/commanding-overview.md).  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Windows.Input.ExecutedRoutedEventHandler> , który <xref:System.Windows.MessageBox> otwiera, gdy polecenie jest wykonywane.  
  
 [!code-csharp[commandwithhandler#CommandHandlerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerexecutedhandler)]
 [!code-vb[commandwithhandler#CommandHandlerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerexecutedhandler)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
  </Docs>
  <Members>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ExecutedRoutedEventArgs.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand" Usage="System.Windows.Input.ExecutedRoutedEventArgs.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera polecenie, które zostało wywołane.</summary>
        <value>Polecenie skojarzone z tym zdarzeniem.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Polecenie skojarzone ze zdarzeniem może być rzutowane na określoną implementację <xref:System.Windows.Input.ICommand>, taką <xref:System.Windows.Input.RoutedCommand>jak, jeśli typ jest znany.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Windows.Input.ExecutedRoutedEventHandler> , który obsługuje wiele poleceń. Program obsługi sprawdza <xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A> Właściwość <xref:System.Windows.Input.ExecutedRoutedEventArgs> w celu określenia metody do wywołania.  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewMultipleCmdHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewmultiplecmdhandler)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewMultipleCmdHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewmultiplecmdhandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object target);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ExecutedRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, target As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ target);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="executedRoutedEventArgs.InvokeEventHandler (genericHandler, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public object Parameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ExecutedRoutedEventArgs.Parameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parameter { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parameter : obj" Usage="System.Windows.Input.ExecutedRoutedEventArgs.Parameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera parametr Data polecenia.</summary>
        <value>Dane specyficzne dla polecenia. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość reprezentuje parametr danych ogólnych, który jest definiowany przez określone polecenie.  
  
 Jeśli ten parametr nie jest wymagany, `null` można go przekazywać.  
  
 <xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A> Zwykle jest używany do przekazywania określonych informacji do polecenia podczas jego wykonywania.  Typ danych jest definiowany przez polecenie.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Windows.Input.ExecutedRoutedEventHandler> dla niestandardowej <xref:System.Windows.Input.RoutedCommand>.  Program obsługi aktualizuje <xref:System.Windows.Controls.TextBox> z bieżącą godziną <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> i Właściwość <xref:System.Windows.Controls.Slider> kontrolki <xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A?displayProperty=nameWithType>, która jest przesyłana do programu obsługi za pomocą.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleExecuted](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampleexecuted)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleExecuted](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampleexecuted)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
  </Members>
</Type>
