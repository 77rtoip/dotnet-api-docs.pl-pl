<Type Name="InputBinding" FullName="System.Windows.Input.InputBinding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ee50ccaed3e61c000b209fe350acc1140bd269f1" /><Meta Name="ms.sourcegitcommit" Value="e7974886b08aa83a8fb461e8550f31a7d4331ee3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/23/2019" /><Meta Name="ms.locfileid" Value="68400039" /></Metadata><TypeSignature Language="C#" Value="public class InputBinding : System.Windows.Freezable, System.Windows.Input.ICommandSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InputBinding extends System.Windows.Freezable implements class System.Windows.Input.ICommandSource" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.InputBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class InputBinding&#xA;Inherits Freezable&#xA;Implements ICommandSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class InputBinding : System::Windows::Freezable, System::Windows::Input::ICommandSource" />
  <TypeSignature Language="F#" Value="type InputBinding = class&#xA;    inherit Freezable&#xA;    interface ICommandSource" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Freezable</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-3.0">System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommandSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Reprezentuje powiązanie między <see cref="T:System.Windows.Input.InputGesture" /> i poleceniem. Polecenie jest potencjalnie a <see cref="T:System.Windows.Input.RoutedCommand" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz określić, że dane wejściowe użytkownika wywoła polecenie, tworząc <xref:System.Windows.Input.InputBinding>. Gdy użytkownik wykonuje określone dane wejściowe, <xref:System.Windows.Input.ICommand> zostanie wykonana <xref:System.Windows.Input.InputBinding.Command%2A> właściwość, która jest ustawiona na wartość właściwości.  
  
 Można <xref:System.Windows.Input.InputBinding> określić, że wywołuje polecenie, które jest zdefiniowane dla obiektu przez utworzenie powiązania <xref:System.Windows.Input.InputBinding.Command%2A>dla właściwości, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>i <xref:System.Windows.Input.InputBinding.CommandTarget%2A> . Umożliwia to zdefiniowanie polecenia niestandardowego i skojarzenie go z danymi wejściowymi użytkownika. Aby uzyskać więcej informacji, zobacz drugi przykład w sekcji przykładów.  
  
 Można zdefiniować dla określonego obiektu lub na poziomie klasy przez <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> zarejestrowanie z użyciem <xref:System.Windows.Input.CommandManager>. <xref:System.Windows.Input.InputBinding>  
  
 Sama <xref:System.Windows.Input.InputBinding> Klasa nie obsługuje użycia XAML, ponieważ nie ujawnia publicznego konstruktora bez parametrów (istnieje Konstruktor bez parametrów, ale jest chroniony). Jednak klasy pochodne mogą uwidaczniać Konstruktor publiczny i w związku z tym mogą ustawiać właściwości klasy pochodnej, która jest dziedziczona <xref:System.Windows.Input.InputBinding> z użyciem języka XAML. Dwie istniejące <xref:System.Windows.Input.InputBinding>klasy pochodne, które mogą być tworzone w języku XAML i mogą ustawiać właściwości w <xref:System.Windows.Input.KeyBinding> języku XAML i <xref:System.Windows.Input.MouseBinding>. Typowa właściwość w [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] programowaniu, która jest ustawiana w języku XAML i przyjmuje <xref:System.Windows.Input.InputBinding> jeden lub więcej <xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType> obiektów, jako wartości właściwości.  
  
<a name="xamlObjectElementUsage_InputBinding"></a>   
## <a name="xaml-object-element-usage"></a>Użycie elementu obiektu języka XAML  
 \<*inputBindingDerivedClass…/*>  
  
<a name="xamlValues_InputBinding"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 `inputBindingDerivedClass`  
 Klasa <xref:System.Windows.Input.InputBinding> pochodna, która obsługuje składnię elementu obiektu, taką <xref:System.Windows.Input.KeyBinding> jak <xref:System.Windows.Input.MouseBinding>lub. Zobacz uwagi.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak użyć, <xref:System.Windows.Input.KeyBinding> aby <xref:System.Windows.Input.KeyGesture> powiązać <xref:System.Windows.Input.ApplicationCommands.Open%2A> z poleceniem. Gdy gest zostanie wykonany, polecenie Otwórz jest wywoływane.  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 W poniższych przykładach pokazano, jak powiązać polecenie niestandardowe z <xref:System.Windows.Input.InputBinding> obiektami. W tych przykładach można utworzyć aplikację, która umożliwia użytkownikowi zmianę koloru tła, wykonując jedną z następujących czynności:  
  
-   Kliknięcie przycisku.  
  
-   Naciśnij klawisze CTRL + C.  
  
-   Kliknięcie <xref:System.Windows.Controls.StackPanel> prawym przyciskiem myszy ( <xref:System.Windows.Controls.ListBox>poza obszarem).  
  
 Pierwszy przykład tworzy klasę o nazwie `SimpleDelegateCommand`. Ta klasa akceptuje delegata, dzięki czemu obiekt tworzący polecenie może definiować akcję wykonywaną po wykonaniu polecenia. `SimpleDelegateCommand`definiuje również właściwości, które określają, jakie dane wejściowe za pomocą klawisza i myszy wywołuje polecenie. `GestureKey`i `GestureModifier` Określ dane wejściowe z klawiatury; `MouseGesture` określa dane wejściowe myszy.  
  
 [!code-csharp[InputCommandBinding#DelegateCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#delegatecommand)]
 [!code-vb[InputCommandBinding#DelegateCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#delegatecommand)]  
  
 Poniższy przykład tworzy i inicjuje `ColorChangeCommand`, czyli. `SimpleDelegateCommand` W przykładzie zdefiniowano również metodę, która jest wykonywana, gdy polecenie jest wywoływane i `GestureKey`ustawia `GestureModifier`właściwości, `MouseGesture` , i. Aplikacja wywoła `InitializeCommand` metodę po rozpoczęciu <xref:System.Windows.Window>działania programu, na przykład w konstruktorze.  
  
 [!code-csharp[InputCommandBinding#InitializeCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#initializecommand)]
 [!code-vb[InputCommandBinding#InitializeCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#initializecommand)]  
  
 Na koniec Poniższy przykład tworzy interfejs użytkownika. Przykład dodaje <xref:System.Windows.Input.KeyBinding> a <xref:System.Windows.Input.MouseBinding> i <xref:System.Windows.Controls.StackPanel> doa<xref:System.Windows.Controls.ListBox>, który zawiera a i.<xref:System.Windows.Controls.Button> Gdy użytkownik wybierze element w <xref:System.Windows.Controls.ListBox>, może zmienić kolor tła na wybrany kolor. W każdym przypadku `CommandParameter` właściwość jest powiązana z wybranym elementem <xref:System.Windows.Controls.ListBox>w, a `Command` właściwość jest powiązana `ColorChangeCommand`z. Właściwości <xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType>i <xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType> sąpowiązanezodpowiednimi`SimpleDelegateCommand` właściwościami klasy.  
  
 [!code-xaml[InputCommandBinding#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.UIElement.InputBindings" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Input.InputBinding" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InputBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InputBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Zapewnia podstawową inicjalizację klas pochodnych <see cref="T:System.Windows.Input.InputBinding" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.InputBinding>nie jest technicznie klasą abstrakcyjną, ale Konstruktor bez parametrów ma świadomy dostęp do ochrony. Ma to wpływ na sposób tworzenia <xref:System.Windows.Input.InputBinding> klasy abstrakcyjnej dla języka XAML. Istnieją właściwości w programie [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] , które mają użycie języka XAML, które oczekują obiektów typu <xref:System.Windows.Input.InputBinding>, <xref:System.Windows.Input.InputBinding> ale nie można określić wystąpienia w języku XAML. Zamiast tego można określić jedną z klas pochodnych specyficznych <xref:System.Windows.Input.InputBinding> dla urządzenia jako wartości, na przykład <xref:System.Windows.Input.KeyBinding> lub <xref:System.Windows.Input.MouseBinding>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Jeśli zaimplementowano niestandardowe <see cref="T:System.Windows.Input.InputBinding" /> , które obsługuje użycie XAML, użyj tego konstruktora do inicjowania podstawowego.</para></block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InputBinding (System.Windows.Input.ICommand command, System.Windows.Input.InputGesture gesture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.InputGesture gesture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, gesture As InputGesture)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InputBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::InputGesture ^ gesture);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.InputBinding : System.Windows.Input.ICommand * System.Windows.Input.InputGesture -&gt; System.Windows.Input.InputBinding" Usage="new System.Windows.Input.InputBinding (command, gesture)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="gesture" Type="System.Windows.Input.InputGesture" />
      </Parameters>
      <Docs>
        <param name="command">Polecenie do skojarzenia z <paramref name="gesture" />.</param>
        <param name="gesture">Gest wejścia do skojarzenia <paramref name="command" />.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Windows.Input.InputBinding" /> klasy z określonym poleceniem i gestem wejścia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli jesteś deweloperem oprogramowania korzystającym z istniejących klas powiązań wejściowych, zazwyczaj nie będziesz używać tego konstruktora nawet w przypadku definiowania poleceń niestandardowych. Zamiast tego należy użyć konstruktorów klas pochodnych (<xref:System.Windows.Input.KeyBinding> i <xref:System.Windows.Input.MouseBinding>) lub użyć tego konstruktora jako podstawowego wystąpienia klasy niestandardowej. <xref:System.Windows.Input.InputBinding> Chociaż Klasa obsługuje różne urządzenia wejściowe, w szczególności należy wybrać urządzenie, które będzie reprezentowane przez powiązanie wejściowe. Można ustawić tylko jedną <xref:System.Windows.Input.InputBinding.Gesture%2A> wartość w powiązaniu wejściowym, a gesty są specyficzne dla urządzenia.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tego konstruktora do skojarzenia <xref:System.Windows.Input.KeyGesture> <xref:System.Windows.Input.RoutedCommand>z.  
  
 [!code-csharp[commandlibrarysnippets#InputBindingAddingCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#inputbindingaddingcommand)]
 [!code-vb[commandlibrarysnippets#InputBindingAddingCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#inputbindingaddingcommand)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="command" />lub <paramref name="gesture" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CloneCore">
      <MemberSignature Language="C#" Value="protected override void CloneCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="override this.CloneCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.CloneCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">Obiekt, który ma zostać sklonowany.</param>
        <summary>Kopiuje podstawowe (Nieanimowane) wartości właściwości określonego obiektu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValueCore">
      <MemberSignature Language="C#" Value="protected override void CloneCurrentValueCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCurrentValueCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCurrentValueCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCurrentValueCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="override this.CloneCurrentValueCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.CloneCurrentValueCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">Obiekt, który ma zostać sklonowany.</param>
        <summary>Kopiuje bieżące wartości właściwości określonego obiektu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Command" />
      <MemberSignature Language="VB.NET" Value="Public Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); void set(System::Windows::Input::ICommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand with get, set" Usage="System.Windows.Input.InputBinding.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Windows.Input.ICommand" /> skojarzenie skojarzone z tym powiązaniem wejściowym.</summary>
        <value>Skojarzone polecenie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.InputBinding> Klasa nie obsługuje użycia XAML, ponieważ nie ujawnia publicznego konstruktora bez parametrów (ma Konstruktor bez parametrów, ale jest chroniony). Jednak klasy pochodne mogą uwidaczniać Konstruktor publiczny i w związku z tym mogą używać właściwości, które są <xref:System.Windows.Input.InputBinding>dziedziczone z. Dwie istniejące <xref:System.Windows.Input.InputBinding> klasy pochodne, które mogą być tworzone w języku XAML i mogą ustawiać właściwości przy użyciu języka XAML <xref:System.Windows.Input.KeyBinding> , <xref:System.Windows.Input.MouseBinding>są i.  
  
 <xref:System.Windows.Input.ICommand>odwołuje się do konwertera typów, który <xref:System.Windows.Input.ICommand> umożliwia pewnym istniejącym implementacjom Określanie wartości w postaci ciągu. To zachowanie konwersji typu ustawia wartość atrybutu w postaci wartości tej właściwości. Można również powiązać <xref:System.Windows.Input.InputBinding.Command%2A>właściwości, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>i <xref:System.Windows.Input.InputBinding.CommandTarget%2A> z <xref:System.Windows.Input.ICommand> obiektem, który jest zdefiniowany w obiekcie. Umożliwia to zdefiniowanie polecenia niestandardowego i skojarzenie go z danymi wejściowymi użytkownika. Aby uzyskać więcej informacji, zobacz drugi przykład w <xref:System.Windows.Input.InputBinding>.  
  
<a name="xamlAttributeUsage_Command"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
 <`inputBindingDerivedClass` `Command`="<xref:System.Windows.Input.ICommand>"/>  
  
<a name="xamlPropertyElementUsage_Command"></a>   
## <a name="xaml-property-element-usage"></a>Użycie elementu właściwości języka XAML  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Command>  
    <iCommandImplementation/>  
  </inputBindingDerivedClass.Command>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_Command"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 `inputBindingDerivedClass`  
 Klasa <xref:System.Windows.Input.InputBinding> pochodna, która obsługuje składnię elementu obiektu, taką <xref:System.Windows.Input.KeyBinding> jak <xref:System.Windows.Input.MouseBinding>lub. Zobacz uwagi.  
  
 `iCommandImplementation`  
 Implementacja <xref:System.Windows.Input.ICommand> obiektu, która obsługuje składnię elementu obiektu (ma publiczny Konstruktor bez parametrów).  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak użyć, <xref:System.Windows.Input.KeyBinding> aby <xref:System.Windows.Input.KeyGesture> powiązać <xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType> z poleceniem. Gdy gest zostanie wykonany, polecenie Otwórz jest wywoływane.  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewkeybinding)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewkeybinding)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Windows.Input.InputBinding.Command" /> Wartość to<see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
      </Docs>
    </Member>
    <Member MemberName="CommandParameter">
      <MemberSignature Language="C#" Value="public object CommandParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CommandParameter { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandParameter : obj with get, set" Usage="System.Windows.Input.InputBinding.CommandParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia dane specyficzne dla polecenia dla danego polecenia.</summary>
        <value>Dane specyficzne dla polecenia. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.InputBinding.CommandParameter%2A> Właściwość służy do przekazywania określonych informacji do polecenia podczas jego wykonywania. Typ danych jest definiowany przez polecenie. Wiele poleceń nie oczekuje parametrów polecenia; dla tych poleceń wszystkie przesłane parametry polecenia zostaną zignorowane.  
  
 Jeśli polecenie, z którym jest skojarzone powiązanie <xref:System.Windows.Input.RoutedCommand>danych wejściowych <xref:System.Windows.Input.InputBinding.CommandParameter%2A> , jest, jest przesyłane do <xref:System.Windows.Input.RoutedCommand> programów obsługi za pomocą <xref:System.Windows.Input.ExecutedRoutedEventArgs> i <xref:System.Windows.Input.CanExecuteRoutedEventArgs> danych zdarzenia podczas przetwarzania polecenia.  
  
 Typ danych i cel parametru polecenia są zdefiniowane inaczej dla każdego polecenia i mogą być `null`. Można powiązać <xref:System.Windows.Input.InputBinding.Command%2A>właściwości, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>i <xref:System.Windows.Input.InputBinding.CommandTarget%2A> z <xref:System.Windows.Input.ICommand> , które są zdefiniowane dla obiektu. Umożliwia to zdefiniowanie polecenia niestandardowego i skojarzenie go z danymi wejściowymi użytkownika. Aby uzyskać więcej informacji, zobacz drugi przykład w <xref:System.Windows.Input.InputBinding>.  
  
 <xref:System.Windows.Input.InputBinding> Klasa nie obsługuje użycia XAML, ponieważ nie ujawnia publicznego konstruktora bez parametrów (ma Konstruktor bez parametrów, ale jest chroniony). Jednak klasy pochodne mogą uwidaczniać Konstruktor publiczny i w związku z tym mogą ustawiać właściwości dziedziczone z <xref:System.Windows.Input.InputBinding> użycia języka XAML. Dwie istniejące <xref:System.Windows.Input.InputBinding> klasy pochodne, które mogą być tworzone w języku XAML i mogą ustawiać właściwości w <xref:System.Windows.Input.KeyBinding> języku XAML <xref:System.Windows.Input.MouseBinding>i.  
  
<a name="xamlAttributeUsage_CommandParameter"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
  
```  
<inputBindingDerivedClass CommandParameter="commandParameterString"/>  
```  
  
<a name="xamlPropertyElementUsage_CommandParameter"></a>   
## <a name="xaml-property-element-usage"></a>Użycie elementu właściwości języka XAML  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.CommandParameter>  
    <commandParameterObject/>  
  </inputBindingDerivedClass.CommandParameter>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_CommandParameter"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 `inputBindingDerivedClass`  
 Klasa <xref:System.Windows.Input.InputBinding> pochodna, która obsługuje składnię elementu obiektu, taką <xref:System.Windows.Input.KeyBinding> jak <xref:System.Windows.Input.MouseBinding>lub. Zobacz uwagi.  
  
 `commandParameterString`  
 Ciąg, który jest przetwarzany przez określone polecenie. Ciągi są typowym typem używanym dla parametrów poleceń, ponieważ można je łatwo ustawić w języku XAML. W oczekiwanym formacie ciągu i jego przeznaczeniu zapoznaj się z dokumentacją dotyczącą konkretnego polecenia, z którym skojarzone jest powiązanie danych wejściowych. Wiele poleceń nie oczekuje parametrów.  
  
 `commandParameterObject`  
 Obiekt, który jest przetwarzany przez określone polecenie. Wszystkie istniejące [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] polecenia używają ciągów. W związku z tym Składnia tego elementu właściwości jest istotna tylko dla scenariuszy poleceń niestandardowych. Aby można było obsługiwać tę składnię, `commandParameterObject` obiekt musi również obsługiwać składnię elementu obiektu (musi mieć publiczny Konstruktor bez parametrów).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandParameterProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandParameterProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandParameterProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandParameterProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandParameterProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandParameterProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandParameterProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandParameterProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.Input.InputBinding.CommandParameter" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.Input.InputBinding.Command" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTarget">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement CommandTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement CommandTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandTarget" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandTarget As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ CommandTarget { System::Windows::IInputElement ^ get(); void set(System::Windows::IInputElement ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandTarget : System.Windows.IInputElement with get, set" Usage="System.Windows.Input.InputBinding.CommandTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia element docelowy polecenia.</summary>
        <value>Element docelowy polecenia. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W systemie <xref:System.Windows.Input.InputBinding.CommandTarget%2A> poleceń Windows Presentation Foundation Właściwość <xref:System.Windows.Input.ICommandSource> obiektu <xref:System.Windows.Input.ICommand> ma zastosowanie <xref:System.Windows.Input.RoutedCommand>tylko wtedy, gdy jest to. Jeśli jest ustawiona <xref:System.Windows.Input.ICommandSource> dla i <xref:System.Windows.Input.RoutedCommand>odpowiednie polecenie nie jest, obiekt docelowy polecenia jest ignorowany. <xref:System.Windows.Input.InputBinding.CommandTarget%2A>  
  
 Gdy jest używany z <xref:System.Windows.Input.RoutedCommand>, element docelowy polecenia jest obiektem, na <xref:System.Windows.Input.CommandManager.Executed> którym zdarzenia <xref:System.Windows.Input.CommandManager.CanExecute> i są wywoływane. <xref:System.Windows.Input.InputBinding.CommandTarget%2A> Jeśli właściwość nie jest ustawiona, element z fokusem klawiatury jest używany jako element docelowy.  
  
 Sama <xref:System.Windows.Input.InputBinding> Klasa nie obsługuje użycia XAML, ponieważ nie ujawnia publicznego konstruktora bez parametrów (istnieje Konstruktor bezparametrowy, ale jest chroniony). Jednak klasy pochodne mogą uwidaczniać Konstruktor publiczny i w związku z tym mogą ustawiać właściwości dziedziczone z <xref:System.Windows.Input.InputBinding> przy użyciu języka XAML. Dwie istniejące <xref:System.Windows.Input.InputBinding> klasy pochodne, które mogą być tworzone w języku XAML i mogą ustawiać właściwości w <xref:System.Windows.Input.KeyBinding> języku XAML <xref:System.Windows.Input.MouseBinding>i.  
  
<a name="xamlAttributeUsage_CommandTarget"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
  
```  
<inputBindingDerivedClass CommandTarget="bindingToTarget"/>  
```  
  
<a name="xamlValues_CommandTarget"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 `inputBindingDerivedClass`  
 Klasa <xref:System.Windows.Input.InputBinding> pochodna, która obsługuje składnię elementu obiektu, taką <xref:System.Windows.Input.KeyBinding> jak <xref:System.Windows.Input.MouseBinding>lub. Zobacz uwagi.  
  
 `bindingToTarget`  
 Ciąg, który używa typu składni wiązania, która może zwracać odwołanie do obiektu do istniejącego nazwanego elementu. Zobacz uwagi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandTargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandTargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandTargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandTargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandTargetProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandTargetProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandTargetProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.Input.InputBinding.CommandTarget" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="inputBinding.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy wystąpienie elementu <see cref="T:System.Windows.Input.InputBinding" />.</summary>
        <returns>Nowy obiekt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gesture">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Input.InputGesture Gesture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGesture Gesture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Gesture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Gesture As InputGesture" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Input::InputGesture ^ Gesture { System::Windows::Input::InputGesture ^ get(); void set(System::Windows::Input::InputGesture ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Gesture : System.Windows.Input.InputGesture with get, set" Usage="System.Windows.Input.InputBinding.Gesture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGesture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Windows.Input.InputGesture" /> skojarzenie skojarzone z tym powiązaniem wejściowym.</summary>
        <value>Skojarzony gest. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gest wejściowy jest akcją, która wywołuje polecenie. Przykłady gestów wejściowych w [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] programie <xref:System.Windows.Input.KeyGesture> to <xref:System.Windows.Input.MouseGesture>i. A jest kombinacją <xref:System.Windows.Input.Key> a i zestawu <xref:System.Windows.Input.ModifierKeys>. <xref:System.Windows.Input.KeyGesture> A jest kombinacją <xref:System.Windows.Input.MouseAction> a i zestawu <xref:System.Windows.Input.ModifierKeys>. <xref:System.Windows.Input.MouseGesture>  
  
 Sama <xref:System.Windows.Input.InputBinding> Klasa nie obsługuje użycia XAML, ponieważ nie ujawnia publicznego konstruktora bez parametrów (istnieje Konstruktor bezparametrowy, ale jest chroniony). Jednak klasy pochodne mogą uwidaczniać Konstruktor publiczny i w ten sposób mogą ustawiać właściwości dziedziczone z <xref:System.Windows.Input.InputBinding> przy użyciu języka XAML. Dwie istniejące <xref:System.Windows.Input.InputBinding> klasy pochodne, które mogą być tworzone w języku XAML i mogą ustawiać właściwości w <xref:System.Windows.Input.KeyBinding> języku XAML <xref:System.Windows.Input.MouseBinding>i.  
  
<a name="xamlAttributeUsage_gesture"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
 <<xref:System.Windows.Input.KeyBinding> `Gesture`="<xref:System.Windows.Input.KeyGesture>"/>  
  
—lub—
  
 <<xref:System.Windows.Input.MouseBinding> `Gesture`="<xref:System.Windows.Input.MouseGesture>"/>  
  
—lub—
  
 <`inputBindingDerivedClass` `Gesture`="<xref:System.Windows.Input.InputGesture>"/>  
  
<a name="xamlPropertyElementUsage_gesture"></a>   
## <a name="xaml-property-element-usage"></a>Użycie elementu właściwości języka XAML  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Gesture>  
    <inputGestureImplementation/>  
  </inputBindingDerivedClass.Gesture>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_gesture"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 `inputBindingDerivedClass`  
 Klasa <xref:System.Windows.Input.InputBinding> pochodna, która obsługuje składnię elementu obiektu, taką <xref:System.Windows.Input.KeyBinding> jak <xref:System.Windows.Input.MouseBinding>lub. Zobacz uwagi.  
  
 `inputGestureImplementation`  
 Niestandardowa Klasa <xref:System.Windows.Input.InputGesture> pochodna, która obsługuje składnię elementu obiektu.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak użyć elementu <xref:System.Windows.Input.KeyBinding> do powiązania a. <xref:System.Windows.Input.KeyGesture> <xref:System.Windows.Input.RoutedCommand> Po naciśnięciu <xref:System.Windows.Input.ApplicationCommands.Close%2A> klawisza Alt + L polecenie jest wywoływane. <xref:System.Windows.Input.KeyGesture>  
  
 [!code-xaml[commandlibrarysnippets#KeyBindingWithKeyAndModifiersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml#keybindingwithkeyandmodifiersxaml)]  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
    <Member MemberName="GetAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="override this.GetAsFrozenCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.GetAsFrozenCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">Obiekt, który ma zostać sklonowany.</param>
        <summary>Sprawia, że wystąpienie ma zablokowany klon określonego <see cref="T:System.Windows.Freezable" /> przy użyciu podstawowych (nieanimowanych) wartości właściwości.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentValueAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetCurrentValueAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetCurrentValueAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetCurrentValueAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetCurrentValueAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="override this.GetCurrentValueAsFrozenCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.GetCurrentValueAsFrozenCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">Obiekt, który ma zostać sklonowany.</param>
        <summary>Sprawia, że bieżące wystąpienie jest zablokowanym klonem <see cref="T:System.Windows.Freezable" />określonego. Jeśli obiekt ma animowane właściwości zależności, ich bieżące wartości animowane są kopiowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>