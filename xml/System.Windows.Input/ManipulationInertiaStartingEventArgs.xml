<Type Name="ManipulationInertiaStartingEventArgs" FullName="System.Windows.Input.ManipulationInertiaStartingEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="991cc50de49fab18287449055ccb3c34482597d9" /><Meta Name="ms.sourcegitcommit" Value="b0551d7828f015124aca601dbb64bd913cc5067d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="12/13/2018" /><Meta Name="ms.locfileid" Value="53334538" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManipulationInertiaStartingEventArgs : System.Windows.Input.InputEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManipulationInertiaStartingEventArgs extends System.Windows.Input.InputEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ManipulationInertiaStartingEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManipulationInertiaStartingEventArgs&#xA;Inherits InputEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManipulationInertiaStartingEventArgs sealed : System::Windows::Input::InputEventArgs" />
  <TypeSignature Language="F#" Value="type ManipulationInertiaStartingEventArgs = class&#xA;    inherit InputEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia dane dla <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> zdarzeń.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs> obiektu, aby określić zachowanie inercyjnych manipulacji. Można określić inercyjnych zachowanie dla każdego typu manipulowania oddzielnie za pomocą <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs.TranslationBehavior%2A>, <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs.ExpansionBehavior%2A>, i <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs.RotationBehavior%2A> właściwości. Każda właściwość jest typu obiektu, który reprezentuje inercyjnych zachowanie i w każdym przypadku, należy określić następujące informacje:  
  
-   Prędkości początkowej bezwładności po jej rozpoczęciu.  
  
-   Żądanej pozycji manipulowania po zakończeniu bezwładności.  
  
-   Żądany prędkości bezwładności.  
  
 Zwykle określasz żądanej pozycji manipulowania po zakończeniu bezwładności albo żądaną spowolnieniu bezwładności, ale nie oba.  
  
 Aby uzyskać więcej informacji na temat manipulacje zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono <xref:System.Windows.UIElement.ManipulationInertiaStarting> program obsługi zdarzeń i ustawia żądany prędkości dla translacji, rozszerzenia i obrót, który jest używany podczas bezwładności. W tym przykładzie jest częścią większego przykładu w [instruktażu: Tworzenie pierwszej aplikacji dotykowej](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationinertiastarting)]
 [!code-vb[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationinertiastarting)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public bool Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationInertiaStartingEventArgs.Cancel" />
      <MemberSignature Language="VB.NET" Value="Public Function Cancel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Cancel();" />
      <MemberSignature Language="F#" Value="member this.Cancel : unit -&gt; bool" Usage="manipulationInertiaStartingEventArgs.Cancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Anuluje operowanie atrybutami.</summary>
        <returns><see langword="true" /> Jeśli operowanie zostało pomyślnie anulowane; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli metoda się powiedzie, wartość domyślna <xref:System.Windows.Input.TouchDevice> wysyła poprzednie zdarzenia dotykowe jako myszy w dół myszą lub myszy zdarzenia do elementu i nie występują zdarzenia manipulowania w przyszłości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpansionBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InertiaExpansionBehavior ExpansionBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InertiaExpansionBehavior ExpansionBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.ExpansionBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property ExpansionBehavior As InertiaExpansionBehavior" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InertiaExpansionBehavior ^ ExpansionBehavior { System::Windows::Input::InertiaExpansionBehavior ^ get(); void set(System::Windows::Input::InertiaExpansionBehavior ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ExpansionBehavior : System.Windows.Input.InertiaExpansionBehavior with get, set" Usage="System.Windows.Input.ManipulationInertiaStartingEventArgs.ExpansionBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InertiaExpansionBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia współczynnik spowolnienia przenoszenia inercyjnych rozszerzenia.</summary>
        <value>Stopień spowolnienia rozszerzenia inercyjnych przepływu</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs.ExpansionBehavior%2A> właściwość, aby wykonać następujące czynności:  
  
-   Określ prędkości początkowej bezwładności, gdy rozpoczyna się przez ustawienie <xref:System.Windows.Input.InertiaExpansionBehavior.InitialVelocity%2A> właściwości.  
  
-   Określ żądane rozszerzenie operowanie po zakończeniu bezwładności, ustawiając <xref:System.Windows.Input.InertiaExpansionBehavior.DesiredExpansion%2A> właściwości.  
  
-   Określ żądaną prędkości bezwładności, ustawiając <xref:System.Windows.Input.InertiaExpansionBehavior.DesiredDeceleration%2A> właściwości.  
  
 Zwykle ustawiana albo <xref:System.Windows.Input.InertiaExpansionBehavior.DesiredExpansion%2A> lub <xref:System.Windows.Input.InertiaExpansionBehavior.DesiredDeceleration%2A>, ale nie oba jednocześnie.  
  
 Aby uzyskać więcej informacji na temat manipulacje zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md). Na przykład aplikację, która odpowiada na manipulacje zobacz [instruktażu: Tworzenie pierwszej aplikacji dotykowej](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitialVelocities">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ManipulationVelocities InitialVelocities { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ManipulationVelocities InitialVelocities" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.InitialVelocities" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InitialVelocities As ManipulationVelocities" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ManipulationVelocities ^ InitialVelocities { System::Windows::Input::ManipulationVelocities ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InitialVelocities : System.Windows.Input.ManipulationVelocities" Usage="System.Windows.Input.ManipulationInertiaStartingEventArgs.InitialVelocities" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ManipulationVelocities</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera stawki zmiany operowanie występujące przed uruchomieniem bezwładności.</summary>
        <value>Współczynnik zmian do manipulowania, występujących przed uruchomieniem bezwładności.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat manipulacje zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md). Na przykład aplikację, która odpowiada na manipulacje zobacz [instruktażu: Tworzenie pierwszej aplikacji dotykowej](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object genericTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationInertiaStartingEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, genericTarget As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ genericTarget);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="manipulationInertiaStartingEventArgs.InvokeEventHandler (genericHandler, genericTarget)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="genericTarget" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="genericTarget">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationContainer">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement ManipulationContainer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement ManipulationContainer" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.ManipulationContainer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ManipulationContainer As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ ManipulationContainer { System::Windows::IInputElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ManipulationContainer : System.Windows.IInputElement" Usage="System.Windows.Input.ManipulationInertiaStartingEventArgs.ManipulationContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kontener <see cref="P:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin" /> właściwość będzie względne.</summary>
        <value>Kontener, <see cref="P:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin" /> właściwość będzie względne.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat manipulacje zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md). Na przykład aplikację, która odpowiada na manipulacje zobacz [instruktażu: Tworzenie pierwszej aplikacji dotykowej](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationOrigin">
      <MemberSignature Language="C#" Value="public System.Windows.Point ManipulationOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point ManipulationOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.ManipulationOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property ManipulationOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point ManipulationOrigin { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberSignature Language="F#" Value="member this.ManipulationOrigin : System.Windows.Point with get, set" Usage="System.Windows.Input.ManipulationInertiaStartingEventArgs.ManipulationOrigin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia punkt, z którego pochodzi operowanie atrybutami.</summary>
        <value>Punkt, z którego pochodzi operowanie atrybutami.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli więcej niż jeden punkt kontaktu inicjowane manipulowanie, <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs.ManipulationOrigin%2A> właściwość jest punkt między wszystkie punkty kontaktu.  
  
 Aby uzyskać więcej informacji na temat manipulacje zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md). Na przykład aplikację, która odpowiada na manipulacje zobacz [instruktażu: Tworzenie pierwszej aplikacji dotykowej](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Manipulators">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.IManipulator&gt; Manipulators { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.IManipulator&gt; Manipulators" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.Manipulators" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Manipulators As IEnumerable(Of IManipulator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::IManipulator ^&gt; ^ Manipulators { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::IManipulator ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Manipulators : seq&lt;System.Windows.Input.IManipulator&gt;" Usage="System.Windows.Input.ManipulationInertiaStartingEventArgs.Manipulators" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.IManipulator&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję obiektów reprezentującą kontakty touch do manipulacji.</summary>
        <value>Kolekcja obiektów reprezentuje kontakty touch do manipulacji.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RotationBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InertiaRotationBehavior RotationBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InertiaRotationBehavior RotationBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.RotationBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property RotationBehavior As InertiaRotationBehavior" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InertiaRotationBehavior ^ RotationBehavior { System::Windows::Input::InertiaRotationBehavior ^ get(); void set(System::Windows::Input::InertiaRotationBehavior ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RotationBehavior : System.Windows.Input.InertiaRotationBehavior with get, set" Usage="System.Windows.Input.ManipulationInertiaStartingEventArgs.RotationBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InertiaRotationBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia szybkość spowolnienia obrotowych inercyjnych przepływu.</summary>
        <value>Częstotliwość spowolnienia obrotowych inercyjnych przepływu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs.RotationBehavior%2A> właściwość, aby wykonać następujące czynności:  
  
-   Określ prędkości początkowej bezwładności, gdy rozpoczyna się przez ustawienie <xref:System.Windows.Input.InertiaRotationBehavior.InitialVelocity%2A> właściwości.  
  
-   Określ żądany obrót operowanie po zakończeniu bezwładności, ustawiając <xref:System.Windows.Input.InertiaRotationBehavior.DesiredRotation%2A> właściwości.  
  
-   Określ żądaną prędkości bezwładności, ustawiając <xref:System.Windows.Input.InertiaRotationBehavior.DesiredDeceleration%2A> właściwości.  
  
 Zwykle ustawiana albo <xref:System.Windows.Input.InertiaRotationBehavior.DesiredRotation%2A> lub <xref:System.Windows.Input.InertiaRotationBehavior.DesiredDeceleration%2A>, ale nie oba jednocześnie.  
  
 Aby uzyskać więcej informacji na temat manipulacje zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md). Na przykład aplikację, która odpowiada na manipulacje zobacz [instruktażu: Tworzenie pierwszej aplikacji dotykowej](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetInertiaParameter">
      <MemberSignature Language="C#" Value="public void SetInertiaParameter (System.Windows.Input.Manipulations.InertiaParameters2D parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInertiaParameter(class System.Windows.Input.Manipulations.InertiaParameters2D parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationInertiaStartingEventArgs.SetInertiaParameter(System.Windows.Input.Manipulations.InertiaParameters2D)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInertiaParameter (parameter As InertiaParameters2D)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInertiaParameter(System::Windows::Input::Manipulations::InertiaParameters2D ^ parameter);" />
      <MemberSignature Language="F#" Value="member this.SetInertiaParameter : System.Windows.Input.Manipulations.InertiaParameters2D -&gt; unit" Usage="manipulationInertiaStartingEventArgs.SetInertiaParameter parameter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Windows.Input.Manipulations.InertiaParameters2D" />
      </Parameters>
      <Docs>
        <param name="parameter">Obiekt, który określa zachowanie manipulacji podczas bezwładności.</param>
        <summary>Określa zachowanie manipulacji podczas bezwładności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj nie trzeba wywołać tę metodę. Użyj właściwości na <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs> zamiast tego.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="parameter" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TranslationBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InertiaTranslationBehavior TranslationBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InertiaTranslationBehavior TranslationBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.TranslationBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property TranslationBehavior As InertiaTranslationBehavior" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InertiaTranslationBehavior ^ TranslationBehavior { System::Windows::Input::InertiaTranslationBehavior ^ get(); void set(System::Windows::Input::InertiaTranslationBehavior ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TranslationBehavior : System.Windows.Input.InertiaTranslationBehavior with get, set" Usage="System.Windows.Input.ManipulationInertiaStartingEventArgs.TranslationBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InertiaTranslationBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia szybkość spowolnienia liniowej inercyjnych przepływu.</summary>
        <value>Częstotliwość spowolnienia liniowej inercyjnych przepływu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs.TranslationBehavior%2A> właściwość, aby wykonać następujące czynności:  
  
-   Określ prędkości początkowej bezwładności, gdy rozpoczyna się przez ustawienie <xref:System.Windows.Input.InertiaTranslationBehavior.InitialVelocity%2A> właściwości.  
  
-   Określ żądanej pozycji operowanie po zakończeniu bezwładności, ustawiając <xref:System.Windows.Input.InertiaTranslationBehavior.DesiredDisplacement%2A> właściwości.  
  
-   Określ żądaną prędkości bezwładności, ustawiając <xref:System.Windows.Input.InertiaTranslationBehavior.DesiredDeceleration%2A> właściwości.  
  
 Zwykle ustawiana albo <xref:System.Windows.Input.InertiaTranslationBehavior.DesiredDisplacement%2A> lub <xref:System.Windows.Input.InertiaTranslationBehavior.DesiredDeceleration%2A>, ale nie oba jednocześnie.  
  
 Aby uzyskać więcej informacji na temat manipulacje zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md). Na przykład aplikację, która odpowiada na manipulacje zobacz [instruktażu: Tworzenie pierwszej aplikacji dotykowej](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>