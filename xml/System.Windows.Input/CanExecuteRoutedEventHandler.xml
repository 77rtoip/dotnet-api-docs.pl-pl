<Type Name="CanExecuteRoutedEventHandler" FullName="System.Windows.Input.CanExecuteRoutedEventHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="40314ee81839ebd0b1ef25f5f831b2e68f2b0ad5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30705536" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void CanExecuteRoutedEventHandler(object sender, CanExecuteRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CanExecuteRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub CanExecuteRoutedEventHandler(sender As Object, e As CanExecuteRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void CanExecuteRoutedEventHandler(System::Object ^ sender, CanExecuteRoutedEventArgs ^ e);" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.CanExecuteRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">Element docelowy polecenia, który wywołuje program obsługi.</param>
    <param name="e">Dane dotyczące zdarzenia.</param>
    <summary>Reprezentuje metodę, która będzie obsługiwać <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> zdarzeń.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.CanExecuteRoutedEventHandler> Określa, czy polecenie skojarzone z źródłem zdarzenia jest można wykonać na elemencie docelowym polecenia. Jeśli polecenie ma źródło polecenia określająca element docelowy, a następnie informacje można uzyskać za pośrednictwem `sender`. Jeśli <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> nie jest ustawiona, element z fokusem klawiatury jest element docelowy i również można uzyskać za pośrednictwem `sender`.  Jeśli okaże się, że polecenie można wykonać na elemencie docelowym, a następnie <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=nameWithType> powinien mieć ustawioną właściwość `true`; w przeciwnym razie ustaw ją na `false`.  
  
 Nie należy polegać na dane zdarzeń, aby określić polecenie, źródłowych i docelowych. Można ograniczyć użycie obsługi wywołań znane polecenia możliwe, chociaż jest trudne do wykonania, jeśli często strukturę polecenia zależy routing poleceń do wykonania tego samego polecenia na kolejnych potencjalnymi celami w zdarzeniu trasa.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono <xref:System.Windows.Input.CanExecuteRoutedEventHandler> stanowiąca <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> do `true`.  
  
 [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  </Docs>
</Type>