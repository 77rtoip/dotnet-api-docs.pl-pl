<Type Name="CanExecuteRoutedEventHandler" FullName="System.Windows.Input.CanExecuteRoutedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d59f4554561d75bef1c57729e43a1f1ef365511f" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69173325" /></Metadata><TypeSignature Language="C#" Value="public delegate void CanExecuteRoutedEventHandler(object sender, CanExecuteRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CanExecuteRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub CanExecuteRoutedEventHandler(sender As Object, e As CanExecuteRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void CanExecuteRoutedEventHandler(System::Object ^ sender, CanExecuteRoutedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type CanExecuteRoutedEventHandler = delegate of obj * CanExecuteRoutedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.CanExecuteRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">Obiekt docelowy polecenia, który wywołuje procedurę obsługi.</param>
    <param name="e">Dane dotyczące zdarzenia.</param>
    <summary>Reprezentuje metodę, która będzie obsługiwać <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> zdarzenie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Określa <xref:System.Windows.Input.CanExecuteRoutedEventHandler> , czy polecenie skojarzone ze źródłem zdarzenia można wykonać na obiekcie docelowym polecenia. Jeśli polecenie ma źródło polecenia, które określa element docelowy, informacje o miejscu docelowym można uzyskać za pomocą `sender`. Jeśli nie `sender`jest ustawiona, element z fokusem klawiatury jest obiektem docelowym i można go również uzyskać za pomocą. <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>  Jeśli określono, że polecenie można wykonać na obiekcie docelowym, wówczas <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=nameWithType> właściwość powinna być ustawiona na `true`; w przeciwnym razie ustaw ją na `false`.  
  
 Nie musisz polegać na danych zdarzenia, aby określić polecenie, źródło i cel. Można ograniczyć użycie programu obsługi do znanych potencjalnych wywołań poleceń, chociaż jest to trudniejsze do osiągnięcia, jeśli struktura poleceń jest oparta na rozbudowaniu poleceń, aby wykonać to samo polecenie dla kolejnych potencjalnych elementów docelowych w zdarzeniu Szlak.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, że <xref:System.Windows.Input.CanExecuteRoutedEventHandler> jest ustawiony <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> na `true`.  
  
 [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  </Docs>
</Type>
