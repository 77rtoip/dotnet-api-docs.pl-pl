<Type Name="StylusPoint" FullName="System.Windows.Input.StylusPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ae2862ecd8538c717037dbc82e79917ae68a5dbe" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30709628" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct StylusPoint : IEquatable&lt;System.Windows.Input.StylusPoint&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit StylusPoint extends System.ValueType implements class System.IEquatable`1&lt;valuetype System.Windows.Input.StylusPoint&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.StylusPoint" />
  <TypeSignature Language="VB.NET" Value="Public Structure StylusPoint&#xA;Implements IEquatable(Of StylusPoint)" />
  <TypeSignature Language="C++ CLI" Value="public value class StylusPoint : IEquatable&lt;System::Windows::Input::StylusPoint&gt;" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Windows.Input.StylusPoint&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Reprezentuje pojedynczy punkt danych zbieranych z dyskretyzatora i pióra.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Input.StylusPoint> zbiera dane, gdy użytkownik wejść odręcznego przy użyciu dyskretyzatora. Ponieważ informacje, które raporty dyskretyzatora różni się w zależności od producenta właściwości w ramach <xref:System.Windows.Input.StylusPoint> może się różnić. Aby określić, czy właściwość jest <xref:System.Windows.Input.StylusPoint>, wywołaj <xref:System.Windows.Input.StylusPoint.HasProperty%2A> metody. <xref:System.Windows.Input.StylusPoint.Description%2A> Właściwość zawiera <xref:System.Windows.Input.StylusPointDescription> , który określa właściwości, które znajdują się w <xref:System.Windows.Input.StylusPoint>. Wszystkie <xref:System.Windows.Input.StylusPoint> obiekty zawierają właściwości, które określają (x, y) współrzędnych, a także wykorzystanie.  
  
   
  
## Examples  
 Poniższy przykład pobiera nazwy i wartości właściwości dla każdego <xref:System.Windows.Input.StylusPoint> w <xref:System.Windows.Input.StylusPointCollection>. W tym przykładzie założono, że istnieje <xref:System.Windows.Controls.TextBlock> o nazwie `packetOutput`.  
  
 [!code-csharp[PacketSpy#3](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#3)]
 [!code-vb[PacketSpy#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#3)]  
[!code-csharp[PacketSpy#4](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#4)]
[!code-vb[PacketSpy#4](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#4)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Input.StylusPoint" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StylusPoint (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.#ctor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (x As Double, y As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StylusPoint(double x, double y);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x">Współrzędna x <see cref="T:System.Windows.Input.StylusPoint" />.</param>
        <param name="y">Współrzędna y <see cref="T:System.Windows.Input.StylusPoint" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Input.StylusPoint" /> przy użyciu współrzędnych określony (x, y).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie pokazano, jak utworzyć <xref:System.Windows.Input.StylusPoint>.  
  
 [!code-csharp[PacketSpy#5](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#5)]
 [!code-vb[PacketSpy#5](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StylusPoint (double x, double y, float pressureFactor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 x, float64 y, float32 pressureFactor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.#ctor(System.Double,System.Double,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (x As Double, y As Double, pressureFactor As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StylusPoint(double x, double y, float pressureFactor);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
        <Parameter Name="pressureFactor" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Współrzędna x <see cref="T:System.Windows.Input.StylusPoint" />.</param>
        <param name="y">Współrzędna y <see cref="T:System.Windows.Input.StylusPoint" />.</param>
        <param name="pressureFactor">Ilość nacisku do <see cref="T:System.Windows.Input.StylusPoint" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Input.StylusPoint" /> przy użyciu określonych (x, y) współrzędnych i wykorzystania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `pressureFactor` musi mieć wartość z zakresu od 0 do 1 włącznie. Wartość 0 wskazuje, że żadne wykorzystania nie zostanie zastosowana, podczas wartość 1 oznacza, że zastosowano maksymalnego wykorzystania. Wartość 0,5 wskazuje, że 50% maksymalnego wykorzystania są stosowane i tak dalej.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak utworzyć <xref:System.Windows.Input.StylusPoint>.  
  
 [!code-csharp[PacketSpy#5](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#5)]
 [!code-vb[PacketSpy#5](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="pressureFactor" /> jest mniejsza niż 0 lub większą niż 1.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StylusPoint (double x, double y, float pressureFactor, System.Windows.Input.StylusPointDescription stylusPointDescription, int[] additionalValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 x, float64 y, float32 pressureFactor, class System.Windows.Input.StylusPointDescription stylusPointDescription, int32[] additionalValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.#ctor(System.Double,System.Double,System.Single,System.Windows.Input.StylusPointDescription,System.Int32[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StylusPoint(double x, double y, float pressureFactor, System::Windows::Input::StylusPointDescription ^ stylusPointDescription, cli::array &lt;int&gt; ^ additionalValues);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
        <Parameter Name="pressureFactor" Type="System.Single" />
        <Parameter Name="stylusPointDescription" Type="System.Windows.Input.StylusPointDescription" />
        <Parameter Name="additionalValues" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="x">Współrzędna x <see cref="T:System.Windows.Input.StylusPoint" />.</param>
        <param name="y">Współrzędna y <see cref="T:System.Windows.Input.StylusPoint" />.</param>
        <param name="pressureFactor">Ilość nacisku do <see cref="T:System.Windows.Input.StylusPoint" />.</param>
        <param name="stylusPointDescription">A <see cref="T:System.Windows.Input.StylusPointDescription" /> , który określa dodatkowe właściwości, które są przechowywane w <see cref="T:System.Windows.Input.StylusPoint" />.</param>
        <param name="additionalValues">Tablicę 32-bitowych liczb całkowitych ze znakiem, która zawiera wartości właściwości zdefiniowane w <c>element stylusPointDescription</c>.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Input.StylusPoint" /> przy użyciu określonych (x, y) współrzędnych <paramref name="pressureFactor" />oraz dodatkowe parametry, określona w <see cref="T:System.Windows.Input.StylusPointDescription" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie pokazano, jak utworzyć <xref:System.Windows.Input.StylusPoint>.  
  
 [!code-csharp[PacketSpy#5](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#5)]
 [!code-vb[PacketSpy#5](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="pressureFactor" /> jest mniejsza niż 0 lub większą niż 1.  
  
 —lub—  
  
 Wartości w <paramref name="additionalValues" /> odpowiadające przycisk Właściwości nie są 0 lub 1.</exception>
        <exception cref="T:System.ArgumentException">Liczba wartości w <paramref name="additionalValues" /> jest niezgodny z liczby właściwości w <paramref name="stylusPointDescription" /> 3.</exception>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public System.Windows.Input.StylusPointDescription Description { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.StylusPointDescription Description" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.StylusPoint.Description" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Description As StylusPointDescription" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::StylusPointDescription ^ Description { System::Windows::Input::StylusPointDescription ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusPointDescription</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Windows.Input.StylusPointDescription" /> , który określa właściwości przechowywanych w <see cref="T:System.Windows.Input.StylusPoint" />.</summary>
        <value>
          <see cref="T:System.Windows.Input.StylusPointDescription" /> Określa właściwości przechowywanych w <see cref="T:System.Windows.Input.StylusPoint" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Windows.Input.StylusPoint.Description%2A> wartości właściwości do pobrania właściwości z <xref:System.Windows.Input.StylusPoint> w <xref:System.Windows.Input.StylusPointCollection>. W tym przykładzie założono, że istnieje <xref:System.Windows.Controls.TextBlock> o nazwie `packetOutput`.  
  
 [!code-csharp[PacketSpy#3](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#3)]
 [!code-vb[PacketSpy#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#3)]  
[!code-csharp[PacketSpy#4](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#4)]
[!code-vb[PacketSpy#4](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Porównuje dwa <see cref="T:System.Windows.Input.StylusPoint" /> obiekty pod kątem równości.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <see cref="T:System.Windows.Input.StylusPoint" /> Do porównania z bieżącą <see cref="T:System.Windows.Input.StylusPoint" />.</param>
        <summary>Zwraca wartość wskazującą, czy określony obiekt jest taki sam <see cref="T:System.Windows.Input.StylusPoint" />.</summary>
        <returns>
          <see langword="true" /> Jeśli obiekty są równe; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład sprawdza dwa <xref:System.Windows.Input.StylusPoint> obiekty pod kątem równości. Ponieważ <xref:System.Windows.Input.StylusPoint.X%2A>, <xref:System.Windows.Input.StylusPoint.Y%2A>, i <xref:System.Windows.Input.StylusPoint.PressureFactor%2A> właściwości `point1` i `point2` są ustawione na wartość "StylusPoint dwa obiekty są równe." Zostanie wyświetlony komunikat.  
  
 [!code-csharp[PacketSpy#6](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#6)]
 [!code-vb[PacketSpy#6](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#6)]  
[!code-csharp[PacketSpy#7](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#7)]
[!code-vb[PacketSpy#7](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Windows.Input.StylusPoint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Windows.Input.StylusPoint value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.Equals(System.Windows.Input.StylusPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As StylusPoint) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Windows::Input::StylusPoint value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Input.StylusPoint" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Windows.Input.StylusPoint" /> Do porównania z bieżącą <see cref="T:System.Windows.Input.StylusPoint" />.</param>
        <summary>Zwraca wartość logiczną wskazującą, czy określony <see cref="T:System.Windows.Input.StylusPoint" /> jest taki sam, jak bieżący <see cref="T:System.Windows.Input.StylusPoint" />.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="T:System.Windows.Input.StylusPoint" /> obiekty są równe; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład sprawdza dwa <xref:System.Windows.Input.StylusPoint> obiekty pod kątem równości. Ponieważ <xref:System.Windows.Input.StylusPoint.X%2A>, <xref:System.Windows.Input.StylusPoint.Y%2A>, i <xref:System.Windows.Input.StylusPoint.PressureFactor%2A> właściwości `point1` i `point2` są ustawione na wartość "StylusPoint dwa obiekty są równe." Zostanie wyświetlony komunikat.  
  
 [!code-csharp[PacketSpy#6](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#6)]
 [!code-vb[PacketSpy#6](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#6)]  
[!code-csharp[PacketSpy#7](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#7)]
[!code-vb[PacketSpy#7](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (System.Windows.Input.StylusPoint stylusPoint1, System.Windows.Input.StylusPoint stylusPoint2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.Windows.Input.StylusPoint stylusPoint1, valuetype System.Windows.Input.StylusPoint stylusPoint2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.Equals(System.Windows.Input.StylusPoint,System.Windows.Input.StylusPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (stylusPoint1 As StylusPoint, stylusPoint2 As StylusPoint) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::Windows::Input::StylusPoint stylusPoint1, System::Windows::Input::StylusPoint stylusPoint2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylusPoint1" Type="System.Windows.Input.StylusPoint" />
        <Parameter Name="stylusPoint2" Type="System.Windows.Input.StylusPoint" />
      </Parameters>
      <Docs>
        <param name="stylusPoint1">Pierwszy <see cref="T:System.Windows.Input.StylusPoint" /> do porównania.</param>
        <param name="stylusPoint2">Drugi <see cref="T:System.Windows.Input.StylusPoint" /> do porównania.</param>
        <summary>Zwraca wartość logiczną wskazującą, czy dwa określone <see cref="T:System.Windows.Input.StylusPoint" /> obiekty są takie same.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="T:System.Windows.Input.StylusPoint" /> obiekty są równe; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład sprawdza dwa <xref:System.Windows.Input.StylusPoint> obiekty pod kątem równości. Ponieważ <xref:System.Windows.Input.StylusPoint.X%2A>, <xref:System.Windows.Input.StylusPoint.Y%2A>, i <xref:System.Windows.Input.StylusPoint.PressureFactor%2A> właściwości `point1` i `point2` są ustawione na wartość "StylusPoint dwa obiekty są równe." Zostanie wyświetlony komunikat.  
  
 [!code-csharp[PacketSpy#6](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#6)]
 [!code-vb[PacketSpy#6](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#6)]  
[!code-csharp[PacketSpy#8](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#8)]
[!code-vb[PacketSpy#8](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca kod skrótu dla tego wystąpienia.</summary>
        <returns>32-bitowe liczby całkowite ze znakiem jest wartość skrótu dla tego wystąpienia.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.ValueType.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetPropertyValue">
      <MemberSignature Language="C#" Value="public int GetPropertyValue (System.Windows.Input.StylusPointProperty stylusPointProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetPropertyValue(class System.Windows.Input.StylusPointProperty stylusPointProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.GetPropertyValue(System.Windows.Input.StylusPointProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetPropertyValue(System::Windows::Input::StylusPointProperty ^ stylusPointProperty);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylusPointProperty" Type="System.Windows.Input.StylusPointProperty" />
      </Parameters>
      <Docs>
        <param name="stylusPointProperty">
          <see cref="T:System.Windows.Input.StylusPointProperty" /> Określa, w którym wartość właściwości do pobrania.</param>
        <summary>Zwraca wartość określonej właściwości.</summary>
        <returns>Wartość określonego <see cref="T:System.Windows.Input.StylusPointProperty" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby sprawdzić, czy <xref:System.Windows.Input.StylusPoint> zawiera określonej właściwości wywołania <xref:System.Windows.Input.StylusPoint.HasProperty%2A> przed wywołaniem albo <xref:System.Windows.Input.StylusPoint.GetPropertyValue%2A> — metoda lub <xref:System.Windows.Input.StylusPoint.SetPropertyValue%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład sprawdza istnienie właściwości punktu pióro przed pobraniem wartości właściwości. W tym przykładzie założono, że istnieje <xref:System.Windows.Input.StylusPoint> o nazwie `point`.  
  
 [!code-csharp[PacketSpy#11](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#11)]
 [!code-vb[PacketSpy#11](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="stylusPointProperty" /> nie jest jedną z właściwości w <see cref="P:System.Windows.Input.StylusPoint.Description" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasProperty">
      <MemberSignature Language="C#" Value="public bool HasProperty (System.Windows.Input.StylusPointProperty stylusPointProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasProperty(class System.Windows.Input.StylusPointProperty stylusPointProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.HasProperty(System.Windows.Input.StylusPointProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasProperty(System::Windows::Input::StylusPointProperty ^ stylusPointProperty);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylusPointProperty" Type="System.Windows.Input.StylusPointProperty" />
      </Parameters>
      <Docs>
        <param name="stylusPointProperty">
          <see cref="T:System.Windows.Input.StylusPointProperty" /> Ma sprawdzać <see cref="T:System.Windows.Input.StylusPoint" />.</param>
        <summary>Zwraca czy bieżące <see cref="T:System.Windows.Input.StylusPoint" /> zawiera określonej właściwości.</summary>
        <returns>
          <see langword="true" /> Jeśli określony <see cref="T:System.Windows.Input.StylusPointProperty" /> znajduje się w bieżącej <see cref="T:System.Windows.Input.StylusPoint" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby sprawdzić, czy <xref:System.Windows.Input.StylusPoint> zawiera określonej właściwości wywołania <xref:System.Windows.Input.StylusPoint.HasProperty%2A> przed wywołaniem albo <xref:System.Windows.Input.StylusPoint.GetPropertyValue%2A> — metoda lub <xref:System.Windows.Input.StylusPoint.SetPropertyValue%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład sprawdza istnienie właściwości punktu pióro przed pobraniem wartości właściwości. W tym przykładzie założono, że istnieje <xref:System.Windows.Input.StylusPoint> o nazwie `point`.  
  
 [!code-csharp[PacketSpy#11](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#11)]
 [!code-vb[PacketSpy#11](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxXY">
      <MemberSignature Language="C#" Value="public static readonly double MaxXY;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MaxXY" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.StylusPoint.MaxXY" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxXY As Double " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly double MaxXY;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa największy prawidłową wartość dla pary (x, y) współrzędnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład upewnia się, że <xref:System.Windows.Input.StylusPoint.X%2A> właściwość <xref:System.Windows.Input.StylusPoint> ma ustawioną wartość prawnych.  
  
 [!code-csharp[PacketSpy#14](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#14)]
 [!code-vb[PacketSpy#14](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinXY">
      <MemberSignature Language="C#" Value="public static readonly double MinXY;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MinXY" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.StylusPoint.MinXY" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinXY As Double " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly double MinXY;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa najmniejszy prawidłową wartość dla pary (x, y) współrzędnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład upewnia się, że <xref:System.Windows.Input.StylusPoint.X%2A> właściwość <xref:System.Windows.Input.StylusPoint> ma ustawioną wartość prawnych.  
  
 [!code-csharp[PacketSpy#14](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#14)]
 [!code-vb[PacketSpy#14](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Input.StylusPoint stylusPoint1, System.Windows.Input.StylusPoint stylusPoint2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.Input.StylusPoint stylusPoint1, valuetype System.Windows.Input.StylusPoint stylusPoint2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.op_Equality(System.Windows.Input.StylusPoint,System.Windows.Input.StylusPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (stylusPoint1 As StylusPoint, stylusPoint2 As StylusPoint) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Input::StylusPoint stylusPoint1, System::Windows::Input::StylusPoint stylusPoint2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylusPoint1" Type="System.Windows.Input.StylusPoint" />
        <Parameter Name="stylusPoint2" Type="System.Windows.Input.StylusPoint" />
      </Parameters>
      <Docs>
        <param name="stylusPoint1">Pierwszy <see cref="T:System.Windows.Input.StylusPoint" /> do porównania.</param>
        <param name="stylusPoint2">Drugi <see cref="T:System.Windows.Input.StylusPoint" /> do porównania.</param>
        <summary>Porównuje dwa określone <see cref="T:System.Windows.Input.StylusPoint" /> obiekty i określa, czy są one takie same.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="T:System.Windows.Input.StylusPoint" /> obiekty są równe; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Jest równoważne metodę dla tego operatora <xref:System.Windows.Input.StylusPoint.Equals%28System.Windows.Input.StylusPoint%2CSystem.Windows.Input.StylusPoint%29?displayProperty=nameWithType>  
  
## Examples  
 Poniższy przykład sprawdza dwa <xref:System.Windows.Input.StylusPoint> obiekty pod kątem równości. Ponieważ <xref:System.Windows.Input.StylusPoint.X%2A>, <xref:System.Windows.Input.StylusPoint.Y%2A>, i <xref:System.Windows.Input.StylusPoint.PressureFactor%2A> właściwości `point1` i `point2` są ustawione na wartość "StylusPoint dwa obiekty są równe." Zostanie wyświetlony komunikat.  
  
 [!code-csharp[PacketSpy#6](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#6)]
 [!code-vb[PacketSpy#6](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#6)]  
[!code-csharp[PacketSpy#9](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#9)]
[!code-vb[PacketSpy#9](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Windows.Point (System.Windows.Input.StylusPoint stylusPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Point op_Explicit(valuetype System.Windows.Input.StylusPoint stylusPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.op_Explicit(System.Windows.Input.StylusPoint)~System.Windows.Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Windows::Point(System::Windows::Input::StylusPoint stylusPoint);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylusPoint" Type="System.Windows.Input.StylusPoint" />
      </Parameters>
      <Docs>
        <param name="stylusPoint">
          <see cref="T:System.Windows.Input.StylusPoint" /> Można rzutować na <see cref="T:System.Windows.Point" />.</param>
        <summary>Rzutuje określonego <see cref="T:System.Windows.Input.StylusPoint" /> do <see cref="T:System.Windows.Point" />.</summary>
        <returns>A <see cref="T:System.Windows.Point" /> zawiera te same (x, y) współrzędne jako <paramref name="stylusPoint" />. </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[W poniższym przykładzie pokazano, jak można rzutować <xref:System.Windows.Input.StylusPoint> do <xref:System.Windows.Point> obiekt, aby narysować okrąg na początku każdej linii. W tym przykładzie założono, że istnieje <xref:System.Windows.Controls.InkCanvas> obiektu o nazwie `inkcanvas1` oraz że <xref:System.Windows.UIElement.StylusDown> zdarzeń jest podłączony do obsługi zdarzeń w przykładzie.

           [!code-csharp[PacketSpy#13](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#13)]
           [!code-vb[PacketSpy#13](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#13)]  

           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Input.StylusPoint stylusPoint1, System.Windows.Input.StylusPoint stylusPoint2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.Input.StylusPoint stylusPoint1, valuetype System.Windows.Input.StylusPoint stylusPoint2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.op_Inequality(System.Windows.Input.StylusPoint,System.Windows.Input.StylusPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (stylusPoint1 As StylusPoint, stylusPoint2 As StylusPoint) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Input::StylusPoint stylusPoint1, System::Windows::Input::StylusPoint stylusPoint2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylusPoint1" Type="System.Windows.Input.StylusPoint" />
        <Parameter Name="stylusPoint2" Type="System.Windows.Input.StylusPoint" />
      </Parameters>
      <Docs>
        <param name="stylusPoint1">Pierwszy <see cref="T:System.Windows.Input.StylusPoint" /> do porównania.</param>
        <param name="stylusPoint2">Drugi <see cref="T:System.Windows.Input.StylusPoint" /> do porównania.</param>
        <summary>Zwraca wartość logiczną wskazującą, czy określony <see cref="T:System.Windows.Input.StylusPoint" /> obiekty są równe.</summary>
        <returns>
          <see langword="true" /> Jeśli określony <see cref="T:System.Windows.Input.StylusPoint" /> obiekty są nierówne; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Negacja jest równoważne metodę dla tego operatora <xref:System.Windows.Input.StylusPoint.Equals%2A>  
  
## Examples  
 W poniższym przykładzie pokazano sposób sprawdzania dwa <xref:System.Windows.Input.StylusPoint> obiekty pod kątem nierówności. Ponieważ <xref:System.Windows.Input.StylusPoint.X%2A>, <xref:System.Windows.Input.StylusPoint.Y%2A>, i <xref:System.Windows.Input.StylusPoint.PressureFactor%2A> właściwości `point1` i `point2` są ustawione na wartość "StylusPoint dwa obiekty są równe." Zostanie wyświetlony komunikat.  
  
 [!code-csharp[PacketSpy#6](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#6)]
 [!code-vb[PacketSpy#6](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#6)]  
[!code-csharp[PacketSpy#10](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#10)]
[!code-vb[PacketSpy#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PressureFactor">
      <MemberSignature Language="C#" Value="public float PressureFactor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 PressureFactor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.StylusPoint.PressureFactor" />
      <MemberSignature Language="VB.NET" Value="Public Property PressureFactor As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float PressureFactor { float get(); void set(float value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość z zakresu od 0 do 1, który wskazuje ilość wykorzystania pióro dotyczy dyskretyzatora powierzchni, kiedy <see cref="T:System.Windows.Input.StylusPoint" /> jest tworzony.</summary>
        <value>Wartość z zakresu od 0 do 1 wskazująca wykorzystania pióro dotyczy powierzchni dyskretyzatora jako <see cref="T:System.Windows.Input.StylusPoint" /> jest tworzony.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Windows.Input.StylusPoint.PressureFactor%2A> właściwości jest wyrażony jako wartość z zakresu od 0 do 1. Wartość 0 wskazuje, że żadne wykorzystania nie zostanie zastosowana, podczas wartość 1 oznacza, że zastosowano maksymalnego wykorzystania. Wartość 0,5 wskazuje, że 50% maksymalnego wykorzystania są stosowane i tak dalej.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Windows.Input.StylusPoint.PressureFactor%2A> właściwości pobierania i wyświetlania wartość wykorzystania dla każdego <xref:System.Windows.Input.StylusPoint> w <xref:System.Windows.Input.StylusPointCollection> o nazwie `points`. W tym przykładzie założono, że istnieje <xref:System.Windows.Controls.TextBlock> o nazwie `packetOutput`.  
  
 [!code-csharp[PacketSpy#3](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#3)]
 [!code-vb[PacketSpy#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#3)]  
[!code-csharp[PacketSpy#4](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#4)]
[!code-vb[PacketSpy#4](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Windows.Input.StylusPoint.PressureFactor" /> Właściwości ustawiono wartość mniejsza niż 0 lub większą niż 1.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetPropertyValue">
      <MemberSignature Language="C#" Value="public void SetPropertyValue (System.Windows.Input.StylusPointProperty stylusPointProperty, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPropertyValue(class System.Windows.Input.StylusPointProperty stylusPointProperty, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.SetPropertyValue(System.Windows.Input.StylusPointProperty,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetPropertyValue(System::Windows::Input::StylusPointProperty ^ stylusPointProperty, int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylusPointProperty" Type="System.Windows.Input.StylusPointProperty" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="stylusPointProperty">
          <see cref="T:System.Windows.Input.StylusPointProperty" /> Określa, w którym wartość właściwości można ustawić.</param>
        <param name="value">Wartość właściwości.</param>
        <summary>Ustawia określoną właściwość z podaną wartością.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby sprawdzić, czy <xref:System.Windows.Input.StylusPoint> zawiera określonej właściwości wywołania <xref:System.Windows.Input.StylusPoint.HasProperty%2A> przed wywołaniem albo <xref:System.Windows.Input.StylusPoint.GetPropertyValue%2A> — metoda lub <xref:System.Windows.Input.StylusPoint.SetPropertyValue%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład sprawdza istnienie właściwości punktu pióro przed ustawieniem wartości właściwości. W tym przykładzie założono, że istnieje <xref:System.Windows.Input.StylusPoint> o nazwie `point`.  
  
 [!code-csharp[PacketSpy#12](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#12)]
 [!code-vb[PacketSpy#12](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="stylusPointProperty" /> nie jest jedną z właściwości w <see cref="P:System.Windows.Input.StylusPoint.Description" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToPoint">
      <MemberSignature Language="C#" Value="public System.Windows.Point ToPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Point ToPoint() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.ToPoint" />
      <MemberSignature Language="VB.NET" Value="Public Function ToPoint () As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Point ToPoint();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje <see cref="T:System.Windows.Input.StylusPoint" /> do <see cref="T:System.Windows.Point" />.</summary>
        <returns>A <see cref="T:System.Windows.Point" /> struktury.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public double X { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 X" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.StylusPoint.X" />
      <MemberSignature Language="VB.NET" Value="Public Property X As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double X { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość współrzędną x <see cref="T:System.Windows.Input.StylusPoint" />.</summary>
        <value>Współrzędna x <see cref="T:System.Windows.Input.StylusPoint" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład pobiera <xref:System.Windows.Input.StylusPoint.X%2A> właściwości dla każdego <xref:System.Windows.Input.StylusPoint> w <xref:System.Windows.Input.StylusPointCollection>. W tym przykładzie założono, że istnieje <xref:System.Windows.Controls.TextBlock> o nazwie `packetOutput`.  
  
 [!code-csharp[PacketSpy#3](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#3)]
 [!code-vb[PacketSpy#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#3)]  
[!code-csharp[PacketSpy#4](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#4)]
[!code-vb[PacketSpy#4](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public double Y { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Y" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.StylusPoint.Y" />
      <MemberSignature Language="VB.NET" Value="Public Property Y As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Y { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia współrzędną y <see cref="T:System.Windows.Input.StylusPoint" />.</summary>
        <value>Współrzędna y <see cref="T:System.Windows.Input.StylusPoint" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład pobiera <xref:System.Windows.Input.StylusPoint.Y%2A> właściwości dla każdego <xref:System.Windows.Input.StylusPoint> w <xref:System.Windows.Input.StylusPointCollection>. W tym przykładzie założono, że istnieje <xref:System.Windows.Controls.TextBlock> o nazwie `packetOutput`.  
  
 [!code-csharp[PacketSpy#3](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#3)]
 [!code-vb[PacketSpy#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#3)]  
[!code-csharp[PacketSpy#4](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#4)]
[!code-vb[PacketSpy#4](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>