<Type Name="CanExecuteRoutedEventArgs" FullName="System.Windows.Input.CanExecuteRoutedEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fbec0a81b7258d70c24d1eb064a0edbead2570ab" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69174206" /></Metadata><TypeSignature Language="C#" Value="public sealed class CanExecuteRoutedEventArgs : System.Windows.RoutedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CanExecuteRoutedEventArgs extends System.Windows.RoutedEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CanExecuteRoutedEventArgs&#xA;Inherits RoutedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class CanExecuteRoutedEventArgs sealed : System::Windows::RoutedEventArgs" />
  <TypeSignature Language="F#" Value="type CanExecuteRoutedEventArgs = class&#xA;    inherit RoutedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.RoutedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Dostarcza dane dla <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> zdarzeń i <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /> .</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj źródło poleceń, takie jak <xref:System.Windows.Controls.MenuItem>, wywoła <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> metodę w <xref:System.Windows.Input.RoutedCommand> celu ustalenia, czy polecenie może być wykonane lub nie można wykonać na bieżącym obiekcie docelowym polecenia.  Jeśli <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> jest ustawiona na `false` z programu obsługi zdarzeń, źródło polecenia spowoduje wyłączenie samego siebie.  Na przykład jeśli <xref:System.Windows.Controls.MenuItem> działa jako źródło poleceń dla polecenia i nie można wykonać polecenia na bieżącym obiekcie docelowym polecenia, spowoduje to <xref:System.Windows.Controls.MenuItem> szare.  
  
 <xref:System.Windows.Input.ICommand.CanExecuteChanged> Zdarzenie powiadamia źródło polecenia, gdy możliwość wykonania polecenia mogła ulec zmianie.  
  
   
  
## Examples  
 W poniższym przykładzie jest tworzona <xref:System.Windows.Input.CanExecuteRoutedEventHandler> funkcja, `true` która zwraca tylko wtedy, gdy obiektem docelowym polecenia jest formant.  Po pierwsze <xref:System.Windows.RoutedEventArgs.Source%2A> , jest rzutowany <xref:System.Windows.Controls.Control>na.  Jeśli <xref:System.Windows.RoutedEventArgs.Source%2A> `false`jest, jestustawiona`true`na; w przeciwnym razie jest ustawiona na. <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> <xref:System.Windows.Controls.Control>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
  </Docs>
  <Members>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanExecute" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Property CanExecute As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanExecute { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanExecute : bool with get, set" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy <see cref="T:System.Windows.Input.RoutedCommand" /> skojarzona z tym zdarzeniem może być wykonywana na obiekcie docelowym polecenia.</summary>
        <value><see langword="true" />Jeśli zdarzenie można wykonać na obiekcie docelowym polecenia; w przeciwnym razie. <see langword="false" />  Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wiele źródeł poleceń, takich jak <xref:System.Windows.Controls.MenuItem> i <xref:System.Windows.Controls.Button>, jest wyłączonych <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> , `false` gdy jest i włączone <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> , `true`gdy jest.  
  
   
  
## Examples  
 W poniższym przykładzie jest tworzony <xref:System.Windows.Input.CanExecuteRoutedEventHandler> element, który zwraca wartość true tylko wtedy, gdy obiektem docelowym polecenia jest formant.  <xref:System.Windows.Controls.Control>Najpierw dane <xref:System.Windows.RoutedEventArgs.Source%2A> zdarzenia są rzutowane na.  Jeśli jest <xref:System.Windows.Controls.Control>, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> jest ustawiona na `true`; w przeciwnym razie jest ustawiona na `false`.  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera polecenie skojarzone z tym zdarzeniem.</summary>
        <value>Polecenie. Jeśli polecenie nie jest poleceniem niestandardowym, zwykle <see cref="T:System.Windows.Input.RoutedCommand" />jest to. Nie ma żadnej wartości domyślnej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat poleceń, zobacz [Omówienie poleceń](~/docs/framework/wpf/advanced/commanding-overview.md).  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Windows.Input.CanExecuteRoutedEventHandler> , który obsługuje wiele poleceń.  `false` <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> `IsPlaying` <xref:System.Windows.Input.MediaCommands.Play%2A> `true` `false`Jeśli właściwość jest równa poleceniu, a Metoda<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> zwraca wartość, jest ustawiona na; w przeciwnym razie jest ustawiona na. <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A>  `true` <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> `IsPlaying` <xref:System.Windows.Input.MediaCommands.Stop%2A> `true` `false`Jeśli właściwość jest równa poleceniu, a Metoda<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> zwraca wartość, jest ustawiona na; w przeciwnym razie jest ustawiona na. <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewmultiplecanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewmultiplecanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="ContinueRouting">
      <MemberSignature Language="C#" Value="public bool ContinueRouting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContinueRouting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting" />
      <MemberSignature Language="VB.NET" Value="Public Property ContinueRouting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ContinueRouting { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ContinueRouting : bool with get, set" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa, czy wejściowe zdarzenie, które wywołało polecenie, powinno nadal być kierowane przez drzewo elementów.</summary>
        <value><see langword="true" />Jeśli zdarzenie kierowane powinno nadal być kierowane przez drzewo elementów; w przeciwnym razie. <see langword="false" />   Wartość domyślna to <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object target);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, target As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ target);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="canExecuteRoutedEventArgs.InvokeEventHandler (genericHandler, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public object Parameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parameter { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parameter : obj" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.Parameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera dane specyficzne dla polecenia.</summary>
        <value>Dane polecenia.  Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametr polecenia służy do przekazywania określonych informacji do polecenia podczas jego wykonywania.  Typ danych jest definiowany przez polecenie.  
  
 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter%2A>może być `null`. Wiele poleceń nie przetwarza ani nie oczekuje parametrów polecenia.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, aby użyć <xref:System.Windows.Controls.Button> jako źródła poleceń polecenia niestandardowego.  <xref:System.Windows.Input.RoutedCommand> <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> <xref:System.Windows.Controls.Slider> Właściwość obiektu jest ustawiona na niestandardową <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> , a służy do przekazywania wartości właściwości formantu. `customCommand` <xref:System.Windows.Input.ICommandSource.Command%2A> <xref:System.Windows.Controls.Button>  Jest to realizowane za pomocą wiązania z danymi, aby <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> powiązać <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> z właściwością.  Konwerter w wyrażeniu powiązania jest niestandardowym <xref:System.Windows.Data.IValueConverter> , który <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> jest konwertowany <xref:System.Int32> na element przed powiązaniem <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>go z.  
  
 [!code-xaml[invalidaterequerywithdispatchertimer#InvalidateSampleSliderCommandParameter](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml#invalidatesampleslidercommandparameter)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>
