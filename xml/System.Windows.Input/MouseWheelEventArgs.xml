<Type Name="MouseWheelEventArgs" FullName="System.Windows.Input.MouseWheelEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8bf7fa23eb7098539b41a21329f53a18f6e895cb" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37504274" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MouseWheelEventArgs : System.Windows.Input.MouseEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MouseWheelEventArgs extends System.Windows.Input.MouseEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.MouseWheelEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class MouseWheelEventArgs&#xA;Inherits MouseEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class MouseWheelEventArgs : System::Windows::Input::MouseEventArgs" />
  <TypeSignature Language="F#" Value="type MouseWheelEventArgs = class&#xA;    inherit MouseEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.MouseEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia dane dla różnych zdarzeń, które raportu zmieni się na wartość różnicy kółka myszy urządzeń myszy.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.MouseWheelEventArgs> jest używana z następujących zdarzeń:  
  
-   <xref:System.Windows.UIElement.MouseWheel?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.MouseWheel?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> (dołączone zdarzenie)  
  
-   <xref:System.Windows.UIElement.PreviewMouseWheel?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.PreviewMouseWheel?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> (dołączone zdarzenie)  
  
 <xref:System.Windows.Input.MouseWheelEventArgs.Delta%2A> Właściwość jest pozytywny, jeśli kółkiem jest przenoszony w górę lub do przodu (od użytkownika) lub ujemna, jeśli kółkiem jest przenoszony w dół lub do tyłu (do użytkownika).  
  
 To zdarzenie jest wywoływane nawet w przypadku ruchy kółka myszy małe. W niektórych scenariuszach należy zaimplementować programów obsługi, które ograniczania różnic kółka myszy małe, sprawdzając, czy różnicowej przekroczy określony próg. W przeciwnym razie może wywołać programu obsługi w przypadkach, w którym zostało tak mały, że wszelkie interfejs użytkownika, który jest powiązany z ruch kółka myszy nie będzie aktualizował delta kółka myszy. Dokładnie jak zaimplementować to zachowanie próg w obsłudze i czymś co powinno być progu jest całkowicie specyficzne dla implementacji.  
  
   
  
## Examples  
 W poniższym przykładzie <xref:System.Windows.Controls.TextBox> wyżej, jeśli kółka myszy <xref:System.Windows.Input.MouseWheelEventArgs.Delta%2A> jest dodatnia i przenosi <xref:System.Windows.Controls.TextBox> Jeśli kółka myszy <xref:System.Windows.Input.MouseWheelEventArgs.Delta%2A> jest ujemna. <xref:System.Windows.Controls.TextBox> Jest dołączony do <xref:System.Windows.Controls.Canvas>.  
  
 [!code-csharp[mousesnippetsample#MouseWheelDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseSnippetSample/CSharp/Window1.xaml.cs#mousewheeldelta)]
 [!code-vb[mousesnippetsample#MouseWheelDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseSnippetSample/visualbasic/window1.xaml.vb#mousewheeldelta)]  
  
 ]]></format>
    </remarks>
    <altmember cref="F:System.Windows.Input.Mouse.MouseWheelDeltaForOneLine" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MouseWheelEventArgs (System.Windows.Input.MouseDevice mouse, int timestamp, int delta);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.MouseDevice mouse, int32 timestamp, int32 delta) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.MouseWheelEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mouse As MouseDevice, timestamp As Integer, delta As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MouseWheelEventArgs(System::Windows::Input::MouseDevice ^ mouse, int timestamp, int delta);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.MouseWheelEventArgs : System.Windows.Input.MouseDevice * int * int -&gt; System.Windows.Input.MouseWheelEventArgs" Usage="new System.Windows.Input.MouseWheelEventArgs (mouse, timestamp, delta)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mouse" Type="System.Windows.Input.MouseDevice" />
        <Parameter Name="timestamp" Type="System.Int32" />
        <Parameter Name="delta" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="mouse">Urządzenie myszy skojarzony z tym zdarzeniem.</param>
        <param name="timestamp">Czas, kiedy wystąpił danych wejściowych.</param>
        <param name="delta">Kwota pokrętło została zmieniona.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delta">
      <MemberSignature Language="C#" Value="public int Delta { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Delta" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.MouseWheelEventArgs.Delta" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Delta As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Delta { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Delta : int" Usage="System.Windows.Input.MouseWheelEventArgs.Delta" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość, która wskazuje ilość, które uległy zmianie kółka myszy.</summary>
        <value>Kwota pokrętło została zmieniona. Ta wartość jest dodatnia, jeśli kółka myszy obraca się w górę kierunku (od użytkownika) lub ujemna, jeśli kółka myszy obraca się w kierunku w dół (u użytkownika).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Skuteczne górny i dolny zakresów tę wartość potencjalnie pochodzą z urządzenia implementacji lub inne obiekty wywołujące wywołała zdarzenie, a nie w związku z tym są zdefiniowane.  
  
   
  
## Examples  
 W poniższym przykładzie <xref:System.Windows.Controls.TextBox> wyżej, jeśli kółka myszy <xref:System.Windows.Input.MouseWheelEventArgs.Delta%2A> jest dodatnia i przenosi <xref:System.Windows.Controls.TextBox> Jeśli kółka myszy <xref:System.Windows.Input.MouseWheelEventArgs.Delta%2A> jest ujemna. <xref:System.Windows.Controls.TextBox> Jest dołączony do <xref:System.Windows.Controls.Canvas>.  
  
 [!code-csharp[mousesnippetsample#MouseWheelDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseSnippetSample/CSharp/Window1.xaml.cs#mousewheeldelta)]
 [!code-vb[mousesnippetsample#MouseWheelDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseSnippetSample/visualbasic/window1.xaml.vb#mousewheeldelta)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Windows.Input.Mouse.MouseWheelDeltaForOneLine" />
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object genericTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.MouseWheelEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, genericTarget As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ genericTarget);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="mouseWheelEventArgs.InvokeEventHandler (genericHandler, genericTarget)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="genericTarget" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">Procedura obsługi typu ogólnego do wywołania w taki sposób, specyficzne dla danego typu.</param>
        <param name="genericTarget">Obiekt docelowy może wywołać program obsługi.</param>
        <summary>Wywołuje procedury obsługi zdarzeń w sposób specyficznych dla typu, co może zwiększyć wydajność systemu zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja rzutuje procedura obsługi typu ogólnego jako <xref:System.Windows.Input.MouseWheelEventHandler> , a następnie wywołuje on. Szczegółowe informacje na temat tego wzorca implementacji oraz jego przyczyny, <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A> i [Przegląd zdarzeń kierowane](~/docs/framework/wpf/advanced/routed-events-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>