<Type Name="KeyGesture" FullName="System.Windows.Input.KeyGesture">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="40d00dfcc3558103f3b9e2bec3945d189aacb49c" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36506810" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class KeyGesture : System.Windows.Input.InputGesture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyGesture extends System.Windows.Input.InputGesture" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.KeyGesture" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyGesture&#xA;Inherits InputGesture" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyGesture : System::Windows::Input::InputGesture" />
  <TypeSignature Language="F#" Value="type KeyGesture = class&#xA;    inherit InputGesture" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputGesture</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Input.KeyGestureConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Input.KeyGestureValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Określa kombinację klawiszy, który może służyć do wywołania polecenia.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W większości przypadków <xref:System.Windows.Input.KeyGesture> musi być skojarzony z co najmniej jednego <xref:System.Windows.Input.ModifierKeys>. Wyjątek od tej reguły są klawiszy funkcyjnych i klucze numerycznej, które mogą być prawidłowym <xref:System.Windows.Input.KeyGesture> samodzielnie. Na przykład można utworzyć <xref:System.Windows.Input.KeyGesture> przy użyciu tylko klawisz F12, ale umożliwia X klucza w <xref:System.Windows.Input.KeyGesture> go muszą łączyć się z klawisz modyfikujący.  
  
 Ogólnie rzecz biorąc można  
  
 Można użyć <xref:System.Windows.Input.KeyBinding> powiązać <xref:System.Windows.Input.KeyGesture> do <xref:System.Windows.Input.ICommand>, dzięki czemu polecenie jest wywoływane, gdy <xref:System.Windows.Input.KeyGesture> występuje.  
  
 Dla <xref:System.Windows.Input.KeyGesture> [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] użycia, właściwości, które zwykle są ustawione w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] jest <xref:System.Windows.Input.KeyBinding.Gesture%2A>, w przypadku której gestu reprezentuje zarówno klucz standard, jak i klucz modyfikujący. Można również ustawić <xref:System.Windows.Input.KeyBinding.Gesture%2A> właściwości właśnie klucza funkcji lub po prostu modyfikujący kombinacja klucza. Jednak częściej można ustawić są <xref:System.Windows.Input.KeyBinding.Key%2A> właściwości powiązania danego polecenia jest kluczem funkcji z brak modyfikatorów lub <xref:System.Windows.Input.KeyBinding.Modifiers%2A> Jeśli powiązanie zamierzone polecenie dotyczy tylko klawisze modyfikujące.  
  
<a name="xamlAttributeUsage_KeyGesture"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
  
```  
<object property="oneOrMoreModifierKeys+key"/>  
- or -  
<object property="functionKey"/>  
```  
  
<a name="xamlValues_KeyGesture"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 `functionKey`  
 <xref:System.Windows.Input.Key>  
  
 Jednego klucza wartość, która musi być jedną z klawiszy funkcyjnych (F1 – 12) lub klucze numerycznej.  
  
 `oneOrMoreModifierKeys`  
 Klawisze modyfikujące, zdefiniowane przez <xref:System.Windows.Input.ModifierKeys> wyliczenie rozdzielone znakiem "+".  
  
 `key`  
 <xref:System.Windows.Input.Key>  
  
 Pojedynczą wartość klucza.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób powiązania <xref:System.Windows.Input.ApplicationCommands.Close%2A> polecenie <xref:System.Windows.Input.KeyGesture> przy użyciu <xref:System.Windows.Input.KeyBinding>.  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 Poniższy przykład przedstawia użycie <xref:System.Windows.Input.KeyGesture> w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]. Należy pamiętać, że [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] użycie bezpośrednio nie deklaruje `<KeyGesture>` elementu. Użycie elementu obiektu nie jest możliwe ponieważ <xref:System.Windows.Input.KeyGesture> nie ujawniać publicznego konstruktora domyślnego. Zamiast tego [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] użycia używa zachowanie typeconverter do deklarowania cały <xref:System.Windows.Input.KeyGesture> wbudowanego jako `Gesture` wartość atrybutu.  
  
 [!code-xaml[commandWithHandler#CommandHandlerKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlerkeybinding)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.KeyBinding" />
    <altmember cref="T:System.Windows.Input.MouseBinding" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.InputGesture" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Input.KeyGesture" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyGesture (System.Windows.Input.Key key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.Key key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyGesture(System::Windows::Input::Key key);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyGesture : System.Windows.Input.Key -&gt; System.Windows.Input.KeyGesture" Usage="new System.Windows.Input.KeyGesture key" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
      </Parameters>
      <Docs>
        <param name="key">Klucz skojarzony z tym gestu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Input.KeyGesture" /> klasy z określonym <see cref="T:System.Windows.Input.Key" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W większości przypadków <xref:System.Windows.Input.KeyGesture> musi być skojarzony z co najmniej jednego <xref:System.Windows.Input.ModifierKeys>.  Wyjątek od tej reguły są klawiszy funkcyjnych i klucze numerycznej, które mogą być prawidłowym <xref:System.Windows.Input.KeyGesture> samodzielnie.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać ten konstruktor do tworzenia <xref:System.Windows.Input.KeyGesture> i skojarz ją z <xref:System.Windows.Input.KeyBinding>.  <xref:System.Windows.Input.KeyBinding> Jest dodawane do <xref:System.Windows.Input.InputBindingCollection> z <xref:System.Windows.Window>.  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithNoModifier](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithnomodifier)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithNoModifier](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithnomodifier)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="key" /> nie jest prawidłową <see cref="T:System.Windows.Input.Key" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="key" /> nie jest prawidłową <see cref="T:System.Windows.Input.KeyGesture" />.</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.Key key, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyGesture(System::Windows::Input::Key key, System::Windows::Input::ModifierKeys modifiers);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyGesture : System.Windows.Input.Key * System.Windows.Input.ModifierKeys -&gt; System.Windows.Input.KeyGesture" Usage="new System.Windows.Input.KeyGesture (key, modifiers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="key">Klucz skojarzony z gestu.</param>
        <param name="modifiers">Klawisze modyfikujące skojarzone z gestu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Input.KeyGesture" /> klasy z określonym <see cref="T:System.Windows.Input.Key" /> i <see cref="T:System.Windows.Input.ModifierKeys" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W większości przypadków <xref:System.Windows.Input.KeyGesture> musi być skojarzony z co najmniej jednego <xref:System.Windows.Input.ModifierKeys>. Wyjątek od tej reguły są klawiszy funkcyjnych i klucze numerycznej, które mogą być prawidłowym <xref:System.Windows.Input.KeyGesture> samodzielnie.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać ten konstruktor do tworzenia <xref:System.Windows.Input.KeyGesture> i skojarz ją z <xref:System.Windows.Input.KeyBinding>. <xref:System.Windows.Input.KeyBinding> Jest dodawane do <xref:System.Windows.Input.InputBindingCollection> z <xref:System.Windows.Window>.  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="modifiers" /> nie jest prawidłową <see cref="T:System.Windows.Input.ModifierKeys" /> - lub - <paramref name="key" /> nie jest prawidłową <see cref="T:System.Windows.Input.Key" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="key" /> i <paramref name="modifiers" /> nie tworzą prawidłową <see cref="T:System.Windows.Input.KeyGesture" />.</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers, string displayString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.Key key, valuetype System.Windows.Input.ModifierKeys modifiers, string displayString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyGesture(System::Windows::Input::Key key, System::Windows::Input::ModifierKeys modifiers, System::String ^ displayString);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyGesture : System.Windows.Input.Key * System.Windows.Input.ModifierKeys * string -&gt; System.Windows.Input.KeyGesture" Usage="new System.Windows.Input.KeyGesture (key, modifiers, displayString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
        <Parameter Name="displayString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Klucz skojarzony z gestu.</param>
        <param name="modifiers">Klawisze modyfikujące skojarzone z gestu.</param>
        <param name="displayString">Reprezentacja ciągu <see cref="T:System.Windows.Input.KeyGesture" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Input.KeyGesture" /> klasy z określonym <see cref="T:System.Windows.Input.Key" />, <see cref="T:System.Windows.Input.ModifierKeys" />, a ciąg wyświetlany.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.KeyGesture.DisplayString%2A> Właściwość jest ustawiona na `displayString` parametru.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="modifiers" /> nie jest prawidłową <see cref="T:System.Windows.Input.ModifierKeys" /> - lub - <paramref name="key" /> nie jest prawidłową <see cref="T:System.Windows.Input.Key" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="displayString" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="key" /> i <paramref name="modifiers" /> nie tworzą prawidłową <see cref="T:System.Windows.Input.KeyGesture" />.</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName="DisplayString">
      <MemberSignature Language="C#" Value="public string DisplayString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayString" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyGesture.DisplayString" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayString { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayString : string" Usage="System.Windows.Input.KeyGesture.DisplayString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera reprezentację ciągu tego <see cref="T:System.Windows.Input.KeyGesture" />.</summary>
        <value>Ciąg wyświetlany w tym <see cref="T:System.Windows.Input.KeyGesture" />. Wartość domyślna to <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie ustawiono ciągu wyświetlanego w konstruktorze, zwracany jest pustym ciągiem.  
  
 Jeśli ta właściwość jest pusta, <xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A> metoda zwraca ciąg utworzony na podstawie <xref:System.Windows.Input.KeyGesture.Key%2A> i <xref:System.Windows.Input.KeyGesture.Modifiers%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName="GetDisplayStringForCulture">
      <MemberSignature Language="C#" Value="public string GetDisplayStringForCulture (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetDisplayStringForCulture(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDisplayStringForCulture (culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetDisplayStringForCulture(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.GetDisplayStringForCulture : System.Globalization.CultureInfo -&gt; string" Usage="keyGesture.GetDisplayStringForCulture culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">Informacje specyficzne dla kultury.</param>
        <summary>Zwraca wartość typu ciąg, który może służyć do wyświetlenia <see cref="T:System.Windows.Input.KeyGesture" />.</summary>
        <returns>Ciąg wyświetlany</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ciąg wyświetlany została ustawiona przez konstruktora, który jest zwracany ciąg; w przeciwnym razie wartość ciągu jest tworzona na podstawie <xref:System.Windows.Input.KeyGesture.Key%2A> i <xref:System.Windows.Input.KeyGesture.Modifiers%2A> z jakiejkolwiek konwersji konieczne jest regulowane przez określony <xref:System.Globalization.CultureInfo> obiektu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key Key" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyGesture.Key" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Key As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key Key { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.Key : System.Windows.Input.Key" Usage="System.Windows.Input.KeyGesture.Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera klucz skojarzony z tym <see cref="T:System.Windows.Input.KeyGesture" />.</summary>
        <value>Klucz skojarzony z gestu.  Wartość domyślna to <see cref="F:System.Windows.Input.Key.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W większości przypadków <xref:System.Windows.Input.KeyGesture> musi być skojarzony z co najmniej jednego <xref:System.Windows.Input.ModifierKeys>.  Wyjątek od tej reguły są klawiszy funkcyjnych i klucze numerycznej, które mogą być prawidłowym <xref:System.Windows.Input.KeyGesture> samodzielnie.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public override bool Matches (object targetElement, System.Windows.Input.InputEventArgs inputEventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Matches(object targetElement, class System.Windows.Input.InputEventArgs inputEventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Matches(System::Object ^ targetElement, System::Windows::Input::InputEventArgs ^ inputEventArgs);" />
      <MemberSignature Language="F#" Value="override this.Matches : obj * System.Windows.Input.InputEventArgs -&gt; bool" Usage="keyGesture.Matches (targetElement, inputEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetElement" Type="System.Object" />
        <Parameter Name="inputEventArgs" Type="System.Windows.Input.InputEventArgs" />
      </Parameters>
      <Docs>
        <param name="targetElement">Element docelowy.</param>
        <param name="inputEventArgs">Dane wejściowe zdarzenia do porównania z tym gestu do.</param>
        <summary>Określa, czy to <see cref="T:System.Windows.Input.KeyGesture" /> odpowiada wejścia skojarzonego z określonym <see cref="T:System.Windows.Input.InputEventArgs" /> obiektu.</summary>
        <returns>
          <see langword="true" /> Jeśli dane zdarzenia odpowiada to <see cref="T:System.Windows.Input.KeyGesture" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `targetElement` może służyć do bardziej szczegółowych decyzji na Określa, czy polecenie powinna być wywoływana dla określonego elementu.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób test czy <xref:System.Windows.Input.KeyGesture> odpowiada wejścia skojarzonego z wystąpieniem <xref:System.Windows.Input.InputEventArgs>. A <xref:System.Windows.UIElement.KeyDown> tworzony jest program obsługi zdarzeń, który porównuje dane zdarzeń z <xref:System.Windows.Input.KeyGesture> przy użyciu <xref:System.Windows.Input.KeyGesture.Matches%2A> metody.  
  
 [!code-csharp[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keydownhandlerkeygesturematches)]
 [!code-vb[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keydownhandlerkeygesturematches)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ModifierKeys Modifiers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.ModifierKeys Modifiers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyGesture.Modifiers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Modifiers As ModifierKeys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ModifierKeys Modifiers { System::Windows::Input::ModifierKeys get(); };" />
      <MemberSignature Language="F#" Value="member this.Modifiers : System.Windows.Input.ModifierKeys" Usage="System.Windows.Input.KeyGesture.Modifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ModifierKeys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera klawisze modyfikujące skojarzony z tym <see cref="T:System.Windows.Input.KeyGesture" />.</summary>
        <value>Klawisze modyfikujące skojarzone z gestu. Wartość domyślna to <see cref="F:System.Windows.Input.ModifierKeys.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W większości przypadków <xref:System.Windows.Input.KeyGesture> musi być skojarzony z co najmniej jednego <xref:System.Windows.Input.ModifierKeys>. Wyjątek od tej reguły są klawiszy funkcyjnych i klucze numerycznej, które mogą być prawidłowym <xref:System.Windows.Input.KeyGesture> samodzielnie. Na przykład można utworzyć <xref:System.Windows.Input.KeyGesture> przy użyciu tylko klawisz F12, ale umożliwia X klucza w <xref:System.Windows.Input.KeyGesture> go muszą łączyć się z klawisz modyfikujący.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
  </Members>
</Type>